
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038f4  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a7a4  0800a7a4  0001a7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  0800a7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          00000320  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200003b4  200003b4  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021554  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003a59  00000000  00000000  00041618  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014a0  00000000  00000000  00045078  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012c8  00000000  00000000  00046518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a028  00000000  00000000  000477e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006231  00000000  00000000  00051808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00057a39  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058cc  00000000  00000000  00057ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e8c 	.word	0x08006e8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08006e8c 	.word	0x08006e8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f947 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f005 f968 	bl	80058a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f95f 	bl	80008c6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000620:	f000 f927 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000002c 	.word	0x2000002c
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	200000c8 	.word	0x200000c8

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000c8 	.word	0x200000c8

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f7      	bcc.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <NVIC_EnableIRQ+0x30>)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	f002 021f 	and.w	r2, r2, #31
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0b      	bge.n	800078c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <NVIC_SetPriority+0x4c>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	3b04      	subs	r3, #4
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078a:	e009      	b.n	80007a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <NVIC_SetPriority+0x50>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	2201      	movs	r2, #1
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	401a      	ands	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fa:	2101      	movs	r1, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	1e59      	subs	r1, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800083c:	f7ff ff90 	bl	8000760 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2f 	bl	80006c8 <NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff44 	bl	8000710 <NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff37 	bl	800072c <NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff febe 	bl	800066c <HAL_GetTick>
 80008f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e099      	b.n	8000a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2202      	movs	r2, #2
 8000908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	f022 0201 	bic.w	r2, r2, #1
 800091a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091c:	e00f      	b.n	800093e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800091e:	f7ff fea5 	bl	800066c <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b05      	cmp	r3, #5
 800092a:	d908      	bls.n	800093e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2220      	movs	r2, #32
 8000930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2203      	movs	r2, #3
 8000936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e078      	b.n	8000a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1e8      	bne.n	800091e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <HAL_DMA_Init+0x158>)
 8000958:	4013      	ands	r3, r2
 800095a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a1b      	ldr	r3, [r3, #32]
 8000988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4313      	orrs	r3, r2
 800098e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000994:	2b04      	cmp	r3, #4
 8000996:	d107      	bne.n	80009a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4313      	orrs	r3, r2
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f023 0307 	bic.w	r3, r3, #7
 80009be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d117      	bne.n	8000a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4313      	orrs	r3, r2
 80009da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f9e9 	bl	8000dbc <DMA_CheckFifoParam>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009fe:	2301      	movs	r3, #1
 8000a00:	e016      	b.n	8000a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f9a0 	bl	8000d50 <DMA_CalcBaseAndBitshift>
 8000a10:	4603      	mov	r3, r0
 8000a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a18:	223f      	movs	r2, #63	; 0x3f
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	f010803f 	.word	0xf010803f

08000a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a48:	4b92      	ldr	r3, [pc, #584]	; (8000c94 <HAL_DMA_IRQHandler+0x258>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_DMA_IRQHandler+0x25c>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0a9b      	lsrs	r3, r3, #10
 8000a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a66:	2208      	movs	r2, #8
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d01a      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	f022 0204 	bic.w	r2, r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a94:	2208      	movs	r2, #8
 8000a96:	409a      	lsls	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa0:	f043 0201 	orr.w	r2, r3, #1
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2201      	movs	r2, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d012      	beq.n	8000ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00b      	beq.n	8000ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aca:	2201      	movs	r2, #1
 8000acc:	409a      	lsls	r2, r3
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad6:	f043 0202 	orr.w	r2, r3, #2
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d012      	beq.n	8000b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b00:	2204      	movs	r2, #4
 8000b02:	409a      	lsls	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0c:	f043 0204 	orr.w	r2, r3, #4
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b18:	2210      	movs	r2, #16
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d043      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d03c      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b36:	2210      	movs	r2, #16
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d018      	beq.n	8000b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d108      	bne.n	8000b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d024      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	4798      	blx	r3
 8000b6a:	e01f      	b.n	8000bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d01b      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
 8000b7c:	e016      	b.n	8000bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d107      	bne.n	8000b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	f022 0208 	bic.w	r2, r2, #8
 8000b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 808e 	beq.w	8000cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8086 	beq.w	8000cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d136      	bne.n	8000c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	f022 0216 	bic.w	r2, r2, #22
 8000bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	6952      	ldr	r2, [r2, #20]
 8000c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d103      	bne.n	8000c16 <HAL_DMA_IRQHandler+0x1da>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	f022 0208 	bic.w	r2, r2, #8
 8000c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c2a:	223f      	movs	r2, #63	; 0x3f
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d07d      	beq.n	8000d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	4798      	blx	r3
        }
        return;
 8000c52:	e078      	b.n	8000d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d01c      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d108      	bne.n	8000c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d030      	beq.n	8000cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	4798      	blx	r3
 8000c80:	e02b      	b.n	8000cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d027      	beq.n	8000cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
 8000c92:	e022      	b.n	8000cda <HAL_DMA_IRQHandler+0x29e>
 8000c94:	2000002c 	.word	0x2000002c
 8000c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10f      	bne.n	8000cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	f022 0210 	bic.w	r2, r2, #16
 8000cb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d032      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d022      	beq.n	8000d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d807      	bhi.n	8000d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f2      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x2ca>
 8000d20:	e000      	b.n	8000d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	4798      	blx	r3
 8000d44:	e000      	b.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d46:	bf00      	nop
    }
  }
}
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop

08000d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3b10      	subs	r3, #16
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <DMA_CalcBaseAndBitshift+0x64>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <DMA_CalcBaseAndBitshift+0x68>)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d909      	bls.n	8000d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d86:	f023 0303 	bic.w	r3, r3, #3
 8000d8a:	1d1a      	adds	r2, r3, #4
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8000d90:	e007      	b.n	8000da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	aaaaaaab 	.word	0xaaaaaaab
 8000db8:	08006edc 	.word	0x08006edc

08000dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d11f      	bne.n	8000e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d855      	bhi.n	8000e88 <DMA_CheckFifoParam+0xcc>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <DMA_CheckFifoParam+0x28>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000e07 	.word	0x08000e07
 8000dec:	08000df5 	.word	0x08000df5
 8000df0:	08000e89 	.word	0x08000e89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d045      	beq.n	8000e8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e04:	e042      	b.n	8000e8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e0e:	d13f      	bne.n	8000e90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e14:	e03c      	b.n	8000e90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e1e:	d121      	bne.n	8000e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d836      	bhi.n	8000e94 <DMA_CheckFifoParam+0xd8>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <DMA_CheckFifoParam+0x70>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	08000e43 	.word	0x08000e43
 8000e34:	08000e3d 	.word	0x08000e3d
 8000e38:	08000e55 	.word	0x08000e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e40:	e02f      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d024      	beq.n	8000e98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e52:	e021      	b.n	8000e98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e5c:	d11e      	bne.n	8000e9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e62:	e01b      	b.n	8000e9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d902      	bls.n	8000e70 <DMA_CheckFifoParam+0xb4>
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d003      	beq.n	8000e76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e6e:	e018      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
      break;
 8000e74:	e015      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00e      	beq.n	8000ea0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
      break;
 8000e86:	e00b      	b.n	8000ea0 <DMA_CheckFifoParam+0xe4>
      break;
 8000e88:	bf00      	nop
 8000e8a:	e00a      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8000e8c:	bf00      	nop
 8000e8e:	e008      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8000e90:	bf00      	nop
 8000e92:	e006      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8000e94:	bf00      	nop
 8000e96:	e004      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8000e98:	bf00      	nop
 8000e9a:	e002      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000e9c:	bf00      	nop
 8000e9e:	e000      	b.n	8000ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ea0:	bf00      	nop
    }
  } 
  
  return status; 
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e03b      	b.n	8000f3a <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f004 fd0e 	bl	80058f8 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6852      	ldr	r2, [r2, #4]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f04:	f022 0107 	bic.w	r1, r2, #7
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6892      	ldr	r2, [r2, #8]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	68c9      	ldr	r1, [r1, #12]
 8000f26:	430b      	orrs	r3, r1
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af02      	add	r7, sp, #8
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_DMA2D_Start+0x1c>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e018      	b.n	8000f90 <HAL_DMA2D_Start+0x4e>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2202      	movs	r2, #2
 8000f6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 fa97 	bl	80014ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	f042 0201 	orr.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d056      	beq.n	8001066 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8000fb8:	f7ff fb58 	bl	800066c <HAL_GetTick>
 8000fbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8000fbe:	e04b      	b.n	8001058 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d023      	beq.n	800101a <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe0:	f043 0202 	orr.w	r2, r3, #2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2221      	movs	r2, #33	; 0x21
 8001004:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2204      	movs	r2, #4
 800100a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0a2      	b.n	8001160 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001020:	d01a      	beq.n	8001058 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <HAL_DMA2D_PollForTransfer+0xa0>
 8001028:	f7ff fb20 	bl	800066c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d90f      	bls.n	8001058 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	f043 0220 	orr.w	r2, r3, #32
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2203      	movs	r2, #3
 8001048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e083      	b.n	8001160 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0ac      	beq.n	8000fc0 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 800107e:	2b00      	cmp	r3, #0
 8001080:	d061      	beq.n	8001146 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001082:	f7ff faf3 	bl	800066c <HAL_GetTick>
 8001086:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001088:	e056      	b.n	8001138 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001098:	2b00      	cmp	r3, #0
 800109a:	d02e      	beq.n	80010fa <HAL_DMA2D_PollForTransfer+0x162>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010aa:	f043 0204 	orr.w	r2, r3, #4
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c0:	f043 0202 	orr.w	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2229      	movs	r2, #41	; 0x29
 80010e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2204      	movs	r2, #4
 80010ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e032      	b.n	8001160 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001100:	d01a      	beq.n	8001138 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d007      	beq.n	8001118 <HAL_DMA2D_PollForTransfer+0x180>
 8001108:	f7ff fab0 	bl	800066c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad2      	subs	r2, r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d90f      	bls.n	8001138 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	f043 0220 	orr.w	r2, r3, #32
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e013      	b.n	8001160 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0a1      	beq.n	800108a <HAL_DMA2D_PollForTransfer+0xf2>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2212      	movs	r2, #18
 800114c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d026      	beq.n	80011d8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d021      	beq.n	80011d8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2204      	movs	r2, #4
 80011bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d026      	beq.n	8001230 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d021      	beq.n	8001230 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011fa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2220      	movs	r2, #32
 8001202:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2204      	movs	r2, #4
 8001214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d026      	beq.n	8001288 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001240:	2b00      	cmp	r3, #0
 8001242:	d021      	beq.n	8001288 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001252:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001260:	f043 0204 	orr.w	r2, r3, #4
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2204      	movs	r2, #4
 800126c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d013      	beq.n	80012ba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00e      	beq.n	80012ba <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2204      	movs	r2, #4
 80012b2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f853 	bl	8001360 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d024      	beq.n	800130e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01f      	beq.n	800130e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012dc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2202      	movs	r2, #2
 80012e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01f      	beq.n	8001358 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d01a      	beq.n	8001358 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001330:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2210      	movs	r2, #16
 8001338:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f80e 	bl	8001374 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	3318      	adds	r3, #24
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA2D_ConfigLayer+0x30>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e070      	b.n	800149a <HAL_DMA2D_ConfigLayer+0x112>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b0a      	cmp	r3, #10
 80013ce:	d003      	beq.n	80013d8 <HAL_DMA2D_ConfigLayer+0x50>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d10c      	bne.n	80013f2 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e00a      	b.n	8001408 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	431a      	orrs	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	061b      	lsls	r3, r3, #24
 8001404:	4313      	orrs	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11e      	bne.n	800144c <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_DMA2D_ConfigLayer+0x120>)
 800141a:	400b      	ands	r3, r1
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	430b      	orrs	r3, r1
 8001420:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b0a      	cmp	r3, #10
 8001432:	d003      	beq.n	800143c <HAL_DMA2D_ConfigLayer+0xb4>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d125      	bne.n	8001488 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	68d2      	ldr	r2, [r2, #12]
 8001444:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
 800144a:	e01d      	b.n	8001488 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69d9      	ldr	r1, [r3, #28]
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_DMA2D_ConfigLayer+0x120>)
 8001458:	400b      	ands	r3, r1
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	430b      	orrs	r3, r1
 800145e:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b0a      	cmp	r3, #10
 8001470:	d003      	beq.n	800147a <HAL_DMA2D_ConfigLayer+0xf2>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b09      	cmp	r3, #9
 8001478:	d106      	bne.n	8001488 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001486:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	00fcfff0 	.word	0x00fcfff0

080014ac <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b08b      	sub	sp, #44	; 0x2c
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014d8:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	0410      	lsls	r0, r2, #16
 80014e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e2:	4302      	orrs	r2, r0
 80014e4:	430a      	orrs	r2, r1
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80014f8:	d174      	bne.n	80015e4 <DMA2D_SetConfig+0x138>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001500:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001508:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001510:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d108      	bne.n	8001532 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	431a      	orrs	r2, r3
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
 8001530:	e053      	b.n	80015da <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d106      	bne.n	8001548 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4313      	orrs	r3, r2
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	e048      	b.n	80015da <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d111      	bne.n	8001574 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19U);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	0cdb      	lsrs	r3, r3, #19
 8001554:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	0a9b      	lsrs	r3, r3, #10
 800155a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	015a      	lsls	r2, r3, #5
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	02db      	lsls	r3, r3, #11
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	4313      	orrs	r3, r2
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
 8001572:	e032      	b.n	80015da <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d117      	bne.n	80015ac <DMA2D_SetConfig+0x100>
    {
      tmp1 = (tmp1 >> 31U);
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	0fdb      	lsrs	r3, r3, #31
 8001580:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	0cdb      	lsrs	r3, r3, #19
 8001586:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	0adb      	lsrs	r3, r3, #11
 800158c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	431a      	orrs	r2, r3
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	03db      	lsls	r3, r3, #15
 80015a2:	431a      	orrs	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	e016      	b.n	80015da <DMA2D_SetConfig+0x12e>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	0f1b      	lsrs	r3, r3, #28
 80015b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	0d1b      	lsrs	r3, r3, #20
 80015b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	0b1b      	lsrs	r3, r3, #12
 80015bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	011a      	lsls	r2, r3, #4
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	431a      	orrs	r2, r3
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	031b      	lsls	r3, r3, #12
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80015e2:	e003      	b.n	80015ec <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	60da      	str	r2, [r3, #12]
}
 80015ec:	bf00      	nop
 80015ee:	372c      	adds	r7, #44	; 0x2c
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	e177      	b.n	8001904 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 8166 	bne.w	80018fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x4a>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d123      	bne.n	800168a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	69b9      	ldr	r1, [r7, #24]
 8001686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0203 	and.w	r2, r3, #3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d00b      	beq.n	80016de <HAL_GPIO_Init+0xe6>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d2:	2b11      	cmp	r3, #17
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d130      	bne.n	8001740 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80c0 	beq.w	80018fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_GPIO_Init+0x320>)
 8001784:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_GPIO_Init+0x320>)
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_GPIO_Init+0x320>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179a:	4a60      	ldr	r2, [pc, #384]	; (800191c <HAL_GPIO_Init+0x324>)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_GPIO_Init+0x328>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d037      	beq.n	8001836 <HAL_GPIO_Init+0x23e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x32c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_GPIO_Init+0x23a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a55      	ldr	r2, [pc, #340]	; (8001928 <HAL_GPIO_Init+0x330>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d02b      	beq.n	800182e <HAL_GPIO_Init+0x236>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <HAL_GPIO_Init+0x334>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d025      	beq.n	800182a <HAL_GPIO_Init+0x232>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a53      	ldr	r2, [pc, #332]	; (8001930 <HAL_GPIO_Init+0x338>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01f      	beq.n	8001826 <HAL_GPIO_Init+0x22e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_GPIO_Init+0x33c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x22a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a51      	ldr	r2, [pc, #324]	; (8001938 <HAL_GPIO_Init+0x340>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x226>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_GPIO_Init+0x344>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x222>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x348>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x21e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x34c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x21a>
 800180e:	2309      	movs	r3, #9
 8001810:	e012      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001812:	230a      	movs	r3, #10
 8001814:	e010      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001816:	2308      	movs	r3, #8
 8001818:	e00e      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800181a:	2307      	movs	r3, #7
 800181c:	e00c      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800181e:	2306      	movs	r3, #6
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001822:	2305      	movs	r3, #5
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_GPIO_Init+0x324>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_GPIO_Init+0x350>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187a:	4a33      	ldr	r2, [pc, #204]	; (8001948 <HAL_GPIO_Init+0x350>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_GPIO_Init+0x350>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a4:	4a28      	ldr	r2, [pc, #160]	; (8001948 <HAL_GPIO_Init+0x350>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_GPIO_Init+0x350>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_GPIO_Init+0x350>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_GPIO_Init+0x350>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_GPIO_Init+0x350>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f ae84 	bls.w	8001614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40023800 	.word	0x40023800
 800191c:	40013800 	.word	0x40013800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40021400 	.word	0x40021400
 8001938:	40021800 	.word	0x40021800
 800193c:	40021c00 	.word	0x40021c00
 8001940:	40022000 	.word	0x40022000
 8001944:	40022400 	.word	0x40022400
 8001948:	40013c00 	.word	0x40013c00

0800194c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0c8      	b.n	8001b5c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f003 ffb2 	bl	8005948 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019fc:	f001 ff50 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8001a00:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <HAL_I2C_Init+0x1b4>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4952      	ldr	r1, [pc, #328]	; (8001b68 <HAL_I2C_Init+0x1b8>)
 8001a20:	428b      	cmp	r3, r1
 8001a22:	d802      	bhi.n	8001a2a <HAL_I2C_Init+0x7a>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	e009      	b.n	8001a3e <HAL_I2C_Init+0x8e>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_I2C_Init+0x1bc>)
 8001a36:	fba1 1303 	umull	r1, r3, r1, r3
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_I2C_Init+0x1b8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d812      	bhi.n	8001a74 <HAL_I2C_Init+0xc4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d906      	bls.n	8001a70 <HAL_I2C_Init+0xc0>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	e045      	b.n	8001afc <HAL_I2C_Init+0x14c>
 8001a70:	2304      	movs	r3, #4
 8001a72:	e043      	b.n	8001afc <HAL_I2C_Init+0x14c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_I2C_Init+0xec>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e010      	b.n	8001abe <HAL_I2C_Init+0x10e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x116>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01a      	b.n	8001afc <HAL_I2C_Init+0x14c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <HAL_I2C_Init+0x134>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae2:	e00b      	b.n	8001afc <HAL_I2C_Init+0x14c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001afc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	69d1      	ldr	r1, [r2, #28]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6a12      	ldr	r2, [r2, #32]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6911      	ldr	r1, [r2, #16]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68d2      	ldr	r2, [r2, #12]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6951      	ldr	r1, [r2, #20]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6992      	ldr	r2, [r2, #24]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	431bde83 	.word	0x431bde83
 8001b68:	000186a0 	.word	0x000186a0
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	817b      	strh	r3, [r7, #10]
 8001b80:	4613      	mov	r3, r2
 8001b82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b88:	f7fe fd70 	bl	800066c <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80ee 	bne.w	8001d78 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4977      	ldr	r1, [pc, #476]	; (8001d84 <HAL_I2C_Master_Transmit+0x214>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fc6c 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0e1      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x54>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0da      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_I2C_Master_Transmit+0x218>)
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fadc 	bl	80021f0 <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00f      	beq.n	8001c5e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d105      	bne.n	8001c52 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e093      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e08d      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001c74:	e066      	b.n	8001d44 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fcc1 	bl	8002602 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00f      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d109      	bne.n	8001ca2 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06b      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e069      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	1c58      	adds	r0, r3, #1
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	6248      	str	r0, [r1, #36]	; 0x24
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d119      	bne.n	8001d14 <HAL_I2C_Master_Transmit+0x1a4>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d015      	beq.n	8001d14 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	1c58      	adds	r0, r3, #1
 8001cf2:	68f9      	ldr	r1, [r7, #12]
 8001cf4:	6248      	str	r0, [r1, #36]	; 0x24
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	6a39      	ldr	r1, [r7, #32]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fcaf 	bl	800267c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00f      	beq.n	8001d44 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d109      	bne.n	8001d40 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01c      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e01a      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d194      	bne.n	8001c76 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	00100002 	.word	0x00100002
 8001d88:	ffff0000 	.word	0xffff0000

08001d8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	817b      	strh	r3, [r7, #10]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da4:	f7fe fc62 	bl	800066c <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	f040 8215 	bne.w	80021e2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2319      	movs	r3, #25
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4985      	ldr	r1, [pc, #532]	; (8001fd8 <HAL_I2C_Master_Receive+0x24c>)
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fb5e 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e208      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2C_Master_Receive+0x54>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e201      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d007      	beq.n	8001e06 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2222      	movs	r2, #34	; 0x22
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2210      	movs	r2, #16
 8001e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	893a      	ldrh	r2, [r7, #8]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a68      	ldr	r2, [pc, #416]	; (8001fdc <HAL_I2C_Master_Receive+0x250>)
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fa50 	bl	80022f4 <I2C_MasterRequestRead>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00f      	beq.n	8001e7a <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d105      	bne.n	8001e6e <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1ba      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1b4      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d113      	bne.n	8001eaa <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	623b      	str	r3, [r7, #32]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e188      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d11b      	bne.n	8001eea <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e168      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d11b      	bne.n	8001f2a <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	e148      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001f50:	e134      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	f200 80eb 	bhi.w	8002132 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d127      	bne.n	8001fb4 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fbc4 	bl	80026f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e131      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e12f      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	6912      	ldr	r2, [r2, #16]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fb2:	e103      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d14a      	bne.n	8002052 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4906      	ldr	r1, [pc, #24]	; (8001fe0 <HAL_I2C_Master_Receive+0x254>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fa5c 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e106      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
 8001fd6:	bf00      	nop
 8001fd8:	00100002 	.word	0x00100002
 8001fdc:	ffff0000 	.word	0xffff0000
 8001fe0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	6251      	str	r1, [r2, #36]	; 0x24
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	6912      	ldr	r2, [r2, #16]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	6251      	str	r1, [r2, #36]	; 0x24
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	6912      	ldr	r2, [r2, #16]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002050:	e0b4      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	2200      	movs	r2, #0
 800205a:	4964      	ldr	r1, [pc, #400]	; (80021ec <HAL_I2C_Master_Receive+0x460>)
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fa11 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0bb      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	6251      	str	r1, [r2, #36]	; 0x24
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	6912      	ldr	r2, [r2, #16]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	2200      	movs	r2, #0
 80020b2:	494e      	ldr	r1, [pc, #312]	; (80021ec <HAL_I2C_Master_Receive+0x460>)
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f9e5 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e08f      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6251      	str	r1, [r2, #36]	; 0x24
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6912      	ldr	r2, [r2, #16]
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	6251      	str	r1, [r2, #36]	; 0x24
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	6912      	ldr	r2, [r2, #16]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002130:	e044      	b.n	80021bc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fadd 	bl	80026f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b20      	cmp	r3, #32
 8002148:	d101      	bne.n	800214e <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e04a      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e048      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	6251      	str	r1, [r2, #36]	; 0x24
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	6912      	ldr	r2, [r2, #16]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d116      	bne.n	80021bc <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6251      	str	r1, [r2, #36]	; 0x24
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	6912      	ldr	r2, [r2, #16]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f47f aec6 	bne.w	8001f52 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	00010004 	.word	0x00010004

080021f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d006      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d003      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002218:	d108      	bne.n	800222c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e00b      	b.n	8002244 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	2b12      	cmp	r3, #18
 8002232:	d107      	bne.n	8002244 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f917 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e040      	b.n	80022e2 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002268:	d107      	bne.n	800227a <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	897a      	ldrh	r2, [r7, #10]
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002276:	611a      	str	r2, [r3, #16]
 8002278:	e021      	b.n	80022be <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	897a      	ldrh	r2, [r7, #10]
 8002280:	11d2      	asrs	r2, r2, #7
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 0206 	and.w	r2, r2, #6
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f062 020f 	orn	r2, r2, #15
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4915      	ldr	r1, [pc, #84]	; (80022ec <I2C_MasterRequestWrite+0xfc>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f944 	bl	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d101      	bne.n	80022b0 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e018      	b.n	80022e2 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e016      	b.n	80022e2 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	897a      	ldrh	r2, [r7, #10]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	490b      	ldr	r1, [pc, #44]	; (80022f0 <I2C_MasterRequestWrite+0x100>)
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f92e 	bl	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d101      	bne.n	80022dc <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e002      	b.n	80022e2 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e000      	b.n	80022e2 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	00010008 	.word	0x00010008
 80022f0:	00010002 	.word	0x00010002

080022f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002318:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d006      	beq.n	800232e <I2C_MasterRequestRead+0x3a>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <I2C_MasterRequestRead+0x3a>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800232c:	d108      	bne.n	8002340 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e00b      	b.n	8002358 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	2b11      	cmp	r3, #17
 8002346:	d107      	bne.n	8002358 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f88d 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e07f      	b.n	8002474 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	897a      	ldrh	r2, [r7, #10]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e05f      	b.n	8002450 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	897a      	ldrh	r2, [r7, #10]
 8002396:	11d2      	asrs	r2, r2, #7
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 0206 	and.w	r2, r2, #6
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f062 020f 	orn	r2, r2, #15
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4933      	ldr	r1, [pc, #204]	; (800247c <I2C_MasterRequestRead+0x188>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f8b9 	bl	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d101      	bne.n	80023c6 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e056      	b.n	8002474 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e054      	b.n	8002474 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	897a      	ldrh	r2, [r7, #10]
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4929      	ldr	r1, [pc, #164]	; (8002480 <I2C_MasterRequestRead+0x18c>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f8a3 	bl	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d101      	bne.n	80023f2 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e040      	b.n	8002474 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03e      	b.n	8002474 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f82b 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e01d      	b.n	8002474 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	897a      	ldrh	r2, [r7, #10]
 800243e:	11d2      	asrs	r2, r2, #7
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 0206 	and.w	r2, r2, #6
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f062 020e 	orn	r2, r2, #14
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	490a      	ldr	r1, [pc, #40]	; (8002480 <I2C_MasterRequestRead+0x18c>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f865 	bl	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b04      	cmp	r3, #4
 8002468:	d101      	bne.n	800246e <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e002      	b.n	8002474 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e000      	b.n	8002474 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	00010008 	.word	0x00010008
 8002480:	00010002 	.word	0x00010002

08002484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002494:	e01f      	b.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249c:	d01b      	beq.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024a4:	f7fe f8e2 	bl	800066c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	1ad2      	subs	r2, r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d910      	bls.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e023      	b.n	800251e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10d      	bne.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x78>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	e00c      	b.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x92>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	429a      	cmp	r2, r3
 800251a:	d0bc      	beq.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002534:	e040      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002544:	d11c      	bne.n	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800255e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2204      	movs	r2, #4
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e03c      	b.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002586:	d017      	beq.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800258e:	f7fe f86d 	bl	800066c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	1ad2      	subs	r2, r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e020      	b.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10c      	bne.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e00b      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d19e      	bne.n	8002536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260e:	e029      	b.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f8ba 	bl	800278a <I2C_IsAcknowledgeFailed>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e029      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002626:	d01d      	beq.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800262e:	f7fe f81d 	bl	800066c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad2      	subs	r2, r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d912      	bls.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e007      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d1ce      	bne.n	8002610 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002688:	e029      	b.n	80026de <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f87d 	bl	800278a <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e029      	b.n	80026ee <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a0:	d01d      	beq.n	80026de <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026a8:	f7fd ffe0 	bl	800066c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad2      	subs	r2, r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d912      	bls.n	80026de <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e007      	b.n	80026ee <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d1ce      	bne.n	800268a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002702:	e036      	b.n	8002772 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d114      	bne.n	800273c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0210 	mvn.w	r2, #16
 800271a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e022      	b.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002742:	f7fd ff93 	bl	800066c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad2      	subs	r2, r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d90f      	bls.n	8002772 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e007      	b.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d1c1      	bne.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a0:	d114      	bne.n	80027cc <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027aa:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2204      	movs	r2, #4
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d129      	bne.n	8002844 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	; 0x24
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002812:	f022 0210 	bic.w	r2, r2, #16
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b20      	cmp	r3, #32
 800286a:	d12a      	bne.n	80028c2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800288c:	89fb      	ldrh	r3, [r7, #14]
 800288e:	f023 030f 	bic.w	r3, r3, #15
 8002892:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	4313      	orrs	r3, r2
 800289c:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	89fa      	ldrh	r2, [r7, #14]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 80028c2:	2302      	movs	r3, #2
  }
}  
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0bf      	b.n	8002a6a <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f003 f8f0 	bl	8005ae4 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	6992      	ldr	r2, [r2, #24]
 8002916:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800291a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	6991      	ldr	r1, [r2, #24]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6850      	ldr	r0, [r2, #4]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002934:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6912      	ldr	r2, [r2, #16]
 800293a:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800293c:	430a      	orrs	r2, r1
 800293e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_LTDC_Init+0x1a4>)
 800294c:	400b      	ands	r3, r1
 800294e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	6891      	ldr	r1, [r2, #8]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6990      	ldr	r0, [r2, #24]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4302      	orrs	r2, r0
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68d9      	ldr	r1, [r3, #12]
 8002978:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <HAL_LTDC_Init+0x1a4>)
 800297a:	400b      	ands	r3, r1
 800297c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	68d1      	ldr	r1, [r2, #12]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6a10      	ldr	r0, [r2, #32]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4302      	orrs	r2, r0
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6919      	ldr	r1, [r3, #16]
 80029a6:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_LTDC_Init+0x1a4>)
 80029a8:	400b      	ands	r3, r1
 80029aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	6911      	ldr	r1, [r2, #16]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4302      	orrs	r2, r0
 80029c6:	430a      	orrs	r2, r1
 80029c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_LTDC_Init+0x1a4>)
 80029d6:	400b      	ands	r3, r1
 80029d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6951      	ldr	r1, [r2, #20]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4302      	orrs	r2, r0
 80029f4:	430a      	orrs	r2, r1
 80029f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a26:	68b8      	ldr	r0, [r7, #8]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4302      	orrs	r2, r0
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002a32:	4302      	orrs	r2, r0
 8002a34:	430a      	orrs	r2, r1
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a42:	f042 0206 	orr.w	r2, r2, #6
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	6992      	ldr	r2, [r2, #24]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	f000f800 	.word	0xf000f800

08002a78 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <HAL_LTDC_IRQHandler+0x6a>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01e      	beq.n	8002ae2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f86f 	bl	8002bc0 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_LTDC_IRQHandler+0xbc>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01e      	beq.n	8002b34 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b00:	f022 0202 	bic.w	r2, r2, #2
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b14:	f043 0202 	orr.w	r2, r3, #2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f846 	bl	8002bc0 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01b      	beq.n	8002b76 <HAL_LTDC_IRQHandler+0xfe>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d016      	beq.n	8002b76 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f82f 	bl	8002bd4 <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_LTDC_IRQHandler+0x140>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b94:	f022 0208 	bic.w	r2, r2, #8
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f818 	bl	8002be8 <HAL_LTDC_ReloadEventCallback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002bfc:	b5b0      	push	{r4, r5, r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_LTDC_ConfigLayer+0x1a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e02c      	b.n	8002c70 <HAL_LTDC_ConfigLayer+0x74>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2134      	movs	r1, #52	; 0x34
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f847 	bl	8002ce4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdb0      	pop	{r4, r5, r7, pc}

08002c78 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_LTDC_SetAddress+0x1a>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e024      	b.n	8002cdc <HAL_LTDC_SetAddress+0x64>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2234      	movs	r2, #52	; 0x34
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	3338      	adds	r3, #56	; 0x38
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6979      	ldr	r1, [r7, #20]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f811 	bl	8002ce4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	4413      	add	r3, r2
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	01db      	lsls	r3, r3, #7
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3384      	adds	r3, #132	; 0x84
 8002d20:	461a      	mov	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	01db      	lsls	r3, r3, #7
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3384      	adds	r3, #132	; 0x84
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d36:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	01db      	lsls	r3, r3, #7
 8002d42:	4413      	add	r3, r2
 8002d44:	3384      	adds	r3, #132	; 0x84
 8002d46:	4619      	mov	r1, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	4413      	add	r3, r2
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d70:	4413      	add	r3, r2
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	01db      	lsls	r3, r3, #7
 8002d80:	4413      	add	r3, r2
 8002d82:	3384      	adds	r3, #132	; 0x84
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	01db      	lsls	r3, r3, #7
 8002d90:	440b      	add	r3, r1
 8002d92:	3384      	adds	r3, #132	; 0x84
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	01db      	lsls	r3, r3, #7
 8002da6:	4413      	add	r3, r2
 8002da8:	3384      	adds	r3, #132	; 0x84
 8002daa:	4619      	mov	r1, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dba:	4413      	add	r3, r2
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	01db      	lsls	r3, r3, #7
 8002dce:	4413      	add	r3, r2
 8002dd0:	3384      	adds	r3, #132	; 0x84
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	01db      	lsls	r3, r3, #7
 8002dde:	440b      	add	r3, r1
 8002de0:	3384      	adds	r3, #132	; 0x84
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	4413      	add	r3, r2
 8002df6:	3384      	adds	r3, #132	; 0x84
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	01db      	lsls	r3, r3, #7
 8002e26:	4413      	add	r3, r2
 8002e28:	3384      	adds	r3, #132	; 0x84
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	01db      	lsls	r3, r3, #7
 8002e36:	4413      	add	r3, r2
 8002e38:	3384      	adds	r3, #132	; 0x84
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	01db      	lsls	r3, r3, #7
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3384      	adds	r3, #132	; 0x84
 8002e4e:	4619      	mov	r1, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e56:	461a      	mov	r2, r3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	01db      	lsls	r3, r3, #7
 8002e70:	4413      	add	r3, r2
 8002e72:	3384      	adds	r3, #132	; 0x84
 8002e74:	461a      	mov	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	440b      	add	r3, r1
 8002e82:	3384      	adds	r3, #132	; 0x84
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e8a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	01db      	lsls	r3, r3, #7
 8002e96:	4413      	add	r3, r2
 8002e98:	3384      	adds	r3, #132	; 0x84
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	01db      	lsls	r3, r3, #7
 8002eac:	4413      	add	r3, r2
 8002eae:	3384      	adds	r3, #132	; 0x84
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	01db      	lsls	r3, r3, #7
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3384      	adds	r3, #132	; 0x84
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ec6:	f023 0307 	bic.w	r3, r3, #7
 8002eca:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	01db      	lsls	r3, r3, #7
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3384      	adds	r3, #132	; 0x84
 8002eda:	4619      	mov	r1, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	01db      	lsls	r3, r3, #7
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3384      	adds	r3, #132	; 0x84
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	01db      	lsls	r3, r3, #7
 8002f02:	4413      	add	r3, r2
 8002f04:	3384      	adds	r3, #132	; 0x84
 8002f06:	461a      	mov	r2, r3
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	4413      	add	r3, r2
 8002f18:	3384      	adds	r3, #132	; 0x84
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e01b      	b.n	8002f68 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e014      	b.n	8002f68 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d00b      	beq.n	8002f5e <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d007      	beq.n	8002f5e <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d003      	beq.n	8002f5e <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f5a:	2b07      	cmp	r3, #7
 8002f5c:	d102      	bne.n	8002f64 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e001      	b.n	8002f68 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002f64:	2301      	movs	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	4413      	add	r3, r2
 8002f74:	3384      	adds	r3, #132	; 0x84
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	440b      	add	r3, r1
 8002f84:	3384      	adds	r3, #132	; 0x84
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	01db      	lsls	r3, r3, #7
 8002f98:	4413      	add	r3, r2
 8002f9a:	3384      	adds	r3, #132	; 0x84
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	3303      	adds	r3, #3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	01db      	lsls	r3, r3, #7
 8002fca:	4413      	add	r3, r2
 8002fcc:	3384      	adds	r3, #132	; 0x84
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	01db      	lsls	r3, r3, #7
 8002fda:	440b      	add	r3, r1
 8002fdc:	3384      	adds	r3, #132	; 0x84
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fe4:	f023 0307 	bic.w	r3, r3, #7
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	01db      	lsls	r3, r3, #7
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3384      	adds	r3, #132	; 0x84
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	01db      	lsls	r3, r3, #7
 800300a:	4413      	add	r3, r2
 800300c:	3384      	adds	r3, #132	; 0x84
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4619      	mov	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	01db      	lsls	r3, r3, #7
 800301a:	440b      	add	r3, r1
 800301c:	3384      	adds	r3, #132	; 0x84
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6013      	str	r3, [r2, #0]
}
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003044:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003060:	f7fd fb04 	bl	800066c <HAL_GetTick>
 8003064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003066:	e009      	b.n	800307c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003068:	f7fd fb00 	bl	800066c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003076:	d901      	bls.n	800307c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e01f      	b.n	80030bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800307c:	4b13      	ldr	r3, [pc, #76]	; (80030cc <HAL_PWREx_EnableOverDrive+0x98>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d1ee      	bne.n	8003068 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003090:	f7fd faec 	bl	800066c <HAL_GetTick>
 8003094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003096:	e009      	b.n	80030ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003098:	f7fd fae8 	bl	800066c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a6:	d901      	bls.n	80030ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e007      	b.n	80030bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_PWREx_EnableOverDrive+0x98>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b8:	d1ee      	bne.n	8003098 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	420e0040 	.word	0x420e0040
 80030cc:	40007000 	.word	0x40007000
 80030d0:	420e0044 	.word	0x420e0044

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e22d      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d075      	beq.n	80031de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f2:	4ba3      	ldr	r3, [pc, #652]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d00c      	beq.n	8003118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003106:	2b08      	cmp	r3, #8
 8003108:	d112      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b9d      	ldr	r3, [pc, #628]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003116:	d10b      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	4b99      	ldr	r3, [pc, #612]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05b      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d157      	bne.n	80031dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e208      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003138:	d106      	bne.n	8003148 <HAL_RCC_OscConfig+0x74>
 800313a:	4a91      	ldr	r2, [pc, #580]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	4b90      	ldr	r3, [pc, #576]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e01d      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x98>
 8003152:	4a8b      	ldr	r2, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	4b8a      	ldr	r3, [pc, #552]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4a88      	ldr	r2, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	4b87      	ldr	r3, [pc, #540]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
 800316c:	4a84      	ldr	r2, [pc, #528]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	4b84      	ldr	r3, [pc, #528]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4a81      	ldr	r2, [pc, #516]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	4b81      	ldr	r3, [pc, #516]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fd fa6e 	bl	800066c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003194:	f7fd fa6a 	bl	800066c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1cd      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0xc0>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fd fa5a 	bl	800066c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fd fa56 	bl	800066c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e1b9      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0xe8>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d063      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b62      	ldr	r3, [pc, #392]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x152>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e18d      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4956      	ldr	r1, [pc, #344]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	4b55      	ldr	r3, [pc, #340]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	e03a      	b.n	80032b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <HAL_RCC_OscConfig+0x2b0>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fd fa0f 	bl	800066c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003252:	f7fd fa0b 	bl	800066c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e16e      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	4b46      	ldr	r3, [pc, #280]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4943      	ldr	r1, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_OscConfig+0x2b0>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd f9ee 	bl	800066c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003294:	f7fd f9ea 	bl	800066c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e14d      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d030      	beq.n	8003320 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCC_OscConfig+0x2b4>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fd f9ce 	bl	800066c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fd f9ca 	bl	800066c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e12d      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x200>
 80032f2:	e015      	b.n	8003320 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x2b4>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fd f9b7 	bl	800066c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7fd f9b3 	bl	800066c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e116      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f0      	bne.n	8003302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a0 	beq.w	800346e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x2b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d121      	bne.n	80033ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_RCC_OscConfig+0x2b8>)
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_RCC_OscConfig+0x2b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fd f979 	bl	800066c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	e011      	b.n	80033a2 <HAL_RCC_OscConfig+0x2ce>
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000
 8003388:	42470e80 	.word	0x42470e80
 800338c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7fd f96c 	bl	800066c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0cf      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b6a      	ldr	r3, [pc, #424]	; (800354c <HAL_RCC_OscConfig+0x478>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2f0>
 80033b6:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033b8:	4b65      	ldr	r3, [pc, #404]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	e01c      	b.n	80033fe <HAL_RCC_OscConfig+0x32a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x312>
 80033cc:	4a60      	ldr	r2, [pc, #384]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033ce:	4b60      	ldr	r3, [pc, #384]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033da:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x32a>
 80033e6:	4a5a      	ldr	r2, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033e8:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033f4:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd f931 	bl	800066c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fd f92d 	bl	800066c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e08e      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCC_OscConfig+0x33a>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fd f91b 	bl	800066c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fd f917 	bl	800066c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e078      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4a3b      	ldr	r2, [pc, #236]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003464:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d064      	beq.n	8003540 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d05c      	beq.n	800353c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d141      	bne.n	800350e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b32      	ldr	r3, [pc, #200]	; (8003554 <HAL_RCC_OscConfig+0x480>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd f8ec 	bl	800066c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7fd f8e8 	bl	800066c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04b      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b6:	4926      	ldr	r1, [pc, #152]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	019b      	lsls	r3, r3, #6
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_RCC_OscConfig+0x480>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fd f8c1 	bl	800066c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd f8bd 	bl	800066c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e020      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x41a>
 800350c:	e018      	b.n	8003540 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_RCC_OscConfig+0x480>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd f8aa 	bl	800066c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fd f8a6 	bl	800066c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e009      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCC_OscConfig+0x47c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x448>
 800353a:	e001      	b.n	8003540 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40007000 	.word	0x40007000
 8003550:	40023800 	.word	0x40023800
 8003554:	42470060 	.word	0x42470060

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0ca      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_ClockConfig+0x1b4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d20c      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_ClockConfig+0x1b4>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_ClockConfig+0x1b4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b6      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	4b52      	ldr	r3, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	494f      	ldr	r1, [pc, #316]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d044      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d119      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07d      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06d      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e065      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4936      	ldr	r1, [pc, #216]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	4b35      	ldr	r3, [pc, #212]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 0203 	bic.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fd f810 	bl	800066c <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd f80c 	bl	800066c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e04d      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_ClockConfig+0x1b4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d90c      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCC_ClockConfig+0x1b4>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_RCC_ClockConfig+0x1b4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e030      	b.n	8003702 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4911      	ldr	r1, [pc, #68]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f81d 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036e2:	4601      	mov	r1, r0
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	fa21 f303 	lsr.w	r3, r1, r3
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7fc ff72 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00
 8003710:	40023800 	.word	0x40023800
 8003714:	0800a74c 	.word	0x0800a74c
 8003718:	2000002c 	.word	0x2000002c

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003724:	2200      	movs	r2, #0
 8003726:	60fa      	str	r2, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	617a      	str	r2, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003730:	2200      	movs	r2, #0
 8003732:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4a51      	ldr	r2, [pc, #324]	; (800387c <HAL_RCC_GetSysClockFreq+0x160>)
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	f002 020c 	and.w	r2, r2, #12
 800373c:	2a04      	cmp	r2, #4
 800373e:	d007      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 8003740:	2a08      	cmp	r2, #8
 8003742:	d008      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 8003744:	2a00      	cmp	r2, #0
 8003746:	f040 8090 	bne.w	800386a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800374a:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCC_GetSysClockFreq+0x164>)
 800374c:	613b      	str	r3, [r7, #16]
       break;
 800374e:	e08f      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_RCC_GetSysClockFreq+0x168>)
 8003752:	613b      	str	r3, [r7, #16]
      break;
 8003754:	e08c      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003756:	4a49      	ldr	r2, [pc, #292]	; (800387c <HAL_RCC_GetSysClockFreq+0x160>)
 8003758:	6852      	ldr	r2, [r2, #4]
 800375a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800375e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003760:	4a46      	ldr	r2, [pc, #280]	; (800387c <HAL_RCC_GetSysClockFreq+0x160>)
 8003762:	6852      	ldr	r2, [r2, #4]
 8003764:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003768:	2a00      	cmp	r2, #0
 800376a:	d023      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_RCC_GetSysClockFreq+0x160>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	f240 11ff 	movw	r1, #511	; 0x1ff
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	ea03 0301 	and.w	r3, r3, r1
 8003782:	ea04 0402 	and.w	r4, r4, r2
 8003786:	4a3f      	ldr	r2, [pc, #252]	; (8003884 <HAL_RCC_GetSysClockFreq+0x168>)
 8003788:	fb02 f104 	mul.w	r1, r2, r4
 800378c:	2200      	movs	r2, #0
 800378e:	fb02 f203 	mul.w	r2, r2, r3
 8003792:	440a      	add	r2, r1
 8003794:	493b      	ldr	r1, [pc, #236]	; (8003884 <HAL_RCC_GetSysClockFreq+0x168>)
 8003796:	fba3 0101 	umull	r0, r1, r3, r1
 800379a:	1853      	adds	r3, r2, r1
 800379c:	4619      	mov	r1, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f04f 0400 	mov.w	r4, #0
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	f7fc fd72 	bl	8000290 <__aeabi_uldivmod>
 80037ac:	4603      	mov	r3, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e04c      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b4:	4a31      	ldr	r2, [pc, #196]	; (800387c <HAL_RCC_GetSysClockFreq+0x160>)
 80037b6:	6852      	ldr	r2, [r2, #4]
 80037b8:	0992      	lsrs	r2, r2, #6
 80037ba:	4611      	mov	r1, r2
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80037c4:	f04f 0600 	mov.w	r6, #0
 80037c8:	ea05 0501 	and.w	r5, r5, r1
 80037cc:	ea06 0602 	and.w	r6, r6, r2
 80037d0:	4629      	mov	r1, r5
 80037d2:	4632      	mov	r2, r6
 80037d4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80037d8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80037dc:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80037e0:	4651      	mov	r1, sl
 80037e2:	465a      	mov	r2, fp
 80037e4:	46aa      	mov	sl, r5
 80037e6:	46b3      	mov	fp, r6
 80037e8:	4655      	mov	r5, sl
 80037ea:	465e      	mov	r6, fp
 80037ec:	1b4d      	subs	r5, r1, r5
 80037ee:	eb62 0606 	sbc.w	r6, r2, r6
 80037f2:	4629      	mov	r1, r5
 80037f4:	4632      	mov	r2, r6
 80037f6:	0194      	lsls	r4, r2, #6
 80037f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037fc:	018b      	lsls	r3, r1, #6
 80037fe:	1a5b      	subs	r3, r3, r1
 8003800:	eb64 0402 	sbc.w	r4, r4, r2
 8003804:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003808:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800380c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003810:	4643      	mov	r3, r8
 8003812:	464c      	mov	r4, r9
 8003814:	4655      	mov	r5, sl
 8003816:	465e      	mov	r6, fp
 8003818:	18ed      	adds	r5, r5, r3
 800381a:	eb46 0604 	adc.w	r6, r6, r4
 800381e:	462b      	mov	r3, r5
 8003820:	4634      	mov	r4, r6
 8003822:	02a2      	lsls	r2, r4, #10
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	029b      	lsls	r3, r3, #10
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003836:	4618      	mov	r0, r3
 8003838:	4621      	mov	r1, r4
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f04f 0400 	mov.w	r4, #0
 8003840:	461a      	mov	r2, r3
 8003842:	4623      	mov	r3, r4
 8003844:	f7fc fd24 	bl	8000290 <__aeabi_uldivmod>
 8003848:	4603      	mov	r3, r0
 800384a:	460c      	mov	r4, r1
 800384c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_GetSysClockFreq+0x160>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	3301      	adds	r3, #1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	613b      	str	r3, [r7, #16]
      break;
 8003868:	e002      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetSysClockFreq+0x164>)
 800386c:	613b      	str	r3, [r7, #16]
      break;
 800386e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003870:	693b      	ldr	r3, [r7, #16]
}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	017d7840 	.word	0x017d7840

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	2000002c 	.word	0x2000002c

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4601      	mov	r1, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	0800a75c 	.word	0x0800a75c

080038c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d061      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038f0:	4ba3      	ldr	r3, [pc, #652]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038f6:	f7fc feb9 	bl	800066c <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038fe:	f7fc feb5 	bl	800066c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e177      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003910:	4b9c      	ldr	r3, [pc, #624]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003928:	4996      	ldr	r1, [pc, #600]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	019a      	lsls	r2, r3, #6
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01f      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003948:	4b8e      	ldr	r3, [pc, #568]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394e:	0f1b      	lsrs	r3, r3, #28
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003956:	498b      	ldr	r1, [pc, #556]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	019a      	lsls	r2, r3, #6
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	431a      	orrs	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003970:	4984      	ldr	r1, [pc, #528]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003972:	4b84      	ldr	r3, [pc, #528]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	f023 021f 	bic.w	r2, r3, #31
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	3b01      	subs	r3, #1
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003988:	4b7d      	ldr	r3, [pc, #500]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800398e:	f7fc fe6d 	bl	800066c <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003996:	f7fc fe69 	bl	800066c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e12b      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a8:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d079      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039cc:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d2:	f7fc fe4b 	bl	800066c <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039da:	f7fc fe47 	bl	800066c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e109      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039ec:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f8:	d0ef      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a06:	4b5f      	ldr	r3, [pc, #380]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	0f1b      	lsrs	r3, r3, #28
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a14:	495b      	ldr	r1, [pc, #364]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	019a      	lsls	r2, r3, #6
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	071b      	lsls	r3, r3, #28
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a2e:	4955      	ldr	r1, [pc, #340]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a30:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01e      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a54:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	0e1b      	lsrs	r3, r3, #24
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a62:	4948      	ldr	r1, [pc, #288]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	019a      	lsls	r2, r3, #6
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a7c:	4941      	ldr	r1, [pc, #260]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fc fde8 	bl	800066c <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003aa0:	f7fc fde4 	bl	800066c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0a6      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ab2:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abe:	d1ef      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 808d 	beq.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003aea:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003af6:	f7fc fdb9 	bl	800066c <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fc fdb5 	bl	800066c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e077      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d039      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d032      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01e      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fc fd83 	bl	800066c <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	e014      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fc fd7f 	bl	800066c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d90b      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e03f      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003b80:	42470068 	.word	0x42470068
 8003b84:	40023800 	.word	0x40023800
 8003b88:	42470070 	.word	0x42470070
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0e4      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bac:	d10d      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003bae:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003bca:	4a0f      	ldr	r2, [pc, #60]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	490c      	ldr	r1, [pc, #48]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	4313      	orrs	r3, r2
 8003be6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bfc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	424711e0 	.word	0x424711e0

08003c10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e025      	b.n	8003c70 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f002 f965 	bl	8005f08 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 fcea 	bl	800462a <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	f000 fd55 	bl	8004710 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d101      	bne.n	8003c94 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
 8003c92:	e018      	b.n	8003cc6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fdb2 	bl	800480e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d104      	bne.n	8003cbc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2205      	movs	r2, #5
 8003cb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003cba:	e003      	b.n	8003cc4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e00e      	b.n	8003d06 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fdc5 	bl	8004886 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e055      	b.n	8003dcc <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 ffe8 	bl	8005d10 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6851      	ldr	r1, [r2, #4]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	4311      	orrs	r1, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6912      	ldr	r2, [r2, #16]
 8003d70:	4311      	orrs	r1, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6952      	ldr	r2, [r2, #20]
 8003d76:	4311      	orrs	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6992      	ldr	r2, [r2, #24]
 8003d7c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d80:	4311      	orrs	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	69d2      	ldr	r2, [r2, #28]
 8003d86:	4311      	orrs	r1, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6a12      	ldr	r2, [r2, #32]
 8003d8c:	4311      	orrs	r1, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6992      	ldr	r2, [r2, #24]
 8003d9e:	0c12      	lsrs	r2, r2, #16
 8003da0:	f002 0104 	and.w	r1, r2, #4
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	69d2      	ldr	r2, [r2, #28]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dba:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_SPI_Transmit+0x26>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e123      	b.n	8004042 <HAL_SPI_Transmit+0x26e>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e02:	f7fc fc33 	bl	800066c <HAL_GetTick>
 8003e06:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e18:	e10a      	b.n	8004030 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_Transmit+0x52>
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e2a:	e101      	b.n	8004030 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2203      	movs	r2, #3
 8003e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e72:	d107      	bne.n	8003e84 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d007      	beq.n	8003ea2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eaa:	d147      	bne.n	8003f3c <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_SPI_Transmit+0xea>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d138      	bne.n	8003f30 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	8812      	ldrh	r2, [r2, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003edc:	e028      	b.n	8003f30 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d10f      	bne.n	8003f0c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	8812      	ldrh	r2, [r2, #0]
 8003ef4:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f0a:	e011      	b.n	8003f30 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_SPI_Transmit+0x156>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f18:	d00a      	beq.n	8003f30 <HAL_SPI_Transmit+0x15c>
 8003f1a:	f7fc fba7 	bl	800066c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f2e:	e07f      	b.n	8004030 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1d1      	bne.n	8003ede <HAL_SPI_Transmit+0x10a>
 8003f3a:	e048      	b.n	8003fce <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_SPI_Transmit+0x17a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d13a      	bne.n	8003fc4 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f6e:	e029      	b.n	8003fc4 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d110      	bne.n	8003fa0 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f9e:	e011      	b.n	8003fc4 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_SPI_Transmit+0x1ea>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fac:	d00a      	beq.n	8003fc4 <HAL_SPI_Transmit+0x1f0>
 8003fae:	f7fc fb5d 	bl	800066c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	1ad2      	subs	r2, r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fc2:	e035      	b.n	8004030 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1d0      	bne.n	8003f70 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f836 	bl	800404a <SPI_WaitFlagStateUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe8:	e022      	b.n	8004030 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f894 	bl	800411c <SPI_CheckFlag_BSY>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004004:	e014      	b.n	8004030 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004040:	7ffb      	ldrb	r3, [r7, #31]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004058:	e04d      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004060:	d049      	beq.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004068:	f7fc fb00 	bl	800066c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	1ad2      	subs	r2, r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d33e      	bcc.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	6852      	ldr	r2, [r2, #4]
 8004082:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004086:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004090:	d111      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409a:	d004      	beq.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	d107      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	d110      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80040ce:	400b      	ands	r3, r1
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e00e      	b.n	8004114 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	401a      	ands	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d101      	bne.n	800410a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004106:	2201      	movs	r2, #1
 8004108:	e000      	b.n	800410c <SPI_WaitFlagStateUntilTimeout+0xc2>
 800410a:	2200      	movs	r2, #0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d1a3      	bne.n	800405a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff ff89 	bl	800404a <SPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e000      	b.n	8004150 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e01d      	b.n	80041a6 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f001 fe0e 	bl	8005da0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f000 f944 	bl	8004424 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d122      	bne.n	800420a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d11b      	bne.n	800420a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0202 	mvn.w	r2, #2
 80041da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f8f8 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 80041f6:	e005      	b.n	8004204 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8ea 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8fb 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b04      	cmp	r3, #4
 8004216:	d122      	bne.n	800425e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b04      	cmp	r3, #4
 8004224:	d11b      	bne.n	800425e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f06f 0204 	mvn.w	r2, #4
 800422e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8ce 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 800424a:	e005      	b.n	8004258 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8c0 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8d1 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d122      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b08      	cmp	r3, #8
 8004278:	d11b      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0208 	mvn.w	r2, #8
 8004282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2204      	movs	r2, #4
 8004288:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8a4 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 800429e:	e005      	b.n	80042ac <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f896 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8a7 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d122      	bne.n	8004306 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d11b      	bne.n	8004306 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0210 	mvn.w	r2, #16
 80042d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2208      	movs	r2, #8
 80042dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f87a 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 80042f2:	e005      	b.n	8004300 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f86c 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f87d 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d10e      	bne.n	8004332 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f06f 0201 	mvn.w	r2, #1
 800432a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f846 	bl	80043be <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d10e      	bne.n	800435e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d107      	bne.n	800435e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004356:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f95c 	bl	8004616 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d10e      	bne.n	800438a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d107      	bne.n	800438a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004382:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f842 	bl	800440e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b20      	cmp	r3, #32
 8004396:	d10e      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d107      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0220 	mvn.w	r2, #32
 80043ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f926 	bl	8004602 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a44      	ldr	r2, [pc, #272]	; (800454c <TIM_Base_SetConfig+0x128>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <TIM_Base_SetConfig+0x44>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d00f      	beq.n	8004468 <TIM_Base_SetConfig+0x44>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a41      	ldr	r2, [pc, #260]	; (8004550 <TIM_Base_SetConfig+0x12c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_Base_SetConfig+0x44>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a40      	ldr	r2, [pc, #256]	; (8004554 <TIM_Base_SetConfig+0x130>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_Base_SetConfig+0x44>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a3f      	ldr	r2, [pc, #252]	; (8004558 <TIM_Base_SetConfig+0x134>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_Base_SetConfig+0x44>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3e      	ldr	r2, [pc, #248]	; (800455c <TIM_Base_SetConfig+0x138>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <TIM_Base_SetConfig+0x48>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <TIM_Base_SetConfig+0x4a>
 800446c:	2300      	movs	r3, #0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a31      	ldr	r2, [pc, #196]	; (800454c <TIM_Base_SetConfig+0x128>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d02b      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d027      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a2e      	ldr	r2, [pc, #184]	; (8004550 <TIM_Base_SetConfig+0x12c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d023      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <TIM_Base_SetConfig+0x130>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01f      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <TIM_Base_SetConfig+0x134>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d01b      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a2b      	ldr	r2, [pc, #172]	; (800455c <TIM_Base_SetConfig+0x138>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d017      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <TIM_Base_SetConfig+0x13c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a29      	ldr	r2, [pc, #164]	; (8004564 <TIM_Base_SetConfig+0x140>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00f      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a28      	ldr	r2, [pc, #160]	; (8004568 <TIM_Base_SetConfig+0x144>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <TIM_Base_SetConfig+0x148>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a26      	ldr	r2, [pc, #152]	; (8004570 <TIM_Base_SetConfig+0x14c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xc0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a25      	ldr	r2, [pc, #148]	; (8004574 <TIM_Base_SetConfig+0x150>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d101      	bne.n	80044e8 <TIM_Base_SetConfig+0xc4>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <TIM_Base_SetConfig+0xc6>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <TIM_Base_SetConfig+0x128>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_Base_SetConfig+0x102>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a0e      	ldr	r2, [pc, #56]	; (800455c <TIM_Base_SetConfig+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <TIM_Base_SetConfig+0x106>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <TIM_Base_SetConfig+0x108>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40010400 	.word	0x40010400
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	40001800 	.word	0x40001800
 8004570:	40001c00 	.word	0x40001c00
 8004574:	40002000 	.word	0x40002000

08004578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e032      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	6852      	ldr	r2, [r2, #4]
 80045aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045ae:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	6851      	ldr	r1, [r2, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	6892      	ldr	r2, [r2, #8]
 80045cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	6891      	ldr	r1, [r2, #8]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	6852      	ldr	r2, [r2, #4]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
} 
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d029      	beq.n	8004698 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004650:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004654:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800465e:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004664:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800466a:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004670:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004676:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800467c:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004682:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004688:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e034      	b.n	8004702 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046a4:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80046ae:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80046b4:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046cc:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80046d6:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80046dc:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80046e2:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80046e8:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80046ee:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d02e      	beq.n	8004788 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004736:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004746:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	3b01      	subs	r3, #1
 800474e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004750:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800475a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004764:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	3b01      	subs	r3, #1
 800476c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800476e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	3b01      	subs	r3, #1
 8004776:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004778:	4313      	orrs	r3, r2
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	e03b      	b.n	8004800 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004798:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	3b01      	subs	r3, #1
 80047a0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80047aa:	4313      	orrs	r3, r2
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80047be:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80047ce:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80047d8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80047e2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80047ec:	4313      	orrs	r3, r2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800482a:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	3b01      	subs	r3, #1
 8004832:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8004834:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004846:	f7fb ff11 	bl	800066c <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800484c:	e010      	b.n	8004870 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004854:	d00c      	beq.n	8004870 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <FMC_SDRAM_SendCommand+0x5e>
 800485c:	f7fb ff06 	bl	800066c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	1ad2      	subs	r2, r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d901      	bls.n	8004870 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e8      	bne.n	800484e <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 80048b0:	20ca      	movs	r0, #202	; 0xca
 80048b2:	f000 f943 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 80048b6:	20c3      	movs	r0, #195	; 0xc3
 80048b8:	f000 f96a 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x08);
 80048bc:	2008      	movs	r0, #8
 80048be:	f000 f967 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x50);
 80048c2:	2050      	movs	r0, #80	; 0x50
 80048c4:	f000 f964 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 80048c8:	20cf      	movs	r0, #207	; 0xcf
 80048ca:	f000 f937 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80048ce:	2000      	movs	r0, #0
 80048d0:	f000 f95e 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80048d4:	20c1      	movs	r0, #193	; 0xc1
 80048d6:	f000 f95b 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x30);
 80048da:	2030      	movs	r0, #48	; 0x30
 80048dc:	f000 f958 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 80048e0:	20ed      	movs	r0, #237	; 0xed
 80048e2:	f000 f92b 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x64);
 80048e6:	2064      	movs	r0, #100	; 0x64
 80048e8:	f000 f952 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x03);
 80048ec:	2003      	movs	r0, #3
 80048ee:	f000 f94f 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x12);
 80048f2:	2012      	movs	r0, #18
 80048f4:	f000 f94c 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x81);
 80048f8:	2081      	movs	r0, #129	; 0x81
 80048fa:	f000 f949 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 80048fe:	20e8      	movs	r0, #232	; 0xe8
 8004900:	f000 f91c 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8004904:	2085      	movs	r0, #133	; 0x85
 8004906:	f000 f943 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 800490a:	2000      	movs	r0, #0
 800490c:	f000 f940 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x78);
 8004910:	2078      	movs	r0, #120	; 0x78
 8004912:	f000 f93d 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8004916:	20cb      	movs	r0, #203	; 0xcb
 8004918:	f000 f910 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x39);
 800491c:	2039      	movs	r0, #57	; 0x39
 800491e:	f000 f937 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8004922:	202c      	movs	r0, #44	; 0x2c
 8004924:	f000 f934 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004928:	2000      	movs	r0, #0
 800492a:	f000 f931 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x34);
 800492e:	2034      	movs	r0, #52	; 0x34
 8004930:	f000 f92e 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x02);
 8004934:	2002      	movs	r0, #2
 8004936:	f000 f92b 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 800493a:	20f7      	movs	r0, #247	; 0xf7
 800493c:	f000 f8fe 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8004940:	2020      	movs	r0, #32
 8004942:	f000 f925 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8004946:	20ea      	movs	r0, #234	; 0xea
 8004948:	f000 f8f8 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800494c:	2000      	movs	r0, #0
 800494e:	f000 f91f 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004952:	2000      	movs	r0, #0
 8004954:	f000 f91c 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 8004958:	20b1      	movs	r0, #177	; 0xb1
 800495a:	f000 f8ef 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800495e:	2000      	movs	r0, #0
 8004960:	f000 f916 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8004964:	201b      	movs	r0, #27
 8004966:	f000 f913 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 800496a:	20b6      	movs	r0, #182	; 0xb6
 800496c:	f000 f8e6 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8004970:	200a      	movs	r0, #10
 8004972:	f000 f90d 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0xA2);
 8004976:	20a2      	movs	r0, #162	; 0xa2
 8004978:	f000 f90a 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 800497c:	20c0      	movs	r0, #192	; 0xc0
 800497e:	f000 f8dd 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8004982:	2010      	movs	r0, #16
 8004984:	f000 f904 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8004988:	20c1      	movs	r0, #193	; 0xc1
 800498a:	f000 f8d7 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 800498e:	2010      	movs	r0, #16
 8004990:	f000 f8fe 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8004994:	20c5      	movs	r0, #197	; 0xc5
 8004996:	f000 f8d1 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x45);
 800499a:	2045      	movs	r0, #69	; 0x45
 800499c:	f000 f8f8 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x15);
 80049a0:	2015      	movs	r0, #21
 80049a2:	f000 f8f5 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 80049a6:	20c7      	movs	r0, #199	; 0xc7
 80049a8:	f000 f8c8 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x90);
 80049ac:	2090      	movs	r0, #144	; 0x90
 80049ae:	f000 f8ef 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 80049b2:	2036      	movs	r0, #54	; 0x36
 80049b4:	f000 f8c2 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 80049b8:	20c8      	movs	r0, #200	; 0xc8
 80049ba:	f000 f8e9 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 80049be:	20f2      	movs	r0, #242	; 0xf2
 80049c0:	f000 f8bc 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f000 f8e3 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 80049ca:	20b0      	movs	r0, #176	; 0xb0
 80049cc:	f000 f8b6 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 80049d0:	20c2      	movs	r0, #194	; 0xc2
 80049d2:	f000 f8dd 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 80049d6:	20b6      	movs	r0, #182	; 0xb6
 80049d8:	f000 f8b0 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80049dc:	200a      	movs	r0, #10
 80049de:	f000 f8d7 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0xA7);
 80049e2:	20a7      	movs	r0, #167	; 0xa7
 80049e4:	f000 f8d4 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x27);
 80049e8:	2027      	movs	r0, #39	; 0x27
 80049ea:	f000 f8d1 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x04);
 80049ee:	2004      	movs	r0, #4
 80049f0:	f000 f8ce 	bl	8004b90 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 80049f4:	202a      	movs	r0, #42	; 0x2a
 80049f6:	f000 f8a1 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f000 f8c8 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f000 f8c5 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004a06:	2000      	movs	r0, #0
 8004a08:	f000 f8c2 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8004a0c:	20ef      	movs	r0, #239	; 0xef
 8004a0e:	f000 f8bf 	bl	8004b90 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8004a12:	202b      	movs	r0, #43	; 0x2b
 8004a14:	f000 f892 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f000 f8b9 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f000 f8b6 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x01);
 8004a24:	2001      	movs	r0, #1
 8004a26:	f000 f8b3 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8004a2a:	203f      	movs	r0, #63	; 0x3f
 8004a2c:	f000 f8b0 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8004a30:	20f6      	movs	r0, #246	; 0xf6
 8004a32:	f000 f883 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8004a36:	2001      	movs	r0, #1
 8004a38:	f000 f8aa 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f000 f8a7 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x06);
 8004a42:	2006      	movs	r0, #6
 8004a44:	f000 f8a4 	bl	8004b90 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8004a48:	202c      	movs	r0, #44	; 0x2c
 8004a4a:	f000 f877 	bl	8004b3c <LCD_WriteCommand>
	HAL_Delay(100);
 8004a4e:	2064      	movs	r0, #100	; 0x64
 8004a50:	f7fb fe18 	bl	8000684 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8004a54:	2026      	movs	r0, #38	; 0x26
 8004a56:	f000 f871 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f000 f898 	bl	8004b90 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8004a60:	20e0      	movs	r0, #224	; 0xe0
 8004a62:	f000 f86b 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8004a66:	200f      	movs	r0, #15
 8004a68:	f000 f892 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x29);
 8004a6c:	2029      	movs	r0, #41	; 0x29
 8004a6e:	f000 f88f 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x24);
 8004a72:	2024      	movs	r0, #36	; 0x24
 8004a74:	f000 f88c 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8004a78:	200c      	movs	r0, #12
 8004a7a:	f000 f889 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8004a7e:	200e      	movs	r0, #14
 8004a80:	f000 f886 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x09);
 8004a84:	2009      	movs	r0, #9
 8004a86:	f000 f883 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8004a8a:	204e      	movs	r0, #78	; 0x4e
 8004a8c:	f000 f880 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x78);
 8004a90:	2078      	movs	r0, #120	; 0x78
 8004a92:	f000 f87d 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8004a96:	203c      	movs	r0, #60	; 0x3c
 8004a98:	f000 f87a 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x09);
 8004a9c:	2009      	movs	r0, #9
 8004a9e:	f000 f877 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x13);
 8004aa2:	2013      	movs	r0, #19
 8004aa4:	f000 f874 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x05);
 8004aa8:	2005      	movs	r0, #5
 8004aaa:	f000 f871 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x17);
 8004aae:	2017      	movs	r0, #23
 8004ab0:	f000 f86e 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x11);
 8004ab4:	2011      	movs	r0, #17
 8004ab6:	f000 f86b 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004aba:	2000      	movs	r0, #0
 8004abc:	f000 f868 	bl	8004b90 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8004ac0:	20e1      	movs	r0, #225	; 0xe1
 8004ac2:	f000 f83b 	bl	8004b3c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f000 f862 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x16);
 8004acc:	2016      	movs	r0, #22
 8004ace:	f000 f85f 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8004ad2:	201b      	movs	r0, #27
 8004ad4:	f000 f85c 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x04);
 8004ad8:	2004      	movs	r0, #4
 8004ada:	f000 f859 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x11);
 8004ade:	2011      	movs	r0, #17
 8004ae0:	f000 f856 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x07);
 8004ae4:	2007      	movs	r0, #7
 8004ae6:	f000 f853 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x31);
 8004aea:	2031      	movs	r0, #49	; 0x31
 8004aec:	f000 f850 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x33);
 8004af0:	2033      	movs	r0, #51	; 0x33
 8004af2:	f000 f84d 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x42);
 8004af6:	2042      	movs	r0, #66	; 0x42
 8004af8:	f000 f84a 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x05);
 8004afc:	2005      	movs	r0, #5
 8004afe:	f000 f847 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8004b02:	200c      	movs	r0, #12
 8004b04:	f000 f844 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8004b08:	200a      	movs	r0, #10
 8004b0a:	f000 f841 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x28);
 8004b0e:	2028      	movs	r0, #40	; 0x28
 8004b10:	f000 f83e 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8004b14:	202f      	movs	r0, #47	; 0x2f
 8004b16:	f000 f83b 	bl	8004b90 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8004b1a:	200f      	movs	r0, #15
 8004b1c:	f000 f838 	bl	8004b90 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8004b20:	2011      	movs	r0, #17
 8004b22:	f000 f80b 	bl	8004b3c <LCD_WriteCommand>
	HAL_Delay(100);
 8004b26:	2064      	movs	r0, #100	; 0x64
 8004b28:	f7fb fdac 	bl	8000684 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8004b2c:	2029      	movs	r0, #41	; 0x29
 8004b2e:	f000 f805 	bl	8004b3c <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8004b32:	202c      	movs	r0, #44	; 0x2c
 8004b34:	f000 f802 	bl	8004b3c <LCD_WriteCommand>
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	733b      	strb	r3, [r7, #12]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b54:	480b      	ldr	r0, [pc, #44]	; (8004b84 <LCD_WriteCommand+0x48>)
 8004b56:	f7fc ff11 	bl	800197c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	480a      	ldr	r0, [pc, #40]	; (8004b88 <LCD_WriteCommand+0x4c>)
 8004b60:	f7fc ff0c 	bl	800197c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8004b64:	f107 010c 	add.w	r1, r7, #12
 8004b68:	2364      	movs	r3, #100	; 0x64
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4807      	ldr	r0, [pc, #28]	; (8004b8c <LCD_WriteCommand+0x50>)
 8004b6e:	f7ff f931 	bl	8003dd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8004b72:	2201      	movs	r2, #1
 8004b74:	2104      	movs	r1, #4
 8004b76:	4804      	ldr	r0, [pc, #16]	; (8004b88 <LCD_WriteCommand+0x4c>)
 8004b78:	f7fc ff00 	bl	800197c <HAL_GPIO_WritePin>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40020c00 	.word	0x40020c00
 8004b88:	40020800 	.word	0x40020800
 8004b8c:	200001f0 	.word	0x200001f0

08004b90 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	733b      	strb	r3, [r7, #12]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba8:	480b      	ldr	r0, [pc, #44]	; (8004bd8 <LCD_WriteData+0x48>)
 8004baa:	f7fc fee7 	bl	800197c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2104      	movs	r1, #4
 8004bb2:	480a      	ldr	r0, [pc, #40]	; (8004bdc <LCD_WriteData+0x4c>)
 8004bb4:	f7fc fee2 	bl	800197c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8004bb8:	f107 010c 	add.w	r1, r7, #12
 8004bbc:	2364      	movs	r3, #100	; 0x64
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4807      	ldr	r0, [pc, #28]	; (8004be0 <LCD_WriteData+0x50>)
 8004bc2:	f7ff f907 	bl	8003dd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2104      	movs	r1, #4
 8004bca:	4804      	ldr	r0, [pc, #16]	; (8004bdc <LCD_WriteData+0x4c>)
 8004bcc:	f7fc fed6 	bl	800197c <HAL_GPIO_WritePin>
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40020c00 	.word	0x40020c00
 8004bdc:	40020800 	.word	0x40020800
 8004be0:	200001f0 	.word	0x200001f0

08004be4 <LCD_FillScreen>:

void LCD_FillScreen(uint32_t color)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8004bec:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <LCD_FillScreen+0x50>)
 8004bee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004bf2:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <LCD_FillScreen+0x50>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004bfa:	480e      	ldr	r0, [pc, #56]	; (8004c34 <LCD_FillScreen+0x50>)
 8004bfc:	f7fc f958 	bl	8000eb0 <HAL_DMA2D_Init>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d112      	bne.n	8004c2c <LCD_FillScreen+0x48>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <LCD_FillScreen+0x54>)
 8004c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <LCD_FillScreen+0x54>)
 8004c0c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <LCD_FillScreen+0x54>)
 8004c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4806      	ldr	r0, [pc, #24]	; (8004c34 <LCD_FillScreen+0x50>)
 8004c1a:	f7fc f992 	bl	8000f42 <HAL_DMA2D_Start>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <LCD_FillScreen+0x48>
				hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004c24:	210a      	movs	r1, #10
 8004c26:	4803      	ldr	r0, [pc, #12]	; (8004c34 <LCD_FillScreen+0x50>)
 8004c28:	f7fc f9b6 	bl	8000f98 <HAL_DMA2D_PollForTransfer>
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
	for (uint32_t i = 0; i < (n); i++)
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
	}*/
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000032c 	.word	0x2000032c
 8004c38:	20000248 	.word	0x20000248

08004c3c <LCD_DrawPixel>:
    }
    while (x <= 0);
}

void LCD_DrawPixel(uint32_t x, uint32_t y, uint32_t color)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <LCD_DrawPixel+0x64>)
 8004c4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004c4e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <LCD_DrawPixel+0x64>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004c56:	4812      	ldr	r0, [pc, #72]	; (8004ca0 <LCD_DrawPixel+0x64>)
 8004c58:	f7fc f92a 	bl	8000eb0 <HAL_DMA2D_Init>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11a      	bne.n	8004c98 <LCD_DrawPixel+0x5c>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <LCD_DrawPixel+0x68>)
 8004c64:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <LCD_DrawPixel+0x68>)
 8004c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	fb02 f203 	mul.w	r2, r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	441a      	add	r2, r3
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	18ca      	adds	r2, r1, r3
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4806      	ldr	r0, [pc, #24]	; (8004ca0 <LCD_DrawPixel+0x64>)
 8004c86:	f7fc f95c 	bl	8000f42 <HAL_DMA2D_Start>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <LCD_DrawPixel+0x5c>
				, 1, 1) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004c90:	210a      	movs	r1, #10
 8004c92:	4803      	ldr	r0, [pc, #12]	; (8004ca0 <LCD_DrawPixel+0x64>)
 8004c94:	f7fc f980 	bl	8000f98 <HAL_DMA2D_PollForTransfer>
		}
	}
	//*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))) = color;
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	2000032c 	.word	0x2000032c
 8004ca4:	20000248 	.word	0x20000248

08004ca8 <LCD_FontsInit>:
		}
	}
}

void LCD_FontsInit(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
	lcdProp.BackColor = LCD_COLOR_BLACK;
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <LCD_FontsInit+0x24>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
	lcdProp.TextColor = LCD_COLOR_GREEN;
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <LCD_FontsInit+0x24>)
 8004cb4:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8004cb8:	601a      	str	r2, [r3, #0]
	lcdProp.pFont = &Font16;
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <LCD_FontsInit+0x24>)
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <LCD_FontsInit+0x28>)
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	200000cc 	.word	0x200000cc
 8004cd0:	20000008 	.word	0x20000008

08004cd4 <LCD_SetFont>:

void LCD_SetFont(sFONT *fonts)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	lcdProp.pFont = fonts;
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <LCD_SetFont+0x1c>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6093      	str	r3, [r2, #8]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	200000cc 	.word	0x200000cc

08004cf4 <LCD_SetTextColor>:

void LCD_SetTextColor(uint32_t color)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	lcdProp.TextColor = color;
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <LCD_SetTextColor+0x1c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6013      	str	r3, [r2, #0]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	200000cc 	.word	0x200000cc

08004d14 <LCD_SetBackColor>:

void LCD_SetBackColor(uint32_t color)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	lcdProp.BackColor = color;
 8004d1c:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <LCD_SetBackColor+0x1c>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6053      	str	r3, [r2, #4]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	200000cc 	.word	0x200000cc

08004d34 <LCD_DrawChar>:

void LCD_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	80fb      	strh	r3, [r7, #6]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	80bb      	strh	r3, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	70fb      	strb	r3, [r7, #3]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  ch = &lcdProp.pFont->table[(c-' ') * lcdProp.pFont->Height * ((lcdProp.pFont->Width + 7) / 8)];
 8004d46:	4b4e      	ldr	r3, [pc, #312]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	3b20      	subs	r3, #32
 8004d50:	494b      	ldr	r1, [pc, #300]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004d52:	6889      	ldr	r1, [r1, #8]
 8004d54:	88c9      	ldrh	r1, [r1, #6]
 8004d56:	fb01 f103 	mul.w	r1, r1, r3
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	889b      	ldrh	r3, [r3, #4]
 8004d60:	3307      	adds	r3, #7
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da00      	bge.n	8004d68 <LCD_DrawChar+0x34>
 8004d66:	3307      	adds	r3, #7
 8004d68:	10db      	asrs	r3, r3, #3
 8004d6a:	fb03 f301 	mul.w	r3, r3, r1
 8004d6e:	4413      	add	r3, r2
 8004d70:	4a44      	ldr	r2, [pc, #272]	; (8004e84 <LCD_DrawChar+0x150>)
 8004d72:	6013      	str	r3, [r2, #0]
  height = lcdProp.pFont->Height;
 8004d74:	4b42      	ldr	r3, [pc, #264]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	88db      	ldrh	r3, [r3, #6]
 8004d7a:	827b      	strh	r3, [r7, #18]
  width = lcdProp.pFont->Width;
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	889b      	ldrh	r3, [r3, #4]
 8004d82:	823b      	strh	r3, [r7, #16]
  offset = 8*((width + 7)/8) - width;
 8004d84:	8a3b      	ldrh	r3, [r7, #16]
 8004d86:	3307      	adds	r3, #7
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da00      	bge.n	8004d8e <LCD_DrawChar+0x5a>
 8004d8c:	3307      	adds	r3, #7
 8004d8e:	10db      	asrs	r3, r3, #3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	8a3b      	ldrh	r3, [r7, #16]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	73fb      	strb	r3, [r7, #15]

  for (uint32_t i = 0; i < height; i++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e064      	b.n	8004e6e <LCD_DrawChar+0x13a>
  {
	  pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 8004da4:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <LCD_DrawChar+0x150>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	8a3b      	ldrh	r3, [r7, #16]
 8004daa:	3307      	adds	r3, #7
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da00      	bge.n	8004db2 <LCD_DrawChar+0x7e>
 8004db0:	3307      	adds	r3, #7
 8004db2:	10db      	asrs	r3, r3, #3
 8004db4:	4619      	mov	r1, r3
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	fb03 f301 	mul.w	r3, r3, r1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]
	  switch ((width + 7)/8)
 8004dc0:	8a3b      	ldrh	r3, [r7, #16]
 8004dc2:	3307      	adds	r3, #7
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da00      	bge.n	8004dca <LCD_DrawChar+0x96>
 8004dc8:	3307      	adds	r3, #7
 8004dca:	10db      	asrs	r3, r3, #3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d002      	beq.n	8004dd6 <LCD_DrawChar+0xa2>
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d004      	beq.n	8004dde <LCD_DrawChar+0xaa>
 8004dd4:	e00c      	b.n	8004df0 <LCD_DrawChar+0xbc>
	  {
	  	  case 1:
	  		  line = pchar[0];
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	61fb      	str	r3, [r7, #28]
	  		  break;
 8004ddc:	e016      	b.n	8004e0c <LCD_DrawChar+0xd8>
	  	  case 2:
	  		  line = (pchar[0] << 8) | pchar[1];
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	3201      	adds	r2, #1
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61fb      	str	r3, [r7, #28]
	  		  break;
 8004dee:	e00d      	b.n	8004e0c <LCD_DrawChar+0xd8>
	  	  case 3:
	  	  default:
	  		  line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	041a      	lsls	r2, r3, #16
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	3202      	adds	r2, #2
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61fb      	str	r3, [r7, #28]
	  		  break;
 8004e0a:	bf00      	nop
	  }

	  for (uint32_t j = 0; j < width; j++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e023      	b.n	8004e5a <LCD_DrawChar+0x126>
	  {
		  if (line & (1 << (width- j + offset- 1)))
 8004e12:	8a3a      	ldrh	r2, [r7, #16]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	2201      	movs	r2, #1
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <LCD_DrawChar+0x10e>
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.TextColor);
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	18d0      	adds	r0, r2, r3
 8004e34:	88b9      	ldrh	r1, [r7, #4]
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7ff fefe 	bl	8004c3c <LCD_DrawPixel>
 8004e40:	e008      	b.n	8004e54 <LCD_DrawChar+0x120>
		  }
		  else
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.BackColor);
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	18d0      	adds	r0, r2, r3
 8004e48:	88b9      	ldrh	r1, [r7, #4]
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <LCD_DrawChar+0x14c>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7ff fef4 	bl	8004c3c <LCD_DrawPixel>
	  for (uint32_t j = 0; j < width; j++)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3301      	adds	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	8a3a      	ldrh	r2, [r7, #16]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d8d7      	bhi.n	8004e12 <LCD_DrawChar+0xde>
		  }
	  }
	  y++;
 8004e62:	88bb      	ldrh	r3, [r7, #4]
 8004e64:	3301      	adds	r3, #1
 8004e66:	80bb      	strh	r3, [r7, #4]
  for (uint32_t i = 0; i < height; i++)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	8a7a      	ldrh	r2, [r7, #18]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d896      	bhi.n	8004da4 <LCD_DrawChar+0x70>
  }
}
 8004e76:	bf00      	nop
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200000cc 	.word	0x200000cc
 8004e84:	200000d8 	.word	0x200000d8

08004e88 <LCD_DrawString>:

void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60ba      	str	r2, [r7, #8]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	81fb      	strh	r3, [r7, #14]
 8004e96:	460b      	mov	r3, r1
 8004e98:	81bb      	strh	r3, [r7, #12]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	83fb      	strh	r3, [r7, #30]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = Text;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	617b      	str	r3, [r7, #20]
	while (*ptr++) size++;
 8004eb2:	e002      	b.n	8004eba <LCD_DrawString+0x32>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	617a      	str	r2, [r7, #20]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f6      	bne.n	8004eb4 <LCD_DrawString+0x2c>
	xsize = (X_SIZE/lcdProp.pFont->Width);
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <LCD_DrawString+0x118>)
 8004ec8:	881a      	ldrh	r2, [r3, #0]
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <LCD_DrawString+0x11c>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	889b      	ldrh	r3, [r3, #4]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	613b      	str	r3, [r7, #16]

	switch (Mode)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d002      	beq.n	8004ee4 <LCD_DrawString+0x5c>
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d00e      	beq.n	8004f00 <LCD_DrawString+0x78>
 8004ee2:	e01b      	b.n	8004f1c <LCD_DrawString+0x94>
	{
		case CENTER_MODE:
			ref_column = Xpos + ((xsize - size) * lcdProp.pFont->Width) / 2;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <LCD_DrawString+0x11c>)
 8004eec:	6892      	ldr	r2, [r2, #8]
 8004eee:	8892      	ldrh	r2, [r2, #4]
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	89fb      	ldrh	r3, [r7, #14]
 8004efa:	4413      	add	r3, r2
 8004efc:	83fb      	strh	r3, [r7, #30]
			break;
 8004efe:	e010      	b.n	8004f22 <LCD_DrawString+0x9a>
		case RIGHT_MODE:
			ref_column = - Xpos + ((xsize - size) * lcdProp.pFont->Width);
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <LCD_DrawString+0x11c>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	889b      	ldrh	r3, [r3, #4]
 8004f0e:	fb12 f303 	smulbb	r3, r2, r3
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	89fb      	ldrh	r3, [r7, #14]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	83fb      	strh	r3, [r7, #30]
			break;
 8004f1a:	e002      	b.n	8004f22 <LCD_DrawString+0x9a>
		case LEFT_MODE:
		default:
			ref_column = Xpos;
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
 8004f1e:	83fb      	strh	r3, [r7, #30]
			break;
 8004f20:	bf00      	nop
	}

	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004f22:	8bfb      	ldrh	r3, [r7, #30]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <LCD_DrawString+0xa8>
 8004f28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da15      	bge.n	8004f5c <LCD_DrawString+0xd4>
	{
		ref_column = 1;
 8004f30:	2301      	movs	r3, #1
 8004f32:	83fb      	strh	r3, [r7, #30]
	}
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8004f34:	e012      	b.n	8004f5c <LCD_DrawString+0xd4>
	{
		LCD_DrawChar(ref_column, Ypos, *Text);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	89b9      	ldrh	r1, [r7, #12]
 8004f3c:	8bfb      	ldrh	r3, [r7, #30]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fef8 	bl	8004d34 <LCD_DrawChar>
		ref_column += lcdProp.pFont->Width;
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <LCD_DrawString+0x11c>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	889a      	ldrh	r2, [r3, #4]
 8004f4a:	8bfb      	ldrh	r3, [r7, #30]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	83fb      	strh	r3, [r7, #30]
		Text++;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]
		i++;
 8004f56:	8bbb      	ldrh	r3, [r7, #28]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <LCD_DrawString+0x118>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	8bbb      	ldrh	r3, [r7, #28]
 8004f72:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <LCD_DrawString+0x11c>)
 8004f74:	6889      	ldr	r1, [r1, #8]
 8004f76:	8889      	ldrh	r1, [r1, #4]
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	1ac3      	subs	r3, r0, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4908      	ldr	r1, [pc, #32]	; (8004fa4 <LCD_DrawString+0x11c>)
 8004f82:	6889      	ldr	r1, [r1, #8]
 8004f84:	8889      	ldrh	r1, [r1, #4]
 8004f86:	428b      	cmp	r3, r1
 8004f88:	bfac      	ite	ge
 8004f8a:	2301      	movge	r3, #1
 8004f8c:	2300      	movlt	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	4013      	ands	r3, r2
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ce      	bne.n	8004f36 <LCD_DrawString+0xae>
	}
}
 8004f98:	bf00      	nop
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000028 	.word	0x20000028
 8004fa4:	200000cc 	.word	0x200000cc

08004fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fae:	f7fb faf7 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fb2:	f000 f8d1 	bl	8005158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fb6:	f000 fb59 	bl	800566c <MX_GPIO_Init>
  MX_DMA_Init();
 8004fba:	f000 fae7 	bl	800558c <MX_DMA_Init>
  MX_LTDC_Init();
 8004fbe:	f000 f9c7 	bl	8005350 <MX_LTDC_Init>
  MX_SPI5_Init();
 8004fc2:	f000 fa7b 	bl	80054bc <MX_SPI5_Init>
  MX_FMC_Init();
 8004fc6:	f000 fb09 	bl	80055dc <MX_FMC_Init>
  MX_DMA2D_Init();
 8004fca:	f000 f94f 	bl	800526c <MX_DMA2D_Init>
  MX_I2C3_Init();
 8004fce:	f000 f97f 	bl	80052d0 <MX_I2C3_Init>
  MX_TIM6_Init();
 8004fd2:	f000 faa9 	bl	8005528 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8004fd6:	4850      	ldr	r0, [pc, #320]	; (8005118 <main+0x170>)
 8004fd8:	f000 fbfe 	bl	80057d8 <SDRAM_init>
  LCD_PowerOn();
 8004fdc:	f7ff fc66 	bl	80048ac <LCD_PowerOn>
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	494e      	ldr	r1, [pc, #312]	; (800511c <main+0x174>)
 8004fe4:	484e      	ldr	r0, [pc, #312]	; (8005120 <main+0x178>)
 8004fe6:	f7fd fe47 	bl	8002c78 <HAL_LTDC_SetAddress>
  TP_Config();
 8004fea:	f001 f9ab 	bl	8006344 <TP_Config>

  LCD_FillScreen(LCD_COLOR_BLACK);
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f7ff fdf8 	bl	8004be4 <LCD_FillScreen>
  LCD_FontsInit();
 8004ff4:	f7ff fe58 	bl	8004ca8 <LCD_FontsInit>
  LCD_SetFont(&Font24);
 8004ff8:	484a      	ldr	r0, [pc, #296]	; (8005124 <main+0x17c>)
 8004ffa:	f7ff fe6b 	bl	8004cd4 <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_YELLOW);
 8004ffe:	484a      	ldr	r0, [pc, #296]	; (8005128 <main+0x180>)
 8005000:	f7ff fe78 	bl	8004cf4 <LCD_SetTextColor>
  LCD_SetBackColor(LCD_COLOR_BLUE);
 8005004:	20ff      	movs	r0, #255	; 0xff
 8005006:	f7ff fe85 	bl	8004d14 <LCD_SetBackColor>
  LCD_DrawChar(10, 10, (uint8_t) 'T');
 800500a:	2254      	movs	r2, #84	; 0x54
 800500c:	210a      	movs	r1, #10
 800500e:	200a      	movs	r0, #10
 8005010:	f7ff fe90 	bl	8004d34 <LCD_DrawChar>
  LCD_DrawChar(27, 10, (uint8_t) 'e');
 8005014:	2265      	movs	r2, #101	; 0x65
 8005016:	210a      	movs	r1, #10
 8005018:	201b      	movs	r0, #27
 800501a:	f7ff fe8b 	bl	8004d34 <LCD_DrawChar>
  LCD_DrawChar(44, 10, (uint8_t) 's');
 800501e:	2273      	movs	r2, #115	; 0x73
 8005020:	210a      	movs	r1, #10
 8005022:	202c      	movs	r0, #44	; 0x2c
 8005024:	f7ff fe86 	bl	8004d34 <LCD_DrawChar>
  LCD_DrawChar(61, 10, (uint8_t) 't');
 8005028:	2274      	movs	r2, #116	; 0x74
 800502a:	210a      	movs	r1, #10
 800502c:	203d      	movs	r0, #61	; 0x3d
 800502e:	f7ff fe81 	bl	8004d34 <LCD_DrawChar>

  LCD_SetFont(&Font16);
 8005032:	483e      	ldr	r0, [pc, #248]	; (800512c <main+0x184>)
 8005034:	f7ff fe4e 	bl	8004cd4 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 8005038:	2080      	movs	r0, #128	; 0x80
 800503a:	f7ff fe6b 	bl	8004d14 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 800503e:	483c      	ldr	r0, [pc, #240]	; (8005130 <main+0x188>)
 8005040:	f7ff fe58 	bl	8004cf4 <LCD_SetTextColor>
  LCD_DrawString(10, 30, (uint8_t *)"Left 16", LEFT_MODE);
 8005044:	2303      	movs	r3, #3
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <main+0x18c>)
 8005048:	211e      	movs	r1, #30
 800504a:	200a      	movs	r0, #10
 800504c:	f7ff ff1c 	bl	8004e88 <LCD_DrawString>

  LCD_SetFont(&Font8);
 8005050:	4839      	ldr	r0, [pc, #228]	; (8005138 <main+0x190>)
 8005052:	f7ff fe3f 	bl	8004cd4 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKCYAN);
 8005056:	f248 0080 	movw	r0, #32896	; 0x8080
 800505a:	f7ff fe5b 	bl	8004d14 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_MAGENTA);
 800505e:	f04f 10ff 	mov.w	r0, #16711935	; 0xff00ff
 8005062:	f7ff fe47 	bl	8004cf4 <LCD_SetTextColor>
  LCD_DrawString(10, 50, (uint8_t *)"Right 8", RIGHT_MODE);
 8005066:	2302      	movs	r3, #2
 8005068:	4a34      	ldr	r2, [pc, #208]	; (800513c <main+0x194>)
 800506a:	2132      	movs	r1, #50	; 0x32
 800506c:	200a      	movs	r0, #10
 800506e:	f7ff ff0b 	bl	8004e88 <LCD_DrawString>

  LCD_SetFont(&Font24);
 8005072:	482c      	ldr	r0, [pc, #176]	; (8005124 <main+0x17c>)
 8005074:	f7ff fe2e 	bl	8004cd4 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_BLACK);
 8005078:	2000      	movs	r0, #0
 800507a:	f7ff fe4b 	bl	8004d14 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_CYAN);
 800507e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005082:	f7ff fe37 	bl	8004cf4 <LCD_SetTextColor>
  LCD_DrawString(10, 100, (uint8_t *)"Center 24", CENTER_MODE);
 8005086:	2301      	movs	r3, #1
 8005088:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <main+0x198>)
 800508a:	2164      	movs	r1, #100	; 0x64
 800508c:	200a      	movs	r0, #10
 800508e:	f7ff fefb 	bl	8004e88 <LCD_DrawString>

  LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8005092:	f04f 1080 	mov.w	r0, #8388736	; 0x800080
 8005096:	f7ff fe2d 	bl	8004cf4 <LCD_SetTextColor>
  LCD_DrawString(0, 200, (uint8_t *)"Left 24", LEFT_MODE);
 800509a:	2303      	movs	r3, #3
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <main+0x19c>)
 800509e:	21c8      	movs	r1, #200	; 0xc8
 80050a0:	2000      	movs	r0, #0
 80050a2:	f7ff fef1 	bl	8004e88 <LCD_DrawString>
  HAL_Delay(2000);
 80050a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80050aa:	f7fb faeb 	bl	8000684 <HAL_Delay>
  LCD_SetFont(&Font20);
 80050ae:	4826      	ldr	r0, [pc, #152]	; (8005148 <main+0x1a0>)
 80050b0:	f7ff fe10 	bl	8004cd4 <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_ORANGE);
 80050b4:	4825      	ldr	r0, [pc, #148]	; (800514c <main+0x1a4>)
 80050b6:	f7ff fe1d 	bl	8004cf4 <LCD_SetTextColor>
  LCD_FillScreen(0x00);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7ff fd92 	bl	8004be4 <LCD_FillScreen>

  tp_state_t tp_state;
  char str[20] = {0};
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	60da      	str	r2, [r3, #12]
 80050cc:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(TP_INT_GPIO_Port, TP_INT_Pin) == 1)
 80050ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050d2:	481f      	ldr	r0, [pc, #124]	; (8005150 <main+0x1a8>)
 80050d4:	f7fc fc3a 	bl	800194c <HAL_GPIO_ReadPin>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d1f7      	bne.n	80050ce <main+0x126>
	  {
		  TP_GetState(&tp_state);
 80050de:	f107 0318 	add.w	r3, r7, #24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 f9c2 	bl	800646c <TP_GetState>
		  if (tp_state.touchDetected)
 80050e8:	7e3b      	ldrb	r3, [r7, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ef      	beq.n	80050ce <main+0x126>
		  {
			  sprintf(str, "x=%03d, y=%03d", tp_state.x, tp_state.y);
 80050ee:	8b7b      	ldrh	r3, [r7, #26]
 80050f0:	461a      	mov	r2, r3
 80050f2:	8bbb      	ldrh	r3, [r7, #28]
 80050f4:	1d38      	adds	r0, r7, #4
 80050f6:	4917      	ldr	r1, [pc, #92]	; (8005154 <main+0x1ac>)
 80050f8:	f001 fa9c 	bl	8006634 <siprintf>
			  LCD_DrawString(0, 20, (uint8_t*)str, CENTER_MODE);
 80050fc:	1d3a      	adds	r2, r7, #4
 80050fe:	2301      	movs	r3, #1
 8005100:	2114      	movs	r1, #20
 8005102:	2000      	movs	r0, #0
 8005104:	f7ff fec0 	bl	8004e88 <LCD_DrawString>
			  LCD_DrawPixel(tp_state.x, tp_state.y, LCD_COLOR_LIGHTRED);
 8005108:	8b7b      	ldrh	r3, [r7, #26]
 800510a:	4618      	mov	r0, r3
 800510c:	8bbb      	ldrh	r3, [r7, #28]
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <main+0x188>)
 8005110:	4619      	mov	r1, r3
 8005112:	f7ff fd93 	bl	8004c3c <LCD_DrawPixel>
	  if (HAL_GPIO_ReadPin(TP_INT_GPIO_Port, TP_INT_Pin) == 1)
 8005116:	e7da      	b.n	80050ce <main+0x126>
 8005118:	2000036c 	.word	0x2000036c
 800511c:	d0050000 	.word	0xd0050000
 8005120:	20000248 	.word	0x20000248
 8005124:	20000018 	.word	0x20000018
 8005128:	00ffff00 	.word	0x00ffff00
 800512c:	20000008 	.word	0x20000008
 8005130:	00ff8080 	.word	0x00ff8080
 8005134:	08006ea4 	.word	0x08006ea4
 8005138:	20000020 	.word	0x20000020
 800513c:	08006eac 	.word	0x08006eac
 8005140:	08006eb4 	.word	0x08006eb4
 8005144:	08006ec0 	.word	0x08006ec0
 8005148:	20000010 	.word	0x20000010
 800514c:	00ffa500 	.word	0x00ffa500
 8005150:	40020000 	.word	0x40020000
 8005154:	08006ec8 	.word	0x08006ec8

08005158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b0a0      	sub	sp, #128	; 0x80
 800515c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800515e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005162:	2230      	movs	r2, #48	; 0x30
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fa5c 	bl	8006624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800516c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800517c:	f107 030c 	add.w	r3, r7, #12
 8005180:	2230      	movs	r2, #48	; 0x30
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f001 fa4d 	bl	8006624 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	4a35      	ldr	r2, [pc, #212]	; (8005264 <SystemClock_Config+0x10c>)
 8005190:	4b34      	ldr	r3, [pc, #208]	; (8005264 <SystemClock_Config+0x10c>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b32      	ldr	r3, [pc, #200]	; (8005264 <SystemClock_Config+0x10c>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <SystemClock_Config+0x110>)
 80051ac:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <SystemClock_Config+0x110>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <SystemClock_Config+0x110>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051c2:	2302      	movs	r3, #2
 80051c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051c6:	2301      	movs	r3, #1
 80051c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051ca:	2310      	movs	r3, #16
 80051cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051ce:	2302      	movs	r3, #2
 80051d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051d2:	2300      	movs	r3, #0
 80051d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80051d6:	2308      	movs	r3, #8
 80051d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80051da:	23b4      	movs	r3, #180	; 0xb4
 80051dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051de:	2302      	movs	r3, #2
 80051e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80051e2:	2304      	movs	r3, #4
 80051e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fd ff72 	bl	80030d4 <HAL_RCC_OscConfig>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80051f6:	f000 fae7 	bl	80057c8 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80051fa:	f7fd ff1b 	bl	8003034 <HAL_PWREx_EnableOverDrive>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005204:	f000 fae0 	bl	80057c8 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005208:	230f      	movs	r3, #15
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800520c:	2302      	movs	r3, #2
 800520e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005210:	2300      	movs	r3, #0
 8005212:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800521a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005220:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005224:	2105      	movs	r1, #5
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe f996 	bl	8003558 <HAL_RCC_ClockConfig>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005232:	f000 fac9 	bl	80057c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005236:	2308      	movs	r3, #8
 8005238:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800523a:	233c      	movs	r3, #60	; 0x3c
 800523c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800523e:	2302      	movs	r3, #2
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe fb3b 	bl	80038c8 <HAL_RCCEx_PeriphCLKConfig>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8005258:	f000 fab6 	bl	80057c8 <Error_Handler>
  }
}
 800525c:	bf00      	nop
 800525e:	3780      	adds	r7, #128	; 0x80
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40023800 	.word	0x40023800
 8005268:	40007000 	.word	0x40007000

0800526c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005270:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 8005272:	4a16      	ldr	r2, [pc, #88]	; (80052cc <MX_DMA2D_Init+0x60>)
 8005274:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 8005278:	2200      	movs	r2, #0
 800527a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800527c:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 800527e:	2201      	movs	r2, #1
 8005280:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005282:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 8005284:	2200      	movs	r2, #0
 8005286:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 800528a:	2200      	movs	r2, #0
 800528c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 8005290:	2201      	movs	r2, #1
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 800529c:	2200      	movs	r2, #0
 800529e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 80052a2:	f7fb fe05 	bl	8000eb0 <HAL_DMA2D_Init>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80052ac:	f000 fa8c 	bl	80057c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80052b0:	2101      	movs	r1, #1
 80052b2:	4805      	ldr	r0, [pc, #20]	; (80052c8 <MX_DMA2D_Init+0x5c>)
 80052b4:	f7fc f868 	bl	8001388 <HAL_DMA2D_ConfigLayer>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80052be:	f000 fa83 	bl	80057c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000032c 	.word	0x2000032c
 80052cc:	4002b000 	.word	0x4002b000

080052d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <MX_I2C3_Init+0x74>)
 80052d6:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <MX_I2C3_Init+0x78>)
 80052d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <MX_I2C3_Init+0x74>)
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <MX_I2C3_Init+0x7c>)
 80052de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052e0:	4b18      	ldr	r3, [pc, #96]	; (8005344 <MX_I2C3_Init+0x74>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 80052e6:	4b17      	ldr	r3, [pc, #92]	; (8005344 <MX_I2C3_Init+0x74>)
 80052e8:	2282      	movs	r2, #130	; 0x82
 80052ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052ec:	4b15      	ldr	r3, [pc, #84]	; (8005344 <MX_I2C3_Init+0x74>)
 80052ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <MX_I2C3_Init+0x74>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <MX_I2C3_Init+0x74>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005300:	4b10      	ldr	r3, [pc, #64]	; (8005344 <MX_I2C3_Init+0x74>)
 8005302:	2200      	movs	r2, #0
 8005304:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <MX_I2C3_Init+0x74>)
 8005308:	2200      	movs	r2, #0
 800530a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800530c:	480d      	ldr	r0, [pc, #52]	; (8005344 <MX_I2C3_Init+0x74>)
 800530e:	f7fc fb4f 	bl	80019b0 <HAL_I2C_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005318:	f000 fa56 	bl	80057c8 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800531c:	2100      	movs	r1, #0
 800531e:	4809      	ldr	r0, [pc, #36]	; (8005344 <MX_I2C3_Init+0x74>)
 8005320:	f7fd fa5b 	bl	80027da <HAL_I2CEx_ConfigAnalogFilter>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800532a:	f000 fa4d 	bl	80057c8 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800532e:	2100      	movs	r1, #0
 8005330:	4804      	ldr	r0, [pc, #16]	; (8005344 <MX_I2C3_Init+0x74>)
 8005332:	f7fd fa8e 	bl	8002852 <HAL_I2CEx_ConfigDigitalFilter>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800533c:	f000 fa44 	bl	80057c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005340:	bf00      	nop
 8005342:	bd80      	pop	{r7, pc}
 8005344:	2000013c 	.word	0x2000013c
 8005348:	40005c00 	.word	0x40005c00
 800534c:	000186a0 	.word	0x000186a0

08005350 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b09a      	sub	sp, #104	; 0x68
 8005354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005356:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800535a:	2234      	movs	r2, #52	; 0x34
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f960 	bl	8006624 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8005364:	463b      	mov	r3, r7
 8005366:	2234      	movs	r2, #52	; 0x34
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f001 f95a 	bl	8006624 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8005370:	4b50      	ldr	r3, [pc, #320]	; (80054b4 <MX_LTDC_Init+0x164>)
 8005372:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <MX_LTDC_Init+0x168>)
 8005374:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005376:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <MX_LTDC_Init+0x164>)
 8005378:	2200      	movs	r2, #0
 800537a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800537c:	4b4d      	ldr	r3, [pc, #308]	; (80054b4 <MX_LTDC_Init+0x164>)
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005382:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <MX_LTDC_Init+0x164>)
 8005384:	2200      	movs	r2, #0
 8005386:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005388:	4b4a      	ldr	r3, [pc, #296]	; (80054b4 <MX_LTDC_Init+0x164>)
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 800538e:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <MX_LTDC_Init+0x164>)
 8005390:	2208      	movs	r2, #8
 8005392:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8005394:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <MX_LTDC_Init+0x164>)
 8005396:	2200      	movs	r2, #0
 8005398:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <MX_LTDC_Init+0x164>)
 800539c:	221d      	movs	r2, #29
 800539e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80053a0:	4b44      	ldr	r3, [pc, #272]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053a2:	2203      	movs	r2, #3
 80053a4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80053a6:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053a8:	f240 120d 	movw	r2, #269	; 0x10d
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80053ae:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053b0:	f240 1243 	movw	r2, #323	; 0x143
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053b8:	f240 1217 	movw	r2, #279	; 0x117
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80053be:	4b3d      	ldr	r3, [pc, #244]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053c0:	f240 1247 	movw	r2, #327	; 0x147
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80053ce:	4b39      	ldr	r3, [pc, #228]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80053de:	4835      	ldr	r0, [pc, #212]	; (80054b4 <MX_LTDC_Init+0x164>)
 80053e0:	f7fd fa76 	bl	80028d0 <HAL_LTDC_Init>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80053ea:	f000 f9ed 	bl	80057c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 80053f2:	23f0      	movs	r3, #240	; 0xf0
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 80053fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80053fe:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8005400:	2301      	movs	r3, #1
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8005404:	23ff      	movs	r3, #255	; 0xff
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800540c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005410:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005412:	2305      	movs	r3, #5
 8005414:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 800541a:	23f0      	movs	r3, #240	; 0xf0
 800541c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 800541e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005422:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005436:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800543a:	2200      	movs	r2, #0
 800543c:	4619      	mov	r1, r3
 800543e:	481d      	ldr	r0, [pc, #116]	; (80054b4 <MX_LTDC_Init+0x164>)
 8005440:	f7fd fbdc 	bl	8002bfc <HAL_LTDC_ConfigLayer>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 800544a:	f000 f9bd 	bl	80057c8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 8005452:	23f0      	movs	r3, #240	; 0xf0
 8005454:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 800545a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800545e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8005460:	2303      	movs	r3, #3
 8005462:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800546c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005470:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005472:	2305      	movs	r3, #5
 8005474:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 800547a:	23f0      	movs	r3, #240	; 0xf0
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 800547e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8005496:	463b      	mov	r3, r7
 8005498:	2201      	movs	r2, #1
 800549a:	4619      	mov	r1, r3
 800549c:	4805      	ldr	r0, [pc, #20]	; (80054b4 <MX_LTDC_Init+0x164>)
 800549e:	f7fd fbad 	bl	8002bfc <HAL_LTDC_ConfigLayer>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 80054a8:	f000 f98e 	bl	80057c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80054ac:	bf00      	nop
 80054ae:	3768      	adds	r7, #104	; 0x68
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000248 	.word	0x20000248
 80054b8:	40016800 	.word	0x40016800

080054bc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <MX_SPI5_Init+0x64>)
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <MX_SPI5_Init+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <MX_SPI5_Init+0x64>)
 80054c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <MX_SPI5_Init+0x64>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <MX_SPI5_Init+0x64>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <MX_SPI5_Init+0x64>)
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <MX_SPI5_Init+0x64>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <MX_SPI5_Init+0x64>)
 80054e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <MX_SPI5_Init+0x64>)
 80054f0:	2218      	movs	r2, #24
 80054f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <MX_SPI5_Init+0x64>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <MX_SPI5_Init+0x64>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <MX_SPI5_Init+0x64>)
 8005502:	2200      	movs	r2, #0
 8005504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <MX_SPI5_Init+0x64>)
 8005508:	220a      	movs	r2, #10
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800550c:	4804      	ldr	r0, [pc, #16]	; (8005520 <MX_SPI5_Init+0x64>)
 800550e:	f7fe fbfe 	bl	8003d0e <HAL_SPI_Init>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005518:	f000 f956 	bl	80057c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200001f0 	.word	0x200001f0
 8005524:	40015000 	.word	0x40015000

08005528 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800552e:	463b      	mov	r3, r7
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <MX_TIM6_Init+0x5c>)
 8005538:	4a13      	ldr	r2, [pc, #76]	; (8005588 <MX_TIM6_Init+0x60>)
 800553a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <MX_TIM6_Init+0x5c>)
 800553e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005542:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <MX_TIM6_Init+0x5c>)
 8005546:	2200      	movs	r2, #0
 8005548:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <MX_TIM6_Init+0x5c>)
 800554c:	22c8      	movs	r2, #200	; 0xc8
 800554e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005550:	480c      	ldr	r0, [pc, #48]	; (8005584 <MX_TIM6_Init+0x5c>)
 8005552:	f7fe fe01 	bl	8004158 <HAL_TIM_Base_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 800555c:	f000 f934 	bl	80057c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8005560:	2310      	movs	r3, #16
 8005562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005564:	2300      	movs	r3, #0
 8005566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005568:	463b      	mov	r3, r7
 800556a:	4619      	mov	r1, r3
 800556c:	4805      	ldr	r0, [pc, #20]	; (8005584 <MX_TIM6_Init+0x5c>)
 800556e:	f7ff f803 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 8005578:	f000 f926 	bl	80057c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	200002f0 	.word	0x200002f0
 8005588:	40001000 	.word	0x40001000

0800558c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <MX_DMA_Init+0x4c>)
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <MX_DMA_Init+0x4c>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a0:	6313      	str	r3, [r2, #48]	; 0x30
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <MX_DMA_Init+0x4c>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2100      	movs	r1, #0
 80055b2:	200d      	movs	r0, #13
 80055b4:	f7fb f95d 	bl	8000872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80055b8:	200d      	movs	r0, #13
 80055ba:	f7fb f976 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80055be:	2200      	movs	r2, #0
 80055c0:	2100      	movs	r1, #0
 80055c2:	200f      	movs	r0, #15
 80055c4:	f7fb f955 	bl	8000872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80055c8:	200f      	movs	r0, #15
 80055ca:	f7fb f96e 	bl	80008aa <HAL_NVIC_EnableIRQ>

}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800

080055dc <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <MX_FMC_Init+0x88>)
 80055e4:	4a20      	ldr	r2, [pc, #128]	; (8005668 <MX_FMC_Init+0x8c>)
 80055e6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <MX_FMC_Init+0x88>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80055ee:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <MX_FMC_Init+0x88>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <MX_FMC_Init+0x88>)
 80055f6:	2204      	movs	r2, #4
 80055f8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <MX_FMC_Init+0x88>)
 80055fc:	2210      	movs	r2, #16
 80055fe:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <MX_FMC_Init+0x88>)
 8005602:	2240      	movs	r2, #64	; 0x40
 8005604:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <MX_FMC_Init+0x88>)
 8005608:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800560c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800560e:	4b15      	ldr	r3, [pc, #84]	; (8005664 <MX_FMC_Init+0x88>)
 8005610:	2200      	movs	r2, #0
 8005612:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8005614:	4b13      	ldr	r3, [pc, #76]	; (8005664 <MX_FMC_Init+0x88>)
 8005616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800561a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <MX_FMC_Init+0x88>)
 800561e:	2200      	movs	r2, #0
 8005620:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <MX_FMC_Init+0x88>)
 8005624:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800562a:	2302      	movs	r3, #2
 800562c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800562e:	2307      	movs	r3, #7
 8005630:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8005632:	2304      	movs	r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8005636:	2307      	movs	r3, #7
 8005638:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800563a:	2303      	movs	r3, #3
 800563c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800563e:	2302      	movs	r3, #2
 8005640:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8005642:	2302      	movs	r3, #2
 8005644:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4806      	ldr	r0, [pc, #24]	; (8005664 <MX_FMC_Init+0x88>)
 800564c:	f7fe fae0 	bl	8003c10 <HAL_SDRAM_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8005656:	f000 f8b7 	bl	80057c8 <Error_Handler>
  }

}
 800565a:	bf00      	nop
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	2000036c 	.word	0x2000036c
 8005668:	a0000140 	.word	0xa0000140

0800566c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08c      	sub	sp, #48	; 0x30
 8005670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005672:	f107 031c 	add.w	r3, r7, #28
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	609a      	str	r2, [r3, #8]
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	4a4c      	ldr	r2, [pc, #304]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005688:	4b4b      	ldr	r3, [pc, #300]	; (80057b8 <MX_GPIO_Init+0x14c>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	f043 0320 	orr.w	r3, r3, #32
 8005690:	6313      	str	r3, [r2, #48]	; 0x30
 8005692:	4b49      	ldr	r3, [pc, #292]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	4a45      	ldr	r2, [pc, #276]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056a4:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f043 0304 	orr.w	r3, r3, #4
 80056ac:	6313      	str	r3, [r2, #48]	; 0x30
 80056ae:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	4a3e      	ldr	r2, [pc, #248]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056c0:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	4a37      	ldr	r2, [pc, #220]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056dc:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	6313      	str	r3, [r2, #48]	; 0x30
 80056e6:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4a30      	ldr	r2, [pc, #192]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056f8:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <MX_GPIO_Init+0x14c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005700:	6313      	str	r3, [r2, #48]	; 0x30
 8005702:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f043 0310 	orr.w	r3, r3, #16
 800571c:	6313      	str	r3, [r2, #48]	; 0x30
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <MX_GPIO_Init+0x14c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f043 0308 	orr.w	r3, r3, #8
 8005738:	6313      	str	r3, [r2, #48]	; 0x30
 800573a:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <MX_GPIO_Init+0x14c>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8005746:	2201      	movs	r2, #1
 8005748:	2104      	movs	r1, #4
 800574a:	481c      	ldr	r0, [pc, #112]	; (80057bc <MX_GPIO_Init+0x150>)
 800574c:	f7fc f916 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005756:	481a      	ldr	r0, [pc, #104]	; (80057c0 <MX_GPIO_Init+0x154>)
 8005758:	f7fc f910 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 800575c:	2304      	movs	r3, #4
 800575e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005760:	2301      	movs	r3, #1
 8005762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005764:	2300      	movs	r3, #0
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005768:	2302      	movs	r3, #2
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 800576c:	f107 031c 	add.w	r3, r7, #28
 8005770:	4619      	mov	r1, r3
 8005772:	4812      	ldr	r0, [pc, #72]	; (80057bc <MX_GPIO_Init+0x150>)
 8005774:	f7fb ff40 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 8005778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800577c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800577e:	2301      	movs	r3, #1
 8005780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005786:	2302      	movs	r3, #2
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 800578a:	f107 031c 	add.w	r3, r7, #28
 800578e:	4619      	mov	r1, r3
 8005790:	480b      	ldr	r0, [pc, #44]	; (80057c0 <MX_GPIO_Init+0x154>)
 8005792:	f7fb ff31 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800579c:	2300      	movs	r3, #0
 800579e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80057a4:	f107 031c 	add.w	r3, r7, #28
 80057a8:	4619      	mov	r1, r3
 80057aa:	4806      	ldr	r0, [pc, #24]	; (80057c4 <MX_GPIO_Init+0x158>)
 80057ac:	f7fb ff24 	bl	80015f8 <HAL_GPIO_Init>

}
 80057b0:	bf00      	nop
 80057b2:	3730      	adds	r7, #48	; 0x30
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40020800 	.word	0x40020800
 80057c0:	40020c00 	.word	0x40020c00
 80057c4:	40020000 	.word	0x40020000

080057c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80057e4:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <SDRAM_init+0xcc>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80057ea:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <SDRAM_init+0xcc>)
 80057ec:	2208      	movs	r2, #8
 80057ee:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80057f0:	4b2c      	ldr	r3, [pc, #176]	; (80058a4 <SDRAM_init+0xcc>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80057f6:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <SDRAM_init+0xcc>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80057fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005800:	4928      	ldr	r1, [pc, #160]	; (80058a4 <SDRAM_init+0xcc>)
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fe fa38 	bl	8003c78 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8005808:	200a      	movs	r0, #10
 800580a:	f7fa ff3b 	bl	8000684 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 800580e:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <SDRAM_init+0xcc>)
 8005810:	2202      	movs	r2, #2
 8005812:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8005814:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <SDRAM_init+0xcc>)
 8005816:	2208      	movs	r2, #8
 8005818:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <SDRAM_init+0xcc>)
 800581c:	2201      	movs	r2, #1
 800581e:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8005820:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <SDRAM_init+0xcc>)
 8005822:	2200      	movs	r2, #0
 8005824:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582a:	491e      	ldr	r1, [pc, #120]	; (80058a4 <SDRAM_init+0xcc>)
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fe fa23 	bl	8003c78 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8005832:	200a      	movs	r0, #10
 8005834:	f7fa ff26 	bl	8000684 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005838:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <SDRAM_init+0xcc>)
 800583a:	2203      	movs	r2, #3
 800583c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800583e:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <SDRAM_init+0xcc>)
 8005840:	2208      	movs	r2, #8
 8005842:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <SDRAM_init+0xcc>)
 8005846:	2204      	movs	r2, #4
 8005848:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800584a:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <SDRAM_init+0xcc>)
 800584c:	2200      	movs	r2, #0
 800584e:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005854:	4913      	ldr	r1, [pc, #76]	; (80058a4 <SDRAM_init+0xcc>)
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fe fa0e 	bl	8003c78 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 800585c:	200a      	movs	r0, #10
 800585e:	f7fa ff11 	bl	8000684 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8005862:	f240 2331 	movw	r3, #561	; 0x231
 8005866:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <SDRAM_init+0xcc>)
 800586a:	2204      	movs	r2, #4
 800586c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <SDRAM_init+0xcc>)
 8005870:	2208      	movs	r2, #8
 8005872:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <SDRAM_init+0xcc>)
 8005876:	2201      	movs	r2, #1
 8005878:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <SDRAM_init+0xcc>)
 800587e:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005884:	4907      	ldr	r1, [pc, #28]	; (80058a4 <SDRAM_init+0xcc>)
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fe f9f6 	bl	8003c78 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 800588c:	200a      	movs	r0, #10
 800588e:	f7fa fef9 	bl	8000684 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8005892:	f240 516a 	movw	r1, #1386	; 0x56a
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fe fa19 	bl	8003cce <HAL_SDRAM_ProgramRefreshRate>
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	200003a0 	.word	0x200003a0

080058a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <HAL_MspInit+0x4c>)
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <HAL_MspInit+0x4c>)
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058bc:	6453      	str	r3, [r2, #68]	; 0x44
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <HAL_MspInit+0x4c>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <HAL_MspInit+0x4c>)
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_MspInit+0x4c>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6413      	str	r3, [r2, #64]	; 0x40
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_MspInit+0x4c>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800

080058f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0e      	ldr	r2, [pc, #56]	; (8005940 <HAL_DMA2D_MspInit+0x48>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d115      	bne.n	8005936 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4a0d      	ldr	r2, [pc, #52]	; (8005944 <HAL_DMA2D_MspInit+0x4c>)
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_DMA2D_MspInit+0x4c>)
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005918:	6313      	str	r3, [r2, #48]	; 0x30
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <HAL_DMA2D_MspInit+0x4c>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005926:	2200      	movs	r2, #0
 8005928:	2100      	movs	r1, #0
 800592a:	205a      	movs	r0, #90	; 0x5a
 800592c:	f7fa ffa1 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005930:	205a      	movs	r0, #90	; 0x5a
 8005932:	f7fa ffba 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	4002b000 	.word	0x4002b000
 8005944:	40023800 	.word	0x40023800

08005948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a57      	ldr	r2, [pc, #348]	; (8005ac4 <HAL_I2C_MspInit+0x17c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	f040 80a8 	bne.w	8005abc <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800596c:	2300      	movs	r3, #0
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	4a55      	ldr	r2, [pc, #340]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005972:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f043 0304 	orr.w	r3, r3, #4
 800597a:	6313      	str	r3, [r2, #48]	; 0x30
 800597c:	4b52      	ldr	r3, [pc, #328]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	4a4e      	ldr	r2, [pc, #312]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 800598e:	4b4e      	ldr	r3, [pc, #312]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6313      	str	r3, [r2, #48]	; 0x30
 8005998:	4b4b      	ldr	r3, [pc, #300]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059aa:	2312      	movs	r3, #18
 80059ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b2:	2303      	movs	r3, #3
 80059b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80059b6:	2304      	movs	r3, #4
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ba:	f107 0314 	add.w	r3, r7, #20
 80059be:	4619      	mov	r1, r3
 80059c0:	4842      	ldr	r0, [pc, #264]	; (8005acc <HAL_I2C_MspInit+0x184>)
 80059c2:	f7fb fe19 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059cc:	2312      	movs	r3, #18
 80059ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059d0:	2301      	movs	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d4:	2303      	movs	r3, #3
 80059d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80059d8:	2304      	movs	r3, #4
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	4619      	mov	r1, r3
 80059e2:	483b      	ldr	r0, [pc, #236]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 80059e4:	f7fb fe08 	bl	80015f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	4a36      	ldr	r2, [pc, #216]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059f6:	6413      	str	r3, [r2, #64]	; 0x40
 80059f8:	4b33      	ldr	r3, [pc, #204]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8005a04:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a06:	4a34      	ldr	r2, [pc, #208]	; (8005ad8 <HAL_I2C_MspInit+0x190>)
 8005a08:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8005a0a:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005a10:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a12:	4b30      	ldr	r3, [pc, #192]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a18:	4b2e      	ldr	r3, [pc, #184]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a24:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a26:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a2c:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8005a32:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a38:	4b26      	ldr	r3, [pc, #152]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a3e:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8005a44:	4823      	ldr	r0, [pc, #140]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a46:	f7fa ff4b 	bl	80008e0 <HAL_DMA_Init>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8005a50:	f7ff feba 	bl	80057c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8005a60:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_I2C_MspInit+0x198>)
 8005a64:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a68:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005a6c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a70:	2240      	movs	r2, #64	; 0x40
 8005a72:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a7a:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a80:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a82:	4b16      	ldr	r3, [pc, #88]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8005aa0:	480e      	ldr	r0, [pc, #56]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005aa2:	f7fa ff1d 	bl	80008e0 <HAL_DMA_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8005aac:	f7ff fe8c 	bl	80057c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <HAL_I2C_MspInit+0x194>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005abc:	bf00      	nop
 8005abe:	3728      	adds	r7, #40	; 0x28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40005c00 	.word	0x40005c00
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40020800 	.word	0x40020800
 8005ad0:	40020000 	.word	0x40020000
 8005ad4:	20000190 	.word	0x20000190
 8005ad8:	40026040 	.word	0x40026040
 8005adc:	200000dc 	.word	0x200000dc
 8005ae0:	40026070 	.word	0x40026070

08005ae4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08e      	sub	sp, #56	; 0x38
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a7b      	ldr	r2, [pc, #492]	; (8005cf0 <HAL_LTDC_MspInit+0x20c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f040 80f0 	bne.w	8005ce8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005b08:	2300      	movs	r3, #0
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	4a79      	ldr	r2, [pc, #484]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b0e:	4b79      	ldr	r3, [pc, #484]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b16:	6453      	str	r3, [r2, #68]	; 0x44
 8005b18:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	4a72      	ldr	r2, [pc, #456]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b2a:	4b72      	ldr	r3, [pc, #456]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	f043 0320 	orr.w	r3, r3, #32
 8005b32:	6313      	str	r3, [r2, #48]	; 0x30
 8005b34:	4b6f      	ldr	r3, [pc, #444]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	4a6b      	ldr	r2, [pc, #428]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b46:	4b6b      	ldr	r3, [pc, #428]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b50:	4b68      	ldr	r3, [pc, #416]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	4a64      	ldr	r2, [pc, #400]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b62:	4b64      	ldr	r3, [pc, #400]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f043 0302 	orr.w	r3, r3, #2
 8005b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6c:	4b61      	ldr	r3, [pc, #388]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005b78:	2300      	movs	r3, #0
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	4a5d      	ldr	r2, [pc, #372]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b7e:	4b5d      	ldr	r3, [pc, #372]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b86:	6313      	str	r3, [r2, #48]	; 0x30
 8005b88:	4b5a      	ldr	r3, [pc, #360]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	4a56      	ldr	r2, [pc, #344]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b9a:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba4:	4b53      	ldr	r3, [pc, #332]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	4a4f      	ldr	r2, [pc, #316]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005bb6:	4b4f      	ldr	r3, [pc, #316]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f043 0308 	orr.w	r3, r3, #8
 8005bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc0:	4b4c      	ldr	r3, [pc, #304]	; (8005cf4 <HAL_LTDC_MspInit+0x210>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005bde:	230e      	movs	r3, #14
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be6:	4619      	mov	r1, r3
 8005be8:	4843      	ldr	r0, [pc, #268]	; (8005cf8 <HAL_LTDC_MspInit+0x214>)
 8005bea:	f7fb fd05 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8005bee:	f641 0358 	movw	r3, #6232	; 0x1858
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c00:	230e      	movs	r3, #14
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c08:	4619      	mov	r1, r3
 8005c0a:	483c      	ldr	r0, [pc, #240]	; (8005cfc <HAL_LTDC_MspInit+0x218>)
 8005c0c:	f7fb fcf4 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c10:	2303      	movs	r3, #3
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c14:	2302      	movs	r3, #2
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005c20:	2309      	movs	r3, #9
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4835      	ldr	r0, [pc, #212]	; (8005d00 <HAL_LTDC_MspInit+0x21c>)
 8005c2c:	f7fb fce4 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005c30:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c36:	2302      	movs	r3, #2
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c42:	230e      	movs	r3, #14
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	482c      	ldr	r0, [pc, #176]	; (8005d00 <HAL_LTDC_MspInit+0x21c>)
 8005c4e:	f7fb fcd3 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8005c52:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c60:	2302      	movs	r3, #2
 8005c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c64:	230e      	movs	r3, #14
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4825      	ldr	r0, [pc, #148]	; (8005d04 <HAL_LTDC_MspInit+0x220>)
 8005c70:	f7fb fcc2 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005c74:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c82:	2302      	movs	r3, #2
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005c86:	230e      	movs	r3, #14
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8e:	4619      	mov	r1, r3
 8005c90:	481d      	ldr	r0, [pc, #116]	; (8005d08 <HAL_LTDC_MspInit+0x224>)
 8005c92:	f7fb fcb1 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005c96:	2348      	movs	r3, #72	; 0x48
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ca6:	230e      	movs	r3, #14
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4816      	ldr	r0, [pc, #88]	; (8005d0c <HAL_LTDC_MspInit+0x228>)
 8005cb2:	f7fb fca1 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8005cb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005cc8:	2309      	movs	r3, #9
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	480c      	ldr	r0, [pc, #48]	; (8005d04 <HAL_LTDC_MspInit+0x220>)
 8005cd4:	f7fb fc90 	bl	80015f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	2058      	movs	r0, #88	; 0x58
 8005cde:	f7fa fdc8 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005ce2:	2058      	movs	r0, #88	; 0x58
 8005ce4:	f7fa fde1 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005ce8:	bf00      	nop
 8005cea:	3738      	adds	r7, #56	; 0x38
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40016800 	.word	0x40016800
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	40021400 	.word	0x40021400
 8005cfc:	40020000 	.word	0x40020000
 8005d00:	40020400 	.word	0x40020400
 8005d04:	40021800 	.word	0x40021800
 8005d08:	40020800 	.word	0x40020800
 8005d0c:	40020c00 	.word	0x40020c00

08005d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <HAL_SPI_MspInit+0x84>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d12c      	bne.n	8005d8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_SPI_MspInit+0x88>)
 8005d38:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <HAL_SPI_MspInit+0x88>)
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d40:	6453      	str	r3, [r2, #68]	; 0x44
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <HAL_SPI_MspInit+0x88>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	4a11      	ldr	r2, [pc, #68]	; (8005d98 <HAL_SPI_MspInit+0x88>)
 8005d54:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <HAL_SPI_MspInit+0x88>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	f043 0320 	orr.w	r3, r3, #32
 8005d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <HAL_SPI_MspInit+0x88>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005d6a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d70:	2302      	movs	r3, #2
 8005d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005d7c:	2305      	movs	r3, #5
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d80:	f107 0314 	add.w	r3, r7, #20
 8005d84:	4619      	mov	r1, r3
 8005d86:	4805      	ldr	r0, [pc, #20]	; (8005d9c <HAL_SPI_MspInit+0x8c>)
 8005d88:	f7fb fc36 	bl	80015f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8005d8c:	bf00      	nop
 8005d8e:	3728      	adds	r7, #40	; 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40015000 	.word	0x40015000
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40021400 	.word	0x40021400

08005da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <HAL_TIM_Base_MspInit+0x48>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d115      	bne.n	8005dde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	4a0d      	ldr	r2, [pc, #52]	; (8005dec <HAL_TIM_Base_MspInit+0x4c>)
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <HAL_TIM_Base_MspInit+0x4c>)
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	f043 0310 	orr.w	r3, r3, #16
 8005dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <HAL_TIM_Base_MspInit+0x4c>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2105      	movs	r1, #5
 8005dd2:	2036      	movs	r0, #54	; 0x36
 8005dd4:	f7fa fd4d 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005dd8:	2036      	movs	r0, #54	; 0x36
 8005dda:	f7fa fd66 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40001000 	.word	0x40001000
 8005dec:	40023800 	.word	0x40023800

08005df0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8005df6:	4b3c      	ldr	r3, [pc, #240]	; (8005ee8 <HAL_FMC_MspInit+0xf8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d16f      	bne.n	8005ede <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8005dfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <HAL_FMC_MspInit+0xf8>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e04:	2300      	movs	r3, #0
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4a38      	ldr	r2, [pc, #224]	; (8005eec <HAL_FMC_MspInit+0xfc>)
 8005e0a:	4b38      	ldr	r3, [pc, #224]	; (8005eec <HAL_FMC_MspInit+0xfc>)
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6393      	str	r3, [r2, #56]	; 0x38
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <HAL_FMC_MspInit+0xfc>)
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005e20:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005e24:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e26:	2302      	movs	r3, #2
 8005e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e32:	230c      	movs	r3, #12
 8005e34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	482d      	ldr	r0, [pc, #180]	; (8005ef0 <HAL_FMC_MspInit+0x100>)
 8005e3c:	f7fb fbdc 	bl	80015f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e40:	2301      	movs	r3, #1
 8005e42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e44:	2302      	movs	r3, #2
 8005e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e50:	230c      	movs	r3, #12
 8005e52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e54:	1d3b      	adds	r3, r7, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4826      	ldr	r0, [pc, #152]	; (8005ef4 <HAL_FMC_MspInit+0x104>)
 8005e5a:	f7fb fbcd 	bl	80015f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8005e5e:	f248 1333 	movw	r3, #33075	; 0x8133
 8005e62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e64:	2302      	movs	r3, #2
 8005e66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e70:	230c      	movs	r3, #12
 8005e72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	481f      	ldr	r0, [pc, #124]	; (8005ef8 <HAL_FMC_MspInit+0x108>)
 8005e7a:	f7fb fbbd 	bl	80015f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005e7e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005e82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005e90:	230c      	movs	r3, #12
 8005e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	4619      	mov	r1, r3
 8005e98:	4818      	ldr	r0, [pc, #96]	; (8005efc <HAL_FMC_MspInit+0x10c>)
 8005e9a:	f7fb fbad 	bl	80015f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8005e9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005ea2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eac:	2303      	movs	r3, #3
 8005eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4811      	ldr	r0, [pc, #68]	; (8005f00 <HAL_FMC_MspInit+0x110>)
 8005eba:	f7fb fb9d 	bl	80015f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005ebe:	2360      	movs	r3, #96	; 0x60
 8005ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ece:	230c      	movs	r3, #12
 8005ed0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	480b      	ldr	r0, [pc, #44]	; (8005f04 <HAL_FMC_MspInit+0x114>)
 8005ed8:	f7fb fb8e 	bl	80015f8 <HAL_GPIO_Init>
 8005edc:	e000      	b.n	8005ee0 <HAL_FMC_MspInit+0xf0>
    return;
 8005ede:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200000b0 	.word	0x200000b0
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40021400 	.word	0x40021400
 8005ef4:	40020800 	.word	0x40020800
 8005ef8:	40021800 	.word	0x40021800
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40020c00 	.word	0x40020c00
 8005f04:	40020400 	.word	0x40020400

08005f08 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005f10:	f7ff ff6e 	bl	8005df0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f2e:	e7fe      	b.n	8005f2e <HardFault_Handler+0x4>

08005f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f34:	e7fe      	b.n	8005f34 <MemManage_Handler+0x4>

08005f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f36:	b480      	push	{r7}
 8005f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f3a:	e7fe      	b.n	8005f3a <BusFault_Handler+0x4>

08005f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f40:	e7fe      	b.n	8005f40 <UsageFault_Handler+0x4>

08005f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f42:	b480      	push	{r7}
 8005f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f62:	bf00      	nop
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f70:	f7fa fb68 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f74:	bf00      	nop
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8005f7c:	4802      	ldr	r0, [pc, #8]	; (8005f88 <DMA1_Stream2_IRQHandler+0x10>)
 8005f7e:	f7fa fd5d 	bl	8000a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000190 	.word	0x20000190

08005f8c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8005f90:	4802      	ldr	r0, [pc, #8]	; (8005f9c <DMA1_Stream4_IRQHandler+0x10>)
 8005f92:	f7fa fd53 	bl	8000a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005f96:	bf00      	nop
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200000dc 	.word	0x200000dc

08005fa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005fa4:	4802      	ldr	r0, [pc, #8]	; (8005fb0 <TIM6_DAC_IRQHandler+0x10>)
 8005fa6:	f7fe f902 	bl	80041ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200002f0 	.word	0x200002f0

08005fb4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005fb8:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <LTDC_IRQHandler+0x10>)
 8005fba:	f7fc fd5d 	bl	8002a78 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000248 	.word	0x20000248

08005fc8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005fcc:	4802      	ldr	r0, [pc, #8]	; (8005fd8 <DMA2D_IRQHandler+0x10>)
 8005fce:	f7fb f8cb 	bl	8001168 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005fd2:	bf00      	nop
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	2000032c 	.word	0x2000032c

08005fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <SystemInit+0x60>)
 8005fe2:	4b16      	ldr	r3, [pc, #88]	; (800603c <SystemInit+0x60>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <SystemInit+0x64>)
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <SystemInit+0x64>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <SystemInit+0x64>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006002:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <SystemInit+0x64>)
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <SystemInit+0x64>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800600c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006012:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <SystemInit+0x64>)
 8006014:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <SystemInit+0x68>)
 8006016:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <SystemInit+0x64>)
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <SystemInit+0x64>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006022:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <SystemInit+0x64>)
 8006026:	2200      	movs	r2, #0
 8006028:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800602a:	4b04      	ldr	r3, [pc, #16]	; (800603c <SystemInit+0x60>)
 800602c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006030:	609a      	str	r2, [r3, #8]
#endif
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	e000ed00 	.word	0xe000ed00
 8006040:	40023800 	.word	0x40023800
 8006044:	24003010 	.word	0x24003010

08006048 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 800604e:	2300      	movs	r3, #0
 8006050:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8006052:	2303      	movs	r3, #3
 8006054:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8006056:	2302      	movs	r3, #2
 8006058:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800605a:	1d3a      	adds	r2, r7, #4
 800605c:	2364      	movs	r3, #100	; 0x64
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2302      	movs	r3, #2
 8006062:	2182      	movs	r1, #130	; 0x82
 8006064:	480b      	ldr	r0, [pc, #44]	; (8006094 <touchReset+0x4c>)
 8006066:	f7fb fd83 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800606a:	2014      	movs	r0, #20
 800606c:	f7fa fb0a 	bl	8000684 <HAL_Delay>
	sendBuf[1] = 0x00;
 8006070:	2300      	movs	r3, #0
 8006072:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006074:	1d3a      	adds	r2, r7, #4
 8006076:	2364      	movs	r3, #100	; 0x64
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	2302      	movs	r3, #2
 800607c:	2182      	movs	r1, #130	; 0x82
 800607e:	4805      	ldr	r0, [pc, #20]	; (8006094 <touchReset+0x4c>)
 8006080:	f7fb fd76 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8006084:	2014      	movs	r0, #20
 8006086:	f7fa fafd 	bl	8000684 <HAL_Delay>
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	2000013c 	.word	0x2000013c

08006098 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	4603      	mov	r3, r0
 80060a0:	460a      	mov	r2, r1
 80060a2:	71fb      	strb	r3, [r7, #7]
 80060a4:	4613      	mov	r3, r2
 80060a6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 80060ac:	2300      	movs	r3, #0
 80060ae:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 80060b0:	2304      	movs	r3, #4
 80060b2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80060b4:	f107 020c 	add.w	r2, r7, #12
 80060b8:	2364      	movs	r3, #100	; 0x64
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2301      	movs	r3, #1
 80060be:	2182      	movs	r1, #130	; 0x82
 80060c0:	4817      	ldr	r0, [pc, #92]	; (8006120 <fnctCmd+0x88>)
 80060c2:	f7fb fd55 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80060c6:	f107 020c 	add.w	r2, r7, #12
 80060ca:	2364      	movs	r3, #100	; 0x64
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	2301      	movs	r3, #1
 80060d0:	2182      	movs	r1, #130	; 0x82
 80060d2:	4813      	ldr	r0, [pc, #76]	; (8006120 <fnctCmd+0x88>)
 80060d4:	f7fb fe5a 	bl	8001d8c <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 80060d8:	7b3b      	ldrb	r3, [r7, #12]
 80060da:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 80060dc:	79bb      	ldrb	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 80060e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	b25a      	sxtb	r2, r3
 80060ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ee:	4013      	ands	r3, r2
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	73fb      	strb	r3, [r7, #15]
 80060f4:	e003      	b.n	80060fe <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 80060f6:	7bfa      	ldrb	r2, [r7, #15]
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 80060fe:	2304      	movs	r3, #4
 8006100:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006106:	f107 020c 	add.w	r2, r7, #12
 800610a:	2364      	movs	r3, #100	; 0x64
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	2302      	movs	r3, #2
 8006110:	2182      	movs	r1, #130	; 0x82
 8006112:	4803      	ldr	r0, [pc, #12]	; (8006120 <fnctCmd+0x88>)
 8006114:	f7fb fd2c 	bl	8001b70 <HAL_I2C_Master_Transmit>
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	2000013c 	.word	0x2000013c

08006124 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	4603      	mov	r3, r0
 800612c:	460a      	mov	r2, r1
 800612e:	71fb      	strb	r3, [r7, #7]
 8006130:	4613      	mov	r3, r2
 8006132:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8006138:	2300      	movs	r3, #0
 800613a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 800613c:	2317      	movs	r3, #23
 800613e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8006140:	f107 020c 	add.w	r2, r7, #12
 8006144:	2364      	movs	r3, #100	; 0x64
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	2301      	movs	r3, #1
 800614a:	2182      	movs	r1, #130	; 0x82
 800614c:	4817      	ldr	r0, [pc, #92]	; (80061ac <ioAFConfig+0x88>)
 800614e:	f7fb fd0f 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8006152:	f107 020c 	add.w	r2, r7, #12
 8006156:	2364      	movs	r3, #100	; 0x64
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	2301      	movs	r3, #1
 800615c:	2182      	movs	r1, #130	; 0x82
 800615e:	4813      	ldr	r0, [pc, #76]	; (80061ac <ioAFConfig+0x88>)
 8006160:	f7fb fe14 	bl	8001d8c <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8006164:	7b3b      	ldrb	r3, [r7, #12]
 8006166:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8006168:	79bb      	ldrb	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	4313      	orrs	r3, r2
 8006174:	73fb      	strb	r3, [r7, #15]
 8006176:	e008      	b.n	800618a <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8006178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617c:	43db      	mvns	r3, r3
 800617e:	b25a      	sxtb	r2, r3
 8006180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006184:	4013      	ands	r3, r2
 8006186:	b25b      	sxtb	r3, r3
 8006188:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 800618a:	2317      	movs	r3, #23
 800618c:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006192:	f107 020c 	add.w	r2, r7, #12
 8006196:	2364      	movs	r3, #100	; 0x64
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2302      	movs	r3, #2
 800619c:	2182      	movs	r1, #130	; 0x82
 800619e:	4803      	ldr	r0, [pc, #12]	; (80061ac <ioAFConfig+0x88>)
 80061a0:	f7fb fce6 	bl	8001b70 <HAL_I2C_Master_Transmit>
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	2000013c 	.word	0x2000013c

080061b0 <readX>:

static void readX(uint16_t *x)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 80061b8:	234d      	movs	r3, #77	; 0x4d
 80061ba:	723b      	strb	r3, [r7, #8]
 80061bc:	2300      	movs	r3, #0
 80061be:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80061c0:	f107 0208 	add.w	r2, r7, #8
 80061c4:	2364      	movs	r3, #100	; 0x64
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2301      	movs	r3, #1
 80061ca:	2182      	movs	r1, #130	; 0x82
 80061cc:	481f      	ldr	r0, [pc, #124]	; (800624c <readX+0x9c>)
 80061ce:	f7fb fccf 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80061d2:	f107 0208 	add.w	r2, r7, #8
 80061d6:	2364      	movs	r3, #100	; 0x64
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2302      	movs	r3, #2
 80061dc:	2182      	movs	r1, #130	; 0x82
 80061de:	481b      	ldr	r0, [pc, #108]	; (800624c <readX+0x9c>)
 80061e0:	f7fb fdd4 	bl	8001d8c <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 80061e4:	7a3b      	ldrb	r3, [r7, #8]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	7a7a      	ldrb	r2, [r7, #9]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80061f4:	4293      	cmp	r3, r2
 80061f6:	dc05      	bgt.n	8006204 <readX+0x54>
	{
		_x = 3870 - _x;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80061fe:	330e      	adds	r3, #14
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e004      	b.n	800620e <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800620a:	3308      	adds	r3, #8
 800620c:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a0f      	ldr	r2, [pc, #60]	; (8006250 <readX+0xa0>)
 8006212:	fb82 1203 	smull	r1, r2, r2, r3
 8006216:	441a      	add	r2, r3
 8006218:	10d2      	asrs	r2, r2, #3
 800621a:	17db      	asrs	r3, r3, #31
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <readX+0x84>
	{
		*x = 0;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 8006232:	e006      	b.n	8006242 <readX+0x92>
	else if (*x > 240)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2bf0      	cmp	r3, #240	; 0xf0
 800623a:	d902      	bls.n	8006242 <readX+0x92>
		*x = 239;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	22ef      	movs	r2, #239	; 0xef
 8006240:	801a      	strh	r2, [r3, #0]
}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	2000013c 	.word	0x2000013c
 8006250:	88888889 	.word	0x88888889

08006254 <readY>:

static void readY(uint16_t *y)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 800625c:	234f      	movs	r3, #79	; 0x4f
 800625e:	723b      	strb	r3, [r7, #8]
 8006260:	2300      	movs	r3, #0
 8006262:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8006264:	f107 0208 	add.w	r2, r7, #8
 8006268:	2364      	movs	r3, #100	; 0x64
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2301      	movs	r3, #1
 800626e:	2182      	movs	r1, #130	; 0x82
 8006270:	4819      	ldr	r0, [pc, #100]	; (80062d8 <readY+0x84>)
 8006272:	f7fb fc7d 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8006276:	f107 0208 	add.w	r2, r7, #8
 800627a:	2364      	movs	r3, #100	; 0x64
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2302      	movs	r3, #2
 8006280:	2182      	movs	r1, #130	; 0x82
 8006282:	4815      	ldr	r0, [pc, #84]	; (80062d8 <readY+0x84>)
 8006284:	f7fb fd82 	bl	8001d8c <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 8006288:	7a3b      	ldrb	r3, [r7, #8]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	7a7a      	ldrb	r2, [r7, #9]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006298:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a0f      	ldr	r2, [pc, #60]	; (80062dc <readY+0x88>)
 800629e:	fb82 1203 	smull	r1, r2, r2, r3
 80062a2:	1052      	asrs	r2, r2, #1
 80062a4:	17db      	asrs	r3, r3, #31
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <readY+0x6a>
	{
		*y = 0;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 80062bc:	e008      	b.n	80062d0 <readY+0x7c>
	else if (*y > 320)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80062c6:	d903      	bls.n	80062d0 <readY+0x7c>
		*y = 319;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f240 123f 	movw	r2, #319	; 0x13f
 80062ce:	801a      	strh	r2, [r3, #0]
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	2000013c 	.word	0x2000013c
 80062dc:	2e8ba2e9 	.word	0x2e8ba2e9

080062e0 <readZ>:

static void readZ(uint16_t *z)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 80062e8:	2351      	movs	r3, #81	; 0x51
 80062ea:	733b      	strb	r3, [r7, #12]
 80062ec:	2300      	movs	r3, #0
 80062ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80062f0:	f107 020c 	add.w	r2, r7, #12
 80062f4:	2364      	movs	r3, #100	; 0x64
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2301      	movs	r3, #1
 80062fa:	2182      	movs	r1, #130	; 0x82
 80062fc:	4810      	ldr	r0, [pc, #64]	; (8006340 <readZ+0x60>)
 80062fe:	f7fb fc37 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8006302:	f107 020c 	add.w	r2, r7, #12
 8006306:	2364      	movs	r3, #100	; 0x64
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2302      	movs	r3, #2
 800630c:	2182      	movs	r1, #130	; 0x82
 800630e:	480c      	ldr	r0, [pc, #48]	; (8006340 <readZ+0x60>)
 8006310:	f7fb fd3c 	bl	8001d8c <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 8006314:	7b3b      	ldrb	r3, [r7, #12]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	b21a      	sxth	r2, r3
 800631a:	7b7b      	ldrb	r3, [r7, #13]
 800631c:	b21b      	sxth	r3, r3
 800631e:	4313      	orrs	r3, r2
 8006320:	b21b      	sxth	r3, r3
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <readZ+0x56>
	{
		*z = 0;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	801a      	strh	r2, [r3, #0]
	}
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000013c 	.word	0x2000013c

08006344 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af02      	add	r7, sp, #8
	touchReset();
 800634a:	f7ff fe7d 	bl	8006048 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 800634e:	2101      	movs	r1, #1
 8006350:	2001      	movs	r0, #1
 8006352:	f7ff fea1 	bl	8006098 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8006356:	2101      	movs	r1, #1
 8006358:	2002      	movs	r0, #2
 800635a:	f7ff fe9d 	bl	8006098 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 800635e:	4b41      	ldr	r3, [pc, #260]	; (8006464 <TP_Config+0x120>)
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006364:	1d3a      	adds	r2, r7, #4
 8006366:	2364      	movs	r3, #100	; 0x64
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2302      	movs	r3, #2
 800636c:	2182      	movs	r1, #130	; 0x82
 800636e:	483e      	ldr	r0, [pc, #248]	; (8006468 <TP_Config+0x124>)
 8006370:	f7fb fbfe 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8006374:	2014      	movs	r0, #20
 8006376:	f7fa f985 	bl	8000684 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 800637a:	2321      	movs	r3, #33	; 0x21
 800637c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800637e:	2301      	movs	r3, #1
 8006380:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006382:	1d3a      	adds	r2, r7, #4
 8006384:	2364      	movs	r3, #100	; 0x64
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	2302      	movs	r3, #2
 800638a:	2182      	movs	r1, #130	; 0x82
 800638c:	4836      	ldr	r0, [pc, #216]	; (8006468 <TP_Config+0x124>)
 800638e:	f7fb fbef 	bl	8001b70 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8006392:	2100      	movs	r1, #0
 8006394:	201e      	movs	r0, #30
 8006396:	f7ff fec5 	bl	8006124 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 800639a:	2341      	movs	r3, #65	; 0x41
 800639c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 800639e:	239a      	movs	r3, #154	; 0x9a
 80063a0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80063a2:	1d3a      	adds	r2, r7, #4
 80063a4:	2364      	movs	r3, #100	; 0x64
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2302      	movs	r3, #2
 80063aa:	2182      	movs	r1, #130	; 0x82
 80063ac:	482e      	ldr	r0, [pc, #184]	; (8006468 <TP_Config+0x124>)
 80063ae:	f7fb fbdf 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 80063b2:	234a      	movs	r3, #74	; 0x4a
 80063b4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80063b6:	2301      	movs	r3, #1
 80063b8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80063ba:	1d3a      	adds	r2, r7, #4
 80063bc:	2364      	movs	r3, #100	; 0x64
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	2302      	movs	r3, #2
 80063c2:	2182      	movs	r1, #130	; 0x82
 80063c4:	4828      	ldr	r0, [pc, #160]	; (8006468 <TP_Config+0x124>)
 80063c6:	f7fb fbd3 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80063ca:	234b      	movs	r3, #75	; 0x4b
 80063cc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80063ce:	2301      	movs	r3, #1
 80063d0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80063d2:	1d3a      	adds	r2, r7, #4
 80063d4:	2364      	movs	r3, #100	; 0x64
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2302      	movs	r3, #2
 80063da:	2182      	movs	r1, #130	; 0x82
 80063dc:	4822      	ldr	r0, [pc, #136]	; (8006468 <TP_Config+0x124>)
 80063de:	f7fb fbc7 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80063e2:	234b      	movs	r3, #75	; 0x4b
 80063e4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 80063e6:	2300      	movs	r3, #0
 80063e8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80063ea:	1d3a      	adds	r2, r7, #4
 80063ec:	2364      	movs	r3, #100	; 0x64
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2302      	movs	r3, #2
 80063f2:	2182      	movs	r1, #130	; 0x82
 80063f4:	481c      	ldr	r0, [pc, #112]	; (8006468 <TP_Config+0x124>)
 80063f6:	f7fb fbbb 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 80063fa:	2356      	movs	r3, #86	; 0x56
 80063fc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80063fe:	2301      	movs	r3, #1
 8006400:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006402:	1d3a      	adds	r2, r7, #4
 8006404:	2364      	movs	r3, #100	; 0x64
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2302      	movs	r3, #2
 800640a:	2182      	movs	r1, #130	; 0x82
 800640c:	4816      	ldr	r0, [pc, #88]	; (8006468 <TP_Config+0x124>)
 800640e:	f7fb fbaf 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8006412:	2358      	movs	r3, #88	; 0x58
 8006414:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8006416:	2301      	movs	r3, #1
 8006418:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800641a:	1d3a      	adds	r2, r7, #4
 800641c:	2364      	movs	r3, #100	; 0x64
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2302      	movs	r3, #2
 8006422:	2182      	movs	r1, #130	; 0x82
 8006424:	4810      	ldr	r0, [pc, #64]	; (8006468 <TP_Config+0x124>)
 8006426:	f7fb fba3 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 800642a:	2340      	movs	r3, #64	; 0x40
 800642c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 800642e:	2303      	movs	r3, #3
 8006430:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006432:	1d3a      	adds	r2, r7, #4
 8006434:	2364      	movs	r3, #100	; 0x64
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	2302      	movs	r3, #2
 800643a:	2182      	movs	r1, #130	; 0x82
 800643c:	480a      	ldr	r0, [pc, #40]	; (8006468 <TP_Config+0x124>)
 800643e:	f7fb fb97 	bl	8001b70 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8006442:	230b      	movs	r3, #11
 8006444:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8006446:	23ff      	movs	r3, #255	; 0xff
 8006448:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800644a:	1d3a      	adds	r2, r7, #4
 800644c:	2364      	movs	r3, #100	; 0x64
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2302      	movs	r3, #2
 8006452:	2182      	movs	r1, #130	; 0x82
 8006454:	4804      	ldr	r0, [pc, #16]	; (8006468 <TP_Config+0x124>)
 8006456:	f7fb fb8b 	bl	8001b70 <HAL_I2C_Master_Transmit>

}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	08006ed8 	.word	0x08006ed8
 8006468:	2000013c 	.word	0x2000013c

0800646c <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 8006474:	2340      	movs	r3, #64	; 0x40
 8006476:	733b      	strb	r3, [r7, #12]
 8006478:	2300      	movs	r3, #0
 800647a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800647c:	f107 020c 	add.w	r2, r7, #12
 8006480:	2364      	movs	r3, #100	; 0x64
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2301      	movs	r3, #1
 8006486:	2182      	movs	r1, #130	; 0x82
 8006488:	483b      	ldr	r0, [pc, #236]	; (8006578 <TP_GetState+0x10c>)
 800648a:	f7fb fb71 	bl	8001b70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800648e:	f107 020c 	add.w	r2, r7, #12
 8006492:	2364      	movs	r3, #100	; 0x64
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	2301      	movs	r3, #1
 8006498:	2182      	movs	r1, #130	; 0x82
 800649a:	4837      	ldr	r0, [pc, #220]	; (8006578 <TP_GetState+0x10c>)
 800649c:	f7fb fc76 	bl	8001d8c <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 80064a0:	7b3b      	ldrb	r3, [r7, #12]
 80064a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d039      	beq.n	8006528 <TP_GetState+0xbc>
	{
		readX(&x);
 80064b4:	f107 0312 	add.w	r3, r7, #18
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fe79 	bl	80061b0 <readX>
		readY(&y);
 80064be:	f107 0310 	add.w	r3, r7, #16
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fec6 	bl	8006254 <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 80064c8:	8a7a      	ldrh	r2, [r7, #18]
 80064ca:	4b2c      	ldr	r3, [pc, #176]	; (800657c <TP_GetState+0x110>)
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d905      	bls.n	80064de <TP_GetState+0x72>
 80064d2:	8a7a      	ldrh	r2, [r7, #18]
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <TP_GetState+0x110>)
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	b29b      	uxth	r3, r3
 80064dc:	e004      	b.n	80064e8 <TP_GetState+0x7c>
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <TP_GetState+0x110>)
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	8a7b      	ldrh	r3, [r7, #18]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 80064ea:	8a3a      	ldrh	r2, [r7, #16]
 80064ec:	4b24      	ldr	r3, [pc, #144]	; (8006580 <TP_GetState+0x114>)
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d905      	bls.n	8006500 <TP_GetState+0x94>
 80064f4:	8a3a      	ldrh	r2, [r7, #16]
 80064f6:	4b22      	ldr	r3, [pc, #136]	; (8006580 <TP_GetState+0x114>)
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	e004      	b.n	800650a <TP_GetState+0x9e>
 8006500:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <TP_GetState+0x114>)
 8006502:	881a      	ldrh	r2, [r3, #0]
 8006504:	8a3b      	ldrh	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	b29b      	uxth	r3, r3
 800650a:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 800650c:	8afa      	ldrh	r2, [r7, #22]
 800650e:	8abb      	ldrh	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	2b05      	cmp	r3, #5
 8006514:	dd05      	ble.n	8006522 <TP_GetState+0xb6>
		{
			_x = x;
 8006516:	8a7a      	ldrh	r2, [r7, #18]
 8006518:	4b18      	ldr	r3, [pc, #96]	; (800657c <TP_GetState+0x110>)
 800651a:	801a      	strh	r2, [r3, #0]
			_y = y;
 800651c:	8a3a      	ldrh	r2, [r7, #16]
 800651e:	4b18      	ldr	r3, [pc, #96]	; (8006580 <TP_GetState+0x114>)
 8006520:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 8006522:	4818      	ldr	r0, [pc, #96]	; (8006584 <TP_GetState+0x118>)
 8006524:	f7ff fedc 	bl	80062e0 <readZ>
	}

	state->x = _x;
 8006528:	4b14      	ldr	r3, [pc, #80]	; (800657c <TP_GetState+0x110>)
 800652a:	881a      	ldrh	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <TP_GetState+0x114>)
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 8006538:	4b12      	ldr	r3, [pc, #72]	; (8006584 <TP_GetState+0x118>)
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 8006540:	234b      	movs	r3, #75	; 0x4b
 8006542:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 8006544:	2301      	movs	r3, #1
 8006546:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8006548:	f107 020c 	add.w	r2, r7, #12
 800654c:	2364      	movs	r3, #100	; 0x64
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	2302      	movs	r3, #2
 8006552:	2182      	movs	r1, #130	; 0x82
 8006554:	4808      	ldr	r0, [pc, #32]	; (8006578 <TP_GetState+0x10c>)
 8006556:	f7fb fb0b 	bl	8001b70 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 800655a:	2300      	movs	r3, #0
 800655c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800655e:	f107 020c 	add.w	r2, r7, #12
 8006562:	2364      	movs	r3, #100	; 0x64
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	2302      	movs	r3, #2
 8006568:	2182      	movs	r1, #130	; 0x82
 800656a:	4803      	ldr	r0, [pc, #12]	; (8006578 <TP_GetState+0x10c>)
 800656c:	f7fb fb00 	bl	8001b70 <HAL_I2C_Master_Transmit>
}
 8006570:	bf00      	nop
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	2000013c 	.word	0x2000013c
 800657c:	200000b4 	.word	0x200000b4
 8006580:	200000b6 	.word	0x200000b6
 8006584:	200000b8 	.word	0x200000b8

08006588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800658c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800658e:	e003      	b.n	8006598 <LoopCopyDataInit>

08006590 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006592:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006594:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006596:	3104      	adds	r1, #4

08006598 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006598:	480b      	ldr	r0, [pc, #44]	; (80065c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800659c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800659e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065a0:	d3f6      	bcc.n	8006590 <CopyDataInit>
  ldr  r2, =_sbss
 80065a2:	4a0b      	ldr	r2, [pc, #44]	; (80065d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065a4:	e002      	b.n	80065ac <LoopFillZerobss>

080065a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065a8:	f842 3b04 	str.w	r3, [r2], #4

080065ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065b0:	d3f9      	bcc.n	80065a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065b2:	f7ff fd13 	bl	8005fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065b6:	f000 f811 	bl	80065dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065ba:	f7fe fcf5 	bl	8004fa8 <main>
  bx  lr    
 80065be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80065c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80065c4:	0800a7a8 	.word	0x0800a7a8
  ldr  r0, =_sdata
 80065c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065cc:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80065d0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80065d4:	200003b4 	.word	0x200003b4

080065d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065d8:	e7fe      	b.n	80065d8 <ADC_IRQHandler>
	...

080065dc <__libc_init_array>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0d      	ldr	r6, [pc, #52]	; (8006614 <__libc_init_array+0x38>)
 80065e0:	4c0d      	ldr	r4, [pc, #52]	; (8006618 <__libc_init_array+0x3c>)
 80065e2:	1ba4      	subs	r4, r4, r6
 80065e4:	10a4      	asrs	r4, r4, #2
 80065e6:	2500      	movs	r5, #0
 80065e8:	42a5      	cmp	r5, r4
 80065ea:	d109      	bne.n	8006600 <__libc_init_array+0x24>
 80065ec:	4e0b      	ldr	r6, [pc, #44]	; (800661c <__libc_init_array+0x40>)
 80065ee:	4c0c      	ldr	r4, [pc, #48]	; (8006620 <__libc_init_array+0x44>)
 80065f0:	f000 fc4c 	bl	8006e8c <_init>
 80065f4:	1ba4      	subs	r4, r4, r6
 80065f6:	10a4      	asrs	r4, r4, #2
 80065f8:	2500      	movs	r5, #0
 80065fa:	42a5      	cmp	r5, r4
 80065fc:	d105      	bne.n	800660a <__libc_init_array+0x2e>
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006604:	4798      	blx	r3
 8006606:	3501      	adds	r5, #1
 8006608:	e7ee      	b.n	80065e8 <__libc_init_array+0xc>
 800660a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800660e:	4798      	blx	r3
 8006610:	3501      	adds	r5, #1
 8006612:	e7f2      	b.n	80065fa <__libc_init_array+0x1e>
 8006614:	0800a7a0 	.word	0x0800a7a0
 8006618:	0800a7a0 	.word	0x0800a7a0
 800661c:	0800a7a0 	.word	0x0800a7a0
 8006620:	0800a7a4 	.word	0x0800a7a4

08006624 <memset>:
 8006624:	4402      	add	r2, r0
 8006626:	4603      	mov	r3, r0
 8006628:	4293      	cmp	r3, r2
 800662a:	d100      	bne.n	800662e <memset+0xa>
 800662c:	4770      	bx	lr
 800662e:	f803 1b01 	strb.w	r1, [r3], #1
 8006632:	e7f9      	b.n	8006628 <memset+0x4>

08006634 <siprintf>:
 8006634:	b40e      	push	{r1, r2, r3}
 8006636:	b500      	push	{lr}
 8006638:	b09c      	sub	sp, #112	; 0x70
 800663a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800663e:	ab1d      	add	r3, sp, #116	; 0x74
 8006640:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006644:	9002      	str	r0, [sp, #8]
 8006646:	9006      	str	r0, [sp, #24]
 8006648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800664c:	480a      	ldr	r0, [pc, #40]	; (8006678 <siprintf+0x44>)
 800664e:	9104      	str	r1, [sp, #16]
 8006650:	9107      	str	r1, [sp, #28]
 8006652:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006656:	f853 2b04 	ldr.w	r2, [r3], #4
 800665a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800665e:	6800      	ldr	r0, [r0, #0]
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	a902      	add	r1, sp, #8
 8006664:	f000 f866 	bl	8006734 <_svfiprintf_r>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	b01c      	add	sp, #112	; 0x70
 8006670:	f85d eb04 	ldr.w	lr, [sp], #4
 8006674:	b003      	add	sp, #12
 8006676:	4770      	bx	lr
 8006678:	20000030 	.word	0x20000030

0800667c <__ssputs_r>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	688e      	ldr	r6, [r1, #8]
 8006682:	429e      	cmp	r6, r3
 8006684:	4682      	mov	sl, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4691      	mov	r9, r2
 800668a:	4698      	mov	r8, r3
 800668c:	d835      	bhi.n	80066fa <__ssputs_r+0x7e>
 800668e:	898a      	ldrh	r2, [r1, #12]
 8006690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006694:	d031      	beq.n	80066fa <__ssputs_r+0x7e>
 8006696:	6825      	ldr	r5, [r4, #0]
 8006698:	6909      	ldr	r1, [r1, #16]
 800669a:	1a6f      	subs	r7, r5, r1
 800669c:	6965      	ldr	r5, [r4, #20]
 800669e:	2302      	movs	r3, #2
 80066a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80066a8:	f108 0301 	add.w	r3, r8, #1
 80066ac:	443b      	add	r3, r7
 80066ae:	429d      	cmp	r5, r3
 80066b0:	bf38      	it	cc
 80066b2:	461d      	movcc	r5, r3
 80066b4:	0553      	lsls	r3, r2, #21
 80066b6:	d531      	bpl.n	800671c <__ssputs_r+0xa0>
 80066b8:	4629      	mov	r1, r5
 80066ba:	f000 fb39 	bl	8006d30 <_malloc_r>
 80066be:	4606      	mov	r6, r0
 80066c0:	b950      	cbnz	r0, 80066d8 <__ssputs_r+0x5c>
 80066c2:	230c      	movs	r3, #12
 80066c4:	f8ca 3000 	str.w	r3, [sl]
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	463a      	mov	r2, r7
 80066da:	6921      	ldr	r1, [r4, #16]
 80066dc:	f000 fab4 	bl	8006c48 <memcpy>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	6126      	str	r6, [r4, #16]
 80066ee:	6165      	str	r5, [r4, #20]
 80066f0:	443e      	add	r6, r7
 80066f2:	1bed      	subs	r5, r5, r7
 80066f4:	6026      	str	r6, [r4, #0]
 80066f6:	60a5      	str	r5, [r4, #8]
 80066f8:	4646      	mov	r6, r8
 80066fa:	4546      	cmp	r6, r8
 80066fc:	bf28      	it	cs
 80066fe:	4646      	movcs	r6, r8
 8006700:	4632      	mov	r2, r6
 8006702:	4649      	mov	r1, r9
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	f000 faaa 	bl	8006c5e <memmove>
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	1b9b      	subs	r3, r3, r6
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	441e      	add	r6, r3
 8006714:	6026      	str	r6, [r4, #0]
 8006716:	2000      	movs	r0, #0
 8006718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671c:	462a      	mov	r2, r5
 800671e:	f000 fb65 	bl	8006dec <_realloc_r>
 8006722:	4606      	mov	r6, r0
 8006724:	2800      	cmp	r0, #0
 8006726:	d1e1      	bne.n	80066ec <__ssputs_r+0x70>
 8006728:	6921      	ldr	r1, [r4, #16]
 800672a:	4650      	mov	r0, sl
 800672c:	f000 fab2 	bl	8006c94 <_free_r>
 8006730:	e7c7      	b.n	80066c2 <__ssputs_r+0x46>
	...

08006734 <_svfiprintf_r>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	b09d      	sub	sp, #116	; 0x74
 800673a:	4680      	mov	r8, r0
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	898b      	ldrh	r3, [r1, #12]
 8006740:	061c      	lsls	r4, r3, #24
 8006742:	460d      	mov	r5, r1
 8006744:	4616      	mov	r6, r2
 8006746:	d50f      	bpl.n	8006768 <_svfiprintf_r+0x34>
 8006748:	690b      	ldr	r3, [r1, #16]
 800674a:	b96b      	cbnz	r3, 8006768 <_svfiprintf_r+0x34>
 800674c:	2140      	movs	r1, #64	; 0x40
 800674e:	f000 faef 	bl	8006d30 <_malloc_r>
 8006752:	6028      	str	r0, [r5, #0]
 8006754:	6128      	str	r0, [r5, #16]
 8006756:	b928      	cbnz	r0, 8006764 <_svfiprintf_r+0x30>
 8006758:	230c      	movs	r3, #12
 800675a:	f8c8 3000 	str.w	r3, [r8]
 800675e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006762:	e0c5      	b.n	80068f0 <_svfiprintf_r+0x1bc>
 8006764:	2340      	movs	r3, #64	; 0x40
 8006766:	616b      	str	r3, [r5, #20]
 8006768:	2300      	movs	r3, #0
 800676a:	9309      	str	r3, [sp, #36]	; 0x24
 800676c:	2320      	movs	r3, #32
 800676e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006772:	2330      	movs	r3, #48	; 0x30
 8006774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006778:	f04f 0b01 	mov.w	fp, #1
 800677c:	4637      	mov	r7, r6
 800677e:	463c      	mov	r4, r7
 8006780:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d13c      	bne.n	8006802 <_svfiprintf_r+0xce>
 8006788:	ebb7 0a06 	subs.w	sl, r7, r6
 800678c:	d00b      	beq.n	80067a6 <_svfiprintf_r+0x72>
 800678e:	4653      	mov	r3, sl
 8006790:	4632      	mov	r2, r6
 8006792:	4629      	mov	r1, r5
 8006794:	4640      	mov	r0, r8
 8006796:	f7ff ff71 	bl	800667c <__ssputs_r>
 800679a:	3001      	adds	r0, #1
 800679c:	f000 80a3 	beq.w	80068e6 <_svfiprintf_r+0x1b2>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	4453      	add	r3, sl
 80067a4:	9309      	str	r3, [sp, #36]	; 0x24
 80067a6:	783b      	ldrb	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 809c 	beq.w	80068e6 <_svfiprintf_r+0x1b2>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	9205      	str	r2, [sp, #20]
 80067ba:	9306      	str	r3, [sp, #24]
 80067bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c0:	931a      	str	r3, [sp, #104]	; 0x68
 80067c2:	2205      	movs	r2, #5
 80067c4:	7821      	ldrb	r1, [r4, #0]
 80067c6:	4850      	ldr	r0, [pc, #320]	; (8006908 <_svfiprintf_r+0x1d4>)
 80067c8:	f7f9 fd12 	bl	80001f0 <memchr>
 80067cc:	1c67      	adds	r7, r4, #1
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	b9d8      	cbnz	r0, 800680a <_svfiprintf_r+0xd6>
 80067d2:	06d9      	lsls	r1, r3, #27
 80067d4:	bf44      	itt	mi
 80067d6:	2220      	movmi	r2, #32
 80067d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067dc:	071a      	lsls	r2, r3, #28
 80067de:	bf44      	itt	mi
 80067e0:	222b      	movmi	r2, #43	; 0x2b
 80067e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067e6:	7822      	ldrb	r2, [r4, #0]
 80067e8:	2a2a      	cmp	r2, #42	; 0x2a
 80067ea:	d016      	beq.n	800681a <_svfiprintf_r+0xe6>
 80067ec:	9a07      	ldr	r2, [sp, #28]
 80067ee:	2100      	movs	r1, #0
 80067f0:	200a      	movs	r0, #10
 80067f2:	4627      	mov	r7, r4
 80067f4:	3401      	adds	r4, #1
 80067f6:	783b      	ldrb	r3, [r7, #0]
 80067f8:	3b30      	subs	r3, #48	; 0x30
 80067fa:	2b09      	cmp	r3, #9
 80067fc:	d951      	bls.n	80068a2 <_svfiprintf_r+0x16e>
 80067fe:	b1c9      	cbz	r1, 8006834 <_svfiprintf_r+0x100>
 8006800:	e011      	b.n	8006826 <_svfiprintf_r+0xf2>
 8006802:	2b25      	cmp	r3, #37	; 0x25
 8006804:	d0c0      	beq.n	8006788 <_svfiprintf_r+0x54>
 8006806:	4627      	mov	r7, r4
 8006808:	e7b9      	b.n	800677e <_svfiprintf_r+0x4a>
 800680a:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <_svfiprintf_r+0x1d4>)
 800680c:	1a80      	subs	r0, r0, r2
 800680e:	fa0b f000 	lsl.w	r0, fp, r0
 8006812:	4318      	orrs	r0, r3
 8006814:	9004      	str	r0, [sp, #16]
 8006816:	463c      	mov	r4, r7
 8006818:	e7d3      	b.n	80067c2 <_svfiprintf_r+0x8e>
 800681a:	9a03      	ldr	r2, [sp, #12]
 800681c:	1d11      	adds	r1, r2, #4
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	9103      	str	r1, [sp, #12]
 8006822:	2a00      	cmp	r2, #0
 8006824:	db01      	blt.n	800682a <_svfiprintf_r+0xf6>
 8006826:	9207      	str	r2, [sp, #28]
 8006828:	e004      	b.n	8006834 <_svfiprintf_r+0x100>
 800682a:	4252      	negs	r2, r2
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	9207      	str	r2, [sp, #28]
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	783b      	ldrb	r3, [r7, #0]
 8006836:	2b2e      	cmp	r3, #46	; 0x2e
 8006838:	d10e      	bne.n	8006858 <_svfiprintf_r+0x124>
 800683a:	787b      	ldrb	r3, [r7, #1]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	f107 0101 	add.w	r1, r7, #1
 8006842:	d132      	bne.n	80068aa <_svfiprintf_r+0x176>
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	1d1a      	adds	r2, r3, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	9203      	str	r2, [sp, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	bfb8      	it	lt
 8006850:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006854:	3702      	adds	r7, #2
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	4c2c      	ldr	r4, [pc, #176]	; (800690c <_svfiprintf_r+0x1d8>)
 800685a:	7839      	ldrb	r1, [r7, #0]
 800685c:	2203      	movs	r2, #3
 800685e:	4620      	mov	r0, r4
 8006860:	f7f9 fcc6 	bl	80001f0 <memchr>
 8006864:	b138      	cbz	r0, 8006876 <_svfiprintf_r+0x142>
 8006866:	2340      	movs	r3, #64	; 0x40
 8006868:	1b00      	subs	r0, r0, r4
 800686a:	fa03 f000 	lsl.w	r0, r3, r0
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	4303      	orrs	r3, r0
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	3701      	adds	r7, #1
 8006876:	7839      	ldrb	r1, [r7, #0]
 8006878:	4825      	ldr	r0, [pc, #148]	; (8006910 <_svfiprintf_r+0x1dc>)
 800687a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800687e:	2206      	movs	r2, #6
 8006880:	1c7e      	adds	r6, r7, #1
 8006882:	f7f9 fcb5 	bl	80001f0 <memchr>
 8006886:	2800      	cmp	r0, #0
 8006888:	d035      	beq.n	80068f6 <_svfiprintf_r+0x1c2>
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <_svfiprintf_r+0x1e0>)
 800688c:	b9fb      	cbnz	r3, 80068ce <_svfiprintf_r+0x19a>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	3307      	adds	r3, #7
 8006892:	f023 0307 	bic.w	r3, r3, #7
 8006896:	3308      	adds	r3, #8
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689c:	444b      	add	r3, r9
 800689e:	9309      	str	r3, [sp, #36]	; 0x24
 80068a0:	e76c      	b.n	800677c <_svfiprintf_r+0x48>
 80068a2:	fb00 3202 	mla	r2, r0, r2, r3
 80068a6:	2101      	movs	r1, #1
 80068a8:	e7a3      	b.n	80067f2 <_svfiprintf_r+0xbe>
 80068aa:	2300      	movs	r3, #0
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	4618      	mov	r0, r3
 80068b0:	240a      	movs	r4, #10
 80068b2:	460f      	mov	r7, r1
 80068b4:	3101      	adds	r1, #1
 80068b6:	783a      	ldrb	r2, [r7, #0]
 80068b8:	3a30      	subs	r2, #48	; 0x30
 80068ba:	2a09      	cmp	r2, #9
 80068bc:	d903      	bls.n	80068c6 <_svfiprintf_r+0x192>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ca      	beq.n	8006858 <_svfiprintf_r+0x124>
 80068c2:	9005      	str	r0, [sp, #20]
 80068c4:	e7c8      	b.n	8006858 <_svfiprintf_r+0x124>
 80068c6:	fb04 2000 	mla	r0, r4, r0, r2
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7f1      	b.n	80068b2 <_svfiprintf_r+0x17e>
 80068ce:	ab03      	add	r3, sp, #12
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	462a      	mov	r2, r5
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <_svfiprintf_r+0x1e4>)
 80068d6:	a904      	add	r1, sp, #16
 80068d8:	4640      	mov	r0, r8
 80068da:	f3af 8000 	nop.w
 80068de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80068e2:	4681      	mov	r9, r0
 80068e4:	d1d9      	bne.n	800689a <_svfiprintf_r+0x166>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	065b      	lsls	r3, r3, #25
 80068ea:	f53f af38 	bmi.w	800675e <_svfiprintf_r+0x2a>
 80068ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f0:	b01d      	add	sp, #116	; 0x74
 80068f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f6:	ab03      	add	r3, sp, #12
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	462a      	mov	r2, r5
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <_svfiprintf_r+0x1e4>)
 80068fe:	a904      	add	r1, sp, #16
 8006900:	4640      	mov	r0, r8
 8006902:	f000 f881 	bl	8006a08 <_printf_i>
 8006906:	e7ea      	b.n	80068de <_svfiprintf_r+0x1aa>
 8006908:	0800a764 	.word	0x0800a764
 800690c:	0800a76a 	.word	0x0800a76a
 8006910:	0800a76e 	.word	0x0800a76e
 8006914:	00000000 	.word	0x00000000
 8006918:	0800667d 	.word	0x0800667d

0800691c <_printf_common>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	4691      	mov	r9, r2
 8006922:	461f      	mov	r7, r3
 8006924:	688a      	ldr	r2, [r1, #8]
 8006926:	690b      	ldr	r3, [r1, #16]
 8006928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800692c:	4293      	cmp	r3, r2
 800692e:	bfb8      	it	lt
 8006930:	4613      	movlt	r3, r2
 8006932:	f8c9 3000 	str.w	r3, [r9]
 8006936:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800693a:	4606      	mov	r6, r0
 800693c:	460c      	mov	r4, r1
 800693e:	b112      	cbz	r2, 8006946 <_printf_common+0x2a>
 8006940:	3301      	adds	r3, #1
 8006942:	f8c9 3000 	str.w	r3, [r9]
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	0699      	lsls	r1, r3, #26
 800694a:	bf42      	ittt	mi
 800694c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006950:	3302      	addmi	r3, #2
 8006952:	f8c9 3000 	strmi.w	r3, [r9]
 8006956:	6825      	ldr	r5, [r4, #0]
 8006958:	f015 0506 	ands.w	r5, r5, #6
 800695c:	d107      	bne.n	800696e <_printf_common+0x52>
 800695e:	f104 0a19 	add.w	sl, r4, #25
 8006962:	68e3      	ldr	r3, [r4, #12]
 8006964:	f8d9 2000 	ldr.w	r2, [r9]
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	429d      	cmp	r5, r3
 800696c:	db29      	blt.n	80069c2 <_printf_common+0xa6>
 800696e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	3300      	adds	r3, #0
 8006976:	bf18      	it	ne
 8006978:	2301      	movne	r3, #1
 800697a:	0692      	lsls	r2, r2, #26
 800697c:	d42e      	bmi.n	80069dc <_printf_common+0xc0>
 800697e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006982:	4639      	mov	r1, r7
 8006984:	4630      	mov	r0, r6
 8006986:	47c0      	blx	r8
 8006988:	3001      	adds	r0, #1
 800698a:	d021      	beq.n	80069d0 <_printf_common+0xb4>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	68e5      	ldr	r5, [r4, #12]
 8006990:	f8d9 2000 	ldr.w	r2, [r9]
 8006994:	f003 0306 	and.w	r3, r3, #6
 8006998:	2b04      	cmp	r3, #4
 800699a:	bf08      	it	eq
 800699c:	1aad      	subeq	r5, r5, r2
 800699e:	68a3      	ldr	r3, [r4, #8]
 80069a0:	6922      	ldr	r2, [r4, #16]
 80069a2:	bf0c      	ite	eq
 80069a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a8:	2500      	movne	r5, #0
 80069aa:	4293      	cmp	r3, r2
 80069ac:	bfc4      	itt	gt
 80069ae:	1a9b      	subgt	r3, r3, r2
 80069b0:	18ed      	addgt	r5, r5, r3
 80069b2:	f04f 0900 	mov.w	r9, #0
 80069b6:	341a      	adds	r4, #26
 80069b8:	454d      	cmp	r5, r9
 80069ba:	d11b      	bne.n	80069f4 <_printf_common+0xd8>
 80069bc:	2000      	movs	r0, #0
 80069be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c2:	2301      	movs	r3, #1
 80069c4:	4652      	mov	r2, sl
 80069c6:	4639      	mov	r1, r7
 80069c8:	4630      	mov	r0, r6
 80069ca:	47c0      	blx	r8
 80069cc:	3001      	adds	r0, #1
 80069ce:	d103      	bne.n	80069d8 <_printf_common+0xbc>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	3501      	adds	r5, #1
 80069da:	e7c2      	b.n	8006962 <_printf_common+0x46>
 80069dc:	18e1      	adds	r1, r4, r3
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	2030      	movs	r0, #48	; 0x30
 80069e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069e6:	4422      	add	r2, r4
 80069e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069f0:	3302      	adds	r3, #2
 80069f2:	e7c4      	b.n	800697e <_printf_common+0x62>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4622      	mov	r2, r4
 80069f8:	4639      	mov	r1, r7
 80069fa:	4630      	mov	r0, r6
 80069fc:	47c0      	blx	r8
 80069fe:	3001      	adds	r0, #1
 8006a00:	d0e6      	beq.n	80069d0 <_printf_common+0xb4>
 8006a02:	f109 0901 	add.w	r9, r9, #1
 8006a06:	e7d7      	b.n	80069b8 <_printf_common+0x9c>

08006a08 <_printf_i>:
 8006a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	4617      	mov	r7, r2
 8006a0e:	7e0a      	ldrb	r2, [r1, #24]
 8006a10:	b085      	sub	sp, #20
 8006a12:	2a6e      	cmp	r2, #110	; 0x6e
 8006a14:	4698      	mov	r8, r3
 8006a16:	4606      	mov	r6, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006a20:	f000 80bc 	beq.w	8006b9c <_printf_i+0x194>
 8006a24:	d81a      	bhi.n	8006a5c <_printf_i+0x54>
 8006a26:	2a63      	cmp	r2, #99	; 0x63
 8006a28:	d02e      	beq.n	8006a88 <_printf_i+0x80>
 8006a2a:	d80a      	bhi.n	8006a42 <_printf_i+0x3a>
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	f000 80c8 	beq.w	8006bc2 <_printf_i+0x1ba>
 8006a32:	2a58      	cmp	r2, #88	; 0x58
 8006a34:	f000 808a 	beq.w	8006b4c <_printf_i+0x144>
 8006a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006a40:	e02a      	b.n	8006a98 <_printf_i+0x90>
 8006a42:	2a64      	cmp	r2, #100	; 0x64
 8006a44:	d001      	beq.n	8006a4a <_printf_i+0x42>
 8006a46:	2a69      	cmp	r2, #105	; 0x69
 8006a48:	d1f6      	bne.n	8006a38 <_printf_i+0x30>
 8006a4a:	6821      	ldr	r1, [r4, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a52:	d023      	beq.n	8006a9c <_printf_i+0x94>
 8006a54:	1d11      	adds	r1, r2, #4
 8006a56:	6019      	str	r1, [r3, #0]
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	e027      	b.n	8006aac <_printf_i+0xa4>
 8006a5c:	2a73      	cmp	r2, #115	; 0x73
 8006a5e:	f000 80b4 	beq.w	8006bca <_printf_i+0x1c2>
 8006a62:	d808      	bhi.n	8006a76 <_printf_i+0x6e>
 8006a64:	2a6f      	cmp	r2, #111	; 0x6f
 8006a66:	d02a      	beq.n	8006abe <_printf_i+0xb6>
 8006a68:	2a70      	cmp	r2, #112	; 0x70
 8006a6a:	d1e5      	bne.n	8006a38 <_printf_i+0x30>
 8006a6c:	680a      	ldr	r2, [r1, #0]
 8006a6e:	f042 0220 	orr.w	r2, r2, #32
 8006a72:	600a      	str	r2, [r1, #0]
 8006a74:	e003      	b.n	8006a7e <_printf_i+0x76>
 8006a76:	2a75      	cmp	r2, #117	; 0x75
 8006a78:	d021      	beq.n	8006abe <_printf_i+0xb6>
 8006a7a:	2a78      	cmp	r2, #120	; 0x78
 8006a7c:	d1dc      	bne.n	8006a38 <_printf_i+0x30>
 8006a7e:	2278      	movs	r2, #120	; 0x78
 8006a80:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006a84:	496e      	ldr	r1, [pc, #440]	; (8006c40 <_printf_i+0x238>)
 8006a86:	e064      	b.n	8006b52 <_printf_i+0x14a>
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006a8e:	1d11      	adds	r1, r2, #4
 8006a90:	6019      	str	r1, [r3, #0]
 8006a92:	6813      	ldr	r3, [r2, #0]
 8006a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0a3      	b.n	8006be4 <_printf_i+0x1dc>
 8006a9c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006aa0:	f102 0104 	add.w	r1, r2, #4
 8006aa4:	6019      	str	r1, [r3, #0]
 8006aa6:	d0d7      	beq.n	8006a58 <_printf_i+0x50>
 8006aa8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da03      	bge.n	8006ab8 <_printf_i+0xb0>
 8006ab0:	222d      	movs	r2, #45	; 0x2d
 8006ab2:	425b      	negs	r3, r3
 8006ab4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ab8:	4962      	ldr	r1, [pc, #392]	; (8006c44 <_printf_i+0x23c>)
 8006aba:	220a      	movs	r2, #10
 8006abc:	e017      	b.n	8006aee <_printf_i+0xe6>
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ac6:	d003      	beq.n	8006ad0 <_printf_i+0xc8>
 8006ac8:	1d08      	adds	r0, r1, #4
 8006aca:	6018      	str	r0, [r3, #0]
 8006acc:	680b      	ldr	r3, [r1, #0]
 8006ace:	e006      	b.n	8006ade <_printf_i+0xd6>
 8006ad0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ad4:	f101 0004 	add.w	r0, r1, #4
 8006ad8:	6018      	str	r0, [r3, #0]
 8006ada:	d0f7      	beq.n	8006acc <_printf_i+0xc4>
 8006adc:	880b      	ldrh	r3, [r1, #0]
 8006ade:	4959      	ldr	r1, [pc, #356]	; (8006c44 <_printf_i+0x23c>)
 8006ae0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ae2:	bf14      	ite	ne
 8006ae4:	220a      	movne	r2, #10
 8006ae6:	2208      	moveq	r2, #8
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006aee:	6865      	ldr	r5, [r4, #4]
 8006af0:	60a5      	str	r5, [r4, #8]
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	f2c0 809c 	blt.w	8006c30 <_printf_i+0x228>
 8006af8:	6820      	ldr	r0, [r4, #0]
 8006afa:	f020 0004 	bic.w	r0, r0, #4
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d13f      	bne.n	8006b84 <_printf_i+0x17c>
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	f040 8095 	bne.w	8006c34 <_printf_i+0x22c>
 8006b0a:	4675      	mov	r5, lr
 8006b0c:	2a08      	cmp	r2, #8
 8006b0e:	d10b      	bne.n	8006b28 <_printf_i+0x120>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07da      	lsls	r2, r3, #31
 8006b14:	d508      	bpl.n	8006b28 <_printf_i+0x120>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	6862      	ldr	r2, [r4, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	bfde      	ittt	le
 8006b1e:	2330      	movle	r3, #48	; 0x30
 8006b20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b28:	ebae 0305 	sub.w	r3, lr, r5
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	f8cd 8000 	str.w	r8, [sp]
 8006b32:	463b      	mov	r3, r7
 8006b34:	aa03      	add	r2, sp, #12
 8006b36:	4621      	mov	r1, r4
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7ff feef 	bl	800691c <_printf_common>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d155      	bne.n	8006bee <_printf_i+0x1e6>
 8006b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b46:	b005      	add	sp, #20
 8006b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b4c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006b50:	493c      	ldr	r1, [pc, #240]	; (8006c44 <_printf_i+0x23c>)
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006b5a:	f100 0504 	add.w	r5, r0, #4
 8006b5e:	601d      	str	r5, [r3, #0]
 8006b60:	d001      	beq.n	8006b66 <_printf_i+0x15e>
 8006b62:	6803      	ldr	r3, [r0, #0]
 8006b64:	e002      	b.n	8006b6c <_printf_i+0x164>
 8006b66:	0655      	lsls	r5, r2, #25
 8006b68:	d5fb      	bpl.n	8006b62 <_printf_i+0x15a>
 8006b6a:	8803      	ldrh	r3, [r0, #0]
 8006b6c:	07d0      	lsls	r0, r2, #31
 8006b6e:	bf44      	itt	mi
 8006b70:	f042 0220 	orrmi.w	r2, r2, #32
 8006b74:	6022      	strmi	r2, [r4, #0]
 8006b76:	b91b      	cbnz	r3, 8006b80 <_printf_i+0x178>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	f022 0220 	bic.w	r2, r2, #32
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	2210      	movs	r2, #16
 8006b82:	e7b1      	b.n	8006ae8 <_printf_i+0xe0>
 8006b84:	4675      	mov	r5, lr
 8006b86:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b8a:	fb02 3310 	mls	r3, r2, r0, r3
 8006b8e:	5ccb      	ldrb	r3, [r1, r3]
 8006b90:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b94:	4603      	mov	r3, r0
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d1f5      	bne.n	8006b86 <_printf_i+0x17e>
 8006b9a:	e7b7      	b.n	8006b0c <_printf_i+0x104>
 8006b9c:	6808      	ldr	r0, [r1, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	6949      	ldr	r1, [r1, #20]
 8006ba2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ba6:	d004      	beq.n	8006bb2 <_printf_i+0x1aa>
 8006ba8:	1d10      	adds	r0, r2, #4
 8006baa:	6018      	str	r0, [r3, #0]
 8006bac:	6813      	ldr	r3, [r2, #0]
 8006bae:	6019      	str	r1, [r3, #0]
 8006bb0:	e007      	b.n	8006bc2 <_printf_i+0x1ba>
 8006bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bb6:	f102 0004 	add.w	r0, r2, #4
 8006bba:	6018      	str	r0, [r3, #0]
 8006bbc:	6813      	ldr	r3, [r2, #0]
 8006bbe:	d0f6      	beq.n	8006bae <_printf_i+0x1a6>
 8006bc0:	8019      	strh	r1, [r3, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	4675      	mov	r5, lr
 8006bc8:	e7b1      	b.n	8006b2e <_printf_i+0x126>
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	1d11      	adds	r1, r2, #4
 8006bce:	6019      	str	r1, [r3, #0]
 8006bd0:	6815      	ldr	r5, [r2, #0]
 8006bd2:	6862      	ldr	r2, [r4, #4]
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f7f9 fb0a 	bl	80001f0 <memchr>
 8006bdc:	b108      	cbz	r0, 8006be2 <_printf_i+0x1da>
 8006bde:	1b40      	subs	r0, r0, r5
 8006be0:	6060      	str	r0, [r4, #4]
 8006be2:	6863      	ldr	r3, [r4, #4]
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	2300      	movs	r3, #0
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bec:	e79f      	b.n	8006b2e <_printf_i+0x126>
 8006bee:	6923      	ldr	r3, [r4, #16]
 8006bf0:	462a      	mov	r2, r5
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	47c0      	blx	r8
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d0a2      	beq.n	8006b42 <_printf_i+0x13a>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	079b      	lsls	r3, r3, #30
 8006c00:	d507      	bpl.n	8006c12 <_printf_i+0x20a>
 8006c02:	2500      	movs	r5, #0
 8006c04:	f104 0919 	add.w	r9, r4, #25
 8006c08:	68e3      	ldr	r3, [r4, #12]
 8006c0a:	9a03      	ldr	r2, [sp, #12]
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	db05      	blt.n	8006c1e <_printf_i+0x216>
 8006c12:	68e0      	ldr	r0, [r4, #12]
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	4298      	cmp	r0, r3
 8006c18:	bfb8      	it	lt
 8006c1a:	4618      	movlt	r0, r3
 8006c1c:	e793      	b.n	8006b46 <_printf_i+0x13e>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	464a      	mov	r2, r9
 8006c22:	4639      	mov	r1, r7
 8006c24:	4630      	mov	r0, r6
 8006c26:	47c0      	blx	r8
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d08a      	beq.n	8006b42 <_printf_i+0x13a>
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	e7eb      	b.n	8006c08 <_printf_i+0x200>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1a7      	bne.n	8006b84 <_printf_i+0x17c>
 8006c34:	780b      	ldrb	r3, [r1, #0]
 8006c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3e:	e765      	b.n	8006b0c <_printf_i+0x104>
 8006c40:	0800a786 	.word	0x0800a786
 8006c44:	0800a775 	.word	0x0800a775

08006c48 <memcpy>:
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	1e43      	subs	r3, r0, #1
 8006c4c:	440a      	add	r2, r1
 8006c4e:	4291      	cmp	r1, r2
 8006c50:	d100      	bne.n	8006c54 <memcpy+0xc>
 8006c52:	bd10      	pop	{r4, pc}
 8006c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c5c:	e7f7      	b.n	8006c4e <memcpy+0x6>

08006c5e <memmove>:
 8006c5e:	4288      	cmp	r0, r1
 8006c60:	b510      	push	{r4, lr}
 8006c62:	eb01 0302 	add.w	r3, r1, r2
 8006c66:	d803      	bhi.n	8006c70 <memmove+0x12>
 8006c68:	1e42      	subs	r2, r0, #1
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	d10c      	bne.n	8006c88 <memmove+0x2a>
 8006c6e:	bd10      	pop	{r4, pc}
 8006c70:	4298      	cmp	r0, r3
 8006c72:	d2f9      	bcs.n	8006c68 <memmove+0xa>
 8006c74:	1881      	adds	r1, r0, r2
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	42d3      	cmn	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memmove+0x20>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c86:	e7f7      	b.n	8006c78 <memmove+0x1a>
 8006c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c90:	e7eb      	b.n	8006c6a <memmove+0xc>
	...

08006c94 <_free_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4605      	mov	r5, r0
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	d045      	beq.n	8006d28 <_free_r+0x94>
 8006c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca0:	1f0c      	subs	r4, r1, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	bfb8      	it	lt
 8006ca6:	18e4      	addlt	r4, r4, r3
 8006ca8:	f000 f8d6 	bl	8006e58 <__malloc_lock>
 8006cac:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <_free_r+0x98>)
 8006cae:	6813      	ldr	r3, [r2, #0]
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	b933      	cbnz	r3, 8006cc2 <_free_r+0x2e>
 8006cb4:	6063      	str	r3, [r4, #4]
 8006cb6:	6014      	str	r4, [r2, #0]
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cbe:	f000 b8cc 	b.w	8006e5a <__malloc_unlock>
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	d90c      	bls.n	8006ce0 <_free_r+0x4c>
 8006cc6:	6821      	ldr	r1, [r4, #0]
 8006cc8:	1862      	adds	r2, r4, r1
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	bf04      	itt	eq
 8006cce:	681a      	ldreq	r2, [r3, #0]
 8006cd0:	685b      	ldreq	r3, [r3, #4]
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	bf04      	itt	eq
 8006cd6:	1852      	addeq	r2, r2, r1
 8006cd8:	6022      	streq	r2, [r4, #0]
 8006cda:	6004      	str	r4, [r0, #0]
 8006cdc:	e7ec      	b.n	8006cb8 <_free_r+0x24>
 8006cde:	4613      	mov	r3, r2
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	b10a      	cbz	r2, 8006ce8 <_free_r+0x54>
 8006ce4:	42a2      	cmp	r2, r4
 8006ce6:	d9fa      	bls.n	8006cde <_free_r+0x4a>
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	1858      	adds	r0, r3, r1
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d10b      	bne.n	8006d08 <_free_r+0x74>
 8006cf0:	6820      	ldr	r0, [r4, #0]
 8006cf2:	4401      	add	r1, r0
 8006cf4:	1858      	adds	r0, r3, r1
 8006cf6:	4282      	cmp	r2, r0
 8006cf8:	6019      	str	r1, [r3, #0]
 8006cfa:	d1dd      	bne.n	8006cb8 <_free_r+0x24>
 8006cfc:	6810      	ldr	r0, [r2, #0]
 8006cfe:	6852      	ldr	r2, [r2, #4]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	4401      	add	r1, r0
 8006d04:	6019      	str	r1, [r3, #0]
 8006d06:	e7d7      	b.n	8006cb8 <_free_r+0x24>
 8006d08:	d902      	bls.n	8006d10 <_free_r+0x7c>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	e7d3      	b.n	8006cb8 <_free_r+0x24>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	1821      	adds	r1, r4, r0
 8006d14:	428a      	cmp	r2, r1
 8006d16:	bf04      	itt	eq
 8006d18:	6811      	ldreq	r1, [r2, #0]
 8006d1a:	6852      	ldreq	r2, [r2, #4]
 8006d1c:	6062      	str	r2, [r4, #4]
 8006d1e:	bf04      	itt	eq
 8006d20:	1809      	addeq	r1, r1, r0
 8006d22:	6021      	streq	r1, [r4, #0]
 8006d24:	605c      	str	r4, [r3, #4]
 8006d26:	e7c7      	b.n	8006cb8 <_free_r+0x24>
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200000bc 	.word	0x200000bc

08006d30 <_malloc_r>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	1ccd      	adds	r5, r1, #3
 8006d34:	f025 0503 	bic.w	r5, r5, #3
 8006d38:	3508      	adds	r5, #8
 8006d3a:	2d0c      	cmp	r5, #12
 8006d3c:	bf38      	it	cc
 8006d3e:	250c      	movcc	r5, #12
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	4606      	mov	r6, r0
 8006d44:	db01      	blt.n	8006d4a <_malloc_r+0x1a>
 8006d46:	42a9      	cmp	r1, r5
 8006d48:	d903      	bls.n	8006d52 <_malloc_r+0x22>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	6033      	str	r3, [r6, #0]
 8006d4e:	2000      	movs	r0, #0
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
 8006d52:	f000 f881 	bl	8006e58 <__malloc_lock>
 8006d56:	4a23      	ldr	r2, [pc, #140]	; (8006de4 <_malloc_r+0xb4>)
 8006d58:	6814      	ldr	r4, [r2, #0]
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	b991      	cbnz	r1, 8006d84 <_malloc_r+0x54>
 8006d5e:	4c22      	ldr	r4, [pc, #136]	; (8006de8 <_malloc_r+0xb8>)
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	b91b      	cbnz	r3, 8006d6c <_malloc_r+0x3c>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f867 	bl	8006e38 <_sbrk_r>
 8006d6a:	6020      	str	r0, [r4, #0]
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f862 	bl	8006e38 <_sbrk_r>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d126      	bne.n	8006dc6 <_malloc_r+0x96>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	6033      	str	r3, [r6, #0]
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f000 f86c 	bl	8006e5a <__malloc_unlock>
 8006d82:	e7e4      	b.n	8006d4e <_malloc_r+0x1e>
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	1b5b      	subs	r3, r3, r5
 8006d88:	d41a      	bmi.n	8006dc0 <_malloc_r+0x90>
 8006d8a:	2b0b      	cmp	r3, #11
 8006d8c:	d90f      	bls.n	8006dae <_malloc_r+0x7e>
 8006d8e:	600b      	str	r3, [r1, #0]
 8006d90:	50cd      	str	r5, [r1, r3]
 8006d92:	18cc      	adds	r4, r1, r3
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 f860 	bl	8006e5a <__malloc_unlock>
 8006d9a:	f104 000b 	add.w	r0, r4, #11
 8006d9e:	1d23      	adds	r3, r4, #4
 8006da0:	f020 0007 	bic.w	r0, r0, #7
 8006da4:	1ac3      	subs	r3, r0, r3
 8006da6:	d01b      	beq.n	8006de0 <_malloc_r+0xb0>
 8006da8:	425a      	negs	r2, r3
 8006daa:	50e2      	str	r2, [r4, r3]
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	428c      	cmp	r4, r1
 8006db0:	bf0d      	iteet	eq
 8006db2:	6863      	ldreq	r3, [r4, #4]
 8006db4:	684b      	ldrne	r3, [r1, #4]
 8006db6:	6063      	strne	r3, [r4, #4]
 8006db8:	6013      	streq	r3, [r2, #0]
 8006dba:	bf18      	it	ne
 8006dbc:	460c      	movne	r4, r1
 8006dbe:	e7e9      	b.n	8006d94 <_malloc_r+0x64>
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	6849      	ldr	r1, [r1, #4]
 8006dc4:	e7ca      	b.n	8006d5c <_malloc_r+0x2c>
 8006dc6:	1cc4      	adds	r4, r0, #3
 8006dc8:	f024 0403 	bic.w	r4, r4, #3
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d005      	beq.n	8006ddc <_malloc_r+0xac>
 8006dd0:	1a21      	subs	r1, r4, r0
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 f830 	bl	8006e38 <_sbrk_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d0cd      	beq.n	8006d78 <_malloc_r+0x48>
 8006ddc:	6025      	str	r5, [r4, #0]
 8006dde:	e7d9      	b.n	8006d94 <_malloc_r+0x64>
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	bf00      	nop
 8006de4:	200000bc 	.word	0x200000bc
 8006de8:	200000c0 	.word	0x200000c0

08006dec <_realloc_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	4607      	mov	r7, r0
 8006df0:	4614      	mov	r4, r2
 8006df2:	460e      	mov	r6, r1
 8006df4:	b921      	cbnz	r1, 8006e00 <_realloc_r+0x14>
 8006df6:	4611      	mov	r1, r2
 8006df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dfc:	f7ff bf98 	b.w	8006d30 <_malloc_r>
 8006e00:	b922      	cbnz	r2, 8006e0c <_realloc_r+0x20>
 8006e02:	f7ff ff47 	bl	8006c94 <_free_r>
 8006e06:	4625      	mov	r5, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0c:	f000 f826 	bl	8006e5c <_malloc_usable_size_r>
 8006e10:	4284      	cmp	r4, r0
 8006e12:	d90f      	bls.n	8006e34 <_realloc_r+0x48>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4638      	mov	r0, r7
 8006e18:	f7ff ff8a 	bl	8006d30 <_malloc_r>
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d0f2      	beq.n	8006e08 <_realloc_r+0x1c>
 8006e22:	4631      	mov	r1, r6
 8006e24:	4622      	mov	r2, r4
 8006e26:	f7ff ff0f 	bl	8006c48 <memcpy>
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7ff ff31 	bl	8006c94 <_free_r>
 8006e32:	e7e9      	b.n	8006e08 <_realloc_r+0x1c>
 8006e34:	4635      	mov	r5, r6
 8006e36:	e7e7      	b.n	8006e08 <_realloc_r+0x1c>

08006e38 <_sbrk_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4c06      	ldr	r4, [pc, #24]	; (8006e54 <_sbrk_r+0x1c>)
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4605      	mov	r5, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	f000 f814 	bl	8006e70 <_sbrk>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_sbrk_r+0x1a>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_sbrk_r+0x1a>
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200003b0 	.word	0x200003b0

08006e58 <__malloc_lock>:
 8006e58:	4770      	bx	lr

08006e5a <__malloc_unlock>:
 8006e5a:	4770      	bx	lr

08006e5c <_malloc_usable_size_r>:
 8006e5c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f1a0 0004 	sub.w	r0, r0, #4
 8006e66:	bfbc      	itt	lt
 8006e68:	580b      	ldrlt	r3, [r1, r0]
 8006e6a:	18c0      	addlt	r0, r0, r3
 8006e6c:	4770      	bx	lr
	...

08006e70 <_sbrk>:
 8006e70:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <_sbrk+0x14>)
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	4602      	mov	r2, r0
 8006e76:	b909      	cbnz	r1, 8006e7c <_sbrk+0xc>
 8006e78:	4903      	ldr	r1, [pc, #12]	; (8006e88 <_sbrk+0x18>)
 8006e7a:	6019      	str	r1, [r3, #0]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	4402      	add	r2, r0
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	4770      	bx	lr
 8006e84:	200000c4 	.word	0x200000c4
 8006e88:	200003b4 	.word	0x200003b4

08006e8c <_init>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr

08006e98 <_fini>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr
