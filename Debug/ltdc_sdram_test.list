
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f094  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000715d0  0800f240  0800f240  0001f240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08080810  08080810  00090810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08080818  08080818  00090818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0808081c  0808081c  0009081c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000003c  20000000  08080820  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000a003c  2**0
                  CONTENTS
  8 .bss          00022fc4  2000003c  2000003c  000a003c  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20023000  20023000  000a003c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000a003c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00034f53  00000000  00000000  000a006a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004445  00000000  00000000  000d4fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001648  00000000  00000000  000d9408  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001460  00000000  00000000  000daa50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000abac  00000000  00000000  000dbeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008afe  00000000  00000000  000e6a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fe  00000000  00000000  000ef55a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cf4  00000000  00000000  000ef658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000003c 	.word	0x2000003c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800f228 	.word	0x0800f228

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000040 	.word	0x20000040
 80001e8:	0800f228 	.word	0x0800f228

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f961 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f006 faee 	bl	8006b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f987 	bl	8000872 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f941 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20022b9c 	.word	0x20022b9c

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20022b9c 	.word	0x20022b9c

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <NVIC_EnableIRQ+0x30>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <NVIC_DisableIRQ+0x30>)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	095b      	lsrs	r3, r3, #5
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	f002 021f 	and.w	r2, r2, #31
 80006d4:	2001      	movs	r0, #1
 80006d6:	fa00 f202 	lsl.w	r2, r0, r2
 80006da:	3320      	adds	r3, #32
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da0b      	bge.n	800071c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <NVIC_SetPriority+0x4c>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	3b04      	subs	r3, #4
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071a:	e009      	b.n	8000730 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <NVIC_SetPriority+0x50>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	e000e100 	.word	0xe000e100

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	2201      	movs	r2, #1
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	401a      	ands	r2, r3
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078a:	2101      	movs	r1, #1
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	1e59      	subs	r1, r3, #1
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff15 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff2a 	bl	800066c <NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff1d 	bl	8000688 <NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff29 	bl	80006bc <NVIC_DisableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff94 	bl	80007a8 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fe96 	bl	80005c8 <HAL_GetTick>
 800089c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e099      	b.n	80009dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2202      	movs	r2, #2
 80008b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	f022 0201 	bic.w	r2, r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c8:	e00f      	b.n	80008ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008ca:	f7ff fe7d 	bl	80005c8 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d908      	bls.n	80008ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2220      	movs	r2, #32
 80008dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2203      	movs	r2, #3
 80008e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e078      	b.n	80009dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1e8      	bne.n	80008ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <HAL_DMA_Init+0x158>)
 8000904:	4013      	ands	r3, r2
 8000906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4313      	orrs	r3, r2
 800093a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	2b04      	cmp	r3, #4
 8000942:	d107      	bne.n	8000954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4313      	orrs	r3, r2
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4313      	orrs	r3, r2
 8000952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f023 0307 	bic.w	r3, r3, #7
 800096a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	4313      	orrs	r3, r2
 8000974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	2b04      	cmp	r3, #4
 800097c:	d117      	bne.n	80009ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4313      	orrs	r3, r2
 8000986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00e      	beq.n	80009ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f9e9 	bl	8000d68 <DMA_CheckFifoParam>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009aa:	2301      	movs	r3, #1
 80009ac:	e016      	b.n	80009dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f9a0 	bl	8000cfc <DMA_CalcBaseAndBitshift>
 80009bc:	4603      	mov	r3, r0
 80009be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c4:	223f      	movs	r2, #63	; 0x3f
 80009c6:	409a      	lsls	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	f010803f 	.word	0xf010803f

080009e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f4:	4b92      	ldr	r3, [pc, #584]	; (8000c40 <HAL_DMA_IRQHandler+0x258>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_DMA_IRQHandler+0x25c>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0a9b      	lsrs	r3, r3, #10
 8000a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a12:	2208      	movs	r2, #8
 8000a14:	409a      	lsls	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d013      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	f022 0204 	bic.w	r2, r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a40:	2208      	movs	r2, #8
 8000a42:	409a      	lsls	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d012      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	2201      	movs	r2, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a82:	f043 0202 	orr.w	r2, r3, #2
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d012      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2204      	movs	r2, #4
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d043      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03c      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d018      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d108      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d024      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
 8000b16:	e01f      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
 8000b28:	e016      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d107      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	f022 0208 	bic.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 808e 	beq.w	8000c86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8086 	beq.w	8000c86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7e:	2220      	movs	r2, #32
 8000b80:	409a      	lsls	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d136      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	f022 0216 	bic.w	r2, r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	6952      	ldr	r2, [r2, #20]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x1da>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd6:	223f      	movs	r2, #63	; 0x3f
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d07d      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
        }
        return;
 8000bfe:	e078      	b.n	8000cf2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01c      	beq.n	8000c48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d030      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
 8000c2c:	e02b      	b.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d027      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	4798      	blx	r3
 8000c3e:	e022      	b.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10f      	bne.n	8000c76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	f022 0210 	bic.w	r2, r2, #16
 8000c64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d032      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d022      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d807      	bhi.n	8000cce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f2      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x2ca>
 8000ccc:	e000      	b.n	8000cd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
 8000cf0:	e000      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cf2:	bf00      	nop
    }
  }
}
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop

08000cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3b10      	subs	r3, #16
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <DMA_CalcBaseAndBitshift+0x64>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <DMA_CalcBaseAndBitshift+0x68>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d909      	bls.n	8000d3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	1d1a      	adds	r2, r3, #4
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8000d3c:	e007      	b.n	8000d4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	aaaaaaab 	.word	0xaaaaaaab
 8000d64:	0800f244 	.word	0x0800f244

08000d68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11f      	bne.n	8000dc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d855      	bhi.n	8000e34 <DMA_CheckFifoParam+0xcc>
 8000d88:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <DMA_CheckFifoParam+0x28>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db3 	.word	0x08000db3
 8000d98:	08000da1 	.word	0x08000da1
 8000d9c:	08000e35 	.word	0x08000e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d045      	beq.n	8000e38 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000db0:	e042      	b.n	8000e38 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dba:	d13f      	bne.n	8000e3c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dc0:	e03c      	b.n	8000e3c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dca:	d121      	bne.n	8000e10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d836      	bhi.n	8000e40 <DMA_CheckFifoParam+0xd8>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <DMA_CheckFifoParam+0x70>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000def 	.word	0x08000def
 8000de0:	08000de9 	.word	0x08000de9
 8000de4:	08000e01 	.word	0x08000e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
      break;
 8000dec:	e02f      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d024      	beq.n	8000e44 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dfe:	e021      	b.n	8000e44 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e08:	d11e      	bne.n	8000e48 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e0e:	e01b      	b.n	8000e48 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d902      	bls.n	8000e1c <DMA_CheckFifoParam+0xb4>
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d003      	beq.n	8000e22 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e1a:	e018      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e20:	e015      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00e      	beq.n	8000e4c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
      break;
 8000e32:	e00b      	b.n	8000e4c <DMA_CheckFifoParam+0xe4>
      break;
 8000e34:	bf00      	nop
 8000e36:	e00a      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e38:	bf00      	nop
 8000e3a:	e008      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e3c:	bf00      	nop
 8000e3e:	e006      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;   
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e4c:	bf00      	nop
    }
  } 
  
  return status; 
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e03b      	b.n	8000ee6 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d106      	bne.n	8000e88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f005 fe6c 	bl	8006b60 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6852      	ldr	r2, [r2, #4]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000eb0:	f022 0107 	bic.w	r1, r2, #7
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6892      	ldr	r2, [r2, #8]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	68c9      	ldr	r1, [r1, #12]
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d026      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d021      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f28:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d026      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d021      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f80:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2220      	movs	r2, #32
 8000f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8e:	f043 0202 	orr.w	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d026      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d021      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2208      	movs	r2, #8
 8000fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe6:	f043 0204 	orr.w	r2, r3, #4
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001030:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2204      	movs	r2, #4
 8001038:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f853 	bl	80010e6 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d024      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01f      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001062:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2202      	movs	r2, #2
 800106a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01f      	beq.n	80010de <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01a      	beq.n	80010de <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010b6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f80e 	bl	80010fa <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3318      	adds	r3, #24
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_DMA2D_ConfigLayer+0x30>
 800113c:	2302      	movs	r3, #2
 800113e:	e070      	b.n	8001222 <HAL_DMA2D_ConfigLayer+0x112>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d003      	beq.n	8001160 <HAL_DMA2D_ConfigLayer+0x50>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d10c      	bne.n	800117a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	431a      	orrs	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001174:	4313      	orrs	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e00a      	b.n	8001190 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	041b      	lsls	r3, r3, #16
 8001184:	431a      	orrs	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	061b      	lsls	r3, r3, #24
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11e      	bne.n	80011d4 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_DMA2D_ConfigLayer+0x120>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA2D_ConfigLayer+0xb4>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d125      	bne.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	68d2      	ldr	r2, [r2, #12]
 80011cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
 80011d2:	e01d      	b.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69d9      	ldr	r1, [r3, #28]
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_DMA2D_ConfigLayer+0x120>)
 80011e0:	400b      	ands	r3, r1
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b0a      	cmp	r3, #10
 80011f8:	d003      	beq.n	8001202 <HAL_DMA2D_ConfigLayer+0xf2>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d106      	bne.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	68d2      	ldr	r2, [r2, #12]
 800120a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800120e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	00fcfff0 	.word	0x00fcfff0

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e177      	b.n	8001540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8166 	bne.w	800153a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x4a>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	69b9      	ldr	r1, [r7, #24]
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0203 	and.w	r2, r3, #3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d00b      	beq.n	800131a <HAL_GPIO_Init+0xe6>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	2b11      	cmp	r3, #17
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80c0 	beq.w	800153a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a60      	ldr	r2, [pc, #384]	; (8001558 <HAL_GPIO_Init+0x324>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d031      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x334>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a53      	ldr	r2, [pc, #332]	; (800156c <HAL_GPIO_Init+0x338>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_GPIO_Init+0x33c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x22a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a51      	ldr	r2, [pc, #324]	; (8001574 <HAL_GPIO_Init+0x340>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x226>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a50      	ldr	r2, [pc, #320]	; (8001578 <HAL_GPIO_Init+0x344>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4f      	ldr	r2, [pc, #316]	; (800157c <HAL_GPIO_Init+0x348>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_GPIO_Init+0x34c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x21a>
 800144a:	2309      	movs	r3, #9
 800144c:	e012      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800144e:	230a      	movs	r3, #10
 8001450:	e010      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001452:	2308      	movs	r3, #8
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001456:	2307      	movs	r3, #7
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x324>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_GPIO_Init+0x350>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae84 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40022000 	.word	0x40022000
 8001580:	40022400 	.word	0x40022400
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e0da      	b.n	800175a <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f040 80ca 	bne.w	8001754 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2103      	movs	r1, #3
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08d9      	lsrs	r1, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3108      	adds	r1, #8
 80015e2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	200f      	movs	r0, #15
 80015f0:	fa00 f303 	lsl.w	r3, r0, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4019      	ands	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2103      	movs	r1, #3
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2101      	movs	r1, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2103      	movs	r1, #3
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4013      	ands	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_GPIO_DeInit+0x1ec>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d037      	beq.n	80016da <HAL_GPIO_DeInit+0x152>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a42      	ldr	r2, [pc, #264]	; (8001778 <HAL_GPIO_DeInit+0x1f0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d031      	beq.n	80016d6 <HAL_GPIO_DeInit+0x14e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a41      	ldr	r2, [pc, #260]	; (800177c <HAL_GPIO_DeInit+0x1f4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02b      	beq.n	80016d2 <HAL_GPIO_DeInit+0x14a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a40      	ldr	r2, [pc, #256]	; (8001780 <HAL_GPIO_DeInit+0x1f8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_DeInit+0x146>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <HAL_GPIO_DeInit+0x1fc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_DeInit+0x142>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a3e      	ldr	r2, [pc, #248]	; (8001788 <HAL_GPIO_DeInit+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_DeInit+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_GPIO_DeInit+0x204>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_DeInit+0x13a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <HAL_GPIO_DeInit+0x208>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_DeInit+0x136>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_GPIO_DeInit+0x20c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_DeInit+0x132>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a3a      	ldr	r2, [pc, #232]	; (8001798 <HAL_GPIO_DeInit+0x210>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_DeInit+0x12e>
 80016b2:	2309      	movs	r3, #9
 80016b4:	e012      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016b6:	230a      	movs	r3, #10
 80016b8:	e010      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00e      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016da:	2300      	movs	r3, #0
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	fa03 f202 	lsl.w	r2, r3, r2
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d132      	bne.n	8001754 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	491a      	ldr	r1, [pc, #104]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	0892      	lsrs	r2, r2, #2
 800170a:	3202      	adds	r2, #2
 800170c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	43d2      	mvns	r2, r2
 8001714:	400a      	ands	r2, r1
 8001716:	3302      	adds	r3, #2
 8001718:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800171c:	491f      	ldr	r1, [pc, #124]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_GPIO_DeInit+0x214>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43db      	mvns	r3, r3
 8001726:	4013      	ands	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800172a:	491c      	ldr	r1, [pc, #112]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001738:	4918      	ldr	r1, [pc, #96]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001746:	4915      	ldr	r1, [pc, #84]	; (800179c <HAL_GPIO_DeInit+0x214>)
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43db      	mvns	r3, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	f67f af21 	bls.w	80015a4 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40022400 	.word	0x40022400
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0c8      	b.n	8001980 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f005 f9d4 	bl	8006bb0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2224      	movs	r2, #36	; 0x24
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001820:	f002 f97a 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8001824:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_I2C_Init+0x1b4>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4952      	ldr	r1, [pc, #328]	; (800198c <HAL_I2C_Init+0x1b8>)
 8001844:	428b      	cmp	r3, r1
 8001846:	d802      	bhi.n	800184e <HAL_I2C_Init+0x7a>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	e009      	b.n	8001862 <HAL_I2C_Init+0x8e>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_I2C_Init+0x1bc>)
 800185a:	fba1 1303 	umull	r1, r3, r1, r3
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	3301      	adds	r3, #1
 8001862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_I2C_Init+0x1b8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d812      	bhi.n	8001898 <HAL_I2C_Init+0xc4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001882:	2b03      	cmp	r3, #3
 8001884:	d906      	bls.n	8001894 <HAL_I2C_Init+0xc0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	e045      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001894:	2304      	movs	r3, #4
 8001896:	e043      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_I2C_Init+0xec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e010      	b.n	80018e2 <HAL_I2C_Init+0x10e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009a      	lsls	r2, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Init+0x116>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e01a      	b.n	8001920 <HAL_I2C_Init+0x14c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <HAL_I2C_Init+0x134>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	e00b      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009a      	lsls	r2, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001920:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	69d1      	ldr	r1, [r2, #28]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6a12      	ldr	r2, [r2, #32]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6911      	ldr	r1, [r2, #16]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68d2      	ldr	r2, [r2, #12]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6951      	ldr	r1, [r2, #20]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6992      	ldr	r2, [r2, #24]
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	431bde83 	.word	0x431bde83
 800198c:	000186a0 	.word	0x000186a0
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	460b      	mov	r3, r1
 80019a2:	817b      	strh	r3, [r7, #10]
 80019a4:	4613      	mov	r3, r2
 80019a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ac:	f7fe fe0c 	bl	80005c8 <HAL_GetTick>
 80019b0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	f040 80ee 	bne.w	8001b9c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2319      	movs	r3, #25
 80019c6:	2201      	movs	r2, #1
 80019c8:	4977      	ldr	r1, [pc, #476]	; (8001ba8 <HAL_I2C_Master_Transmit+0x214>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fc6c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0e1      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_Master_Transmit+0x54>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0da      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d007      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2221      	movs	r2, #33	; 0x21
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	893a      	ldrh	r2, [r7, #8]
 8001a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_I2C_Master_Transmit+0x218>)
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	6a3a      	ldr	r2, [r7, #32]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fadc 	bl	8002014 <I2C_MasterRequestWrite>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00f      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d105      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e093      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e08d      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001a98:	e066      	b.n	8001b68 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fcc1 	bl	8002426 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00f      	beq.n	8001aca <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d109      	bne.n	8001ac6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e069      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c58      	adds	r0, r3, #1
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	6248      	str	r0, [r1, #36]	; 0x24
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d119      	bne.n	8001b38 <HAL_I2C_Master_Transmit+0x1a4>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	1c58      	adds	r0, r3, #1
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	6248      	str	r0, [r1, #36]	; 0x24
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fcaf 	bl	80024a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d109      	bne.n	8001b64 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01c      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e01a      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d194      	bne.n	8001a9a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000

08001bb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	817b      	strh	r3, [r7, #10]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc8:	f7fe fcfe 	bl	80005c8 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	f040 8215 	bne.w	8002006 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2319      	movs	r3, #25
 8001be2:	2201      	movs	r2, #1
 8001be4:	4985      	ldr	r1, [pc, #532]	; (8001dfc <HAL_I2C_Master_Receive+0x24c>)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fb5e 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e208      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2C_Master_Receive+0x54>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e201      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d007      	beq.n	8001c2a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2222      	movs	r2, #34	; 0x22
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2210      	movs	r2, #16
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	893a      	ldrh	r2, [r7, #8]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a68      	ldr	r2, [pc, #416]	; (8001e00 <HAL_I2C_Master_Receive+0x250>)
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa50 	bl	8002118 <I2C_MasterRequestRead>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00f      	beq.n	8001c9e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d105      	bne.n	8001c92 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1ba      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1b4      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d113      	bne.n	8001cce <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e188      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d11b      	bne.n	8001d0e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e168      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d11b      	bne.n	8001d4e <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	e148      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001d74:	e134      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f200 80eb 	bhi.w	8001f56 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d127      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fbc4 	bl	800251a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e131      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e12f      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	6251      	str	r1, [r2, #36]	; 0x24
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6912      	ldr	r2, [r2, #16]
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd6:	e103      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d14a      	bne.n	8001e76 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	2200      	movs	r2, #0
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_I2C_Master_Receive+0x254>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa5c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e106      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6251      	str	r1, [r2, #36]	; 0x24
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	6912      	ldr	r2, [r2, #16]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6251      	str	r1, [r2, #36]	; 0x24
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	6912      	ldr	r2, [r2, #16]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e74:	e0b4      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4964      	ldr	r1, [pc, #400]	; (8002010 <HAL_I2C_Master_Receive+0x460>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa11 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0bb      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	6912      	ldr	r2, [r2, #16]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	494e      	ldr	r1, [pc, #312]	; (8002010 <HAL_I2C_Master_Receive+0x460>)
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9e5 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e08f      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6251      	str	r1, [r2, #36]	; 0x24
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	6912      	ldr	r2, [r2, #16]
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6912      	ldr	r2, [r2, #16]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f54:	e044      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fadd 	bl	800251a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e04a      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e048      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d116      	bne.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	6251      	str	r1, [r2, #36]	; 0x24
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	6912      	ldr	r2, [r2, #16]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f aec6 	bne.w	8001d76 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	00010004 	.word	0x00010004

08002014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d006      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d003      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00b      	b.n	8002068 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b12      	cmp	r3, #18
 8002056:	d107      	bne.n	8002068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f917 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e040      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800208c:	d107      	bne.n	800209e <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	897a      	ldrh	r2, [r7, #10]
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	e021      	b.n	80020e2 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	897a      	ldrh	r2, [r7, #10]
 80020a4:	11d2      	asrs	r2, r2, #7
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 0206 	and.w	r2, r2, #6
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f062 020f 	orn	r2, r2, #15
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4915      	ldr	r1, [pc, #84]	; (8002110 <I2C_MasterRequestWrite+0xfc>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f944 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d101      	bne.n	80020d4 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e018      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e016      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	897a      	ldrh	r2, [r7, #10]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	490b      	ldr	r1, [pc, #44]	; (8002114 <I2C_MasterRequestWrite+0x100>)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f92e 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d101      	bne.n	8002100 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e002      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e000      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00010008 	.word	0x00010008
 8002114:	00010002 	.word	0x00010002

08002118 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d006      	beq.n	8002152 <I2C_MasterRequestRead+0x3a>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <I2C_MasterRequestRead+0x3a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	2b11      	cmp	r3, #17
 800216a:	d107      	bne.n	800217c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f88d 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e07f      	b.n	8002298 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a0:	d108      	bne.n	80021b4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	897a      	ldrh	r2, [r7, #10]
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	e05f      	b.n	8002274 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	897a      	ldrh	r2, [r7, #10]
 80021ba:	11d2      	asrs	r2, r2, #7
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 0206 	and.w	r2, r2, #6
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f062 020f 	orn	r2, r2, #15
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4933      	ldr	r1, [pc, #204]	; (80022a0 <I2C_MasterRequestRead+0x188>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f8b9 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d101      	bne.n	80021ea <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e056      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e054      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	897a      	ldrh	r2, [r7, #10]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <I2C_MasterRequestRead+0x18c>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8a3 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b04      	cmp	r3, #4
 8002210:	d101      	bne.n	8002216 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e040      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e03e      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f82b 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e01d      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	897a      	ldrh	r2, [r7, #10]
 8002262:	11d2      	asrs	r2, r2, #7
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 0206 	and.w	r2, r2, #6
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f062 020e 	orn	r2, r2, #14
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	490a      	ldr	r1, [pc, #40]	; (80022a4 <I2C_MasterRequestRead+0x18c>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f865 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d101      	bne.n	8002292 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e002      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e000      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010008 	.word	0x00010008
 80022a4:	00010002 	.word	0x00010002

080022a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022b8:	e01f      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c0:	d01b      	beq.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022c8:	f7fe f97e 	bl	80005c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d910      	bls.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e023      	b.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	e00c      	b.n	800233a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	429a      	cmp	r2, r3
 800233e:	d0bc      	beq.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002358:	e040      	b.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d11c      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002382:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2204      	movs	r2, #4
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e03c      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023aa:	d017      	beq.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80023b2:	f7fe f909 	bl	80005c8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e020      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10c      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e00b      	b.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d19e      	bne.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002432:	e029      	b.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f8ba 	bl	80025ae <I2C_IsAcknowledgeFailed>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e029      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244a:	d01d      	beq.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002452:	f7fe f8b9 	bl	80005c8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d912      	bls.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e007      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d1ce      	bne.n	8002434 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ac:	e029      	b.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f87d 	bl	80025ae <I2C_IsAcknowledgeFailed>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e029      	b.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c4:	d01d      	beq.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024cc:	f7fe f87c 	bl	80005c8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d912      	bls.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e007      	b.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d1ce      	bne.n	80024ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	e036      	b.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b10      	cmp	r3, #16
 8002534:	d114      	bne.n	8002560 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0210 	mvn.w	r2, #16
 800253e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e022      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002566:	f7fe f82f 	bl	80005c8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d90f      	bls.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d1c1      	bne.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d114      	bne.n	80025f0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ce:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	d129      	bne.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	f022 0210 	bic.w	r2, r2, #16
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	d12a      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	4313      	orrs	r3, r2
 80026c0:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	89fa      	ldrh	r2, [r7, #14]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 80026e6:	2302      	movs	r3, #2
  }
}  
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0bf      	b.n	800288e <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f004 fb12 	bl	8006d4c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	6992      	ldr	r2, [r2, #24]
 800273a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800273e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	6991      	ldr	r1, [r2, #24]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6850      	ldr	r0, [r2, #4]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002758:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6912      	ldr	r2, [r2, #16]
 800275e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002760:	430a      	orrs	r2, r1
 8002762:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 8002770:	400b      	ands	r3, r1
 8002772:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	6891      	ldr	r1, [r2, #8]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6990      	ldr	r0, [r2, #24]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4302      	orrs	r2, r0
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 800279e:	400b      	ands	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68d1      	ldr	r1, [r2, #12]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6a10      	ldr	r0, [r2, #32]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4302      	orrs	r2, r0
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 80027cc:	400b      	ands	r3, r1
 80027ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	6911      	ldr	r1, [r2, #16]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4302      	orrs	r2, r0
 80027ea:	430a      	orrs	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6959      	ldr	r1, [r3, #20]
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 80027fa:	400b      	ands	r3, r1
 80027fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	6951      	ldr	r1, [r2, #20]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4302      	orrs	r2, r0
 8002818:	430a      	orrs	r2, r1
 800281a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800283a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4302      	orrs	r2, r0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002856:	4302      	orrs	r2, r0
 8002858:	430a      	orrs	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	f042 0206 	orr.w	r2, r2, #6
 800286a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6992      	ldr	r2, [r2, #24]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	f000f800 	.word	0xf000f800

0800289c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f004 fb67 	bl	8006f78 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d023      	beq.n	8002936 <HAL_LTDC_IRQHandler+0x6a>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01e      	beq.n	8002936 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2204      	movs	r2, #4
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f86f 	bl	8002a14 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d023      	beq.n	8002988 <HAL_LTDC_IRQHandler+0xbc>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01e      	beq.n	8002988 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002954:	f022 0202 	bic.w	r2, r2, #2
 8002958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002968:	f043 0202 	orr.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f846 	bl	8002a14 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01b      	beq.n	80029ca <HAL_LTDC_IRQHandler+0xfe>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f002 f9b1 	bl	8004d2c <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_LTDC_IRQHandler+0x140>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2208      	movs	r2, #8
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f80e 	bl	8002a28 <HAL_LTDC_ReloadEventCallback>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_LTDC_ConfigLayer+0x1a>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e02c      	b.n	8002ab0 <HAL_LTDC_ConfigLayer+0x74>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2134      	movs	r1, #52	; 0x34
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa63 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}

08002ab8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_LTDC_ConfigColorKeying+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e031      	b.n	8002b36 <HAL_LTDC_ConfigColorKeying+0x7e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	4413      	add	r3, r2
 8002aee:	3384      	adds	r3, #132	; 0x84
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	440b      	add	r3, r1
 8002afe:	3384      	adds	r3, #132	; 0x84
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b06:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	01db      	lsls	r3, r3, #7
 8002b12:	4413      	add	r3, r2
 8002b14:	3384      	adds	r3, #132	; 0x84
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b089      	sub	sp, #36	; 0x24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_LTDC_ConfigCLUT+0x28>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e059      	b.n	8002c1e <HAL_LTDC_ConfigCLUT+0xdc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e041      	b.n	8002c04 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2134      	movs	r1, #52	; 0x34
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d114      	bne.n	8002bbe <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	e010      	b.n	8002be0 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	061a      	lsls	r2, r3, #24
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3384      	adds	r3, #132	; 0x84
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3b9      	bcc.n	8002b80 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_LTDC_EnableColorKeying+0x18>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e027      	b.n	8002c92 <HAL_LTDC_EnableColorKeying+0x68>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	01db      	lsls	r3, r3, #7
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3384      	adds	r3, #132	; 0x84
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	01db      	lsls	r3, r3, #7
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3384      	adds	r3, #132	; 0x84
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_LTDC_DisableColorKeying+0x18>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e027      	b.n	8002d06 <HAL_LTDC_DisableColorKeying+0x68>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3384      	adds	r3, #132	; 0x84
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3384      	adds	r3, #132	; 0x84
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0302 	bic.w	r3, r3, #2
 8002cea:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_LTDC_EnableCLUT+0x18>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e027      	b.n	8002d7a <HAL_LTDC_EnableCLUT+0x68>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	4413      	add	r3, r2
 8002d46:	3384      	adds	r3, #132	; 0x84
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	01db      	lsls	r3, r3, #7
 8002d54:	440b      	add	r3, r1
 8002d56:	3384      	adds	r3, #132	; 0x84
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_LTDC_SetWindowPosition+0x1c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e033      	b.n	8002e0a <HAL_LTDC_SetWindowPosition+0x84>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2234      	movs	r2, #52	; 0x34
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	3338      	adds	r3, #56	; 0x38
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	441a      	add	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	441a      	add	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8b6 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_LTDC_SetAlpha+0x1a>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e024      	b.n	8002e76 <HAL_LTDC_SetAlpha+0x64>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2234      	movs	r2, #52	; 0x34
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	3338      	adds	r3, #56	; 0x38
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f880 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_LTDC_SetAddress+0x1a>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e024      	b.n	8002ee2 <HAL_LTDC_SetAddress+0x64>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2234      	movs	r2, #52	; 0x34
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f84a 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_LTDC_ProgramLineEvent+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e023      	b.n	8002f4c <HAL_LTDC_ProgramLineEvent+0x60>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40016800 	.word	0x40016800

08002f5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	4413      	add	r3, r2
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	01db      	lsls	r3, r3, #7
 8002f94:	4413      	add	r3, r2
 8002f96:	3384      	adds	r3, #132	; 0x84
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3384      	adds	r3, #132	; 0x84
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fae:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	4413      	add	r3, r2
 8002fbc:	3384      	adds	r3, #132	; 0x84
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	4413      	add	r3, r2
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe8:	4413      	add	r3, r2
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3384      	adds	r3, #132	; 0x84
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	01db      	lsls	r3, r3, #7
 8003008:	440b      	add	r3, r1
 800300a:	3384      	adds	r3, #132	; 0x84
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003012:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	4413      	add	r3, r2
 8003020:	3384      	adds	r3, #132	; 0x84
 8003022:	4619      	mov	r1, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003032:	4413      	add	r3, r2
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	4413      	add	r3, r2
 8003048:	3384      	adds	r3, #132	; 0x84
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	440b      	add	r3, r1
 8003058:	3384      	adds	r3, #132	; 0x84
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4413      	add	r3, r2
 800306e:	3384      	adds	r3, #132	; 0x84
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	4413      	add	r3, r2
 80030a0:	3384      	adds	r3, #132	; 0x84
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	01db      	lsls	r3, r3, #7
 80030ae:	4413      	add	r3, r2
 80030b0:	3384      	adds	r3, #132	; 0x84
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	4413      	add	r3, r2
 80030c4:	3384      	adds	r3, #132	; 0x84
 80030c6:	4619      	mov	r1, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ce:	461a      	mov	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4413      	add	r3, r2
 80030ea:	3384      	adds	r3, #132	; 0x84
 80030ec:	461a      	mov	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	440b      	add	r3, r1
 80030fa:	3384      	adds	r3, #132	; 0x84
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003102:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4413      	add	r3, r2
 8003110:	3384      	adds	r3, #132	; 0x84
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	01db      	lsls	r3, r3, #7
 8003124:	4413      	add	r3, r2
 8003126:	3384      	adds	r3, #132	; 0x84
 8003128:	461a      	mov	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	440b      	add	r3, r1
 8003136:	3384      	adds	r3, #132	; 0x84
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	01db      	lsls	r3, r3, #7
 800314e:	4413      	add	r3, r2
 8003150:	3384      	adds	r3, #132	; 0x84
 8003152:	4619      	mov	r1, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	01db      	lsls	r3, r3, #7
 800316a:	4413      	add	r3, r2
 800316c:	3384      	adds	r3, #132	; 0x84
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	4413      	add	r3, r2
 800317c:	3384      	adds	r3, #132	; 0x84
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	01db      	lsls	r3, r3, #7
 800318e:	4413      	add	r3, r2
 8003190:	3384      	adds	r3, #132	; 0x84
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 80031a2:	2304      	movs	r3, #4
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e01b      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 80031b0:	2303      	movs	r3, #3
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e014      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00b      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d007      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d003      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d102      	bne.n	80031dc <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e001      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	3384      	adds	r3, #132	; 0x84
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	440b      	add	r3, r1
 80031fc:	3384      	adds	r3, #132	; 0x84
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	01db      	lsls	r3, r3, #7
 8003210:	4413      	add	r3, r2
 8003212:	3384      	adds	r3, #132	; 0x84
 8003214:	4618      	mov	r0, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1acb      	subs	r3, r1, r3
 800322c:	69f9      	ldr	r1, [r7, #28]
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	3303      	adds	r3, #3
 8003234:	4313      	orrs	r3, r2
 8003236:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	01db      	lsls	r3, r3, #7
 8003242:	4413      	add	r3, r2
 8003244:	3384      	adds	r3, #132	; 0x84
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	01db      	lsls	r3, r3, #7
 8003252:	440b      	add	r3, r1
 8003254:	3384      	adds	r3, #132	; 0x84
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800325c:	f023 0307 	bic.w	r3, r3, #7
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	4413      	add	r3, r2
 800326e:	3384      	adds	r3, #132	; 0x84
 8003270:	461a      	mov	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	01db      	lsls	r3, r3, #7
 8003282:	4413      	add	r3, r2
 8003284:	3384      	adds	r3, #132	; 0x84
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	01db      	lsls	r3, r3, #7
 8003292:	440b      	add	r3, r1
 8003294:	3384      	adds	r3, #132	; 0x84
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6013      	str	r3, [r2, #0]
}
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_PWREx_EnableOverDrive+0x94>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fd f976 	bl	80005c8 <HAL_GetTick>
 80032dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032de:	e009      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e0:	f7fd f972 	bl	80005c8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e01f      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d1ee      	bne.n	80032e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003308:	f7fd f95e 	bl	80005c8 <HAL_GetTick>
 800330c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800330e:	e009      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003310:	f7fd f95a 	bl	80005c8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331e:	d901      	bls.n	8003324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e007      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_PWREx_EnableOverDrive+0x98>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003330:	d1ee      	bne.n	8003310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	420e0040 	.word	0x420e0040
 8003344:	40007000 	.word	0x40007000
 8003348:	420e0044 	.word	0x420e0044

0800334c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e22d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d075      	beq.n	8003456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336a:	4ba3      	ldr	r3, [pc, #652]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00c      	beq.n	8003390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	2b08      	cmp	r3, #8
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b9d      	ldr	r3, [pc, #628]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b99      	ldr	r3, [pc, #612]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e208      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x74>
 80033b2:	4a91      	ldr	r2, [pc, #580]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	4b90      	ldr	r3, [pc, #576]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4a8b      	ldr	r2, [pc, #556]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4a88      	ldr	r2, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	4b87      	ldr	r3, [pc, #540]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033e4:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4a81      	ldr	r2, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033f2:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd f8e0 	bl	80005c8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd f8dc 	bl	80005c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1cd      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd f8cc 	bl	80005c8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd f8c8 	bl	80005c8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1b9      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0xe8>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e18d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4956      	ldr	r1, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_OscConfig+0x2b0>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd f881 	bl	80005c8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd f87d 	bl	80005c8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e16e      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4943      	ldr	r1, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_OscConfig+0x2b0>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd f860 	bl	80005c8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7fd f85c 	bl	80005c8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e14d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d030      	beq.n	8003598 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x2b4>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd f840 	bl	80005c8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd f83c 	bl	80005c8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e12d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x200>
 800356a:	e015      	b.n	8003598 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x2b4>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fd f829 	bl	80005c8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd f825 	bl	80005c8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e116      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a0 	beq.w	80036e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fc ffeb 	bl	80005c8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e011      	b.n	800361a <HAL_RCC_OscConfig+0x2ce>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	42470000 	.word	0x42470000
 8003600:	42470e80 	.word	0x42470e80
 8003604:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fc ffde 	bl	80005c8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0cf      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x478>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d106      	bne.n	800363c <HAL_RCC_OscConfig+0x2f0>
 800362e:	4a66      	ldr	r2, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003630:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x312>
 8003644:	4a60      	ldr	r2, [pc, #384]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4a5d      	ldr	r2, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003652:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
 800365e:	4a5a      	ldr	r2, [pc, #360]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4a57      	ldr	r2, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800366c:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fc ffa3 	bl	80005c8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fc ff9f 	bl	80005c8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e08e      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x33a>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fc ff8d 	bl	80005c8 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fc ff89 	bl	80005c8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e078      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4a3b      	ldr	r2, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d064      	beq.n	80037b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fc ff5e 	bl	80005c8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fc ff5a 	bl	80005c8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04b      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	4926      	ldr	r1, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	019b      	lsls	r3, r3, #6
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	3b01      	subs	r3, #1
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fc ff33 	bl	80005c8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fc ff2f 	bl	80005c8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e020      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x41a>
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fc ff1c 	bl	80005c8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fc ff18 	bl	80005c8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e009      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x448>
 80037b2:	e001      	b.n	80037b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470060 	.word	0x42470060

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0ca      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20c      	bcs.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b62      	ldr	r3, [pc, #392]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b6      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	494f      	ldr	r1, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e065      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4936      	ldr	r1, [pc, #216]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 0203 	bic.w	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fc fe82 	bl	80005c8 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fc fe7e 	bl	80005c8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d90c      	bls.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e030      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4918      	ldr	r1, [pc, #96]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4911      	ldr	r1, [pc, #68]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f81d 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
 800396a:	fa21 f303 	lsr.w	r3, r1, r3
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fc fde4 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00
 8003988:	40023800 	.word	0x40023800
 800398c:	08047660 	.word	0x08047660
 8003990:	2000000c 	.word	0x2000000c

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800399c:	2200      	movs	r2, #0
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	617a      	str	r2, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80039a8:	2200      	movs	r2, #0
 80039aa:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	f002 020c 	and.w	r2, r2, #12
 80039b4:	2a04      	cmp	r2, #4
 80039b6:	d007      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039b8:	2a08      	cmp	r2, #8
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x3a>
 80039bc:	2a00      	cmp	r2, #0
 80039be:	f040 8090 	bne.w	8003ae2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x164>)
 80039c4:	613b      	str	r3, [r7, #16]
       break;
 80039c6:	e08f      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	e08c      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ce:	4a49      	ldr	r2, [pc, #292]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039d6:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d8:	4a46      	ldr	r2, [pc, #280]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	ea03 0301 	and.w	r3, r3, r1
 80039fa:	ea04 0402 	and.w	r4, r4, r2
 80039fe:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 8003a00:	fb02 f104 	mul.w	r1, r2, r4
 8003a04:	2200      	movs	r2, #0
 8003a06:	fb02 f203 	mul.w	r2, r2, r3
 8003a0a:	440a      	add	r2, r1
 8003a0c:	493b      	ldr	r1, [pc, #236]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 8003a0e:	fba3 0101 	umull	r0, r1, r3, r1
 8003a12:	1853      	adds	r3, r2, r1
 8003a14:	4619      	mov	r1, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	f7fc fbe4 	bl	80001ec <__aeabi_uldivmod>
 8003a24:	4603      	mov	r3, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e04c      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2c:	4a31      	ldr	r2, [pc, #196]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a2e:	6852      	ldr	r2, [r2, #4]
 8003a30:	0992      	lsrs	r2, r2, #6
 8003a32:	4611      	mov	r1, r2
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003a3c:	f04f 0600 	mov.w	r6, #0
 8003a40:	ea05 0501 	and.w	r5, r5, r1
 8003a44:	ea06 0602 	and.w	r6, r6, r2
 8003a48:	4629      	mov	r1, r5
 8003a4a:	4632      	mov	r2, r6
 8003a4c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003a50:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003a54:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003a58:	4651      	mov	r1, sl
 8003a5a:	465a      	mov	r2, fp
 8003a5c:	46aa      	mov	sl, r5
 8003a5e:	46b3      	mov	fp, r6
 8003a60:	4655      	mov	r5, sl
 8003a62:	465e      	mov	r6, fp
 8003a64:	1b4d      	subs	r5, r1, r5
 8003a66:	eb62 0606 	sbc.w	r6, r2, r6
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	0194      	lsls	r4, r2, #6
 8003a70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a74:	018b      	lsls	r3, r1, #6
 8003a76:	1a5b      	subs	r3, r3, r1
 8003a78:	eb64 0402 	sbc.w	r4, r4, r2
 8003a7c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003a80:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003a84:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	464c      	mov	r4, r9
 8003a8c:	4655      	mov	r5, sl
 8003a8e:	465e      	mov	r6, fp
 8003a90:	18ed      	adds	r5, r5, r3
 8003a92:	eb46 0604 	adc.w	r6, r6, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	4634      	mov	r4, r6
 8003a9a:	02a2      	lsls	r2, r4, #10
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fb96 	bl	80001ec <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	613b      	str	r3, [r7, #16]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ae4:	613b      	str	r3, [r7, #16]
      break;
 8003ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae8:	693b      	ldr	r3, [r7, #16]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	017d7840 	.word	0x017d7840

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000000c 	.word	0x2000000c

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	f7ff fff0 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08047670 	.word	0x08047670

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d061      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b68:	4ba3      	ldr	r3, [pc, #652]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b6e:	f7fc fd2b 	bl	80005c8 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b76:	f7fc fd27 	bl	80005c8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e177      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b88:	4b9c      	ldr	r3, [pc, #624]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba0:	4996      	ldr	r1, [pc, #600]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	019a      	lsls	r2, r3, #6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	071b      	lsls	r3, r3, #28
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	0f1b      	lsrs	r3, r3, #28
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bce:	498b      	ldr	r1, [pc, #556]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	019a      	lsls	r2, r3, #6
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003be8:	4984      	ldr	r1, [pc, #528]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bea:	4b84      	ldr	r3, [pc, #528]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f023 021f 	bic.w	r2, r3, #31
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c00:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c06:	f7fc fcdf 	bl	80005c8 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c0e:	f7fc fcdb 	bl	80005c8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e12b      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d079      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c44:	4b6e      	ldr	r3, [pc, #440]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4a:	f7fc fcbd 	bl	80005c8 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c52:	f7fc fcb9 	bl	80005c8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e109      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c64:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c70:	d0ef      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c7e:	4b5f      	ldr	r3, [pc, #380]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	0f1b      	lsrs	r3, r3, #28
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c8c:	495b      	ldr	r1, [pc, #364]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	071b      	lsls	r3, r3, #28
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ca6:	4955      	ldr	r1, [pc, #340]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ca8:	4b54      	ldr	r3, [pc, #336]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	0e1b      	lsrs	r3, r3, #24
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cda:	4948      	ldr	r1, [pc, #288]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf4:	4941      	ldr	r1, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fc fc5a 	bl	80005c8 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d18:	f7fc fc56 	bl	80005c8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0a6      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d36:	d1ef      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808d 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d62:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fc fc2b 	bl	80005c8 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fc fc27 	bl	80005c8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e077      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d039      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d032      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fc fbf5 	bl	80005c8 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	e014      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fc fbf1 	bl	80005c8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d90b      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03f      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003df8:	42470068 	.word	0x42470068
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	42470070 	.word	0x42470070
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0e4      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e24:	d10d      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003e26:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003e42:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	490c      	ldr	r1, [pc, #48]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e6c:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e74:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	424711e0 	.word	0x424711e0

08003e88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e025      	b.n	8003ee8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f003 f9a1 	bl	80071f8 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f000 fcea 	bl	80048a2 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	f000 fd55 	bl	8004988 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d101      	bne.n	8003f0c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e018      	b.n	8003f3e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fdb2 	bl	8004a86 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d104      	bne.n	8003f34 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003f32:	e003      	b.n	8003f3c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d101      	bne.n	8003f60 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00e      	b.n	8003f7e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fdc5 	bl	8004afe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e055      	b.n	8004044 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f003 f824 	bl	8007000 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6851      	ldr	r1, [r2, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6912      	ldr	r2, [r2, #16]
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6952      	ldr	r2, [r2, #20]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6992      	ldr	r2, [r2, #24]
 8003ff4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	69d2      	ldr	r2, [r2, #28]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a12      	ldr	r2, [r2, #32]
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6992      	ldr	r2, [r2, #24]
 8004016:	0c12      	lsrs	r2, r2, #16
 8004018:	f002 0104 	and.w	r1, r2, #4
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	69d2      	ldr	r2, [r2, #28]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_SPI_Transmit+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e123      	b.n	80042ba <HAL_SPI_Transmit+0x26e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407a:	f7fc faa5 	bl	80005c8 <HAL_GetTick>
 800407e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004090:	e10a      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_Transmit+0x52>
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a2:	e101      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d107      	bne.n	80040fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d007      	beq.n	800411a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d147      	bne.n	80041b4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_SPI_Transmit+0xea>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d138      	bne.n	80041a8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3302      	adds	r3, #2
 8004144:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004154:	e028      	b.n	80041a8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d10f      	bne.n	8004184 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	8812      	ldrh	r2, [r2, #0]
 800416c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3302      	adds	r3, #2
 8004172:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	86da      	strh	r2, [r3, #54]	; 0x36
 8004182:	e011      	b.n	80041a8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_SPI_Transmit+0x156>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004190:	d00a      	beq.n	80041a8 <HAL_SPI_Transmit+0x15c>
 8004192:	f7fc fa19 	bl	80005c8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a6:	e07f      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d1      	bne.n	8004156 <HAL_SPI_Transmit+0x10a>
 80041b2:	e048      	b.n	8004246 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_SPI_Transmit+0x17a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d13a      	bne.n	800423c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041e6:	e029      	b.n	800423c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d110      	bne.n	8004218 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	86da      	strh	r2, [r3, #54]	; 0x36
 8004216:	e011      	b.n	800423c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_SPI_Transmit+0x1ea>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004224:	d00a      	beq.n	800423c <HAL_SPI_Transmit+0x1f0>
 8004226:	f7fc f9cf 	bl	80005c8 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	77fb      	strb	r3, [r7, #31]
          goto error;
 800423a:	e035      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d0      	bne.n	80041e8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	2102      	movs	r1, #2
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f836 	bl	80042c2 <SPI_WaitFlagStateUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004260:	e022      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f894 	bl	8004394 <SPI_CheckFlag_BSY>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800427c:	e014      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80042d0:	e04d      	b.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d049      	beq.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80042e0:	f7fc f972 	bl	80005c8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d33e      	bcc.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042fe:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004308:	d111      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0x6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d004      	beq.n	800431e <SPI_WaitFlagStateUntilTimeout+0x5c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d107      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d110      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004346:	400b      	ands	r3, r1
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004358:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00e      	b.n	800438c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d101      	bne.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800437e:	2201      	movs	r2, #1
 8004380:	e000      	b.n	8004384 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004382:	2200      	movs	r2, #0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d1a3      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff89 	bl	80042c2 <SPI_WaitFlagStateUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e000      	b.n	80043c8 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e01d      	b.n	800441e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f002 fe4a 	bl	8007090 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 f944 	bl	800469c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d122      	bne.n	8004482 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8f8 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ea 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8fb 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d122      	bne.n	80044d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d11b      	bne.n	80044d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0204 	mvn.w	r2, #4
 80044a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8ce 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8c0 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8d1 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d122      	bne.n	800452a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d11b      	bne.n	800452a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0208 	mvn.w	r2, #8
 80044fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2204      	movs	r2, #4
 8004500:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8a4 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004516:	e005      	b.n	8004524 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f896 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8a7 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d122      	bne.n	800457e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d11b      	bne.n	800457e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f06f 0210 	mvn.w	r2, #16
 800454e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2208      	movs	r2, #8
 8004554:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f87a 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800456a:	e005      	b.n	8004578 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f86c 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f87d 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10e      	bne.n	80045aa <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0201 	mvn.w	r2, #1
 80045a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f846 	bl	8004636 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f95c 	bl	800488e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f842 	bl	8004686 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0220 	mvn.w	r2, #32
 8004626:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f926 	bl	800487a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a44      	ldr	r2, [pc, #272]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a41      	ldr	r2, [pc, #260]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <TIM_Base_SetConfig+0x130>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <TIM_Base_SetConfig+0x48>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <TIM_Base_SetConfig+0x4a>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a31      	ldr	r2, [pc, #196]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d027      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d023      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <TIM_Base_SetConfig+0x130>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01f      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d017      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <TIM_Base_SetConfig+0x13c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <TIM_Base_SetConfig+0x140>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <TIM_Base_SetConfig+0x144>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <TIM_Base_SetConfig+0x148>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <TIM_Base_SetConfig+0x14c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a25      	ldr	r2, [pc, #148]	; (80047ec <TIM_Base_SetConfig+0x150>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <TIM_Base_SetConfig+0xc4>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <TIM_Base_SetConfig+0xc6>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x102>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <TIM_Base_SetConfig+0x106>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <TIM_Base_SetConfig+0x108>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	40001800 	.word	0x40001800
 80047e8:	40001c00 	.word	0x40001c00
 80047ec:	40002000 	.word	0x40002000

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004826:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	6851      	ldr	r1, [r2, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004848:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6891      	ldr	r1, [r2, #8]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
} 
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d029      	beq.n	8004910 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048cc:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048d6:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80048dc:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80048e2:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80048e8:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80048ee:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80048f4:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80048fa:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004900:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e034      	b.n	800497a <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491c:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004926:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800492c:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004944:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800494e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004954:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800495a:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004960:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004966:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d02e      	beq.n	8004a00 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049ae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049f0:	4313      	orrs	r3, r2
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e03b      	b.n	8004a78 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a36:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a46:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a50:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a5a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a64:	4313      	orrs	r3, r2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004aa2:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8004aac:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004abe:	f7fb fd83 	bl	80005c8 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ac4:	e010      	b.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004acc:	d00c      	beq.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <FMC_SDRAM_SendCommand+0x5e>
 8004ad4:	f7fb fd78 	bl	80005c8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d901      	bls.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e8      	bne.n	8004ac6 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8004b28:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 8004b2c:	4803      	ldr	r0, [pc, #12]	; (8004b3c <GUI_X_Config+0x18>)
 8004b2e:	f005 fa89 	bl	800a044 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8004b32:	4803      	ldr	r0, [pc, #12]	; (8004b40 <GUI_X_Config+0x1c>)
 8004b34:	f004 ffc8 	bl	8009ac8 <GUI_SetDefaultFont>
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000058 	.word	0x20000058
 8004b40:	0807faa0 	.word	0x0807faa0

08004b44 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <GUI_X_GetTime+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20022ba0 	.word	0x20022ba0

08004b5c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <GUI_X_Delay+0x2c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 8004b6e:	bf00      	nop
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <GUI_X_Delay+0x2c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dcf9      	bgt.n	8004b70 <GUI_X_Delay+0x14>
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20022ba0 	.word	0x20022ba0

08004b8c <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <Color2IndexBulk_M8888IDMA2D>:
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems);
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex);
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens);

DEFINEDMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af02      	add	r7, sp, #8
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	70fb      	strb	r3, [r7, #3]
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 f88d 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <Index2ColorBulk_M8888IDMA2D>:
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af02      	add	r7, sp, #8
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	70fb      	strb	r3, [r7, #3]
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f001 f85f 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <Color2IndexBulk_M888DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888)
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	70fb      	strb	r3, [r7, #3]
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f001 f865 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <Index2ColorBulk_M888DMA2D>:
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af02      	add	r7, sp, #8
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	70fb      	strb	r3, [r7, #3]
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f001 f837 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <Color2IndexBulk_M565DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af02      	add	r7, sp, #8
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	70fb      	strb	r3, [r7, #3]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f001 f83d 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <Index2ColorBulk_M565DMA2D>:
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	70fb      	strb	r3, [r7, #3]
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	2302      	movs	r3, #2
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f001 f80f 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <Color2IndexBulk_M1555IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	70fb      	strb	r3, [r7, #3]
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f001 f815 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <Index2ColorBulk_M1555IDMA2D>:
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af02      	add	r7, sp, #8
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	70fb      	strb	r3, [r7, #3]
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 ffe7 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <Color2IndexBulk_M4444IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af02      	add	r7, sp, #8
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	70fb      	strb	r3, [r7, #3]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	2304      	movs	r3, #4
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 ffed 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <Index2ColorBulk_M4444IDMA2D>:
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af02      	add	r7, sp, #8
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	70fb      	strb	r3, [r7, #3]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	2304      	movs	r3, #4
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 ffbf 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t Addr;
  uint32_t layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e066      	b.n	8004e08 <HAL_LTDC_LineEventCallback+0xdc>
  {
    if (layer_prop[layer].pending_buffer >= 0)
 8004d3a:	4939      	ldr	r1, [pc, #228]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3304      	adds	r3, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	db58      	blt.n	8004e02 <HAL_LTDC_LineEventCallback+0xd6>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004d50:	4933      	ldr	r1, [pc, #204]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	482f      	ldr	r0, [pc, #188]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4403      	add	r3, r0
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	4c2b      	ldr	r4, [pc, #172]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4423      	add	r3, r4
 8004d80:	3310      	adds	r3, #16
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fb03 f000 	mul.w	r0, r3, r0
 8004d88:	4c25      	ldr	r4, [pc, #148]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4423      	add	r3, r4
 8004d96:	3304      	adds	r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	fb03 f000 	mul.w	r0, r3, r0
 8004d9e:	4c20      	ldr	r4, [pc, #128]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4423      	add	r3, r4
 8004dac:	3314      	adds	r3, #20
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	fb03 f300 	mul.w	r3, r3, r0
 8004db4:	440b      	add	r3, r1
 8004db6:	60bb      	str	r3, [r7, #8]
      HAL_LTDC_SetAddress(hltdc, Addr, layer);
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fe f85e 	bl	8002e7e <HAL_LTDC_SetAddress>

	  __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3304      	adds	r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f004 fb06 	bl	80093f8 <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8004dec:	490c      	ldr	r1, [pc, #48]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e00:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d095      	beq.n	8004d3a <HAL_LTDC_LineEventCallback+0xe>
    }
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fe f86b 	bl	8002eec <HAL_LTDC_ProgramLineEvent>
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd90      	pop	{r4, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2001f898 	.word	0x2001f898

08004e24 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  uint32_t i;

  LCD_LL_Init();
 8004e2a:	f000 fa7f 	bl	800532c <LCD_LL_Init>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	4958      	ldr	r1, [pc, #352]	; (8004f94 <LCD_X_Config+0x170>)
 8004e34:	4858      	ldr	r0, [pc, #352]	; (8004f98 <LCD_X_Config+0x174>)
 8004e36:	f004 fdd7 	bl	80099e8 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f003 fbd6 	bl	80085ec <LCD_GetSwapXYEx>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <LCD_X_Config+0x3c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004e46:	22f0      	movs	r2, #240	; 0xf0
 8004e48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f003 fb35 	bl	80084bc <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004e52:	22f0      	movs	r2, #240	; 0xf0
 8004e54:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f003 fb17 	bl	800848c <LCD_SetVSizeEx>
 8004e5e:	e00b      	b.n	8004e78 <LCD_X_Config+0x54>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8004e60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e64:	21f0      	movs	r1, #240	; 0xf0
 8004e66:	2000      	movs	r0, #0
 8004e68:	f003 fb28 	bl	80084bc <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004e6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e70:	21f0      	movs	r1, #240	; 0xf0
 8004e72:	2000      	movs	r0, #0
 8004e74:	f003 fb0a 	bl	800848c <LCD_SetVSizeEx>
      LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
    }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8004e78:	4b48      	ldr	r3, [pc, #288]	; (8004f9c <LCD_X_Config+0x178>)
 8004e7a:	4a49      	ldr	r2, [pc, #292]	; (8004fa0 <LCD_X_Config+0x17c>)
 8004e7c:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER;
#endif

   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	e07f      	b.n	8004f84 <LCD_X_Config+0x160>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8004e84:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <LCD_X_Config+0x180>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e8c:	4843      	ldr	r0, [pc, #268]	; (8004f9c <LCD_X_Config+0x178>)
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4403      	add	r3, r0
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8004e9e:	493f      	ldr	r1, [pc, #252]	; (8004f9c <LCD_X_Config+0x178>)
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3304      	adds	r3, #4
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4939      	ldr	r1, [pc, #228]	; (8004f9c <LCD_X_Config+0x178>)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f003 faca 	bl	8008460 <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f003 fb80 	bl	80085d4 <LCD_GetBitsPerPixelEx>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	10d9      	asrs	r1, r3, #3
 8004ed8:	4830      	ldr	r0, [pc, #192]	; (8004f9c <LCD_X_Config+0x178>)
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4403      	add	r3, r0
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	; (8004fa8 <LCD_X_Config+0x184>)
 8004eee:	2121      	movs	r1, #33	; 0x21
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f003 fb2b 	bl	800854c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <LCD_X_Config+0x188>)
 8004efa:	2123      	movs	r1, #35	; 0x23
 8004efc:	4618      	mov	r0, r3
 8004efe:	f003 fb25 	bl	800854c <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    if (LCD_LL_GetPixelformat(i) <= LTDC_PIXEL_FORMAT_ARGB4444)
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa88 	bl	8005418 <LCD_LL_GetPixelformat>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d80b      	bhi.n	8004f26 <LCD_X_Config+0x102>
    {
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <LCD_X_Config+0x18c>)
 8004f12:	2119      	movs	r1, #25
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 fb19 	bl	800854c <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))BSP_LCD_DrawBitmap8bpp);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a25      	ldr	r2, [pc, #148]	; (8004fb4 <LCD_X_Config+0x190>)
 8004f1e:	2125      	movs	r1, #37	; 0x25
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fb13 	bl	800854c <LCD_SetDevFunc>
    }

    /* Set up drawing routine for 16bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_RGB565) {
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa76 	bl	8005418 <LCD_LL_GetPixelformat>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d105      	bne.n	8004f3e <LCD_X_Config+0x11a>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))BSP_LCD_DrawBitmap16bpp);     /* Set up drawing routine for 16bpp bitmap using DMA2D. Makes only sense with RGB565 */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <LCD_X_Config+0x194>)
 8004f36:	2124      	movs	r1, #36	; 0x24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f003 fb07 	bl	800854c <LCD_SetDevFunc>
    }

    /* Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination */
    GUICC_M1555I_SetCustColorConv(Color2IndexBulk_M1555IDMA2D, Index2ColorBulk_M1555IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB1555 */
 8004f3e:	491f      	ldr	r1, [pc, #124]	; (8004fbc <LCD_X_Config+0x198>)
 8004f40:	481f      	ldr	r0, [pc, #124]	; (8004fc0 <LCD_X_Config+0x19c>)
 8004f42:	f005 fd89 	bl	800aa58 <GUICC_M1555I_SetCustColorConv>
    GUICC_M565_SetCustColorConv  (Color2IndexBulk_M565DMA2D,   Index2ColorBulk_M565DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB565 */
 8004f46:	491f      	ldr	r1, [pc, #124]	; (8004fc4 <LCD_X_Config+0x1a0>)
 8004f48:	481f      	ldr	r0, [pc, #124]	; (8004fc8 <LCD_X_Config+0x1a4>)
 8004f4a:	f005 fb6f 	bl	800a62c <GUICC_M565_SetCustColorConv>
    GUICC_M4444I_SetCustColorConv(Color2IndexBulk_M4444IDMA2D, Index2ColorBulk_M4444IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB4444 */
 8004f4e:	491f      	ldr	r1, [pc, #124]	; (8004fcc <LCD_X_Config+0x1a8>)
 8004f50:	481f      	ldr	r0, [pc, #124]	; (8004fd0 <LCD_X_Config+0x1ac>)
 8004f52:	f005 fce9 	bl	800a928 <GUICC_M4444I_SetCustColorConv>
    GUICC_M888_SetCustColorConv  (Color2IndexBulk_M888DMA2D,   Index2ColorBulk_M888DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB888 */
 8004f56:	491f      	ldr	r1, [pc, #124]	; (8004fd4 <LCD_X_Config+0x1b0>)
 8004f58:	481f      	ldr	r0, [pc, #124]	; (8004fd8 <LCD_X_Config+0x1b4>)
 8004f5a:	f005 fadd 	bl	800a518 <GUICC_M888_SetCustColorConv>
    GUICC_M8888I_SetCustColorConv(Color2IndexBulk_M8888IDMA2D, Index2ColorBulk_M8888IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB8888 */
 8004f5e:	491f      	ldr	r1, [pc, #124]	; (8004fdc <LCD_X_Config+0x1b8>)
 8004f60:	481f      	ldr	r0, [pc, #124]	; (8004fe0 <LCD_X_Config+0x1bc>)
 8004f62:	f005 fc39 	bl	800a7d8 <GUICC_M8888I_SetCustColorConv>

    /* Set up custom alpha blending function using DMA2D */
    GUI_SetFuncAlphaBlending(DMA2D_AlphaBlending);                                                /* Set up custom alpha blending function using DMA2D */
 8004f66:	481f      	ldr	r0, [pc, #124]	; (8004fe4 <LCD_X_Config+0x1c0>)
 8004f68:	f004 f9f6 	bl	8009358 <GUI_SetFuncAlphaBlending>

    /* Set up custom function for translating a bitmap palette into index values.
    Required to load a bitmap palette into DMA2D CLUT in case of a 8bpp indexed bitmap */
    GUI_SetFuncGetpPalConvTable(_LCD_GetpPalConvTable);
 8004f6c:	481e      	ldr	r0, [pc, #120]	; (8004fe8 <LCD_X_Config+0x1c4>)
 8004f6e:	f004 fda5 	bl	8009abc <GUI_SetFuncGetpPalConvTable>

    /* Set up a custom function for mixing up single colors using DMA2D */
    GUI_SetFuncMixColors(DMA2D_MixColors);
 8004f72:	481e      	ldr	r0, [pc, #120]	; (8004fec <LCD_X_Config+0x1c8>)
 8004f74:	f004 f9f6 	bl	8009364 <GUI_SetFuncMixColors>

    /* Set up a custom function for mixing up arrays of colors using DMA2D */
    GUI_SetFuncMixColorsBulk(LCD_MixColorsBulk);
 8004f78:	481d      	ldr	r0, [pc, #116]	; (8004ff0 <LCD_X_Config+0x1cc>)
 8004f7a:	f004 f9f9 	bl	8009370 <GUI_SetFuncMixColorsBulk>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3301      	adds	r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f43f af7c 	beq.w	8004e84 <LCD_X_Config+0x60>
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08080344 	.word	0x08080344
 8004f98:	080801a4 	.word	0x080801a4
 8004f9c:	2001f898 	.word	0x2001f898
 8004fa0:	d0200000 	.word	0xd0200000
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	08005609 	.word	0x08005609
 8004fac:	080056bd 	.word	0x080056bd
 8004fb0:	080057dd 	.word	0x080057dd
 8004fb4:	08005edd 	.word	0x08005edd
 8004fb8:	08005e0d 	.word	0x08005e0d
 8004fbc:	08004cb3 	.word	0x08004cb3
 8004fc0:	08004c8b 	.word	0x08004c8b
 8004fc4:	08004c63 	.word	0x08004c63
 8004fc8:	08004c3b 	.word	0x08004c3b
 8004fcc:	08004d03 	.word	0x08004d03
 8004fd0:	08004cdb 	.word	0x08004cdb
 8004fd4:	08004c13 	.word	0x08004c13
 8004fd8:	08004beb 	.word	0x08004beb
 8004fdc:	08004bc3 	.word	0x08004bc3
 8004fe0:	08004b9b 	.word	0x08004b9b
 8004fe4:	08005c55 	.word	0x08005c55
 8004fe8:	08005b49 	.word	0x08005b49
 8004fec:	08005a31 	.word	0x08005a31
 8004ff0:	08005d09 	.word	0x08005d09

08004ff4 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b08b      	sub	sp, #44	; 0x2c
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  int32_t r = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t addr;
  int32_t xPos, yPos;
  uint32_t Color;

  switch (Cmd)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3b01      	subs	r3, #1
 8005008:	2b0d      	cmp	r3, #13
 800500a:	f200 8102 	bhi.w	8005212 <LCD_X_DisplayDriver+0x21e>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <LCD_X_DisplayDriver+0x20>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	0800504d 	.word	0x0800504d
 8005018:	08005213 	.word	0x08005213
 800501c:	08005055 	.word	0x08005055
 8005020:	080050bd 	.word	0x080050bd
 8005024:	080050cb 	.word	0x080050cb
 8005028:	080050dd 	.word	0x080050dd
 800502c:	0800516d 	.word	0x0800516d
 8005030:	08005157 	.word	0x08005157
 8005034:	080050ef 	.word	0x080050ef
 8005038:	080051bb 	.word	0x080051bb
 800503c:	08005213 	.word	0x08005213
 8005040:	080051cb 	.word	0x080051cb
 8005044:	080051e7 	.word	0x080051e7
 8005048:	080050a5 	.word	0x080050a5
  {
  case LCD_X_INITCONTROLLER:
    LCD_LL_LayerInit(LayerIndex);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8ed 	bl	800522c <LCD_LL_LayerInit>
    break;
 8005052:	e0e1      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETORG:
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8005054:	4973      	ldr	r1, [pc, #460]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6858      	ldr	r0, [r3, #4]
 8005068:	4c6e      	ldr	r4, [pc, #440]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4423      	add	r3, r4
 8005076:	330c      	adds	r3, #12
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	fb03 f000 	mul.w	r0, r3, r0
 800507e:	4c69      	ldr	r4, [pc, #420]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4423      	add	r3, r4
 800508c:	3314      	adds	r3, #20
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fb03 f300 	mul.w	r3, r3, r0
 8005094:	440b      	add	r3, r1
 8005096:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	6a39      	ldr	r1, [r7, #32]
 800509c:	4862      	ldr	r0, [pc, #392]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 800509e:	f7fd feee 	bl	8002e7e <HAL_LTDC_SetAddress>
    break;
 80050a2:	e0b9      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SHOWBUFFER:
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6819      	ldr	r1, [r3, #0]
 80050a8:	485e      	ldr	r0, [pc, #376]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4403      	add	r3, r0
 80050b6:	3304      	adds	r3, #4
 80050b8:	6019      	str	r1, [r3, #0]
    break;
 80050ba:	e0ad      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETLUTENTRY:
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4859      	ldr	r0, [pc, #356]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050c4:	f7fd fd3d 	bl	8002b42 <HAL_LTDC_ConfigCLUT>
    break;
 80050c8:	e0a6      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_ON:
    __HAL_LTDC_ENABLE(&hltdc);
 80050ca:	4b57      	ldr	r3, [pc, #348]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a56      	ldr	r2, [pc, #344]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	6992      	ldr	r2, [r2, #24]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	619a      	str	r2, [r3, #24]
    break;
 80050da:	e09d      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_OFF:
    __HAL_LTDC_DISABLE(&hltdc);
 80050dc:	4b52      	ldr	r3, [pc, #328]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a51      	ldr	r2, [pc, #324]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	6992      	ldr	r2, [r2, #24]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	619a      	str	r2, [r3, #24]
    break;
 80050ec:	e094      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d113      	bne.n	800511e <LCD_X_DisplayDriver+0x12a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 80050f6:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	01db      	lsls	r3, r3, #7
 8005100:	4413      	add	r3, r2
 8005102:	3384      	adds	r3, #132	; 0x84
 8005104:	461a      	mov	r2, r3
 8005106:	4b48      	ldr	r3, [pc, #288]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	440b      	add	r3, r1
 8005112:	3384      	adds	r3, #132	; 0x84
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e012      	b.n	8005144 <LCD_X_DisplayDriver+0x150>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 800511e:	4b42      	ldr	r3, [pc, #264]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	01db      	lsls	r3, r3, #7
 8005128:	4413      	add	r3, r2
 800512a:	3384      	adds	r3, #132	; 0x84
 800512c:	461a      	mov	r2, r3
 800512e:	4b3e      	ldr	r3, [pc, #248]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	01db      	lsls	r3, r3, #7
 8005138:	440b      	add	r3, r1
 800513a:	3384      	adds	r3, #132	; 0x84
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8005144:	4b38      	ldr	r3, [pc, #224]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a37      	ldr	r2, [pc, #220]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8005154:	e060      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETPOS:
    HAL_LTDC_SetWindowPosition(&hltdc,
                               ((LCD_X_SETPOS_INFO *)pData)->xPos,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,
 800515a:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8005160:	461a      	mov	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4830      	ldr	r0, [pc, #192]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005166:	f7fd fe0e 	bl	8002d86 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 800516a:	e055      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, (int*)&xPos, (int*)&yPos);
 800516c:	f107 0214 	add.w	r2, r7, #20
 8005170:	f107 0318 	add.w	r3, r7, #24
 8005174:	4619      	mov	r1, r3
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f004 f914 	bl	80093a4 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	4828      	ldr	r0, [pc, #160]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4403      	add	r3, r0
 800518e:	330c      	adds	r3, #12
 8005190:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	4823      	ldr	r0, [pc, #140]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4403      	add	r3, r0
 80051a4:	3310      	adds	r3, #16
 80051a6:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4619      	mov	r1, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	481d      	ldr	r0, [pc, #116]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051b4:	f7fd fde7 	bl	8002d86 <HAL_LTDC_SetWindowPosition>
    break;
 80051b8:	e02e      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4819      	ldr	r0, [pc, #100]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051c4:	f7fd fe25 	bl	8002e12 <HAL_LTDC_SetAlpha>
    break;
 80051c8:	e026      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <LCD_X_DisplayDriver+0x1e8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	4814      	ldr	r0, [pc, #80]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051d6:	f7fd fd28 	bl	8002c2a <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
    }
    break;
 80051da:	e01d      	b.n	8005218 <LCD_X_DisplayDriver+0x224>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4812      	ldr	r0, [pc, #72]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051e0:	f7fd fd5d 	bl	8002c9e <HAL_LTDC_DisableColorKeying>
    break;
 80051e4:	e018      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	0c1b      	lsrs	r3, r3, #16
 80051ec:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80051f6:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8005202:	4313      	orrs	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]

    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	4807      	ldr	r0, [pc, #28]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 800520c:	f7fd fc54 	bl	8002ab8 <HAL_LTDC_ConfigColorKeying>
    break;
 8005210:	e002      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  default:
    r = -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800521a:	4618      	mov	r0, r3
 800521c:	372c      	adds	r7, #44	; 0x2c
 800521e:	46bd      	mov	sp, r7
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	bf00      	nop
 8005224:	2001f898 	.word	0x2001f898
 8005228:	20022ba4 	.word	0x20022ba4

0800522c <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(uint32_t LayerIndex)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b090      	sub	sp, #64	; 0x40
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t                         i;
  static uint32_t                  LUT[256];
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d169      	bne.n	800530e <LCD_LL_LayerInit+0xe2>
  {
  /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 800523e:	23f0      	movs	r3, #240	; 0xf0
 8005240:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowY0 = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY1 = YSIZE_PHYS;
 8005246:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800524a:	617b      	str	r3, [r7, #20]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f8e3 	bl	8005418 <LCD_LL_GetPixelformat>
 8005252:	4603      	mov	r3, r0
 8005254:	61bb      	str	r3, [r7, #24]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8005256:	4930      	ldr	r1, [pc, #192]	; (8005318 <LCD_LL_LayerInit+0xec>)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.Alpha = 255;
 8005268:	23ff      	movs	r3, #255	; 0xff
 800526a:	61fb      	str	r3, [r7, #28]
    layer_cfg.Alpha0 = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	623b      	str	r3, [r7, #32]
    layer_cfg.Backcolor.Blue = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    layer_cfg.Backcolor.Green = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    layer_cfg.Backcolor.Red = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005288:	2307      	movs	r3, #7
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.ImageWidth = XSIZE_PHYS;
 800528c:	23f0      	movs	r3, #240	; 0xf0
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8005290:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	481f      	ldr	r0, [pc, #124]	; (800531c <LCD_LL_LayerInit+0xf0>)
 80052a0:	f7fd fbcc 	bl	8002a3c <HAL_LTDC_ConfigLayer>

    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f003 f994 	bl	80085d4 <LCD_GetBitsPerPixelEx>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	dc04      	bgt.n	80052bc <LCD_LL_LayerInit+0x90>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4819      	ldr	r0, [pc, #100]	; (800531c <LCD_LL_LayerInit+0xf0>)
 80052b6:	f7fd fd2c 	bl	8002d12 <HAL_LTDC_EnableCLUT>
        }
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
      }
    }
  }
}
 80052ba:	e028      	b.n	800530e <LCD_LL_LayerInit+0xe2>
      if (layer_prop[LayerIndex].pColorConvAPI == GUICC_88666I)
 80052bc:	4916      	ldr	r1, [pc, #88]	; (8005318 <LCD_LL_LayerInit+0xec>)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	3318      	adds	r3, #24
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a14      	ldr	r2, [pc, #80]	; (8005320 <LCD_LL_LayerInit+0xf4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d11c      	bne.n	800530e <LCD_LL_LayerInit+0xe2>
        HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4811      	ldr	r0, [pc, #68]	; (800531c <LCD_LL_LayerInit+0xf0>)
 80052d8:	f7fd fd1b 	bl	8002d12 <HAL_LTDC_EnableCLUT>
        for (i = 0; i < 256; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e0:	e00b      	b.n	80052fa <LCD_LL_LayerInit+0xce>
          LUT[i] = LCD_API_ColorConv_8666.pfIndex2Color(i);
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <LCD_LL_LayerInit+0xf8>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052e8:	4798      	blx	r3
 80052ea:	4601      	mov	r1, r0
 80052ec:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <LCD_LL_LayerInit+0xfc>)
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < 256; i++)
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	3301      	adds	r3, #1
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	2bff      	cmp	r3, #255	; 0xff
 80052fe:	d9f0      	bls.n	80052e2 <LCD_LL_LayerInit+0xb6>
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005306:	4908      	ldr	r1, [pc, #32]	; (8005328 <LCD_LL_LayerInit+0xfc>)
 8005308:	4804      	ldr	r0, [pc, #16]	; (800531c <LCD_LL_LayerInit+0xf0>)
 800530a:	f7fd fc1a 	bl	8002b42 <HAL_LTDC_ConfigCLUT>
}
 800530e:	bf00      	nop
 8005310:	3740      	adds	r7, #64	; 0x40
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2001f898 	.word	0x2001f898
 800531c:	20022ba4 	.word	0x20022ba4
 8005320:	0808038c 	.word	0x0808038c
 8005324:	080803a4 	.word	0x080803a4
 8005328:	200225b4 	.word	0x200225b4

0800532c <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 8005330:	4834      	ldr	r0, [pc, #208]	; (8005404 <LCD_LL_Init+0xd8>)
 8005332:	f7fd fab3 	bl	800289c <HAL_LTDC_DeInit>

      /* Initializaton of ILI9341 component*/
      LCD_PowerOn();
 8005336:	f000 fe73 	bl	8006020 <LCD_PowerOn>

      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 800533a:	4b32      	ldr	r3, [pc, #200]	; (8005404 <LCD_LL_Init+0xd8>)
 800533c:	2209      	movs	r2, #9
 800533e:	615a      	str	r2, [r3, #20]
      hltdc.Init.VerticalSync = 1;
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <LCD_LL_Init+0xd8>)
 8005342:	2201      	movs	r2, #1
 8005344:	619a      	str	r2, [r3, #24]
      hltdc.Init.AccumulatedHBP = 29;
 8005346:	4b2f      	ldr	r3, [pc, #188]	; (8005404 <LCD_LL_Init+0xd8>)
 8005348:	221d      	movs	r2, #29
 800534a:	61da      	str	r2, [r3, #28]
      hltdc.Init.AccumulatedVBP = 3;
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <LCD_LL_Init+0xd8>)
 800534e:	2203      	movs	r2, #3
 8005350:	621a      	str	r2, [r3, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 8005352:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <LCD_LL_Init+0xd8>)
 8005354:	f240 1243 	movw	r2, #323	; 0x143
 8005358:	629a      	str	r2, [r3, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 800535a:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <LCD_LL_Init+0xd8>)
 800535c:	f240 120d 	movw	r2, #269	; 0x10d
 8005360:	625a      	str	r2, [r3, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <LCD_LL_Init+0xd8>)
 8005364:	f240 1247 	movw	r2, #327	; 0x147
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 800536a:	4b26      	ldr	r3, [pc, #152]	; (8005404 <LCD_LL_Init+0xd8>)
 800536c:	f240 1217 	movw	r2, #279	; 0x117
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c

      /* background value */
      hltdc.Init.Backcolor.Blue = 0;
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <LCD_LL_Init+0xd8>)
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <LCD_LL_Init+0xd8>)
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <LCD_LL_Init+0xd8>)
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 Mhz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <LCD_LL_Init+0xdc>)
 800538c:	2208      	movs	r2, #8
 800538e:	601a      	str	r2, [r3, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <LCD_LL_Init+0xdc>)
 8005392:	22c0      	movs	r2, #192	; 0xc0
 8005394:	611a      	str	r2, [r3, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <LCD_LL_Init+0xdc>)
 8005398:	2204      	movs	r2, #4
 800539a:	619a      	str	r2, [r3, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <LCD_LL_Init+0xdc>)
 800539e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80053a4:	4818      	ldr	r0, [pc, #96]	; (8005408 <LCD_LL_Init+0xdc>)
 80053a6:	f7fe fbcb 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>

      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <LCD_LL_Init+0xd8>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <LCD_LL_Init+0xd8>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <LCD_LL_Init+0xd8>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <LCD_LL_Init+0xd8>)
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
      hltdc.Instance = LTDC;
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <LCD_LL_Init+0xd8>)
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <LCD_LL_Init+0xe0>)
 80053c6:	601a      	str	r2, [r3, #0]

      HAL_LTDC_Init(&hltdc);
 80053c8:	480e      	ldr	r0, [pc, #56]	; (8005404 <LCD_LL_Init+0xd8>)
 80053ca:	f7fd f993 	bl	80026f4 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 80053ce:	2100      	movs	r1, #0
 80053d0:	480c      	ldr	r0, [pc, #48]	; (8005404 <LCD_LL_Init+0xd8>)
 80053d2:	f7fd fd8b 	bl	8002eec <HAL_LTDC_ProgramLineEvent>

	  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <LCD_LL_Init+0xe4>)
 80053d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053dc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_RGB565;
 80053de:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <LCD_LL_Init+0xe4>)
 80053e0:	2202      	movs	r2, #2
 80053e2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <LCD_LL_Init+0xe4>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D;
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <LCD_LL_Init+0xe4>)
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <LCD_LL_Init+0xe8>)
 80053ee:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80053f0:	4807      	ldr	r0, [pc, #28]	; (8005410 <LCD_LL_Init+0xe4>)
 80053f2:	f7fb fd33 	bl	8000e5c <HAL_DMA2D_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d000      	beq.n	80053fe <LCD_LL_Init+0xd2>
  {
    while (1);
 80053fc:	e7fe      	b.n	80053fc <LCD_LL_Init+0xd0>
  }
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20022ba4 	.word	0x20022ba4
 8005408:	200229b4 	.word	0x200229b4
 800540c:	40016800 	.word	0x40016800
 8005410:	2001f858 	.word	0x2001f858
 8005414:	4002b000 	.word	0x4002b000

08005418 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static uint32_t LCD_LL_GetPixelformat(uint32_t LayerIndex)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  const LCD_API_COLOR_CONV * pColorConvAPI;

  if (LayerIndex >= GUI_NUM_LAYERS)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <LCD_LL_GetPixelformat+0x12>
  {
    return 0;
 8005426:	2300      	movs	r3, #0
 8005428:	e03a      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  pColorConvAPI = layer_prop[LayerIndex].pColorConvAPI;
 800542a:	4920      	ldr	r1, [pc, #128]	; (80054ac <LCD_LL_GetPixelformat+0x94>)
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	3318      	adds	r3, #24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]

  if (pColorConvAPI == GUICC_M8888I)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <LCD_LL_GetPixelformat+0x98>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <LCD_LL_GetPixelformat+0x32>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8005446:	2300      	movs	r3, #0
 8005448:	e02a      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M888)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <LCD_LL_GetPixelformat+0x9c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <LCD_LL_GetPixelformat+0x3e>
  {
    return LTDC_PIXEL_FORMAT_RGB888;
 8005452:	2301      	movs	r3, #1
 8005454:	e024      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M565)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <LCD_LL_GetPixelformat+0xa0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d101      	bne.n	8005462 <LCD_LL_GetPixelformat+0x4a>
  {
    return LTDC_PIXEL_FORMAT_RGB565;
 800545e:	2302      	movs	r3, #2
 8005460:	e01e      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M1555I)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a15      	ldr	r2, [pc, #84]	; (80054bc <LCD_LL_GetPixelformat+0xa4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d101      	bne.n	800546e <LCD_LL_GetPixelformat+0x56>
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800546a:	2303      	movs	r3, #3
 800546c:	e018      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M4444I)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <LCD_LL_GetPixelformat+0xa8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <LCD_LL_GetPixelformat+0x62>
  {
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8005476:	2304      	movs	r3, #4
 8005478:	e012      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_8666)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <LCD_LL_GetPixelformat+0xac>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <LCD_LL_GetPixelformat+0x6e>
  {
    return LTDC_PIXEL_FORMAT_L8;
 8005482:	2305      	movs	r3, #5
 8005484:	e00c      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_1616I)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a0f      	ldr	r2, [pc, #60]	; (80054c8 <LCD_LL_GetPixelformat+0xb0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <LCD_LL_GetPixelformat+0x7a>
  {
    return LTDC_PIXEL_FORMAT_AL44;
 800548e:	2306      	movs	r3, #6
 8005490:	e006      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_88666I)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <LCD_LL_GetPixelformat+0xb4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <LCD_LL_GetPixelformat+0x86>
  {
    return LTDC_PIXEL_FORMAT_AL88;
 800549a:	2307      	movs	r3, #7
 800549c:	e000      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  while (1);
 800549e:	e7fe      	b.n	800549e <LCD_LL_GetPixelformat+0x86>
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	2001f898 	.word	0x2001f898
 80054b0:	08080344 	.word	0x08080344
 80054b4:	080802fc 	.word	0x080802fc
 80054b8:	08080314 	.word	0x08080314
 80054bc:	08080374 	.word	0x08080374
 80054c0:	0808035c 	.word	0x0808035c
 80054c4:	080803a4 	.word	0x080803a4
 80054c8:	080803bc 	.word	0x080803bc
 80054cc:	0808038c 	.word	0x0808038c

080054d0 <DMA2D_CopyBuffer>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBuffer(uint32_t LayerIndex, void * pSrc, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff ff9a 	bl	8005418 <LCD_LL_GetPixelformat>
 80054e4:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;
 80054f4:	4a11      	ldr	r2, [pc, #68]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst;
 8005500:	4a0e      	ldr	r2, [pc, #56]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 8005506:	4a0d      	ldr	r2, [pc, #52]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 800550c:	4a0b      	ldr	r2, [pc, #44]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	6a39      	ldr	r1, [r7, #32]
 8005514:	b289      	uxth	r1, r1
 8005516:	430b      	orrs	r3, r1
 8005518:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800551a:	4a08      	ldr	r2, [pc, #32]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005526:	bf00      	nop
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f9      	bne.n	8005528 <DMA2D_CopyBuffer+0x58>
  {
  }
}
 8005534:	bf00      	nop
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	4002b000 	.word	0x4002b000

08005540 <DMA2D_FillBuffer>:
/*********************************************************************
*
*       FillBuffer
*/
static void DMA2D_FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
 uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ff62 	bl	8005418 <LCD_LL_GetPixelformat>
 8005554:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <DMA2D_FillBuffer+0x68>)
 800555a:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (uint32_t)pDst;
 8005562:	4a10      	ldr	r2, [pc, #64]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8005568:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 800556e:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	b289      	uxth	r1, r1
 800557e:	430b      	orrs	r3, r1
 8005580:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 8005582:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 800558e:	bf00      	nop
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f9      	bne.n	8005590 <DMA2D_FillBuffer+0x50>
  {
  }
}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	4002b000 	.word	0x4002b000
 80055a8:	00030200 	.word	0x00030200

080055ac <GetBufferSize>:
/*********************************************************************
*
*       GetBufferSize
*/
static uint32_t GetBufferSize(uint32_t LayerIndex)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80055b4:	4913      	ldr	r1, [pc, #76]	; (8005604 <GetBufferSize+0x58>)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	330c      	adds	r3, #12
 80055c4:	6819      	ldr	r1, [r3, #0]
 80055c6:	480f      	ldr	r0, [pc, #60]	; (8005604 <GetBufferSize+0x58>)
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4403      	add	r3, r0
 80055d4:	3310      	adds	r3, #16
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	fb03 f101 	mul.w	r1, r3, r1
 80055dc:	4809      	ldr	r0, [pc, #36]	; (8005604 <GetBufferSize+0x58>)
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4403      	add	r3, r0
 80055ea:	3314      	adds	r3, #20
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	fb03 f301 	mul.w	r3, r3, r1
 80055f2:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2001f898 	.word	0x2001f898

08005608 <CUSTOM_CopyBuffer>:

/*********************************************************************
*
*       CUSTOM_CopyBuffer
*/
static void CUSTOM_CopyBuffer(int32_t LayerIndex, int32_t IndexSrc, int32_t IndexDst) {
 8005608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800560a:	b08d      	sub	sp, #52	; 0x34
 800560c:	af04      	add	r7, sp, #16
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ffc8 	bl	80055ac <GetBufferSize>
 800561c:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800561e:	4926      	ldr	r1, [pc, #152]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	440b      	add	r3, r1
 800563a:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 800563c:	491e      	ldr	r1, [pc, #120]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4619      	mov	r1, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	440b      	add	r3, r1
 8005658:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	69bc      	ldr	r4, [r7, #24]
 800565e:	697d      	ldr	r5, [r7, #20]
 8005660:	4915      	ldr	r1, [pc, #84]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	330c      	adds	r3, #12
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461e      	mov	r6, r3
 8005674:	4910      	ldr	r1, [pc, #64]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	3310      	adds	r3, #16
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	2300      	movs	r3, #0
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	2300      	movs	r3, #0
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	9200      	str	r2, [sp, #0]
 8005692:	4633      	mov	r3, r6
 8005694:	462a      	mov	r2, r5
 8005696:	4621      	mov	r1, r4
 8005698:	f7ff ff1a 	bl	80054d0 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800569c:	4906      	ldr	r1, [pc, #24]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3308      	adds	r3, #8
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
}
 80056b0:	bf00      	nop
 80056b2:	3724      	adds	r7, #36	; 0x24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b8:	2001f898 	.word	0x2001f898

080056bc <CUSTOM_CopyRect>:
/*********************************************************************
*
*       CUSTOM_CopyRect
*/
static void CUSTOM_CopyRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t xSize, int32_t ySize)
{
 80056bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056be:	b08f      	sub	sp, #60	; 0x3c
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	6178      	str	r0, [r7, #20]
 80056c4:	6139      	str	r1, [r7, #16]
 80056c6:	60fa      	str	r2, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
  int32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ff6d 	bl	80055ac <GetBufferSize>
 80056d2:	4603      	mov	r3, r0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80056d6:	4940      	ldr	r1, [pc, #256]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	483c      	ldr	r0, [pc, #240]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4403      	add	r3, r0
 80056f4:	3304      	adds	r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	4419      	add	r1, r3
 8005700:	4835      	ldr	r0, [pc, #212]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4613      	mov	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4403      	add	r3, r0
 800570e:	330c      	adds	r3, #12
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	fb02 f203 	mul.w	r2, r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	18d0      	adds	r0, r2, r3
 800571c:	4c2e      	ldr	r4, [pc, #184]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4423      	add	r3, r4
 800572a:	3314      	adds	r3, #20
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fb03 f300 	mul.w	r3, r3, r0
 8005732:	440b      	add	r3, r1
 8005734:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8005736:	4928      	ldr	r1, [pc, #160]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	4824      	ldr	r0, [pc, #144]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4403      	add	r3, r0
 8005754:	3304      	adds	r3, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	4419      	add	r1, r3
 8005760:	481d      	ldr	r0, [pc, #116]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4403      	add	r3, r0
 800576e:	330c      	adds	r3, #12
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005774:	fb02 f203 	mul.w	r2, r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	18d0      	adds	r0, r2, r3
 800577c:	4c16      	ldr	r4, [pc, #88]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4423      	add	r3, r4
 800578a:	3314      	adds	r3, #20
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	fb03 f300 	mul.w	r3, r3, r0
 8005792:	440b      	add	r3, r1
 8005794:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8005796:	697c      	ldr	r4, [r7, #20]
 8005798:	6a3d      	ldr	r5, [r7, #32]
 800579a:	69fe      	ldr	r6, [r7, #28]
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057a2:	480d      	ldr	r0, [pc, #52]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4403      	add	r3, r0
 80057b0:	330c      	adds	r3, #12
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	9100      	str	r1, [sp, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4632      	mov	r2, r6
 80057c6:	4629      	mov	r1, r5
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fe81 	bl	80054d0 <DMA2D_CopyBuffer>
}
 80057ce:	bf00      	nop
 80057d0:	372c      	adds	r7, #44	; 0x2c
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2001f898 	.word	0x2001f898

080057dc <CUSTOM_FillRect>:
/*********************************************************************
*
*       CUSTOM_FillRect
*/
static void CUSTOM_FillRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t PixelIndex)
{
 80057dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057de:	b08b      	sub	sp, #44	; 0x2c
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 80057ea:	f003 fe1d 	bl	8009428 <GUI_GetDrawMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d110      	bne.n	8005816 <CUSTOM_FillRect+0x3a>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80057f4:	2200      	movs	r2, #0
 80057f6:	2119      	movs	r1, #25
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f002 fea7 	bl	800854c <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	68b8      	ldr	r0, [r7, #8]
 8005806:	f003 f8c3 	bl	8008990 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 800580a:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <CUSTOM_FillRect+0xf8>)
 800580c:	2119      	movs	r1, #25
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f002 fe9c 	bl	800854c <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 8005814:	e059      	b.n	80058ca <CUSTOM_FillRect+0xee>
    xSize = x1 - x0 + 1;
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8005820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	3301      	adds	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff febd 	bl	80055ac <GetBufferSize>
 8005832:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8005834:	4928      	ldr	r1, [pc, #160]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461c      	mov	r4, r3
 8005846:	4924      	ldr	r1, [pc, #144]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	330c      	adds	r3, #12
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	fb02 f203 	mul.w	r2, r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	18d1      	adds	r1, r2, r3
 8005862:	481d      	ldr	r0, [pc, #116]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4403      	add	r3, r0
 8005870:	3314      	adds	r3, #20
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	fb03 f301 	mul.w	r3, r3, r1
 8005878:	4618      	mov	r0, r3
 800587a:	4917      	ldr	r1, [pc, #92]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3308      	adds	r3, #8
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	fb03 f302 	mul.w	r3, r3, r2
 8005894:	4403      	add	r3, r0
 8005896:	4423      	add	r3, r4
 8005898:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	693c      	ldr	r4, [r7, #16]
 800589e:	69fd      	ldr	r5, [r7, #28]
 80058a0:	69be      	ldr	r6, [r7, #24]
 80058a2:	490d      	ldr	r1, [pc, #52]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	330c      	adds	r3, #12
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	9200      	str	r2, [sp, #0]
 80058c0:	4633      	mov	r3, r6
 80058c2:	462a      	mov	r2, r5
 80058c4:	4621      	mov	r1, r4
 80058c6:	f7ff fe3b 	bl	8005540 <DMA2D_FillBuffer>
}
 80058ca:	bf00      	nop
 80058cc:	3724      	adds	r7, #36	; 0x24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	080057dd 	.word	0x080057dd
 80058d8:	2001f898 	.word	0x2001f898

080058dc <DMA2D_LoadLUT>:
  * @param  pColor
  * @param  NumItems
  * @retval None
  */
static void DMA2D_LoadLUT(LCD_COLOR * pColor, uint32_t NumItems)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  DMA2D->FGCMAR  = (uint32_t)pColor;
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <DMA2D_LoadLUT+0x38>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*  Foreground PFC Control Register */
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 80058ec:	4a09      	ldr	r2, [pc, #36]	; (8005914 <DMA2D_LoadLUT+0x38>)
                  | ((NumItems - 1) & 0xFF) << 8;   /* Number of items to load */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f043 0301 	orr.w	r3, r3, #1
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 80058fa:	61d3      	str	r3, [r2, #28]
  DMA2D->FGPFCCR |= (1 << 5);                       /* Start loading */
 80058fc:	4a05      	ldr	r2, [pc, #20]	; (8005914 <DMA2D_LoadLUT+0x38>)
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <DMA2D_LoadLUT+0x38>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f043 0320 	orr.w	r3, r3, #32
 8005906:	61d3      	str	r3, [r2, #28]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	4002b000 	.word	0x4002b000

08005918 <InvertAlpha_SwapRB>:
  * @param  pColorDst: Destination address
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha_SwapRB(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  uint32_t Color;
  do
  {
    Color = *pColorSrc++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1d1a      	adds	r2, r3, #4
 8005928:	60fa      	str	r2, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	617b      	str	r3, [r7, #20]
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1d1a      	adds	r2, r3, #4
 8005932:	60ba      	str	r2, [r7, #8]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	0412      	lsls	r2, r2, #16
 8005938:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
                 |  (Color & 0x0000FF00)                /* Green */
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005942:	4311      	orrs	r1, r2
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	0c12      	lsrs	r2, r2, #16
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	4311      	orrs	r1, r2
                 | ((Color & 0xFF000000) ^ 0xFF000000); /* Invert alpha */
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	43d2      	mvns	r2, r2
 8005950:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005954:	430a      	orrs	r2, r1
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8005956:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1df      	bne.n	8005924 <InvertAlpha_SwapRB+0xc>
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <InvertAlpha>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t Color;

  do
  {
    Color = *pColorSrc++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	60fa      	str	r2, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	617b      	str	r3, [r7, #20]
    *pColorDst++ = Color ^ 0xFF000000; /* Invert alpha */
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	60ba      	str	r2, [r7, #8]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	f082 427f 	eor.w	r2, r2, #4278190080	; 0xff000000
 8005992:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ed      	bne.n	800597c <InvertAlpha+0xc>
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <DMA2D_AlphaBlendingBulk>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlendingBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <DMA2D_AlphaBlendingBulk+0x80>)
 80059be:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 80059c0:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 80059cc:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register */
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	611a      	str	r2, [r3, #16]
  DMA2D->BGOR    = 0;                               /* Background Offset Register */
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	619a      	str	r2, [r3, #24]
  DMA2D->OOR     = 0;                               /* Output Offset Register */
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Foreground PFC Control Register (Defines the FG pixel format) */
 80059e4:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Background PFC Control Register (Defines the BG pixel format) */
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;       /* Output     PFC Control Register (Defines the output pixel format) */
 80059f0:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */

  DMA2D->CR     |= DMA2D_CR_START;
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005a0e:	bf00      	nop
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f9      	bne.n	8005a10 <DMA2D_AlphaBlendingBulk+0x64>
  {
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	4002b000 	.word	0x4002b000
 8005a2c:	00020200 	.word	0x00020200

08005a30 <DMA2D_MixColors>:
  * @param  BkColor
  * @param  Intens
  * @retval LCD_COLOR
  */
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	; 0x24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t ColorFG, ColorBG, ColorDst;

  if ((BkColor & 0xFF000000) == 0xFF000000)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a44:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005a48:	d101      	bne.n	8005a4e <DMA2D_MixColors+0x1e>
  {
    return Color;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	e039      	b.n	8005ac2 <DMA2D_MixColors+0x92>
  }
  ColorFG = Color   ^ 0xFF000000;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	61fb      	str	r3, [r7, #28]
  ColorBG = BkColor ^ 0xFF000000;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	61bb      	str	r3, [r7, #24]

  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a60:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <DMA2D_MixColors+0xa4>)
 8005a62:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)&ColorFG;                   /* Foreground Memory Address Register */
 8005a64:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a66:	f107 031c 	add.w	r3, r7, #28
 8005a6a:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)&ColorBG;                   /* Background Memory Address Register */
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)&ColorDst;                  /* Output Memory Address Register (Destination address) */
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a76:	f107 0314 	add.w	r3, r7, #20
 8005a7a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a7c:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <DMA2D_MixColors+0xa0>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a86:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <DMA2D_MixColors+0xa0>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005a90:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a92:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8005a94:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(1 << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a9c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Control Register (Start operation) */
 8005aa2:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005aae:	bf00      	nop
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f9      	bne.n	8005ab0 <DMA2D_MixColors+0x80>
  {
  }

  return (ColorDst ^ 0xFF000000);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	4002b000 	.word	0x4002b000
 8005ad4:	00020200 	.word	0x00020200

08005ad8 <DMA2D_ConvertColor>:
  * @param  PixelFormatDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_ConvertColor(void * pSrc, void * pDst,  uint32_t PixelFormatSrc, uint32_t PixelFormatDst, uint32_t NumItems)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  /* Set up mode */

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8005ae6:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005ae8:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8005aec:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset) */
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8005b0c:	4a0d      	ldr	r2, [pc, #52]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	041b      	lsls	r3, r3, #16
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005b2a:	bf00      	nop
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f9      	bne.n	8005b2c <DMA2D_ConvertColor+0x54>
  {
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	4002b000 	.word	0x4002b000

08005b48 <_LCD_GetpPalConvTable>:
  * @param  pBitmap
  * @param  LayerIndex
  * @retval LCD_PIXELINDEX
  */
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  void (* pFunc)(void);
  int32_t DoDefault = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]

  /* Check if we have a non transparent device independent bitmap */
  if (pBitmap->BitsPerPixel == 8)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	88db      	ldrh	r3, [r3, #6]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d119      	bne.n	8005b94 <_LCD_GetpPalConvTable+0x4c>
  {
    pFunc = LCD_GetDevFunc(LayerIndex, LCD_DEVFUNC_DRAWBMP_8BPP);
 8005b60:	2125      	movs	r1, #37	; 0x25
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f002 fd6a 	bl	800863c <LCD_GetDevFunc>
 8005b68:	6138      	str	r0, [r7, #16]
    if (pFunc)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <_LCD_GetpPalConvTable+0x46>
    {
      if (pBitmap->pPal)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <_LCD_GetpPalConvTable+0x40>
      {
        if (pBitmap->pPal->HasTrans)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <_LCD_GetpPalConvTable+0x50>
        {
          DoDefault = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e007      	b.n	8005b98 <_LCD_GetpPalConvTable+0x50>
        }
      }
      else
      {
        DoDefault = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	e004      	b.n	8005b98 <_LCD_GetpPalConvTable+0x50>
      }
    }
    else
    {
      DoDefault = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e001      	b.n	8005b98 <_LCD_GetpPalConvTable+0x50>
    }
  }
  else
  {
    DoDefault = 1;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Default palette management for other cases */
  if (DoDefault)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <_LCD_GetpPalConvTable+0x60>
  {

    /* Return a pointer to the index values to be used by the controller */
    return LCD_GetpPalConvTable(pLogPal);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f002 fe44 	bl	800882c <LCD_GetpPalConvTable>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	e00e      	b.n	8005bc6 <_LCD_GetpPalConvTable+0x7e>
  }

  /* Convert palette colors from ARGB to ABGR */
  InvertAlpha_SwapRB((U32 *)pLogPal->pPalEntries, aBufferDMA2D, pLogPal->NumEntries);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6898      	ldr	r0, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4907      	ldr	r1, [pc, #28]	; (8005bd0 <_LCD_GetpPalConvTable+0x88>)
 8005bb4:	f7ff feb0 	bl	8005918 <InvertAlpha_SwapRB>

  /* Load LUT using DMA2D */
  DMA2D_LoadLUT(aBufferDMA2D, pLogPal->NumEntries);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <_LCD_GetpPalConvTable+0x88>)
 8005bc0:	f7ff fe8c 	bl	80058dc <DMA2D_LoadLUT>

  /* Return something not NULL */
  return aBufferDMA2D;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <_LCD_GetpPalConvTable+0x88>)
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	2001f8b4 	.word	0x2001f8b4

08005bd4 <DMA2D_MixColorsBulk>:
  * @param  Intens
  * @param  NumItems
  * @retval None
  */
static void DMA2D_MixColorsBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U8 Intens, uint32_t NumItems)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	70fb      	strb	r3, [r7, #3]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005be4:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <DMA2D_MixColorsBulk+0x7c>)
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005bfa:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005c04:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005c0e:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005c10:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8005c12:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8005c18:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005c30:	bf00      	nop
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f9      	bne.n	8005c32 <DMA2D_MixColorsBulk+0x5e>
  {
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	4002b000 	.word	0x4002b000
 8005c50:	00020200 	.word	0x00020200

08005c54 <DMA2D_AlphaBlending>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  /* Invert alpha values */
  InvertAlpha(pColorFG, aBuffer_FG, NumItems);
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	490b      	ldr	r1, [pc, #44]	; (8005c94 <DMA2D_AlphaBlending+0x40>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe82 	bl	8005970 <InvertAlpha>
  InvertAlpha(pColorBG, aBuffer_BG, NumItems);
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	490a      	ldr	r1, [pc, #40]	; (8005c98 <DMA2D_AlphaBlending+0x44>)
 8005c70:	68b8      	ldr	r0, [r7, #8]
 8005c72:	f7ff fe7d 	bl	8005970 <InvertAlpha>

  /* Use DMA2D for mixing */
  DMA2D_AlphaBlendingBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, NumItems);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <DMA2D_AlphaBlending+0x48>)
 8005c7a:	4907      	ldr	r1, [pc, #28]	; (8005c98 <DMA2D_AlphaBlending+0x44>)
 8005c7c:	4805      	ldr	r0, [pc, #20]	; (8005c94 <DMA2D_AlphaBlending+0x40>)
 8005c7e:	f7ff fe95 	bl	80059ac <DMA2D_AlphaBlendingBulk>

  /* Invert alpha values */
  InvertAlpha(aBufferDMA2D, pColorDst, NumItems);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4805      	ldr	r0, [pc, #20]	; (8005c9c <DMA2D_AlphaBlending+0x48>)
 8005c88:	f7ff fe72 	bl	8005970 <InvertAlpha>
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	200207b4 	.word	0x200207b4
 8005c98:	200216b4 	.word	0x200216b4
 8005c9c:	2001f8b4 	.word	0x2001f8b4

08005ca0 <DMA2D_Index2ColorBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	70fb      	strb	r3, [r7, #3]
  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(pIndex, aBufferDMA2D, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4906      	ldr	r1, [pc, #24]	; (8005cd0 <DMA2D_Index2ColorBulk+0x30>)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff ff0d 	bl	8005ad8 <DMA2D_ConvertColor>

  /* Convert colors from ARGB to ABGR and invert alpha values */
  InvertAlpha_SwapRB(aBufferDMA2D, pColor, NumItems);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	4803      	ldr	r0, [pc, #12]	; (8005cd0 <DMA2D_Index2ColorBulk+0x30>)
 8005cc4:	f7ff fe28 	bl	8005918 <InvertAlpha_SwapRB>
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	2001f8b4 	.word	0x2001f8b4

08005cd4 <DMA2D_Color2IndexBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	70fb      	strb	r3, [r7, #3]
  /* Convert colors from ABGR to ARGB and invert alpha values */
  InvertAlpha_SwapRB(pColor, aBufferDMA2D, NumItems);
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <DMA2D_Color2IndexBulk+0x30>)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fe16 	bl	8005918 <InvertAlpha_SwapRB>

  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(aBufferDMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4803      	ldr	r0, [pc, #12]	; (8005d04 <DMA2D_Color2IndexBulk+0x30>)
 8005cf8:	f7ff feee 	bl	8005ad8 <DMA2D_ConvertColor>
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	2001f8b4 	.word	0x2001f8b4

08005d08 <LCD_MixColorsBulk>:
  * @param  ySize
  * @param  Intens
  * @retval None
  */
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  int32_t y;

  GUI_USE_PARA(OffFG);
  GUI_USE_PARA(OffDest);
  for (y = 0; y < ySize; y++)
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e030      	b.n	8005d7e <LCD_MixColorsBulk+0x76>
  {
    /* Invert alpha values */
    InvertAlpha(pFG, aBuffer_FG, xSize);
 8005d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1e:	491c      	ldr	r1, [pc, #112]	; (8005d90 <LCD_MixColorsBulk+0x88>)
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff fe25 	bl	8005970 <InvertAlpha>
    InvertAlpha(pBG, aBuffer_BG, xSize);
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	491a      	ldr	r1, [pc, #104]	; (8005d94 <LCD_MixColorsBulk+0x8c>)
 8005d2a:	68b8      	ldr	r0, [r7, #8]
 8005d2c:	f7ff fe20 	bl	8005970 <InvertAlpha>

    DMA2D_MixColorsBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, Intens, xSize);
 8005d30:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <LCD_MixColorsBulk+0x90>)
 8005d3c:	4915      	ldr	r1, [pc, #84]	; (8005d94 <LCD_MixColorsBulk+0x8c>)
 8005d3e:	4814      	ldr	r0, [pc, #80]	; (8005d90 <LCD_MixColorsBulk+0x88>)
 8005d40:	f7ff ff48 	bl	8005bd4 <DMA2D_MixColorsBulk>

    InvertAlpha(aBufferDMA2D, pDst, xSize);
 8005d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4813      	ldr	r0, [pc, #76]	; (8005d98 <LCD_MixColorsBulk+0x90>)
 8005d4a:	f7ff fe11 	bl	8005970 <InvertAlpha>
    pFG  += xSize + OffFG;
 8005d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    pBG  += xSize + OffBG;
 8005d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	4413      	add	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
    pDst += xSize + OffDest;
 8005d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	607b      	str	r3, [r7, #4]
  for (y = 0; y < ySize; y++)
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d3ca      	bcc.n	8005d1c <LCD_MixColorsBulk+0x14>
  }
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200207b4 	.word	0x200207b4
 8005d94:	200216b4 	.word	0x200216b4
 8005d98:	2001f8b4 	.word	0x2001f8b4

08005d9c <DMA2D_DrawBitmapL8>:
  * @param  xSize
  * @param  ySize
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  uint32_t OffSrc, uint32_t OffDst, uint32_t PixelFormatDst, uint32_t xSize, uint32_t ySize)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dac:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8005db0:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 8005dbe:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8005dc4:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dcc:	2205      	movs	r2, #5
 8005dce:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | ySize;      /* Number of Line Register (Size configuration of area to be transfered) */
 8005dd6:	490c      	ldr	r1, [pc, #48]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	041a      	lsls	r2, r3, #16
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Start operation */
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005dee:	bf00      	nop
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f9      	bne.n	8005df0 <DMA2D_DrawBitmapL8+0x54>
  {
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	4002b000 	.word	0x4002b000

08005e0c <BSP_LCD_DrawBitmap16bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap16bpp(int32_t LayerIndex, int32_t x, int32_t y, U16 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8005e0c:	b5b0      	push	{r4, r5, r7, lr}
 8005e0e:	b08c      	sub	sp, #48	; 0x30
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fbc5 	bl	80055ac <GetBufferSize>
 8005e22:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8005e24:	492c      	ldr	r1, [pc, #176]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461c      	mov	r4, r3
 8005e36:	4928      	ldr	r1, [pc, #160]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	330c      	adds	r3, #12
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	fb02 f203 	mul.w	r2, r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	18d1      	adds	r1, r2, r3
 8005e52:	4821      	ldr	r0, [pc, #132]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4403      	add	r3, r0
 8005e60:	3314      	adds	r3, #20
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fb03 f301 	mul.w	r3, r3, r1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	491b      	ldr	r1, [pc, #108]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3308      	adds	r3, #8
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	fb03 f302 	mul.w	r3, r3, r2
 8005e84:	4403      	add	r3, r0
 8005e86:	4423      	add	r3, r4
 8005e88:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	0fda      	lsrs	r2, r3, #31
 8005e8e:	4413      	add	r3, r2
 8005e90:	105b      	asrs	r3, r3, #1
 8005e92:	461a      	mov	r2, r3
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8005e9a:	490f      	ldr	r1, [pc, #60]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	69bc      	ldr	r4, [r7, #24]
 8005eb6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	6939      	ldr	r1, [r7, #16]
 8005ebe:	9102      	str	r1, [sp, #8]
 8005ec0:	9201      	str	r2, [sp, #4]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	f7ff fb01 	bl	80054d0 <DMA2D_CopyBuffer>
}
 8005ece:	bf00      	nop
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2001f898 	.word	0x2001f898

08005edc <BSP_LCD_DrawBitmap8bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap8bpp(int32_t LayerIndex, int32_t x, int32_t y, U8 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b08f      	sub	sp, #60	; 0x3c
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;
  uint32_t PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fb5d 	bl	80055ac <GetBufferSize>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8005ef4:	492c      	ldr	r1, [pc, #176]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461c      	mov	r4, r3
 8005f06:	4928      	ldr	r1, [pc, #160]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	330c      	adds	r3, #12
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	fb02 f203 	mul.w	r2, r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	18d1      	adds	r1, r2, r3
 8005f22:	4821      	ldr	r0, [pc, #132]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4613      	mov	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4403      	add	r3, r0
 8005f30:	3314      	adds	r3, #20
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	fb03 f301 	mul.w	r3, r3, r1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	491b      	ldr	r1, [pc, #108]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	3308      	adds	r3, #8
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	fb03 f302 	mul.w	r3, r3, r2
 8005f54:	4403      	add	r3, r0
 8005f56:	4423      	add	r3, r4
 8005f58:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8005f62:	4911      	ldr	r1, [pc, #68]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	330c      	adds	r3, #12
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	61bb      	str	r3, [r7, #24]
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fa4b 	bl	8005418 <LCD_LL_GetPixelformat>
 8005f82:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	69f8      	ldr	r0, [r7, #28]
 8005f88:	69bc      	ldr	r4, [r7, #24]
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f8e:	9202      	str	r2, [sp, #8]
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4623      	mov	r3, r4
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6838      	ldr	r0, [r7, #0]
 8005f9c:	f7ff fefe 	bl	8005d9c <DMA2D_DrawBitmapL8>
}
 8005fa0:	bf00      	nop
 8005fa2:	372c      	adds	r7, #44	; 0x2c
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}
 8005fa8:	2001f898 	.word	0x2001f898

08005fac <graphicsMain>:
pPoint[2].y = size;
GUI_AA_FillPolygon(pPoint, 3, x, y);
}

void graphicsMain(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
	GUI_DispStringInRectWrap("Hello from rectangle, my name is STM32F4 and I love C programming", &pRect, GUI_TA_VCENTER |
	GUI_TA_HCENTER, GUI_WRAPMODE_WORD);

	GUI_SetColor(GUI_DARKMAGENTA);
	DrawPlay(40, 220, 50);*/
	GUI_Clear();
 8005fb2:	f003 fdc1 	bl	8009b38 <GUI_Clear>
	GUI_DrawBitmap(&bmfunnyCat, 0, 0);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4817      	ldr	r0, [pc, #92]	; (8006018 <graphicsMain+0x6c>)
 8005fbc:	f003 fc66 	bl	800988c <GUI_DrawBitmap>
	uint8_t onChange = 0, pic = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73bb      	strb	r3, [r7, #14]
	GUI_AA_FillCircle(200,200,40);
	*/
	tp_state_t tpState;
	while (1)
	{
		TP_GetState(&tpState);
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fbce 	bl	800776c <TP_GetState>
		if (tpState.touchDetected)
 8005fd0:	793b      	ldrb	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <graphicsMain+0x2e>
		{
			onChange = 1;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
		}
		if (onChange)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f3      	beq.n	8005fc8 <graphicsMain+0x1c>
		{
			pic = !pic;
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	73bb      	strb	r3, [r7, #14]
			if (pic)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <graphicsMain+0x54>
			{
				GUI_DrawBitmap(&bmfunnyCat, 0, 0);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4807      	ldr	r0, [pc, #28]	; (8006018 <graphicsMain+0x6c>)
 8005ffa:	f003 fc47 	bl	800988c <GUI_DrawBitmap>
 8005ffe:	e004      	b.n	800600a <graphicsMain+0x5e>
			}
			else
			{
				GUI_DrawBitmap(&bmtiger, 0, 0);
 8006000:	2200      	movs	r2, #0
 8006002:	2100      	movs	r1, #0
 8006004:	4805      	ldr	r0, [pc, #20]	; (800601c <graphicsMain+0x70>)
 8006006:	f003 fc41 	bl	800988c <GUI_DrawBitmap>
			}
			onChange = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
			GUI_Delay(40);
 800600e:	2028      	movs	r0, #40	; 0x28
 8006010:	f003 f9b4 	bl	800937c <GUI_Delay>
		TP_GetState(&tpState);
 8006014:	e7d8      	b.n	8005fc8 <graphicsMain+0x1c>
 8006016:	bf00      	nop
 8006018:	0804764c 	.word	0x0804764c
 800601c:	0807fa78 	.word	0x0807fa78

08006020 <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8006024:	20ca      	movs	r0, #202	; 0xca
 8006026:	f000 f943 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 800602a:	20c3      	movs	r0, #195	; 0xc3
 800602c:	f000 f96a 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x08);
 8006030:	2008      	movs	r0, #8
 8006032:	f000 f967 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x50);
 8006036:	2050      	movs	r0, #80	; 0x50
 8006038:	f000 f964 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 800603c:	20cf      	movs	r0, #207	; 0xcf
 800603e:	f000 f937 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8006042:	2000      	movs	r0, #0
 8006044:	f000 f95e 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8006048:	20c1      	movs	r0, #193	; 0xc1
 800604a:	f000 f95b 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x30);
 800604e:	2030      	movs	r0, #48	; 0x30
 8006050:	f000 f958 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8006054:	20ed      	movs	r0, #237	; 0xed
 8006056:	f000 f92b 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 800605a:	2064      	movs	r0, #100	; 0x64
 800605c:	f000 f952 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x03);
 8006060:	2003      	movs	r0, #3
 8006062:	f000 f94f 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x12);
 8006066:	2012      	movs	r0, #18
 8006068:	f000 f94c 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x81);
 800606c:	2081      	movs	r0, #129	; 0x81
 800606e:	f000 f949 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 8006072:	20e8      	movs	r0, #232	; 0xe8
 8006074:	f000 f91c 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8006078:	2085      	movs	r0, #133	; 0x85
 800607a:	f000 f943 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 800607e:	2000      	movs	r0, #0
 8006080:	f000 f940 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x78);
 8006084:	2078      	movs	r0, #120	; 0x78
 8006086:	f000 f93d 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 800608a:	20cb      	movs	r0, #203	; 0xcb
 800608c:	f000 f910 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8006090:	2039      	movs	r0, #57	; 0x39
 8006092:	f000 f937 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8006096:	202c      	movs	r0, #44	; 0x2c
 8006098:	f000 f934 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 800609c:	2000      	movs	r0, #0
 800609e:	f000 f931 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x34);
 80060a2:	2034      	movs	r0, #52	; 0x34
 80060a4:	f000 f92e 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x02);
 80060a8:	2002      	movs	r0, #2
 80060aa:	f000 f92b 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 80060ae:	20f7      	movs	r0, #247	; 0xf7
 80060b0:	f000 f8fe 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 80060b4:	2020      	movs	r0, #32
 80060b6:	f000 f925 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 80060ba:	20ea      	movs	r0, #234	; 0xea
 80060bc:	f000 f8f8 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80060c0:	2000      	movs	r0, #0
 80060c2:	f000 f91f 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 80060c6:	2000      	movs	r0, #0
 80060c8:	f000 f91c 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 80060cc:	20b1      	movs	r0, #177	; 0xb1
 80060ce:	f000 f8ef 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80060d2:	2000      	movs	r0, #0
 80060d4:	f000 f916 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80060d8:	201b      	movs	r0, #27
 80060da:	f000 f913 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 80060de:	20b6      	movs	r0, #182	; 0xb6
 80060e0:	f000 f8e6 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80060e4:	200a      	movs	r0, #10
 80060e6:	f000 f90d 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0xA2);
 80060ea:	20a2      	movs	r0, #162	; 0xa2
 80060ec:	f000 f90a 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 80060f0:	20c0      	movs	r0, #192	; 0xc0
 80060f2:	f000 f8dd 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80060f6:	2010      	movs	r0, #16
 80060f8:	f000 f904 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 80060fc:	20c1      	movs	r0, #193	; 0xc1
 80060fe:	f000 f8d7 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8006102:	2010      	movs	r0, #16
 8006104:	f000 f8fe 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8006108:	20c5      	movs	r0, #197	; 0xc5
 800610a:	f000 f8d1 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 800610e:	2045      	movs	r0, #69	; 0x45
 8006110:	f000 f8f8 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x15);
 8006114:	2015      	movs	r0, #21
 8006116:	f000 f8f5 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 800611a:	20c7      	movs	r0, #199	; 0xc7
 800611c:	f000 f8c8 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8006120:	2090      	movs	r0, #144	; 0x90
 8006122:	f000 f8ef 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8006126:	2036      	movs	r0, #54	; 0x36
 8006128:	f000 f8c2 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 800612c:	20c8      	movs	r0, #200	; 0xc8
 800612e:	f000 f8e9 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8006132:	20f2      	movs	r0, #242	; 0xf2
 8006134:	f000 f8bc 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8006138:	2000      	movs	r0, #0
 800613a:	f000 f8e3 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 800613e:	20b0      	movs	r0, #176	; 0xb0
 8006140:	f000 f8b6 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8006144:	20c2      	movs	r0, #194	; 0xc2
 8006146:	f000 f8dd 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 800614a:	20b6      	movs	r0, #182	; 0xb6
 800614c:	f000 f8b0 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8006150:	200a      	movs	r0, #10
 8006152:	f000 f8d7 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0xA7);
 8006156:	20a7      	movs	r0, #167	; 0xa7
 8006158:	f000 f8d4 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x27);
 800615c:	2027      	movs	r0, #39	; 0x27
 800615e:	f000 f8d1 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x04);
 8006162:	2004      	movs	r0, #4
 8006164:	f000 f8ce 	bl	8006304 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8006168:	202a      	movs	r0, #42	; 0x2a
 800616a:	f000 f8a1 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800616e:	2000      	movs	r0, #0
 8006170:	f000 f8c8 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 8006174:	2000      	movs	r0, #0
 8006176:	f000 f8c5 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 800617a:	2000      	movs	r0, #0
 800617c:	f000 f8c2 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8006180:	20ef      	movs	r0, #239	; 0xef
 8006182:	f000 f8bf 	bl	8006304 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8006186:	202b      	movs	r0, #43	; 0x2b
 8006188:	f000 f892 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800618c:	2000      	movs	r0, #0
 800618e:	f000 f8b9 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 8006192:	2000      	movs	r0, #0
 8006194:	f000 f8b6 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x01);
 8006198:	2001      	movs	r0, #1
 800619a:	f000 f8b3 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x3F);
 800619e:	203f      	movs	r0, #63	; 0x3f
 80061a0:	f000 f8b0 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 80061a4:	20f6      	movs	r0, #246	; 0xf6
 80061a6:	f000 f883 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f000 f8aa 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 80061b0:	2000      	movs	r0, #0
 80061b2:	f000 f8a7 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x06);
 80061b6:	2006      	movs	r0, #6
 80061b8:	f000 f8a4 	bl	8006304 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 80061bc:	202c      	movs	r0, #44	; 0x2c
 80061be:	f000 f877 	bl	80062b0 <LCD_WriteCommand>
	HAL_Delay(100);
 80061c2:	2064      	movs	r0, #100	; 0x64
 80061c4:	f7fa fa0c 	bl	80005e0 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 80061c8:	2026      	movs	r0, #38	; 0x26
 80061ca:	f000 f871 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80061ce:	2001      	movs	r0, #1
 80061d0:	f000 f898 	bl	8006304 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 80061d4:	20e0      	movs	r0, #224	; 0xe0
 80061d6:	f000 f86b 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80061da:	200f      	movs	r0, #15
 80061dc:	f000 f892 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x29);
 80061e0:	2029      	movs	r0, #41	; 0x29
 80061e2:	f000 f88f 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x24);
 80061e6:	2024      	movs	r0, #36	; 0x24
 80061e8:	f000 f88c 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80061ec:	200c      	movs	r0, #12
 80061ee:	f000 f889 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80061f2:	200e      	movs	r0, #14
 80061f4:	f000 f886 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x09);
 80061f8:	2009      	movs	r0, #9
 80061fa:	f000 f883 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x4E);
 80061fe:	204e      	movs	r0, #78	; 0x4e
 8006200:	f000 f880 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x78);
 8006204:	2078      	movs	r0, #120	; 0x78
 8006206:	f000 f87d 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x3C);
 800620a:	203c      	movs	r0, #60	; 0x3c
 800620c:	f000 f87a 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x09);
 8006210:	2009      	movs	r0, #9
 8006212:	f000 f877 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x13);
 8006216:	2013      	movs	r0, #19
 8006218:	f000 f874 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x05);
 800621c:	2005      	movs	r0, #5
 800621e:	f000 f871 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x17);
 8006222:	2017      	movs	r0, #23
 8006224:	f000 f86e 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x11);
 8006228:	2011      	movs	r0, #17
 800622a:	f000 f86b 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x00);
 800622e:	2000      	movs	r0, #0
 8006230:	f000 f868 	bl	8006304 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8006234:	20e1      	movs	r0, #225	; 0xe1
 8006236:	f000 f83b 	bl	80062b0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800623a:	2000      	movs	r0, #0
 800623c:	f000 f862 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x16);
 8006240:	2016      	movs	r0, #22
 8006242:	f000 f85f 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8006246:	201b      	movs	r0, #27
 8006248:	f000 f85c 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x04);
 800624c:	2004      	movs	r0, #4
 800624e:	f000 f859 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x11);
 8006252:	2011      	movs	r0, #17
 8006254:	f000 f856 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x07);
 8006258:	2007      	movs	r0, #7
 800625a:	f000 f853 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x31);
 800625e:	2031      	movs	r0, #49	; 0x31
 8006260:	f000 f850 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x33);
 8006264:	2033      	movs	r0, #51	; 0x33
 8006266:	f000 f84d 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x42);
 800626a:	2042      	movs	r0, #66	; 0x42
 800626c:	f000 f84a 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x05);
 8006270:	2005      	movs	r0, #5
 8006272:	f000 f847 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8006276:	200c      	movs	r0, #12
 8006278:	f000 f844 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x0A);
 800627c:	200a      	movs	r0, #10
 800627e:	f000 f841 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x28);
 8006282:	2028      	movs	r0, #40	; 0x28
 8006284:	f000 f83e 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8006288:	202f      	movs	r0, #47	; 0x2f
 800628a:	f000 f83b 	bl	8006304 <LCD_WriteData>
	LCD_WriteData(0x0F);
 800628e:	200f      	movs	r0, #15
 8006290:	f000 f838 	bl	8006304 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8006294:	2011      	movs	r0, #17
 8006296:	f000 f80b 	bl	80062b0 <LCD_WriteCommand>
	HAL_Delay(100);
 800629a:	2064      	movs	r0, #100	; 0x64
 800629c:	f7fa f9a0 	bl	80005e0 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 80062a0:	2029      	movs	r0, #41	; 0x29
 80062a2:	f000 f805 	bl	80062b0 <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 80062a6:	202c      	movs	r0, #44	; 0x2c
 80062a8:	f000 f802 	bl	80062b0 <LCD_WriteCommand>
}
 80062ac:	bf00      	nop
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	733b      	strb	r3, [r7, #12]
 80062be:	2300      	movs	r3, #0
 80062c0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80062c2:	2200      	movs	r2, #0
 80062c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062c8:	480b      	ldr	r0, [pc, #44]	; (80062f8 <LCD_WriteCommand+0x48>)
 80062ca:	f7fb fa69 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 80062ce:	2200      	movs	r2, #0
 80062d0:	2104      	movs	r1, #4
 80062d2:	480a      	ldr	r0, [pc, #40]	; (80062fc <LCD_WriteCommand+0x4c>)
 80062d4:	f7fb fa64 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 80062d8:	f107 010c 	add.w	r1, r7, #12
 80062dc:	2364      	movs	r3, #100	; 0x64
 80062de:	2201      	movs	r2, #1
 80062e0:	4807      	ldr	r0, [pc, #28]	; (8006300 <LCD_WriteCommand+0x50>)
 80062e2:	f7fd feb3 	bl	800404c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80062e6:	2201      	movs	r2, #1
 80062e8:	2104      	movs	r1, #4
 80062ea:	4804      	ldr	r0, [pc, #16]	; (80062fc <LCD_WriteCommand+0x4c>)
 80062ec:	f7fb fa58 	bl	80017a0 <HAL_GPIO_WritePin>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40020c00 	.word	0x40020c00
 80062fc:	40020800 	.word	0x40020800
 8006300:	20022d60 	.word	0x20022d60

08006304 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	733b      	strb	r3, [r7, #12]
 8006312:	2300      	movs	r3, #0
 8006314:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8006316:	2201      	movs	r2, #1
 8006318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800631c:	480b      	ldr	r0, [pc, #44]	; (800634c <LCD_WriteData+0x48>)
 800631e:	f7fb fa3f 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8006322:	2200      	movs	r2, #0
 8006324:	2104      	movs	r1, #4
 8006326:	480a      	ldr	r0, [pc, #40]	; (8006350 <LCD_WriteData+0x4c>)
 8006328:	f7fb fa3a 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 800632c:	f107 010c 	add.w	r1, r7, #12
 8006330:	2364      	movs	r3, #100	; 0x64
 8006332:	2201      	movs	r2, #1
 8006334:	4807      	ldr	r0, [pc, #28]	; (8006354 <LCD_WriteData+0x50>)
 8006336:	f7fd fe89 	bl	800404c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800633a:	2201      	movs	r2, #1
 800633c:	2104      	movs	r1, #4
 800633e:	4804      	ldr	r0, [pc, #16]	; (8006350 <LCD_WriteData+0x4c>)
 8006340:	f7fb fa2e 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40020c00 	.word	0x40020c00
 8006350:	40020800 	.word	0x40020800
 8006354:	20022d60 	.word	0x20022d60

08006358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800635e:	f7fa f8cd 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006362:	f000 f82d 	bl	80063c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006366:	f000 fab5 	bl	80068d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800636a:	f000 fa43 	bl	80067f4 <MX_DMA_Init>
  MX_LTDC_Init();
 800636e:	f000 f923 	bl	80065b8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8006372:	f000 f9d7 	bl	8006724 <MX_SPI5_Init>
  MX_FMC_Init();
 8006376:	f000 fa65 	bl	8006844 <MX_FMC_Init>
  MX_DMA2D_Init();
 800637a:	f000 f8ab 	bl	80064d4 <MX_DMA2D_Init>
  MX_I2C3_Init();
 800637e:	f000 f8db 	bl	8006538 <MX_I2C3_Init>
  MX_TIM6_Init();
 8006382:	f000 fa05 	bl	8006790 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8006386:	480c      	ldr	r0, [pc, #48]	; (80063b8 <main+0x60>)
 8006388:	f000 fb5a 	bl	8006a40 <SDRAM_init>
  TP_Config();
 800638c:	f001 f95a 	bl	8007644 <TP_Config>

  __HAL_RCC_CRC_CLK_ENABLE();
 8006390:	2300      	movs	r3, #0
 8006392:	607b      	str	r3, [r7, #4]
 8006394:	4a09      	ldr	r2, [pc, #36]	; (80063bc <main+0x64>)
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <main+0x64>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800639e:	6313      	str	r3, [r2, #48]	; 0x30
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <main+0x64>)
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
  GUI_Init();
 80063ac:	f003 fbfe 	bl	8009bac <GUI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  graphicsMain();
 80063b0:	f7ff fdfc 	bl	8005fac <graphicsMain>
  while (1)
 80063b4:	e7fe      	b.n	80063b4 <main+0x5c>
 80063b6:	bf00      	nop
 80063b8:	20022e34 	.word	0x20022e34
 80063bc:	40023800 	.word	0x40023800

080063c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b0a0      	sub	sp, #128	; 0x80
 80063c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80063ca:	2230      	movs	r2, #48	; 0x30
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f008 ff21 	bl	800f216 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063e4:	f107 030c 	add.w	r3, r7, #12
 80063e8:	2230      	movs	r2, #48	; 0x30
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f008 ff12 	bl	800f216 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	4a35      	ldr	r2, [pc, #212]	; (80064cc <SystemClock_Config+0x10c>)
 80063f8:	4b34      	ldr	r3, [pc, #208]	; (80064cc <SystemClock_Config+0x10c>)
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6413      	str	r3, [r2, #64]	; 0x40
 8006402:	4b32      	ldr	r3, [pc, #200]	; (80064cc <SystemClock_Config+0x10c>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800640e:	2300      	movs	r3, #0
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	4a2f      	ldr	r2, [pc, #188]	; (80064d0 <SystemClock_Config+0x110>)
 8006414:	4b2e      	ldr	r3, [pc, #184]	; (80064d0 <SystemClock_Config+0x110>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <SystemClock_Config+0x110>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800642a:	2302      	movs	r3, #2
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800642e:	2301      	movs	r3, #1
 8006430:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006432:	2310      	movs	r3, #16
 8006434:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006436:	2302      	movs	r3, #2
 8006438:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800643a:	2300      	movs	r3, #0
 800643c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800643e:	2308      	movs	r3, #8
 8006440:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006442:	23b4      	movs	r3, #180	; 0xb4
 8006444:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006446:	2302      	movs	r3, #2
 8006448:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800644a:	2304      	movs	r3, #4
 800644c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800644e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006452:	4618      	mov	r0, r3
 8006454:	f7fc ff7a 	bl	800334c <HAL_RCC_OscConfig>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800645e:	f000 fae7 	bl	8006a30 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006462:	f7fc ff23 	bl	80032ac <HAL_PWREx_EnableOverDrive>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800646c:	f000 fae0 	bl	8006a30 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006470:	230f      	movs	r3, #15
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006474:	2302      	movs	r3, #2
 8006476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006478:	2300      	movs	r3, #0
 800647a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800647c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006480:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800648c:	2105      	movs	r1, #5
 800648e:	4618      	mov	r0, r3
 8006490:	f7fd f99e 	bl	80037d0 <HAL_RCC_ClockConfig>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800649a:	f000 fac9 	bl	8006a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800649e:	2308      	movs	r3, #8
 80064a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80064a2:	233c      	movs	r3, #60	; 0x3c
 80064a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80064a6:	2302      	movs	r3, #2
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80064aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fd fb43 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80064c0:	f000 fab6 	bl	8006a30 <Error_Handler>
  }
}
 80064c4:	bf00      	nop
 80064c6:	3780      	adds	r7, #128	; 0x80
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40023800 	.word	0x40023800
 80064d0:	40007000 	.word	0x40007000

080064d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064da:	4a16      	ldr	r2, [pc, #88]	; (8006534 <MX_DMA2D_Init+0x60>)
 80064dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80064de:	4b14      	ldr	r3, [pc, #80]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80064e4:	4b12      	ldr	r3, [pc, #72]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80064f0:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80064f6:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <MX_DMA2D_Init+0x5c>)
 80064fe:	2201      	movs	r2, #1
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <MX_DMA2D_Init+0x5c>)
 8006504:	2200      	movs	r2, #0
 8006506:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006508:	4809      	ldr	r0, [pc, #36]	; (8006530 <MX_DMA2D_Init+0x5c>)
 800650a:	f7fa fca7 	bl	8000e5c <HAL_DMA2D_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8006514:	f000 fa8c 	bl	8006a30 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006518:	2101      	movs	r1, #1
 800651a:	4805      	ldr	r0, [pc, #20]	; (8006530 <MX_DMA2D_Init+0x5c>)
 800651c:	f7fa fdf8 	bl	8001110 <HAL_DMA2D_ConfigLayer>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006526:	f000 fa83 	bl	8006a30 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20022df4 	.word	0x20022df4
 8006534:	4002b000 	.word	0x4002b000

08006538 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <MX_I2C3_Init+0x74>)
 800653e:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <MX_I2C3_Init+0x78>)
 8006540:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <MX_I2C3_Init+0x74>)
 8006544:	4a1b      	ldr	r2, [pc, #108]	; (80065b4 <MX_I2C3_Init+0x7c>)
 8006546:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006548:	4b18      	ldr	r3, [pc, #96]	; (80065ac <MX_I2C3_Init+0x74>)
 800654a:	2200      	movs	r2, #0
 800654c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <MX_I2C3_Init+0x74>)
 8006550:	2282      	movs	r2, #130	; 0x82
 8006552:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006554:	4b15      	ldr	r3, [pc, #84]	; (80065ac <MX_I2C3_Init+0x74>)
 8006556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800655a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <MX_I2C3_Init+0x74>)
 800655e:	2200      	movs	r2, #0
 8006560:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <MX_I2C3_Init+0x74>)
 8006564:	2200      	movs	r2, #0
 8006566:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006568:	4b10      	ldr	r3, [pc, #64]	; (80065ac <MX_I2C3_Init+0x74>)
 800656a:	2200      	movs	r2, #0
 800656c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <MX_I2C3_Init+0x74>)
 8006570:	2200      	movs	r2, #0
 8006572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <MX_I2C3_Init+0x74>)
 8006576:	f7fb f92d 	bl	80017d4 <HAL_I2C_Init>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006580:	f000 fa56 	bl	8006a30 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006584:	2100      	movs	r1, #0
 8006586:	4809      	ldr	r0, [pc, #36]	; (80065ac <MX_I2C3_Init+0x74>)
 8006588:	f7fc f839 	bl	80025fe <HAL_I2CEx_ConfigAnalogFilter>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006592:	f000 fa4d 	bl	8006a30 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006596:	2100      	movs	r1, #0
 8006598:	4804      	ldr	r0, [pc, #16]	; (80065ac <MX_I2C3_Init+0x74>)
 800659a:	f7fc f86c 	bl	8002676 <HAL_I2CEx_ConfigDigitalFilter>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80065a4:	f000 fa44 	bl	8006a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80065a8:	bf00      	nop
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20022cac 	.word	0x20022cac
 80065b0:	40005c00 	.word	0x40005c00
 80065b4:	000186a0 	.word	0x000186a0

080065b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b09a      	sub	sp, #104	; 0x68
 80065bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80065be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065c2:	2234      	movs	r2, #52	; 0x34
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f008 fe25 	bl	800f216 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80065cc:	463b      	mov	r3, r7
 80065ce:	2234      	movs	r2, #52	; 0x34
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f008 fe1f 	bl	800f216 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80065d8:	4b50      	ldr	r3, [pc, #320]	; (800671c <MX_LTDC_Init+0x164>)
 80065da:	4a51      	ldr	r2, [pc, #324]	; (8006720 <MX_LTDC_Init+0x168>)
 80065dc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80065de:	4b4f      	ldr	r3, [pc, #316]	; (800671c <MX_LTDC_Init+0x164>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80065e4:	4b4d      	ldr	r3, [pc, #308]	; (800671c <MX_LTDC_Init+0x164>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80065ea:	4b4c      	ldr	r3, [pc, #304]	; (800671c <MX_LTDC_Init+0x164>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80065f0:	4b4a      	ldr	r3, [pc, #296]	; (800671c <MX_LTDC_Init+0x164>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 80065f6:	4b49      	ldr	r3, [pc, #292]	; (800671c <MX_LTDC_Init+0x164>)
 80065f8:	2208      	movs	r2, #8
 80065fa:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80065fc:	4b47      	ldr	r3, [pc, #284]	; (800671c <MX_LTDC_Init+0x164>)
 80065fe:	2200      	movs	r2, #0
 8006600:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8006602:	4b46      	ldr	r3, [pc, #280]	; (800671c <MX_LTDC_Init+0x164>)
 8006604:	221d      	movs	r2, #29
 8006606:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8006608:	4b44      	ldr	r3, [pc, #272]	; (800671c <MX_LTDC_Init+0x164>)
 800660a:	2203      	movs	r2, #3
 800660c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800660e:	4b43      	ldr	r3, [pc, #268]	; (800671c <MX_LTDC_Init+0x164>)
 8006610:	f240 120d 	movw	r2, #269	; 0x10d
 8006614:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8006616:	4b41      	ldr	r3, [pc, #260]	; (800671c <MX_LTDC_Init+0x164>)
 8006618:	f240 1243 	movw	r2, #323	; 0x143
 800661c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800661e:	4b3f      	ldr	r3, [pc, #252]	; (800671c <MX_LTDC_Init+0x164>)
 8006620:	f240 1217 	movw	r2, #279	; 0x117
 8006624:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8006626:	4b3d      	ldr	r3, [pc, #244]	; (800671c <MX_LTDC_Init+0x164>)
 8006628:	f240 1247 	movw	r2, #327	; 0x147
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800662e:	4b3b      	ldr	r3, [pc, #236]	; (800671c <MX_LTDC_Init+0x164>)
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006636:	4b39      	ldr	r3, [pc, #228]	; (800671c <MX_LTDC_Init+0x164>)
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800663e:	4b37      	ldr	r3, [pc, #220]	; (800671c <MX_LTDC_Init+0x164>)
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006646:	4835      	ldr	r0, [pc, #212]	; (800671c <MX_LTDC_Init+0x164>)
 8006648:	f7fc f854 	bl	80026f4 <HAL_LTDC_Init>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8006652:	f000 f9ed 	bl	8006a30 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 800665a:	23f0      	movs	r3, #240	; 0xf0
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8006662:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006666:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006668:	2300      	movs	r3, #0
 800666a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 800666c:	23ff      	movs	r3, #255	; 0xff
 800666e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006674:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006678:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800667a:	2307      	movs	r3, #7
 800667c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8006682:	23f0      	movs	r3, #240	; 0xf0
 8006684:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8006686:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800668a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800669e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066a2:	2200      	movs	r2, #0
 80066a4:	4619      	mov	r1, r3
 80066a6:	481d      	ldr	r0, [pc, #116]	; (800671c <MX_LTDC_Init+0x164>)
 80066a8:	f7fc f9c8 	bl	8002a3c <HAL_LTDC_ConfigLayer>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 80066b2:	f000 f9bd 	bl	8006a30 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 80066ba:	23f0      	movs	r3, #240	; 0xf0
 80066bc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 80066c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80066c6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 80066c8:	2303      	movs	r3, #3
 80066ca:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80066d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80066da:	2305      	movs	r3, #5
 80066dc:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 80066e2:	23f0      	movs	r3, #240	; 0xf0
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 80066e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80066fe:	463b      	mov	r3, r7
 8006700:	2201      	movs	r2, #1
 8006702:	4619      	mov	r1, r3
 8006704:	4805      	ldr	r0, [pc, #20]	; (800671c <MX_LTDC_Init+0x164>)
 8006706:	f7fc f999 	bl	8002a3c <HAL_LTDC_ConfigLayer>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8006710:	f000 f98e 	bl	8006a30 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006714:	bf00      	nop
 8006716:	3768      	adds	r7, #104	; 0x68
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20022ba4 	.word	0x20022ba4
 8006720:	40016800 	.word	0x40016800

08006724 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <MX_SPI5_Init+0x64>)
 800672a:	4a18      	ldr	r2, [pc, #96]	; (800678c <MX_SPI5_Init+0x68>)
 800672c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800672e:	4b16      	ldr	r3, [pc, #88]	; (8006788 <MX_SPI5_Init+0x64>)
 8006730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006734:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <MX_SPI5_Init+0x64>)
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800673c:	4b12      	ldr	r3, [pc, #72]	; (8006788 <MX_SPI5_Init+0x64>)
 800673e:	2200      	movs	r2, #0
 8006740:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006742:	4b11      	ldr	r3, [pc, #68]	; (8006788 <MX_SPI5_Init+0x64>)
 8006744:	2200      	movs	r2, #0
 8006746:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <MX_SPI5_Init+0x64>)
 800674a:	2200      	movs	r2, #0
 800674c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <MX_SPI5_Init+0x64>)
 8006750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006754:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <MX_SPI5_Init+0x64>)
 8006758:	2218      	movs	r2, #24
 800675a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <MX_SPI5_Init+0x64>)
 800675e:	2200      	movs	r2, #0
 8006760:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <MX_SPI5_Init+0x64>)
 8006764:	2200      	movs	r2, #0
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <MX_SPI5_Init+0x64>)
 800676a:	2200      	movs	r2, #0
 800676c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <MX_SPI5_Init+0x64>)
 8006770:	220a      	movs	r2, #10
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006774:	4804      	ldr	r0, [pc, #16]	; (8006788 <MX_SPI5_Init+0x64>)
 8006776:	f7fd fc06 	bl	8003f86 <HAL_SPI_Init>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8006780:	f000 f956 	bl	8006a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006784:	bf00      	nop
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20022d60 	.word	0x20022d60
 800678c:	40015000 	.word	0x40015000

08006790 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006796:	463b      	mov	r3, r7
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800679e:	4b13      	ldr	r3, [pc, #76]	; (80067ec <MX_TIM6_Init+0x5c>)
 80067a0:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <MX_TIM6_Init+0x60>)
 80067a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <MX_TIM6_Init+0x5c>)
 80067a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80067aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <MX_TIM6_Init+0x5c>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 80067b2:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <MX_TIM6_Init+0x5c>)
 80067b4:	22c8      	movs	r2, #200	; 0xc8
 80067b6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80067b8:	480c      	ldr	r0, [pc, #48]	; (80067ec <MX_TIM6_Init+0x5c>)
 80067ba:	f7fd fe09 	bl	80043d0 <HAL_TIM_Base_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80067c4:	f000 f934 	bl	8006a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80067c8:	2310      	movs	r3, #16
 80067ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80067d0:	463b      	mov	r3, r7
 80067d2:	4619      	mov	r1, r3
 80067d4:	4805      	ldr	r0, [pc, #20]	; (80067ec <MX_TIM6_Init+0x5c>)
 80067d6:	f7fe f80b 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 80067e0:	f000 f926 	bl	8006a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20022db8 	.word	0x20022db8
 80067f0:	40001000 	.word	0x40001000

080067f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <MX_DMA_Init+0x4c>)
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <MX_DMA_Init+0x4c>)
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006808:	6313      	str	r3, [r2, #48]	; 0x30
 800680a:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <MX_DMA_Init+0x4c>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8006816:	2200      	movs	r2, #0
 8006818:	2100      	movs	r1, #0
 800681a:	200d      	movs	r0, #13
 800681c:	f7f9 fff1 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8006820:	200d      	movs	r0, #13
 8006822:	f7fa f80a 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	200f      	movs	r0, #15
 800682c:	f7f9 ffe9 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006830:	200f      	movs	r0, #15
 8006832:	f7fa f802 	bl	800083a <HAL_NVIC_EnableIRQ>

}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800

08006844 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800684a:	4b20      	ldr	r3, [pc, #128]	; (80068cc <MX_FMC_Init+0x88>)
 800684c:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <MX_FMC_Init+0x8c>)
 800684e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006850:	4b1e      	ldr	r3, [pc, #120]	; (80068cc <MX_FMC_Init+0x88>)
 8006852:	2201      	movs	r2, #1
 8006854:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006856:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <MX_FMC_Init+0x88>)
 8006858:	2200      	movs	r2, #0
 800685a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800685c:	4b1b      	ldr	r3, [pc, #108]	; (80068cc <MX_FMC_Init+0x88>)
 800685e:	2204      	movs	r2, #4
 8006860:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006862:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <MX_FMC_Init+0x88>)
 8006864:	2210      	movs	r2, #16
 8006866:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006868:	4b18      	ldr	r3, [pc, #96]	; (80068cc <MX_FMC_Init+0x88>)
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800686e:	4b17      	ldr	r3, [pc, #92]	; (80068cc <MX_FMC_Init+0x88>)
 8006870:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006874:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006876:	4b15      	ldr	r3, [pc, #84]	; (80068cc <MX_FMC_Init+0x88>)
 8006878:	2200      	movs	r2, #0
 800687a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800687c:	4b13      	ldr	r3, [pc, #76]	; (80068cc <MX_FMC_Init+0x88>)
 800687e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006882:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006884:	4b11      	ldr	r3, [pc, #68]	; (80068cc <MX_FMC_Init+0x88>)
 8006886:	2200      	movs	r2, #0
 8006888:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <MX_FMC_Init+0x88>)
 800688c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006892:	2302      	movs	r3, #2
 8006894:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006896:	2307      	movs	r3, #7
 8006898:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800689a:	2304      	movs	r3, #4
 800689c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800689e:	2307      	movs	r3, #7
 80068a0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80068a2:	2303      	movs	r3, #3
 80068a4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80068a6:	2302      	movs	r3, #2
 80068a8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80068aa:	2302      	movs	r3, #2
 80068ac:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4806      	ldr	r0, [pc, #24]	; (80068cc <MX_FMC_Init+0x88>)
 80068b4:	f7fd fae8 	bl	8003e88 <HAL_SDRAM_Init>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 80068be:	f000 f8b7 	bl	8006a30 <Error_Handler>
  }

}
 80068c2:	bf00      	nop
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20022e34 	.word	0x20022e34
 80068d0:	a0000140 	.word	0xa0000140

080068d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068da:	f107 031c 	add.w	r3, r7, #28
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	605a      	str	r2, [r3, #4]
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	4a4c      	ldr	r2, [pc, #304]	; (8006a20 <MX_GPIO_Init+0x14c>)
 80068f0:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <MX_GPIO_Init+0x14c>)
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	f043 0320 	orr.w	r3, r3, #32
 80068f8:	6313      	str	r3, [r2, #48]	; 0x30
 80068fa:	4b49      	ldr	r3, [pc, #292]	; (8006a20 <MX_GPIO_Init+0x14c>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	4a45      	ldr	r2, [pc, #276]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800690c:	4b44      	ldr	r3, [pc, #272]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	f043 0304 	orr.w	r3, r3, #4
 8006914:	6313      	str	r3, [r2, #48]	; 0x30
 8006916:	4b42      	ldr	r3, [pc, #264]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	4a3e      	ldr	r2, [pc, #248]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006928:	4b3d      	ldr	r3, [pc, #244]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	6313      	str	r3, [r2, #48]	; 0x30
 8006932:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	4a37      	ldr	r2, [pc, #220]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006944:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	f043 0302 	orr.w	r3, r3, #2
 800694c:	6313      	str	r3, [r2, #48]	; 0x30
 800694e:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	4a30      	ldr	r2, [pc, #192]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006960:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006968:	6313      	str	r3, [r2, #48]	; 0x30
 800696a:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006976:	2300      	movs	r3, #0
 8006978:	607b      	str	r3, [r7, #4]
 800697a:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800697c:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	f043 0310 	orr.w	r3, r3, #16
 8006984:	6313      	str	r3, [r2, #48]	; 0x30
 8006986:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	4a22      	ldr	r2, [pc, #136]	; (8006a20 <MX_GPIO_Init+0x14c>)
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <MX_GPIO_Init+0x14c>)
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	f043 0308 	orr.w	r3, r3, #8
 80069a0:	6313      	str	r3, [r2, #48]	; 0x30
 80069a2:	4b1f      	ldr	r3, [pc, #124]	; (8006a20 <MX_GPIO_Init+0x14c>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80069ae:	2201      	movs	r2, #1
 80069b0:	2104      	movs	r1, #4
 80069b2:	481c      	ldr	r0, [pc, #112]	; (8006a24 <MX_GPIO_Init+0x150>)
 80069b4:	f7fa fef4 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80069b8:	2200      	movs	r2, #0
 80069ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069be:	481a      	ldr	r0, [pc, #104]	; (8006a28 <MX_GPIO_Init+0x154>)
 80069c0:	f7fa feee 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 80069c4:	2304      	movs	r3, #4
 80069c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069c8:	2301      	movs	r3, #1
 80069ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069d0:	2302      	movs	r3, #2
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 80069d4:	f107 031c 	add.w	r3, r7, #28
 80069d8:	4619      	mov	r1, r3
 80069da:	4812      	ldr	r0, [pc, #72]	; (8006a24 <MX_GPIO_Init+0x150>)
 80069dc:	f7fa fc2a 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 80069e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e6:	2301      	movs	r3, #1
 80069e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069ee:	2302      	movs	r3, #2
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 80069f2:	f107 031c 	add.w	r3, r7, #28
 80069f6:	4619      	mov	r1, r3
 80069f8:	480b      	ldr	r0, [pc, #44]	; (8006a28 <MX_GPIO_Init+0x154>)
 80069fa:	f7fa fc1b 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80069fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a04:	2300      	movs	r3, #0
 8006a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8006a0c:	f107 031c 	add.w	r3, r7, #28
 8006a10:	4619      	mov	r1, r3
 8006a12:	4806      	ldr	r0, [pc, #24]	; (8006a2c <MX_GPIO_Init+0x158>)
 8006a14:	f7fa fc0e 	bl	8001234 <HAL_GPIO_Init>

}
 8006a18:	bf00      	nop
 8006a1a:	3730      	adds	r7, #48	; 0x30
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40023800 	.word	0x40023800
 8006a24:	40020800 	.word	0x40020800
 8006a28:	40020c00 	.word	0x40020c00
 8006a2c:	40020000 	.word	0x40020000

08006a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006a4c:	4b2f      	ldr	r3, [pc, #188]	; (8006b0c <SDRAM_init+0xcc>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <SDRAM_init+0xcc>)
 8006a54:	2208      	movs	r2, #8
 8006a56:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006a58:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <SDRAM_init+0xcc>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8006a5e:	4b2b      	ldr	r3, [pc, #172]	; (8006b0c <SDRAM_init+0xcc>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a68:	4928      	ldr	r1, [pc, #160]	; (8006b0c <SDRAM_init+0xcc>)
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fd fa40 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006a70:	200a      	movs	r0, #10
 8006a72:	f7f9 fdb5 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8006a76:	4b25      	ldr	r3, [pc, #148]	; (8006b0c <SDRAM_init+0xcc>)
 8006a78:	2202      	movs	r2, #2
 8006a7a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006a7c:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <SDRAM_init+0xcc>)
 8006a7e:	2208      	movs	r2, #8
 8006a80:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006a82:	4b22      	ldr	r3, [pc, #136]	; (8006b0c <SDRAM_init+0xcc>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8006a88:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <SDRAM_init+0xcc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a92:	491e      	ldr	r1, [pc, #120]	; (8006b0c <SDRAM_init+0xcc>)
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fd fa2b 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006a9a:	200a      	movs	r0, #10
 8006a9c:	f7f9 fda0 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <SDRAM_init+0xcc>)
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006aa6:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <SDRAM_init+0xcc>)
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8006aac:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <SDRAM_init+0xcc>)
 8006aae:	2204      	movs	r2, #4
 8006ab0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8006ab2:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <SDRAM_init+0xcc>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006abc:	4913      	ldr	r1, [pc, #76]	; (8006b0c <SDRAM_init+0xcc>)
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fd fa16 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006ac4:	200a      	movs	r0, #10
 8006ac6:	f7f9 fd8b 	bl	80005e0 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8006aca:	f240 2331 	movw	r3, #561	; 0x231
 8006ace:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <SDRAM_init+0xcc>)
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <SDRAM_init+0xcc>)
 8006ad8:	2208      	movs	r2, #8
 8006ada:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <SDRAM_init+0xcc>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <SDRAM_init+0xcc>)
 8006ae6:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aec:	4907      	ldr	r1, [pc, #28]	; (8006b0c <SDRAM_init+0xcc>)
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fd f9fe 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006af4:	200a      	movs	r0, #10
 8006af6:	f7f9 fd73 	bl	80005e0 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8006afa:	f240 516a 	movw	r1, #1386	; 0x56a
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fd fa21 	bl	8003f46 <HAL_SDRAM_ProgramRefreshRate>
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20022e68 	.word	0x20022e68

08006b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <HAL_MspInit+0x4c>)
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_MspInit+0x4c>)
 8006b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b24:	6453      	str	r3, [r2, #68]	; 0x44
 8006b26:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <HAL_MspInit+0x4c>)
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	2300      	movs	r3, #0
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <HAL_MspInit+0x4c>)
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <HAL_MspInit+0x4c>)
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b40:	6413      	str	r3, [r2, #64]	; 0x40
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <HAL_MspInit+0x4c>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40023800 	.word	0x40023800

08006b60 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a0e      	ldr	r2, [pc, #56]	; (8006ba8 <HAL_DMA2D_MspInit+0x48>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d115      	bne.n	8006b9e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <HAL_DMA2D_MspInit+0x4c>)
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <HAL_DMA2D_MspInit+0x4c>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b80:	6313      	str	r3, [r2, #48]	; 0x30
 8006b82:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <HAL_DMA2D_MspInit+0x4c>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	205a      	movs	r0, #90	; 0x5a
 8006b94:	f7f9 fe35 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006b98:	205a      	movs	r0, #90	; 0x5a
 8006b9a:	f7f9 fe4e 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	4002b000 	.word	0x4002b000
 8006bac:	40023800 	.word	0x40023800

08006bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
 8006bc4:	60da      	str	r2, [r3, #12]
 8006bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a57      	ldr	r2, [pc, #348]	; (8006d2c <HAL_I2C_MspInit+0x17c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f040 80a8 	bne.w	8006d24 <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	4a55      	ldr	r2, [pc, #340]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006bda:	4b55      	ldr	r3, [pc, #340]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f043 0304 	orr.w	r3, r3, #4
 8006be2:	6313      	str	r3, [r2, #48]	; 0x30
 8006be4:	4b52      	ldr	r3, [pc, #328]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	4a4e      	ldr	r2, [pc, #312]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006bf6:	4b4e      	ldr	r3, [pc, #312]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8006c00:	4b4b      	ldr	r3, [pc, #300]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c12:	2312      	movs	r3, #18
 8006c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c16:	2301      	movs	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c1e:	2304      	movs	r3, #4
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c22:	f107 0314 	add.w	r3, r7, #20
 8006c26:	4619      	mov	r1, r3
 8006c28:	4842      	ldr	r0, [pc, #264]	; (8006d34 <HAL_I2C_MspInit+0x184>)
 8006c2a:	f7fa fb03 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c34:	2312      	movs	r3, #18
 8006c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c40:	2304      	movs	r3, #4
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4619      	mov	r1, r3
 8006c4a:	483b      	ldr	r0, [pc, #236]	; (8006d38 <HAL_I2C_MspInit+0x188>)
 8006c4c:	f7fa faf2 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006c50:	2300      	movs	r3, #0
 8006c52:	60bb      	str	r3, [r7, #8]
 8006c54:	4a36      	ldr	r2, [pc, #216]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c60:	4b33      	ldr	r3, [pc, #204]	; (8006d30 <HAL_I2C_MspInit+0x180>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8006c6c:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c6e:	4a34      	ldr	r2, [pc, #208]	; (8006d40 <HAL_I2C_MspInit+0x190>)
 8006c70:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8006c72:	4b32      	ldr	r3, [pc, #200]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c74:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006c78:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c7a:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c80:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c86:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c8c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c8e:	4b2b      	ldr	r3, [pc, #172]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c94:	4b29      	ldr	r3, [pc, #164]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8006c9a:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006ca0:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ca6:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8006cac:	4823      	ldr	r0, [pc, #140]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006cae:	f7f9 fded 	bl	800088c <HAL_DMA_Init>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8006cb8:	f7ff feba 	bl	8006a30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8006cc2:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <HAL_I2C_MspInit+0x18c>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cca:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <HAL_I2C_MspInit+0x198>)
 8006ccc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8006cce:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cd0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006cd4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cd6:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cdc:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ce8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cf0:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006cfc:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8006d08:	480e      	ldr	r0, [pc, #56]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006d0a:	f7f9 fdbf 	bl	800088c <HAL_DMA_Init>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8006d14:	f7ff fe8c 	bl	8006a30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a0a      	ldr	r2, [pc, #40]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8006d1e:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <HAL_I2C_MspInit+0x194>)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006d24:	bf00      	nop
 8006d26:	3728      	adds	r7, #40	; 0x28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40005c00 	.word	0x40005c00
 8006d30:	40023800 	.word	0x40023800
 8006d34:	40020800 	.word	0x40020800
 8006d38:	40020000 	.word	0x40020000
 8006d3c:	20022d00 	.word	0x20022d00
 8006d40:	40026040 	.word	0x40026040
 8006d44:	20022c4c 	.word	0x20022c4c
 8006d48:	40026070 	.word	0x40026070

08006d4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	; 0x38
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a7b      	ldr	r2, [pc, #492]	; (8006f58 <HAL_LTDC_MspInit+0x20c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f040 80f0 	bne.w	8006f50 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006d70:	2300      	movs	r3, #0
 8006d72:	623b      	str	r3, [r7, #32]
 8006d74:	4a79      	ldr	r2, [pc, #484]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006d76:	4b79      	ldr	r3, [pc, #484]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8006d80:	4b76      	ldr	r3, [pc, #472]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	4a72      	ldr	r2, [pc, #456]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006d92:	4b72      	ldr	r3, [pc, #456]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	f043 0320 	orr.w	r3, r3, #32
 8006d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9c:	4b6f      	ldr	r3, [pc, #444]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	4a6b      	ldr	r2, [pc, #428]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006dae:	4b6b      	ldr	r3, [pc, #428]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	6313      	str	r3, [r2, #48]	; 0x30
 8006db8:	4b68      	ldr	r3, [pc, #416]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	4a64      	ldr	r2, [pc, #400]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006dca:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	f043 0302 	orr.w	r3, r3, #2
 8006dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	4a5d      	ldr	r2, [pc, #372]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006de6:	4b5d      	ldr	r3, [pc, #372]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dee:	6313      	str	r3, [r2, #48]	; 0x30
 8006df0:	4b5a      	ldr	r3, [pc, #360]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	4a56      	ldr	r2, [pc, #344]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006e02:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	f043 0304 	orr.w	r3, r3, #4
 8006e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e0c:	4b53      	ldr	r3, [pc, #332]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	4a4f      	ldr	r2, [pc, #316]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006e1e:	4b4f      	ldr	r3, [pc, #316]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	f043 0308 	orr.w	r3, r3, #8
 8006e26:	6313      	str	r3, [r2, #48]	; 0x30
 8006e28:	4b4c      	ldr	r3, [pc, #304]	; (8006f5c <HAL_LTDC_MspInit+0x210>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	60bb      	str	r3, [r7, #8]
 8006e32:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e42:	2302      	movs	r3, #2
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006e46:	230e      	movs	r3, #14
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4843      	ldr	r0, [pc, #268]	; (8006f60 <HAL_LTDC_MspInit+0x214>)
 8006e52:	f7fa f9ef 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8006e56:	f641 0358 	movw	r3, #6232	; 0x1858
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e64:	2302      	movs	r3, #2
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006e68:	230e      	movs	r3, #14
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e70:	4619      	mov	r1, r3
 8006e72:	483c      	ldr	r0, [pc, #240]	; (8006f64 <HAL_LTDC_MspInit+0x218>)
 8006e74:	f7fa f9de 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e84:	2302      	movs	r3, #2
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006e88:	2309      	movs	r3, #9
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e90:	4619      	mov	r1, r3
 8006e92:	4835      	ldr	r0, [pc, #212]	; (8006f68 <HAL_LTDC_MspInit+0x21c>)
 8006e94:	f7fa f9ce 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8006e98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006eaa:	230e      	movs	r3, #14
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	482c      	ldr	r0, [pc, #176]	; (8006f68 <HAL_LTDC_MspInit+0x21c>)
 8006eb6:	f7fa f9bd 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8006eba:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006ecc:	230e      	movs	r3, #14
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4825      	ldr	r0, [pc, #148]	; (8006f6c <HAL_LTDC_MspInit+0x220>)
 8006ed8:	f7fa f9ac 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8006edc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006eea:	2302      	movs	r3, #2
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006eee:	230e      	movs	r3, #14
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	481d      	ldr	r0, [pc, #116]	; (8006f70 <HAL_LTDC_MspInit+0x224>)
 8006efa:	f7fa f99b 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8006efe:	2348      	movs	r3, #72	; 0x48
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f02:	2302      	movs	r3, #2
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006f0e:	230e      	movs	r3, #14
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f16:	4619      	mov	r1, r3
 8006f18:	4816      	ldr	r0, [pc, #88]	; (8006f74 <HAL_LTDC_MspInit+0x228>)
 8006f1a:	f7fa f98b 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8006f1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f24:	2302      	movs	r3, #2
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006f30:	2309      	movs	r3, #9
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f38:	4619      	mov	r1, r3
 8006f3a:	480c      	ldr	r0, [pc, #48]	; (8006f6c <HAL_LTDC_MspInit+0x220>)
 8006f3c:	f7fa f97a 	bl	8001234 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8006f40:	2200      	movs	r2, #0
 8006f42:	2100      	movs	r1, #0
 8006f44:	2058      	movs	r0, #88	; 0x58
 8006f46:	f7f9 fc5c 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006f4a:	2058      	movs	r0, #88	; 0x58
 8006f4c:	f7f9 fc75 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006f50:	bf00      	nop
 8006f52:	3738      	adds	r7, #56	; 0x38
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40016800 	.word	0x40016800
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40021400 	.word	0x40021400
 8006f64:	40020000 	.word	0x40020000
 8006f68:	40020400 	.word	0x40020400
 8006f6c:	40021800 	.word	0x40021800
 8006f70:	40020800 	.word	0x40020800
 8006f74:	40020c00 	.word	0x40020c00

08006f78 <HAL_LTDC_MspDeInit>:
* @param hltdc: LTDC handle pointer
* @retval None
*/

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  if(hltdc->Instance==LTDC)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <HAL_LTDC_MspDeInit+0x68>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d125      	bne.n	8006fd6 <HAL_LTDC_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8006f8a:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <HAL_LTDC_MspDeInit+0x6c>)
 8006f8c:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <HAL_LTDC_MspDeInit+0x6c>)
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f94:	6453      	str	r3, [r2, #68]	; 0x44
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8006f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f9a:	4813      	ldr	r0, [pc, #76]	; (8006fe8 <HAL_LTDC_MspDeInit+0x70>)
 8006f9c:	f7fa faf4 	bl	8001588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8006fa0:	f641 0158 	movw	r1, #6232	; 0x1858
 8006fa4:	4811      	ldr	r0, [pc, #68]	; (8006fec <HAL_LTDC_MspDeInit+0x74>)
 8006fa6:	f7fa faef 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8006faa:	f640 7103 	movw	r1, #3843	; 0xf03
 8006fae:	4810      	ldr	r0, [pc, #64]	; (8006ff0 <HAL_LTDC_MspDeInit+0x78>)
 8006fb0:	f7fa faea 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11 
 8006fb4:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 8006fb8:	480e      	ldr	r0, [pc, #56]	; (8006ff4 <HAL_LTDC_MspDeInit+0x7c>)
 8006fba:	f7fa fae5 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10);
 8006fbe:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8006fc2:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <HAL_LTDC_MspDeInit+0x80>)
 8006fc4:	f7fa fae0 	bl	8001588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3|GPIO_PIN_6);
 8006fc8:	2148      	movs	r1, #72	; 0x48
 8006fca:	480c      	ldr	r0, [pc, #48]	; (8006ffc <HAL_LTDC_MspDeInit+0x84>)
 8006fcc:	f7fa fadc 	bl	8001588 <HAL_GPIO_DeInit>

    /* LTDC interrupt DeInit */
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8006fd0:	2058      	movs	r0, #88	; 0x58
 8006fd2:	f7f9 fc40 	bl	8000856 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }

}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40016800 	.word	0x40016800
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40021400 	.word	0x40021400
 8006fec:	40020000 	.word	0x40020000
 8006ff0:	40020400 	.word	0x40020400
 8006ff4:	40021800 	.word	0x40021800
 8006ff8:	40020800 	.word	0x40020800
 8006ffc:	40020c00 	.word	0x40020c00

08007000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007008:	f107 0314 	add.w	r3, r7, #20
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	605a      	str	r2, [r3, #4]
 8007012:	609a      	str	r2, [r3, #8]
 8007014:	60da      	str	r2, [r3, #12]
 8007016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a19      	ldr	r2, [pc, #100]	; (8007084 <HAL_SPI_MspInit+0x84>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d12c      	bne.n	800707c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007022:	2300      	movs	r3, #0
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <HAL_SPI_MspInit+0x88>)
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <HAL_SPI_MspInit+0x88>)
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007030:	6453      	str	r3, [r2, #68]	; 0x44
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <HAL_SPI_MspInit+0x88>)
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	4a11      	ldr	r2, [pc, #68]	; (8007088 <HAL_SPI_MspInit+0x88>)
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <HAL_SPI_MspInit+0x88>)
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	f043 0320 	orr.w	r3, r3, #32
 800704c:	6313      	str	r3, [r2, #48]	; 0x30
 800704e:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <HAL_SPI_MspInit+0x88>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800705a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800705e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007060:	2302      	movs	r3, #2
 8007062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007068:	2303      	movs	r3, #3
 800706a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800706c:	2305      	movs	r3, #5
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007070:	f107 0314 	add.w	r3, r7, #20
 8007074:	4619      	mov	r1, r3
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <HAL_SPI_MspInit+0x8c>)
 8007078:	f7fa f8dc 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800707c:	bf00      	nop
 800707e:	3728      	adds	r7, #40	; 0x28
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40015000 	.word	0x40015000
 8007088:	40023800 	.word	0x40023800
 800708c:	40021400 	.word	0x40021400

08007090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a0e      	ldr	r2, [pc, #56]	; (80070d8 <HAL_TIM_Base_MspInit+0x48>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d115      	bne.n	80070ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <HAL_TIM_Base_MspInit+0x4c>)
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <HAL_TIM_Base_MspInit+0x4c>)
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	f043 0310 	orr.w	r3, r3, #16
 80070b0:	6413      	str	r3, [r2, #64]	; 0x40
 80070b2:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <HAL_TIM_Base_MspInit+0x4c>)
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80070be:	2200      	movs	r2, #0
 80070c0:	2105      	movs	r1, #5
 80070c2:	2036      	movs	r0, #54	; 0x36
 80070c4:	f7f9 fb9d 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070c8:	2036      	movs	r0, #54	; 0x36
 80070ca:	f7f9 fbb6 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40001000 	.word	0x40001000
 80070dc:	40023800 	.word	0x40023800

080070e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80070e6:	4b3c      	ldr	r3, [pc, #240]	; (80071d8 <HAL_FMC_MspInit+0xf8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d16f      	bne.n	80071ce <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80070ee:	4b3a      	ldr	r3, [pc, #232]	; (80071d8 <HAL_FMC_MspInit+0xf8>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80070f4:	2300      	movs	r3, #0
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4a38      	ldr	r2, [pc, #224]	; (80071dc <HAL_FMC_MspInit+0xfc>)
 80070fa:	4b38      	ldr	r3, [pc, #224]	; (80071dc <HAL_FMC_MspInit+0xfc>)
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	6393      	str	r3, [r2, #56]	; 0x38
 8007104:	4b35      	ldr	r3, [pc, #212]	; (80071dc <HAL_FMC_MspInit+0xfc>)
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007110:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007114:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007116:	2302      	movs	r3, #2
 8007118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800711e:	2303      	movs	r3, #3
 8007120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007122:	230c      	movs	r3, #12
 8007124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	4619      	mov	r1, r3
 800712a:	482d      	ldr	r0, [pc, #180]	; (80071e0 <HAL_FMC_MspInit+0x100>)
 800712c:	f7fa f882 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007130:	2301      	movs	r3, #1
 8007132:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007134:	2302      	movs	r3, #2
 8007136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713c:	2303      	movs	r3, #3
 800713e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007140:	230c      	movs	r3, #12
 8007142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	4619      	mov	r1, r3
 8007148:	4826      	ldr	r0, [pc, #152]	; (80071e4 <HAL_FMC_MspInit+0x104>)
 800714a:	f7fa f873 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800714e:	f248 1333 	movw	r3, #33075	; 0x8133
 8007152:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007154:	2302      	movs	r3, #2
 8007156:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800715c:	2303      	movs	r3, #3
 800715e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007160:	230c      	movs	r3, #12
 8007162:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	4619      	mov	r1, r3
 8007168:	481f      	ldr	r0, [pc, #124]	; (80071e8 <HAL_FMC_MspInit+0x108>)
 800716a:	f7fa f863 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800716e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007172:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007174:	2302      	movs	r3, #2
 8007176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800717c:	2303      	movs	r3, #3
 800717e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007180:	230c      	movs	r3, #12
 8007182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	4619      	mov	r1, r3
 8007188:	4818      	ldr	r0, [pc, #96]	; (80071ec <HAL_FMC_MspInit+0x10c>)
 800718a:	f7fa f853 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800718e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007192:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007194:	2302      	movs	r3, #2
 8007196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800719c:	2303      	movs	r3, #3
 800719e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071a0:	230c      	movs	r3, #12
 80071a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071a4:	1d3b      	adds	r3, r7, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4811      	ldr	r0, [pc, #68]	; (80071f0 <HAL_FMC_MspInit+0x110>)
 80071aa:	f7fa f843 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80071ae:	2360      	movs	r3, #96	; 0x60
 80071b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b2:	2302      	movs	r3, #2
 80071b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ba:	2303      	movs	r3, #3
 80071bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071be:	230c      	movs	r3, #12
 80071c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	480b      	ldr	r0, [pc, #44]	; (80071f4 <HAL_FMC_MspInit+0x114>)
 80071c8:	f7fa f834 	bl	8001234 <HAL_GPIO_Init>
 80071cc:	e000      	b.n	80071d0 <HAL_FMC_MspInit+0xf0>
    return;
 80071ce:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	200229e4 	.word	0x200229e4
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40021400 	.word	0x40021400
 80071e4:	40020800 	.word	0x40020800
 80071e8:	40021800 	.word	0x40021800
 80071ec:	40021000 	.word	0x40021000
 80071f0:	40020c00 	.word	0x40020c00
 80071f4:	40020400 	.word	0x40020400

080071f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007200:	f7ff ff6e 	bl	80070e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800721e:	e7fe      	b.n	800721e <HardFault_Handler+0x4>

08007220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007224:	e7fe      	b.n	8007224 <MemManage_Handler+0x4>

08007226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007226:	b480      	push	{r7}
 8007228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800722a:	e7fe      	b.n	800722a <BusFault_Handler+0x4>

0800722c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007230:	e7fe      	b.n	8007230 <UsageFault_Handler+0x4>

08007232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007232:	b480      	push	{r7}
 8007234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007236:	bf00      	nop
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007244:	bf00      	nop
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800724e:	b480      	push	{r7}
 8007250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007260:	f7f9 f99e 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8007264:	4b03      	ldr	r3, [pc, #12]	; (8007274 <SysTick_Handler+0x18>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3301      	adds	r3, #1
 800726a:	4a02      	ldr	r2, [pc, #8]	; (8007274 <SysTick_Handler+0x18>)
 800726c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800726e:	bf00      	nop
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20022ba0 	.word	0x20022ba0

08007278 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800727c:	4802      	ldr	r0, [pc, #8]	; (8007288 <DMA1_Stream2_IRQHandler+0x10>)
 800727e:	f7f9 fbb3 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007282:	bf00      	nop
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20022d00 	.word	0x20022d00

0800728c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8007290:	4802      	ldr	r0, [pc, #8]	; (800729c <DMA1_Stream4_IRQHandler+0x10>)
 8007292:	f7f9 fba9 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007296:	bf00      	nop
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20022c4c 	.word	0x20022c4c

080072a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80072a4:	4802      	ldr	r0, [pc, #8]	; (80072b0 <TIM6_DAC_IRQHandler+0x10>)
 80072a6:	f7fd f8be 	bl	8004426 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20022db8 	.word	0x20022db8

080072b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80072b8:	4802      	ldr	r0, [pc, #8]	; (80072c4 <LTDC_IRQHandler+0x10>)
 80072ba:	f7fb fb07 	bl	80028cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80072be:	bf00      	nop
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20022ba4 	.word	0x20022ba4

080072c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80072cc:	4802      	ldr	r0, [pc, #8]	; (80072d8 <DMA2D_IRQHandler+0x10>)
 80072ce:	f7f9 fe0e 	bl	8000eee <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80072d2:	bf00      	nop
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20022df4 	.word	0x20022df4

080072dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072e0:	4a16      	ldr	r2, [pc, #88]	; (800733c <SystemInit+0x60>)
 80072e2:	4b16      	ldr	r3, [pc, #88]	; (800733c <SystemInit+0x60>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80072f0:	4a13      	ldr	r2, [pc, #76]	; (8007340 <SystemInit+0x64>)
 80072f2:	4b13      	ldr	r3, [pc, #76]	; (8007340 <SystemInit+0x64>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80072fc:	4b10      	ldr	r3, [pc, #64]	; (8007340 <SystemInit+0x64>)
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007302:	4a0f      	ldr	r2, [pc, #60]	; (8007340 <SystemInit+0x64>)
 8007304:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <SystemInit+0x64>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800730c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007310:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007312:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <SystemInit+0x64>)
 8007314:	4a0b      	ldr	r2, [pc, #44]	; (8007344 <SystemInit+0x68>)
 8007316:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007318:	4a09      	ldr	r2, [pc, #36]	; (8007340 <SystemInit+0x64>)
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <SystemInit+0x64>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <SystemInit+0x64>)
 8007326:	2200      	movs	r2, #0
 8007328:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <SystemInit+0x60>)
 800732c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007330:	609a      	str	r2, [r3, #8]
#endif
}
 8007332:	bf00      	nop
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	e000ed00 	.word	0xe000ed00
 8007340:	40023800 	.word	0x40023800
 8007344:	24003010 	.word	0x24003010

08007348 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 800734e:	2300      	movs	r3, #0
 8007350:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8007352:	2303      	movs	r3, #3
 8007354:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8007356:	2302      	movs	r3, #2
 8007358:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800735a:	1d3a      	adds	r2, r7, #4
 800735c:	2364      	movs	r3, #100	; 0x64
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	2302      	movs	r3, #2
 8007362:	2182      	movs	r1, #130	; 0x82
 8007364:	480b      	ldr	r0, [pc, #44]	; (8007394 <touchReset+0x4c>)
 8007366:	f7fa fb15 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800736a:	2014      	movs	r0, #20
 800736c:	f7f9 f938 	bl	80005e0 <HAL_Delay>
	sendBuf[1] = 0x00;
 8007370:	2300      	movs	r3, #0
 8007372:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007374:	1d3a      	adds	r2, r7, #4
 8007376:	2364      	movs	r3, #100	; 0x64
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	2302      	movs	r3, #2
 800737c:	2182      	movs	r1, #130	; 0x82
 800737e:	4805      	ldr	r0, [pc, #20]	; (8007394 <touchReset+0x4c>)
 8007380:	f7fa fb08 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007384:	2014      	movs	r0, #20
 8007386:	f7f9 f92b 	bl	80005e0 <HAL_Delay>
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20022cac 	.word	0x20022cac

08007398 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af02      	add	r7, sp, #8
 800739e:	4603      	mov	r3, r0
 80073a0:	460a      	mov	r2, r1
 80073a2:	71fb      	strb	r3, [r7, #7]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 80073ac:	2300      	movs	r3, #0
 80073ae:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 80073b0:	2304      	movs	r3, #4
 80073b2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80073b4:	f107 020c 	add.w	r2, r7, #12
 80073b8:	2364      	movs	r3, #100	; 0x64
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	2301      	movs	r3, #1
 80073be:	2182      	movs	r1, #130	; 0x82
 80073c0:	4817      	ldr	r0, [pc, #92]	; (8007420 <fnctCmd+0x88>)
 80073c2:	f7fa fae7 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80073c6:	f107 020c 	add.w	r2, r7, #12
 80073ca:	2364      	movs	r3, #100	; 0x64
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	2301      	movs	r3, #1
 80073d0:	2182      	movs	r1, #130	; 0x82
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <fnctCmd+0x88>)
 80073d4:	f7fa fbec 	bl	8001bb0 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 80073d8:	7b3b      	ldrb	r3, [r7, #12]
 80073da:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 80073dc:	79bb      	ldrb	r3, [r7, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 80073e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e6:	43db      	mvns	r3, r3
 80073e8:	b25a      	sxtb	r2, r3
 80073ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ee:	4013      	ands	r3, r2
 80073f0:	b25b      	sxtb	r3, r3
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e003      	b.n	80073fe <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 80073fe:	2304      	movs	r3, #4
 8007400:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007406:	f107 020c 	add.w	r2, r7, #12
 800740a:	2364      	movs	r3, #100	; 0x64
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	2302      	movs	r3, #2
 8007410:	2182      	movs	r1, #130	; 0x82
 8007412:	4803      	ldr	r0, [pc, #12]	; (8007420 <fnctCmd+0x88>)
 8007414:	f7fa fabe 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20022cac 	.word	0x20022cac

08007424 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af02      	add	r7, sp, #8
 800742a:	4603      	mov	r3, r0
 800742c:	460a      	mov	r2, r1
 800742e:	71fb      	strb	r3, [r7, #7]
 8007430:	4613      	mov	r3, r2
 8007432:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8007438:	2300      	movs	r3, #0
 800743a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 800743c:	2317      	movs	r3, #23
 800743e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007440:	f107 020c 	add.w	r2, r7, #12
 8007444:	2364      	movs	r3, #100	; 0x64
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	2301      	movs	r3, #1
 800744a:	2182      	movs	r1, #130	; 0x82
 800744c:	4817      	ldr	r0, [pc, #92]	; (80074ac <ioAFConfig+0x88>)
 800744e:	f7fa faa1 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007452:	f107 020c 	add.w	r2, r7, #12
 8007456:	2364      	movs	r3, #100	; 0x64
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2301      	movs	r3, #1
 800745c:	2182      	movs	r1, #130	; 0x82
 800745e:	4813      	ldr	r0, [pc, #76]	; (80074ac <ioAFConfig+0x88>)
 8007460:	f7fa fba6 	bl	8001bb0 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8007464:	7b3b      	ldrb	r3, [r7, #12]
 8007466:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8007468:	79bb      	ldrb	r3, [r7, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 800746e:	7bfa      	ldrb	r2, [r7, #15]
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	4313      	orrs	r3, r2
 8007474:	73fb      	strb	r3, [r7, #15]
 8007476:	e008      	b.n	800748a <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8007478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747c:	43db      	mvns	r3, r3
 800747e:	b25a      	sxtb	r2, r3
 8007480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007484:	4013      	ands	r3, r2
 8007486:	b25b      	sxtb	r3, r3
 8007488:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 800748a:	2317      	movs	r3, #23
 800748c:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007492:	f107 020c 	add.w	r2, r7, #12
 8007496:	2364      	movs	r3, #100	; 0x64
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	2302      	movs	r3, #2
 800749c:	2182      	movs	r1, #130	; 0x82
 800749e:	4803      	ldr	r0, [pc, #12]	; (80074ac <ioAFConfig+0x88>)
 80074a0:	f7fa fa78 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20022cac 	.word	0x20022cac

080074b0 <readX>:

static void readX(uint16_t *x)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 80074b8:	234d      	movs	r3, #77	; 0x4d
 80074ba:	723b      	strb	r3, [r7, #8]
 80074bc:	2300      	movs	r3, #0
 80074be:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	2364      	movs	r3, #100	; 0x64
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2301      	movs	r3, #1
 80074ca:	2182      	movs	r1, #130	; 0x82
 80074cc:	481f      	ldr	r0, [pc, #124]	; (800754c <readX+0x9c>)
 80074ce:	f7fa fa61 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80074d2:	f107 0208 	add.w	r2, r7, #8
 80074d6:	2364      	movs	r3, #100	; 0x64
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	2302      	movs	r3, #2
 80074dc:	2182      	movs	r1, #130	; 0x82
 80074de:	481b      	ldr	r0, [pc, #108]	; (800754c <readX+0x9c>)
 80074e0:	f7fa fb66 	bl	8001bb0 <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 80074e4:	7a3b      	ldrb	r3, [r7, #8]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	7a7a      	ldrb	r2, [r7, #9]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80074f4:	4293      	cmp	r3, r2
 80074f6:	dc05      	bgt.n	8007504 <readX+0x54>
	{
		_x = 3870 - _x;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80074fe:	330e      	adds	r3, #14
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	e004      	b.n	800750e <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800750a:	3308      	adds	r3, #8
 800750c:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a0f      	ldr	r2, [pc, #60]	; (8007550 <readX+0xa0>)
 8007512:	fb82 1203 	smull	r1, r2, r2, r3
 8007516:	441a      	add	r2, r3
 8007518:	10d2      	asrs	r2, r2, #3
 800751a:	17db      	asrs	r3, r3, #31
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <readX+0x84>
	{
		*x = 0;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 8007532:	e006      	b.n	8007542 <readX+0x92>
	else if (*x > 240)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	2bf0      	cmp	r3, #240	; 0xf0
 800753a:	d902      	bls.n	8007542 <readX+0x92>
		*x = 239;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	22ef      	movs	r2, #239	; 0xef
 8007540:	801a      	strh	r2, [r3, #0]
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20022cac 	.word	0x20022cac
 8007550:	88888889 	.word	0x88888889

08007554 <readY>:

static void readY(uint16_t *y)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af02      	add	r7, sp, #8
 800755a:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 800755c:	234f      	movs	r3, #79	; 0x4f
 800755e:	723b      	strb	r3, [r7, #8]
 8007560:	2300      	movs	r3, #0
 8007562:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8007564:	f107 0208 	add.w	r2, r7, #8
 8007568:	2364      	movs	r3, #100	; 0x64
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	2301      	movs	r3, #1
 800756e:	2182      	movs	r1, #130	; 0x82
 8007570:	4819      	ldr	r0, [pc, #100]	; (80075d8 <readY+0x84>)
 8007572:	f7fa fa0f 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007576:	f107 0208 	add.w	r2, r7, #8
 800757a:	2364      	movs	r3, #100	; 0x64
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	2302      	movs	r3, #2
 8007580:	2182      	movs	r1, #130	; 0x82
 8007582:	4815      	ldr	r0, [pc, #84]	; (80075d8 <readY+0x84>)
 8007584:	f7fa fb14 	bl	8001bb0 <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 8007588:	7a3b      	ldrb	r3, [r7, #8]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	7a7a      	ldrb	r2, [r7, #9]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007598:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <readY+0x88>)
 800759e:	fb82 1203 	smull	r1, r2, r2, r3
 80075a2:	1052      	asrs	r2, r2, #1
 80075a4:	17db      	asrs	r3, r3, #31
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <readY+0x6a>
	{
		*y = 0;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 80075bc:	e008      	b.n	80075d0 <readY+0x7c>
	else if (*y > 320)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80075c6:	d903      	bls.n	80075d0 <readY+0x7c>
		*y = 319;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f240 123f 	movw	r2, #319	; 0x13f
 80075ce:	801a      	strh	r2, [r3, #0]
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20022cac 	.word	0x20022cac
 80075dc:	2e8ba2e9 	.word	0x2e8ba2e9

080075e0 <readZ>:

static void readZ(uint16_t *z)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 80075e8:	2351      	movs	r3, #81	; 0x51
 80075ea:	733b      	strb	r3, [r7, #12]
 80075ec:	2300      	movs	r3, #0
 80075ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80075f0:	f107 020c 	add.w	r2, r7, #12
 80075f4:	2364      	movs	r3, #100	; 0x64
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2301      	movs	r3, #1
 80075fa:	2182      	movs	r1, #130	; 0x82
 80075fc:	4810      	ldr	r0, [pc, #64]	; (8007640 <readZ+0x60>)
 80075fe:	f7fa f9c9 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007602:	f107 020c 	add.w	r2, r7, #12
 8007606:	2364      	movs	r3, #100	; 0x64
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2302      	movs	r3, #2
 800760c:	2182      	movs	r1, #130	; 0x82
 800760e:	480c      	ldr	r0, [pc, #48]	; (8007640 <readZ+0x60>)
 8007610:	f7fa face 	bl	8001bb0 <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 8007614:	7b3b      	ldrb	r3, [r7, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	b21a      	sxth	r2, r3
 800761a:	7b7b      	ldrb	r3, [r7, #13]
 800761c:	b21b      	sxth	r3, r3
 800761e:	4313      	orrs	r3, r2
 8007620:	b21b      	sxth	r3, r3
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <readZ+0x56>
	{
		*z = 0;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	801a      	strh	r2, [r3, #0]
	}
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20022cac 	.word	0x20022cac

08007644 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af02      	add	r7, sp, #8
	touchReset();
 800764a:	f7ff fe7d 	bl	8007348 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 800764e:	2101      	movs	r1, #1
 8007650:	2001      	movs	r0, #1
 8007652:	f7ff fea1 	bl	8007398 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8007656:	2101      	movs	r1, #1
 8007658:	2002      	movs	r0, #2
 800765a:	f7ff fe9d 	bl	8007398 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 800765e:	4b41      	ldr	r3, [pc, #260]	; (8007764 <TP_Config+0x120>)
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007664:	1d3a      	adds	r2, r7, #4
 8007666:	2364      	movs	r3, #100	; 0x64
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2302      	movs	r3, #2
 800766c:	2182      	movs	r1, #130	; 0x82
 800766e:	483e      	ldr	r0, [pc, #248]	; (8007768 <TP_Config+0x124>)
 8007670:	f7fa f990 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007674:	2014      	movs	r0, #20
 8007676:	f7f8 ffb3 	bl	80005e0 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 800767a:	2321      	movs	r3, #33	; 0x21
 800767c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800767e:	2301      	movs	r3, #1
 8007680:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007682:	1d3a      	adds	r2, r7, #4
 8007684:	2364      	movs	r3, #100	; 0x64
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2302      	movs	r3, #2
 800768a:	2182      	movs	r1, #130	; 0x82
 800768c:	4836      	ldr	r0, [pc, #216]	; (8007768 <TP_Config+0x124>)
 800768e:	f7fa f981 	bl	8001994 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8007692:	2100      	movs	r1, #0
 8007694:	201e      	movs	r0, #30
 8007696:	f7ff fec5 	bl	8007424 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 800769a:	2341      	movs	r3, #65	; 0x41
 800769c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 800769e:	239a      	movs	r3, #154	; 0x9a
 80076a0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80076a2:	1d3a      	adds	r2, r7, #4
 80076a4:	2364      	movs	r3, #100	; 0x64
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	2302      	movs	r3, #2
 80076aa:	2182      	movs	r1, #130	; 0x82
 80076ac:	482e      	ldr	r0, [pc, #184]	; (8007768 <TP_Config+0x124>)
 80076ae:	f7fa f971 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 80076b2:	234a      	movs	r3, #74	; 0x4a
 80076b4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80076b6:	2301      	movs	r3, #1
 80076b8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80076ba:	1d3a      	adds	r2, r7, #4
 80076bc:	2364      	movs	r3, #100	; 0x64
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	2302      	movs	r3, #2
 80076c2:	2182      	movs	r1, #130	; 0x82
 80076c4:	4828      	ldr	r0, [pc, #160]	; (8007768 <TP_Config+0x124>)
 80076c6:	f7fa f965 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80076ca:	234b      	movs	r3, #75	; 0x4b
 80076cc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80076ce:	2301      	movs	r3, #1
 80076d0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80076d2:	1d3a      	adds	r2, r7, #4
 80076d4:	2364      	movs	r3, #100	; 0x64
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	2302      	movs	r3, #2
 80076da:	2182      	movs	r1, #130	; 0x82
 80076dc:	4822      	ldr	r0, [pc, #136]	; (8007768 <TP_Config+0x124>)
 80076de:	f7fa f959 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80076e2:	234b      	movs	r3, #75	; 0x4b
 80076e4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 80076e6:	2300      	movs	r3, #0
 80076e8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80076ea:	1d3a      	adds	r2, r7, #4
 80076ec:	2364      	movs	r3, #100	; 0x64
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2302      	movs	r3, #2
 80076f2:	2182      	movs	r1, #130	; 0x82
 80076f4:	481c      	ldr	r0, [pc, #112]	; (8007768 <TP_Config+0x124>)
 80076f6:	f7fa f94d 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 80076fa:	2356      	movs	r3, #86	; 0x56
 80076fc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80076fe:	2301      	movs	r3, #1
 8007700:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007702:	1d3a      	adds	r2, r7, #4
 8007704:	2364      	movs	r3, #100	; 0x64
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	2302      	movs	r3, #2
 800770a:	2182      	movs	r1, #130	; 0x82
 800770c:	4816      	ldr	r0, [pc, #88]	; (8007768 <TP_Config+0x124>)
 800770e:	f7fa f941 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8007712:	2358      	movs	r3, #88	; 0x58
 8007714:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007716:	2301      	movs	r3, #1
 8007718:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800771a:	1d3a      	adds	r2, r7, #4
 800771c:	2364      	movs	r3, #100	; 0x64
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2302      	movs	r3, #2
 8007722:	2182      	movs	r1, #130	; 0x82
 8007724:	4810      	ldr	r0, [pc, #64]	; (8007768 <TP_Config+0x124>)
 8007726:	f7fa f935 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 800772a:	2340      	movs	r3, #64	; 0x40
 800772c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 800772e:	2303      	movs	r3, #3
 8007730:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007732:	1d3a      	adds	r2, r7, #4
 8007734:	2364      	movs	r3, #100	; 0x64
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	2302      	movs	r3, #2
 800773a:	2182      	movs	r1, #130	; 0x82
 800773c:	480a      	ldr	r0, [pc, #40]	; (8007768 <TP_Config+0x124>)
 800773e:	f7fa f929 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8007742:	230b      	movs	r3, #11
 8007744:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8007746:	23ff      	movs	r3, #255	; 0xff
 8007748:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800774a:	1d3a      	adds	r2, r7, #4
 800774c:	2364      	movs	r3, #100	; 0x64
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	2302      	movs	r3, #2
 8007752:	2182      	movs	r1, #130	; 0x82
 8007754:	4804      	ldr	r0, [pc, #16]	; (8007768 <TP_Config+0x124>)
 8007756:	f7fa f91d 	bl	8001994 <HAL_I2C_Master_Transmit>

}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	0800f240 	.word	0x0800f240
 8007768:	20022cac 	.word	0x20022cac

0800776c <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af02      	add	r7, sp, #8
 8007772:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	733b      	strb	r3, [r7, #12]
 8007778:	2300      	movs	r3, #0
 800777a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800777c:	f107 020c 	add.w	r2, r7, #12
 8007780:	2364      	movs	r3, #100	; 0x64
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2301      	movs	r3, #1
 8007786:	2182      	movs	r1, #130	; 0x82
 8007788:	483b      	ldr	r0, [pc, #236]	; (8007878 <TP_GetState+0x10c>)
 800778a:	f7fa f903 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800778e:	f107 020c 	add.w	r2, r7, #12
 8007792:	2364      	movs	r3, #100	; 0x64
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2301      	movs	r3, #1
 8007798:	2182      	movs	r1, #130	; 0x82
 800779a:	4837      	ldr	r0, [pc, #220]	; (8007878 <TP_GetState+0x10c>)
 800779c:	f7fa fa08 	bl	8001bb0 <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 80077a0:	7b3b      	ldrb	r3, [r7, #12]
 80077a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d039      	beq.n	8007828 <TP_GetState+0xbc>
	{
		readX(&x);
 80077b4:	f107 0312 	add.w	r3, r7, #18
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fe79 	bl	80074b0 <readX>
		readY(&y);
 80077be:	f107 0310 	add.w	r3, r7, #16
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fec6 	bl	8007554 <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 80077c8:	8a7a      	ldrh	r2, [r7, #18]
 80077ca:	4b2c      	ldr	r3, [pc, #176]	; (800787c <TP_GetState+0x110>)
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d905      	bls.n	80077de <TP_GetState+0x72>
 80077d2:	8a7a      	ldrh	r2, [r7, #18]
 80077d4:	4b29      	ldr	r3, [pc, #164]	; (800787c <TP_GetState+0x110>)
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	b29b      	uxth	r3, r3
 80077dc:	e004      	b.n	80077e8 <TP_GetState+0x7c>
 80077de:	4b27      	ldr	r3, [pc, #156]	; (800787c <TP_GetState+0x110>)
 80077e0:	881a      	ldrh	r2, [r3, #0]
 80077e2:	8a7b      	ldrh	r3, [r7, #18]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 80077ea:	8a3a      	ldrh	r2, [r7, #16]
 80077ec:	4b24      	ldr	r3, [pc, #144]	; (8007880 <TP_GetState+0x114>)
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d905      	bls.n	8007800 <TP_GetState+0x94>
 80077f4:	8a3a      	ldrh	r2, [r7, #16]
 80077f6:	4b22      	ldr	r3, [pc, #136]	; (8007880 <TP_GetState+0x114>)
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	e004      	b.n	800780a <TP_GetState+0x9e>
 8007800:	4b1f      	ldr	r3, [pc, #124]	; (8007880 <TP_GetState+0x114>)
 8007802:	881a      	ldrh	r2, [r3, #0]
 8007804:	8a3b      	ldrh	r3, [r7, #16]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	b29b      	uxth	r3, r3
 800780a:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 800780c:	8afa      	ldrh	r2, [r7, #22]
 800780e:	8abb      	ldrh	r3, [r7, #20]
 8007810:	4413      	add	r3, r2
 8007812:	2b05      	cmp	r3, #5
 8007814:	dd05      	ble.n	8007822 <TP_GetState+0xb6>
		{
			_x = x;
 8007816:	8a7a      	ldrh	r2, [r7, #18]
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <TP_GetState+0x110>)
 800781a:	801a      	strh	r2, [r3, #0]
			_y = y;
 800781c:	8a3a      	ldrh	r2, [r7, #16]
 800781e:	4b18      	ldr	r3, [pc, #96]	; (8007880 <TP_GetState+0x114>)
 8007820:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 8007822:	4818      	ldr	r0, [pc, #96]	; (8007884 <TP_GetState+0x118>)
 8007824:	f7ff fedc 	bl	80075e0 <readZ>
	}

	state->x = _x;
 8007828:	4b14      	ldr	r3, [pc, #80]	; (800787c <TP_GetState+0x110>)
 800782a:	881a      	ldrh	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8007830:	4b13      	ldr	r3, [pc, #76]	; (8007880 <TP_GetState+0x114>)
 8007832:	881a      	ldrh	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <TP_GetState+0x118>)
 800783a:	881a      	ldrh	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 8007840:	234b      	movs	r3, #75	; 0x4b
 8007842:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 8007844:	2301      	movs	r3, #1
 8007846:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007848:	f107 020c 	add.w	r2, r7, #12
 800784c:	2364      	movs	r3, #100	; 0x64
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2302      	movs	r3, #2
 8007852:	2182      	movs	r1, #130	; 0x82
 8007854:	4808      	ldr	r0, [pc, #32]	; (8007878 <TP_GetState+0x10c>)
 8007856:	f7fa f89d 	bl	8001994 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 800785a:	2300      	movs	r3, #0
 800785c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800785e:	f107 020c 	add.w	r2, r7, #12
 8007862:	2364      	movs	r3, #100	; 0x64
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2302      	movs	r3, #2
 8007868:	2182      	movs	r1, #130	; 0x82
 800786a:	4803      	ldr	r0, [pc, #12]	; (8007878 <TP_GetState+0x10c>)
 800786c:	f7fa f892 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 8007870:	bf00      	nop
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20022cac 	.word	0x20022cac
 800787c:	200229e8 	.word	0x200229e8
 8007880:	200229ea 	.word	0x200229ea
 8007884:	200229ec 	.word	0x200229ec

08007888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800788c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800788e:	e003      	b.n	8007898 <LoopCopyDataInit>

08007890 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007892:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007894:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007896:	3104      	adds	r1, #4

08007898 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007898:	480b      	ldr	r0, [pc, #44]	; (80078c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800789c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800789e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80078a0:	d3f6      	bcc.n	8007890 <CopyDataInit>
  ldr  r2, =_sbss
 80078a2:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80078a4:	e002      	b.n	80078ac <LoopFillZerobss>

080078a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80078a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80078a8:	f842 3b04 	str.w	r3, [r2], #4

080078ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80078ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80078b0:	d3f9      	bcc.n	80078a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80078b2:	f7ff fd13 	bl	80072dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078b6:	f007 fc65 	bl	800f184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078ba:	f7fe fd4d 	bl	8006358 <main>
  bx  lr    
 80078be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80078c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80078c4:	08080820 	.word	0x08080820
  ldr  r0, =_sdata
 80078c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80078cc:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 80078d0:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 80078d4:	20023000 	.word	0x20023000

080078d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078d8:	e7fe      	b.n	80078d8 <ADC_IRQHandler>

080078da <_GetRect>:
 80078da:	6883      	ldr	r3, [r0, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	800a      	strh	r2, [r1, #0]
 80078e0:	804a      	strh	r2, [r1, #2]
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	3a01      	subs	r2, #1
 80078e8:	3b01      	subs	r3, #1
 80078ea:	808a      	strh	r2, [r1, #4]
 80078ec:	80cb      	strh	r3, [r1, #6]
 80078ee:	4770      	bx	lr

080078f0 <_SetPixelIndex>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	6880      	ldr	r0, [r0, #8]
 80078f4:	69c4      	ldr	r4, [r0, #28]
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	fb04 1202 	mla	r2, r4, r2, r1
 80078fc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007900:	bd10      	pop	{r4, pc}

08007902 <_GetPixelIndex>:
 8007902:	6883      	ldr	r3, [r0, #8]
 8007904:	69d8      	ldr	r0, [r3, #28]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	fb00 1202 	mla	r2, r0, r2, r1
 800790c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007910:	4770      	bx	lr

08007912 <_XorPixel>:
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	4604      	mov	r4, r0
 8007918:	460f      	mov	r7, r1
 800791a:	4616      	mov	r6, r2
 800791c:	f7ff fff1 	bl	8007902 <_GetPixelIndex>
 8007920:	6925      	ldr	r5, [r4, #16]
 8007922:	68ab      	ldr	r3, [r5, #8]
 8007924:	4680      	mov	r8, r0
 8007926:	4798      	blx	r3
 8007928:	4639      	mov	r1, r7
 800792a:	ea80 0308 	eor.w	r3, r0, r8
 800792e:	4632      	mov	r2, r6
 8007930:	4620      	mov	r0, r4
 8007932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	f7ff bfdb 	b.w	80078f0 <_SetPixelIndex>
	...

0800793c <_FillRect>:
 800793c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	6886      	ldr	r6, [r0, #8]
 8007942:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007944:	6b34      	ldr	r4, [r6, #48]	; 0x30
 8007946:	f8df c114 	ldr.w	ip, [pc, #276]	; 8007a5c <_FillRect+0x120>
 800794a:	4689      	mov	r9, r1
 800794c:	4692      	mov	sl, r2
 800794e:	b144      	cbz	r4, 8007962 <_FillRect+0x26>
 8007950:	9700      	str	r7, [sp, #0]
 8007952:	f8dc 5000 	ldr.w	r5, [ip]
 8007956:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8007958:	682d      	ldr	r5, [r5, #0]
 800795a:	9501      	str	r5, [sp, #4]
 800795c:	6980      	ldr	r0, [r0, #24]
 800795e:	47a0      	blx	r4
 8007960:	e079      	b.n	8007a56 <_FillRect+0x11a>
 8007962:	1a5b      	subs	r3, r3, r1
 8007964:	f8dc 1000 	ldr.w	r1, [ip]
 8007968:	f891 c010 	ldrb.w	ip, [r1, #16]
 800796c:	ebc2 0807 	rsb	r8, r2, r7
 8007970:	f01c 0c01 	ands.w	ip, ip, #1
 8007974:	f103 0401 	add.w	r4, r3, #1
 8007978:	f108 0501 	add.w	r5, r8, #1
 800797c:	69f7      	ldr	r7, [r6, #28]
 800797e:	d021      	beq.n	80079c4 <_FillRect+0x88>
 8007980:	6903      	ldr	r3, [r0, #16]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	4798      	blx	r3
 8007986:	69f2      	ldr	r2, [r6, #28]
 8007988:	2c00      	cmp	r4, #0
 800798a:	d064      	beq.n	8007a56 <_FillRect+0x11a>
 800798c:	f06f 0c03 	mvn.w	ip, #3
 8007990:	fb02 990a 	mla	r9, r2, sl, r9
 8007994:	fb0c fc07 	mul.w	ip, ip, r7
 8007998:	fb07 9708 	mla	r7, r7, r8, r9
 800799c:	00bf      	lsls	r7, r7, #2
 800799e:	2d00      	cmp	r5, #0
 80079a0:	d059      	beq.n	8007a56 <_FillRect+0x11a>
 80079a2:	3d01      	subs	r5, #1
 80079a4:	463b      	mov	r3, r7
 80079a6:	4622      	mov	r2, r4
 80079a8:	f8d6 8000 	ldr.w	r8, [r6]
 80079ac:	f853 1008 	ldr.w	r1, [r3, r8]
 80079b0:	3a01      	subs	r2, #1
 80079b2:	ea81 0100 	eor.w	r1, r1, r0
 80079b6:	f843 1008 	str.w	r1, [r3, r8]
 80079ba:	f103 0304 	add.w	r3, r3, #4
 80079be:	d1f3      	bne.n	80079a8 <_FillRect+0x6c>
 80079c0:	4467      	add	r7, ip
 80079c2:	e7ec      	b.n	800799e <_FillRect+0x62>
 80079c4:	6830      	ldr	r0, [r6, #0]
 80079c6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80079c8:	fb07 9202 	mla	r2, r7, r2, r9
 80079cc:	2c0f      	cmp	r4, #15
 80079ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80079d2:	6808      	ldr	r0, [r1, #0]
 80079d4:	d92f      	bls.n	8007a36 <_FillRect+0xfa>
 80079d6:	f1a3 0a0f 	sub.w	sl, r3, #15
 80079da:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 80079de:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80079e2:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 80079e6:	f10a 0a01 	add.w	sl, sl, #1
 80079ea:	fb09 2101 	mla	r1, r9, r1, r2
 80079ee:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 80079f2:	462e      	mov	r6, r5
 80079f4:	4662      	mov	r2, ip
 80079f6:	b1e6      	cbz	r6, 8007a32 <_FillRect+0xf6>
 80079f8:	4622      	mov	r2, r4
 80079fa:	460b      	mov	r3, r1
 80079fc:	3a10      	subs	r2, #16
 80079fe:	2a0f      	cmp	r2, #15
 8007a00:	6018      	str	r0, [r3, #0]
 8007a02:	6058      	str	r0, [r3, #4]
 8007a04:	6098      	str	r0, [r3, #8]
 8007a06:	60d8      	str	r0, [r3, #12]
 8007a08:	6118      	str	r0, [r3, #16]
 8007a0a:	6158      	str	r0, [r3, #20]
 8007a0c:	6198      	str	r0, [r3, #24]
 8007a0e:	61d8      	str	r0, [r3, #28]
 8007a10:	6218      	str	r0, [r3, #32]
 8007a12:	6258      	str	r0, [r3, #36]	; 0x24
 8007a14:	6298      	str	r0, [r3, #40]	; 0x28
 8007a16:	62d8      	str	r0, [r3, #44]	; 0x2c
 8007a18:	6318      	str	r0, [r3, #48]	; 0x30
 8007a1a:	6358      	str	r0, [r3, #52]	; 0x34
 8007a1c:	6398      	str	r0, [r3, #56]	; 0x38
 8007a1e:	63d8      	str	r0, [r3, #60]	; 0x3c
 8007a20:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007a24:	d8ea      	bhi.n	80079fc <_FillRect+0xc0>
 8007a26:	eb01 020a 	add.w	r2, r1, sl
 8007a2a:	3e01      	subs	r6, #1
 8007a2c:	ebc9 0101 	rsb	r1, r9, r1
 8007a30:	e7e1      	b.n	80079f6 <_FillRect+0xba>
 8007a32:	f004 040f 	and.w	r4, r4, #15
 8007a36:	b174      	cbz	r4, 8007a56 <_FillRect+0x11a>
 8007a38:	00bf      	lsls	r7, r7, #2
 8007a3a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8007a3e:	fb07 2208 	mla	r2, r7, r8, r2
 8007a42:	b145      	cbz	r5, 8007a56 <_FillRect+0x11a>
 8007a44:	4611      	mov	r1, r2
 8007a46:	4623      	mov	r3, r4
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	f841 0b04 	str.w	r0, [r1], #4
 8007a4e:	d1fb      	bne.n	8007a48 <_FillRect+0x10c>
 8007a50:	3d01      	subs	r5, #1
 8007a52:	1bd2      	subs	r2, r2, r7
 8007a54:	e7f5      	b.n	8007a42 <_FillRect+0x106>
 8007a56:	b002      	add	sp, #8
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	20000020 	.word	0x20000020

08007a60 <_DrawHLine>:
 8007a60:	b507      	push	{r0, r1, r2, lr}
 8007a62:	9200      	str	r2, [sp, #0]
 8007a64:	f7ff ff6a 	bl	800793c <_FillRect>
 8007a68:	b003      	add	sp, #12
 8007a6a:	f85d fb04 	ldr.w	pc, [sp], #4

08007a6e <_DrawVLine>:
 8007a6e:	b507      	push	{r0, r1, r2, lr}
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	460b      	mov	r3, r1
 8007a74:	f7ff ff62 	bl	800793c <_FillRect>
 8007a78:	b003      	add	sp, #12
 8007a7a:	f85d fb04 	ldr.w	pc, [sp], #4

08007a7e <_GetDevProp>:
 8007a7e:	3901      	subs	r1, #1
 8007a80:	6883      	ldr	r3, [r0, #8]
 8007a82:	290d      	cmp	r1, #13
 8007a84:	d814      	bhi.n	8007ab0 <_GetDevProp+0x32>
 8007a86:	e8df f001 	tbb	[pc, r1]
 8007a8a:	0b09      	.short	0x0b09
 8007a8c:	13130f0d 	.word	0x13130f0d
 8007a90:	11160713 	.word	0x11160713
 8007a94:	16161611 	.word	0x16161611
 8007a98:	2020      	movs	r0, #32
 8007a9a:	4770      	bx	lr
 8007a9c:	68d8      	ldr	r0, [r3, #12]
 8007a9e:	4770      	bx	lr
 8007aa0:	6918      	ldr	r0, [r3, #16]
 8007aa2:	4770      	bx	lr
 8007aa4:	6958      	ldr	r0, [r3, #20]
 8007aa6:	4770      	bx	lr
 8007aa8:	6998      	ldr	r0, [r3, #24]
 8007aaa:	4770      	bx	lr
 8007aac:	2001      	movs	r0, #1
 8007aae:	4770      	bx	lr
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab4:	4770      	bx	lr
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	4770      	bx	lr
	...

08007abc <_GetDevData>:
 8007abc:	4802      	ldr	r0, [pc, #8]	; (8007ac8 <_GetDevData+0xc>)
 8007abe:	2901      	cmp	r1, #1
 8007ac0:	bf18      	it	ne
 8007ac2:	2000      	movne	r0, #0
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	0808042c 	.word	0x0808042c

08007acc <_ReadRect>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	6881      	ldr	r1, [r0, #8]
 8007ad4:	69c8      	ldr	r0, [r1, #28]
 8007ad6:	f06f 0903 	mvn.w	r9, #3
 8007ada:	fb00 7502 	mla	r5, r0, r2, r7
 8007ade:	1bdb      	subs	r3, r3, r7
 8007ae0:	00ae      	lsls	r6, r5, #2
 8007ae2:	fb09 fc00 	mul.w	ip, r9, r0
 8007ae6:	fb09 f505 	mul.w	r5, r9, r5
 8007aea:	f103 0901 	add.w	r9, r3, #1
 8007aee:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8007af2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007af6:	1c5f      	adds	r7, r3, #1
 8007af8:	4630      	mov	r0, r6
 8007afa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007afe:	680c      	ldr	r4, [r1, #0]
 8007b00:	44aa      	add	sl, r5
 8007b02:	f850 b004 	ldr.w	fp, [r0, r4]
 8007b06:	f84a b000 	str.w	fp, [sl, r0]
 8007b0a:	3f01      	subs	r7, #1
 8007b0c:	f100 0004 	add.w	r0, r0, #4
 8007b10:	d1f3      	bne.n	8007afa <_ReadRect+0x2e>
 8007b12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b14:	444c      	add	r4, r9
 8007b16:	940a      	str	r4, [sp, #40]	; 0x28
 8007b18:	3201      	adds	r2, #1
 8007b1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007b1c:	1e50      	subs	r0, r2, #1
 8007b1e:	42a0      	cmp	r0, r4
 8007b20:	4446      	add	r6, r8
 8007b22:	4465      	add	r5, ip
 8007b24:	dbe7      	blt.n	8007af6 <_ReadRect+0x2a>
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007b2c <_GetDevFunc>:
 8007b2c:	3901      	subs	r1, #1
 8007b2e:	2924      	cmp	r1, #36	; 0x24
 8007b30:	d844      	bhi.n	8007bbc <_GetDevFunc+0x90>
 8007b32:	e8df f001 	tbb	[pc, r1]
 8007b36:	1b41      	.short	0x1b41
 8007b38:	1d431917 	.word	0x1d431917
 8007b3c:	45134343 	.word	0x45134343
 8007b40:	21431f15 	.word	0x21431f15
 8007b44:	43434323 	.word	0x43434323
 8007b48:	2f292725 	.word	0x2f292725
 8007b4c:	43314343 	.word	0x43314343
 8007b50:	43434343 	.word	0x43434343
 8007b54:	2d2b3543 	.word	0x2d2b3543
 8007b58:	433d      	.short	0x433d
 8007b5a:	39          	.byte	0x39
 8007b5b:	00          	.byte	0x00
 8007b5c:	4819      	ldr	r0, [pc, #100]	; (8007bc4 <_GetDevFunc+0x98>)
 8007b5e:	4770      	bx	lr
 8007b60:	4819      	ldr	r0, [pc, #100]	; (8007bc8 <_GetDevFunc+0x9c>)
 8007b62:	4770      	bx	lr
 8007b64:	4819      	ldr	r0, [pc, #100]	; (8007bcc <_GetDevFunc+0xa0>)
 8007b66:	4770      	bx	lr
 8007b68:	4819      	ldr	r0, [pc, #100]	; (8007bd0 <_GetDevFunc+0xa4>)
 8007b6a:	4770      	bx	lr
 8007b6c:	4819      	ldr	r0, [pc, #100]	; (8007bd4 <_GetDevFunc+0xa8>)
 8007b6e:	4770      	bx	lr
 8007b70:	4819      	ldr	r0, [pc, #100]	; (8007bd8 <_GetDevFunc+0xac>)
 8007b72:	4770      	bx	lr
 8007b74:	4819      	ldr	r0, [pc, #100]	; (8007bdc <_GetDevFunc+0xb0>)
 8007b76:	4770      	bx	lr
 8007b78:	4819      	ldr	r0, [pc, #100]	; (8007be0 <_GetDevFunc+0xb4>)
 8007b7a:	4770      	bx	lr
 8007b7c:	4819      	ldr	r0, [pc, #100]	; (8007be4 <_GetDevFunc+0xb8>)
 8007b7e:	4770      	bx	lr
 8007b80:	4819      	ldr	r0, [pc, #100]	; (8007be8 <_GetDevFunc+0xbc>)
 8007b82:	4770      	bx	lr
 8007b84:	4819      	ldr	r0, [pc, #100]	; (8007bec <_GetDevFunc+0xc0>)
 8007b86:	4770      	bx	lr
 8007b88:	4819      	ldr	r0, [pc, #100]	; (8007bf0 <_GetDevFunc+0xc4>)
 8007b8a:	4770      	bx	lr
 8007b8c:	4819      	ldr	r0, [pc, #100]	; (8007bf4 <_GetDevFunc+0xc8>)
 8007b8e:	4770      	bx	lr
 8007b90:	4819      	ldr	r0, [pc, #100]	; (8007bf8 <_GetDevFunc+0xcc>)
 8007b92:	4770      	bx	lr
 8007b94:	4819      	ldr	r0, [pc, #100]	; (8007bfc <_GetDevFunc+0xd0>)
 8007b96:	4770      	bx	lr
 8007b98:	6803      	ldr	r3, [r0, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b9e:	4770      	bx	lr
 8007ba0:	6803      	ldr	r3, [r0, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ba6:	4770      	bx	lr
 8007ba8:	6803      	ldr	r3, [r0, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007bae:	4770      	bx	lr
 8007bb0:	6803      	ldr	r3, [r0, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007bb6:	4770      	bx	lr
 8007bb8:	4811      	ldr	r0, [pc, #68]	; (8007c00 <_GetDevFunc+0xd4>)
 8007bba:	4770      	bx	lr
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	4770      	bx	lr
 8007bc0:	4810      	ldr	r0, [pc, #64]	; (8007c04 <_GetDevFunc+0xd8>)
 8007bc2:	4770      	bx	lr
 8007bc4:	08008297 	.word	0x08008297
 8007bc8:	080083f9 	.word	0x080083f9
 8007bcc:	08008313 	.word	0x08008313
 8007bd0:	080081eb 	.word	0x080081eb
 8007bd4:	0800826f 	.word	0x0800826f
 8007bd8:	08008247 	.word	0x08008247
 8007bdc:	0800822d 	.word	0x0800822d
 8007be0:	08007c55 	.word	0x08007c55
 8007be4:	08007c4b 	.word	0x08007c4b
 8007be8:	08007c35 	.word	0x08007c35
 8007bec:	08007c1f 	.word	0x08007c1f
 8007bf0:	08007c09 	.word	0x08007c09
 8007bf4:	080082c1 	.word	0x080082c1
 8007bf8:	08008207 	.word	0x08008207
 8007bfc:	080081a5 	.word	0x080081a5
 8007c00:	08007acd 	.word	0x08007acd
 8007c04:	0800843b 	.word	0x0800843b

08007c08 <_SetChroma>:
 8007c08:	b507      	push	{r0, r1, r2, lr}
 8007c0a:	6980      	ldr	r0, [r0, #24]
 8007c0c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007c10:	210d      	movs	r1, #13
 8007c12:	466a      	mov	r2, sp
 8007c14:	f7fd f9ee 	bl	8004ff4 <LCD_X_DisplayDriver>
 8007c18:	b003      	add	sp, #12
 8007c1a:	f85d fb04 	ldr.w	pc, [sp], #4

08007c1e <_SetChromaMode>:
 8007c1e:	b507      	push	{r0, r1, r2, lr}
 8007c20:	aa02      	add	r2, sp, #8
 8007c22:	6980      	ldr	r0, [r0, #24]
 8007c24:	f842 1d04 	str.w	r1, [r2, #-4]!
 8007c28:	210c      	movs	r1, #12
 8007c2a:	f7fd f9e3 	bl	8004ff4 <LCD_X_DisplayDriver>
 8007c2e:	b003      	add	sp, #12
 8007c30:	f85d fb04 	ldr.w	pc, [sp], #4

08007c34 <_SetAlphaMode>:
 8007c34:	b507      	push	{r0, r1, r2, lr}
 8007c36:	aa02      	add	r2, sp, #8
 8007c38:	6980      	ldr	r0, [r0, #24]
 8007c3a:	f842 1d04 	str.w	r1, [r2, #-4]!
 8007c3e:	210b      	movs	r1, #11
 8007c40:	f7fd f9d8 	bl	8004ff4 <LCD_X_DisplayDriver>
 8007c44:	b003      	add	sp, #12
 8007c46:	f85d fb04 	ldr.w	pc, [sp], #4

08007c4a <_Off>:
 8007c4a:	6980      	ldr	r0, [r0, #24]
 8007c4c:	2106      	movs	r1, #6
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f7fd b9d0 	b.w	8004ff4 <LCD_X_DisplayDriver>

08007c54 <_On>:
 8007c54:	6980      	ldr	r0, [r0, #24]
 8007c56:	2105      	movs	r1, #5
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f7fd b9cb 	b.w	8004ff4 <LCD_X_DisplayDriver>

08007c5e <_SetOrg>:
 8007c5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c62:	2300      	movs	r3, #0
 8007c64:	4607      	mov	r7, r0
 8007c66:	6884      	ldr	r4, [r0, #8]
 8007c68:	6980      	ldr	r0, [r0, #24]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	4616      	mov	r6, r2
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	f000 fcb5 	bl	80085e0 <LCD_GetMirrorXEx>
 8007c76:	4680      	mov	r8, r0
 8007c78:	69b8      	ldr	r0, [r7, #24]
 8007c7a:	f000 fcb4 	bl	80085e6 <LCD_GetMirrorYEx>
 8007c7e:	4681      	mov	r9, r0
 8007c80:	69b8      	ldr	r0, [r7, #24]
 8007c82:	f000 fcb3 	bl	80085ec <LCD_GetSwapXYEx>
 8007c86:	0080      	lsls	r0, r0, #2
 8007c88:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8007c8c:	ea40 0008 	orr.w	r0, r0, r8
 8007c90:	2807      	cmp	r0, #7
 8007c92:	d826      	bhi.n	8007ce2 <_SetOrg+0x84>
 8007c94:	e8df f000 	tbb	[pc, r0]
 8007c98:	0b0f0408 	.word	0x0b0f0408
 8007c9c:	1b1f1519 	.word	0x1b1f1519
 8007ca0:	6962      	ldr	r2, [r4, #20]
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	1b5d      	subs	r5, r3, r5
 8007ca8:	9500      	str	r5, [sp, #0]
 8007caa:	9601      	str	r6, [sp, #4]
 8007cac:	e019      	b.n	8007ce2 <_SetOrg+0x84>
 8007cae:	6962      	ldr	r2, [r4, #20]
 8007cb0:	68e3      	ldr	r3, [r4, #12]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	1b5d      	subs	r5, r3, r5
 8007cb6:	69a2      	ldr	r2, [r4, #24]
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	9500      	str	r5, [sp, #0]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	1b9e      	subs	r6, r3, r6
 8007cc0:	e7f3      	b.n	8007caa <_SetOrg+0x4c>
 8007cc2:	69a2      	ldr	r2, [r4, #24]
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	1b9e      	subs	r6, r3, r6
 8007cca:	9600      	str	r6, [sp, #0]
 8007ccc:	e008      	b.n	8007ce0 <_SetOrg+0x82>
 8007cce:	69a2      	ldr	r2, [r4, #24]
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	1b9e      	subs	r6, r3, r6
 8007cd6:	6962      	ldr	r2, [r4, #20]
 8007cd8:	68e3      	ldr	r3, [r4, #12]
 8007cda:	9600      	str	r6, [sp, #0]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	1b5d      	subs	r5, r3, r5
 8007ce0:	9501      	str	r5, [sp, #4]
 8007ce2:	69b8      	ldr	r0, [r7, #24]
 8007ce4:	2103      	movs	r1, #3
 8007ce6:	466a      	mov	r2, sp
 8007ce8:	f7fd f984 	bl	8004ff4 <LCD_X_DisplayDriver>
 8007cec:	b003      	add	sp, #12
 8007cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007cf4 <_DrawBitmap>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	b08d      	sub	sp, #52	; 0x34
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007cfe:	910a      	str	r1, [sp, #40]	; 0x28
 8007d00:	2804      	cmp	r0, #4
 8007d02:	469b      	mov	fp, r3
 8007d04:	9209      	str	r2, [sp, #36]	; 0x24
 8007d06:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8007d08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007d0a:	68b3      	ldr	r3, [r6, #8]
 8007d0c:	d011      	beq.n	8007d32 <_DrawBitmap+0x3e>
 8007d0e:	dc09      	bgt.n	8007d24 <_DrawBitmap+0x30>
 8007d10:	2801      	cmp	r0, #1
 8007d12:	d013      	beq.n	8007d3c <_DrawBitmap+0x48>
 8007d14:	2802      	cmp	r0, #2
 8007d16:	f040 822d 	bne.w	8008174 <_DrawBitmap+0x480>
 8007d1a:	4aab      	ldr	r2, [pc, #684]	; (8007fc8 <_DrawBitmap+0x2d4>)
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d20:	2100      	movs	r1, #0
 8007d22:	e0b8      	b.n	8007e96 <_DrawBitmap+0x1a2>
 8007d24:	2808      	cmp	r0, #8
 8007d26:	f000 8172 	beq.w	800800e <_DrawBitmap+0x31a>
 8007d2a:	2820      	cmp	r0, #32
 8007d2c:	f000 81fb 	beq.w	8008126 <_DrawBitmap+0x432>
 8007d30:	e220      	b.n	8008174 <_DrawBitmap+0x480>
 8007d32:	4aa5      	ldr	r2, [pc, #660]	; (8007fc8 <_DrawBitmap+0x2d4>)
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d38:	2100      	movs	r1, #0
 8007d3a:	e10a      	b.n	8007f52 <_DrawBitmap+0x25e>
 8007d3c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007d3e:	b90f      	cbnz	r7, 8007d44 <_DrawBitmap+0x50>
 8007d40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d42:	e042      	b.n	8007dca <_DrawBitmap+0xd6>
 8007d44:	4ba0      	ldr	r3, [pc, #640]	; (8007fc8 <_DrawBitmap+0x2d4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	7c1b      	ldrb	r3, [r3, #16]
 8007d4a:	07db      	lsls	r3, r3, #31
 8007d4c:	d4f8      	bmi.n	8007d40 <_DrawBitmap+0x4c>
 8007d4e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007d50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d52:	9302      	str	r3, [sp, #8]
 8007d54:	e88d 0801 	stmia.w	sp, {r0, fp}
 8007d58:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007d5a:	9003      	str	r0, [sp, #12]
 8007d5c:	9504      	str	r5, [sp, #16]
 8007d5e:	69b0      	ldr	r0, [r6, #24]
 8007d60:	4623      	mov	r3, r4
 8007d62:	47b8      	blx	r7
 8007d64:	e206      	b.n	8008174 <_DrawBitmap+0x480>
 8007d66:	4b98      	ldr	r3, [pc, #608]	; (8007fc8 <_DrawBitmap+0x2d4>)
 8007d68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d70:	7c1b      	ldrb	r3, [r3, #16]
 8007d72:	f8d5 c000 	ldr.w	ip, [r5]
 8007d76:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8007d7a:	68b0      	ldr	r0, [r6, #8]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	448a      	add	sl, r1
 8007d84:	d02d      	beq.n	8007de2 <_DrawBitmap+0xee>
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d04d      	beq.n	8007e26 <_DrawBitmap+0x132>
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d04b      	beq.n	8007e26 <_DrawBitmap+0x132>
 8007d8e:	f1c1 0308 	rsb	r3, r1, #8
 8007d92:	7822      	ldrb	r2, [r4, #0]
 8007d94:	498d      	ldr	r1, [pc, #564]	; (8007fcc <_DrawBitmap+0x2d8>)
 8007d96:	5c8a      	ldrb	r2, [r1, r2]
 8007d98:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d9a:	410a      	asrs	r2, r1
 8007d9c:	69c1      	ldr	r1, [r0, #28]
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	fb01 a107 	mla	r1, r1, r7, sl
 8007da4:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 8007da8:	4659      	mov	r1, fp
 8007daa:	4620      	mov	r0, r4
 8007dac:	f012 0f01 	tst.w	r2, #1
 8007db0:	bf0c      	ite	eq
 8007db2:	46e0      	moveq	r8, ip
 8007db4:	46c8      	movne	r8, r9
 8007db6:	3b01      	subs	r3, #1
 8007db8:	d00d      	beq.n	8007dd6 <_DrawBitmap+0xe2>
 8007dba:	0852      	lsrs	r2, r2, #1
 8007dbc:	3901      	subs	r1, #1
 8007dbe:	f84a 8b04 	str.w	r8, [sl], #4
 8007dc2:	d1f3      	bne.n	8007dac <_DrawBitmap+0xb8>
 8007dc4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dc6:	3701      	adds	r7, #1
 8007dc8:	4414      	add	r4, r2
 8007dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dcc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007dce:	1a3b      	subs	r3, r7, r0
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	dbc8      	blt.n	8007d66 <_DrawBitmap+0x72>
 8007dd4:	e1ce      	b.n	8008174 <_DrawBitmap+0x480>
 8007dd6:	7843      	ldrb	r3, [r0, #1]
 8007dd8:	4a7c      	ldr	r2, [pc, #496]	; (8007fcc <_DrawBitmap+0x2d8>)
 8007dda:	3001      	adds	r0, #1
 8007ddc:	5cd2      	ldrb	r2, [r2, r3]
 8007dde:	2308      	movs	r3, #8
 8007de0:	e7ec      	b.n	8007dbc <_DrawBitmap+0xc8>
 8007de2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007de4:	4979      	ldr	r1, [pc, #484]	; (8007fcc <_DrawBitmap+0x2d8>)
 8007de6:	f1c2 0308 	rsb	r3, r2, #8
 8007dea:	7822      	ldrb	r2, [r4, #0]
 8007dec:	5c89      	ldrb	r1, [r1, r2]
 8007dee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007df0:	4111      	asrs	r1, r2
 8007df2:	69c2      	ldr	r2, [r0, #28]
 8007df4:	6800      	ldr	r0, [r0, #0]
 8007df6:	fb02 a207 	mla	r2, r2, r7, sl
 8007dfa:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 8007dfe:	4622      	mov	r2, r4
 8007e00:	2000      	movs	r0, #0
 8007e02:	f011 0f01 	tst.w	r1, #1
 8007e06:	bf18      	it	ne
 8007e08:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	d001      	beq.n	8007e14 <_DrawBitmap+0x120>
 8007e10:	0849      	lsrs	r1, r1, #1
 8007e12:	e004      	b.n	8007e1e <_DrawBitmap+0x12a>
 8007e14:	7853      	ldrb	r3, [r2, #1]
 8007e16:	496d      	ldr	r1, [pc, #436]	; (8007fcc <_DrawBitmap+0x2d8>)
 8007e18:	3201      	adds	r2, #1
 8007e1a:	5cc9      	ldrb	r1, [r1, r3]
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	4558      	cmp	r0, fp
 8007e22:	d1ee      	bne.n	8007e02 <_DrawBitmap+0x10e>
 8007e24:	e7ce      	b.n	8007dc4 <_DrawBitmap+0xd0>
 8007e26:	6933      	ldr	r3, [r6, #16]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	4798      	blx	r3
 8007e2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007e30:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e32:	46d9      	mov	r9, fp
 8007e34:	46a4      	mov	ip, r4
 8007e36:	f89c 1000 	ldrb.w	r1, [ip]
 8007e3a:	2280      	movs	r2, #128	; 0x80
 8007e3c:	fa42 f208 	asr.w	r2, r2, r8
 8007e40:	eb0a 030b 	add.w	r3, sl, fp
 8007e44:	4211      	tst	r1, r2
 8007e46:	ebc9 0303 	rsb	r3, r9, r3
 8007e4a:	d013      	beq.n	8007e74 <_DrawBitmap+0x180>
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	463a      	mov	r2, r7
 8007e50:	4630      	mov	r0, r6
 8007e52:	f8cd c01c 	str.w	ip, [sp, #28]
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	f7ff fd53 	bl	8007902 <_GetPixelIndex>
 8007e5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e5e:	9b08      	ldr	r3, [sp, #32]
 8007e60:	ea80 0e01 	eor.w	lr, r0, r1
 8007e64:	463a      	mov	r2, r7
 8007e66:	4619      	mov	r1, r3
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4673      	mov	r3, lr
 8007e6c:	f7ff fd40 	bl	80078f0 <_SetPixelIndex>
 8007e70:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007e74:	f108 0801 	add.w	r8, r8, #1
 8007e78:	f1b8 0f08 	cmp.w	r8, #8
 8007e7c:	bf04      	itt	eq
 8007e7e:	f10c 0c01 	addeq.w	ip, ip, #1
 8007e82:	f04f 0800 	moveq.w	r8, #0
 8007e86:	f1b9 0901 	subs.w	r9, r9, #1
 8007e8a:	d1d4      	bne.n	8007e36 <_DrawBitmap+0x142>
 8007e8c:	e79a      	b.n	8007dc4 <_DrawBitmap+0xd0>
 8007e8e:	b935      	cbnz	r5, 8007e9e <_DrawBitmap+0x1aa>
 8007e90:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8007e92:	3101      	adds	r1, #1
 8007e94:	443c      	add	r4, r7
 8007e96:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007e98:	42b9      	cmp	r1, r7
 8007e9a:	dbf8      	blt.n	8007e8e <_DrawBitmap+0x19a>
 8007e9c:	e16a      	b.n	8008174 <_DrawBitmap+0x480>
 8007e9e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007ea2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ea4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	7826      	ldrb	r6, [r4, #0]
 8007eaa:	4438      	add	r0, r7
 8007eac:	4488      	add	r8, r1
 8007eae:	fb02 0808 	mla	r8, r2, r8, r0
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007eb6:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8007eba:	7c02      	ldrb	r2, [r0, #16]
 8007ebc:	f012 0203 	ands.w	r2, r2, #3
 8007ec0:	46c4      	mov	ip, r8
 8007ec2:	d005      	beq.n	8007ed0 <_DrawBitmap+0x1dc>
 8007ec4:	2a02      	cmp	r2, #2
 8007ec6:	d1e3      	bne.n	8007e90 <_DrawBitmap+0x19c>
 8007ec8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007eca:	9406      	str	r4, [sp, #24]
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e020      	b.n	8007f12 <_DrawBitmap+0x21e>
 8007ed0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	4627      	mov	r7, r4
 8007ed6:	f1c2 0803 	rsb	r8, r2, #3
 8007eda:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007ede:	f1c8 0906 	rsb	r9, r8, #6
 8007ee2:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8007ee6:	fa4a f909 	asr.w	r9, sl, r9
 8007eea:	ea09 0906 	and.w	r9, r9, r6
 8007eee:	fa29 f808 	lsr.w	r8, r9, r8
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 8007ef8:	f84c 8b04 	str.w	r8, [ip], #4
 8007efc:	2a04      	cmp	r2, #4
 8007efe:	d102      	bne.n	8007f06 <_DrawBitmap+0x212>
 8007f00:	787e      	ldrb	r6, [r7, #1]
 8007f02:	2200      	movs	r2, #0
 8007f04:	3701      	adds	r7, #1
 8007f06:	3801      	subs	r0, #1
 8007f08:	d1e5      	bne.n	8007ed6 <_DrawBitmap+0x1e2>
 8007f0a:	e7c1      	b.n	8007e90 <_DrawBitmap+0x19c>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	4558      	cmp	r0, fp
 8007f10:	d0be      	beq.n	8007e90 <_DrawBitmap+0x19c>
 8007f12:	f1c2 0c03 	rsb	ip, r2, #3
 8007f16:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007f1a:	f1cc 0906 	rsb	r9, ip, #6
 8007f1e:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8007f22:	fa4a f909 	asr.w	r9, sl, r9
 8007f26:	ea09 0906 	and.w	r9, r9, r6
 8007f2a:	fa39 fc0c 	lsrs.w	ip, r9, ip
 8007f2e:	bf1c      	itt	ne
 8007f30:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 8007f34:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 8007f38:	3201      	adds	r2, #1
 8007f3a:	2a04      	cmp	r2, #4
 8007f3c:	d1e6      	bne.n	8007f0c <_DrawBitmap+0x218>
 8007f3e:	9a06      	ldr	r2, [sp, #24]
 8007f40:	7856      	ldrb	r6, [r2, #1]
 8007f42:	3201      	adds	r2, #1
 8007f44:	9206      	str	r2, [sp, #24]
 8007f46:	2200      	movs	r2, #0
 8007f48:	e7e0      	b.n	8007f0c <_DrawBitmap+0x218>
 8007f4a:	b935      	cbnz	r5, 8007f5a <_DrawBitmap+0x266>
 8007f4c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8007f4e:	3101      	adds	r1, #1
 8007f50:	443c      	add	r4, r7
 8007f52:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007f54:	42b9      	cmp	r1, r7
 8007f56:	dbf8      	blt.n	8007f4a <_DrawBitmap+0x256>
 8007f58:	e10c      	b.n	8008174 <_DrawBitmap+0x480>
 8007f5a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007f5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f60:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007f62:	69da      	ldr	r2, [r3, #28]
 8007f64:	7826      	ldrb	r6, [r4, #0]
 8007f66:	4438      	add	r0, r7
 8007f68:	4488      	add	r8, r1
 8007f6a:	fb02 0808 	mla	r8, r2, r8, r0
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f72:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8007f76:	7c02      	ldrb	r2, [r0, #16]
 8007f78:	f012 0203 	ands.w	r2, r2, #3
 8007f7c:	46c4      	mov	ip, r8
 8007f7e:	d005      	beq.n	8007f8c <_DrawBitmap+0x298>
 8007f80:	2a02      	cmp	r2, #2
 8007f82:	d1e3      	bne.n	8007f4c <_DrawBitmap+0x258>
 8007f84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f86:	9406      	str	r4, [sp, #24]
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e024      	b.n	8007fd6 <_DrawBitmap+0x2e2>
 8007f8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f8e:	4658      	mov	r0, fp
 8007f90:	4627      	mov	r7, r4
 8007f92:	f1c2 0801 	rsb	r8, r2, #1
 8007f96:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007f9a:	f1c8 0904 	rsb	r9, r8, #4
 8007f9e:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8007fa2:	fa4a f909 	asr.w	r9, sl, r9
 8007fa6:	ea09 0906 	and.w	r9, r9, r6
 8007faa:	fa29 f808 	lsr.w	r8, r9, r8
 8007fae:	3201      	adds	r2, #1
 8007fb0:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 8007fb4:	f84c 8b04 	str.w	r8, [ip], #4
 8007fb8:	2a02      	cmp	r2, #2
 8007fba:	d102      	bne.n	8007fc2 <_DrawBitmap+0x2ce>
 8007fbc:	787e      	ldrb	r6, [r7, #1]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	3701      	adds	r7, #1
 8007fc2:	3801      	subs	r0, #1
 8007fc4:	d1e5      	bne.n	8007f92 <_DrawBitmap+0x29e>
 8007fc6:	e7c1      	b.n	8007f4c <_DrawBitmap+0x258>
 8007fc8:	20000020 	.word	0x20000020
 8007fcc:	080801d8 	.word	0x080801d8
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	4558      	cmp	r0, fp
 8007fd4:	d0ba      	beq.n	8007f4c <_DrawBitmap+0x258>
 8007fd6:	f1c2 0c01 	rsb	ip, r2, #1
 8007fda:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007fde:	f1cc 0904 	rsb	r9, ip, #4
 8007fe2:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8007fe6:	fa4a f909 	asr.w	r9, sl, r9
 8007fea:	ea09 0906 	and.w	r9, r9, r6
 8007fee:	fa39 fc0c 	lsrs.w	ip, r9, ip
 8007ff2:	bf1c      	itt	ne
 8007ff4:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 8007ff8:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 8007ffc:	3201      	adds	r2, #1
 8007ffe:	2a02      	cmp	r2, #2
 8008000:	d1e6      	bne.n	8007fd0 <_DrawBitmap+0x2dc>
 8008002:	9a06      	ldr	r2, [sp, #24]
 8008004:	7856      	ldrb	r6, [r2, #1]
 8008006:	3201      	adds	r2, #1
 8008008:	9206      	str	r2, [sp, #24]
 800800a:	2200      	movs	r2, #0
 800800c:	e7e0      	b.n	8007fd0 <_DrawBitmap+0x2dc>
 800800e:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8008010:	f8df c168 	ldr.w	ip, [pc, #360]	; 800817c <_DrawBitmap+0x488>
 8008014:	b127      	cbz	r7, 8008020 <_DrawBitmap+0x32c>
 8008016:	f8dc 0000 	ldr.w	r0, [ip]
 800801a:	7c00      	ldrb	r0, [r0, #16]
 800801c:	0780      	lsls	r0, r0, #30
 800801e:	d504      	bpl.n	800802a <_DrawBitmap+0x336>
 8008020:	f8dc c000 	ldr.w	ip, [ip]
 8008024:	f04f 0900 	mov.w	r9, #0
 8008028:	e011      	b.n	800804e <_DrawBitmap+0x35a>
 800802a:	2d00      	cmp	r5, #0
 800802c:	d0f8      	beq.n	8008020 <_DrawBitmap+0x32c>
 800802e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008030:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	f8cd b000 	str.w	fp, [sp]
 8008038:	9001      	str	r0, [sp, #4]
 800803a:	9503      	str	r5, [sp, #12]
 800803c:	69b0      	ldr	r0, [r6, #24]
 800803e:	4623      	mov	r3, r4
 8008040:	47b8      	blx	r7
 8008042:	e097      	b.n	8008174 <_DrawBitmap+0x480>
 8008044:	b93d      	cbnz	r5, 8008056 <_DrawBitmap+0x362>
 8008046:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008048:	f109 0901 	add.w	r9, r9, #1
 800804c:	443c      	add	r4, r7
 800804e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8008050:	45b9      	cmp	r9, r7
 8008052:	dbf7      	blt.n	8008044 <_DrawBitmap+0x350>
 8008054:	e08e      	b.n	8008174 <_DrawBitmap+0x480>
 8008056:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008058:	69da      	ldr	r2, [r3, #28]
 800805a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800805c:	4448      	add	r0, r9
 800805e:	fb02 7000 	mla	r0, r2, r0, r7
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008068:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800806c:	f012 0203 	ands.w	r2, r2, #3
 8008070:	4601      	mov	r1, r0
 8008072:	d003      	beq.n	800807c <_DrawBitmap+0x388>
 8008074:	2a02      	cmp	r2, #2
 8008076:	d1e6      	bne.n	8008046 <_DrawBitmap+0x352>
 8008078:	2100      	movs	r1, #0
 800807a:	e04f      	b.n	800811c <_DrawBitmap+0x428>
 800807c:	4658      	mov	r0, fp
 800807e:	4622      	mov	r2, r4
 8008080:	2807      	cmp	r0, #7
 8008082:	dd23      	ble.n	80080cc <_DrawBitmap+0x3d8>
 8008084:	7816      	ldrb	r6, [r2, #0]
 8008086:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800808a:	600e      	str	r6, [r1, #0]
 800808c:	7856      	ldrb	r6, [r2, #1]
 800808e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8008092:	604e      	str	r6, [r1, #4]
 8008094:	7896      	ldrb	r6, [r2, #2]
 8008096:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800809a:	608e      	str	r6, [r1, #8]
 800809c:	78d6      	ldrb	r6, [r2, #3]
 800809e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080a2:	60ce      	str	r6, [r1, #12]
 80080a4:	7916      	ldrb	r6, [r2, #4]
 80080a6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080aa:	610e      	str	r6, [r1, #16]
 80080ac:	7956      	ldrb	r6, [r2, #5]
 80080ae:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080b2:	614e      	str	r6, [r1, #20]
 80080b4:	7996      	ldrb	r6, [r2, #6]
 80080b6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080ba:	618e      	str	r6, [r1, #24]
 80080bc:	79d6      	ldrb	r6, [r2, #7]
 80080be:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080c2:	61ce      	str	r6, [r1, #28]
 80080c4:	3808      	subs	r0, #8
 80080c6:	3208      	adds	r2, #8
 80080c8:	3120      	adds	r1, #32
 80080ca:	e7d9      	b.n	8008080 <_DrawBitmap+0x38c>
 80080cc:	2803      	cmp	r0, #3
 80080ce:	dd13      	ble.n	80080f8 <_DrawBitmap+0x404>
 80080d0:	7816      	ldrb	r6, [r2, #0]
 80080d2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080d6:	600e      	str	r6, [r1, #0]
 80080d8:	7856      	ldrb	r6, [r2, #1]
 80080da:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080de:	604e      	str	r6, [r1, #4]
 80080e0:	7896      	ldrb	r6, [r2, #2]
 80080e2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080e6:	608e      	str	r6, [r1, #8]
 80080e8:	78d6      	ldrb	r6, [r2, #3]
 80080ea:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80080ee:	60ce      	str	r6, [r1, #12]
 80080f0:	3804      	subs	r0, #4
 80080f2:	3204      	adds	r2, #4
 80080f4:	3110      	adds	r1, #16
 80080f6:	e7e9      	b.n	80080cc <_DrawBitmap+0x3d8>
 80080f8:	2600      	movs	r6, #0
 80080fa:	4286      	cmp	r6, r0
 80080fc:	d0a3      	beq.n	8008046 <_DrawBitmap+0x352>
 80080fe:	f812 8006 	ldrb.w	r8, [r2, r6]
 8008102:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 8008106:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 800810a:	3601      	adds	r6, #1
 800810c:	e7f5      	b.n	80080fa <_DrawBitmap+0x406>
 800810e:	5c62      	ldrb	r2, [r4, r1]
 8008110:	b11a      	cbz	r2, 800811a <_DrawBitmap+0x426>
 8008112:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008116:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800811a:	3101      	adds	r1, #1
 800811c:	ebc1 020b 	rsb	r2, r1, fp
 8008120:	2a00      	cmp	r2, #0
 8008122:	dcf4      	bgt.n	800810e <_DrawBitmap+0x41a>
 8008124:	e78f      	b.n	8008046 <_DrawBitmap+0x352>
 8008126:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8008128:	b90d      	cbnz	r5, 800812e <_DrawBitmap+0x43a>
 800812a:	462b      	mov	r3, r5
 800812c:	e012      	b.n	8008154 <_DrawBitmap+0x460>
 800812e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8008130:	9701      	str	r7, [sp, #4]
 8008132:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008134:	f8cd b000 	str.w	fp, [sp]
 8008138:	9702      	str	r7, [sp, #8]
 800813a:	69b0      	ldr	r0, [r6, #24]
 800813c:	4623      	mov	r3, r4
 800813e:	47a8      	blx	r5
 8008140:	e018      	b.n	8008174 <_DrawBitmap+0x480>
 8008142:	f851 7f04 	ldr.w	r7, [r1, #4]!
 8008146:	1b0d      	subs	r5, r1, r4
 8008148:	3a01      	subs	r2, #1
 800814a:	502f      	str	r7, [r5, r0]
 800814c:	d1f9      	bne.n	8008142 <_DrawBitmap+0x44e>
 800814e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008150:	3301      	adds	r3, #1
 8008152:	443c      	add	r4, r7
 8008154:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008156:	42ab      	cmp	r3, r5
 8008158:	da0c      	bge.n	8008174 <_DrawBitmap+0x480>
 800815a:	68b2      	ldr	r2, [r6, #8]
 800815c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800815e:	69d1      	ldr	r1, [r2, #28]
 8008160:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	4418      	add	r0, r3
 8008166:	fb01 5100 	mla	r1, r1, r0, r5
 800816a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800816e:	1f21      	subs	r1, r4, #4
 8008170:	465a      	mov	r2, fp
 8008172:	e7e6      	b.n	8008142 <_DrawBitmap+0x44e>
 8008174:	b00d      	add	sp, #52	; 0x34
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	bf00      	nop
 800817c:	20000020 	.word	0x20000020

08008180 <_InitOnce.isra.4>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	6805      	ldr	r5, [r0, #0]
 8008184:	4604      	mov	r4, r0
 8008186:	b93d      	cbnz	r5, 8008198 <_InitOnce.isra.4+0x18>
 8008188:	2048      	movs	r0, #72	; 0x48
 800818a:	f002 f881 	bl	800a290 <GUI_ALLOC_GetFixedBlock>
 800818e:	4629      	mov	r1, r5
 8008190:	6020      	str	r0, [r4, #0]
 8008192:	2248      	movs	r2, #72	; 0x48
 8008194:	f000 fed2 	bl	8008f3c <GUI__memset>
 8008198:	6820      	ldr	r0, [r4, #0]
 800819a:	f1d0 0001 	rsbs	r0, r0, #1
 800819e:	bf38      	it	cc
 80081a0:	2000      	movcc	r0, #0
 80081a2:	bd38      	pop	{r3, r4, r5, pc}

080081a4 <_SetDevFunc>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4605      	mov	r5, r0
 80081a8:	3008      	adds	r0, #8
 80081aa:	460e      	mov	r6, r1
 80081ac:	4614      	mov	r4, r2
 80081ae:	f7ff ffe7 	bl	8008180 <_InitOnce.isra.4>
 80081b2:	68ab      	ldr	r3, [r5, #8]
 80081b4:	b1c3      	cbz	r3, 80081e8 <_SetDevFunc+0x44>
 80081b6:	f1a6 0119 	sub.w	r1, r6, #25
 80081ba:	290f      	cmp	r1, #15
 80081bc:	d814      	bhi.n	80081e8 <_SetDevFunc+0x44>
 80081be:	e8df f001 	tbb	[pc, r1]
 80081c2:	1308      	.short	0x1308
 80081c4:	13131313 	.word	0x13131313
 80081c8:	130a0c13 	.word	0x130a0c13
 80081cc:	130e1310 	.word	0x130e1310
 80081d0:	1213      	.short	0x1213
 80081d2:	631c      	str	r4, [r3, #48]	; 0x30
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	635c      	str	r4, [r3, #52]	; 0x34
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	639c      	str	r4, [r3, #56]	; 0x38
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	63dc      	str	r4, [r3, #60]	; 0x3c
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
 80081e2:	641c      	str	r4, [r3, #64]	; 0x40
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	645c      	str	r4, [r3, #68]	; 0x44
 80081e8:	bd70      	pop	{r4, r5, r6, pc}

080081ea <_GetPos>:
 80081ea:	b570      	push	{r4, r5, r6, lr}
 80081ec:	4604      	mov	r4, r0
 80081ee:	3008      	adds	r0, #8
 80081f0:	460d      	mov	r5, r1
 80081f2:	4616      	mov	r6, r2
 80081f4:	f7ff ffc4 	bl	8008180 <_InitOnce.isra.4>
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	b11b      	cbz	r3, 8008204 <_GetPos+0x1a>
 80081fc:	6a18      	ldr	r0, [r3, #32]
 80081fe:	6028      	str	r0, [r5, #0]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	bd70      	pop	{r4, r5, r6, pc}

08008206 <_ShowBuffer>:
 8008206:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008208:	4604      	mov	r4, r0
 800820a:	2300      	movs	r3, #0
 800820c:	3008      	adds	r0, #8
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	460d      	mov	r5, r1
 8008212:	f7ff ffb5 	bl	8008180 <_InitOnce.isra.4>
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	b133      	cbz	r3, 8008228 <_ShowBuffer+0x22>
 800821a:	aa02      	add	r2, sp, #8
 800821c:	69a0      	ldr	r0, [r4, #24]
 800821e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008222:	210e      	movs	r1, #14
 8008224:	f7fc fee6 	bl	8004ff4 <LCD_X_DisplayDriver>
 8008228:	b003      	add	sp, #12
 800822a:	bd30      	pop	{r4, r5, pc}

0800822c <_Init>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4604      	mov	r4, r0
 8008230:	3008      	adds	r0, #8
 8008232:	f7ff ffa5 	bl	8008180 <_InitOnce.isra.4>
 8008236:	2101      	movs	r1, #1
 8008238:	4605      	mov	r5, r0
 800823a:	2200      	movs	r2, #0
 800823c:	69a0      	ldr	r0, [r4, #24]
 800823e:	f7fc fed9 	bl	8004ff4 <LCD_X_DisplayDriver>
 8008242:	4328      	orrs	r0, r5
 8008244:	bd38      	pop	{r3, r4, r5, pc}

08008246 <_SetVis>:
 8008246:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008248:	4604      	mov	r4, r0
 800824a:	2300      	movs	r3, #0
 800824c:	3008      	adds	r0, #8
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	460d      	mov	r5, r1
 8008252:	f7ff ff95 	bl	8008180 <_InitOnce.isra.4>
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	b13b      	cbz	r3, 800826a <_SetVis+0x24>
 800825a:	aa02      	add	r2, sp, #8
 800825c:	62dd      	str	r5, [r3, #44]	; 0x2c
 800825e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008262:	69a0      	ldr	r0, [r4, #24]
 8008264:	2109      	movs	r1, #9
 8008266:	f7fc fec5 	bl	8004ff4 <LCD_X_DisplayDriver>
 800826a:	b003      	add	sp, #12
 800826c:	bd30      	pop	{r4, r5, pc}

0800826e <_SetAlpha>:
 800826e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008270:	4604      	mov	r4, r0
 8008272:	2300      	movs	r3, #0
 8008274:	3008      	adds	r0, #8
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	460d      	mov	r5, r1
 800827a:	f7ff ff81 	bl	8008180 <_InitOnce.isra.4>
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	b13b      	cbz	r3, 8008292 <_SetAlpha+0x24>
 8008282:	aa02      	add	r2, sp, #8
 8008284:	629d      	str	r5, [r3, #40]	; 0x28
 8008286:	f842 5d04 	str.w	r5, [r2, #-4]!
 800828a:	69a0      	ldr	r0, [r4, #24]
 800828c:	210a      	movs	r1, #10
 800828e:	f7fc feb1 	bl	8004ff4 <LCD_X_DisplayDriver>
 8008292:	b003      	add	sp, #12
 8008294:	bd30      	pop	{r4, r5, pc}

08008296 <_SetVRAMAddr>:
 8008296:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008298:	4604      	mov	r4, r0
 800829a:	2300      	movs	r3, #0
 800829c:	3008      	adds	r0, #8
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	460d      	mov	r5, r1
 80082a2:	f7ff ff6d 	bl	8008180 <_InitOnce.isra.4>
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	b143      	cbz	r3, 80082bc <_SetVRAMAddr+0x26>
 80082aa:	aa02      	add	r2, sp, #8
 80082ac:	601d      	str	r5, [r3, #0]
 80082ae:	605d      	str	r5, [r3, #4]
 80082b0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80082b4:	69a0      	ldr	r0, [r4, #24]
 80082b6:	2102      	movs	r1, #2
 80082b8:	f7fc fe9c 	bl	8004ff4 <LCD_X_DisplayDriver>
 80082bc:	b003      	add	sp, #12
 80082be:	bd30      	pop	{r4, r5, pc}

080082c0 <_CopyBuffer>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	4605      	mov	r5, r0
 80082c6:	3008      	adds	r0, #8
 80082c8:	460e      	mov	r6, r1
 80082ca:	4617      	mov	r7, r2
 80082cc:	f7ff ff58 	bl	8008180 <_InitOnce.isra.4>
 80082d0:	68ac      	ldr	r4, [r5, #8]
 80082d2:	b1e4      	cbz	r4, 800830e <_CopyBuffer+0x4e>
 80082d4:	42be      	cmp	r6, r7
 80082d6:	d01a      	beq.n	800830e <_CopyBuffer+0x4e>
 80082d8:	68eb      	ldr	r3, [r5, #12]
 80082da:	2108      	movs	r1, #8
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	4628      	mov	r0, r5
 80082e0:	4798      	blx	r3
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	68e2      	ldr	r2, [r4, #12]
 80082e6:	6861      	ldr	r1, [r4, #4]
 80082e8:	435a      	muls	r2, r3
 80082ea:	4350      	muls	r0, r2
 80082ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ee:	08c2      	lsrs	r2, r0, #3
 80082f0:	fb07 1802 	mla	r8, r7, r2, r1
 80082f4:	b123      	cbz	r3, 8008300 <_CopyBuffer+0x40>
 80082f6:	69a8      	ldr	r0, [r5, #24]
 80082f8:	4631      	mov	r1, r6
 80082fa:	463a      	mov	r2, r7
 80082fc:	4798      	blx	r3
 80082fe:	e004      	b.n	800830a <_CopyBuffer+0x4a>
 8008300:	4640      	mov	r0, r8
 8008302:	fb06 1102 	mla	r1, r6, r2, r1
 8008306:	f006 ff61 	bl	800f1cc <memcpy>
 800830a:	f8c4 8000 	str.w	r8, [r4]
 800830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008312 <_SetPos>:
 8008312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008316:	b087      	sub	sp, #28
 8008318:	4604      	mov	r4, r0
 800831a:	460e      	mov	r6, r1
 800831c:	4615      	mov	r5, r2
 800831e:	2100      	movs	r1, #0
 8008320:	2218      	movs	r2, #24
 8008322:	4668      	mov	r0, sp
 8008324:	f006 ff77 	bl	800f216 <memset>
 8008328:	f104 0008 	add.w	r0, r4, #8
 800832c:	f7ff ff28 	bl	8008180 <_InitOnce.isra.4>
 8008330:	68a7      	ldr	r7, [r4, #8]
 8008332:	2f00      	cmp	r7, #0
 8008334:	d05d      	beq.n	80083f2 <_SetPos+0xe0>
 8008336:	623e      	str	r6, [r7, #32]
 8008338:	627d      	str	r5, [r7, #36]	; 0x24
 800833a:	f000 f9c1 	bl	80086c0 <LCD_GetXSizeDisplay>
 800833e:	4681      	mov	r9, r0
 8008340:	f000 f9c4 	bl	80086cc <LCD_GetYSizeDisplay>
 8008344:	68e3      	ldr	r3, [r4, #12]
 8008346:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f8d7 b010 	ldr.w	fp, [r7, #16]
 8008350:	4680      	mov	r8, r0
 8008352:	2108      	movs	r1, #8
 8008354:	4620      	mov	r0, r4
 8008356:	4798      	blx	r3
 8008358:	2308      	movs	r3, #8
 800835a:	3007      	adds	r0, #7
 800835c:	fb90 f0f3 	sdiv	r0, r0, r3
 8008360:	2e00      	cmp	r6, #0
 8008362:	9004      	str	r0, [sp, #16]
 8008364:	eb0a 0306 	add.w	r3, sl, r6
 8008368:	da07      	bge.n	800837a <_SetPos+0x68>
 800836a:	9a05      	ldr	r2, [sp, #20]
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	fb00 2616 	mls	r6, r0, r6, r2
 8008372:	2200      	movs	r2, #0
 8008374:	9605      	str	r6, [sp, #20]
 8008376:	9200      	str	r2, [sp, #0]
 8008378:	e007      	b.n	800838a <_SetPos+0x78>
 800837a:	454b      	cmp	r3, r9
 800837c:	9600      	str	r6, [sp, #0]
 800837e:	bfca      	itet	gt
 8008380:	ebc6 0609 	rsbgt	r6, r6, r9
 8008384:	f8cd a008 	strle.w	sl, [sp, #8]
 8008388:	9602      	strgt	r6, [sp, #8]
 800838a:	2d00      	cmp	r5, #0
 800838c:	eb0b 0305 	add.w	r3, fp, r5
 8008390:	da09      	bge.n	80083a6 <_SetPos+0x94>
 8008392:	9a04      	ldr	r2, [sp, #16]
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	4355      	muls	r5, r2
 8008398:	9a05      	ldr	r2, [sp, #20]
 800839a:	fb0a 2215 	mls	r2, sl, r5, r2
 800839e:	9205      	str	r2, [sp, #20]
 80083a0:	2200      	movs	r2, #0
 80083a2:	9201      	str	r2, [sp, #4]
 80083a4:	e007      	b.n	80083b6 <_SetPos+0xa4>
 80083a6:	4543      	cmp	r3, r8
 80083a8:	9501      	str	r5, [sp, #4]
 80083aa:	bfca      	itet	gt
 80083ac:	ebc5 0508 	rsbgt	r5, r5, r8
 80083b0:	f8cd b00c 	strle.w	fp, [sp, #12]
 80083b4:	9503      	strgt	r5, [sp, #12]
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	dd08      	ble.n	80083d0 <_SetPos+0xbe>
 80083be:	9a03      	ldr	r2, [sp, #12]
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	dd05      	ble.n	80083d0 <_SetPos+0xbe>
 80083c4:	9a00      	ldr	r2, [sp, #0]
 80083c6:	454a      	cmp	r2, r9
 80083c8:	da02      	bge.n	80083d0 <_SetPos+0xbe>
 80083ca:	9a01      	ldr	r2, [sp, #4]
 80083cc:	4542      	cmp	r2, r8
 80083ce:	db06      	blt.n	80083de <_SetPos+0xcc>
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d10e      	bne.n	80083f2 <_SetPos+0xe0>
 80083d4:	4620      	mov	r0, r4
 80083d6:	2100      	movs	r1, #0
 80083d8:	f7ff ff35 	bl	8008246 <_SetVis>
 80083dc:	e009      	b.n	80083f2 <_SetPos+0xe0>
 80083de:	b91b      	cbnz	r3, 80083e8 <_SetPos+0xd6>
 80083e0:	4620      	mov	r0, r4
 80083e2:	2101      	movs	r1, #1
 80083e4:	f7ff ff2f 	bl	8008246 <_SetVis>
 80083e8:	69a0      	ldr	r0, [r4, #24]
 80083ea:	2108      	movs	r1, #8
 80083ec:	466a      	mov	r2, sp
 80083ee:	f7fc fe01 	bl	8004ff4 <LCD_X_DisplayDriver>
 80083f2:	b007      	add	sp, #28
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083f8 <_SetSize>:
 80083f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	2300      	movs	r3, #0
 80083fe:	3008      	adds	r0, #8
 8008400:	460e      	mov	r6, r1
 8008402:	4617      	mov	r7, r2
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	f7ff feba 	bl	8008180 <_InitOnce.isra.4>
 800840c:	68ac      	ldr	r4, [r5, #8]
 800840e:	b194      	cbz	r4, 8008436 <_SetSize+0x3e>
 8008410:	69e3      	ldr	r3, [r4, #28]
 8008412:	b93b      	cbnz	r3, 8008424 <_SetSize+0x2c>
 8008414:	69a8      	ldr	r0, [r5, #24]
 8008416:	f000 f8e9 	bl	80085ec <LCD_GetSwapXYEx>
 800841a:	2800      	cmp	r0, #0
 800841c:	bf0c      	ite	eq
 800841e:	4630      	moveq	r0, r6
 8008420:	4638      	movne	r0, r7
 8008422:	61e0      	str	r0, [r4, #28]
 8008424:	60e6      	str	r6, [r4, #12]
 8008426:	6127      	str	r7, [r4, #16]
 8008428:	69a8      	ldr	r0, [r5, #24]
 800842a:	2107      	movs	r1, #7
 800842c:	466a      	mov	r2, sp
 800842e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8008432:	f7fc fddf 	bl	8004ff4 <LCD_X_DisplayDriver>
 8008436:	b003      	add	sp, #12
 8008438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800843a <_SetVSize>:
 800843a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843c:	4606      	mov	r6, r0
 800843e:	3008      	adds	r0, #8
 8008440:	460d      	mov	r5, r1
 8008442:	4617      	mov	r7, r2
 8008444:	f7ff fe9c 	bl	8008180 <_InitOnce.isra.4>
 8008448:	68b4      	ldr	r4, [r6, #8]
 800844a:	b144      	cbz	r4, 800845e <_SetVSize+0x24>
 800844c:	69b0      	ldr	r0, [r6, #24]
 800844e:	f000 f8cd 	bl	80085ec <LCD_GetSwapXYEx>
 8008452:	6165      	str	r5, [r4, #20]
 8008454:	61a7      	str	r7, [r4, #24]
 8008456:	b108      	cbz	r0, 800845c <_SetVSize+0x22>
 8008458:	61e7      	str	r7, [r4, #28]
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	61e5      	str	r5, [r4, #28]
 800845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008460 <LCD_SetVRAMAddrEx>:
 8008460:	b513      	push	{r0, r1, r4, lr}
 8008462:	460c      	mov	r4, r1
 8008464:	f001 fa38 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008468:	9001      	str	r0, [sp, #4]
 800846a:	b908      	cbnz	r0, 8008470 <LCD_SetVRAMAddrEx+0x10>
 800846c:	2001      	movs	r0, #1
 800846e:	e00b      	b.n	8008488 <LCD_SetVRAMAddrEx+0x28>
 8008470:	68c3      	ldr	r3, [r0, #12]
 8008472:	2109      	movs	r1, #9
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	a801      	add	r0, sp, #4
 8008478:	4798      	blx	r3
 800847a:	4603      	mov	r3, r0
 800847c:	2800      	cmp	r0, #0
 800847e:	d0f5      	beq.n	800846c <LCD_SetVRAMAddrEx+0xc>
 8008480:	9801      	ldr	r0, [sp, #4]
 8008482:	4621      	mov	r1, r4
 8008484:	4798      	blx	r3
 8008486:	2000      	movs	r0, #0
 8008488:	b002      	add	sp, #8
 800848a:	bd10      	pop	{r4, pc}

0800848c <LCD_SetVSizeEx>:
 800848c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848e:	460d      	mov	r5, r1
 8008490:	4614      	mov	r4, r2
 8008492:	f001 fa21 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008496:	9001      	str	r0, [sp, #4]
 8008498:	b908      	cbnz	r0, 800849e <LCD_SetVSizeEx+0x12>
 800849a:	2001      	movs	r0, #1
 800849c:	e00c      	b.n	80084b8 <LCD_SetVSizeEx+0x2c>
 800849e:	68c3      	ldr	r3, [r0, #12]
 80084a0:	210a      	movs	r1, #10
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	a801      	add	r0, sp, #4
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d0f5      	beq.n	800849a <LCD_SetVSizeEx+0xe>
 80084ae:	9801      	ldr	r0, [sp, #4]
 80084b0:	4629      	mov	r1, r5
 80084b2:	4622      	mov	r2, r4
 80084b4:	4798      	blx	r3
 80084b6:	2000      	movs	r0, #0
 80084b8:	b003      	add	sp, #12
 80084ba:	bd30      	pop	{r4, r5, pc}

080084bc <LCD_SetSizeEx>:
 80084bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084be:	460d      	mov	r5, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	f001 fa09 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	b908      	cbnz	r0, 80084ce <LCD_SetSizeEx+0x12>
 80084ca:	2001      	movs	r0, #1
 80084cc:	e00c      	b.n	80084e8 <LCD_SetSizeEx+0x2c>
 80084ce:	68c3      	ldr	r3, [r0, #12]
 80084d0:	210b      	movs	r1, #11
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	a801      	add	r0, sp, #4
 80084d6:	4798      	blx	r3
 80084d8:	4603      	mov	r3, r0
 80084da:	2800      	cmp	r0, #0
 80084dc:	d0f5      	beq.n	80084ca <LCD_SetSizeEx+0xe>
 80084de:	9801      	ldr	r0, [sp, #4]
 80084e0:	4629      	mov	r1, r5
 80084e2:	4622      	mov	r2, r4
 80084e4:	4798      	blx	r3
 80084e6:	2000      	movs	r0, #0
 80084e8:	b003      	add	sp, #12
 80084ea:	bd30      	pop	{r4, r5, pc}

080084ec <LCD_SetLUTEntryEx>:
 80084ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ee:	460d      	mov	r5, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	f001 f9f1 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 80084f6:	9001      	str	r0, [sp, #4]
 80084f8:	b908      	cbnz	r0, 80084fe <LCD_SetLUTEntryEx+0x12>
 80084fa:	2001      	movs	r0, #1
 80084fc:	e00c      	b.n	8008518 <LCD_SetLUTEntryEx+0x2c>
 80084fe:	68c3      	ldr	r3, [r0, #12]
 8008500:	2110      	movs	r1, #16
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	a801      	add	r0, sp, #4
 8008506:	4798      	blx	r3
 8008508:	4603      	mov	r3, r0
 800850a:	2800      	cmp	r0, #0
 800850c:	d0f5      	beq.n	80084fa <LCD_SetLUTEntryEx+0xe>
 800850e:	9801      	ldr	r0, [sp, #4]
 8008510:	4629      	mov	r1, r5
 8008512:	4622      	mov	r2, r4
 8008514:	4798      	blx	r3
 8008516:	2000      	movs	r0, #0
 8008518:	b003      	add	sp, #12
 800851a:	bd30      	pop	{r4, r5, pc}

0800851c <LCD_GetPosEx>:
 800851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851e:	460d      	mov	r5, r1
 8008520:	4614      	mov	r4, r2
 8008522:	f001 f9d9 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008526:	9001      	str	r0, [sp, #4]
 8008528:	b908      	cbnz	r0, 800852e <LCD_GetPosEx+0x12>
 800852a:	2001      	movs	r0, #1
 800852c:	e00c      	b.n	8008548 <LCD_GetPosEx+0x2c>
 800852e:	68c3      	ldr	r3, [r0, #12]
 8008530:	2104      	movs	r1, #4
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	a801      	add	r0, sp, #4
 8008536:	4798      	blx	r3
 8008538:	4603      	mov	r3, r0
 800853a:	2800      	cmp	r0, #0
 800853c:	d0f5      	beq.n	800852a <LCD_GetPosEx+0xe>
 800853e:	9801      	ldr	r0, [sp, #4]
 8008540:	4629      	mov	r1, r5
 8008542:	4622      	mov	r2, r4
 8008544:	4798      	blx	r3
 8008546:	2000      	movs	r0, #0
 8008548:	b003      	add	sp, #12
 800854a:	bd30      	pop	{r4, r5, pc}

0800854c <LCD_SetDevFunc>:
 800854c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800854e:	460d      	mov	r5, r1
 8008550:	4614      	mov	r4, r2
 8008552:	f001 f9c1 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008556:	9001      	str	r0, [sp, #4]
 8008558:	b908      	cbnz	r0, 800855e <LCD_SetDevFunc+0x12>
 800855a:	2001      	movs	r0, #1
 800855c:	e00c      	b.n	8008578 <LCD_SetDevFunc+0x2c>
 800855e:	68c3      	ldr	r3, [r0, #12]
 8008560:	2116      	movs	r1, #22
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	a801      	add	r0, sp, #4
 8008566:	4798      	blx	r3
 8008568:	4603      	mov	r3, r0
 800856a:	2800      	cmp	r0, #0
 800856c:	d0f5      	beq.n	800855a <LCD_SetDevFunc+0xe>
 800856e:	9801      	ldr	r0, [sp, #4]
 8008570:	4629      	mov	r1, r5
 8008572:	4622      	mov	r2, r4
 8008574:	4798      	blx	r3
 8008576:	2000      	movs	r0, #0
 8008578:	b003      	add	sp, #12
 800857a:	bd30      	pop	{r4, r5, pc}

0800857c <_GetDevProp>:
 800857c:	2801      	cmp	r0, #1
 800857e:	b510      	push	{r4, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	dc08      	bgt.n	8008596 <_GetDevProp+0x1a>
 8008584:	f001 f9a8 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008588:	b120      	cbz	r0, 8008594 <_GetDevProp+0x18>
 800858a:	68c3      	ldr	r3, [r0, #12]
 800858c:	4621      	mov	r1, r4
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	4798      	blx	r3
 8008592:	bd10      	pop	{r4, pc}
 8008594:	bd10      	pop	{r4, pc}
 8008596:	2000      	movs	r0, #0
 8008598:	bd10      	pop	{r4, pc}

0800859a <_GetMaxValue>:
 800859a:	b538      	push	{r3, r4, r5, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	4621      	mov	r1, r4
 80085a0:	2001      	movs	r0, #1
 80085a2:	f7ff ffeb 	bl	800857c <_GetDevProp>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4605      	mov	r5, r0
 80085aa:	2000      	movs	r0, #0
 80085ac:	f7ff ffe6 	bl	800857c <_GetDevProp>
 80085b0:	42a8      	cmp	r0, r5
 80085b2:	bfb8      	it	lt
 80085b4:	4628      	movlt	r0, r5
 80085b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80085ba:	bd38      	pop	{r3, r4, r5, pc}

080085bc <LCD_GetXSizeEx>:
 80085bc:	2101      	movs	r1, #1
 80085be:	f7ff bfdd 	b.w	800857c <_GetDevProp>

080085c2 <LCD_GetYSizeEx>:
 80085c2:	2102      	movs	r1, #2
 80085c4:	f7ff bfda 	b.w	800857c <_GetDevProp>

080085c8 <LCD_GetVXSizeEx>:
 80085c8:	2103      	movs	r1, #3
 80085ca:	f7ff bfd7 	b.w	800857c <_GetDevProp>

080085ce <LCD_GetVYSizeEx>:
 80085ce:	2104      	movs	r1, #4
 80085d0:	f7ff bfd4 	b.w	800857c <_GetDevProp>

080085d4 <LCD_GetBitsPerPixelEx>:
 80085d4:	2108      	movs	r1, #8
 80085d6:	f7ff bfd1 	b.w	800857c <_GetDevProp>

080085da <LCD_GetNumColorsEx>:
 80085da:	2109      	movs	r1, #9
 80085dc:	f7ff bfce 	b.w	800857c <_GetDevProp>

080085e0 <LCD_GetMirrorXEx>:
 80085e0:	210c      	movs	r1, #12
 80085e2:	f7ff bfcb 	b.w	800857c <_GetDevProp>

080085e6 <LCD_GetMirrorYEx>:
 80085e6:	210d      	movs	r1, #13
 80085e8:	f7ff bfc8 	b.w	800857c <_GetDevProp>

080085ec <LCD_GetSwapXYEx>:
 80085ec:	210e      	movs	r1, #14
 80085ee:	f7ff bfc5 	b.w	800857c <_GetDevProp>
	...

080085f4 <LCD_GetXSize>:
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <LCD_GetXSize+0xc>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	7c58      	ldrb	r0, [r3, #17]
 80085fa:	f7ff bfdf 	b.w	80085bc <LCD_GetXSizeEx>
 80085fe:	bf00      	nop
 8008600:	20000020 	.word	0x20000020

08008604 <LCD_GetYSize>:
 8008604:	4b02      	ldr	r3, [pc, #8]	; (8008610 <LCD_GetYSize+0xc>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	7c58      	ldrb	r0, [r3, #17]
 800860a:	f7ff bfda 	b.w	80085c2 <LCD_GetYSizeEx>
 800860e:	bf00      	nop
 8008610:	20000020 	.word	0x20000020

08008614 <LCD_GetNumColors>:
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <LCD_GetNumColors+0xc>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	7c58      	ldrb	r0, [r3, #17]
 800861a:	f7ff bfde 	b.w	80085da <LCD_GetNumColorsEx>
 800861e:	bf00      	nop
 8008620:	20000020 	.word	0x20000020

08008624 <GUI_GetBitsPerPixelEx>:
 8008624:	b508      	push	{r3, lr}
 8008626:	4b04      	ldr	r3, [pc, #16]	; (8008638 <GUI_GetBitsPerPixelEx+0x14>)
 8008628:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800862c:	68c3      	ldr	r3, [r0, #12]
 800862e:	2108      	movs	r1, #8
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	4798      	blx	r3
 8008634:	bd08      	pop	{r3, pc}
 8008636:	bf00      	nop
 8008638:	20022eac 	.word	0x20022eac

0800863c <LCD_GetDevFunc>:
 800863c:	b508      	push	{r3, lr}
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <LCD_GetDevFunc+0x14>)
 8008640:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8008644:	68d2      	ldr	r2, [r2, #12]
 8008646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800864a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800864c:	4790      	blx	r2
 800864e:	bd08      	pop	{r3, pc}
 8008650:	20022eac 	.word	0x20022eac

08008654 <LCD_GetPaletteEx>:
 8008654:	b508      	push	{r3, lr}
 8008656:	f001 f93f 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800865a:	b120      	cbz	r0, 8008666 <LCD_GetPaletteEx+0x12>
 800865c:	68c3      	ldr	r3, [r0, #12]
 800865e:	2102      	movs	r1, #2
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4798      	blx	r3
 8008664:	bd08      	pop	{r3, pc}
 8008666:	bd08      	pop	{r3, pc}

08008668 <LCD_GetPalette>:
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <LCD_GetPalette+0xc>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	7c58      	ldrb	r0, [r3, #17]
 800866e:	f7ff bff1 	b.w	8008654 <LCD_GetPaletteEx>
 8008672:	bf00      	nop
 8008674:	20000020 	.word	0x20000020

08008678 <GUI_GetpfIndex2ColorEx>:
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <GUI_GetpfIndex2ColorEx+0xc>)
 800867a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	6858      	ldr	r0, [r3, #4]
 8008682:	4770      	bx	lr
 8008684:	20022eac 	.word	0x20022eac

08008688 <GUI_GetpfColor2IndexEx>:
 8008688:	4b02      	ldr	r3, [pc, #8]	; (8008694 <GUI_GetpfColor2IndexEx+0xc>)
 800868a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	4770      	bx	lr
 8008694:	20022eac 	.word	0x20022eac

08008698 <LCD_GetXSizeMax>:
 8008698:	2001      	movs	r0, #1
 800869a:	f7ff bf7e 	b.w	800859a <_GetMaxValue>

0800869e <LCD_GetYSizeMax>:
 800869e:	2002      	movs	r0, #2
 80086a0:	f7ff bf7b 	b.w	800859a <_GetMaxValue>

080086a4 <LCD_GetVXSizeMax>:
 80086a4:	2003      	movs	r0, #3
 80086a6:	f7ff bf78 	b.w	800859a <_GetMaxValue>
	...

080086ac <LCD_SetDisplaySize>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <LCD_SetDisplaySize+0xc>)
 80086ae:	6018      	str	r0, [r3, #0]
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <LCD_SetDisplaySize+0x10>)
 80086b2:	6019      	str	r1, [r3, #0]
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	200229f4 	.word	0x200229f4
 80086bc:	200229f0 	.word	0x200229f0

080086c0 <LCD_GetXSizeDisplay>:
 80086c0:	4b01      	ldr	r3, [pc, #4]	; (80086c8 <LCD_GetXSizeDisplay+0x8>)
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	200229f4 	.word	0x200229f4

080086cc <LCD_GetYSizeDisplay>:
 80086cc:	4b01      	ldr	r3, [pc, #4]	; (80086d4 <LCD_GetYSizeDisplay+0x8>)
 80086ce:	6818      	ldr	r0, [r3, #0]
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	200229f0 	.word	0x200229f0

080086d8 <LCD__GetBPP>:
 80086d8:	2800      	cmp	r0, #0
 80086da:	d03b      	beq.n	8008754 <LCD__GetBPP+0x7c>
 80086dc:	f030 0301 	bics.w	r3, r0, #1
 80086e0:	d029      	beq.n	8008736 <LCD__GetBPP+0x5e>
 80086e2:	f030 0303 	bics.w	r3, r0, #3
 80086e6:	d028      	beq.n	800873a <LCD__GetBPP+0x62>
 80086e8:	f030 0307 	bics.w	r3, r0, #7
 80086ec:	d027      	beq.n	800873e <LCD__GetBPP+0x66>
 80086ee:	f030 030f 	bics.w	r3, r0, #15
 80086f2:	d026      	beq.n	8008742 <LCD__GetBPP+0x6a>
 80086f4:	f030 031f 	bics.w	r3, r0, #31
 80086f8:	d025      	beq.n	8008746 <LCD__GetBPP+0x6e>
 80086fa:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80086fe:	d024      	beq.n	800874a <LCD__GetBPP+0x72>
 8008700:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	b30b      	cbz	r3, 800874e <LCD__GetBPP+0x76>
 800870a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800870e:	f023 030f 	bic.w	r3, r3, #15
 8008712:	b1e3      	cbz	r3, 800874e <LCD__GetBPP+0x76>
 8008714:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8008718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800871c:	b1bb      	cbz	r3, 800874e <LCD__GetBPP+0x76>
 800871e:	0c03      	lsrs	r3, r0, #16
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	b1a3      	cbz	r3, 800874e <LCD__GetBPP+0x76>
 8008724:	0c83      	lsrs	r3, r0, #18
 8008726:	049b      	lsls	r3, r3, #18
 8008728:	b19b      	cbz	r3, 8008752 <LCD__GetBPP+0x7a>
 800872a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800872e:	bf0c      	ite	eq
 8008730:	2018      	moveq	r0, #24
 8008732:	2020      	movne	r0, #32
 8008734:	4770      	bx	lr
 8008736:	2001      	movs	r0, #1
 8008738:	4770      	bx	lr
 800873a:	2002      	movs	r0, #2
 800873c:	4770      	bx	lr
 800873e:	2003      	movs	r0, #3
 8008740:	4770      	bx	lr
 8008742:	2004      	movs	r0, #4
 8008744:	4770      	bx	lr
 8008746:	2005      	movs	r0, #5
 8008748:	4770      	bx	lr
 800874a:	2008      	movs	r0, #8
 800874c:	4770      	bx	lr
 800874e:	2010      	movs	r0, #16
 8008750:	4770      	bx	lr
 8008752:	2012      	movs	r0, #18
 8008754:	4770      	bx	lr

08008756 <LCD__GetBPPDevice>:
 8008756:	b508      	push	{r3, lr}
 8008758:	f7ff ffbe 	bl	80086d8 <LCD__GetBPP>
 800875c:	2801      	cmp	r0, #1
 800875e:	d00f      	beq.n	8008780 <LCD__GetBPPDevice+0x2a>
 8008760:	1e83      	subs	r3, r0, #2
 8008762:	2b06      	cmp	r3, #6
 8008764:	d909      	bls.n	800877a <LCD__GetBPPDevice+0x24>
 8008766:	f1a0 0309 	sub.w	r3, r0, #9
 800876a:	2b07      	cmp	r3, #7
 800876c:	d907      	bls.n	800877e <LCD__GetBPPDevice+0x28>
 800876e:	3811      	subs	r0, #17
 8008770:	2810      	cmp	r0, #16
 8008772:	bf34      	ite	cc
 8008774:	2020      	movcc	r0, #32
 8008776:	2000      	movcs	r0, #0
 8008778:	bd08      	pop	{r3, pc}
 800877a:	2008      	movs	r0, #8
 800877c:	bd08      	pop	{r3, pc}
 800877e:	2010      	movs	r0, #16
 8008780:	bd08      	pop	{r3, pc}
	...

08008784 <_OnExit>:
 8008784:	b510      	push	{r4, lr}
 8008786:	4c03      	ldr	r4, [pc, #12]	; (8008794 <_OnExit+0x10>)
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	f001 fc21 	bl	8009fd0 <GUI_ALLOC_FreeFixedBlock>
 800878e:	2300      	movs	r3, #0
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd10      	pop	{r4, pc}
 8008794:	20022e78 	.word	0x20022e78

08008798 <LCD_InitColors>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d09      	ldr	r5, [pc, #36]	; (80087c0 <LCD_InitColors+0x28>)
 800879c:	682c      	ldr	r4, [r5, #0]
 800879e:	b95c      	cbnz	r4, 80087b8 <LCD_InitColors+0x20>
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <LCD_InitColors+0x2c>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	0080      	lsls	r0, r0, #2
 80087a6:	f001 fd73 	bl	800a290 <GUI_ALLOC_GetFixedBlock>
 80087aa:	6028      	str	r0, [r5, #0]
 80087ac:	b130      	cbz	r0, 80087bc <LCD_InitColors+0x24>
 80087ae:	4806      	ldr	r0, [pc, #24]	; (80087c8 <LCD_InitColors+0x30>)
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <LCD_InitColors+0x34>)
 80087b2:	6003      	str	r3, [r0, #0]
 80087b4:	f001 f9d0 	bl	8009b58 <GUI__RegisterExit>
 80087b8:	2000      	movs	r0, #0
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	2001      	movs	r0, #1
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20022e78 	.word	0x20022e78
 80087c4:	20000010 	.word	0x20000010
 80087c8:	200229f8 	.word	0x200229f8
 80087cc:	08008785 	.word	0x08008785

080087d0 <LCD_GetpPalConvTableUncached>:
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	b320      	cbz	r0, 8008820 <LCD_GetpPalConvTableUncached+0x50>
 80087d6:	6885      	ldr	r5, [r0, #8]
 80087d8:	b1dd      	cbz	r5, 8008812 <LCD_GetpPalConvTableUncached+0x42>
 80087da:	4e12      	ldr	r6, [pc, #72]	; (8008824 <LCD_GetpPalConvTableUncached+0x54>)
 80087dc:	6833      	ldr	r3, [r6, #0]
 80087de:	b1db      	cbz	r3, 8008818 <LCD_GetpPalConvTableUncached+0x48>
 80087e0:	6803      	ldr	r3, [r0, #0]
 80087e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e6:	dc1a      	bgt.n	800881e <LCD_GetpPalConvTableUncached+0x4e>
 80087e8:	4a0f      	ldr	r2, [pc, #60]	; (8008828 <LCD_GetpPalConvTableUncached+0x58>)
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	2400      	movs	r4, #0
 80087ee:	429a      	cmp	r2, r3
 80087f0:	bfb4      	ite	lt
 80087f2:	4690      	movlt	r8, r2
 80087f4:	4698      	movge	r8, r3
 80087f6:	4544      	cmp	r4, r8
 80087f8:	da08      	bge.n	800880c <LCD_GetpPalConvTableUncached+0x3c>
 80087fa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80087fe:	6837      	ldr	r7, [r6, #0]
 8008800:	f000 fb34 	bl	8008e6c <LCD_Color2Index>
 8008804:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8008808:	3401      	adds	r4, #1
 800880a:	e7f4      	b.n	80087f6 <LCD_GetpPalConvTableUncached+0x26>
 800880c:	6830      	ldr	r0, [r6, #0]
 800880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008812:	4628      	mov	r0, r5
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008818:	4618      	mov	r0, r3
 800881a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881e:	2000      	movs	r0, #0
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	20022e78 	.word	0x20022e78
 8008828:	20000010 	.word	0x20000010

0800882c <LCD_GetpPalConvTable>:
 800882c:	f7ff bfd0 	b.w	80087d0 <LCD_GetpPalConvTableUncached>

08008830 <LCD_GetpPalConvTableBM>:
 8008830:	f7ff bfce 	b.w	80087d0 <LCD_GetpPalConvTableUncached>

08008834 <LCD_InitLUT>:
 8008834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	f004 fdee 	bl	800d418 <LCD_GetNumLayers>
 800883c:	2400      	movs	r4, #0
 800883e:	4680      	mov	r8, r0
 8008840:	4544      	cmp	r4, r8
 8008842:	da2c      	bge.n	800889e <LCD_InitLUT+0x6a>
 8008844:	4620      	mov	r0, r4
 8008846:	f001 f847 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800884a:	b330      	cbz	r0, 800889a <LCD_InitLUT+0x66>
 800884c:	4e15      	ldr	r6, [pc, #84]	; (80088a4 <LCD_InitLUT+0x70>)
 800884e:	6833      	ldr	r3, [r6, #0]
 8008850:	4620      	mov	r0, r4
 8008852:	f893 9011 	ldrb.w	r9, [r3, #17]
 8008856:	745c      	strb	r4, [r3, #17]
 8008858:	f7ff febc 	bl	80085d4 <LCD_GetBitsPerPixelEx>
 800885c:	2808      	cmp	r0, #8
 800885e:	dd03      	ble.n	8008868 <LCD_InitLUT+0x34>
 8008860:	6833      	ldr	r3, [r6, #0]
 8008862:	f883 9011 	strb.w	r9, [r3, #17]
 8008866:	e018      	b.n	800889a <LCD_InitLUT+0x66>
 8008868:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <LCD_InitLUT+0x74>)
 800886a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <LCD_InitLUT+0x78>)
 8008872:	429a      	cmp	r2, r3
 8008874:	d0f4      	beq.n	8008860 <LCD_InitLUT+0x2c>
 8008876:	4620      	mov	r0, r4
 8008878:	f7ff feaf 	bl	80085da <LCD_GetNumColorsEx>
 800887c:	2500      	movs	r5, #0
 800887e:	4682      	mov	sl, r0
 8008880:	4555      	cmp	r5, sl
 8008882:	daed      	bge.n	8008860 <LCD_InitLUT+0x2c>
 8008884:	b2ef      	uxtb	r7, r5
 8008886:	4638      	mov	r0, r7
 8008888:	f000 fb00 	bl	8008e8c <LCD_Index2Color>
 800888c:	4639      	mov	r1, r7
 800888e:	4602      	mov	r2, r0
 8008890:	4620      	mov	r0, r4
 8008892:	f7ff fe2b 	bl	80084ec <LCD_SetLUTEntryEx>
 8008896:	3501      	adds	r5, #1
 8008898:	e7f2      	b.n	8008880 <LCD_InitLUT+0x4c>
 800889a:	3401      	adds	r4, #1
 800889c:	e7d0      	b.n	8008840 <LCD_InitLUT+0xc>
 800889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a2:	bf00      	nop
 80088a4:	20000020 	.word	0x20000020
 80088a8:	20022eac 	.word	0x20022eac
 80088ac:	0808032c 	.word	0x0808032c

080088b0 <_SetDrawMode>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <_SetDrawMode+0x24>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	7c1a      	ldrb	r2, [r3, #16]
 80088b8:	ea80 0102 	eor.w	r1, r0, r2
 80088bc:	0749      	lsls	r1, r1, #29
 80088be:	d505      	bpl.n	80088cc <_SetDrawMode+0x1c>
 80088c0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80088c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80088c4:	6826      	ldr	r6, [r4, #0]
 80088c6:	680d      	ldr	r5, [r1, #0]
 80088c8:	6025      	str	r5, [r4, #0]
 80088ca:	600e      	str	r6, [r1, #0]
 80088cc:	7418      	strb	r0, [r3, #16]
 80088ce:	4610      	mov	r0, r2
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	bf00      	nop
 80088d4:	20000020 	.word	0x20000020

080088d8 <LCD_SetDrawMode>:
 80088d8:	b508      	push	{r3, lr}
 80088da:	4b02      	ldr	r3, [pc, #8]	; (80088e4 <LCD_SetDrawMode+0xc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4798      	blx	r3
 80088e2:	bd08      	pop	{r3, pc}
 80088e4:	20000014 	.word	0x20000014

080088e8 <LCD_DrawPixel>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4b14      	ldr	r3, [pc, #80]	; (800893c <LCD_DrawPixel+0x54>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	460a      	mov	r2, r1
 80088f0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80088f4:	428a      	cmp	r2, r1
 80088f6:	4604      	mov	r4, r0
 80088f8:	db1e      	blt.n	8008938 <LCD_DrawPixel+0x50>
 80088fa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80088fe:	428a      	cmp	r2, r1
 8008900:	dc1a      	bgt.n	8008938 <LCD_DrawPixel+0x50>
 8008902:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8008906:	4288      	cmp	r0, r1
 8008908:	db16      	blt.n	8008938 <LCD_DrawPixel+0x50>
 800890a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800890e:	4288      	cmp	r0, r1
 8008910:	dc12      	bgt.n	8008938 <LCD_DrawPixel+0x50>
 8008912:	7c19      	ldrb	r1, [r3, #16]
 8008914:	7c58      	ldrb	r0, [r3, #17]
 8008916:	f011 0f01 	tst.w	r1, #1
 800891a:	4909      	ldr	r1, [pc, #36]	; (8008940 <LCD_DrawPixel+0x58>)
 800891c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008920:	d004      	beq.n	800892c <LCD_DrawPixel+0x44>
 8008922:	68c3      	ldr	r3, [r0, #12]
 8008924:	4621      	mov	r1, r4
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	4798      	blx	r3
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	68c1      	ldr	r1, [r0, #12]
 800892e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008930:	698d      	ldr	r5, [r1, #24]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4621      	mov	r1, r4
 8008936:	47a8      	blx	r5
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop
 800893c:	20000020 	.word	0x20000020
 8008940:	20022eac 	.word	0x20022eac

08008944 <LCD_DrawHLine>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <LCD_DrawHLine+0x44>)
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800894e:	4299      	cmp	r1, r3
 8008950:	460d      	mov	r5, r1
 8008952:	db17      	blt.n	8008984 <LCD_DrawHLine+0x40>
 8008954:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008958:	4299      	cmp	r1, r3
 800895a:	dc13      	bgt.n	8008984 <LCD_DrawHLine+0x40>
 800895c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008964:	4288      	cmp	r0, r1
 8008966:	bfa8      	it	ge
 8008968:	4601      	movge	r1, r0
 800896a:	429a      	cmp	r2, r3
 800896c:	bfb8      	it	lt
 800896e:	4613      	movlt	r3, r2
 8008970:	428b      	cmp	r3, r1
 8008972:	db07      	blt.n	8008984 <LCD_DrawHLine+0x40>
 8008974:	7c60      	ldrb	r0, [r4, #17]
 8008976:	4a05      	ldr	r2, [pc, #20]	; (800898c <LCD_DrawHLine+0x48>)
 8008978:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800897c:	68c2      	ldr	r2, [r0, #12]
 800897e:	6894      	ldr	r4, [r2, #8]
 8008980:	462a      	mov	r2, r5
 8008982:	47a0      	blx	r4
 8008984:	bd38      	pop	{r3, r4, r5, pc}
 8008986:	bf00      	nop
 8008988:	20000020 	.word	0x20000020
 800898c:	20022eac 	.word	0x20022eac

08008990 <LCD_FillRect>:
 8008990:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008992:	460e      	mov	r6, r1
 8008994:	4912      	ldr	r1, [pc, #72]	; (80089e0 <LCD_FillRect+0x50>)
 8008996:	680c      	ldr	r4, [r1, #0]
 8008998:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800899c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089a0:	4288      	cmp	r0, r1
 80089a2:	bfa8      	it	ge
 80089a4:	4601      	movge	r1, r0
 80089a6:	42aa      	cmp	r2, r5
 80089a8:	bfb8      	it	lt
 80089aa:	4615      	movlt	r5, r2
 80089ac:	428d      	cmp	r5, r1
 80089ae:	db14      	blt.n	80089da <LCD_FillRect+0x4a>
 80089b0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80089b4:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80089b8:	4296      	cmp	r6, r2
 80089ba:	bfa8      	it	ge
 80089bc:	4632      	movge	r2, r6
 80089be:	4283      	cmp	r3, r0
 80089c0:	bfa8      	it	ge
 80089c2:	4603      	movge	r3, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	db08      	blt.n	80089da <LCD_FillRect+0x4a>
 80089c8:	7c64      	ldrb	r4, [r4, #17]
 80089ca:	4806      	ldr	r0, [pc, #24]	; (80089e4 <LCD_FillRect+0x54>)
 80089cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80089d0:	68c4      	ldr	r4, [r0, #12]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	6924      	ldr	r4, [r4, #16]
 80089d6:	462b      	mov	r3, r5
 80089d8:	47a0      	blx	r4
 80089da:	b002      	add	sp, #8
 80089dc:	bd70      	pop	{r4, r5, r6, pc}
 80089de:	bf00      	nop
 80089e0:	20000020 	.word	0x20000020
 80089e4:	20022eac 	.word	0x20022eac

080089e8 <LCD__DrawBitmap_1bpp>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8008b9c <LCD__DrawBitmap_1bpp+0x1b4>
 80089f0:	b08f      	sub	sp, #60	; 0x3c
 80089f2:	f8dc c000 	ldr.w	ip, [ip]
 80089f6:	9009      	str	r0, [sp, #36]	; 0x24
 80089f8:	460e      	mov	r6, r1
 80089fa:	4615      	mov	r5, r2
 80089fc:	469b      	mov	fp, r3
 80089fe:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008a00:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008a04:	f1bc 0f00 	cmp.w	ip, #0
 8008a08:	d00d      	beq.n	8008a26 <LCD__DrawBitmap_1bpp+0x3e>
 8008a0a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008a0c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008a0e:	9500      	str	r5, [sp, #0]
 8008a10:	9601      	str	r6, [sp, #4]
 8008a12:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008a14:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008a16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008a18:	9702      	str	r7, [sp, #8]
 8008a1a:	9503      	str	r5, [sp, #12]
 8008a1c:	9404      	str	r4, [sp, #16]
 8008a1e:	9605      	str	r6, [sp, #20]
 8008a20:	f8dc 4000 	ldr.w	r4, [ip]
 8008a24:	e053      	b.n	8008ace <LCD__DrawBitmap_1bpp+0xe6>
 8008a26:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008a28:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008a2a:	ea47 0300 	orr.w	r3, r7, r0
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d14f      	bne.n	8008ad2 <LCD__DrawBitmap_1bpp+0xea>
 8008a32:	4b58      	ldr	r3, [pc, #352]	; (8008b94 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008a3a:	1a51      	subs	r1, r2, r1
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	dd08      	ble.n	8008a52 <LCD__DrawBitmap_1bpp+0x6a>
 8008a40:	ebc1 030b 	rsb	r3, r1, fp
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f340 80a2 	ble.w	8008b8e <LCD__DrawBitmap_1bpp+0x1a6>
 8008a4a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008a4c:	fb07 4401 	mla	r4, r7, r1, r4
 8008a50:	e001      	b.n	8008a56 <LCD__DrawBitmap_1bpp+0x6e>
 8008a52:	465b      	mov	r3, fp
 8008a54:	4632      	mov	r2, r6
 8008a56:	445e      	add	r6, fp
 8008a58:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8008a5c:	3e01      	subs	r6, #1
 8008a5e:	1a76      	subs	r6, r6, r1
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd03      	ble.n	8008a6c <LCD__DrawBitmap_1bpp+0x84>
 8008a64:	1b9b      	subs	r3, r3, r6
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f340 8091 	ble.w	8008b8e <LCD__DrawBitmap_1bpp+0x1a6>
 8008a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a6e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8008a72:	4429      	add	r1, r5
 8008a74:	3901      	subs	r1, #1
 8008a76:	1b89      	subs	r1, r1, r6
 8008a78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a7a:	2900      	cmp	r1, #0
 8008a7c:	bfc8      	it	gt
 8008a7e:	ebc1 0505 	rsbgt	r5, r1, r5
 8008a82:	ebc8 0106 	rsb	r1, r8, r6
 8008a86:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8008a8a:	42b1      	cmp	r1, r6
 8008a8c:	da0c      	bge.n	8008aa8 <LCD__DrawBitmap_1bpp+0xc0>
 8008a8e:	ebc1 0c06 	rsb	ip, r1, r6
 8008a92:	eb08 070c 	add.w	r7, r8, ip
 8008a96:	1b8e      	subs	r6, r1, r6
 8008a98:	f02c 0c07 	bic.w	ip, ip, #7
 8008a9c:	4435      	add	r5, r6
 8008a9e:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 8008aa2:	4461      	add	r1, ip
 8008aa4:	f007 0807 	and.w	r8, r7, #7
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	dd70      	ble.n	8008b8e <LCD__DrawBitmap_1bpp+0x1a6>
 8008aac:	7c46      	ldrb	r6, [r0, #17]
 8008aae:	483a      	ldr	r0, [pc, #232]	; (8008b98 <LCD__DrawBitmap_1bpp+0x1b0>)
 8008ab0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008ab2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8008ab6:	68c6      	ldr	r6, [r0, #12]
 8008ab8:	9701      	str	r7, [sp, #4]
 8008aba:	9403      	str	r4, [sp, #12]
 8008abc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008abe:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	9702      	str	r7, [sp, #8]
 8008ac4:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ac8:	9405      	str	r4, [sp, #20]
 8008aca:	6874      	ldr	r4, [r6, #4]
 8008acc:	462b      	mov	r3, r5
 8008ace:	47a0      	blx	r4
 8008ad0:	e05d      	b.n	8008b8e <LCD__DrawBitmap_1bpp+0x1a6>
 8008ad2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008ad4:	f1c7 0708 	rsb	r7, r7, #8
 8008ad8:	970c      	str	r7, [sp, #48]	; 0x30
 8008ada:	4667      	mov	r7, ip
 8008adc:	45dc      	cmp	ip, fp
 8008ade:	da56      	bge.n	8008b8e <LCD__DrawBitmap_1bpp+0x1a6>
 8008ae0:	4b2c      	ldr	r3, [pc, #176]	; (8008b94 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008ae2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4430      	add	r0, r6
 8008ae8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008aec:	900a      	str	r0, [sp, #40]	; 0x28
 8008aee:	1e41      	subs	r1, r0, #1
 8008af0:	4291      	cmp	r1, r2
 8008af2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008af4:	db45      	blt.n	8008b82 <LCD__DrawBitmap_1bpp+0x19a>
 8008af6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008afa:	429e      	cmp	r6, r3
 8008afc:	dc41      	bgt.n	8008b82 <LCD__DrawBitmap_1bpp+0x19a>
 8008afe:	f04f 0800 	mov.w	r8, #0
 8008b02:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b06:	9408      	str	r4, [sp, #32]
 8008b08:	46c2      	mov	sl, r8
 8008b0a:	45aa      	cmp	sl, r5
 8008b0c:	da39      	bge.n	8008b82 <LCD__DrawBitmap_1bpp+0x19a>
 8008b0e:	f1b8 0f00 	cmp.w	r8, #0
 8008b12:	d105      	bne.n	8008b20 <LCD__DrawBitmap_1bpp+0x138>
 8008b14:	9a08      	ldr	r2, [sp, #32]
 8008b16:	7817      	ldrb	r7, [r2, #0]
 8008b18:	3201      	adds	r2, #1
 8008b1a:	9208      	str	r2, [sp, #32]
 8008b1c:	f04f 0808 	mov.w	r8, #8
 8008b20:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b22:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008b26:	fa47 f300 	asr.w	r3, r7, r0
 8008b2a:	ebc1 0808 	rsb	r8, r1, r8
 8008b2e:	408f      	lsls	r7, r1
 8008b30:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8008b34:	b2ff      	uxtb	r7, r7
 8008b36:	d103      	bne.n	8008b40 <LCD__DrawBitmap_1bpp+0x158>
 8008b38:	6810      	ldr	r0, [r2, #0]
 8008b3a:	7c00      	ldrb	r0, [r0, #16]
 8008b3c:	0780      	lsls	r0, r0, #30
 8008b3e:	d41b      	bmi.n	8008b78 <LCD__DrawBitmap_1bpp+0x190>
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b44:	6810      	ldr	r0, [r2, #0]
 8008b46:	900d      	str	r0, [sp, #52]	; 0x34
 8008b48:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008b4a:	b110      	cbz	r0, 8008b52 <LCD__DrawBitmap_1bpp+0x16a>
 8008b4c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008b50:	e000      	b.n	8008b54 <LCD__DrawBitmap_1bpp+0x16c>
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	1e4a      	subs	r2, r1, #1
 8008b5a:	444a      	add	r2, r9
 8008b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b5e:	f8cd c01c 	str.w	ip, [sp, #28]
 8008b62:	4648      	mov	r0, r9
 8008b64:	4631      	mov	r1, r6
 8008b66:	f7ff ff13 	bl	8008990 <LCD_FillRect>
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b7a:	f10a 0a01 	add.w	sl, sl, #1
 8008b7e:	4499      	add	r9, r3
 8008b80:	e7c3      	b.n	8008b0a <LCD__DrawBitmap_1bpp+0x122>
 8008b82:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008b84:	f10c 0c01 	add.w	ip, ip, #1
 8008b88:	4434      	add	r4, r6
 8008b8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008b8c:	e7a6      	b.n	8008adc <LCD__DrawBitmap_1bpp+0xf4>
 8008b8e:	b00f      	add	sp, #60	; 0x3c
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b94:	20000020 	.word	0x20000020
 8008b98:	20022eac 	.word	0x20022eac
 8008b9c:	20022e80 	.word	0x20022e80

08008ba0 <LCD_DrawBitmap>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8008db4 <LCD_DrawBitmap+0x214>
 8008ba8:	b091      	sub	sp, #68	; 0x44
 8008baa:	f8dc 9000 	ldr.w	r9, [ip]
 8008bae:	9207      	str	r2, [sp, #28]
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	4688      	mov	r8, r1
 8008bb4:	469b      	mov	fp, r3
 8008bb6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8008bb8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008bba:	f1b9 0f00 	cmp.w	r9, #0
 8008bbe:	d00c      	beq.n	8008bda <LCD_DrawBitmap+0x3a>
 8008bc0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008bc2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008bc4:	9500      	str	r5, [sp, #0]
 8008bc6:	9701      	str	r7, [sp, #4]
 8008bc8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008bca:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008bcc:	9602      	str	r6, [sp, #8]
 8008bce:	9503      	str	r5, [sp, #12]
 8008bd0:	9404      	str	r4, [sp, #16]
 8008bd2:	9705      	str	r7, [sp, #20]
 8008bd4:	f8d9 4000 	ldr.w	r4, [r9]
 8008bd8:	e081      	b.n	8008cde <LCD_DrawBitmap+0x13e>
 8008bda:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008bdc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008bde:	ea47 0300 	orr.w	r3, r7, r0
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d17d      	bne.n	8008ce2 <LCD_DrawBitmap+0x142>
 8008be6:	4b71      	ldr	r3, [pc, #452]	; (8008dac <LCD_DrawBitmap+0x20c>)
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008bee:	1a53      	subs	r3, r2, r1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dd08      	ble.n	8008c06 <LCD_DrawBitmap+0x66>
 8008bf4:	ebc3 010b 	rsb	r1, r3, fp
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	f340 80d4 	ble.w	8008da6 <LCD_DrawBitmap+0x206>
 8008bfe:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008c00:	fb07 4403 	mla	r4, r7, r3, r4
 8008c04:	e001      	b.n	8008c0a <LCD_DrawBitmap+0x6a>
 8008c06:	4659      	mov	r1, fp
 8008c08:	4642      	mov	r2, r8
 8008c0a:	44d8      	add	r8, fp
 8008c0c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8008c10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c14:	ebc3 0808 	rsb	r8, r3, r8
 8008c18:	f1b8 0f00 	cmp.w	r8, #0
 8008c1c:	dd04      	ble.n	8008c28 <LCD_DrawBitmap+0x88>
 8008c1e:	ebc8 0101 	rsb	r1, r8, r1
 8008c22:	2900      	cmp	r1, #0
 8008c24:	f340 80bf 	ble.w	8008da6 <LCD_DrawBitmap+0x206>
 8008c28:	9b07      	ldr	r3, [sp, #28]
 8008c2a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8008c2e:	442b      	add	r3, r5
 8008c30:	3b01      	subs	r3, #1
 8008c32:	ebcc 0303 	rsb	r3, ip, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dd02      	ble.n	8008c40 <LCD_DrawBitmap+0xa0>
 8008c3a:	9f07      	ldr	r7, [sp, #28]
 8008c3c:	1aff      	subs	r7, r7, r3
 8008c3e:	9707      	str	r7, [sp, #28]
 8008c40:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8008c44:	4565      	cmp	r5, ip
 8008c46:	da33      	bge.n	8008cb0 <LCD_DrawBitmap+0x110>
 8008c48:	9f07      	ldr	r7, [sp, #28]
 8008c4a:	ebc5 030c 	rsb	r3, r5, ip
 8008c4e:	1aff      	subs	r7, r7, r3
 8008c50:	2e08      	cmp	r6, #8
 8008c52:	9707      	str	r7, [sp, #28]
 8008c54:	d027      	beq.n	8008ca6 <LCD_DrawBitmap+0x106>
 8008c56:	dc0d      	bgt.n	8008c74 <LCD_DrawBitmap+0xd4>
 8008c58:	2e02      	cmp	r6, #2
 8008c5a:	d014      	beq.n	8008c86 <LCD_DrawBitmap+0xe6>
 8008c5c:	2e04      	cmp	r6, #4
 8008c5e:	d01a      	beq.n	8008c96 <LCD_DrawBitmap+0xf6>
 8008c60:	2e01      	cmp	r6, #1
 8008c62:	d126      	bne.n	8008cb2 <LCD_DrawBitmap+0x112>
 8008c64:	f023 0c07 	bic.w	ip, r3, #7
 8008c68:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8008c6c:	4465      	add	r5, ip
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	e01e      	b.n	8008cb2 <LCD_DrawBitmap+0x112>
 8008c74:	2e18      	cmp	r6, #24
 8008c76:	d018      	beq.n	8008caa <LCD_DrawBitmap+0x10a>
 8008c78:	2e20      	cmp	r6, #32
 8008c7a:	d016      	beq.n	8008caa <LCD_DrawBitmap+0x10a>
 8008c7c:	2e10      	cmp	r6, #16
 8008c7e:	d118      	bne.n	8008cb2 <LCD_DrawBitmap+0x112>
 8008c80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008c84:	e013      	b.n	8008cae <LCD_DrawBitmap+0x10e>
 8008c86:	f023 0c03 	bic.w	ip, r3, #3
 8008c8a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8008c8e:	4465      	add	r5, ip
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	e00d      	b.n	8008cb2 <LCD_DrawBitmap+0x112>
 8008c96:	f023 0c01 	bic.w	ip, r3, #1
 8008c9a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8008c9e:	4465      	add	r5, ip
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	e005      	b.n	8008cb2 <LCD_DrawBitmap+0x112>
 8008ca6:	441c      	add	r4, r3
 8008ca8:	e001      	b.n	8008cae <LCD_DrawBitmap+0x10e>
 8008caa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008cae:	4665      	mov	r5, ip
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9f07      	ldr	r7, [sp, #28]
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	dd76      	ble.n	8008da6 <LCD_DrawBitmap+0x206>
 8008cb8:	f890 e011 	ldrb.w	lr, [r0, #17]
 8008cbc:	483c      	ldr	r0, [pc, #240]	; (8008db0 <LCD_DrawBitmap+0x210>)
 8008cbe:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008cc0:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8008cc4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8008cc8:	9403      	str	r4, [sp, #12]
 8008cca:	e88d 0042 	stmia.w	sp, {r1, r6}
 8008cce:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	9702      	str	r7, [sp, #8]
 8008cd4:	9405      	str	r4, [sp, #20]
 8008cd6:	f8de 4004 	ldr.w	r4, [lr, #4]
 8008cda:	9b07      	ldr	r3, [sp, #28]
 8008cdc:	4629      	mov	r1, r5
 8008cde:	47a0      	blx	r4
 8008ce0:	e061      	b.n	8008da6 <LCD_DrawBitmap+0x206>
 8008ce2:	f1c6 0708 	rsb	r7, r6, #8
 8008ce6:	970e      	str	r7, [sp, #56]	; 0x38
 8008ce8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8008cec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008cee:	455f      	cmp	r7, fp
 8008cf0:	da59      	bge.n	8008da6 <LCD_DrawBitmap+0x206>
 8008cf2:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <LCD_DrawBitmap+0x20c>)
 8008cf4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4447      	add	r7, r8
 8008cfa:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008cfe:	970c      	str	r7, [sp, #48]	; 0x30
 8008d00:	3f01      	subs	r7, #1
 8008d02:	4297      	cmp	r7, r2
 8008d04:	970d      	str	r7, [sp, #52]	; 0x34
 8008d06:	db46      	blt.n	8008d96 <LCD_DrawBitmap+0x1f6>
 8008d08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d0c:	4598      	cmp	r8, r3
 8008d0e:	dc42      	bgt.n	8008d96 <LCD_DrawBitmap+0x1f6>
 8008d10:	f04f 0a00 	mov.w	sl, #0
 8008d14:	940b      	str	r4, [sp, #44]	; 0x2c
 8008d16:	46ac      	mov	ip, r5
 8008d18:	4657      	mov	r7, sl
 8008d1a:	9807      	ldr	r0, [sp, #28]
 8008d1c:	4287      	cmp	r7, r0
 8008d1e:	da3a      	bge.n	8008d96 <LCD_DrawBitmap+0x1f6>
 8008d20:	f1ba 0f00 	cmp.w	sl, #0
 8008d24:	d106      	bne.n	8008d34 <LCD_DrawBitmap+0x194>
 8008d26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008d28:	f890 9000 	ldrb.w	r9, [r0]
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d30:	f04f 0a08 	mov.w	sl, #8
 8008d34:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008d36:	4a1d      	ldr	r2, [pc, #116]	; (8008dac <LCD_DrawBitmap+0x20c>)
 8008d38:	fa49 f301 	asr.w	r3, r9, r1
 8008d3c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8008d40:	fa09 f906 	lsl.w	r9, r9, r6
 8008d44:	fa5f f989 	uxtb.w	r9, r9
 8008d48:	ebc6 0a0a 	rsb	sl, r6, sl
 8008d4c:	d103      	bne.n	8008d56 <LCD_DrawBitmap+0x1b6>
 8008d4e:	6810      	ldr	r0, [r2, #0]
 8008d50:	7c00      	ldrb	r0, [r0, #16]
 8008d52:	0780      	lsls	r0, r0, #30
 8008d54:	d41b      	bmi.n	8008d8e <LCD_DrawBitmap+0x1ee>
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d5a:	6810      	ldr	r0, [r2, #0]
 8008d5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008d60:	b110      	cbz	r0, 8008d68 <LCD_DrawBitmap+0x1c8>
 8008d62:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008d66:	e000      	b.n	8008d6a <LCD_DrawBitmap+0x1ca>
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	1e4a      	subs	r2, r1, #1
 8008d70:	4462      	add	r2, ip
 8008d72:	4660      	mov	r0, ip
 8008d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d76:	f8cd c020 	str.w	ip, [sp, #32]
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	f7ff fe08 	bl	8008990 <LCD_FillRect>
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <LCD_DrawBitmap+0x20c>)
 8008d82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008d90:	3701      	adds	r7, #1
 8008d92:	449c      	add	ip, r3
 8008d94:	e7c1      	b.n	8008d1a <LCD_DrawBitmap+0x17a>
 8008d96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008d98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8008d9c:	3701      	adds	r7, #1
 8008d9e:	970a      	str	r7, [sp, #40]	; 0x28
 8008da0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008da2:	443c      	add	r4, r7
 8008da4:	e7a2      	b.n	8008cec <LCD_DrawBitmap+0x14c>
 8008da6:	b011      	add	sp, #68	; 0x44
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dac:	20000020 	.word	0x20000020
 8008db0:	20022eac 	.word	0x20022eac
 8008db4:	20022e80 	.word	0x20022e80

08008db8 <LCD_SetClipRectMax>:
 8008db8:	b508      	push	{r3, lr}
 8008dba:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <LCD_SetClipRectMax+0x18>)
 8008dbc:	6819      	ldr	r1, [r3, #0]
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <LCD_SetClipRectMax+0x1c>)
 8008dc0:	7c4a      	ldrb	r2, [r1, #17]
 8008dc2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008dc6:	68c3      	ldr	r3, [r0, #12]
 8008dc8:	3108      	adds	r1, #8
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	4798      	blx	r3
 8008dce:	bd08      	pop	{r3, pc}
 8008dd0:	20000020 	.word	0x20000020
 8008dd4:	20022eac 	.word	0x20022eac

08008dd8 <emWin_LCD_Init>:
 8008dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dda:	f7ff ffed 	bl	8008db8 <LCD_SetClipRectMax>
 8008dde:	f7ff fcdb 	bl	8008798 <LCD_InitColors>
 8008de2:	4604      	mov	r4, r0
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d13d      	bne.n	8008e64 <emWin_LCD_Init+0x8c>
 8008de8:	4605      	mov	r5, r0
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 fd74 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008df0:	9001      	str	r0, [sp, #4]
 8008df2:	b148      	cbz	r0, 8008e08 <emWin_LCD_Init+0x30>
 8008df4:	68c3      	ldr	r3, [r0, #12]
 8008df6:	210c      	movs	r1, #12
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	a801      	add	r0, sp, #4
 8008dfc:	4798      	blx	r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	b370      	cbz	r0, 8008e60 <emWin_LCD_Init+0x88>
 8008e02:	9801      	ldr	r0, [sp, #4]
 8008e04:	4798      	blx	r3
 8008e06:	4304      	orrs	r4, r0
 8008e08:	3501      	adds	r5, #1
 8008e0a:	2d02      	cmp	r5, #2
 8008e0c:	d1ed      	bne.n	8008dea <emWin_LCD_Init+0x12>
 8008e0e:	bb4c      	cbnz	r4, 8008e64 <emWin_LCD_Init+0x8c>
 8008e10:	f7ff fd10 	bl	8008834 <LCD_InitLUT>
 8008e14:	2401      	movs	r4, #1
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fd5e 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 8008e1c:	9001      	str	r0, [sp, #4]
 8008e1e:	b1d0      	cbz	r0, 8008e56 <emWin_LCD_Init+0x7e>
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fac9 	bl	80093b8 <GUI_SelectLayer>
 8008e26:	2004      	movs	r0, #4
 8008e28:	f7ff fd56 	bl	80088d8 <LCD_SetDrawMode>
 8008e2c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8008e30:	2000      	movs	r0, #0
 8008e32:	4601      	mov	r1, r0
 8008e34:	4613      	mov	r3, r2
 8008e36:	f7ff fdab 	bl	8008990 <LCD_FillRect>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f7ff fd4c 	bl	80088d8 <LCD_SetDrawMode>
 8008e40:	a802      	add	r0, sp, #8
 8008e42:	210e      	movs	r1, #14
 8008e44:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	4798      	blx	r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	b108      	cbz	r0, 8008e56 <emWin_LCD_Init+0x7e>
 8008e52:	9801      	ldr	r0, [sp, #4]
 8008e54:	4798      	blx	r3
 8008e56:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8008e5a:	d2dc      	bcs.n	8008e16 <emWin_LCD_Init+0x3e>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e002      	b.n	8008e66 <emWin_LCD_Init+0x8e>
 8008e60:	2001      	movs	r0, #1
 8008e62:	e000      	b.n	8008e66 <emWin_LCD_Init+0x8e>
 8008e64:	4620      	mov	r0, r4
 8008e66:	b003      	add	sp, #12
 8008e68:	bd30      	pop	{r4, r5, pc}
	...

08008e6c <LCD_Color2Index>:
 8008e6c:	b508      	push	{r3, lr}
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <LCD_Color2Index+0x18>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	7c5a      	ldrb	r2, [r3, #17]
 8008e74:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <LCD_Color2Index+0x1c>)
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4798      	blx	r3
 8008e80:	bd08      	pop	{r3, pc}
 8008e82:	bf00      	nop
 8008e84:	20000020 	.word	0x20000020
 8008e88:	20022eac 	.word	0x20022eac

08008e8c <LCD_Index2Color>:
 8008e8c:	b508      	push	{r3, lr}
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <LCD_Index2Color+0x18>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	7c5a      	ldrb	r2, [r3, #17]
 8008e94:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <LCD_Index2Color+0x1c>)
 8008e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	4798      	blx	r3
 8008ea0:	bd08      	pop	{r3, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000020 	.word	0x20000020
 8008ea8:	20022eac 	.word	0x20022eac

08008eac <LCD_SetColorIndex>:
 8008eac:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <LCD_SetColorIndex+0x14>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	7c1a      	ldrb	r2, [r3, #16]
 8008eb2:	0752      	lsls	r2, r2, #29
 8008eb4:	bf4c      	ite	mi
 8008eb6:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8008eb8:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8008eba:	6018      	str	r0, [r3, #0]
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000020 	.word	0x20000020

08008ec4 <_SetColor>:
 8008ec4:	b508      	push	{r3, lr}
 8008ec6:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <_SetColor+0x1c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008ecc:	4281      	cmp	r1, r0
 8008ece:	d006      	beq.n	8008ede <_SetColor+0x1a>
 8008ed0:	6318      	str	r0, [r3, #48]	; 0x30
 8008ed2:	f7ff ffcb 	bl	8008e6c <LCD_Color2Index>
 8008ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008eda:	f7ff bfe7 	b.w	8008eac <LCD_SetColorIndex>
 8008ede:	bd08      	pop	{r3, pc}
 8008ee0:	20000020 	.word	0x20000020

08008ee4 <LCD_SetBkColorIndex>:
 8008ee4:	4b04      	ldr	r3, [pc, #16]	; (8008ef8 <LCD_SetBkColorIndex+0x14>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	7c1a      	ldrb	r2, [r3, #16]
 8008eea:	0752      	lsls	r2, r2, #29
 8008eec:	bf4c      	ite	mi
 8008eee:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8008ef0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8008ef2:	6018      	str	r0, [r3, #0]
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000020 	.word	0x20000020

08008efc <_SetBkColor>:
 8008efc:	b508      	push	{r3, lr}
 8008efe:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <_SetBkColor+0x1c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008f04:	4281      	cmp	r1, r0
 8008f06:	d006      	beq.n	8008f16 <_SetBkColor+0x1a>
 8008f08:	6358      	str	r0, [r3, #52]	; 0x34
 8008f0a:	f7ff ffaf 	bl	8008e6c <LCD_Color2Index>
 8008f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f12:	f7ff bfe7 	b.w	8008ee4 <LCD_SetBkColorIndex>
 8008f16:	bd08      	pop	{r3, pc}
 8008f18:	20000020 	.word	0x20000020

08008f1c <LCD_SetBkColor>:
 8008f1c:	b508      	push	{r3, lr}
 8008f1e:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <LCD_SetBkColor+0xc>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4798      	blx	r3
 8008f26:	bd08      	pop	{r3, pc}
 8008f28:	20000014 	.word	0x20000014

08008f2c <LCD_SetColor>:
 8008f2c:	b508      	push	{r3, lr}
 8008f2e:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <LCD_SetColor+0xc>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4798      	blx	r3
 8008f36:	bd08      	pop	{r3, pc}
 8008f38:	20000014 	.word	0x20000014

08008f3c <GUI__memset>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	b12a      	cbz	r2, 8008f4c <GUI__memset+0x10>
 8008f40:	0783      	lsls	r3, r0, #30
 8008f42:	d003      	beq.n	8008f4c <GUI__memset+0x10>
 8008f44:	f800 1b01 	strb.w	r1, [r0], #1
 8008f48:	3a01      	subs	r2, #1
 8008f4a:	e7f8      	b.n	8008f3e <GUI__memset+0x2>
 8008f4c:	0893      	lsrs	r3, r2, #2
 8008f4e:	d101      	bne.n	8008f54 <GUI__memset+0x18>
 8008f50:	4402      	add	r2, r0
 8008f52:	e017      	b.n	8008f84 <GUI__memset+0x48>
 8008f54:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8008f58:	f002 0203 	and.w	r2, r2, #3
 8008f5c:	434c      	muls	r4, r1
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	4605      	mov	r5, r0
 8008f62:	dd06      	ble.n	8008f72 <GUI__memset+0x36>
 8008f64:	6004      	str	r4, [r0, #0]
 8008f66:	6044      	str	r4, [r0, #4]
 8008f68:	6084      	str	r4, [r0, #8]
 8008f6a:	60c4      	str	r4, [r0, #12]
 8008f6c:	3b04      	subs	r3, #4
 8008f6e:	3010      	adds	r0, #16
 8008f70:	e7f5      	b.n	8008f5e <GUI__memset+0x22>
 8008f72:	461e      	mov	r6, r3
 8008f74:	b11b      	cbz	r3, 8008f7e <GUI__memset+0x42>
 8008f76:	f845 4b04 	str.w	r4, [r5], #4
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	e7fa      	b.n	8008f74 <GUI__memset+0x38>
 8008f7e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8008f82:	e7e5      	b.n	8008f50 <GUI__memset+0x14>
 8008f84:	4290      	cmp	r0, r2
 8008f86:	d002      	beq.n	8008f8e <GUI__memset+0x52>
 8008f88:	f800 1b01 	strb.w	r1, [r0], #1
 8008f8c:	e7fa      	b.n	8008f84 <GUI__memset+0x48>
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}

08008f90 <GUI__MixColors>:
 8008f90:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8008f94:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8008f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9a:	d027      	beq.n	8008fec <GUI__MixColors+0x5c>
 8008f9c:	43d3      	mvns	r3, r2
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	b2cd      	uxtb	r5, r1
 8008fa2:	b2c6      	uxtb	r6, r0
 8008fa4:	435d      	muls	r5, r3
 8008fa6:	fb02 5506 	mla	r5, r2, r6, r5
 8008faa:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8008fae:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 8008fb2:	435e      	muls	r6, r3
 8008fb4:	fb02 6604 	mla	r6, r2, r4, r6
 8008fb8:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 8008fbc:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 8008fc0:	435c      	muls	r4, r3
 8008fc2:	0e09      	lsrs	r1, r1, #24
 8008fc4:	0e00      	lsrs	r0, r0, #24
 8008fc6:	fb02 4407 	mla	r4, r2, r7, r4
 8008fca:	434b      	muls	r3, r1
 8008fcc:	0a36      	lsrs	r6, r6, #8
 8008fce:	fb02 3200 	mla	r2, r2, r0, r3
 8008fd2:	0a24      	lsrs	r4, r4, #8
 8008fd4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8008fd8:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 8008fdc:	4318      	orrs	r0, r3
 8008fde:	0412      	lsls	r2, r2, #16
 8008fe0:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8008fe4:	4318      	orrs	r0, r3
 8008fe6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008fea:	4310      	orrs	r0, r2
 8008fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fee <GUI__MixColorsBulk>:
 8008fee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8008ffa:	9303      	str	r3, [sp, #12]
 8008ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	9302      	str	r3, [sp, #8]
 8009002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009004:	460d      	mov	r5, r1
 8009006:	4616      	mov	r6, r2
 8009008:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800900c:	f04f 0900 	mov.w	r9, #0
 8009010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009012:	4599      	cmp	r9, r3
 8009014:	d024      	beq.n	8009060 <GUI__MixColorsBulk+0x72>
 8009016:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800901a:	4633      	mov	r3, r6
 800901c:	46ab      	mov	fp, r5
 800901e:	4627      	mov	r7, r4
 8009020:	f857 0b04 	ldr.w	r0, [r7], #4
 8009024:	9903      	ldr	r1, [sp, #12]
 8009026:	0e02      	lsrs	r2, r0, #24
 8009028:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800902c:	434a      	muls	r2, r1
 800902e:	21ff      	movs	r1, #255	; 0xff
 8009030:	fbb2 f2f1 	udiv	r2, r2, r1
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	f85b 1b04 	ldr.w	r1, [fp], #4
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	f7ff ffa8 	bl	8008f90 <GUI__MixColors>
 8009040:	9b01      	ldr	r3, [sp, #4]
 8009042:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009046:	f1b8 0801 	subs.w	r8, r8, #1
 800904a:	f843 0b04 	str.w	r0, [r3], #4
 800904e:	d1e7      	bne.n	8009020 <GUI__MixColorsBulk+0x32>
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	4455      	add	r5, sl
 8009054:	4454      	add	r4, sl
 8009056:	4456      	add	r6, sl
 8009058:	441d      	add	r5, r3
 800905a:	f109 0901 	add.w	r9, r9, #1
 800905e:	e7d7      	b.n	8009010 <GUI__MixColorsBulk+0x22>
 8009060:	b005      	add	sp, #20
 8009062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009068 <_OnExit>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	4c0a      	ldr	r4, [pc, #40]	; (8009094 <_OnExit+0x2c>)
 800906c:	4d0a      	ldr	r5, [pc, #40]	; (8009098 <_OnExit+0x30>)
 800906e:	6820      	ldr	r0, [r4, #0]
 8009070:	4e0a      	ldr	r6, [pc, #40]	; (800909c <_OnExit+0x34>)
 8009072:	f000 ffad 	bl	8009fd0 <GUI_ALLOC_FreeFixedBlock>
 8009076:	6828      	ldr	r0, [r5, #0]
 8009078:	f000 ffaa 	bl	8009fd0 <GUI_ALLOC_FreeFixedBlock>
 800907c:	6830      	ldr	r0, [r6, #0]
 800907e:	f000 ffa7 	bl	8009fd0 <GUI_ALLOC_FreeFixedBlock>
 8009082:	4a07      	ldr	r2, [pc, #28]	; (80090a0 <_OnExit+0x38>)
 8009084:	2300      	movs	r3, #0
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	4a06      	ldr	r2, [pc, #24]	; (80090a4 <_OnExit+0x3c>)
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	20022a04 	.word	0x20022a04
 8009098:	20022a00 	.word	0x20022a00
 800909c:	20022a08 	.word	0x20022a08
 80090a0:	20022a0c 	.word	0x20022a0c
 80090a4:	20022a1c 	.word	0x20022a1c

080090a8 <GUI__GetAlphaBuffer>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	461c      	mov	r4, r3
 80090ae:	4b28      	ldr	r3, [pc, #160]	; (8009150 <GUI__GetAlphaBuffer+0xa8>)
 80090b0:	4617      	mov	r7, r2
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4606      	mov	r6, r0
 80090b6:	4688      	mov	r8, r1
 80090b8:	b932      	cbnz	r2, 80090c8 <GUI__GetAlphaBuffer+0x20>
 80090ba:	2201      	movs	r2, #1
 80090bc:	4825      	ldr	r0, [pc, #148]	; (8009154 <GUI__GetAlphaBuffer+0xac>)
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	4b25      	ldr	r3, [pc, #148]	; (8009158 <GUI__GetAlphaBuffer+0xb0>)
 80090c2:	6003      	str	r3, [r0, #0]
 80090c4:	f000 fd48 	bl	8009b58 <GUI__RegisterExit>
 80090c8:	4d24      	ldr	r5, [pc, #144]	; (800915c <GUI__GetAlphaBuffer+0xb4>)
 80090ca:	682b      	ldr	r3, [r5, #0]
 80090cc:	b933      	cbnz	r3, 80090dc <GUI__GetAlphaBuffer+0x34>
 80090ce:	4b24      	ldr	r3, [pc, #144]	; (8009160 <GUI__GetAlphaBuffer+0xb8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	b913      	cbnz	r3, 80090dc <GUI__GetAlphaBuffer+0x34>
 80090d6:	f7ff fae5 	bl	80086a4 <LCD_GetVXSizeMax>
 80090da:	6028      	str	r0, [r5, #0]
 80090dc:	b10c      	cbz	r4, 80090e2 <GUI__GetAlphaBuffer+0x3a>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	b196      	cbz	r6, 800910a <GUI__GetAlphaBuffer+0x62>
 80090e4:	4b1f      	ldr	r3, [pc, #124]	; (8009164 <GUI__GetAlphaBuffer+0xbc>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	4699      	mov	r9, r3
 80090ea:	2400      	movs	r4, #0
 80090ec:	b94a      	cbnz	r2, 8009102 <GUI__GetAlphaBuffer+0x5a>
 80090ee:	6828      	ldr	r0, [r5, #0]
 80090f0:	0080      	lsls	r0, r0, #2
 80090f2:	f001 f8cd 	bl	800a290 <GUI_ALLOC_GetFixedBlock>
 80090f6:	f1d0 0401 	rsbs	r4, r0, #1
 80090fa:	f8c9 0000 	str.w	r0, [r9]
 80090fe:	bf38      	it	cc
 8009100:	2400      	movcc	r4, #0
 8009102:	f8d9 3000 	ldr.w	r3, [r9]
 8009106:	6033      	str	r3, [r6, #0]
 8009108:	e000      	b.n	800910c <GUI__GetAlphaBuffer+0x64>
 800910a:	4634      	mov	r4, r6
 800910c:	f1b8 0f00 	cmp.w	r8, #0
 8009110:	d00d      	beq.n	800912e <GUI__GetAlphaBuffer+0x86>
 8009112:	4e15      	ldr	r6, [pc, #84]	; (8009168 <GUI__GetAlphaBuffer+0xc0>)
 8009114:	6833      	ldr	r3, [r6, #0]
 8009116:	b93b      	cbnz	r3, 8009128 <GUI__GetAlphaBuffer+0x80>
 8009118:	6828      	ldr	r0, [r5, #0]
 800911a:	0080      	lsls	r0, r0, #2
 800911c:	f001 f8b8 	bl	800a290 <GUI_ALLOC_GetFixedBlock>
 8009120:	2800      	cmp	r0, #0
 8009122:	6030      	str	r0, [r6, #0]
 8009124:	bf08      	it	eq
 8009126:	2401      	moveq	r4, #1
 8009128:	6833      	ldr	r3, [r6, #0]
 800912a:	f8c8 3000 	str.w	r3, [r8]
 800912e:	b167      	cbz	r7, 800914a <GUI__GetAlphaBuffer+0xa2>
 8009130:	4e0e      	ldr	r6, [pc, #56]	; (800916c <GUI__GetAlphaBuffer+0xc4>)
 8009132:	6833      	ldr	r3, [r6, #0]
 8009134:	b93b      	cbnz	r3, 8009146 <GUI__GetAlphaBuffer+0x9e>
 8009136:	6828      	ldr	r0, [r5, #0]
 8009138:	0080      	lsls	r0, r0, #2
 800913a:	f001 f8a9 	bl	800a290 <GUI_ALLOC_GetFixedBlock>
 800913e:	2800      	cmp	r0, #0
 8009140:	6030      	str	r0, [r6, #0]
 8009142:	bf08      	it	eq
 8009144:	2401      	moveq	r4, #1
 8009146:	6833      	ldr	r3, [r6, #0]
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	4620      	mov	r0, r4
 800914c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009150:	20022a1c 	.word	0x20022a1c
 8009154:	20022a14 	.word	0x20022a14
 8009158:	08009069 	.word	0x08009069
 800915c:	20022a0c 	.word	0x20022a0c
 8009160:	20022eb4 	.word	0x20022eb4
 8009164:	20022a04 	.word	0x20022a04
 8009168:	20022a00 	.word	0x20022a00
 800916c:	20022a08 	.word	0x20022a08

08009170 <GUI__DoAlphaBlending>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	b093      	sub	sp, #76	; 0x4c
 8009176:	2400      	movs	r4, #0
 8009178:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800917a:	900b      	str	r0, [sp, #44]	; 0x2c
 800917c:	910c      	str	r1, [sp, #48]	; 0x30
 800917e:	4690      	mov	r8, r2
 8009180:	461f      	mov	r7, r3
 8009182:	6034      	str	r4, [r6, #0]
 8009184:	a80f      	add	r0, sp, #60	; 0x3c
 8009186:	a910      	add	r1, sp, #64	; 0x40
 8009188:	4622      	mov	r2, r4
 800918a:	ab11      	add	r3, sp, #68	; 0x44
 800918c:	f7ff ff8c 	bl	80090a8 <GUI__GetAlphaBuffer>
 8009190:	4605      	mov	r5, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	f040 80c3 	bne.w	800931e <GUI__DoAlphaBlending+0x1ae>
 8009198:	4c63      	ldr	r4, [pc, #396]	; (8009328 <GUI__DoAlphaBlending+0x1b8>)
 800919a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	7c58      	ldrb	r0, [r3, #17]
 80091a0:	4b62      	ldr	r3, [pc, #392]	; (800932c <GUI__DoAlphaBlending+0x1bc>)
 80091a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	4297      	cmp	r7, r2
 80091aa:	bfa8      	it	ge
 80091ac:	4617      	movge	r7, r2
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	920d      	str	r2, [sp, #52]	; 0x34
 80091b2:	970a      	str	r7, [sp, #40]	; 0x28
 80091b4:	f7ff fa36 	bl	8008624 <GUI_GetBitsPerPixelEx>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	9008      	str	r0, [sp, #32]
 80091bc:	7c58      	ldrb	r0, [r3, #17]
 80091be:	f7ff fa5b 	bl	8008678 <GUI_GetpfIndex2ColorEx>
 80091c2:	4b5b      	ldr	r3, [pc, #364]	; (8009330 <GUI__DoAlphaBlending+0x1c0>)
 80091c4:	9004      	str	r0, [sp, #16]
 80091c6:	4298      	cmp	r0, r3
 80091c8:	d005      	beq.n	80091d6 <GUI__DoAlphaBlending+0x66>
 80091ca:	4b5a      	ldr	r3, [pc, #360]	; (8009334 <GUI__DoAlphaBlending+0x1c4>)
 80091cc:	1ac3      	subs	r3, r0, r3
 80091ce:	bf18      	it	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	9306      	str	r3, [sp, #24]
 80091d4:	e000      	b.n	80091d8 <GUI__DoAlphaBlending+0x68>
 80091d6:	9506      	str	r5, [sp, #24]
 80091d8:	2500      	movs	r5, #0
 80091da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80091dc:	46ab      	mov	fp, r5
 80091de:	4643      	mov	r3, r8
 80091e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80091e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	4790      	blx	r2
 80091ea:	0e03      	lsrs	r3, r0, #24
 80091ec:	4681      	mov	r9, r0
 80091ee:	9309      	str	r3, [sp, #36]	; 0x24
 80091f0:	f000 8085 	beq.w	80092fe <GUI__DoAlphaBlending+0x18e>
 80091f4:	f1bb 0f00 	cmp.w	fp, #0
 80091f8:	d13f      	bne.n	800927a <GUI__DoAlphaBlending+0x10a>
 80091fa:	4b4b      	ldr	r3, [pc, #300]	; (8009328 <GUI__DoAlphaBlending+0x1b8>)
 80091fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009202:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009206:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800920a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800920c:	442f      	add	r7, r5
 800920e:	42bb      	cmp	r3, r7
 8009210:	bfc8      	it	gt
 8009212:	ebc7 0b03 	rsbgt	fp, r7, r3
 8009216:	eb0b 0a05 	add.w	sl, fp, r5
 800921a:	bfc8      	it	gt
 800921c:	461f      	movgt	r7, r3
 800921e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009220:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8009224:	4453      	add	r3, sl
 8009226:	4494      	add	ip, r2
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8009232:	4638      	mov	r0, r7
 8009234:	460b      	mov	r3, r1
 8009236:	f8cd c00c 	str.w	ip, [sp, #12]
 800923a:	f004 f8bd 	bl	800d3b8 <GUI_ReadRectEx>
 800923e:	9a08      	ldr	r2, [sp, #32]
 8009240:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009242:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009246:	2a17      	cmp	r2, #23
 8009248:	dc06      	bgt.n	8009258 <GUI__DoAlphaBlending+0xe8>
 800924a:	4450      	add	r0, sl
 800924c:	ebcb 0104 	rsb	r1, fp, r4
 8009250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009252:	f004 f9f7 	bl	800d644 <GUI__ExpandPixelIndicesEx>
 8009256:	e001      	b.n	800925c <GUI__DoAlphaBlending+0xec>
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	b913      	cbnz	r3, 8009262 <GUI__DoAlphaBlending+0xf2>
 800925c:	f04f 0b01 	mov.w	fp, #1
 8009260:	e00b      	b.n	800927a <GUI__DoAlphaBlending+0x10a>
 8009262:	ebc7 070c 	rsb	r7, r7, ip
 8009266:	4482      	add	sl, r0
 8009268:	f8da 0000 	ldr.w	r0, [sl]
 800926c:	9a04      	ldr	r2, [sp, #16]
 800926e:	4790      	blx	r2
 8009270:	3f01      	subs	r7, #1
 8009272:	f84a 0b04 	str.w	r0, [sl], #4
 8009276:	d1f7      	bne.n	8009268 <GUI__DoAlphaBlending+0xf8>
 8009278:	e7f0      	b.n	800925c <GUI__DoAlphaBlending+0xec>
 800927a:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <GUI__DoAlphaBlending+0x1c8>)
 800927c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800927e:	f8d3 c000 	ldr.w	ip, [r3]
 8009282:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009284:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8009288:	f1bc 0f00 	cmp.w	ip, #0
 800928c:	d024      	beq.n	80092d8 <GUI__DoAlphaBlending+0x168>
 800928e:	eb07 020a 	add.w	r2, r7, sl
 8009292:	4451      	add	r1, sl
 8009294:	9210      	str	r2, [sp, #64]	; 0x40
 8009296:	4623      	mov	r3, r4
 8009298:	910f      	str	r1, [sp, #60]	; 0x3c
 800929a:	4640      	mov	r0, r8
 800929c:	47e0      	blx	ip
 800929e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092a2:	2300      	movs	r3, #0
 80092a4:	f858 1003 	ldr.w	r1, [r8, r3]
 80092a8:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 80092ac:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80092b0:	58e8      	ldr	r0, [r5, r3]
 80092b2:	d101      	bne.n	80092b8 <GUI__DoAlphaBlending+0x148>
 80092b4:	50d0      	str	r0, [r2, r3]
 80092b6:	e005      	b.n	80092c4 <GUI__DoAlphaBlending+0x154>
 80092b8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80092bc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80092c0:	bf08      	it	eq
 80092c2:	50d1      	streq	r1, [r2, r3]
 80092c4:	3c01      	subs	r4, #1
 80092c6:	f103 0304 	add.w	r3, r3, #4
 80092ca:	d1eb      	bne.n	80092a4 <GUI__DoAlphaBlending+0x134>
 80092cc:	6833      	ldr	r3, [r6, #0]
 80092ce:	9710      	str	r7, [sp, #64]	; 0x40
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	e020      	b.n	800931a <GUI__DoAlphaBlending+0x1aa>
 80092d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092da:	2bff      	cmp	r3, #255	; 0xff
 80092dc:	d104      	bne.n	80092e8 <GUI__DoAlphaBlending+0x178>
 80092de:	f851 300a 	ldr.w	r3, [r1, sl]
 80092e2:	f847 300a 	str.w	r3, [r7, sl]
 80092e6:	e011      	b.n	800930c <GUI__DoAlphaBlending+0x19c>
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	f851 100a 	ldr.w	r1, [r1, sl]
 80092ee:	43da      	mvns	r2, r3
 80092f0:	4648      	mov	r0, r9
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	f7ff fe4c 	bl	8008f90 <GUI__MixColors>
 80092f8:	f847 000a 	str.w	r0, [r7, sl]
 80092fc:	e002      	b.n	8009304 <GUI__DoAlphaBlending+0x194>
 80092fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009300:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009304:	6833      	ldr	r3, [r6, #0]
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	6033      	str	r3, [r6, #0]
 800930c:	3c01      	subs	r4, #1
 800930e:	f105 0501 	add.w	r5, r5, #1
 8009312:	d002      	beq.n	800931a <GUI__DoAlphaBlending+0x1aa>
 8009314:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009318:	e761      	b.n	80091de <GUI__DoAlphaBlending+0x6e>
 800931a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800931c:	e000      	b.n	8009320 <GUI__DoAlphaBlending+0x1b0>
 800931e:	4620      	mov	r0, r4
 8009320:	b013      	add	sp, #76	; 0x4c
 8009322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009326:	bf00      	nop
 8009328:	20000020 	.word	0x20000020
 800932c:	20022eac 	.word	0x20022eac
 8009330:	0800a643 	.word	0x0800a643
 8009334:	0800a641 	.word	0x0800a641
 8009338:	20022a10 	.word	0x20022a10

0800933c <GUI__AllocAlphaBuffer>:
 800933c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800933e:	b108      	cbz	r0, 8009344 <GUI__AllocAlphaBuffer+0x8>
 8009340:	aa03      	add	r2, sp, #12
 8009342:	e000      	b.n	8009346 <GUI__AllocAlphaBuffer+0xa>
 8009344:	4602      	mov	r2, r0
 8009346:	a801      	add	r0, sp, #4
 8009348:	a902      	add	r1, sp, #8
 800934a:	2300      	movs	r3, #0
 800934c:	f7ff feac 	bl	80090a8 <GUI__GetAlphaBuffer>
 8009350:	b005      	add	sp, #20
 8009352:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009358 <GUI_SetFuncAlphaBlending>:
 8009358:	4b01      	ldr	r3, [pc, #4]	; (8009360 <GUI_SetFuncAlphaBlending+0x8>)
 800935a:	6018      	str	r0, [r3, #0]
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20022a10 	.word	0x20022a10

08009364 <GUI_SetFuncMixColors>:
 8009364:	4b01      	ldr	r3, [pc, #4]	; (800936c <GUI_SetFuncMixColors+0x8>)
 8009366:	6018      	str	r0, [r3, #0]
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	20000018 	.word	0x20000018

08009370 <GUI_SetFuncMixColorsBulk>:
 8009370:	4b01      	ldr	r3, [pc, #4]	; (8009378 <GUI_SetFuncMixColorsBulk+0x8>)
 8009372:	6018      	str	r0, [r3, #0]
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	2000001c 	.word	0x2000001c

0800937c <GUI_Delay>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4605      	mov	r5, r0
 8009380:	f7fb fbe0 	bl	8004b44 <GUI_X_GetTime>
 8009384:	4405      	add	r5, r0
 8009386:	f7fb fbdd 	bl	8004b44 <GUI_X_GetTime>
 800938a:	1a2c      	subs	r4, r5, r0
 800938c:	2c00      	cmp	r4, #0
 800938e:	dd08      	ble.n	80093a2 <GUI_Delay+0x26>
 8009390:	f000 f86a 	bl	8009468 <GUI_Exec>
 8009394:	2c05      	cmp	r4, #5
 8009396:	bfb4      	ite	lt
 8009398:	4620      	movlt	r0, r4
 800939a:	2005      	movge	r0, #5
 800939c:	f7fb fbde 	bl	8004b5c <GUI_X_Delay>
 80093a0:	e7f1      	b.n	8009386 <GUI_Delay+0xa>
 80093a2:	bd38      	pop	{r3, r4, r5, pc}

080093a4 <GUI_GetLayerPosEx>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	460d      	mov	r5, r1
 80093a8:	4614      	mov	r4, r2
 80093aa:	f7ff f8b7 	bl	800851c <LCD_GetPosEx>
 80093ae:	b110      	cbz	r0, 80093b6 <GUI_GetLayerPosEx+0x12>
 80093b0:	2300      	movs	r3, #0
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}

080093b8 <GUI_SelectLayer>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4d08      	ldr	r5, [pc, #32]	; (80093dc <GUI_SelectLayer+0x24>)
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	2801      	cmp	r0, #1
 80093c0:	4604      	mov	r4, r0
 80093c2:	7c5e      	ldrb	r6, [r3, #17]
 80093c4:	d808      	bhi.n	80093d8 <GUI_SelectLayer+0x20>
 80093c6:	f000 fa87 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 80093ca:	b128      	cbz	r0, 80093d8 <GUI_SelectLayer+0x20>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	745c      	strb	r4, [r3, #17]
 80093d0:	f000 f808 	bl	80093e4 <GUI_SelectLCD>
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <GUI_SelectLayer+0x28>)
 80093d6:	601c      	str	r4, [r3, #0]
 80093d8:	4630      	mov	r0, r6
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	20000020 	.word	0x20000020
 80093e0:	20022fa4 	.word	0x20022fa4

080093e4 <GUI_SelectLCD>:
 80093e4:	b508      	push	{r3, lr}
 80093e6:	f003 fed3 	bl	800d190 <LCD_SelectLCD>
 80093ea:	f003 fea7 	bl	800d13c <LCD_UpdateColorIndices>
 80093ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80093f2:	f002 bd63 	b.w	800bebc <WM_Activate>
	...

080093f8 <GUI_MULTIBUF_ConfirmEx>:
 80093f8:	4b08      	ldr	r3, [pc, #32]	; (800941c <GUI_MULTIBUF_ConfirmEx+0x24>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bf18      	it	ne
 8009400:	2000      	movne	r0, #0
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <GUI_MULTIBUF_ConfirmEx+0x28>)
 8009404:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8009408:	2a00      	cmp	r2, #0
 800940a:	db06      	blt.n	800941a <GUI_MULTIBUF_ConfirmEx+0x22>
 800940c:	4a05      	ldr	r2, [pc, #20]	; (8009424 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 800940e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8009412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009416:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800941a:	4770      	bx	lr
 800941c:	20022a30 	.word	0x20022a30
 8009420:	20022a28 	.word	0x20022a28
 8009424:	20022a20 	.word	0x20022a20

08009428 <GUI_GetDrawMode>:
 8009428:	4b01      	ldr	r3, [pc, #4]	; (8009430 <GUI_GetDrawMode+0x8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	7c18      	ldrb	r0, [r3, #16]
 800942e:	4770      	bx	lr
 8009430:	20000020 	.word	0x20000020

08009434 <GUI_Exec1>:
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <GUI_Exec1+0x2c>)
 8009436:	b510      	push	{r4, lr}
 8009438:	681c      	ldr	r4, [r3, #0]
 800943a:	b11c      	cbz	r4, 8009444 <GUI_Exec1+0x10>
 800943c:	47a0      	blx	r4
 800943e:	1c04      	adds	r4, r0, #0
 8009440:	bf18      	it	ne
 8009442:	2401      	movne	r4, #1
 8009444:	f002 fc8c 	bl	800bd60 <WM_Exec>
 8009448:	4b06      	ldr	r3, [pc, #24]	; (8009464 <GUI_Exec1+0x30>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2800      	cmp	r0, #0
 800944e:	bf18      	it	ne
 8009450:	2401      	movne	r4, #1
 8009452:	b11b      	cbz	r3, 800945c <GUI_Exec1+0x28>
 8009454:	4798      	blx	r3
 8009456:	2800      	cmp	r0, #0
 8009458:	bf18      	it	ne
 800945a:	2401      	movne	r4, #1
 800945c:	4620      	mov	r0, r4
 800945e:	bd10      	pop	{r4, pc}
 8009460:	20022e90 	.word	0x20022e90
 8009464:	20022ea8 	.word	0x20022ea8

08009468 <GUI_Exec>:
 8009468:	b510      	push	{r4, lr}
 800946a:	2400      	movs	r4, #0
 800946c:	f7ff ffe2 	bl	8009434 <GUI_Exec1>
 8009470:	b108      	cbz	r0, 8009476 <GUI_Exec+0xe>
 8009472:	2401      	movs	r4, #1
 8009474:	e7fa      	b.n	800946c <GUI_Exec+0x4>
 8009476:	4620      	mov	r0, r4
 8009478:	bd10      	pop	{r4, pc}
	...

0800947c <GUI__DrawBitmapA16bpp>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	4ea4      	ldr	r6, [pc, #656]	; (8009714 <GUI__DrawBitmapA16bpp+0x298>)
 8009482:	b095      	sub	sp, #84	; 0x54
 8009484:	461d      	mov	r5, r3
 8009486:	6833      	ldr	r3, [r6, #0]
 8009488:	910a      	str	r1, [sp, #40]	; 0x28
 800948a:	9209      	str	r2, [sp, #36]	; 0x24
 800948c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800948e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009490:	9010      	str	r0, [sp, #64]	; 0x40
 8009492:	7c58      	ldrb	r0, [r3, #17]
 8009494:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009496:	ea41 0902 	orr.w	r9, r1, r2
 800949a:	f7ff f8f5 	bl	8008688 <GUI_GetpfColor2IndexEx>
 800949e:	6833      	ldr	r3, [r6, #0]
 80094a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80094a2:	7c58      	ldrb	r0, [r3, #17]
 80094a4:	f7ff f8be 	bl	8008624 <GUI_GetBitsPerPixelEx>
 80094a8:	2818      	cmp	r0, #24
 80094aa:	4680      	mov	r8, r0
 80094ac:	d006      	beq.n	80094bc <GUI__DrawBitmapA16bpp+0x40>
 80094ae:	2808      	cmp	r0, #8
 80094b0:	dd08      	ble.n	80094c4 <GUI__DrawBitmapA16bpp+0x48>
 80094b2:	2810      	cmp	r0, #16
 80094b4:	bfcc      	ite	gt
 80094b6:	2704      	movgt	r7, #4
 80094b8:	2702      	movle	r7, #2
 80094ba:	e004      	b.n	80094c6 <GUI__DrawBitmapA16bpp+0x4a>
 80094bc:	f04f 0820 	mov.w	r8, #32
 80094c0:	2704      	movs	r7, #4
 80094c2:	e000      	b.n	80094c6 <GUI__DrawBitmapA16bpp+0x4a>
 80094c4:	2701      	movs	r7, #1
 80094c6:	f1b9 0f01 	cmp.w	r9, #1
 80094ca:	d00a      	beq.n	80094e2 <GUI__DrawBitmapA16bpp+0x66>
 80094cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ce:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80094d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80094d6:	9311      	str	r3, [sp, #68]	; 0x44
 80094d8:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80094dc:	f04f 0b00 	mov.w	fp, #0
 80094e0:	e114      	b.n	800970c <GUI__DrawBitmapA16bpp+0x290>
 80094e2:	6833      	ldr	r3, [r6, #0]
 80094e4:	7c58      	ldrb	r0, [r3, #17]
 80094e6:	f7ff f8c7 	bl	8008678 <GUI_GetpfIndex2ColorEx>
 80094ea:	900d      	str	r0, [sp, #52]	; 0x34
 80094ec:	2000      	movs	r0, #0
 80094ee:	4601      	mov	r1, r0
 80094f0:	aa13      	add	r2, sp, #76	; 0x4c
 80094f2:	4603      	mov	r3, r0
 80094f4:	f7ff fdd8 	bl	80090a8 <GUI__GetAlphaBuffer>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f040 8161 	bne.w	80097c0 <GUI__DrawBitmapA16bpp+0x344>
 80094fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009500:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009504:	920c      	str	r2, [sp, #48]	; 0x30
 8009506:	4681      	mov	r9, r0
 8009508:	4606      	mov	r6, r0
 800950a:	f894 a000 	ldrb.w	sl, [r4]
 800950e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009512:	d10f      	bne.n	8009534 <GUI__DrawBitmapA16bpp+0xb8>
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	3601      	adds	r6, #1
 8009518:	429e      	cmp	r6, r3
 800951a:	d106      	bne.n	800952a <GUI__DrawBitmapA16bpp+0xae>
 800951c:	f109 0901 	add.w	r9, r9, #1
 8009520:	2d00      	cmp	r5, #0
 8009522:	f000 814d 	beq.w	80097c0 <GUI__DrawBitmapA16bpp+0x344>
 8009526:	3d01      	subs	r5, #1
 8009528:	2600      	movs	r6, #0
 800952a:	f814 3f03 	ldrb.w	r3, [r4, #3]!
 800952e:	2bff      	cmp	r3, #255	; 0xff
 8009530:	d0f0      	beq.n	8009514 <GUI__DrawBitmapA16bpp+0x98>
 8009532:	e0d6      	b.n	80096e2 <GUI__DrawBitmapA16bpp+0x266>
 8009534:	f1ba 0f00 	cmp.w	sl, #0
 8009538:	f040 80bd 	bne.w	80096b6 <GUI__DrawBitmapA16bpp+0x23a>
 800953c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009542:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009544:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009546:	44b6      	add	lr, r6
 8009548:	4449      	add	r1, r9
 800954a:	4293      	cmp	r3, r2
 800954c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009550:	910f      	str	r1, [sp, #60]	; 0x3c
 8009552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009554:	d118      	bne.n	8009588 <GUI__DrawBitmapA16bpp+0x10c>
 8009556:	1c71      	adds	r1, r6, #1
 8009558:	f894 e001 	ldrb.w	lr, [r4, #1]
 800955c:	78a0      	ldrb	r0, [r4, #2]
 800955e:	eb00 200e 	add.w	r0, r0, lr, lsl #8
 8009562:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8009566:	f823 0b02 	strh.w	r0, [r3], #2
 800956a:	4571      	cmp	r1, lr
 800956c:	ebc6 0201 	rsb	r2, r6, r1
 8009570:	f104 0403 	add.w	r4, r4, #3
 8009574:	4608      	mov	r0, r1
 8009576:	d074      	beq.n	8009662 <GUI__DrawBitmapA16bpp+0x1e6>
 8009578:	f894 e000 	ldrb.w	lr, [r4]
 800957c:	3101      	adds	r1, #1
 800957e:	f1be 0f00 	cmp.w	lr, #0
 8009582:	d0e9      	beq.n	8009558 <GUI__DrawBitmapA16bpp+0xdc>
 8009584:	4606      	mov	r6, r0
 8009586:	e078      	b.n	800967a <GUI__DrawBitmapA16bpp+0x1fe>
 8009588:	2f02      	cmp	r7, #2
 800958a:	d029      	beq.n	80095e0 <GUI__DrawBitmapA16bpp+0x164>
 800958c:	2f04      	cmp	r7, #4
 800958e:	4619      	mov	r1, r3
 8009590:	d049      	beq.n	8009626 <GUI__DrawBitmapA16bpp+0x1aa>
 8009592:	2f01      	cmp	r7, #1
 8009594:	d170      	bne.n	8009678 <GUI__DrawBitmapA16bpp+0x1fc>
 8009596:	f1b8 0f08 	cmp.w	r8, #8
 800959a:	d16d      	bne.n	8009678 <GUI__DrawBitmapA16bpp+0x1fc>
 800959c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800959e:	46b3      	mov	fp, r6
 80095a0:	1b93      	subs	r3, r2, r6
 80095a2:	46ba      	mov	sl, r7
 80095a4:	78a2      	ldrb	r2, [r4, #2]
 80095a6:	7860      	ldrb	r0, [r4, #1]
 80095a8:	9107      	str	r1, [sp, #28]
 80095aa:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80095ae:	9308      	str	r3, [sp, #32]
 80095b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095b2:	b280      	uxth	r0, r0
 80095b4:	4790      	blx	r2
 80095b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095b8:	4790      	blx	r2
 80095ba:	9907      	ldr	r1, [sp, #28]
 80095bc:	eb01 060a 	add.w	r6, r1, sl
 80095c0:	4652      	mov	r2, sl
 80095c2:	f806 0c01 	strb.w	r0, [r6, #-1]
 80095c6:	9b08      	ldr	r3, [sp, #32]
 80095c8:	459a      	cmp	sl, r3
 80095ca:	f104 0403 	add.w	r4, r4, #3
 80095ce:	eb0a 060b 	add.w	r6, sl, fp
 80095d2:	d046      	beq.n	8009662 <GUI__DrawBitmapA16bpp+0x1e6>
 80095d4:	7820      	ldrb	r0, [r4, #0]
 80095d6:	f10a 0a01 	add.w	sl, sl, #1
 80095da:	2800      	cmp	r0, #0
 80095dc:	d0e2      	beq.n	80095a4 <GUI__DrawBitmapA16bpp+0x128>
 80095de:	e04c      	b.n	800967a <GUI__DrawBitmapA16bpp+0x1fe>
 80095e0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80095e4:	46b3      	mov	fp, r6
 80095e6:	ebc6 010e 	rsb	r1, r6, lr
 80095ea:	f04f 0a01 	mov.w	sl, #1
 80095ee:	78a2      	ldrb	r2, [r4, #2]
 80095f0:	7860      	ldrb	r0, [r4, #1]
 80095f2:	9107      	str	r1, [sp, #28]
 80095f4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80095f8:	9308      	str	r3, [sp, #32]
 80095fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095fc:	b280      	uxth	r0, r0
 80095fe:	4790      	blx	r2
 8009600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009602:	4790      	blx	r2
 8009604:	9907      	ldr	r1, [sp, #28]
 8009606:	9b08      	ldr	r3, [sp, #32]
 8009608:	458a      	cmp	sl, r1
 800960a:	4652      	mov	r2, sl
 800960c:	f823 0b02 	strh.w	r0, [r3], #2
 8009610:	f104 0403 	add.w	r4, r4, #3
 8009614:	eb0a 060b 	add.w	r6, sl, fp
 8009618:	d023      	beq.n	8009662 <GUI__DrawBitmapA16bpp+0x1e6>
 800961a:	7820      	ldrb	r0, [r4, #0]
 800961c:	f10a 0a01 	add.w	sl, sl, #1
 8009620:	2800      	cmp	r0, #0
 8009622:	d0e4      	beq.n	80095ee <GUI__DrawBitmapA16bpp+0x172>
 8009624:	e029      	b.n	800967a <GUI__DrawBitmapA16bpp+0x1fe>
 8009626:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800962a:	469b      	mov	fp, r3
 800962c:	ebc6 010e 	rsb	r1, r6, lr
 8009630:	4633      	mov	r3, r6
 8009632:	f04f 0a01 	mov.w	sl, #1
 8009636:	78a2      	ldrb	r2, [r4, #2]
 8009638:	7860      	ldrb	r0, [r4, #1]
 800963a:	9107      	str	r1, [sp, #28]
 800963c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8009640:	9308      	str	r3, [sp, #32]
 8009642:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009644:	b280      	uxth	r0, r0
 8009646:	4790      	blx	r2
 8009648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800964a:	4790      	blx	r2
 800964c:	9907      	ldr	r1, [sp, #28]
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	f84b 0b04 	str.w	r0, [fp], #4
 8009654:	458a      	cmp	sl, r1
 8009656:	4652      	mov	r2, sl
 8009658:	f104 0403 	add.w	r4, r4, #3
 800965c:	eb0a 0603 	add.w	r6, sl, r3
 8009660:	d104      	bne.n	800966c <GUI__DrawBitmapA16bpp+0x1f0>
 8009662:	f109 0901 	add.w	r9, r9, #1
 8009666:	3d01      	subs	r5, #1
 8009668:	2600      	movs	r6, #0
 800966a:	e006      	b.n	800967a <GUI__DrawBitmapA16bpp+0x1fe>
 800966c:	7820      	ldrb	r0, [r4, #0]
 800966e:	f10a 0a01 	add.w	sl, sl, #1
 8009672:	2800      	cmp	r0, #0
 8009674:	d0df      	beq.n	8009636 <GUI__DrawBitmapA16bpp+0x1ba>
 8009676:	e000      	b.n	800967a <GUI__DrawBitmapA16bpp+0x1fe>
 8009678:	4652      	mov	r2, sl
 800967a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800967c:	9103      	str	r1, [sp, #12]
 800967e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009680:	9104      	str	r1, [sp, #16]
 8009682:	2301      	movs	r3, #1
 8009684:	2100      	movs	r1, #0
 8009686:	9105      	str	r1, [sp, #20]
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	f8cd 8008 	str.w	r8, [sp, #8]
 8009690:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009692:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009694:	f7ff fa84 	bl	8008ba0 <LCD_DrawBitmap>
 8009698:	e023      	b.n	80096e2 <GUI__DrawBitmapA16bpp+0x266>
 800969a:	f109 0901 	add.w	r9, r9, #1
 800969e:	2d00      	cmp	r5, #0
 80096a0:	f000 808e 	beq.w	80097c0 <GUI__DrawBitmapA16bpp+0x344>
 80096a4:	3d01      	subs	r5, #1
 80096a6:	2600      	movs	r6, #0
 80096a8:	f814 af03 	ldrb.w	sl, [r4, #3]!
 80096ac:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2bfd      	cmp	r3, #253	; 0xfd
 80096b4:	d815      	bhi.n	80096e2 <GUI__DrawBitmapA16bpp+0x266>
 80096b6:	78a3      	ldrb	r3, [r4, #2]
 80096b8:	7860      	ldrb	r0, [r4, #1]
 80096ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80096bc:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80096c0:	b280      	uxth	r0, r0
 80096c2:	4790      	blx	r2
 80096c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096c6:	4603      	mov	r3, r0
 80096c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096ca:	ea6f 020a 	mvn.w	r2, sl
 80096ce:	4430      	add	r0, r6
 80096d0:	4449      	add	r1, r9
 80096d2:	b2d2      	uxtb	r2, r2
 80096d4:	f003 feb8 	bl	800d448 <GUI__SetPixelAlpha>
 80096d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096da:	3601      	adds	r6, #1
 80096dc:	429e      	cmp	r6, r3
 80096de:	d1e3      	bne.n	80096a8 <GUI__DrawBitmapA16bpp+0x22c>
 80096e0:	e7db      	b.n	800969a <GUI__DrawBitmapA16bpp+0x21e>
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	f47f af11 	bne.w	800950a <GUI__DrawBitmapA16bpp+0x8e>
 80096e8:	e06a      	b.n	80097c0 <GUI__DrawBitmapA16bpp+0x344>
 80096ea:	9921      	ldr	r1, [sp, #132]	; 0x84
 80096ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ee:	440a      	add	r2, r1
 80096f0:	1e53      	subs	r3, r2, #1
 80096f2:	930d      	str	r3, [sp, #52]	; 0x34
 80096f4:	4b07      	ldr	r3, [pc, #28]	; (8009714 <GUI__DrawBitmapA16bpp+0x298>)
 80096f6:	920e      	str	r2, [sp, #56]	; 0x38
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80096fc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8009700:	4291      	cmp	r1, r2
 8009702:	da09      	bge.n	8009718 <GUI__DrawBitmapA16bpp+0x29c>
 8009704:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009706:	910a      	str	r1, [sp, #40]	; 0x28
 8009708:	f10b 0b01 	add.w	fp, fp, #1
 800970c:	45ab      	cmp	fp, r5
 800970e:	dbec      	blt.n	80096ea <GUI__DrawBitmapA16bpp+0x26e>
 8009710:	e056      	b.n	80097c0 <GUI__DrawBitmapA16bpp+0x344>
 8009712:	bf00      	nop
 8009714:	20000020 	.word	0x20000020
 8009718:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800971c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800971e:	429a      	cmp	r2, r3
 8009720:	dcf0      	bgt.n	8009704 <GUI__DrawBitmapA16bpp+0x288>
 8009722:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009724:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009726:	2100      	movs	r1, #0
 8009728:	441e      	add	r6, r3
 800972a:	4627      	mov	r7, r4
 800972c:	910b      	str	r1, [sp, #44]	; 0x2c
 800972e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009734:	1af3      	subs	r3, r6, r3
 8009736:	4291      	cmp	r1, r2
 8009738:	930f      	str	r3, [sp, #60]	; 0x3c
 800973a:	da3e      	bge.n	80097ba <GUI__DrawBitmapA16bpp+0x33e>
 800973c:	7878      	ldrb	r0, [r7, #1]
 800973e:	78bb      	ldrb	r3, [r7, #2]
 8009740:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009742:	f897 8000 	ldrb.w	r8, [r7]
 8009746:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800974a:	b280      	uxth	r0, r0
 800974c:	4790      	blx	r2
 800974e:	4548      	cmp	r0, r9
 8009750:	4682      	mov	sl, r0
 8009752:	d001      	beq.n	8009758 <GUI__DrawBitmapA16bpp+0x2dc>
 8009754:	f7ff fbea 	bl	8008f2c <LCD_SetColor>
 8009758:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800975c:	d025      	beq.n	80097aa <GUI__DrawBitmapA16bpp+0x32e>
 800975e:	f1b8 0f00 	cmp.w	r8, #0
 8009762:	d01c      	beq.n	800979e <GUI__DrawBitmapA16bpp+0x322>
 8009764:	ea6f 0c08 	mvn.w	ip, r8
 8009768:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800976c:	fa5f fc8c 	uxtb.w	ip, ip
 8009770:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8009774:	454e      	cmp	r6, r9
 8009776:	dd0c      	ble.n	8009792 <GUI__DrawBitmapA16bpp+0x316>
 8009778:	4648      	mov	r0, r9
 800977a:	4662      	mov	r2, ip
 800977c:	4641      	mov	r1, r8
 800977e:	4653      	mov	r3, sl
 8009780:	f8cd c020 	str.w	ip, [sp, #32]
 8009784:	f109 0901 	add.w	r9, r9, #1
 8009788:	f003 fe5e 	bl	800d448 <GUI__SetPixelAlpha>
 800978c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009790:	e7f0      	b.n	8009774 <GUI__DrawBitmapA16bpp+0x2f8>
 8009792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009794:	f108 0801 	add.w	r8, r8, #1
 8009798:	4598      	cmp	r8, r3
 800979a:	dde9      	ble.n	8009770 <GUI__DrawBitmapA16bpp+0x2f4>
 800979c:	e005      	b.n	80097aa <GUI__DrawBitmapA16bpp+0x32e>
 800979e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80097a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a4:	1e72      	subs	r2, r6, #1
 80097a6:	f7ff f8f3 	bl	8008990 <LCD_FillRect>
 80097aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097ae:	3101      	adds	r1, #1
 80097b0:	3703      	adds	r7, #3
 80097b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80097b4:	4416      	add	r6, r2
 80097b6:	46d1      	mov	r9, sl
 80097b8:	e7b9      	b.n	800972e <GUI__DrawBitmapA16bpp+0x2b2>
 80097ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097bc:	441c      	add	r4, r3
 80097be:	e7a1      	b.n	8009704 <GUI__DrawBitmapA16bpp+0x288>
 80097c0:	b015      	add	sp, #84	; 0x54
 80097c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c6:	bf00      	nop

080097c8 <_DrawBitmapA565>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	9c08      	ldr	r4, [sp, #32]
 80097ce:	9400      	str	r4, [sp, #0]
 80097d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80097d2:	9401      	str	r4, [sp, #4]
 80097d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097d6:	9402      	str	r4, [sp, #8]
 80097d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80097da:	9403      	str	r4, [sp, #12]
 80097dc:	4c02      	ldr	r4, [pc, #8]	; (80097e8 <_DrawBitmapA565+0x20>)
 80097de:	9404      	str	r4, [sp, #16]
 80097e0:	f7ff fe4c 	bl	800947c <GUI__DrawBitmapA16bpp>
 80097e4:	b006      	add	sp, #24
 80097e6:	bd10      	pop	{r4, pc}
 80097e8:	0800a645 	.word	0x0800a645

080097ec <GL_DrawBitmap>:
 80097ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097f0:	68c6      	ldr	r6, [r0, #12]
 80097f2:	b087      	sub	sp, #28
 80097f4:	4604      	mov	r4, r0
 80097f6:	2000      	movs	r0, #0
 80097f8:	4688      	mov	r8, r1
 80097fa:	4617      	mov	r7, r2
 80097fc:	f004 f8ae 	bl	800d95c <GUI_SetDrawMode>
 8009800:	4605      	mov	r5, r0
 8009802:	b126      	cbz	r6, 800980e <GL_DrawBitmap+0x22>
 8009804:	7933      	ldrb	r3, [r6, #4]
 8009806:	b113      	cbz	r3, 800980e <GL_DrawBitmap+0x22>
 8009808:	f040 0002 	orr.w	r0, r0, #2
 800980c:	e001      	b.n	8009812 <GL_DrawBitmap+0x26>
 800980e:	f025 0002 	bic.w	r0, r5, #2
 8009812:	f004 f8a3 	bl	800d95c <GUI_SetDrawMode>
 8009816:	6921      	ldr	r1, [r4, #16]
 8009818:	b169      	cbz	r1, 8009836 <GL_DrawBitmap+0x4a>
 800981a:	68a0      	ldr	r0, [r4, #8]
 800981c:	8822      	ldrh	r2, [r4, #0]
 800981e:	8863      	ldrh	r3, [r4, #2]
 8009820:	9000      	str	r0, [sp, #0]
 8009822:	68e0      	ldr	r0, [r4, #12]
 8009824:	9001      	str	r0, [sp, #4]
 8009826:	2001      	movs	r0, #1
 8009828:	9002      	str	r0, [sp, #8]
 800982a:	9003      	str	r0, [sp, #12]
 800982c:	680c      	ldr	r4, [r1, #0]
 800982e:	4640      	mov	r0, r8
 8009830:	4639      	mov	r1, r7
 8009832:	47a0      	blx	r4
 8009834:	e020      	b.n	8009878 <GL_DrawBitmap+0x8c>
 8009836:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8009888 <GL_DrawBitmap+0x9c>
 800983a:	4a12      	ldr	r2, [pc, #72]	; (8009884 <GL_DrawBitmap+0x98>)
 800983c:	f8d9 3000 	ldr.w	r3, [r9]
 8009840:	6816      	ldr	r6, [r2, #0]
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	7c5a      	ldrb	r2, [r3, #17]
 8009846:	4621      	mov	r1, r4
 8009848:	47b0      	blx	r6
 800984a:	88e1      	ldrh	r1, [r4, #6]
 800984c:	4606      	mov	r6, r0
 800984e:	b920      	cbnz	r0, 800985a <GL_DrawBitmap+0x6e>
 8009850:	2901      	cmp	r1, #1
 8009852:	bf04      	itt	eq
 8009854:	f8d9 3000 	ldreq.w	r3, [r9]
 8009858:	6b9e      	ldreq	r6, [r3, #56]	; 0x38
 800985a:	2001      	movs	r0, #1
 800985c:	8822      	ldrh	r2, [r4, #0]
 800985e:	8863      	ldrh	r3, [r4, #2]
 8009860:	9000      	str	r0, [sp, #0]
 8009862:	9001      	str	r0, [sp, #4]
 8009864:	9102      	str	r1, [sp, #8]
 8009866:	88a1      	ldrh	r1, [r4, #4]
 8009868:	9103      	str	r1, [sp, #12]
 800986a:	68a1      	ldr	r1, [r4, #8]
 800986c:	9104      	str	r1, [sp, #16]
 800986e:	9605      	str	r6, [sp, #20]
 8009870:	4640      	mov	r0, r8
 8009872:	4639      	mov	r1, r7
 8009874:	f7ff f994 	bl	8008ba0 <LCD_DrawBitmap>
 8009878:	4628      	mov	r0, r5
 800987a:	b007      	add	sp, #28
 800987c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009880:	f004 b86c 	b.w	800d95c <GUI_SetDrawMode>
 8009884:	20000028 	.word	0x20000028
 8009888:	20000020 	.word	0x20000020

0800988c <GUI_DrawBitmap>:
 800988c:	4b11      	ldr	r3, [pc, #68]	; (80098d4 <GUI_DrawBitmap+0x48>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009892:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8009894:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8009896:	8803      	ldrh	r3, [r0, #0]
 8009898:	440e      	add	r6, r1
 800989a:	3b01      	subs	r3, #1
 800989c:	4433      	add	r3, r6
 800989e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80098a2:	8843      	ldrh	r3, [r0, #2]
 80098a4:	f8ad 6000 	strh.w	r6, [sp]
 80098a8:	4415      	add	r5, r2
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4604      	mov	r4, r0
 80098ae:	442b      	add	r3, r5
 80098b0:	4668      	mov	r0, sp
 80098b2:	f8ad 5002 	strh.w	r5, [sp, #2]
 80098b6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80098ba:	f002 f92b 	bl	800bb14 <WM__InitIVRSearch>
 80098be:	b138      	cbz	r0, 80098d0 <GUI_DrawBitmap+0x44>
 80098c0:	4620      	mov	r0, r4
 80098c2:	4631      	mov	r1, r6
 80098c4:	462a      	mov	r2, r5
 80098c6:	f7ff ff91 	bl	80097ec <GL_DrawBitmap>
 80098ca:	f002 f861 	bl	800b990 <WM__GetNextIVR>
 80098ce:	e7f6      	b.n	80098be <GUI_DrawBitmap+0x32>
 80098d0:	b002      	add	sp, #8
 80098d2:	bd70      	pop	{r4, r5, r6, pc}
 80098d4:	20000020 	.word	0x20000020

080098d8 <GUI_DEVICE__GetpDriver>:
 80098d8:	2801      	cmp	r0, #1
 80098da:	dc09      	bgt.n	80098f0 <GUI_DEVICE__GetpDriver+0x18>
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <GUI_DEVICE__GetpDriver+0x1c>)
 80098de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80098e2:	b120      	cbz	r0, 80098ee <GUI_DEVICE__GetpDriver+0x16>
 80098e4:	68c3      	ldr	r3, [r0, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	b11b      	cbz	r3, 80098f2 <GUI_DEVICE__GetpDriver+0x1a>
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	e7f9      	b.n	80098e2 <GUI_DEVICE__GetpDriver+0xa>
 80098ee:	4770      	bx	lr
 80098f0:	2000      	movs	r0, #0
 80098f2:	4770      	bx	lr
 80098f4:	20022eac 	.word	0x20022eac

080098f8 <GUI_DEVICE_Delete>:
 80098f8:	f000 bb6a 	b.w	8009fd0 <GUI_ALLOC_FreeFixedBlock>

080098fc <GUI_DEVICE_Create>:
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009900:	4606      	mov	r6, r0
 8009902:	460d      	mov	r5, r1
 8009904:	4617      	mov	r7, r2
 8009906:	461c      	mov	r4, r3
 8009908:	dd01      	ble.n	800990e <GUI_DEVICE_Create+0x12>
 800990a:	2000      	movs	r0, #0
 800990c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990e:	201c      	movs	r0, #28
 8009910:	f000 fcbe 	bl	800a290 <GUI_ALLOC_GetFixedBlock>
 8009914:	2800      	cmp	r0, #0
 8009916:	d0f8      	beq.n	800990a <GUI_DEVICE_Create+0xe>
 8009918:	b10d      	cbz	r5, 800991e <GUI_DEVICE_Create+0x22>
 800991a:	6105      	str	r5, [r0, #16]
 800991c:	e009      	b.n	8009932 <GUI_DEVICE_Create+0x36>
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <GUI_DEVICE_Create+0x48>)
 8009920:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009924:	b129      	cbz	r1, 8009932 <GUI_DEVICE_Create+0x36>
 8009926:	680b      	ldr	r3, [r1, #0]
 8009928:	b10b      	cbz	r3, 800992e <GUI_DEVICE_Create+0x32>
 800992a:	4619      	mov	r1, r3
 800992c:	e7fb      	b.n	8009926 <GUI_DEVICE_Create+0x2a>
 800992e:	690b      	ldr	r3, [r1, #16]
 8009930:	6103      	str	r3, [r0, #16]
 8009932:	2300      	movs	r3, #0
 8009934:	6083      	str	r3, [r0, #8]
 8009936:	6184      	str	r4, [r0, #24]
 8009938:	8287      	strh	r7, [r0, #20]
 800993a:	60c6      	str	r6, [r0, #12]
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	6043      	str	r3, [r0, #4]
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009942:	bf00      	nop
 8009944:	20022eac 	.word	0x20022eac

08009948 <GUI_DEVICE_Unlink>:
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <GUI_DEVICE_Unlink+0x28>)
 800994a:	6982      	ldr	r2, [r0, #24]
 800994c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009950:	4281      	cmp	r1, r0
 8009952:	bf04      	itt	eq
 8009954:	6801      	ldreq	r1, [r0, #0]
 8009956:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800995a:	6843      	ldr	r3, [r0, #4]
 800995c:	b10b      	cbz	r3, 8009962 <GUI_DEVICE_Unlink+0x1a>
 800995e:	6802      	ldr	r2, [r0, #0]
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	6802      	ldr	r2, [r0, #0]
 8009964:	b102      	cbz	r2, 8009968 <GUI_DEVICE_Unlink+0x20>
 8009966:	6053      	str	r3, [r2, #4]
 8009968:	2300      	movs	r3, #0
 800996a:	6003      	str	r3, [r0, #0]
 800996c:	6043      	str	r3, [r0, #4]
 800996e:	4770      	bx	lr
 8009970:	20022eac 	.word	0x20022eac

08009974 <GUI_DEVICE_Link>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	b338      	cbz	r0, 80099c8 <GUI_DEVICE_Link+0x54>
 8009978:	6982      	ldr	r2, [r0, #24]
 800997a:	2a01      	cmp	r2, #1
 800997c:	dc24      	bgt.n	80099c8 <GUI_DEVICE_Link+0x54>
 800997e:	4919      	ldr	r1, [pc, #100]	; (80099e4 <GUI_DEVICE_Link+0x70>)
 8009980:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8009984:	460d      	mov	r5, r1
 8009986:	b913      	cbnz	r3, 800998e <GUI_DEVICE_Link+0x1a>
 8009988:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800998c:	e01a      	b.n	80099c4 <GUI_DEVICE_Link+0x50>
 800998e:	6859      	ldr	r1, [r3, #4]
 8009990:	b109      	cbz	r1, 8009996 <GUI_DEVICE_Link+0x22>
 8009992:	460b      	mov	r3, r1
 8009994:	e7fb      	b.n	800998e <GUI_DEVICE_Link+0x1a>
 8009996:	68c1      	ldr	r1, [r0, #12]
 8009998:	680e      	ldr	r6, [r1, #0]
 800999a:	68d9      	ldr	r1, [r3, #12]
 800999c:	680c      	ldr	r4, [r1, #0]
 800999e:	42b4      	cmp	r4, r6
 80099a0:	dd03      	ble.n	80099aa <GUI_DEVICE_Link+0x36>
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1f8      	bne.n	800999a <GUI_DEVICE_Link+0x26>
 80099a8:	e00e      	b.n	80099c8 <GUI_DEVICE_Link+0x54>
 80099aa:	d102      	bne.n	80099b2 <GUI_DEVICE_Link+0x3e>
 80099ac:	8a81      	ldrh	r1, [r0, #20]
 80099ae:	2901      	cmp	r1, #1
 80099b0:	d011      	beq.n	80099d6 <GUI_DEVICE_Link+0x62>
 80099b2:	6859      	ldr	r1, [r3, #4]
 80099b4:	b199      	cbz	r1, 80099de <GUI_DEVICE_Link+0x6a>
 80099b6:	6008      	str	r0, [r1, #0]
 80099b8:	6041      	str	r1, [r0, #4]
 80099ba:	6058      	str	r0, [r3, #4]
 80099bc:	4298      	cmp	r0, r3
 80099be:	bf08      	it	eq
 80099c0:	2300      	moveq	r3, #0
 80099c2:	6003      	str	r3, [r0, #0]
 80099c4:	2000      	movs	r0, #0
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	2001      	movs	r0, #1
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	68cb      	ldr	r3, [r1, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	460b      	mov	r3, r1
 80099d4:	dbed      	blt.n	80099b2 <GUI_DEVICE_Link+0x3e>
 80099d6:	6819      	ldr	r1, [r3, #0]
 80099d8:	2900      	cmp	r1, #0
 80099da:	d1f7      	bne.n	80099cc <GUI_DEVICE_Link+0x58>
 80099dc:	e7e9      	b.n	80099b2 <GUI_DEVICE_Link+0x3e>
 80099de:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80099e2:	e7ea      	b.n	80099ba <GUI_DEVICE_Link+0x46>
 80099e4:	20022eac 	.word	0x20022eac

080099e8 <GUI_DEVICE_CreateAndLink>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	461d      	mov	r5, r3
 80099ec:	f7ff ff86 	bl	80098fc <GUI_DEVICE_Create>
 80099f0:	4604      	mov	r4, r0
 80099f2:	b148      	cbz	r0, 8009a08 <GUI_DEVICE_CreateAndLink+0x20>
 80099f4:	f7ff ffbe 	bl	8009974 <GUI_DEVICE_Link>
 80099f8:	68e3      	ldr	r3, [r4, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	b923      	cbnz	r3, 8009a08 <GUI_DEVICE_CreateAndLink+0x20>
 80099fe:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <GUI_DEVICE_CreateAndLink+0x24>)
 8009a00:	3516      	adds	r5, #22
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20000020 	.word	0x20000020

08009a10 <_OnExit>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <_OnExit+0x20>)
 8009a14:	4807      	ldr	r0, [pc, #28]	; (8009a34 <_OnExit+0x24>)
 8009a16:	2400      	movs	r4, #0
 8009a18:	4621      	mov	r1, r4
 8009a1a:	2270      	movs	r2, #112	; 0x70
 8009a1c:	601c      	str	r4, [r3, #0]
 8009a1e:	f7ff fa8d 	bl	8008f3c <GUI__memset>
 8009a22:	4621      	mov	r1, r4
 8009a24:	4804      	ldr	r0, [pc, #16]	; (8009a38 <_OnExit+0x28>)
 8009a26:	2208      	movs	r2, #8
 8009a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a2c:	f7ff ba86 	b.w	8008f3c <GUI__memset>
 8009a30:	20022ab0 	.word	0x20022ab0
 8009a34:	20022a38 	.word	0x20022a38
 8009a38:	20022eac 	.word	0x20022eac

08009a3c <_InitContext>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d19      	ldr	r5, [pc, #100]	; (8009aa4 <_InitContext+0x68>)
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	1d1a      	adds	r2, r3, #4
 8009a44:	63da      	str	r2, [r3, #60]	; 0x3c
 8009a46:	f103 0208 	add.w	r2, r3, #8
 8009a4a:	639b      	str	r3, [r3, #56]	; 0x38
 8009a4c:	641b      	str	r3, [r3, #64]	; 0x40
 8009a4e:	6142      	str	r2, [r0, #20]
 8009a50:	7c5a      	ldrb	r2, [r3, #17]
 8009a52:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <_InitContext+0x6c>)
 8009a54:	4604      	mov	r4, r0
 8009a56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009a5a:	68c3      	ldr	r3, [r0, #12]
 8009a5c:	f104 0108 	add.w	r1, r4, #8
 8009a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a62:	4798      	blx	r3
 8009a64:	4b11      	ldr	r3, [pc, #68]	; (8009aac <_InitContext+0x70>)
 8009a66:	6663      	str	r3, [r4, #100]	; 0x64
 8009a68:	4b11      	ldr	r3, [pc, #68]	; (8009ab0 <_InitContext+0x74>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	61e3      	str	r3, [r4, #28]
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	3308      	adds	r3, #8
 8009a72:	6163      	str	r3, [r4, #20]
 8009a74:	2301      	movs	r3, #1
 8009a76:	7623      	strb	r3, [r4, #24]
 8009a78:	f001 f972 	bl	800ad60 <WM_GetDesktopWindow>
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8009a82:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009a86:	6323      	str	r3, [r4, #48]	; 0x30
 8009a88:	6363      	str	r3, [r4, #52]	; 0x34
 8009a8a:	64a0      	str	r0, [r4, #72]	; 0x48
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7ff fa45 	bl	8008f1c <LCD_SetBkColor>
 8009a92:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009a96:	f7ff fa49 	bl	8008f2c <LCD_SetColor>
 8009a9a:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <_InitContext+0x78>)
 8009a9c:	4a06      	ldr	r2, [pc, #24]	; (8009ab8 <_InitContext+0x7c>)
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	bd38      	pop	{r3, r4, r5, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000020 	.word	0x20000020
 8009aa8:	20022eac 	.word	0x20022eac
 8009aac:	080802f4 	.word	0x080802f4
 8009ab0:	20000024 	.word	0x20000024
 8009ab4:	20022ea4 	.word	0x20022ea4
 8009ab8:	080807d0 	.word	0x080807d0

08009abc <GUI_SetFuncGetpPalConvTable>:
 8009abc:	4b01      	ldr	r3, [pc, #4]	; (8009ac4 <GUI_SetFuncGetpPalConvTable+0x8>)
 8009abe:	6018      	str	r0, [r3, #0]
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20000028 	.word	0x20000028

08009ac8 <GUI_SetDefaultFont>:
 8009ac8:	4b01      	ldr	r3, [pc, #4]	; (8009ad0 <GUI_SetDefaultFont+0x8>)
 8009aca:	6018      	str	r0, [r3, #0]
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20000024 	.word	0x20000024

08009ad4 <GUI_ClearRect>:
 8009ad4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad8:	4607      	mov	r7, r0
 8009ada:	2004      	movs	r0, #4
 8009adc:	469a      	mov	sl, r3
 8009ade:	460e      	mov	r6, r1
 8009ae0:	4691      	mov	r9, r2
 8009ae2:	f7fe fef9 	bl	80088d8 <LCD_SetDrawMode>
 8009ae6:	4b13      	ldr	r3, [pc, #76]	; (8009b34 <GUI_ClearRect+0x60>)
 8009ae8:	681c      	ldr	r4, [r3, #0]
 8009aea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009aec:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8009aee:	442f      	add	r7, r5
 8009af0:	4426      	add	r6, r4
 8009af2:	4680      	mov	r8, r0
 8009af4:	444d      	add	r5, r9
 8009af6:	4454      	add	r4, sl
 8009af8:	4668      	mov	r0, sp
 8009afa:	f8ad 7000 	strh.w	r7, [sp]
 8009afe:	f8ad 5004 	strh.w	r5, [sp, #4]
 8009b02:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009b06:	f8ad 4006 	strh.w	r4, [sp, #6]
 8009b0a:	f002 f803 	bl	800bb14 <WM__InitIVRSearch>
 8009b0e:	b928      	cbnz	r0, 8009b1c <GUI_ClearRect+0x48>
 8009b10:	4640      	mov	r0, r8
 8009b12:	f7fe fee1 	bl	80088d8 <LCD_SetDrawMode>
 8009b16:	b002      	add	sp, #8
 8009b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	4631      	mov	r1, r6
 8009b20:	462a      	mov	r2, r5
 8009b22:	4623      	mov	r3, r4
 8009b24:	f7fe ff34 	bl	8008990 <LCD_FillRect>
 8009b28:	f001 ff32 	bl	800b990 <WM__GetNextIVR>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d1f5      	bne.n	8009b1c <GUI_ClearRect+0x48>
 8009b30:	e7ee      	b.n	8009b10 <GUI_ClearRect+0x3c>
 8009b32:	bf00      	nop
 8009b34:	20000020 	.word	0x20000020

08009b38 <GUI_Clear>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	4601      	mov	r1, r0
 8009b3e:	f003 ffdf 	bl	800db00 <GUI_GotoXY>
 8009b42:	4804      	ldr	r0, [pc, #16]	; (8009b54 <GUI_Clear+0x1c>)
 8009b44:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009b48:	4601      	mov	r1, r0
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b50:	f7ff bfc0 	b.w	8009ad4 <GUI_ClearRect>
 8009b54:	ffffc001 	.word	0xffffc001

08009b58 <GUI__RegisterExit>:
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <GUI__RegisterExit+0x20>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	605a      	str	r2, [r3, #4]
 8009b68:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <GUI__RegisterExit+0x20>)
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	20022a34 	.word	0x20022a34

08009b7c <GUI__Config>:
 8009b7c:	b508      	push	{r3, lr}
 8009b7e:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <GUI__Config+0x24>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	b962      	cbnz	r2, 8009b9e <GUI__Config+0x22>
 8009b84:	2201      	movs	r2, #1
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f7fa ffcc 	bl	8004b24 <GUI_X_Config>
 8009b8c:	f7fb f94a 	bl	8004e24 <LCD_X_Config>
 8009b90:	4804      	ldr	r0, [pc, #16]	; (8009ba4 <GUI__Config+0x28>)
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <GUI__Config+0x2c>)
 8009b94:	6003      	str	r3, [r0, #0]
 8009b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b9a:	f7ff bfdd 	b.w	8009b58 <GUI__RegisterExit>
 8009b9e:	bd08      	pop	{r3, pc}
 8009ba0:	20022ab0 	.word	0x20022ab0
 8009ba4:	20022aa8 	.word	0x20022aa8
 8009ba8:	08009a11 	.word	0x08009a11

08009bac <GUI_Init>:
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <GUI_Init+0x88>)
 8009bb4:	4a1f      	ldr	r2, [pc, #124]	; (8009c34 <GUI_Init+0x88>)
 8009bb6:	6812      	ldr	r2, [r2, #0]
 8009bb8:	f022 0201 	bic.w	r2, r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <GUI_Init+0x8c>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	4b1d      	ldr	r3, [pc, #116]	; (8009c3c <GUI_Init+0x90>)
 8009bc6:	4a1e      	ldr	r2, [pc, #120]	; (8009c40 <GUI_Init+0x94>)
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	4b1c      	ldr	r3, [pc, #112]	; (8009c3c <GUI_Init+0x90>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b1d      	ldr	r3, [pc, #116]	; (8009c44 <GUI_Init+0x98>)
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d000      	beq.n	8009bd6 <GUI_Init+0x2a>
 8009bd4:	e7fe      	b.n	8009bd4 <GUI_Init+0x28>
 8009bd6:	f7ff ffd1 	bl	8009b7c <GUI__Config>
 8009bda:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <GUI_Init+0x9c>)
 8009bdc:	222e      	movs	r2, #46	; 0x2e
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	f7fa ffd4 	bl	8004b8c <GUI_X_Init>
 8009be4:	4819      	ldr	r0, [pc, #100]	; (8009c4c <GUI_Init+0xa0>)
 8009be6:	f7ff ff29 	bl	8009a3c <_InitContext>
 8009bea:	f7ff f8f5 	bl	8008dd8 <emWin_LCD_Init>
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	f7fe fd66 	bl	80086c0 <LCD_GetXSizeDisplay>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <GUI_Init+0x58>
 8009bfa:	f7fe fd67 	bl	80086cc <LCD_GetYSizeDisplay>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d109      	bne.n	8009c18 <GUI_Init+0x6c>
 8009c04:	f7fe fd48 	bl	8008698 <LCD_GetXSizeMax>
 8009c08:	4604      	mov	r4, r0
 8009c0a:	f7fe fd48 	bl	800869e <LCD_GetYSizeMax>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4620      	mov	r0, r4
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7fe fd4a 	bl	80086ac <LCD_SetDisplaySize>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	f003 fe84 	bl	800d928 <GUI_SetOrg>
 8009c20:	f002 f9b6 	bl	800bf90 <WM_Init>
 8009c24:	4b0a      	ldr	r3, [pc, #40]	; (8009c50 <GUI_Init+0xa4>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd90      	pop	{r4, r7, pc}
 8009c34:	e0002000 	.word	0xe0002000
 8009c38:	40023008 	.word	0x40023008
 8009c3c:	40023000 	.word	0x40023000
 8009c40:	f407a5c2 	.word	0xf407a5c2
 8009c44:	b5e8b5cd 	.word	0xb5e8b5cd
 8009c48:	20022e7e 	.word	0x20022e7e
 8009c4c:	20022a38 	.word	0x20022a38
 8009c50:	20022e9c 	.word	0x20022e9c

08009c54 <GUIMONO_DispChar>:
 8009c54:	4b52      	ldr	r3, [pc, #328]	; (8009da0 <GUIMONO_DispChar+0x14c>)
 8009c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	69d9      	ldr	r1, [r3, #28]
 8009c5e:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8009c60:	69cc      	ldr	r4, [r1, #28]
 8009c62:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8009c64:	89a2      	ldrh	r2, [r4, #12]
 8009c66:	4290      	cmp	r0, r2
 8009c68:	b08b      	sub	sp, #44	; 0x2c
 8009c6a:	d308      	bcc.n	8009c7e <GUIMONO_DispChar+0x2a>
 8009c6c:	89e6      	ldrh	r6, [r4, #14]
 8009c6e:	4286      	cmp	r6, r0
 8009c70:	d305      	bcc.n	8009c7e <GUIMONO_DispChar+0x2a>
 8009c72:	f8d4 9000 	ldr.w	r9, [r4]
 8009c76:	1a82      	subs	r2, r0, r2
 8009c78:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009c7c:	e015      	b.n	8009caa <GUIMONO_DispChar+0x56>
 8009c7e:	68a2      	ldr	r2, [r4, #8]
 8009c80:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	f000 8081 	beq.w	8009d8c <GUIMONO_DispChar+0x138>
 8009c8a:	8816      	ldrh	r6, [r2, #0]
 8009c8c:	42b0      	cmp	r0, r6
 8009c8e:	d37d      	bcc.n	8009d8c <GUIMONO_DispChar+0x138>
 8009c90:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8009c94:	4584      	cmp	ip, r0
 8009c96:	d379      	bcc.n	8009d8c <GUIMONO_DispChar+0x138>
 8009c98:	6852      	ldr	r2, [r2, #4]
 8009c9a:	1b80      	subs	r0, r0, r6
 8009c9c:	b280      	uxth	r0, r0
 8009c9e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8009ca2:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8009ca6:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8009caa:	1c50      	adds	r0, r2, #1
 8009cac:	d06e      	beq.n	8009d8c <GUIMONO_DispChar+0x138>
 8009cae:	f891 8018 	ldrb.w	r8, [r1, #24]
 8009cb2:	7ca1      	ldrb	r1, [r4, #18]
 8009cb4:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8009cb8:	7c26      	ldrb	r6, [r4, #16]
 8009cba:	9206      	str	r2, [sp, #24]
 8009cbc:	fb18 f101 	smulbb	r1, r8, r1
 8009cc0:	9107      	str	r1, [sp, #28]
 8009cc2:	fa0f f18a 	sxth.w	r1, sl
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	9108      	str	r1, [sp, #32]
 8009cca:	f7fe fe05 	bl	80088d8 <LCD_SetDrawMode>
 8009cce:	4934      	ldr	r1, [pc, #208]	; (8009da0 <GUIMONO_DispChar+0x14c>)
 8009cd0:	9009      	str	r0, [sp, #36]	; 0x24
 8009cd2:	680b      	ldr	r3, [r1, #0]
 8009cd4:	9a06      	ldr	r2, [sp, #24]
 8009cd6:	69d9      	ldr	r1, [r3, #28]
 8009cd8:	7e88      	ldrb	r0, [r1, #26]
 8009cda:	9000      	str	r0, [sp, #0]
 8009cdc:	7ec9      	ldrb	r1, [r1, #27]
 8009cde:	9101      	str	r1, [sp, #4]
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	9102      	str	r1, [sp, #8]
 8009ce4:	7ca1      	ldrb	r1, [r4, #18]
 8009ce6:	9103      	str	r1, [sp, #12]
 8009ce8:	9907      	ldr	r1, [sp, #28]
 8009cea:	fb01 9202 	mla	r2, r1, r2, r9
 8009cee:	9204      	str	r2, [sp, #16]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	b23f      	sxth	r7, r7
 8009cf6:	b22d      	sxth	r5, r5
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4643      	mov	r3, r8
 8009d00:	f7fe ff4e 	bl	8008ba0 <LCD_DrawBitmap>
 8009d04:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8009d08:	d01b      	beq.n	8009d42 <GUIMONO_DispChar+0xee>
 8009d0a:	f04a 0002 	orr.w	r0, sl, #2
 8009d0e:	b200      	sxth	r0, r0
 8009d10:	f7fe fde2 	bl	80088d8 <LCD_SetDrawMode>
 8009d14:	4a22      	ldr	r2, [pc, #136]	; (8009da0 <GUIMONO_DispChar+0x14c>)
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	69da      	ldr	r2, [r3, #28]
 8009d1a:	7e91      	ldrb	r1, [r2, #26]
 8009d1c:	9100      	str	r1, [sp, #0]
 8009d1e:	7ed2      	ldrb	r2, [r2, #27]
 8009d20:	9201      	str	r2, [sp, #4]
 8009d22:	2101      	movs	r1, #1
 8009d24:	9102      	str	r1, [sp, #8]
 8009d26:	9907      	ldr	r1, [sp, #28]
 8009d28:	7ca2      	ldrb	r2, [r4, #18]
 8009d2a:	9203      	str	r2, [sp, #12]
 8009d2c:	fb01 920b 	mla	r2, r1, fp, r9
 8009d30:	9204      	str	r2, [sp, #16]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	9305      	str	r3, [sp, #20]
 8009d36:	4638      	mov	r0, r7
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4632      	mov	r2, r6
 8009d3c:	4643      	mov	r3, r8
 8009d3e:	f7fe ff2f 	bl	8008ba0 <LCD_DrawBitmap>
 8009d42:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8009da0 <GUIMONO_DispChar+0x14c>
 8009d46:	f8d8 3000 	ldr.w	r3, [r8]
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	7e5a      	ldrb	r2, [r3, #25]
 8009d4e:	7e1b      	ldrb	r3, [r3, #24]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d917      	bls.n	8009d84 <GUIMONO_DispChar+0x130>
 8009d54:	9a08      	ldr	r2, [sp, #32]
 8009d56:	2a02      	cmp	r2, #2
 8009d58:	d014      	beq.n	8009d84 <GUIMONO_DispChar+0x130>
 8009d5a:	f08a 0004 	eor.w	r0, sl, #4
 8009d5e:	b200      	sxth	r0, r0
 8009d60:	f7fe fdba 	bl	80088d8 <LCD_SetDrawMode>
 8009d64:	f8d8 3000 	ldr.w	r3, [r8]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	f893 e018 	ldrb.w	lr, [r3, #24]
 8009d6e:	7ed9      	ldrb	r1, [r3, #27]
 8009d70:	7e9a      	ldrb	r2, [r3, #26]
 8009d72:	7e5b      	ldrb	r3, [r3, #25]
 8009d74:	4638      	mov	r0, r7
 8009d76:	fb0e 5101 	mla	r1, lr, r1, r5
 8009d7a:	fb06 7202 	mla	r2, r6, r2, r7
 8009d7e:	442b      	add	r3, r5
 8009d80:	f7fe fe06 	bl	8008990 <LCD_FillRect>
 8009d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d86:	b2d8      	uxtb	r0, r3
 8009d88:	f7fe fda6 	bl	80088d8 <LCD_SetDrawMode>
 8009d8c:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <GUIMONO_DispChar+0x14c>)
 8009d8e:	7c61      	ldrb	r1, [r4, #17]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009d94:	440a      	add	r2, r1
 8009d96:	845a      	strh	r2, [r3, #34]	; 0x22
 8009d98:	b00b      	add	sp, #44	; 0x2c
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000020 	.word	0x20000020

08009da4 <GUIMONO_GetCharDistX>:
 8009da4:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <GUIMONO_GetCharDistX+0x14>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	b109      	cbz	r1, 8009db2 <GUIMONO_GetCharDistX+0xe>
 8009dae:	7c1a      	ldrb	r2, [r3, #16]
 8009db0:	600a      	str	r2, [r1, #0]
 8009db2:	7c58      	ldrb	r0, [r3, #17]
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20000020 	.word	0x20000020

08009dbc <GUIMONO_GetFontInfo>:
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	800b      	strh	r3, [r1, #0]
 8009dc0:	4770      	bx	lr

08009dc2 <GUIMONO_IsInFont>:
 8009dc2:	69c3      	ldr	r3, [r0, #28]
 8009dc4:	899a      	ldrh	r2, [r3, #12]
 8009dc6:	428a      	cmp	r2, r1
 8009dc8:	d802      	bhi.n	8009dd0 <GUIMONO_IsInFont+0xe>
 8009dca:	89da      	ldrh	r2, [r3, #14]
 8009dcc:	428a      	cmp	r2, r1
 8009dce:	d20f      	bcs.n	8009df0 <GUIMONO_IsInFont+0x2e>
 8009dd0:	6898      	ldr	r0, [r3, #8]
 8009dd2:	b180      	cbz	r0, 8009df6 <GUIMONO_IsInFont+0x34>
 8009dd4:	8803      	ldrh	r3, [r0, #0]
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	d30c      	bcc.n	8009df4 <GUIMONO_IsInFont+0x32>
 8009dda:	8842      	ldrh	r2, [r0, #2]
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	d309      	bcc.n	8009df4 <GUIMONO_IsInFont+0x32>
 8009de0:	1ac9      	subs	r1, r1, r3
 8009de2:	6842      	ldr	r2, [r0, #4]
 8009de4:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8009de8:	43c0      	mvns	r0, r0
 8009dea:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8009dee:	4770      	bx	lr
 8009df0:	2001      	movs	r0, #1
 8009df2:	4770      	bx	lr
 8009df4:	2000      	movs	r0, #0
 8009df6:	4770      	bx	lr

08009df8 <_PushFreeBlock>:
 8009df8:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <_PushFreeBlock+0x20>)
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009dfe:	3201      	adds	r2, #1
 8009e00:	b510      	push	{r4, lr}
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e06:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8009e0a:	6061      	str	r1, [r4, #4]
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8009e12:	6258      	str	r0, [r3, #36]	; 0x24
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	bf00      	nop
 8009e18:	20022ebc 	.word	0x20022ebc

08009e1c <_OnExit>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d0b      	ldr	r5, [pc, #44]	; (8009e4c <_OnExit+0x30>)
 8009e20:	2400      	movs	r4, #0
 8009e22:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8009e26:	4621      	mov	r1, r4
 8009e28:	2280      	movs	r2, #128	; 0x80
 8009e2a:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8009e2e:	f7ff f885 	bl	8008f3c <GUI__memset>
 8009e32:	4628      	mov	r0, r5
 8009e34:	4621      	mov	r1, r4
 8009e36:	22c0      	movs	r2, #192	; 0xc0
 8009e38:	f7ff f880 	bl	8008f3c <GUI__memset>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4804      	ldr	r0, [pc, #16]	; (8009e50 <_OnExit+0x34>)
 8009e40:	220c      	movs	r2, #12
 8009e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e46:	f7ff b879 	b.w	8008f3c <GUI__memset>
 8009e4a:	bf00      	nop
 8009e4c:	20022ebc 	.word	0x20022ebc
 8009e50:	20022ab4 	.word	0x20022ab4

08009e54 <_RemoveFreeBlock>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	6842      	ldr	r2, [r0, #4]
 8009e58:	230f      	movs	r3, #15
 8009e5a:	490d      	ldr	r1, [pc, #52]	; (8009e90 <_RemoveFreeBlock+0x3c>)
 8009e5c:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 8009e60:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8009e62:	42a2      	cmp	r2, r4
 8009e64:	d203      	bcs.n	8009e6e <_RemoveFreeBlock+0x1a>
 8009e66:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8009e6a:	d2f6      	bcs.n	8009e5a <_RemoveFreeBlock+0x6>
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	2b0f      	cmp	r3, #15
 8009e70:	d80c      	bhi.n	8009e8c <_RemoveFreeBlock+0x38>
 8009e72:	680c      	ldr	r4, [r1, #0]
 8009e74:	1aa2      	subs	r2, r4, r2
 8009e76:	600a      	str	r2, [r1, #0]
 8009e78:	6882      	ldr	r2, [r0, #8]
 8009e7a:	68c0      	ldr	r0, [r0, #12]
 8009e7c:	b102      	cbz	r2, 8009e80 <_RemoveFreeBlock+0x2c>
 8009e7e:	6050      	str	r0, [r2, #4]
 8009e80:	b108      	cbz	r0, 8009e86 <_RemoveFreeBlock+0x32>
 8009e82:	6002      	str	r2, [r0, #0]
 8009e84:	bd10      	pop	{r4, pc}
 8009e86:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8009e8a:	645a      	str	r2, [r3, #68]	; 0x44
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	20022ebc 	.word	0x20022ebc

08009e94 <_AddFreeMemory>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	4e26      	ldr	r6, [pc, #152]	; (8009f30 <_AddFreeMemory+0x9c>)
 8009e98:	68f3      	ldr	r3, [r6, #12]
 8009e9a:	1e5a      	subs	r2, r3, #1
 8009e9c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	4413      	add	r3, r2
 8009ea2:	1808      	adds	r0, r1, r0
 8009ea4:	4298      	cmp	r0, r3
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	d805      	bhi.n	8009eb6 <_AddFreeMemory+0x22>
 8009eaa:	594b      	ldr	r3, [r1, r5]
 8009eac:	b91b      	cbnz	r3, 8009eb6 <_AddFreeMemory+0x22>
 8009eae:	6843      	ldr	r3, [r0, #4]
 8009eb0:	441d      	add	r5, r3
 8009eb2:	f7ff ffcf 	bl	8009e54 <_RemoveFreeBlock>
 8009eb6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d90a      	bls.n	8009ed2 <_AddFreeMemory+0x3e>
 8009ebc:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8009ec0:	1be7      	subs	r7, r4, r7
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	b92b      	cbnz	r3, 8009ed2 <_AddFreeMemory+0x3e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4638      	mov	r0, r7
 8009eca:	441d      	add	r5, r3
 8009ecc:	f7ff ffc2 	bl	8009e54 <_RemoveFreeBlock>
 8009ed0:	463c      	mov	r4, r7
 8009ed2:	230f      	movs	r3, #15
 8009ed4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8009ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009eda:	4295      	cmp	r5, r2
 8009edc:	d203      	bcs.n	8009ee6 <_AddFreeMemory+0x52>
 8009ede:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8009ee2:	d2f7      	bcs.n	8009ed4 <_AddFreeMemory+0x40>
 8009ee4:	e022      	b.n	8009f2c <_AddFreeMemory+0x98>
 8009ee6:	2b0f      	cmp	r3, #15
 8009ee8:	d820      	bhi.n	8009f2c <_AddFreeMemory+0x98>
 8009eea:	3308      	adds	r3, #8
 8009eec:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8009ef0:	1961      	adds	r1, r4, r5
 8009ef2:	6852      	ldr	r2, [r2, #4]
 8009ef4:	60a2      	str	r2, [r4, #8]
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e884 0021 	stmia.w	r4, {r0, r5}
 8009efc:	6124      	str	r4, [r4, #16]
 8009efe:	f841 5c04 	str.w	r5, [r1, #-4]
 8009f02:	f104 0108 	add.w	r1, r4, #8
 8009f06:	b102      	cbz	r2, 8009f0a <_AddFreeMemory+0x76>
 8009f08:	6051      	str	r1, [r2, #4]
 8009f0a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8009f0e:	60e0      	str	r0, [r4, #12]
 8009f10:	6059      	str	r1, [r3, #4]
 8009f12:	6833      	ldr	r3, [r6, #0]
 8009f14:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8009f18:	4a05      	ldr	r2, [pc, #20]	; (8009f30 <_AddFreeMemory+0x9c>)
 8009f1a:	442b      	add	r3, r5
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	b929      	cbnz	r1, 8009f2c <_AddFreeMemory+0x98>
 8009f20:	68d1      	ldr	r1, [r2, #12]
 8009f22:	1acb      	subs	r3, r1, r3
 8009f24:	6891      	ldr	r1, [r2, #8]
 8009f26:	4299      	cmp	r1, r3
 8009f28:	bf38      	it	cc
 8009f2a:	6093      	strcc	r3, [r2, #8]
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f30:	20022ebc 	.word	0x20022ebc

08009f34 <_RemoveHoles>:
 8009f34:	4b25      	ldr	r3, [pc, #148]	; (8009fcc <_RemoveHoles+0x98>)
 8009f36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	4682      	mov	sl, r0
 8009f42:	eb02 0904 	add.w	r9, r2, r4
 8009f46:	469b      	mov	fp, r3
 8009f48:	e894 0028 	ldmia.w	r4, {r3, r5}
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d133      	bne.n	8009fb8 <_RemoveHoles+0x84>
 8009f50:	eb04 0805 	add.w	r8, r4, r5
 8009f54:	45c8      	cmp	r8, r9
 8009f56:	d22f      	bcs.n	8009fb8 <_RemoveHoles+0x84>
 8009f58:	f854 c005 	ldr.w	ip, [r4, r5]
 8009f5c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8009f60:	f1bc 0f00 	cmp.w	ip, #0
 8009f64:	d028      	beq.n	8009fb8 <_RemoveHoles+0x84>
 8009f66:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8009f6a:	4f18      	ldr	r7, [pc, #96]	; (8009fcc <_RemoveHoles+0x98>)
 8009f6c:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d121      	bne.n	8009fb8 <_RemoveHoles+0x84>
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	4620      	mov	r0, r4
 8009f78:	e88d 1008 	stmia.w	sp, {r3, ip}
 8009f7c:	f7ff ff6a 	bl	8009e54 <_RemoveFreeBlock>
 8009f80:	f8d8 1000 	ldr.w	r1, [r8]
 8009f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	6054      	str	r4, [r2, #4]
 8009f8e:	4641      	mov	r1, r8
 8009f90:	4632      	mov	r2, r6
 8009f92:	f005 f926 	bl	800f1e2 <memmove>
 8009f96:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8009f9a:	459c      	cmp	ip, r3
 8009f9c:	d102      	bne.n	8009fa4 <_RemoveHoles+0x70>
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	1b5b      	subs	r3, r3, r5
 8009fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	19a1      	adds	r1, r4, r6
 8009fa8:	f7ff ff74 	bl	8009e94 <_AddFreeMemory>
 8009fac:	f1ba 0f00 	cmp.w	sl, #0
 8009fb0:	d001      	beq.n	8009fb6 <_RemoveHoles+0x82>
 8009fb2:	4582      	cmp	sl, r0
 8009fb4:	d905      	bls.n	8009fc2 <_RemoveHoles+0x8e>
 8009fb6:	4635      	mov	r5, r6
 8009fb8:	442c      	add	r4, r5
 8009fba:	454c      	cmp	r4, r9
 8009fbc:	d3c4      	bcc.n	8009f48 <_RemoveHoles+0x14>
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	e000      	b.n	8009fc4 <_RemoveHoles+0x90>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	b003      	add	sp, #12
 8009fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fca:	bf00      	nop
 8009fcc:	20022ebc 	.word	0x20022ebc

08009fd0 <GUI_ALLOC_FreeFixedBlock>:
 8009fd0:	b128      	cbz	r0, 8009fde <GUI_ALLOC_FreeFixedBlock+0xe>
 8009fd2:	4a03      	ldr	r2, [pc, #12]	; (8009fe0 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8009fd4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009fd6:	6003      	str	r3, [r0, #0]
 8009fd8:	b103      	cbz	r3, 8009fdc <GUI_ALLOC_FreeFixedBlock+0xc>
 8009fda:	6058      	str	r0, [r3, #4]
 8009fdc:	63d0      	str	r0, [r2, #60]	; 0x3c
 8009fde:	4770      	bx	lr
 8009fe0:	20022ebc 	.word	0x20022ebc

08009fe4 <GUI_ALLOC_h2p>:
 8009fe4:	b128      	cbz	r0, 8009ff2 <GUI_ALLOC_h2p+0xe>
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <GUI_ALLOC_h2p+0x10>)
 8009fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009fee:	6840      	ldr	r0, [r0, #4]
 8009ff0:	3008      	adds	r0, #8
 8009ff2:	4770      	bx	lr
 8009ff4:	20022ebc 	.word	0x20022ebc

08009ff8 <GUI_ALLOC_LockH>:
 8009ff8:	4b05      	ldr	r3, [pc, #20]	; (800a010 <GUI_ALLOC_LockH+0x18>)
 8009ffa:	69d9      	ldr	r1, [r3, #28]
 8009ffc:	3101      	adds	r1, #1
 8009ffe:	61d9      	str	r1, [r3, #28]
 800a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a002:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800a006:	3101      	adds	r1, #1
 800a008:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800a00c:	f7ff bfea 	b.w	8009fe4 <GUI_ALLOC_h2p>
 800a010:	20022ebc 	.word	0x20022ebc

0800a014 <GUI_ALLOC_UnlockH>:
 800a014:	b530      	push	{r4, r5, lr}
 800a016:	6802      	ldr	r2, [r0, #0]
 800a018:	4b09      	ldr	r3, [pc, #36]	; (800a040 <GUI_ALLOC_UnlockH+0x2c>)
 800a01a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800a01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a020:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800a024:	2c01      	cmp	r4, #1
 800a026:	d903      	bls.n	800a030 <GUI_ALLOC_UnlockH+0x1c>
 800a028:	69dd      	ldr	r5, [r3, #28]
 800a02a:	b10d      	cbz	r5, 800a030 <GUI_ALLOC_UnlockH+0x1c>
 800a02c:	3d01      	subs	r5, #1
 800a02e:	61dd      	str	r5, [r3, #28]
 800a030:	3c01      	subs	r4, #1
 800a032:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800a036:	2300      	movs	r3, #0
 800a038:	6003      	str	r3, [r0, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	bd30      	pop	{r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	20022ebc 	.word	0x20022ebc

0800a044 <GUI_ALLOC_AssignMemory>:
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <GUI_ALLOC_AssignMemory+0xc>)
 800a046:	f021 0103 	bic.w	r1, r1, #3
 800a04a:	6018      	str	r0, [r3, #0]
 800a04c:	6059      	str	r1, [r3, #4]
 800a04e:	4770      	bx	lr
 800a050:	20022ab4 	.word	0x20022ab4

0800a054 <GUI_ALLOC_Free>:
 800a054:	b510      	push	{r4, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	b180      	cbz	r0, 800a07c <GUI_ALLOC_Free+0x28>
 800a05a:	4b09      	ldr	r3, [pc, #36]	; (800a080 <GUI_ALLOC_Free+0x2c>)
 800a05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800a062:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d108      	bne.n	800a07c <GUI_ALLOC_Free+0x28>
 800a06a:	6851      	ldr	r1, [r2, #4]
 800a06c:	6848      	ldr	r0, [r1, #4]
 800a06e:	f7ff ff11 	bl	8009e94 <_AddFreeMemory>
 800a072:	4620      	mov	r0, r4
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	f7ff bebe 	b.w	8009df8 <_PushFreeBlock>
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	bf00      	nop
 800a080:	20022ebc 	.word	0x20022ebc

0800a084 <_EnlargeBlocks>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	4c22      	ldr	r4, [pc, #136]	; (800a114 <_EnlargeBlocks+0x90>)
 800a08a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a08c:	b93b      	cbnz	r3, 800a09e <_EnlargeBlocks+0x1a>
 800a08e:	4b22      	ldr	r3, [pc, #136]	; (800a118 <_EnlargeBlocks+0x94>)
 800a090:	689d      	ldr	r5, [r3, #8]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	3508      	adds	r5, #8
 800a096:	fbb3 f5f5 	udiv	r5, r3, r5
 800a09a:	3502      	adds	r5, #2
 800a09c:	e003      	b.n	800a0a6 <_EnlargeBlocks+0x22>
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	1d1d      	adds	r5, r3, #4
 800a0a2:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800a0a6:	00e8      	lsls	r0, r5, #3
 800a0a8:	f000 f978 	bl	800a39c <_Alloc>
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	b360      	cbz	r0, 800a10a <_EnlargeBlocks+0x86>
 800a0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0b2:	6922      	ldr	r2, [r4, #16]
 800a0b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a0b6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800a0ba:	00d2      	lsls	r2, r2, #3
 800a0bc:	685e      	ldr	r6, [r3, #4]
 800a0be:	3608      	adds	r6, #8
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f005 f883 	bl	800f1cc <memcpy>
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	6366      	str	r6, [r4, #52]	; 0x34
 800a0ca:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800a0ce:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800a0d2:	3104      	adds	r1, #4
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	1e68      	subs	r0, r5, #1
 800a0d8:	4283      	cmp	r3, r0
 800a0da:	f101 0108 	add.w	r1, r1, #8
 800a0de:	d203      	bcs.n	800a0e8 <_EnlargeBlocks+0x64>
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	f841 3c08 	str.w	r3, [r1, #-8]
 800a0e6:	e7f6      	b.n	800a0d6 <_EnlargeBlocks+0x52>
 800a0e8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	605e      	str	r6, [r3, #4]
 800a0f0:	6863      	ldr	r3, [r4, #4]
 800a0f2:	6262      	str	r2, [r4, #36]	; 0x24
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	442b      	add	r3, r5
 800a0f8:	6063      	str	r3, [r4, #4]
 800a0fa:	6125      	str	r5, [r4, #16]
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	b13f      	cbz	r7, 800a110 <_EnlargeBlocks+0x8c>
 800a100:	f7ff ffa8 	bl	800a054 <GUI_ALLOC_Free>
 800a104:	4630      	mov	r0, r6
 800a106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a10a:	2001      	movs	r0, #1
 800a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a114:	20022ebc 	.word	0x20022ebc
 800a118:	20022ab4 	.word	0x20022ab4

0800a11c <_InitOnce>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	4e58      	ldr	r6, [pc, #352]	; (800a280 <_InitOnce+0x164>)
 800a120:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a124:	2900      	cmp	r1, #0
 800a126:	f040 80aa 	bne.w	800a27e <_InitOnce+0x162>
 800a12a:	4d56      	ldr	r5, [pc, #344]	; (800a284 <_InitOnce+0x168>)
 800a12c:	686a      	ldr	r2, [r5, #4]
 800a12e:	2301      	movs	r3, #1
 800a130:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800a134:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800a138:	bf28      	it	cs
 800a13a:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800a13e:	682b      	ldr	r3, [r5, #0]
 800a140:	0894      	lsrs	r4, r2, #2
 800a142:	2000      	movs	r0, #0
 800a144:	42a0      	cmp	r0, r4
 800a146:	d00c      	beq.n	800a162 <_InitOnce+0x46>
 800a148:	1847      	adds	r7, r0, r1
 800a14a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a14e:	fbb7 fefe 	udiv	lr, r7, lr
 800a152:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a156:	ebce 0707 	rsb	r7, lr, r7
 800a15a:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800a15e:	3001      	adds	r0, #1
 800a160:	e7f0      	b.n	800a144 <_InitOnce+0x28>
 800a162:	2000      	movs	r0, #0
 800a164:	42a0      	cmp	r0, r4
 800a166:	d016      	beq.n	800a196 <_InitOnce+0x7a>
 800a168:	1847      	adds	r7, r0, r1
 800a16a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a16e:	fbb7 fefe 	udiv	lr, r7, lr
 800a172:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a176:	ebce 0e07 	rsb	lr, lr, r7
 800a17a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a17e:	4577      	cmp	r7, lr
 800a180:	d007      	beq.n	800a192 <_InitOnce+0x76>
 800a182:	68aa      	ldr	r2, [r5, #8]
 800a184:	4b3f      	ldr	r3, [pc, #252]	; (800a284 <_InitOnce+0x168>)
 800a186:	2a00      	cmp	r2, #0
 800a188:	d155      	bne.n	800a236 <_InitOnce+0x11a>
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	0892      	lsrs	r2, r2, #2
 800a18e:	609a      	str	r2, [r3, #8]
 800a190:	e051      	b.n	800a236 <_InitOnce+0x11a>
 800a192:	3001      	adds	r0, #1
 800a194:	e7e6      	b.n	800a164 <_InitOnce+0x48>
 800a196:	3101      	adds	r1, #1
 800a198:	2902      	cmp	r1, #2
 800a19a:	d1d2      	bne.n	800a142 <_InitOnce+0x26>
 800a19c:	0854      	lsrs	r4, r2, #1
 800a19e:	2100      	movs	r1, #0
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	42a0      	cmp	r0, r4
 800a1a4:	d00c      	beq.n	800a1c0 <_InitOnce+0xa4>
 800a1a6:	1847      	adds	r7, r0, r1
 800a1a8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a1ac:	fbb7 fefe 	udiv	lr, r7, lr
 800a1b0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a1b4:	ebce 0707 	rsb	r7, lr, r7
 800a1b8:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800a1bc:	3001      	adds	r0, #1
 800a1be:	e7f0      	b.n	800a1a2 <_InitOnce+0x86>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	42a0      	cmp	r0, r4
 800a1c4:	d00f      	beq.n	800a1e6 <_InitOnce+0xca>
 800a1c6:	1847      	adds	r7, r0, r1
 800a1c8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a1cc:	fbb7 fefe 	udiv	lr, r7, lr
 800a1d0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a1d4:	ebce 0707 	rsb	r7, lr, r7
 800a1d8:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800a1dc:	b2bf      	uxth	r7, r7
 800a1de:	45bc      	cmp	ip, r7
 800a1e0:	d1cf      	bne.n	800a182 <_InitOnce+0x66>
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	e7ed      	b.n	800a1c2 <_InitOnce+0xa6>
 800a1e6:	3101      	adds	r1, #1
 800a1e8:	2902      	cmp	r1, #2
 800a1ea:	d1d9      	bne.n	800a1a0 <_InitOnce+0x84>
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	4290      	cmp	r0, r2
 800a1f2:	d007      	beq.n	800a204 <_InitOnce+0xe8>
 800a1f4:	1844      	adds	r4, r0, r1
 800a1f6:	27ff      	movs	r7, #255	; 0xff
 800a1f8:	fbb4 f7f7 	udiv	r7, r4, r7
 800a1fc:	443c      	add	r4, r7
 800a1fe:	541c      	strb	r4, [r3, r0]
 800a200:	3001      	adds	r0, #1
 800a202:	e7f5      	b.n	800a1f0 <_InitOnce+0xd4>
 800a204:	2000      	movs	r0, #0
 800a206:	4290      	cmp	r0, r2
 800a208:	d00b      	beq.n	800a222 <_InitOnce+0x106>
 800a20a:	1844      	adds	r4, r0, r1
 800a20c:	27ff      	movs	r7, #255	; 0xff
 800a20e:	fbb4 f7f7 	udiv	r7, r4, r7
 800a212:	443c      	add	r4, r7
 800a214:	5c1f      	ldrb	r7, [r3, r0]
 800a216:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800a21a:	42a7      	cmp	r7, r4
 800a21c:	d1b1      	bne.n	800a182 <_InitOnce+0x66>
 800a21e:	3001      	adds	r0, #1
 800a220:	e7f1      	b.n	800a206 <_InitOnce+0xea>
 800a222:	3101      	adds	r1, #1
 800a224:	2902      	cmp	r1, #2
 800a226:	d1e2      	bne.n	800a1ee <_InitOnce+0xd2>
 800a228:	2100      	movs	r1, #0
 800a22a:	4291      	cmp	r1, r2
 800a22c:	d0a9      	beq.n	800a182 <_InitOnce+0x66>
 800a22e:	2000      	movs	r0, #0
 800a230:	5458      	strb	r0, [r3, r1]
 800a232:	3101      	adds	r1, #1
 800a234:	e7f9      	b.n	800a22a <_InitOnce+0x10e>
 800a236:	4814      	ldr	r0, [pc, #80]	; (800a288 <_InitOnce+0x16c>)
 800a238:	4b14      	ldr	r3, [pc, #80]	; (800a28c <_InitOnce+0x170>)
 800a23a:	6003      	str	r3, [r0, #0]
 800a23c:	f7ff fc8c 	bl	8009b58 <GUI__RegisterExit>
 800a240:	235a      	movs	r3, #90	; 0x5a
 800a242:	6233      	str	r3, [r6, #32]
 800a244:	2300      	movs	r3, #0
 800a246:	2110      	movs	r1, #16
 800a248:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a24c:	4099      	lsls	r1, r3
 800a24e:	3301      	adds	r3, #1
 800a250:	2b10      	cmp	r3, #16
 800a252:	4c0b      	ldr	r4, [pc, #44]	; (800a280 <_InitOnce+0x164>)
 800a254:	6411      	str	r1, [r2, #64]	; 0x40
 800a256:	d1f6      	bne.n	800a246 <_InitOnce+0x12a>
 800a258:	6868      	ldr	r0, [r5, #4]
 800a25a:	6829      	ldr	r1, [r5, #0]
 800a25c:	63a1      	str	r1, [r4, #56]	; 0x38
 800a25e:	2302      	movs	r3, #2
 800a260:	6123      	str	r3, [r4, #16]
 800a262:	f1a0 0314 	sub.w	r3, r0, #20
 800a266:	440b      	add	r3, r1
 800a268:	2501      	movs	r5, #1
 800a26a:	6363      	str	r3, [r4, #52]	; 0x34
 800a26c:	60e0      	str	r0, [r4, #12]
 800a26e:	605d      	str	r5, [r3, #4]
 800a270:	6265      	str	r5, [r4, #36]	; 0x24
 800a272:	6065      	str	r5, [r4, #4]
 800a274:	f7ff fe0e 	bl	8009e94 <_AddFreeMemory>
 800a278:	f7ff ff04 	bl	800a084 <_EnlargeBlocks>
 800a27c:	6325      	str	r5, [r4, #48]	; 0x30
 800a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a280:	20022ebc 	.word	0x20022ebc
 800a284:	20022ab4 	.word	0x20022ab4
 800a288:	20022ac0 	.word	0x20022ac0
 800a28c:	08009e1d 	.word	0x08009e1d

0800a290 <GUI_ALLOC_GetFixedBlock>:
 800a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a294:	4605      	mov	r5, r0
 800a296:	4e26      	ldr	r6, [pc, #152]	; (800a330 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800a298:	3503      	adds	r5, #3
 800a29a:	f7ff ff3f 	bl	800a11c <_InitOnce>
 800a29e:	f025 0503 	bic.w	r5, r5, #3
 800a2a2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a2a4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800a2a6:	3504      	adds	r5, #4
 800a2a8:	429d      	cmp	r5, r3
 800a2aa:	bf38      	it	cc
 800a2ac:	461d      	movcc	r5, r3
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	b12c      	cbz	r4, 800a2be <GUI_ALLOC_GetFixedBlock+0x2e>
 800a2b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a2b6:	42ab      	cmp	r3, r5
 800a2b8:	d02c      	beq.n	800a314 <GUI_ALLOC_GetFixedBlock+0x84>
 800a2ba:	6824      	ldr	r4, [r4, #0]
 800a2bc:	e7f8      	b.n	800a2b0 <GUI_ALLOC_GetFixedBlock+0x20>
 800a2be:	68f3      	ldr	r3, [r6, #12]
 800a2c0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800a2c2:	eb02 0803 	add.w	r8, r2, r3
 800a2c6:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800a2ca:	ebc7 0708 	rsb	r7, r7, r8
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	b133      	cbz	r3, 800a2e0 <GUI_ALLOC_GetFixedBlock+0x50>
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff fe2e 	bl	8009f34 <_RemoveHoles>
 800a2d8:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800a2dc:	ebc7 0708 	rsb	r7, r7, r8
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	bb13      	cbnz	r3, 800a32a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	42ab      	cmp	r3, r5
 800a2e8:	db1f      	blt.n	800a32a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	1d1c      	adds	r4, r3, #4
 800a2ee:	f7ff fdb1 	bl	8009e54 <_RemoveFreeBlock>
 800a2f2:	68f3      	ldr	r3, [r6, #12]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	1b5b      	subs	r3, r3, r5
 800a2f8:	60f3      	str	r3, [r6, #12]
 800a2fa:	6973      	ldr	r3, [r6, #20]
 800a2fc:	1b64      	subs	r4, r4, r5
 800a2fe:	442b      	add	r3, r5
 800a300:	1b40      	subs	r0, r0, r5
 800a302:	443c      	add	r4, r7
 800a304:	6173      	str	r3, [r6, #20]
 800a306:	d002      	beq.n	800a30e <GUI_ALLOC_GetFixedBlock+0x7e>
 800a308:	4639      	mov	r1, r7
 800a30a:	f7ff fdc3 	bl	8009e94 <_AddFreeMemory>
 800a30e:	f844 5c04 	str.w	r5, [r4, #-4]
 800a312:	e00a      	b.n	800a32a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	b10b      	cbz	r3, 800a31c <GUI_ALLOC_GetFixedBlock+0x8c>
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	6059      	str	r1, [r3, #4]
 800a31c:	6861      	ldr	r1, [r4, #4]
 800a31e:	b101      	cbz	r1, 800a322 <GUI_ALLOC_GetFixedBlock+0x92>
 800a320:	600b      	str	r3, [r1, #0]
 800a322:	42a2      	cmp	r2, r4
 800a324:	d101      	bne.n	800a32a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a32a:	4620      	mov	r0, r4
 800a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a330:	20022ebc 	.word	0x20022ebc

0800a334 <GUI_ALLOC_GetMaxSize>:
 800a334:	b508      	push	{r3, lr}
 800a336:	f7ff fef1 	bl	800a11c <_InitOnce>
 800a33a:	2200      	movs	r2, #0
 800a33c:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <GUI_ALLOC_GetMaxSize+0x38>)
 800a33e:	4413      	add	r3, r2
 800a340:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a344:	b113      	cbz	r3, 800a34c <GUI_ALLOC_GetMaxSize+0x18>
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	2000      	movs	r0, #0
 800a34a:	e00b      	b.n	800a364 <GUI_ALLOC_GetMaxSize+0x30>
 800a34c:	3a08      	subs	r2, #8
 800a34e:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800a352:	d1f3      	bne.n	800a33c <GUI_ALLOC_GetMaxSize+0x8>
 800a354:	e7f8      	b.n	800a348 <GUI_ALLOC_GetMaxSize+0x14>
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	4290      	cmp	r0, r2
 800a35c:	bf38      	it	cc
 800a35e:	4610      	movcc	r0, r2
 800a360:	b113      	cbz	r3, 800a368 <GUI_ALLOC_GetMaxSize+0x34>
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1f6      	bne.n	800a356 <GUI_ALLOC_GetMaxSize+0x22>
 800a368:	380c      	subs	r0, #12
 800a36a:	bd08      	pop	{r3, pc}
 800a36c:	20022ebc 	.word	0x20022ebc

0800a370 <GUI_ALLOC_RequestSize>:
 800a370:	b508      	push	{r3, lr}
 800a372:	f7ff ffdf 	bl	800a334 <GUI_ALLOC_GetMaxSize>
 800a376:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800a37a:	f04f 0364 	mov.w	r3, #100	; 0x64
 800a37e:	4a06      	ldr	r2, [pc, #24]	; (800a398 <GUI_ALLOC_RequestSize+0x28>)
 800a380:	d904      	bls.n	800a38c <GUI_ALLOC_RequestSize+0x1c>
 800a382:	fb90 f0f3 	sdiv	r0, r0, r3
 800a386:	6a13      	ldr	r3, [r2, #32]
 800a388:	4358      	muls	r0, r3
 800a38a:	bd08      	pop	{r3, pc}
 800a38c:	6a12      	ldr	r2, [r2, #32]
 800a38e:	4350      	muls	r0, r2
 800a390:	fbb0 f0f3 	udiv	r0, r0, r3
 800a394:	bd08      	pop	{r3, pc}
 800a396:	bf00      	nop
 800a398:	20022ebc 	.word	0x20022ebc

0800a39c <_Alloc>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	4d38      	ldr	r5, [pc, #224]	; (800a484 <_Alloc+0xe8>)
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	f7ff feba 	bl	800a11c <_InitOnce>
 800a3a8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	42bc      	cmp	r4, r7
 800a3ae:	bf24      	itt	cs
 800a3b0:	1ce7      	addcs	r7, r4, #3
 800a3b2:	f027 0703 	biccs.w	r7, r7, #3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	429f      	cmp	r7, r3
 800a3ba:	4c32      	ldr	r4, [pc, #200]	; (800a484 <_Alloc+0xe8>)
 800a3bc:	d83e      	bhi.n	800a43c <_Alloc+0xa0>
 800a3be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a3c0:	6862      	ldr	r2, [r4, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d90f      	bls.n	800a3e6 <_Alloc+0x4a>
 800a3c6:	686b      	ldr	r3, [r5, #4]
 800a3c8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	606b      	str	r3, [r5, #4]
 800a3ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3d0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800a3d4:	eb03 0209 	add.w	r2, r3, r9
 800a3d8:	6852      	ldr	r2, [r2, #4]
 800a3da:	626a      	str	r2, [r5, #36]	; 0x24
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800a3e2:	b956      	cbnz	r6, 800a3fa <_Alloc+0x5e>
 800a3e4:	e02a      	b.n	800a43c <_Alloc+0xa0>
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	6323      	str	r3, [r4, #48]	; 0x30
 800a3ea:	f7ff fe4b 	bl	800a084 <_EnlargeBlocks>
 800a3ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d0e6      	beq.n	800a3c6 <_Alloc+0x2a>
 800a3f8:	e020      	b.n	800a43c <_Alloc+0xa0>
 800a3fa:	230f      	movs	r3, #15
 800a3fc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800a400:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a402:	4297      	cmp	r7, r2
 800a404:	d20c      	bcs.n	800a420 <_Alloc+0x84>
 800a406:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800a40a:	d2f7      	bcs.n	800a3fc <_Alloc+0x60>
 800a40c:	e008      	b.n	800a420 <_Alloc+0x84>
 800a40e:	6894      	ldr	r4, [r2, #8]
 800a410:	b12c      	cbz	r4, 800a41e <_Alloc+0x82>
 800a412:	6862      	ldr	r2, [r4, #4]
 800a414:	4297      	cmp	r7, r2
 800a416:	d914      	bls.n	800a442 <_Alloc+0xa6>
 800a418:	68a2      	ldr	r2, [r4, #8]
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	d1f7      	bne.n	800a40e <_Alloc+0x72>
 800a41e:	3301      	adds	r3, #1
 800a420:	2b0f      	cmp	r3, #15
 800a422:	d803      	bhi.n	800a42c <_Alloc+0x90>
 800a424:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800a428:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a42a:	e7f6      	b.n	800a41a <_Alloc+0x7e>
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff fd81 	bl	8009f34 <_RemoveHoles>
 800a432:	2800      	cmp	r0, #0
 800a434:	d0e1      	beq.n	800a3fa <_Alloc+0x5e>
 800a436:	4630      	mov	r0, r6
 800a438:	f7ff fcde 	bl	8009df8 <_PushFreeBlock>
 800a43c:	2000      	movs	r0, #0
 800a43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a442:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a446:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a448:	ebc7 0208 	rsb	r2, r7, r8
 800a44c:	330c      	adds	r3, #12
 800a44e:	4620      	mov	r0, r4
 800a450:	429a      	cmp	r2, r3
 800a452:	bf38      	it	cc
 800a454:	4647      	movcc	r7, r8
 800a456:	f7ff fcfd 	bl	8009e54 <_RemoveFreeBlock>
 800a45a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a45c:	444b      	add	r3, r9
 800a45e:	19e1      	adds	r1, r4, r7
 800a460:	605c      	str	r4, [r3, #4]
 800a462:	45b8      	cmp	r8, r7
 800a464:	f04f 0300 	mov.w	r3, #0
 800a468:	e884 00c0 	stmia.w	r4, {r6, r7}
 800a46c:	60a3      	str	r3, [r4, #8]
 800a46e:	6124      	str	r4, [r4, #16]
 800a470:	f841 7c04 	str.w	r7, [r1, #-4]
 800a474:	dd03      	ble.n	800a47e <_Alloc+0xe2>
 800a476:	ebc7 0008 	rsb	r0, r7, r8
 800a47a:	f7ff fd0b 	bl	8009e94 <_AddFreeMemory>
 800a47e:	4630      	mov	r0, r6
 800a480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a484:	20022ebc 	.word	0x20022ebc

0800a488 <GUI_ALLOC_AllocNoInit>:
 800a488:	b108      	cbz	r0, 800a48e <GUI_ALLOC_AllocNoInit+0x6>
 800a48a:	f7ff bf87 	b.w	800a39c <_Alloc>
 800a48e:	4770      	bx	lr

0800a490 <_Color2Index_M888>:
 800a490:	b2c2      	uxtb	r2, r0
 800a492:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a49a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800a49e:	4318      	orrs	r0, r3
 800a4a0:	4770      	bx	lr

0800a4a2 <_GetIndexMask_M888>:
 800a4a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a4a6:	4770      	bx	lr

0800a4a8 <_Color2IndexBulk>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	4f0c      	ldr	r7, [pc, #48]	; (800a4dc <_Color2IndexBulk+0x34>)
 800a4ac:	683f      	ldr	r7, [r7, #0]
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	469c      	mov	ip, r3
 800a4b6:	b10f      	cbz	r7, 800a4bc <_Color2IndexBulk+0x14>
 800a4b8:	47b8      	blx	r7
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	f856 2b04 	ldr.w	r2, [r6], #4
 800a4c0:	b2d1      	uxtb	r1, r2
 800a4c2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800a4c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a4ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	3c01      	subs	r4, #1
 800a4d2:	602a      	str	r2, [r5, #0]
 800a4d4:	4465      	add	r5, ip
 800a4d6:	d1f1      	bne.n	800a4bc <_Color2IndexBulk+0x14>
 800a4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20022acc 	.word	0x20022acc

0800a4e0 <_Index2ColorBulk>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	4f0c      	ldr	r7, [pc, #48]	; (800a514 <_Index2ColorBulk+0x34>)
 800a4e4:	683f      	ldr	r7, [r7, #0]
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	460e      	mov	r6, r1
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	469c      	mov	ip, r3
 800a4ee:	b10f      	cbz	r7, 800a4f4 <_Index2ColorBulk+0x14>
 800a4f0:	47b8      	blx	r7
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	682a      	ldr	r2, [r5, #0]
 800a4f6:	b2d1      	uxtb	r1, r2
 800a4f8:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800a4fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a500:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800a504:	431a      	orrs	r2, r3
 800a506:	3c01      	subs	r4, #1
 800a508:	f846 2b04 	str.w	r2, [r6], #4
 800a50c:	4465      	add	r5, ip
 800a50e:	d1f1      	bne.n	800a4f4 <_Index2ColorBulk+0x14>
 800a510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a512:	bf00      	nop
 800a514:	20022ac8 	.word	0x20022ac8

0800a518 <GUICC_M888_SetCustColorConv>:
 800a518:	4b02      	ldr	r3, [pc, #8]	; (800a524 <GUICC_M888_SetCustColorConv+0xc>)
 800a51a:	6018      	str	r0, [r3, #0]
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <GUICC_M888_SetCustColorConv+0x10>)
 800a51e:	6019      	str	r1, [r3, #0]
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	20022acc 	.word	0x20022acc
 800a528:	20022ac8 	.word	0x20022ac8

0800a52c <LCD_Index2Color_M565>:
 800a52c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 800a530:	4b06      	ldr	r3, [pc, #24]	; (800a54c <LCD_Index2Color_M565+0x20>)
 800a532:	f000 021f 	and.w	r2, r0, #31
 800a536:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800a53a:	5c9a      	ldrb	r2, [r3, r2]
 800a53c:	5c5b      	ldrb	r3, [r3, r1]
 800a53e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800a542:	4a03      	ldr	r2, [pc, #12]	; (800a550 <LCD_Index2Color_M565+0x24>)
 800a544:	5c10      	ldrb	r0, [r2, r0]
 800a546:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800a54a:	4770      	bx	lr
 800a54c:	080804a0 	.word	0x080804a0
 800a550:	08080460 	.word	0x08080460

0800a554 <_Color2Index_M565>:
 800a554:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a558:	4b06      	ldr	r3, [pc, #24]	; (800a574 <_Color2Index_M565+0x20>)
 800a55a:	b2c2      	uxtb	r2, r0
 800a55c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a560:	5c9a      	ldrb	r2, [r3, r2]
 800a562:	5c5b      	ldrb	r3, [r3, r1]
 800a564:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800a568:	4a03      	ldr	r2, [pc, #12]	; (800a578 <_Color2Index_M565+0x24>)
 800a56a:	5c10      	ldrb	r0, [r2, r0]
 800a56c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	080805c0 	.word	0x080805c0
 800a578:	080804c0 	.word	0x080804c0

0800a57c <_GetIndexMask_M565>:
 800a57c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a580:	4770      	bx	lr
	...

0800a584 <_Color2IndexBulk>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	4f0f      	ldr	r7, [pc, #60]	; (800a5c4 <_Color2IndexBulk+0x40>)
 800a588:	683f      	ldr	r7, [r7, #0]
 800a58a:	4606      	mov	r6, r0
 800a58c:	460d      	mov	r5, r1
 800a58e:	4614      	mov	r4, r2
 800a590:	469c      	mov	ip, r3
 800a592:	b10f      	cbz	r7, 800a598 <_Color2IndexBulk+0x14>
 800a594:	47b8      	blx	r7
 800a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a598:	f856 2b04 	ldr.w	r2, [r6], #4
 800a59c:	490a      	ldr	r1, [pc, #40]	; (800a5c8 <_Color2IndexBulk+0x44>)
 800a59e:	b2d3      	uxtb	r3, r2
 800a5a0:	3c01      	subs	r4, #1
 800a5a2:	5cc8      	ldrb	r0, [r1, r3]
 800a5a4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800a5a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800a5ac:	5ccb      	ldrb	r3, [r1, r3]
 800a5ae:	4907      	ldr	r1, [pc, #28]	; (800a5cc <_Color2IndexBulk+0x48>)
 800a5b0:	5c8a      	ldrb	r2, [r1, r2]
 800a5b2:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800a5b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a5ba:	802b      	strh	r3, [r5, #0]
 800a5bc:	4465      	add	r5, ip
 800a5be:	d1eb      	bne.n	800a598 <_Color2IndexBulk+0x14>
 800a5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20022ad4 	.word	0x20022ad4
 800a5c8:	080805c0 	.word	0x080805c0
 800a5cc:	080804c0 	.word	0x080804c0

0800a5d0 <_Index2ColorBulk>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	4e13      	ldr	r6, [pc, #76]	; (800a620 <_Index2ColorBulk+0x50>)
 800a5d4:	6836      	ldr	r6, [r6, #0]
 800a5d6:	4684      	mov	ip, r0
 800a5d8:	4614      	mov	r4, r2
 800a5da:	461d      	mov	r5, r3
 800a5dc:	b10e      	cbz	r6, 800a5e2 <_Index2ColorBulk+0x12>
 800a5de:	47b0      	blx	r6
 800a5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e2:	1e50      	subs	r0, r2, #1
 800a5e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	fb03 c000 	mla	r0, r3, r0, ip
 800a5ee:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5f2:	8802      	ldrh	r2, [r0, #0]
 800a5f4:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <_Index2ColorBulk+0x54>)
 800a5f6:	f002 061f 	and.w	r6, r2, #31
 800a5fa:	0ad7      	lsrs	r7, r2, #11
 800a5fc:	5d9e      	ldrb	r6, [r3, r6]
 800a5fe:	5ddb      	ldrb	r3, [r3, r7]
 800a600:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800a604:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800a608:	4e07      	ldr	r6, [pc, #28]	; (800a628 <_Index2ColorBulk+0x58>)
 800a60a:	5cb2      	ldrb	r2, [r6, r2]
 800a60c:	3c01      	subs	r4, #1
 800a60e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a612:	f841 3904 	str.w	r3, [r1], #-4
 800a616:	ebc5 0000 	rsb	r0, r5, r0
 800a61a:	d1ea      	bne.n	800a5f2 <_Index2ColorBulk+0x22>
 800a61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a61e:	bf00      	nop
 800a620:	20022ad0 	.word	0x20022ad0
 800a624:	080804a0 	.word	0x080804a0
 800a628:	08080460 	.word	0x08080460

0800a62c <GUICC_M565_SetCustColorConv>:
 800a62c:	4b02      	ldr	r3, [pc, #8]	; (800a638 <GUICC_M565_SetCustColorConv+0xc>)
 800a62e:	6018      	str	r0, [r3, #0]
 800a630:	4b02      	ldr	r3, [pc, #8]	; (800a63c <GUICC_M565_SetCustColorConv+0x10>)
 800a632:	6019      	str	r1, [r3, #0]
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	20022ad4 	.word	0x20022ad4
 800a63c:	20022ad0 	.word	0x20022ad0

0800a640 <LCD_Index2Color_888>:
 800a640:	4770      	bx	lr

0800a642 <LCD_Index2Color_8888>:
 800a642:	4770      	bx	lr

0800a644 <LCD_Index2Color_565>:
 800a644:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800a648:	4a06      	ldr	r2, [pc, #24]	; (800a664 <LCD_Index2Color_565+0x20>)
 800a64a:	5cd1      	ldrb	r1, [r2, r3]
 800a64c:	4b06      	ldr	r3, [pc, #24]	; (800a668 <LCD_Index2Color_565+0x24>)
 800a64e:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 800a652:	f000 001f 	and.w	r0, r0, #31
 800a656:	5c9a      	ldrb	r2, [r3, r2]
 800a658:	5c18      	ldrb	r0, [r3, r0]
 800a65a:	0412      	lsls	r2, r2, #16
 800a65c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800a660:	4410      	add	r0, r2
 800a662:	4770      	bx	lr
 800a664:	08080460 	.word	0x08080460
 800a668:	080804a0 	.word	0x080804a0

0800a66c <_GetIndexMask_0>:
 800a66c:	b508      	push	{r3, lr}
 800a66e:	f7fd ffd1 	bl	8008614 <LCD_GetNumColors>
 800a672:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a676:	d010      	beq.n	800a69a <_GetIndexMask_0+0x2e>
 800a678:	287f      	cmp	r0, #127	; 0x7f
 800a67a:	d810      	bhi.n	800a69e <_GetIndexMask_0+0x32>
 800a67c:	283f      	cmp	r0, #63	; 0x3f
 800a67e:	d810      	bhi.n	800a6a2 <_GetIndexMask_0+0x36>
 800a680:	281f      	cmp	r0, #31
 800a682:	d810      	bhi.n	800a6a6 <_GetIndexMask_0+0x3a>
 800a684:	280f      	cmp	r0, #15
 800a686:	d810      	bhi.n	800a6aa <_GetIndexMask_0+0x3e>
 800a688:	2807      	cmp	r0, #7
 800a68a:	d810      	bhi.n	800a6ae <_GetIndexMask_0+0x42>
 800a68c:	2803      	cmp	r0, #3
 800a68e:	d810      	bhi.n	800a6b2 <_GetIndexMask_0+0x46>
 800a690:	2801      	cmp	r0, #1
 800a692:	bf94      	ite	ls
 800a694:	2000      	movls	r0, #0
 800a696:	2001      	movhi	r0, #1
 800a698:	e00c      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a69a:	2008      	movs	r0, #8
 800a69c:	e00a      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a69e:	2007      	movs	r0, #7
 800a6a0:	e008      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a6a2:	2006      	movs	r0, #6
 800a6a4:	e006      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a6a6:	2005      	movs	r0, #5
 800a6a8:	e004      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a6aa:	2004      	movs	r0, #4
 800a6ac:	e002      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a6ae:	2003      	movs	r0, #3
 800a6b0:	e000      	b.n	800a6b4 <_GetIndexMask_0+0x48>
 800a6b2:	2002      	movs	r0, #2
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ba:	3801      	subs	r0, #1
 800a6bc:	bd08      	pop	{r3, pc}

0800a6be <_Index2Color_0>:
 800a6be:	b538      	push	{r3, r4, r5, lr}
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	f7fd ffa7 	bl	8008614 <LCD_GetNumColors>
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	f7fd ffce 	bl	8008668 <LCD_GetPalette>
 800a6cc:	42ac      	cmp	r4, r5
 800a6ce:	d203      	bcs.n	800a6d8 <_Index2Color_0+0x1a>
 800a6d0:	b118      	cbz	r0, 800a6da <_Index2Color_0+0x1c>
 800a6d2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	2000      	movs	r0, #0
 800a6da:	bd38      	pop	{r3, r4, r5, pc}

0800a6dc <_Color2Index_0>:
 800a6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e0:	4681      	mov	r9, r0
 800a6e2:	f7fd ff97 	bl	8008614 <LCD_GetNumColors>
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	f7fd ffbe 	bl	8008668 <LCD_GetPalette>
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	b1d8      	cbz	r0, 800a728 <_Color2Index_0+0x4c>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800a6f6:	4591      	cmp	r9, r2
 800a6f8:	d01a      	beq.n	800a730 <_Color2Index_0+0x54>
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	4543      	cmp	r3, r8
 800a6fe:	dbf8      	blt.n	800a6f2 <_Color2Index_0+0x16>
 800a700:	2500      	movs	r5, #0
 800a702:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800a706:	462c      	mov	r4, r5
 800a708:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800a70c:	4648      	mov	r0, r9
 800a70e:	f003 fa0d 	bl	800db2c <GUI_CalcColorDist>
 800a712:	42b8      	cmp	r0, r7
 800a714:	bf38      	it	cc
 800a716:	4625      	movcc	r5, r4
 800a718:	f104 0401 	add.w	r4, r4, #1
 800a71c:	bf28      	it	cs
 800a71e:	4638      	movcs	r0, r7
 800a720:	4544      	cmp	r4, r8
 800a722:	da02      	bge.n	800a72a <_Color2Index_0+0x4e>
 800a724:	4607      	mov	r7, r0
 800a726:	e7ef      	b.n	800a708 <_Color2Index_0+0x2c>
 800a728:	4605      	mov	r5, r0
 800a72a:	4628      	mov	r0, r5
 800a72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a730:	4618      	mov	r0, r3
 800a732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a736 <_Color2Index_M8888I>:
 800a736:	43c3      	mvns	r3, r0
 800a738:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800a73c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a740:	4313      	orrs	r3, r2
 800a742:	b2c2      	uxtb	r2, r0
 800a744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a748:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800a74c:	4318      	orrs	r0, r3
 800a74e:	4770      	bx	lr

0800a750 <_GetIndexMask_M8888I>:
 800a750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a754:	4770      	bx	lr
	...

0800a758 <_Color2IndexBulk_M8888I>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	4c0e      	ldr	r4, [pc, #56]	; (800a794 <_Color2IndexBulk_M8888I+0x3c>)
 800a75c:	6824      	ldr	r4, [r4, #0]
 800a75e:	4607      	mov	r7, r0
 800a760:	460e      	mov	r6, r1
 800a762:	4615      	mov	r5, r2
 800a764:	469c      	mov	ip, r3
 800a766:	b10c      	cbz	r4, 800a76c <_Color2IndexBulk_M8888I+0x14>
 800a768:	47a0      	blx	r4
 800a76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76c:	f857 4b04 	ldr.w	r4, [r7], #4
 800a770:	43e3      	mvns	r3, r4
 800a772:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a776:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a77a:	4313      	orrs	r3, r2
 800a77c:	b2e2      	uxtb	r2, r4
 800a77e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a782:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800a786:	431c      	orrs	r4, r3
 800a788:	3d01      	subs	r5, #1
 800a78a:	6034      	str	r4, [r6, #0]
 800a78c:	4466      	add	r6, ip
 800a78e:	d1ed      	bne.n	800a76c <_Color2IndexBulk_M8888I+0x14>
 800a790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a792:	bf00      	nop
 800a794:	20022adc 	.word	0x20022adc

0800a798 <_Index2ColorBulk_M8888I>:
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	4c0e      	ldr	r4, [pc, #56]	; (800a7d4 <_Index2ColorBulk_M8888I+0x3c>)
 800a79c:	6824      	ldr	r4, [r4, #0]
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	4615      	mov	r5, r2
 800a7a4:	469c      	mov	ip, r3
 800a7a6:	b10c      	cbz	r4, 800a7ac <_Index2ColorBulk_M8888I+0x14>
 800a7a8:	47a0      	blx	r4
 800a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ac:	6834      	ldr	r4, [r6, #0]
 800a7ae:	43e3      	mvns	r3, r4
 800a7b0:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a7b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	b2e2      	uxtb	r2, r4
 800a7bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7c0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800a7c4:	431c      	orrs	r4, r3
 800a7c6:	3d01      	subs	r5, #1
 800a7c8:	f847 4b04 	str.w	r4, [r7], #4
 800a7cc:	4466      	add	r6, ip
 800a7ce:	d1ed      	bne.n	800a7ac <_Index2ColorBulk_M8888I+0x14>
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20022ad8 	.word	0x20022ad8

0800a7d8 <GUICC_M8888I_SetCustColorConv>:
 800a7d8:	4b02      	ldr	r3, [pc, #8]	; (800a7e4 <GUICC_M8888I_SetCustColorConv+0xc>)
 800a7da:	6018      	str	r0, [r3, #0]
 800a7dc:	4b02      	ldr	r3, [pc, #8]	; (800a7e8 <GUICC_M8888I_SetCustColorConv+0x10>)
 800a7de:	6019      	str	r1, [r3, #0]
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20022adc 	.word	0x20022adc
 800a7e8:	20022ad8 	.word	0x20022ad8

0800a7ec <_Color2Index_M4444I>:
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	f240 1307 	movw	r3, #263	; 0x107
 800a7f2:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800a7f6:	b2c2      	uxtb	r2, r0
 800a7f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a7fc:	3408      	adds	r4, #8
 800a7fe:	eba3 6010 	sub.w	r0, r3, r0, lsr #24
 800a802:	2311      	movs	r3, #17
 800a804:	fbb4 f4f3 	udiv	r4, r4, r3
 800a808:	fbb0 f0f3 	udiv	r0, r0, r3
 800a80c:	3208      	adds	r2, #8
 800a80e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a812:	3108      	adds	r1, #8
 800a814:	eb04 3000 	add.w	r0, r4, r0, lsl #12
 800a818:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800a81c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a820:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800a824:	bd10      	pop	{r4, pc}
	...

0800a828 <_Index2Color_M4444I>:
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <_Index2Color_M4444I+0x2c>)
 800a82a:	f000 020f 	and.w	r2, r0, #15
 800a82e:	5c99      	ldrb	r1, [r3, r2]
 800a830:	f3c0 2203 	ubfx	r2, r0, #8, #4
 800a834:	5c9a      	ldrb	r2, [r3, r2]
 800a836:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800a83a:	f3c0 1103 	ubfx	r1, r0, #4, #4
 800a83e:	f3c0 3003 	ubfx	r0, r0, #12, #4
 800a842:	5c59      	ldrb	r1, [r3, r1]
 800a844:	5c18      	ldrb	r0, [r3, r0]
 800a846:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800a84a:	43c0      	mvns	r0, r0
 800a84c:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	080807c0 	.word	0x080807c0

0800a858 <_GetIndexMask_M4444I>:
 800a858:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a85c:	4770      	bx	lr
	...

0800a860 <_Color2IndexBulk_M4444I>:
 800a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a864:	4c16      	ldr	r4, [pc, #88]	; (800a8c0 <_Color2IndexBulk_M4444I+0x60>)
 800a866:	6824      	ldr	r4, [r4, #0]
 800a868:	4684      	mov	ip, r0
 800a86a:	460f      	mov	r7, r1
 800a86c:	4616      	mov	r6, r2
 800a86e:	4698      	mov	r8, r3
 800a870:	b114      	cbz	r4, 800a878 <_Color2IndexBulk_M4444I+0x18>
 800a872:	47a0      	blx	r4
 800a874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a878:	f85c 5b04 	ldr.w	r5, [ip], #4
 800a87c:	b2e9      	uxtb	r1, r5
 800a87e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a882:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800a886:	0e2d      	lsrs	r5, r5, #24
 800a888:	f5c5 7583 	rsb	r5, r5, #262	; 0x106
 800a88c:	2411      	movs	r4, #17
 800a88e:	3501      	adds	r5, #1
 800a890:	fbb5 f5f4 	udiv	r5, r5, r4
 800a894:	3108      	adds	r1, #8
 800a896:	fbb1 f1f4 	udiv	r1, r1, r4
 800a89a:	3208      	adds	r2, #8
 800a89c:	032d      	lsls	r5, r5, #12
 800a89e:	fbb2 f2f4 	udiv	r2, r2, r4
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	eb05 2501 	add.w	r5, r5, r1, lsl #8
 800a8a8:	4415      	add	r5, r2
 800a8aa:	fbb3 f4f4 	udiv	r4, r3, r4
 800a8ae:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800a8b2:	3e01      	subs	r6, #1
 800a8b4:	803c      	strh	r4, [r7, #0]
 800a8b6:	4447      	add	r7, r8
 800a8b8:	d1de      	bne.n	800a878 <_Color2IndexBulk_M4444I+0x18>
 800a8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8be:	bf00      	nop
 800a8c0:	20022ae4 	.word	0x20022ae4

0800a8c4 <_Index2ColorBulk_M4444I>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	4d16      	ldr	r5, [pc, #88]	; (800a920 <_Index2ColorBulk_M4444I+0x5c>)
 800a8c8:	682d      	ldr	r5, [r5, #0]
 800a8ca:	4684      	mov	ip, r0
 800a8cc:	4614      	mov	r4, r2
 800a8ce:	461e      	mov	r6, r3
 800a8d0:	b10d      	cbz	r5, 800a8d6 <_Index2ColorBulk_M4444I+0x12>
 800a8d2:	47a8      	blx	r5
 800a8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d6:	1e50      	subs	r0, r2, #1
 800a8d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a8dc:	3a01      	subs	r2, #1
 800a8de:	fb03 c000 	mla	r0, r3, r0, ip
 800a8e2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8e6:	8805      	ldrh	r5, [r0, #0]
 800a8e8:	4a0e      	ldr	r2, [pc, #56]	; (800a924 <_Index2ColorBulk_M4444I+0x60>)
 800a8ea:	f005 030f 	and.w	r3, r5, #15
 800a8ee:	3c01      	subs	r4, #1
 800a8f0:	5cd7      	ldrb	r7, [r2, r3]
 800a8f2:	f3c5 2303 	ubfx	r3, r5, #8, #4
 800a8f6:	ebc6 0000 	rsb	r0, r6, r0
 800a8fa:	5cd3      	ldrb	r3, [r2, r3]
 800a8fc:	eb03 4707 	add.w	r7, r3, r7, lsl #16
 800a900:	ea4f 3315 	mov.w	r3, r5, lsr #12
 800a904:	f3c5 1503 	ubfx	r5, r5, #4, #4
 800a908:	5cd3      	ldrb	r3, [r2, r3]
 800a90a:	5d52      	ldrb	r2, [r2, r5]
 800a90c:	ea6f 0303 	mvn.w	r3, r3
 800a910:	eb07 6303 	add.w	r3, r7, r3, lsl #24
 800a914:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a918:	f841 3904 	str.w	r3, [r1], #-4
 800a91c:	d1e3      	bne.n	800a8e6 <_Index2ColorBulk_M4444I+0x22>
 800a91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a920:	20022ae0 	.word	0x20022ae0
 800a924:	080807c0 	.word	0x080807c0

0800a928 <GUICC_M4444I_SetCustColorConv>:
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <GUICC_M4444I_SetCustColorConv+0xc>)
 800a92a:	6018      	str	r0, [r3, #0]
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <GUICC_M4444I_SetCustColorConv+0x10>)
 800a92e:	6019      	str	r1, [r3, #0]
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	20022ae4 	.word	0x20022ae4
 800a938:	20022ae0 	.word	0x20022ae0

0800a93c <_Color2Index_M1555I>:
 800a93c:	4b08      	ldr	r3, [pc, #32]	; (800a960 <_Color2Index_M1555I+0x24>)
 800a93e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800a942:	b2c1      	uxtb	r1, r0
 800a944:	5c9a      	ldrb	r2, [r3, r2]
 800a946:	5c59      	ldrb	r1, [r3, r1]
 800a948:	eb02 2281 	add.w	r2, r2, r1, lsl #10
 800a94c:	43c1      	mvns	r1, r0
 800a94e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a952:	0fc9      	lsrs	r1, r1, #31
 800a954:	5c18      	ldrb	r0, [r3, r0]
 800a956:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 800a95a:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 800a95e:	4770      	bx	lr
 800a960:	080805c0 	.word	0x080805c0

0800a964 <_Index2Color_M1555I>:
 800a964:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <_Index2Color_M1555I+0x30>)
 800a966:	f000 021f 	and.w	r2, r0, #31
 800a96a:	b510      	push	{r4, lr}
 800a96c:	5c99      	ldrb	r1, [r3, r2]
 800a96e:	f3c0 2484 	ubfx	r4, r0, #10, #5
 800a972:	f3c0 1244 	ubfx	r2, r0, #5, #5
 800a976:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800a97a:	5c9a      	ldrb	r2, [r3, r2]
 800a97c:	5d1b      	ldrb	r3, [r3, r4]
 800a97e:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 800a982:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800a986:	bf0c      	ite	eq
 800a988:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 800a98c:	2300      	movne	r3, #0
 800a98e:	4418      	add	r0, r3
 800a990:	bd10      	pop	{r4, pc}
 800a992:	bf00      	nop
 800a994:	080804a0 	.word	0x080804a0

0800a998 <_GetIndexMask_M1555I>:
 800a998:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a99c:	4770      	bx	lr
	...

0800a9a0 <_Color2IndexBulk_M1555I>:
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a2:	4c11      	ldr	r4, [pc, #68]	; (800a9e8 <_Color2IndexBulk_M1555I+0x48>)
 800a9a4:	6824      	ldr	r4, [r4, #0]
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	460e      	mov	r6, r1
 800a9aa:	4615      	mov	r5, r2
 800a9ac:	469c      	mov	ip, r3
 800a9ae:	b10c      	cbz	r4, 800a9b4 <_Color2IndexBulk_M1555I+0x14>
 800a9b0:	47a0      	blx	r4
 800a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b4:	f857 4b04 	ldr.w	r4, [r7], #4
 800a9b8:	4a0c      	ldr	r2, [pc, #48]	; (800a9ec <_Color2IndexBulk_M1555I+0x4c>)
 800a9ba:	b2e3      	uxtb	r3, r4
 800a9bc:	3d01      	subs	r5, #1
 800a9be:	5cd1      	ldrb	r1, [r2, r3]
 800a9c0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800a9c4:	5cd3      	ldrb	r3, [r2, r3]
 800a9c6:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 800a9ca:	ea6f 0104 	mvn.w	r1, r4
 800a9ce:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a9d2:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 800a9d6:	5d12      	ldrb	r2, [r2, r4]
 800a9d8:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800a9dc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a9e0:	8033      	strh	r3, [r6, #0]
 800a9e2:	4466      	add	r6, ip
 800a9e4:	d1e6      	bne.n	800a9b4 <_Color2IndexBulk_M1555I+0x14>
 800a9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e8:	20022aec 	.word	0x20022aec
 800a9ec:	080805c0 	.word	0x080805c0

0800a9f0 <_Index2ColorBulk_M1555I>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	4d17      	ldr	r5, [pc, #92]	; (800aa50 <_Index2ColorBulk_M1555I+0x60>)
 800a9f4:	682d      	ldr	r5, [r5, #0]
 800a9f6:	4684      	mov	ip, r0
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	461e      	mov	r6, r3
 800a9fc:	b10d      	cbz	r5, 800aa02 <_Index2ColorBulk_M1555I+0x12>
 800a9fe:	47a8      	blx	r5
 800aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa02:	1e50      	subs	r0, r2, #1
 800aa04:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800aa08:	3a01      	subs	r2, #1
 800aa0a:	fb03 c000 	mla	r0, r3, r0, ip
 800aa0e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa12:	8802      	ldrh	r2, [r0, #0]
 800aa14:	4d0f      	ldr	r5, [pc, #60]	; (800aa54 <_Index2ColorBulk_M1555I+0x64>)
 800aa16:	f002 031f 	and.w	r3, r2, #31
 800aa1a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800aa1e:	f815 c003 	ldrb.w	ip, [r5, r3]
 800aa22:	f3c2 1344 	ubfx	r3, r2, #5, #5
 800aa26:	ebc6 0000 	rsb	r0, r6, r0
 800aa2a:	5cef      	ldrb	r7, [r5, r3]
 800aa2c:	f3c2 2384 	ubfx	r3, r2, #10, #5
 800aa30:	bf0c      	ite	eq
 800aa32:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 800aa36:	2200      	movne	r2, #0
 800aa38:	5ceb      	ldrb	r3, [r5, r3]
 800aa3a:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800aa3e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800aa42:	4413      	add	r3, r2
 800aa44:	3c01      	subs	r4, #1
 800aa46:	f841 3904 	str.w	r3, [r1], #-4
 800aa4a:	d1e2      	bne.n	800aa12 <_Index2ColorBulk_M1555I+0x22>
 800aa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20022ae8 	.word	0x20022ae8
 800aa54:	080804a0 	.word	0x080804a0

0800aa58 <GUICC_M1555I_SetCustColorConv>:
 800aa58:	4b02      	ldr	r3, [pc, #8]	; (800aa64 <GUICC_M1555I_SetCustColorConv+0xc>)
 800aa5a:	6018      	str	r0, [r3, #0]
 800aa5c:	4b02      	ldr	r3, [pc, #8]	; (800aa68 <GUICC_M1555I_SetCustColorConv+0x10>)
 800aa5e:	6019      	str	r1, [r3, #0]
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20022aec 	.word	0x20022aec
 800aa68:	20022ae8 	.word	0x20022ae8

0800aa6c <_Color2Index_88666I>:
 800aa6c:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <_Color2Index_88666I+0x1c>)
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4604      	mov	r4, r0
 800aa74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800aa78:	4798      	blx	r3
 800aa7a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800aa7e:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 800aa82:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800aa86:	bd10      	pop	{r4, pc}
 800aa88:	080803a4 	.word	0x080803a4

0800aa8c <_Index2Color_88666I>:
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <_Index2Color_88666I+0x1c>)
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	4604      	mov	r4, r0
 800aa94:	b2c0      	uxtb	r0, r0
 800aa96:	4798      	blx	r3
 800aa98:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800aa9c:	0424      	lsls	r4, r4, #16
 800aa9e:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 800aaa2:	4320      	orrs	r0, r4
 800aaa4:	bd10      	pop	{r4, pc}
 800aaa6:	bf00      	nop
 800aaa8:	080803a4 	.word	0x080803a4

0800aaac <_GetIndexMask_88666I>:
 800aaac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aab0:	4770      	bx	lr
	...

0800aab4 <_Color2IndexBulk_88666I>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	4606      	mov	r6, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4615      	mov	r5, r2
 800aabe:	4698      	mov	r8, r3
 800aac0:	f856 7b04 	ldr.w	r7, [r6], #4
 800aac4:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <_Color2IndexBulk_88666I+0x34>)
 800aac6:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	4790      	blx	r2
 800aace:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
 800aad2:	f087 477f 	eor.w	r7, r7, #4278190080	; 0xff000000
 800aad6:	ea40 4017 	orr.w	r0, r0, r7, lsr #16
 800aada:	3d01      	subs	r5, #1
 800aadc:	8020      	strh	r0, [r4, #0]
 800aade:	4444      	add	r4, r8
 800aae0:	d1ee      	bne.n	800aac0 <_Color2IndexBulk_88666I+0xc>
 800aae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae6:	bf00      	nop
 800aae8:	080803a4 	.word	0x080803a4

0800aaec <_Index2ColorBulk_88666I>:
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	1e55      	subs	r5, r2, #1
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	461e      	mov	r6, r3
 800aafc:	fb03 0505 	mla	r5, r3, r5, r0
 800ab00:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800ab04:	f8b5 8000 	ldrh.w	r8, [r5]
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <_Index2ColorBulk_88666I+0x48>)
 800ab0a:	fa5f f088 	uxtb.w	r0, r8
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	4798      	blx	r3
 800ab12:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 800ab16:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800ab1a:	f088 487f 	eor.w	r8, r8, #4278190080	; 0xff000000
 800ab1e:	ea48 0000 	orr.w	r0, r8, r0
 800ab22:	3c01      	subs	r4, #1
 800ab24:	f847 0904 	str.w	r0, [r7], #-4
 800ab28:	ebc6 0505 	rsb	r5, r6, r5
 800ab2c:	d1ea      	bne.n	800ab04 <_Index2ColorBulk_88666I+0x18>
 800ab2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab32:	bf00      	nop
 800ab34:	080803a4 	.word	0x080803a4

0800ab38 <LCD_Color2Index_8666>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	b2c3      	uxtb	r3, r0
 800ab3c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800ab46:	d108      	bne.n	800ab5a <LCD_Color2Index_8666+0x22>
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	d106      	bne.n	800ab5a <LCD_Color2Index_8666+0x22>
 800ab4c:	f103 0008 	add.w	r0, r3, #8
 800ab50:	2211      	movs	r2, #17
 800ab52:	fbb0 f0f2 	udiv	r0, r0, r2
 800ab56:	3078      	adds	r0, #120	; 0x78
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ab5e:	22ff      	movs	r2, #255	; 0xff
 800ab60:	347f      	adds	r4, #127	; 0x7f
 800ab62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ab66:	fbb4 f4f2 	udiv	r4, r4, r2
 800ab6a:	2006      	movs	r0, #6
 800ab6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab70:	317f      	adds	r1, #127	; 0x7f
 800ab72:	fbb1 f1f2 	udiv	r1, r1, r2
 800ab76:	4344      	muls	r4, r0
 800ab78:	337f      	adds	r3, #127	; 0x7f
 800ab7a:	2024      	movs	r0, #36	; 0x24
 800ab7c:	fb00 4001 	mla	r0, r0, r1, r4
 800ab80:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab84:	4410      	add	r0, r2
 800ab86:	286b      	cmp	r0, #107	; 0x6b
 800ab88:	bf88      	it	hi
 800ab8a:	3028      	addhi	r0, #40	; 0x28
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <_GetIndexMask_8666>:
 800ab8e:	20ff      	movs	r0, #255	; 0xff
 800ab90:	4770      	bx	lr
	...

0800ab94 <LCD_Index2Color_8666>:
 800ab94:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800ab98:	2b0f      	cmp	r3, #15
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	d805      	bhi.n	800abaa <LCD_Index2Color_8666+0x16>
 800ab9e:	4b11      	ldr	r3, [pc, #68]	; (800abe4 <LCD_Index2Color_8666+0x50>)
 800aba0:	4358      	muls	r0, r3
 800aba2:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800aba6:	3008      	adds	r0, #8
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	286b      	cmp	r0, #107	; 0x6b
 800abac:	d902      	bls.n	800abb4 <LCD_Index2Color_8666+0x20>
 800abae:	2893      	cmp	r0, #147	; 0x93
 800abb0:	d915      	bls.n	800abde <LCD_Index2Color_8666+0x4a>
 800abb2:	3828      	subs	r0, #40	; 0x28
 800abb4:	2306      	movs	r3, #6
 800abb6:	fbb0 f1f3 	udiv	r1, r0, r3
 800abba:	2424      	movs	r4, #36	; 0x24
 800abbc:	2233      	movs	r2, #51	; 0x33
 800abbe:	fbb0 f4f4 	udiv	r4, r0, r4
 800abc2:	fb03 0011 	mls	r0, r3, r1, r0
 800abc6:	4350      	muls	r0, r2
 800abc8:	4354      	muls	r4, r2
 800abca:	eb00 4404 	add.w	r4, r0, r4, lsl #16
 800abce:	fbb1 f0f3 	udiv	r0, r1, r3
 800abd2:	fb03 1010 	mls	r0, r3, r0, r1
 800abd6:	4350      	muls	r0, r2
 800abd8:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	2000      	movs	r0, #0
 800abe0:	bd10      	pop	{r4, pc}
 800abe2:	bf00      	nop
 800abe4:	00111111 	.word	0x00111111

0800abe8 <_Color2Index_1616I>:
 800abe8:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <_Color2Index_1616I+0x20>)
 800abea:	b510      	push	{r4, lr}
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4604      	mov	r4, r0
 800abf0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800abf4:	4798      	blx	r3
 800abf6:	0e24      	lsrs	r4, r4, #24
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <_Color2Index_1616I+0x24>)
 800abfa:	5d1b      	ldrb	r3, [r3, r4]
 800abfc:	f1c3 030f 	rsb	r3, r3, #15
 800ac00:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	bf00      	nop
 800ac08:	080803d4 	.word	0x080803d4
 800ac0c:	080806c0 	.word	0x080806c0

0800ac10 <_Index2Color_1616I>:
 800ac10:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <_Index2Color_1616I+0x1c>)
 800ac12:	b510      	push	{r4, lr}
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	4604      	mov	r4, r0
 800ac18:	b2c0      	uxtb	r0, r0
 800ac1a:	4798      	blx	r3
 800ac1c:	0924      	lsrs	r4, r4, #4
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <_Index2Color_1616I+0x20>)
 800ac20:	5d1b      	ldrb	r3, [r3, r4]
 800ac22:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ac26:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800ac2a:	bd10      	pop	{r4, pc}
 800ac2c:	080803d4 	.word	0x080803d4
 800ac30:	080807c0 	.word	0x080807c0

0800ac34 <_GetIndexMask_1616I>:
 800ac34:	20ff      	movs	r0, #255	; 0xff
 800ac36:	4770      	bx	lr

0800ac38 <_Color2IndexBulk_1616I>:
 800ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4615      	mov	r5, r2
 800ac42:	4698      	mov	r8, r3
 800ac44:	f856 7b04 	ldr.w	r7, [r6], #4
 800ac48:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <_Color2IndexBulk_1616I+0x34>)
 800ac4a:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	4790      	blx	r2
 800ac52:	0e3f      	lsrs	r7, r7, #24
 800ac54:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <_Color2IndexBulk_1616I+0x38>)
 800ac56:	5ddb      	ldrb	r3, [r3, r7]
 800ac58:	f1c3 030f 	rsb	r3, r3, #15
 800ac5c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800ac60:	3d01      	subs	r5, #1
 800ac62:	7020      	strb	r0, [r4, #0]
 800ac64:	4444      	add	r4, r8
 800ac66:	d1ed      	bne.n	800ac44 <_Color2IndexBulk_1616I+0xc>
 800ac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6c:	080803d4 	.word	0x080803d4
 800ac70:	080806c0 	.word	0x080806c0

0800ac74 <_Index2ColorBulk_1616I>:
 800ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac78:	1e55      	subs	r5, r2, #1
 800ac7a:	4614      	mov	r4, r2
 800ac7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac80:	3a01      	subs	r2, #1
 800ac82:	461e      	mov	r6, r3
 800ac84:	fb03 0505 	mla	r5, r3, r5, r0
 800ac88:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800ac8c:	f895 8000 	ldrb.w	r8, [r5]
 800ac90:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <_Index2ColorBulk_1616I+0x48>)
 800ac92:	4640      	mov	r0, r8
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	4798      	blx	r3
 800ac98:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800ac9c:	4b08      	ldr	r3, [pc, #32]	; (800acc0 <_Index2ColorBulk_1616I+0x4c>)
 800ac9e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800aca2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800aca6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800acaa:	3c01      	subs	r4, #1
 800acac:	f847 0904 	str.w	r0, [r7], #-4
 800acb0:	ebc6 0505 	rsb	r5, r6, r5
 800acb4:	d1ea      	bne.n	800ac8c <_Index2ColorBulk_1616I+0x18>
 800acb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acba:	bf00      	nop
 800acbc:	080803d4 	.word	0x080803d4
 800acc0:	080807c0 	.word	0x080807c0

0800acc4 <_Color2Index_16>:
 800acc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acc6:	b2c5      	uxtb	r5, r0
 800acc8:	1c6c      	adds	r4, r5, #1
 800acca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800acce:	1c59      	adds	r1, r3, #1
 800acd0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800acd4:	2c54      	cmp	r4, #84	; 0x54
 800acd6:	f100 0201 	add.w	r2, r0, #1
 800acda:	bf94      	ite	ls
 800acdc:	2400      	movls	r4, #0
 800acde:	2401      	movhi	r4, #1
 800ace0:	2954      	cmp	r1, #84	; 0x54
 800ace2:	bf94      	ite	ls
 800ace4:	2100      	movls	r1, #0
 800ace6:	2101      	movhi	r1, #1
 800ace8:	2a54      	cmp	r2, #84	; 0x54
 800acea:	bf94      	ite	ls
 800acec:	2200      	movls	r2, #0
 800acee:	2201      	movhi	r2, #1
 800acf0:	4606      	mov	r6, r0
 800acf2:	00d0      	lsls	r0, r2, #3
 800acf4:	461f      	mov	r7, r3
 800acf6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800acfa:	188b      	adds	r3, r1, r2
 800acfc:	4423      	add	r3, r4
 800acfe:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800ad02:	b90c      	cbnz	r4, 800ad08 <_Color2Index_16+0x44>
 800ad04:	b901      	cbnz	r1, 800ad08 <_Color2Index_16+0x44>
 800ad06:	b152      	cbz	r2, 800ad1e <_Color2Index_16+0x5a>
 800ad08:	19ba      	adds	r2, r7, r6
 800ad0a:	4415      	add	r5, r2
 800ad0c:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 800ad10:	4415      	add	r5, r2
 800ad12:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 800ad16:	fbb5 f3f3 	udiv	r3, r5, r3
 800ad1a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad20 <_Index2Color_16>:
 800ad20:	b530      	push	{r4, r5, lr}
 800ad22:	f3c0 0240 	ubfx	r2, r0, #1, #1
 800ad26:	f3c0 0580 	ubfx	r5, r0, #2, #1
 800ad2a:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 800ad2e:	ea02 0300 	and.w	r3, r2, r0
 800ad32:	ea05 0400 	and.w	r4, r5, r0
 800ad36:	4008      	ands	r0, r1
 800ad38:	ebc0 11c1 	rsb	r1, r0, r1, lsl #7
 800ad3c:	ebc4 15c5 	rsb	r5, r4, r5, lsl #7
 800ad40:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
 800ad44:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 800ad48:	ebc3 12c2 	rsb	r2, r3, r2, lsl #7
 800ad4c:	0400      	lsls	r0, r0, #16
 800ad4e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800ad52:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 800ad56:	4318      	orrs	r0, r3
 800ad58:	bd30      	pop	{r4, r5, pc}

0800ad5a <_GetIndexMask_16>:
 800ad5a:	200f      	movs	r0, #15
 800ad5c:	4770      	bx	lr
	...

0800ad60 <WM_GetDesktopWindow>:
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <WM_GetDesktopWindow+0x10>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	7c5a      	ldrb	r2, [r3, #17]
 800ad66:	4b03      	ldr	r3, [pc, #12]	; (800ad74 <WM_GetDesktopWindow+0x14>)
 800ad68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	20000020 	.word	0x20000020
 800ad74:	20022f84 	.word	0x20022f84

0800ad78 <_OnExit>:
 800ad78:	4a0a      	ldr	r2, [pc, #40]	; (800ada4 <_OnExit+0x2c>)
 800ad7a:	490b      	ldr	r1, [pc, #44]	; (800ada8 <_OnExit+0x30>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	7013      	strb	r3, [r2, #0]
 800ad80:	4a0a      	ldr	r2, [pc, #40]	; (800adac <_OnExit+0x34>)
 800ad82:	600b      	str	r3, [r1, #0]
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	4a0a      	ldr	r2, [pc, #40]	; (800adb0 <_OnExit+0x38>)
 800ad88:	604b      	str	r3, [r1, #4]
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	4a09      	ldr	r2, [pc, #36]	; (800adb4 <_OnExit+0x3c>)
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	6053      	str	r3, [r2, #4]
 800ad92:	4a09      	ldr	r2, [pc, #36]	; (800adb8 <_OnExit+0x40>)
 800ad94:	6013      	str	r3, [r2, #0]
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <_OnExit+0x44>)
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	4a09      	ldr	r2, [pc, #36]	; (800adc0 <_OnExit+0x48>)
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	4a09      	ldr	r2, [pc, #36]	; (800adc4 <_OnExit+0x4c>)
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	4770      	bx	lr
 800ada4:	20022b18 	.word	0x20022b18
 800ada8:	20022f94 	.word	0x20022f94
 800adac:	20022af0 	.word	0x20022af0
 800adb0:	20022fb8 	.word	0x20022fb8
 800adb4:	20022fc0 	.word	0x20022fc0
 800adb8:	20022fcc 	.word	0x20022fcc
 800adbc:	20022f80 	.word	0x20022f80
 800adc0:	20022fac 	.word	0x20022fac
 800adc4:	20022fbc 	.word	0x20022fbc

0800adc8 <_Paint1>:
 800adc8:	b510      	push	{r4, lr}
 800adca:	4604      	mov	r4, r0
 800adcc:	f7ff f90a 	bl	8009fe4 <GUI_ALLOC_h2p>
 800add0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800add2:	4a04      	ldr	r2, [pc, #16]	; (800ade4 <_Paint1+0x1c>)
 800add4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800add8:	4b03      	ldr	r3, [pc, #12]	; (800ade8 <_Paint1+0x20>)
 800adda:	4620      	mov	r0, r4
 800addc:	bf08      	it	eq
 800adde:	4613      	moveq	r3, r2
 800ade0:	4798      	blx	r3
 800ade2:	bd10      	pop	{r4, pc}
 800ade4:	0800bc25 	.word	0x0800bc25
 800ade8:	0800c1f5 	.word	0x0800c1f5

0800adec <_Findy1>:
 800adec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adee:	4605      	mov	r5, r0
 800adf0:	b085      	sub	sp, #20
 800adf2:	460c      	mov	r4, r1
 800adf4:	4616      	mov	r6, r2
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	d04c      	beq.n	800ae94 <_Findy1+0xa8>
 800adfa:	4628      	mov	r0, r5
 800adfc:	f7ff f8fc 	bl	8009ff8 <GUI_ALLOC_LockH>
 800ae00:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800ae02:	9001      	str	r0, [sp, #4]
 800ae04:	07bb      	lsls	r3, r7, #30
 800ae06:	4601      	mov	r1, r0
 800ae08:	d53d      	bpl.n	800ae86 <_Findy1+0x9a>
 800ae0a:	ad02      	add	r5, sp, #8
 800ae0c:	b126      	cbz	r6, 800ae18 <_Findy1+0x2c>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	4632      	mov	r2, r6
 800ae12:	f002 fbc7 	bl	800d5a4 <GUI__IntersectRects>
 800ae16:	e002      	b.n	800ae1e <_Findy1+0x32>
 800ae18:	c803      	ldmia	r0, {r0, r1}
 800ae1a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f002 fde7 	bl	800d9f4 <GUI_RectsIntersect>
 800ae26:	b370      	cbz	r0, 800ae86 <_Findy1+0x9a>
 800ae28:	f017 0f01 	tst.w	r7, #1
 800ae2c:	9b01      	ldr	r3, [sp, #4]
 800ae2e:	d11e      	bne.n	800ae6e <_Findy1+0x82>
 800ae30:	b13e      	cbz	r6, 800ae42 <_Findy1+0x56>
 800ae32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ae36:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	bfa8      	it	ge
 800ae3e:	4613      	movge	r3, r2
 800ae40:	e001      	b.n	800ae46 <_Findy1+0x5a>
 800ae42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ae46:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ae50:	dd06      	ble.n	800ae60 <_Findy1+0x74>
 800ae52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800ae56:	b219      	sxth	r1, r3
 800ae58:	428a      	cmp	r2, r1
 800ae5a:	db14      	blt.n	800ae86 <_Findy1+0x9a>
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	e004      	b.n	800ae6a <_Findy1+0x7e>
 800ae60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ae64:	b219      	sxth	r1, r3
 800ae66:	428a      	cmp	r2, r1
 800ae68:	dd0d      	ble.n	800ae86 <_Findy1+0x9a>
 800ae6a:	80e3      	strh	r3, [r4, #6]
 800ae6c:	e00b      	b.n	800ae86 <_Findy1+0x9a>
 800ae6e:	69df      	ldr	r7, [r3, #28]
 800ae70:	b14f      	cbz	r7, 800ae86 <_Findy1+0x9a>
 800ae72:	4638      	mov	r0, r7
 800ae74:	4621      	mov	r1, r4
 800ae76:	462a      	mov	r2, r5
 800ae78:	f7ff ffb8 	bl	800adec <_Findy1>
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7ff f8b1 	bl	8009fe4 <GUI_ALLOC_h2p>
 800ae82:	6a07      	ldr	r7, [r0, #32]
 800ae84:	e7f4      	b.n	800ae70 <_Findy1+0x84>
 800ae86:	a804      	add	r0, sp, #16
 800ae88:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800ae8c:	6a1d      	ldr	r5, [r3, #32]
 800ae8e:	f7ff f8c1 	bl	800a014 <GUI_ALLOC_UnlockH>
 800ae92:	e7b0      	b.n	800adf6 <_Findy1+0xa>
 800ae94:	b005      	add	sp, #20
 800ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae98 <_Findx0>:
 800ae98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460f      	mov	r7, r1
 800aea0:	4690      	mov	r8, r2
 800aea2:	2500      	movs	r5, #0
 800aea4:	2c00      	cmp	r4, #0
 800aea6:	d037      	beq.n	800af18 <_Findx0+0x80>
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff f8a5 	bl	8009ff8 <GUI_ALLOC_LockH>
 800aeae:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800aeb0:	9001      	str	r0, [sp, #4]
 800aeb2:	07b2      	lsls	r2, r6, #30
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	d528      	bpl.n	800af0a <_Findx0+0x72>
 800aeb8:	ac02      	add	r4, sp, #8
 800aeba:	f1b8 0f00 	cmp.w	r8, #0
 800aebe:	d004      	beq.n	800aeca <_Findx0+0x32>
 800aec0:	4620      	mov	r0, r4
 800aec2:	4642      	mov	r2, r8
 800aec4:	f002 fb6e 	bl	800d5a4 <GUI__IntersectRects>
 800aec8:	e002      	b.n	800aed0 <_Findx0+0x38>
 800aeca:	c803      	ldmia	r0, {r0, r1}
 800aecc:	e884 0003 	stmia.w	r4, {r0, r1}
 800aed0:	4638      	mov	r0, r7
 800aed2:	4621      	mov	r1, r4
 800aed4:	f002 fd8e 	bl	800d9f4 <GUI_RectsIntersect>
 800aed8:	b1b8      	cbz	r0, 800af0a <_Findx0+0x72>
 800aeda:	07f3      	lsls	r3, r6, #31
 800aedc:	d405      	bmi.n	800aeea <_Findx0+0x52>
 800aede:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	803b      	strh	r3, [r7, #0]
 800aee6:	2501      	movs	r5, #1
 800aee8:	e00f      	b.n	800af0a <_Findx0+0x72>
 800aeea:	9b01      	ldr	r3, [sp, #4]
 800aeec:	69de      	ldr	r6, [r3, #28]
 800aeee:	b166      	cbz	r6, 800af0a <_Findx0+0x72>
 800aef0:	4630      	mov	r0, r6
 800aef2:	4639      	mov	r1, r7
 800aef4:	4622      	mov	r2, r4
 800aef6:	f7ff ffcf 	bl	800ae98 <_Findx0>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	4630      	mov	r0, r6
 800aefe:	bf18      	it	ne
 800af00:	2501      	movne	r5, #1
 800af02:	f7ff f86f 	bl	8009fe4 <GUI_ALLOC_h2p>
 800af06:	6a06      	ldr	r6, [r0, #32]
 800af08:	e7f1      	b.n	800aeee <_Findx0+0x56>
 800af0a:	a804      	add	r0, sp, #16
 800af0c:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800af10:	6a1c      	ldr	r4, [r3, #32]
 800af12:	f7ff f87f 	bl	800a014 <GUI_ALLOC_UnlockH>
 800af16:	e7c5      	b.n	800aea4 <_Findx0+0xc>
 800af18:	4628      	mov	r0, r5
 800af1a:	b004      	add	sp, #16
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af20 <_Findx1>:
 800af20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af22:	4604      	mov	r4, r0
 800af24:	b085      	sub	sp, #20
 800af26:	460e      	mov	r6, r1
 800af28:	4617      	mov	r7, r2
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	d031      	beq.n	800af92 <_Findx1+0x72>
 800af2e:	4620      	mov	r0, r4
 800af30:	f7ff f862 	bl	8009ff8 <GUI_ALLOC_LockH>
 800af34:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800af36:	9001      	str	r0, [sp, #4]
 800af38:	07aa      	lsls	r2, r5, #30
 800af3a:	4601      	mov	r1, r0
 800af3c:	d522      	bpl.n	800af84 <_Findx1+0x64>
 800af3e:	ac02      	add	r4, sp, #8
 800af40:	b127      	cbz	r7, 800af4c <_Findx1+0x2c>
 800af42:	4620      	mov	r0, r4
 800af44:	463a      	mov	r2, r7
 800af46:	f002 fb2d 	bl	800d5a4 <GUI__IntersectRects>
 800af4a:	e002      	b.n	800af52 <_Findx1+0x32>
 800af4c:	c803      	ldmia	r0, {r0, r1}
 800af4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800af52:	4630      	mov	r0, r6
 800af54:	4621      	mov	r1, r4
 800af56:	f002 fd4d 	bl	800d9f4 <GUI_RectsIntersect>
 800af5a:	b198      	cbz	r0, 800af84 <_Findx1+0x64>
 800af5c:	07eb      	lsls	r3, r5, #31
 800af5e:	d404      	bmi.n	800af6a <_Findx1+0x4a>
 800af60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800af64:	3b01      	subs	r3, #1
 800af66:	80b3      	strh	r3, [r6, #4]
 800af68:	e00c      	b.n	800af84 <_Findx1+0x64>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	69dd      	ldr	r5, [r3, #28]
 800af6e:	b14d      	cbz	r5, 800af84 <_Findx1+0x64>
 800af70:	4628      	mov	r0, r5
 800af72:	4631      	mov	r1, r6
 800af74:	4622      	mov	r2, r4
 800af76:	f7ff ffd3 	bl	800af20 <_Findx1>
 800af7a:	4628      	mov	r0, r5
 800af7c:	f7ff f832 	bl	8009fe4 <GUI_ALLOC_h2p>
 800af80:	6a05      	ldr	r5, [r0, #32]
 800af82:	e7f4      	b.n	800af6e <_Findx1+0x4e>
 800af84:	a804      	add	r0, sp, #16
 800af86:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800af8a:	6a1c      	ldr	r4, [r3, #32]
 800af8c:	f7ff f842 	bl	800a014 <GUI_ALLOC_UnlockH>
 800af90:	e7cb      	b.n	800af2a <_Findx1+0xa>
 800af92:	b005      	add	sp, #20
 800af94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800af98 <_Paint1Trans>:
 800af98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af9c:	4d21      	ldr	r5, [pc, #132]	; (800b024 <_Paint1Trans+0x8c>)
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	4606      	mov	r6, r0
 800afa2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800afa4:	f7ff f828 	bl	8009ff8 <GUI_ALLOC_LockH>
 800afa8:	9000      	str	r0, [sp, #0]
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff f824 	bl	8009ff8 <GUI_ALLOC_LockH>
 800afb0:	ac02      	add	r4, sp, #8
 800afb2:	4601      	mov	r1, r0
 800afb4:	9001      	str	r0, [sp, #4]
 800afb6:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800afba:	3008      	adds	r0, #8
 800afbc:	f002 fd1a 	bl	800d9f4 <GUI_RectsIntersect>
 800afc0:	4607      	mov	r7, r0
 800afc2:	b328      	cbz	r0, 800b010 <_Paint1Trans+0x78>
 800afc4:	9901      	ldr	r1, [sp, #4]
 800afc6:	9a00      	ldr	r2, [sp, #0]
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	4c17      	ldr	r4, [pc, #92]	; (800b028 <_Paint1Trans+0x90>)
 800afcc:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800afce:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800afd2:	f101 0008 	add.w	r0, r1, #8
 800afd6:	3208      	adds	r2, #8
 800afd8:	f002 fae4 	bl	800d5a4 <GUI__IntersectRects>
 800afdc:	4668      	mov	r0, sp
 800afde:	f7ff f819 	bl	800a014 <GUI_ALLOC_UnlockH>
 800afe2:	9a01      	ldr	r2, [sp, #4]
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	f9b2 1000 	ldrsh.w	r1, [r2]
 800afea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800afee:	64d9      	str	r1, [r3, #76]	; 0x4c
 800aff0:	651a      	str	r2, [r3, #80]	; 0x50
 800aff2:	a801      	add	r0, sp, #4
 800aff4:	6026      	str	r6, [r4, #0]
 800aff6:	f7ff f80d 	bl	800a014 <GUI_ALLOC_UnlockH>
 800affa:	4630      	mov	r0, r6
 800affc:	f7ff fee4 	bl	800adc8 <_Paint1>
 800b000:	2300      	movs	r3, #0
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	651f      	str	r7, [r3, #80]	; 0x50
 800b008:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800b00c:	2701      	movs	r7, #1
 800b00e:	e005      	b.n	800b01c <_Paint1Trans+0x84>
 800b010:	4668      	mov	r0, sp
 800b012:	f7fe ffff 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b016:	a801      	add	r0, sp, #4
 800b018:	f7fe fffc 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b01c:	4638      	mov	r0, r7
 800b01e:	b002      	add	sp, #8
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b024:	20000020 	.word	0x20000020
 800b028:	20022f80 	.word	0x20022f80

0800b02c <_PaintTransChildren>:
 800b02c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4606      	mov	r6, r0
 800b032:	f7fe ffe1 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b036:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b038:	9001      	str	r0, [sp, #4]
 800b03a:	079b      	lsls	r3, r3, #30
 800b03c:	d405      	bmi.n	800b04a <_PaintTransChildren+0x1e>
 800b03e:	a801      	add	r0, sp, #4
 800b040:	f7fe ffe8 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b044:	b002      	add	sp, #8
 800b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04a:	69c4      	ldr	r4, [r0, #28]
 800b04c:	2c00      	cmp	r4, #0
 800b04e:	d0f6      	beq.n	800b03e <_PaintTransChildren+0x12>
 800b050:	4620      	mov	r0, r4
 800b052:	f7fe ffd1 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b056:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b058:	ad02      	add	r5, sp, #8
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	2b03      	cmp	r3, #3
 800b060:	f845 0d08 	str.w	r0, [r5, #-8]!
 800b064:	d137      	bne.n	800b0d6 <_PaintTransChildren+0xaa>
 800b066:	9901      	ldr	r1, [sp, #4]
 800b068:	3108      	adds	r1, #8
 800b06a:	f002 fcc3 	bl	800d9f4 <GUI_RectsIntersect>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d031      	beq.n	800b0d6 <_PaintTransChildren+0xaa>
 800b072:	a802      	add	r0, sp, #8
 800b074:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b078:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800b07c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800b080:	899f      	ldrh	r7, [r3, #12]
 800b082:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 800b086:	f7fe ffc5 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b08a:	4668      	mov	r0, sp
 800b08c:	f7fe ffc2 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b090:	4620      	mov	r0, r4
 800b092:	f7ff ff81 	bl	800af98 <_Paint1Trans>
 800b096:	b170      	cbz	r0, 800b0b6 <_PaintTransChildren+0x8a>
 800b098:	4620      	mov	r0, r4
 800b09a:	f7fe ffa3 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b09e:	9000      	str	r0, [sp, #0]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f7ff ffc3 	bl	800b02c <_PaintTransChildren>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7fe ff9c 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b0ac:	9000      	str	r0, [sp, #0]
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f7fe ff98 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b0b4:	9001      	str	r0, [sp, #4]
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7fe ff9e 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b0bc:	9001      	str	r0, [sp, #4]
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7fe ff9a 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	9000      	str	r0, [sp, #0]
 800b0c8:	f8a3 9008 	strh.w	r9, [r3, #8]
 800b0cc:	f8a3 800a 	strh.w	r8, [r3, #10]
 800b0d0:	819f      	strh	r7, [r3, #12]
 800b0d2:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	4668      	mov	r0, sp
 800b0da:	6a1c      	ldr	r4, [r3, #32]
 800b0dc:	f7fe ff9a 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b0e0:	e7b4      	b.n	800b04c <_PaintTransChildren+0x20>
	...

0800b0e4 <WM__PaintWinAndOverlays>:
 800b0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	f7fe ff86 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b0ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b0ee:	9001      	str	r0, [sp, #4]
 800b0f0:	f640 0301 	movw	r3, #2049	; 0x801
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d005      	beq.n	800b106 <WM__PaintWinAndOverlays+0x22>
 800b0fa:	a801      	add	r0, sp, #4
 800b0fc:	f7fe ff8a 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b100:	4620      	mov	r0, r4
 800b102:	f7ff fe61 	bl	800adc8 <_Paint1>
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <WM__PaintWinAndOverlays+0x74>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	b313      	cbz	r3, 800b152 <WM__PaintWinAndOverlays+0x6e>
 800b10c:	4620      	mov	r0, r4
 800b10e:	f7ff ff8d 	bl	800b02c <_PaintTransChildren>
 800b112:	4620      	mov	r0, r4
 800b114:	f7fe ff66 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b118:	6985      	ldr	r5, [r0, #24]
 800b11a:	6a04      	ldr	r4, [r0, #32]
 800b11c:	b1cd      	cbz	r5, 800b152 <WM__PaintWinAndOverlays+0x6e>
 800b11e:	b194      	cbz	r4, 800b146 <WM__PaintWinAndOverlays+0x62>
 800b120:	4620      	mov	r0, r4
 800b122:	f7fe ff5f 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b126:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b128:	f003 0303 	and.w	r3, r3, #3
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d102      	bne.n	800b136 <WM__PaintWinAndOverlays+0x52>
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff ff31 	bl	800af98 <_Paint1Trans>
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff ff78 	bl	800b02c <_PaintTransChildren>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7fe ff51 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b142:	6a04      	ldr	r4, [r0, #32]
 800b144:	e7eb      	b.n	800b11e <WM__PaintWinAndOverlays+0x3a>
 800b146:	4628      	mov	r0, r5
 800b148:	f7fe ff4c 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b14c:	6a04      	ldr	r4, [r0, #32]
 800b14e:	6985      	ldr	r5, [r0, #24]
 800b150:	e7e4      	b.n	800b11c <WM__PaintWinAndOverlays+0x38>
 800b152:	b003      	add	sp, #12
 800b154:	bd30      	pop	{r4, r5, pc}
 800b156:	bf00      	nop
 800b158:	20022fcc 	.word	0x20022fcc

0800b15c <_cbPaintMemDev>:
 800b15c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	4d17      	ldr	r5, [pc, #92]	; (800b1c0 <_cbPaintMemDev+0x64>)
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	4606      	mov	r6, r0
 800b166:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b168:	f7fe ff46 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b16c:	682a      	ldr	r2, [r5, #0]
 800b16e:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800b172:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800b176:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800b17a:	89c7      	ldrh	r7, [r0, #14]
 800b17c:	ac02      	add	r4, sp, #8
 800b17e:	3208      	adds	r2, #8
 800b180:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b184:	f100 0308 	add.w	r3, r0, #8
 800b188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b18c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b190:	4620      	mov	r0, r4
 800b192:	f7fe ff3f 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b196:	6830      	ldr	r0, [r6, #0]
 800b198:	f7ff ffa4 	bl	800b0e4 <WM__PaintWinAndOverlays>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b1a0:	f7fe ff2a 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b1a4:	9001      	str	r0, [sp, #4]
 800b1a6:	f8a0 a008 	strh.w	sl, [r0, #8]
 800b1aa:	f8a0 900a 	strh.w	r9, [r0, #10]
 800b1ae:	f8a0 800c 	strh.w	r8, [r0, #12]
 800b1b2:	81c7      	strh	r7, [r0, #14]
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f7fe ff2d 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b1ba:	b002      	add	sp, #8
 800b1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c0:	20000020 	.word	0x20000020

0800b1c4 <WM__ClipAtParentBorders>:
 800b1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7fe ff14 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b1d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b1d2:	ac02      	add	r4, sp, #8
 800b1d4:	f013 0602 	ands.w	r6, r3, #2
 800b1d8:	4601      	mov	r1, r0
 800b1da:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b1de:	d104      	bne.n	800b1ea <WM__ClipAtParentBorders+0x26>
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f7fe ff17 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	e016      	b.n	800b218 <WM__ClipAtParentBorders+0x54>
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	f002 fa0c 	bl	800d608 <GUI__IntersectRect>
 800b1f0:	9b01      	ldr	r3, [sp, #4]
 800b1f2:	699e      	ldr	r6, [r3, #24]
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	b956      	cbnz	r6, 800b20e <WM__ClipAtParentBorders+0x4a>
 800b1f8:	f7fe ff0c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b1fc:	4b07      	ldr	r3, [pc, #28]	; (800b21c <WM__ClipAtParentBorders+0x58>)
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	4295      	cmp	r5, r2
 800b202:	d008      	beq.n	800b216 <WM__ClipAtParentBorders+0x52>
 800b204:	6858      	ldr	r0, [r3, #4]
 800b206:	1a2b      	subs	r3, r5, r0
 800b208:	4258      	negs	r0, r3
 800b20a:	4158      	adcs	r0, r3
 800b20c:	e004      	b.n	800b218 <WM__ClipAtParentBorders+0x54>
 800b20e:	f7fe ff01 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b212:	4635      	mov	r5, r6
 800b214:	e7d9      	b.n	800b1ca <WM__ClipAtParentBorders+0x6>
 800b216:	2001      	movs	r0, #1
 800b218:	b003      	add	sp, #12
 800b21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21c:	20022f84 	.word	0x20022f84

0800b220 <WM__InsertWindowIntoList>:
 800b220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	b085      	sub	sp, #20
 800b226:	460d      	mov	r5, r1
 800b228:	2900      	cmp	r1, #0
 800b22a:	d049      	beq.n	800b2c0 <WM__InsertWindowIntoList+0xa0>
 800b22c:	f7fe fee4 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b230:	2300      	movs	r3, #0
 800b232:	6203      	str	r3, [r0, #32]
 800b234:	6185      	str	r5, [r0, #24]
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	4628      	mov	r0, r5
 800b23a:	f7fe fedd 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	69c5      	ldr	r5, [r0, #28]
 800b242:	9002      	str	r0, [sp, #8]
 800b244:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800b246:	b92d      	cbnz	r5, 800b254 <WM__InsertWindowIntoList+0x34>
 800b248:	61c4      	str	r4, [r0, #28]
 800b24a:	a801      	add	r0, sp, #4
 800b24c:	f7fe fee2 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b250:	a802      	add	r0, sp, #8
 800b252:	e033      	b.n	800b2bc <WM__InsertWindowIntoList+0x9c>
 800b254:	4628      	mov	r0, r5
 800b256:	f7fe fecf 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b25a:	ae04      	add	r6, sp, #16
 800b25c:	f007 0708 	and.w	r7, r7, #8
 800b260:	f846 0d04 	str.w	r0, [r6, #-4]!
 800b264:	b977      	cbnz	r7, 800b284 <WM__InsertWindowIntoList+0x64>
 800b266:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b268:	071a      	lsls	r2, r3, #28
 800b26a:	d50b      	bpl.n	800b284 <WM__InsertWindowIntoList+0x64>
 800b26c:	9b01      	ldr	r3, [sp, #4]
 800b26e:	621d      	str	r5, [r3, #32]
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	a801      	add	r0, sp, #4
 800b274:	61dc      	str	r4, [r3, #28]
 800b276:	f7fe fecd 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b27a:	a802      	add	r0, sp, #8
 800b27c:	f7fe feca 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b280:	4630      	mov	r0, r6
 800b282:	e01b      	b.n	800b2bc <WM__InsertWindowIntoList+0x9c>
 800b284:	a802      	add	r0, sp, #8
 800b286:	f7fe fec5 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7fe fec2 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b290:	4628      	mov	r0, r5
 800b292:	f7fe fea7 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b296:	9003      	str	r0, [sp, #12]
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	6a1d      	ldr	r5, [r3, #32]
 800b29c:	b90d      	cbnz	r5, 800b2a2 <WM__InsertWindowIntoList+0x82>
 800b29e:	621c      	str	r4, [r3, #32]
 800b2a0:	e00b      	b.n	800b2ba <WM__InsertWindowIntoList+0x9a>
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f7fe fe9e 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b2a8:	2f00      	cmp	r7, #0
 800b2aa:	d1f4      	bne.n	800b296 <WM__InsertWindowIntoList+0x76>
 800b2ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2ae:	071b      	lsls	r3, r3, #28
 800b2b0:	d5f1      	bpl.n	800b296 <WM__InsertWindowIntoList+0x76>
 800b2b2:	9b03      	ldr	r3, [sp, #12]
 800b2b4:	621c      	str	r4, [r3, #32]
 800b2b6:	9b01      	ldr	r3, [sp, #4]
 800b2b8:	621d      	str	r5, [r3, #32]
 800b2ba:	a801      	add	r0, sp, #4
 800b2bc:	f7fe feaa 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b2c0:	b005      	add	sp, #20
 800b2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2c4 <WM__RemoveWindowFromList>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	f7fe fe8c 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	6980      	ldr	r0, [r0, #24]
 800b2d0:	b1a8      	cbz	r0, 800b2fe <WM__RemoveWindowFromList+0x3a>
 800b2d2:	f7fe fe87 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b2d6:	69c3      	ldr	r3, [r0, #28]
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	4606      	mov	r6, r0
 800b2dc:	d105      	bne.n	800b2ea <WM__RemoveWindowFromList+0x26>
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe fe80 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b2e4:	6a03      	ldr	r3, [r0, #32]
 800b2e6:	61f3      	str	r3, [r6, #28]
 800b2e8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ea:	b143      	cbz	r3, 800b2fe <WM__RemoveWindowFromList+0x3a>
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe fe79 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b2f2:	6a03      	ldr	r3, [r0, #32]
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	d1f8      	bne.n	800b2ea <WM__RemoveWindowFromList+0x26>
 800b2f8:	6a2b      	ldr	r3, [r5, #32]
 800b2fa:	6203      	str	r3, [r0, #32]
 800b2fc:	bd70      	pop	{r4, r5, r6, pc}
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}

0800b300 <WM__Client2Screen>:
 800b300:	4603      	mov	r3, r0
 800b302:	4608      	mov	r0, r1
 800b304:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b308:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b30c:	f002 bbbc 	b.w	800da88 <GUI_MoveRect>

0800b310 <_SetClipRectUserIntersect>:
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <_SetClipRectUserIntersect+0x48>)
 800b312:	b530      	push	{r4, r5, lr}
 800b314:	681c      	ldr	r4, [r3, #0]
 800b316:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b318:	b085      	sub	sp, #20
 800b31a:	4605      	mov	r5, r0
 800b31c:	b1ba      	cbz	r2, 800b34e <_SetClipRectUserIntersect+0x3e>
 800b31e:	6810      	ldr	r0, [r2, #0]
 800b320:	6851      	ldr	r1, [r2, #4]
 800b322:	ab02      	add	r3, sp, #8
 800b324:	c303      	stmia	r3!, {r0, r1}
 800b326:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <_SetClipRectUserIntersect+0x4c>)
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	b900      	cbnz	r0, 800b32e <_SetClipRectUserIntersect+0x1e>
 800b32c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b32e:	f7fe fe63 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b332:	ac04      	add	r4, sp, #16
 800b334:	a902      	add	r1, sp, #8
 800b336:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800b33a:	f7ff ffe1 	bl	800b300 <WM__Client2Screen>
 800b33e:	4620      	mov	r0, r4
 800b340:	f7fe fe68 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b344:	a802      	add	r0, sp, #8
 800b346:	4629      	mov	r1, r5
 800b348:	f002 f95e 	bl	800d608 <GUI__IntersectRect>
 800b34c:	a802      	add	r0, sp, #8
 800b34e:	f001 ff07 	bl	800d160 <LCD_SetClipRectEx>
 800b352:	b005      	add	sp, #20
 800b354:	bd30      	pop	{r4, r5, pc}
 800b356:	bf00      	nop
 800b358:	20000020 	.word	0x20000020
 800b35c:	20022f80 	.word	0x20022f80

0800b360 <WM__ActivateClipRect>:
 800b360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b362:	4b0e      	ldr	r3, [pc, #56]	; (800b39c <WM__ActivateClipRect+0x3c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800b36a:	b10a      	cbz	r2, 800b370 <WM__ActivateClipRect+0x10>
 800b36c:	480c      	ldr	r0, [pc, #48]	; (800b3a0 <WM__ActivateClipRect+0x40>)
 800b36e:	e011      	b.n	800b394 <WM__ActivateClipRect+0x34>
 800b370:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b372:	f7fe fe41 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b376:	9001      	str	r0, [sp, #4]
 800b378:	c803      	ldmia	r0, {r0, r1}
 800b37a:	ac02      	add	r4, sp, #8
 800b37c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b380:	a801      	add	r0, sp, #4
 800b382:	f7fe fe47 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b386:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <WM__ActivateClipRect+0x44>)
 800b388:	6819      	ldr	r1, [r3, #0]
 800b38a:	b111      	cbz	r1, 800b392 <WM__ActivateClipRect+0x32>
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7ff ff19 	bl	800b1c4 <WM__ClipAtParentBorders>
 800b392:	4620      	mov	r0, r4
 800b394:	f7ff ffbc 	bl	800b310 <_SetClipRectUserIntersect>
 800b398:	b004      	add	sp, #16
 800b39a:	bd10      	pop	{r4, pc}
 800b39c:	20000020 	.word	0x20000020
 800b3a0:	20022afc 	.word	0x20022afc
 800b3a4:	20022f80 	.word	0x20022f80

0800b3a8 <WM__IsWindow>:
 800b3a8:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <WM__IsWindow+0x1c>)
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	6818      	ldr	r0, [r3, #0]
 800b3b0:	b128      	cbz	r0, 800b3be <WM__IsWindow+0x16>
 800b3b2:	42a0      	cmp	r0, r4
 800b3b4:	d004      	beq.n	800b3c0 <WM__IsWindow+0x18>
 800b3b6:	f7fe fe15 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b3ba:	6940      	ldr	r0, [r0, #20]
 800b3bc:	e7f8      	b.n	800b3b0 <WM__IsWindow+0x8>
 800b3be:	bd10      	pop	{r4, pc}
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	bd10      	pop	{r4, pc}
 800b3c4:	20022fa0 	.word	0x20022fa0

0800b3c8 <WM__InvalidateDrawAndDescs>:
 800b3c8:	b513      	push	{r0, r1, r4, lr}
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	b300      	cbz	r0, 800b410 <WM__InvalidateDrawAndDescs+0x48>
 800b3ce:	f7fe fe13 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b3d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b3d4:	9001      	str	r0, [sp, #4]
 800b3d6:	0793      	lsls	r3, r2, #30
 800b3d8:	d517      	bpl.n	800b40a <WM__InvalidateDrawAndDescs+0x42>
 800b3da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b3dc:	b140      	cbz	r0, 800b3f0 <WM__InvalidateDrawAndDescs+0x28>
 800b3de:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <WM__InvalidateDrawAndDescs+0x4c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	d004      	beq.n	800b3f0 <WM__InvalidateDrawAndDescs+0x28>
 800b3e6:	f001 fdcd 	bl	800cf84 <GUI_MEMDEV_Delete>
 800b3ea:	9b01      	ldr	r3, [sp, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	625a      	str	r2, [r3, #36]	; 0x24
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f002 fd51 	bl	800de98 <WM_GetFirstChild>
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	b13c      	cbz	r4, 800b40a <WM__InvalidateDrawAndDescs+0x42>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff ffe4 	bl	800b3c8 <WM__InvalidateDrawAndDescs>
 800b400:	4620      	mov	r0, r4
 800b402:	f7fe fdef 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b406:	6a04      	ldr	r4, [r0, #32]
 800b408:	e7f6      	b.n	800b3f8 <WM__InvalidateDrawAndDescs+0x30>
 800b40a:	a801      	add	r0, sp, #4
 800b40c:	f7fe fe02 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b410:	b002      	add	sp, #8
 800b412:	bd10      	pop	{r4, pc}
 800b414:	20022fc8 	.word	0x20022fc8

0800b418 <WM__RectIsNZ>:
 800b418:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b41c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b420:	429a      	cmp	r2, r3
 800b422:	dc08      	bgt.n	800b436 <WM__RectIsNZ+0x1e>
 800b424:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b428:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	bfcc      	ite	gt
 800b430:	2000      	movgt	r0, #0
 800b432:	2001      	movle	r0, #1
 800b434:	4770      	bx	lr
 800b436:	2000      	movs	r0, #0
 800b438:	4770      	bx	lr
	...

0800b43c <_Invalidate1Abs>:
 800b43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43e:	b085      	sub	sp, #20
 800b440:	4606      	mov	r6, r0
 800b442:	460d      	mov	r5, r1
 800b444:	4617      	mov	r7, r2
 800b446:	f7fe fdcd 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b44a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b44c:	9001      	str	r0, [sp, #4]
 800b44e:	07a3      	lsls	r3, r4, #30
 800b450:	d534      	bpl.n	800b4bc <_Invalidate1Abs+0x80>
 800b452:	4628      	mov	r0, r5
 800b454:	f7ff ffe0 	bl	800b418 <WM__RectIsNZ>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d02f      	beq.n	800b4bc <_Invalidate1Abs+0x80>
 800b45c:	f640 0301 	movw	r3, #2049	; 0x801
 800b460:	4023      	ands	r3, r4
 800b462:	2b01      	cmp	r3, #1
 800b464:	d02a      	beq.n	800b4bc <_Invalidate1Abs+0x80>
 800b466:	4630      	mov	r0, r6
 800b468:	f7fe fdc6 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b46c:	ac02      	add	r4, sp, #8
 800b46e:	4602      	mov	r2, r0
 800b470:	9001      	str	r0, [sp, #4]
 800b472:	4629      	mov	r1, r5
 800b474:	4620      	mov	r0, r4
 800b476:	f002 f895 	bl	800d5a4 <GUI__IntersectRects>
 800b47a:	4620      	mov	r0, r4
 800b47c:	f7ff ffcc 	bl	800b418 <WM__RectIsNZ>
 800b480:	b1c8      	cbz	r0, 800b4b6 <_Invalidate1Abs+0x7a>
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800b486:	f244 0120 	movw	r1, #16416	; 0x4020
 800b48a:	4031      	ands	r1, r6
 800b48c:	f103 0508 	add.w	r5, r3, #8
 800b490:	b129      	cbz	r1, 800b49e <_Invalidate1Abs+0x62>
 800b492:	4628      	mov	r0, r5
 800b494:	4629      	mov	r1, r5
 800b496:	4622      	mov	r2, r4
 800b498:	f002 fb06 	bl	800daa8 <GUI_MergeRect>
 800b49c:	e00b      	b.n	800b4b6 <_Invalidate1Abs+0x7a>
 800b49e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4a2:	433e      	orrs	r6, r7
 800b4a4:	e885 0003 	stmia.w	r5, {r0, r1}
 800b4a8:	629e      	str	r6, [r3, #40]	; 0x28
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <_Invalidate1Abs+0x84>)
 800b4ac:	881a      	ldrh	r2, [r3, #0]
 800b4ae:	3201      	adds	r2, #1
 800b4b0:	801a      	strh	r2, [r3, #0]
 800b4b2:	f002 f983 	bl	800d7bc <GUI_SignalEvent>
 800b4b6:	a801      	add	r0, sp, #4
 800b4b8:	f7fe fdac 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b4bc:	b005      	add	sp, #20
 800b4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4c0:	20022f9c 	.word	0x20022f9c

0800b4c4 <WM__Invalidate1Abs>:
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	f7ff bfb9 	b.w	800b43c <_Invalidate1Abs>

0800b4ca <WM_InvalidateWindowAndDescsEx>:
 800b4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	b348      	cbz	r0, 800b52a <WM_InvalidateWindowAndDescsEx+0x60>
 800b4d6:	f7fe fd8f 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b4da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b4dc:	ac04      	add	r4, sp, #16
 800b4de:	079b      	lsls	r3, r3, #30
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800b4e6:	d403      	bmi.n	800b4f0 <WM_InvalidateWindowAndDescsEx+0x26>
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f7fe fd93 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b4ee:	e01c      	b.n	800b52a <WM_InvalidateWindowAndDescsEx+0x60>
 800b4f0:	a802      	add	r0, sp, #8
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f002 f856 	bl	800d5a4 <GUI__IntersectRects>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0f5      	beq.n	800b4e8 <WM_InvalidateWindowAndDescsEx+0x1e>
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7fe fd89 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b502:	4630      	mov	r0, r6
 800b504:	a902      	add	r1, sp, #8
 800b506:	462a      	mov	r2, r5
 800b508:	f7ff ff98 	bl	800b43c <_Invalidate1Abs>
 800b50c:	4630      	mov	r0, r6
 800b50e:	f002 fcc3 	bl	800de98 <WM_GetFirstChild>
 800b512:	4604      	mov	r4, r0
 800b514:	b14c      	cbz	r4, 800b52a <WM_InvalidateWindowAndDescsEx+0x60>
 800b516:	4620      	mov	r0, r4
 800b518:	a902      	add	r1, sp, #8
 800b51a:	462a      	mov	r2, r5
 800b51c:	f7ff ffd5 	bl	800b4ca <WM_InvalidateWindowAndDescsEx>
 800b520:	4620      	mov	r0, r4
 800b522:	f7fe fd5f 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b526:	6a04      	ldr	r4, [r0, #32]
 800b528:	e7f4      	b.n	800b514 <WM_InvalidateWindowAndDescsEx+0x4a>
 800b52a:	b005      	add	sp, #20
 800b52c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b52e <WM__InvalidateRect>:
 800b52e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b532:	4680      	mov	r8, r0
 800b534:	4617      	mov	r7, r2
 800b536:	461d      	mov	r5, r3
 800b538:	460c      	mov	r4, r1
 800b53a:	2900      	cmp	r1, #0
 800b53c:	d030      	beq.n	800b5a0 <WM__InvalidateRect+0x72>
 800b53e:	4608      	mov	r0, r1
 800b540:	f7fe fd5a 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b544:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800b546:	9001      	str	r0, [sp, #4]
 800b548:	07b3      	lsls	r3, r6, #30
 800b54a:	4602      	mov	r2, r0
 800b54c:	d525      	bpl.n	800b59a <WM__InvalidateRect+0x6c>
 800b54e:	a802      	add	r0, sp, #8
 800b550:	4641      	mov	r1, r8
 800b552:	f002 f827 	bl	800d5a4 <GUI__IntersectRects>
 800b556:	b300      	cbz	r0, 800b59a <WM__InvalidateRect+0x6c>
 800b558:	f640 0301 	movw	r3, #2049	; 0x801
 800b55c:	4033      	ands	r3, r6
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d107      	bne.n	800b572 <WM__InvalidateRect+0x44>
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	a802      	add	r0, sp, #8
 800b566:	6999      	ldr	r1, [r3, #24]
 800b568:	6a1a      	ldr	r2, [r3, #32]
 800b56a:	462b      	mov	r3, r5
 800b56c:	f7ff ffdf 	bl	800b52e <WM__InvalidateRect>
 800b570:	e004      	b.n	800b57c <WM__InvalidateRect+0x4e>
 800b572:	4620      	mov	r0, r4
 800b574:	a902      	add	r1, sp, #8
 800b576:	462a      	mov	r2, r5
 800b578:	f7ff ff60 	bl	800b43c <_Invalidate1Abs>
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	69dc      	ldr	r4, [r3, #28]
 800b580:	b15c      	cbz	r4, 800b59a <WM__InvalidateRect+0x6c>
 800b582:	42bc      	cmp	r4, r7
 800b584:	d009      	beq.n	800b59a <WM__InvalidateRect+0x6c>
 800b586:	4620      	mov	r0, r4
 800b588:	a902      	add	r1, sp, #8
 800b58a:	462a      	mov	r2, r5
 800b58c:	f7ff ff9d 	bl	800b4ca <WM_InvalidateWindowAndDescsEx>
 800b590:	4620      	mov	r0, r4
 800b592:	f7fe fd27 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b596:	6a04      	ldr	r4, [r0, #32]
 800b598:	e7f2      	b.n	800b580 <WM__InvalidateRect+0x52>
 800b59a:	a801      	add	r0, sp, #4
 800b59c:	f7fe fd3a 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b5a0:	b004      	add	sp, #16
 800b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5a6 <WM__InvalidateParent>:
 800b5a6:	b570      	push	{r4, r5, r6, lr}
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	4608      	mov	r0, r1
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	4616      	mov	r6, r2
 800b5b0:	f7fe fd18 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b5b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b5b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4632      	mov	r2, r6
 800b5c0:	bf0c      	ite	eq
 800b5c2:	2320      	moveq	r3, #32
 800b5c4:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800b5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5cc:	f7ff bfaf 	b.w	800b52e <WM__InvalidateRect>

0800b5d0 <WM__InvalidateRectEx>:
 800b5d0:	2320      	movs	r3, #32
 800b5d2:	f7ff bfac 	b.w	800b52e <WM__InvalidateRect>

0800b5d6 <WM__DetachWindow>:
 800b5d6:	b513      	push	{r0, r1, r4, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	f7fe fd0d 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b5de:	6981      	ldr	r1, [r0, #24]
 800b5e0:	9001      	str	r0, [sp, #4]
 800b5e2:	b141      	cbz	r1, 800b5f6 <WM__DetachWindow+0x20>
 800b5e4:	6a02      	ldr	r2, [r0, #32]
 800b5e6:	f7ff fff3 	bl	800b5d0 <WM__InvalidateRectEx>
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f7ff fe6a 	bl	800b2c4 <WM__RemoveWindowFromList>
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	619a      	str	r2, [r3, #24]
 800b5f6:	a801      	add	r0, sp, #4
 800b5f8:	f7fe fd0c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b5fc:	b002      	add	sp, #8
 800b5fe:	bd10      	pop	{r4, pc}

0800b600 <WM__SendMsgNoData>:
 800b600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b602:	ab04      	add	r3, sp, #16
 800b604:	9001      	str	r0, [sp, #4]
 800b606:	f843 1d10 	str.w	r1, [r3, #-16]!
 800b60a:	4669      	mov	r1, sp
 800b60c:	f002 fb0a 	bl	800dc24 <WM__SendMessage>
 800b610:	b005      	add	sp, #20
 800b612:	f85d fb04 	ldr.w	pc, [sp], #4

0800b616 <WM__GetClientRectWin>:
 800b616:	2300      	movs	r3, #0
 800b618:	800b      	strh	r3, [r1, #0]
 800b61a:	8882      	ldrh	r2, [r0, #4]
 800b61c:	804b      	strh	r3, [r1, #2]
 800b61e:	8803      	ldrh	r3, [r0, #0]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	808b      	strh	r3, [r1, #4]
 800b624:	88c2      	ldrh	r2, [r0, #6]
 800b626:	8843      	ldrh	r3, [r0, #2]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	80cb      	strh	r3, [r1, #6]
 800b62c:	4770      	bx	lr

0800b62e <WM_InvalidateRect>:
 800b62e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b630:	460f      	mov	r7, r1
 800b632:	b087      	sub	sp, #28
 800b634:	4605      	mov	r5, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	d033      	beq.n	800b6a2 <WM_InvalidateRect+0x74>
 800b63a:	f7fe fcdd 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b63e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800b640:	9001      	str	r0, [sp, #4]
 800b642:	07b2      	lsls	r2, r6, #30
 800b644:	d52a      	bpl.n	800b69c <WM_InvalidateRect+0x6e>
 800b646:	c803      	ldmia	r0, {r0, r1}
 800b648:	ac04      	add	r4, sp, #16
 800b64a:	03f3      	lsls	r3, r6, #15
 800b64c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b650:	d502      	bpl.n	800b658 <WM_InvalidateRect+0x2a>
 800b652:	4628      	mov	r0, r5
 800b654:	f7ff feb8 	bl	800b3c8 <WM__InvalidateDrawAndDescs>
 800b658:	b15f      	cbz	r7, 800b672 <WM_InvalidateRect+0x44>
 800b65a:	6838      	ldr	r0, [r7, #0]
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	ab02      	add	r3, sp, #8
 800b660:	c303      	stmia	r3!, {r0, r1}
 800b662:	9801      	ldr	r0, [sp, #4]
 800b664:	a902      	add	r1, sp, #8
 800b666:	f7ff fe4b 	bl	800b300 <WM__Client2Screen>
 800b66a:	4620      	mov	r0, r4
 800b66c:	a902      	add	r1, sp, #8
 800b66e:	f001 ffcb 	bl	800d608 <GUI__IntersectRect>
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f7ff fda5 	bl	800b1c4 <WM__ClipAtParentBorders>
 800b67a:	b178      	cbz	r0, 800b69c <WM_InvalidateRect+0x6e>
 800b67c:	f640 0301 	movw	r3, #2049	; 0x801
 800b680:	4033      	ands	r3, r6
 800b682:	2b01      	cmp	r3, #1
 800b684:	d106      	bne.n	800b694 <WM_InvalidateRect+0x66>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	4620      	mov	r0, r4
 800b68a:	6999      	ldr	r1, [r3, #24]
 800b68c:	6a1a      	ldr	r2, [r3, #32]
 800b68e:	f7ff ff9f 	bl	800b5d0 <WM__InvalidateRectEx>
 800b692:	e003      	b.n	800b69c <WM_InvalidateRect+0x6e>
 800b694:	4628      	mov	r0, r5
 800b696:	4621      	mov	r1, r4
 800b698:	f7ff ff14 	bl	800b4c4 <WM__Invalidate1Abs>
 800b69c:	a801      	add	r0, sp, #4
 800b69e:	f7fe fcb9 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b6a2:	b007      	add	sp, #28
 800b6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6a6 <WM_InvalidateWindow>:
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	f7ff bfc1 	b.w	800b62e <WM_InvalidateRect>

0800b6ac <WM__GetTopLevelLayer>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	f7fe fc98 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b6b4:	6980      	ldr	r0, [r0, #24]
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d1f9      	bne.n	800b6ae <WM__GetTopLevelLayer+0x2>
 800b6ba:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <WM__GetTopLevelLayer+0x24>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	4294      	cmp	r4, r2
 800b6c0:	d005      	beq.n	800b6ce <WM__GetTopLevelLayer+0x22>
 800b6c2:	6858      	ldr	r0, [r3, #4]
 800b6c4:	4284      	cmp	r4, r0
 800b6c6:	bf14      	ite	ne
 800b6c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b6cc:	2001      	moveq	r0, #1
 800b6ce:	bd10      	pop	{r4, pc}
 800b6d0:	20022f84 	.word	0x20022f84

0800b6d4 <WM__SelectTopLevelLayer>:
 800b6d4:	b508      	push	{r3, lr}
 800b6d6:	f7ff ffe9 	bl	800b6ac <WM__GetTopLevelLayer>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	db03      	blt.n	800b6e6 <WM__SelectTopLevelLayer+0x12>
 800b6de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b6e2:	f7fd be69 	b.w	80093b8 <GUI_SelectLayer>
 800b6e6:	bd08      	pop	{r3, pc}

0800b6e8 <WM_SelectWindow>:
 800b6e8:	4a0d      	ldr	r2, [pc, #52]	; (800b720 <WM_SelectWindow+0x38>)
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	4616      	mov	r6, r2
 800b6f4:	b908      	cbnz	r0, 800b6fa <WM_SelectWindow+0x12>
 800b6f6:	4a0b      	ldr	r2, [pc, #44]	; (800b724 <WM_SelectWindow+0x3c>)
 800b6f8:	6814      	ldr	r4, [r2, #0]
 800b6fa:	649c      	str	r4, [r3, #72]	; 0x48
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f7ff ffe9 	bl	800b6d4 <WM__SelectTopLevelLayer>
 800b702:	f7fd fb59 	bl	8008db8 <LCD_SetClipRectMax>
 800b706:	4620      	mov	r0, r4
 800b708:	f7fe fc6c 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b70c:	6833      	ldr	r3, [r6, #0]
 800b70e:	f9b0 1000 	ldrsh.w	r1, [r0]
 800b712:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b716:	64d9      	str	r1, [r3, #76]	; 0x4c
 800b718:	651a      	str	r2, [r3, #80]	; 0x50
 800b71a:	4628      	mov	r0, r5
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
 800b71e:	bf00      	nop
 800b720:	20000020 	.word	0x20000020
 800b724:	20022fa0 	.word	0x20022fa0

0800b728 <WM_CreateWindowAsChild>:
 800b728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b72e:	469b      	mov	fp, r3
 800b730:	4b4b      	ldr	r3, [pc, #300]	; (800b860 <WM_CreateWindowAsChild+0x138>)
 800b732:	4607      	mov	r7, r0
 800b734:	4688      	mov	r8, r1
 800b736:	4692      	mov	sl, r2
 800b738:	681e      	ldr	r6, [r3, #0]
 800b73a:	bb65      	cbnz	r5, 800b796 <WM_CreateWindowAsChild+0x6e>
 800b73c:	4b49      	ldr	r3, [pc, #292]	; (800b864 <WM_CreateWindowAsChild+0x13c>)
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	b363      	cbz	r3, 800b79c <WM_CreateWindowAsChild+0x74>
 800b742:	4b49      	ldr	r3, [pc, #292]	; (800b868 <WM_CreateWindowAsChild+0x140>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	7c5a      	ldrb	r2, [r3, #17]
 800b748:	4b48      	ldr	r3, [pc, #288]	; (800b86c <WM_CreateWindowAsChild+0x144>)
 800b74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	d024      	beq.n	800b79c <WM_CreateWindowAsChild+0x74>
 800b752:	b31b      	cbz	r3, 800b79c <WM_CreateWindowAsChild+0x74>
 800b754:	461d      	mov	r5, r3
 800b756:	4628      	mov	r0, r5
 800b758:	f7fe fc4e 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b75c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b760:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b764:	9001      	str	r0, [sp, #4]
 800b766:	4417      	add	r7, r2
 800b768:	4498      	add	r8, r3
 800b76a:	f1ba 0f00 	cmp.w	sl, #0
 800b76e:	d105      	bne.n	800b77c <WM_CreateWindowAsChild+0x54>
 800b770:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800b774:	ebc2 0a0a 	rsb	sl, r2, sl
 800b778:	f10a 0a01 	add.w	sl, sl, #1
 800b77c:	f1bb 0f00 	cmp.w	fp, #0
 800b780:	d105      	bne.n	800b78e <WM_CreateWindowAsChild+0x66>
 800b782:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800b786:	ebc3 0b0b 	rsb	fp, r3, fp
 800b78a:	f10b 0b01 	add.w	fp, fp, #1
 800b78e:	a801      	add	r0, sp, #4
 800b790:	f7fe fc40 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b794:	e002      	b.n	800b79c <WM_CreateWindowAsChild+0x74>
 800b796:	1c6b      	adds	r3, r5, #1
 800b798:	d1dd      	bne.n	800b756 <WM_CreateWindowAsChild+0x2e>
 800b79a:	2500      	movs	r5, #0
 800b79c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b79e:	302c      	adds	r0, #44	; 0x2c
 800b7a0:	f002 f9ec 	bl	800db7c <GUI_ALLOC_AllocZero>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d056      	beq.n	800b858 <WM_CreateWindowAsChild+0x130>
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ac:	431e      	orrs	r6, r3
 800b7ae:	4b2d      	ldr	r3, [pc, #180]	; (800b864 <WM_CreateWindowAsChild+0x13c>)
 800b7b0:	881a      	ldrh	r2, [r3, #0]
 800b7b2:	3201      	adds	r2, #1
 800b7b4:	801a      	strh	r2, [r3, #0]
 800b7b6:	f7fe fc1f 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7bc:	6103      	str	r3, [r0, #16]
 800b7be:	f10d 0908 	add.w	r9, sp, #8
 800b7c2:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <WM_CreateWindowAsChild+0x148>)
 800b7c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b7c6:	f849 0d08 	str.w	r0, [r9, #-8]!
 800b7ca:	4033      	ands	r3, r6
 800b7cc:	8007      	strh	r7, [r0, #0]
 800b7ce:	f8a0 8002 	strh.w	r8, [r0, #2]
 800b7d2:	4457      	add	r7, sl
 800b7d4:	44d8      	add	r8, fp
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	3f01      	subs	r7, #1
 800b7da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b7de:	6283      	str	r3, [r0, #40]	; 0x28
 800b7e0:	8087      	strh	r7, [r0, #4]
 800b7e2:	f8a0 8006 	strh.w	r8, [r0, #6]
 800b7e6:	4668      	mov	r0, sp
 800b7e8:	f7fe fc14 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b7ec:	4b21      	ldr	r3, [pc, #132]	; (800b874 <WM_CreateWindowAsChild+0x14c>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	b148      	cbz	r0, 800b806 <WM_CreateWindowAsChild+0xde>
 800b7f2:	f7fe fbf7 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7fe fbf3 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	6143      	str	r3, [r0, #20]
 800b802:	617c      	str	r4, [r7, #20]
 800b804:	e000      	b.n	800b808 <WM_CreateWindowAsChild+0xe0>
 800b806:	601c      	str	r4, [r3, #0]
 800b808:	4629      	mov	r1, r5
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff fd08 	bl	800b220 <WM__InsertWindowIntoList>
 800b810:	06b5      	lsls	r5, r6, #26
 800b812:	d502      	bpl.n	800b81a <WM_CreateWindowAsChild+0xf2>
 800b814:	4620      	mov	r0, r4
 800b816:	f7ff ff67 	bl	800b6e8 <WM_SelectWindow>
 800b81a:	07f0      	lsls	r0, r6, #31
 800b81c:	d503      	bpl.n	800b826 <WM_CreateWindowAsChild+0xfe>
 800b81e:	4b16      	ldr	r3, [pc, #88]	; (800b878 <WM_CreateWindowAsChild+0x150>)
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	3201      	adds	r2, #1
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	0671      	lsls	r1, r6, #25
 800b828:	d502      	bpl.n	800b830 <WM_CreateWindowAsChild+0x108>
 800b82a:	4620      	mov	r0, r4
 800b82c:	f002 fb56 	bl	800dedc <WM_BringToBottom>
 800b830:	07b2      	lsls	r2, r6, #30
 800b832:	d50d      	bpl.n	800b850 <WM_CreateWindowAsChild+0x128>
 800b834:	4620      	mov	r0, r4
 800b836:	f7fe fbdf 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b83a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b83c:	9000      	str	r0, [sp, #0]
 800b83e:	f043 0302 	orr.w	r3, r3, #2
 800b842:	6283      	str	r3, [r0, #40]	; 0x28
 800b844:	4668      	mov	r0, sp
 800b846:	f7fe fbe5 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7ff ff2b 	bl	800b6a6 <WM_InvalidateWindow>
 800b850:	4620      	mov	r0, r4
 800b852:	2101      	movs	r1, #1
 800b854:	f7ff fed4 	bl	800b600 <WM__SendMsgNoData>
 800b858:	4620      	mov	r0, r4
 800b85a:	b003      	add	sp, #12
 800b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b860:	20022fac 	.word	0x20022fac
 800b864:	20022f7c 	.word	0x20022f7c
 800b868:	20000020 	.word	0x20000020
 800b86c:	20022f84 	.word	0x20022f84
 800b870:	003f3f9f 	.word	0x003f3f9f
 800b874:	20022fa0 	.word	0x20022fa0
 800b878:	20022fcc 	.word	0x20022fcc

0800b87c <WM_DeleteWindow>:
 800b87c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b87e:	4604      	mov	r4, r0
 800b880:	2800      	cmp	r0, #0
 800b882:	d06e      	beq.n	800b962 <WM_DeleteWindow+0xe6>
 800b884:	f7ff fd90 	bl	800b3a8 <WM__IsWindow>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d06a      	beq.n	800b962 <WM_DeleteWindow+0xe6>
 800b88c:	4620      	mov	r0, r4
 800b88e:	f7ff ff0d 	bl	800b6ac <WM__GetTopLevelLayer>
 800b892:	210b      	movs	r1, #11
 800b894:	4605      	mov	r5, r0
 800b896:	4620      	mov	r0, r4
 800b898:	f7ff feb2 	bl	800b600 <WM__SendMsgNoData>
 800b89c:	4620      	mov	r0, r4
 800b89e:	f002 f9f2 	bl	800dc86 <WM__DeleteAssocTimer>
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7fe fba8 	bl	8009ff8 <GUI_ALLOC_LockH>
 800b8a8:	9001      	str	r0, [sp, #4]
 800b8aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b8ac:	b108      	cbz	r0, 800b8b2 <WM_DeleteWindow+0x36>
 800b8ae:	f001 fb69 	bl	800cf84 <GUI_MEMDEV_Delete>
 800b8b2:	4b2d      	ldr	r3, [pc, #180]	; (800b968 <WM_DeleteWindow+0xec>)
 800b8b4:	4a2d      	ldr	r2, [pc, #180]	; (800b96c <WM_DeleteWindow+0xf0>)
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	6019      	str	r1, [r3, #0]
 800b8ba:	4b2d      	ldr	r3, [pc, #180]	; (800b970 <WM_DeleteWindow+0xf4>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b8c2:	42a0      	cmp	r0, r4
 800b8c4:	bf08      	it	eq
 800b8c6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800b8ca:	4a2a      	ldr	r2, [pc, #168]	; (800b974 <WM_DeleteWindow+0xf8>)
 800b8cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8d0:	42a1      	cmp	r1, r4
 800b8d2:	bf04      	itt	eq
 800b8d4:	2100      	moveq	r1, #0
 800b8d6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800b8da:	4b27      	ldr	r3, [pc, #156]	; (800b978 <WM_DeleteWindow+0xfc>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	b12b      	cbz	r3, 800b8ec <WM_DeleteWindow+0x70>
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	42a2      	cmp	r2, r4
 800b8e4:	bf04      	itt	eq
 800b8e6:	2200      	moveq	r2, #0
 800b8e8:	605a      	streq	r2, [r3, #4]
 800b8ea:	e7f7      	b.n	800b8dc <WM_DeleteWindow+0x60>
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	2107      	movs	r1, #7
 800b8f0:	f002 fab8 	bl	800de64 <WM_NotifyParent>
 800b8f4:	9e01      	ldr	r6, [sp, #4]
 800b8f6:	69f0      	ldr	r0, [r6, #28]
 800b8f8:	f7ff ffc0 	bl	800b87c <WM_DeleteWindow>
 800b8fc:	69f3      	ldr	r3, [r6, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f9      	bne.n	800b8f6 <WM_DeleteWindow+0x7a>
 800b902:	4620      	mov	r0, r4
 800b904:	f7ff fe67 	bl	800b5d6 <WM__DetachWindow>
 800b908:	4b1c      	ldr	r3, [pc, #112]	; (800b97c <WM_DeleteWindow+0x100>)
 800b90a:	6818      	ldr	r0, [r3, #0]
 800b90c:	b150      	cbz	r0, 800b924 <WM_DeleteWindow+0xa8>
 800b90e:	f7fe fb69 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b912:	4606      	mov	r6, r0
 800b914:	6940      	ldr	r0, [r0, #20]
 800b916:	42a0      	cmp	r0, r4
 800b918:	d1f8      	bne.n	800b90c <WM_DeleteWindow+0x90>
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7fe fb62 	bl	8009fe4 <GUI_ALLOC_h2p>
 800b920:	6943      	ldr	r3, [r0, #20]
 800b922:	6173      	str	r3, [r6, #20]
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	07da      	lsls	r2, r3, #31
 800b92a:	d503      	bpl.n	800b934 <WM_DeleteWindow+0xb8>
 800b92c:	4a14      	ldr	r2, [pc, #80]	; (800b980 <WM_DeleteWindow+0x104>)
 800b92e:	6811      	ldr	r1, [r2, #0]
 800b930:	3901      	subs	r1, #1
 800b932:	6011      	str	r1, [r2, #0]
 800b934:	069b      	lsls	r3, r3, #26
 800b936:	d503      	bpl.n	800b940 <WM_DeleteWindow+0xc4>
 800b938:	4b12      	ldr	r3, [pc, #72]	; (800b984 <WM_DeleteWindow+0x108>)
 800b93a:	881a      	ldrh	r2, [r3, #0]
 800b93c:	3a01      	subs	r2, #1
 800b93e:	801a      	strh	r2, [r3, #0]
 800b940:	a801      	add	r0, sp, #4
 800b942:	f7fe fb67 	bl	800a014 <GUI_ALLOC_UnlockH>
 800b946:	4b10      	ldr	r3, [pc, #64]	; (800b988 <WM_DeleteWindow+0x10c>)
 800b948:	881a      	ldrh	r2, [r3, #0]
 800b94a:	4620      	mov	r0, r4
 800b94c:	3a01      	subs	r2, #1
 800b94e:	801a      	strh	r2, [r3, #0]
 800b950:	f7fe fb80 	bl	800a054 <GUI_ALLOC_Free>
 800b954:	2d00      	cmp	r5, #0
 800b956:	db04      	blt.n	800b962 <WM_DeleteWindow+0xe6>
 800b958:	4b0c      	ldr	r3, [pc, #48]	; (800b98c <WM_DeleteWindow+0x110>)
 800b95a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b95e:	f7ff fec3 	bl	800b6e8 <WM_SelectWindow>
 800b962:	b002      	add	sp, #8
 800b964:	bd70      	pop	{r4, r5, r6, pc}
 800b966:	bf00      	nop
 800b968:	20022b0c 	.word	0x20022b0c
 800b96c:	20022f94 	.word	0x20022f94
 800b970:	20022fa4 	.word	0x20022fa4
 800b974:	20022fc0 	.word	0x20022fc0
 800b978:	20022fb8 	.word	0x20022fb8
 800b97c:	20022fa0 	.word	0x20022fa0
 800b980:	20022fcc 	.word	0x20022fcc
 800b984:	20022f9c 	.word	0x20022f9c
 800b988:	20022f7c 	.word	0x20022f7c
 800b98c:	20022f84 	.word	0x20022f84

0800b990 <WM__GetNextIVR>:
 800b990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b994:	4f5d      	ldr	r7, [pc, #372]	; (800bb0c <WM__GetNextIVR+0x17c>)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800b99c:	2800      	cmp	r0, #0
 800b99e:	f000 80b2 	beq.w	800bb06 <WM__GetNextIVR+0x176>
 800b9a2:	4b5b      	ldr	r3, [pc, #364]	; (800bb10 <WM__GetNextIVR+0x180>)
 800b9a4:	695a      	ldr	r2, [r3, #20]
 800b9a6:	2a01      	cmp	r2, #1
 800b9a8:	461c      	mov	r4, r3
 800b9aa:	dd03      	ble.n	800b9b4 <WM__GetNextIVR+0x24>
 800b9ac:	3a01      	subs	r2, #1
 800b9ae:	615a      	str	r2, [r3, #20]
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e0a8      	b.n	800bb06 <WM__GetNextIVR+0x176>
 800b9b4:	f104 0608 	add.w	r6, r4, #8
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b9be:	3301      	adds	r3, #1
 800b9c0:	ad02      	add	r5, sp, #8
 800b9c2:	6123      	str	r3, [r4, #16]
 800b9c4:	e885 0003 	stmia.w	r5, {r0, r1}
 800b9c8:	b923      	cbnz	r3, 800b9d4 <WM__GetNextIVR+0x44>
 800b9ca:	8823      	ldrh	r3, [r4, #0]
 800b9cc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b9d0:	8863      	ldrh	r3, [r4, #2]
 800b9d2:	e011      	b.n	800b9f8 <WM__GetNextIVR+0x68>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	8962      	ldrh	r2, [r4, #10]
 800b9d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800b9e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b9e8:	b21b      	sxth	r3, r3
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	da06      	bge.n	800b9fc <WM__GetNextIVR+0x6c>
 800b9ee:	8823      	ldrh	r3, [r4, #0]
 800b9f0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b9f4:	89e3      	ldrh	r3, [r4, #14]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	f8ad 300a 	strh.w	r3, [sp, #10]
 800b9fc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800ba00:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ba04:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800bb10 <WM__GetNextIVR+0x180>
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	dd04      	ble.n	800ba16 <WM__GetNextIVR+0x86>
 800ba0c:	6963      	ldr	r3, [r4, #20]
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	2000      	movs	r0, #0
 800ba12:	6163      	str	r3, [r4, #20]
 800ba14:	e077      	b.n	800bb06 <WM__GetNextIVR+0x176>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ba1a:	f7fe faed 	bl	8009ff8 <GUI_ALLOC_LockH>
 800ba1e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800ba22:	f9b8 3000 	ldrsh.w	r3, [r8]
 800ba26:	9001      	str	r0, [sp, #4]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d11c      	bne.n	800ba66 <WM__GetNextIVR+0xd6>
 800ba2c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ba30:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ba34:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800ba38:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ba3c:	4b33      	ldr	r3, [pc, #204]	; (800bb0c <WM__GetNextIVR+0x17c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba42:	b15a      	cbz	r2, 800ba5c <WM__GetNextIVR+0xcc>
 800ba44:	4610      	mov	r0, r2
 800ba46:	f7fe facd 	bl	8009fe4 <GUI_ALLOC_h2p>
 800ba4a:	4680      	mov	r8, r0
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	6a00      	ldr	r0, [r0, #32]
 800ba50:	4629      	mov	r1, r5
 800ba52:	f7ff f9cb 	bl	800adec <_Findy1>
 800ba56:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ba5a:	e7f2      	b.n	800ba42 <WM__GetNextIVR+0xb2>
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	4629      	mov	r1, r5
 800ba60:	69d8      	ldr	r0, [r3, #28]
 800ba62:	f7ff f9c3 	bl	800adec <_Findy1>
 800ba66:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ba6a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba72:	b16a      	cbz	r2, 800ba90 <WM__GetNextIVR+0x100>
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7fe fab5 	bl	8009fe4 <GUI_ALLOC_h2p>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	4680      	mov	r8, r0
 800ba7e:	2200      	movs	r2, #0
 800ba80:	6a00      	ldr	r0, [r0, #32]
 800ba82:	f7ff fa09 	bl	800ae98 <_Findx0>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d1ed      	bne.n	800ba66 <WM__GetNextIVR+0xd6>
 800ba8a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ba8e:	e7f0      	b.n	800ba72 <WM__GetNextIVR+0xe2>
 800ba90:	9b01      	ldr	r3, [sp, #4]
 800ba92:	4629      	mov	r1, r5
 800ba94:	69d8      	ldr	r0, [r3, #28]
 800ba96:	f7ff f9ff 	bl	800ae98 <_Findx0>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1e3      	bne.n	800ba66 <WM__GetNextIVR+0xd6>
 800ba9e:	88a3      	ldrh	r3, [r4, #4]
 800baa0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800baa4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800baa8:	b21b      	sxth	r3, r3
 800baaa:	429a      	cmp	r2, r3
 800baac:	dd07      	ble.n	800babe <WM__GetNextIVR+0x12e>
 800baae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bab2:	e886 0003 	stmia.w	r6, {r0, r1}
 800bab6:	a801      	add	r0, sp, #4
 800bab8:	f7fe faac 	bl	800a014 <GUI_ALLOC_UnlockH>
 800babc:	e797      	b.n	800b9ee <WM__GetNextIVR+0x5e>
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bac2:	b152      	cbz	r2, 800bada <WM__GetNextIVR+0x14a>
 800bac4:	4610      	mov	r0, r2
 800bac6:	f7fe fa8d 	bl	8009fe4 <GUI_ALLOC_h2p>
 800baca:	4607      	mov	r7, r0
 800bacc:	2200      	movs	r2, #0
 800bace:	6a00      	ldr	r0, [r0, #32]
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7ff fa25 	bl	800af20 <_Findx1>
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	e7f3      	b.n	800bac2 <WM__GetNextIVR+0x132>
 800bada:	af04      	add	r7, sp, #16
 800badc:	4629      	mov	r1, r5
 800bade:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800bae2:	69d8      	ldr	r0, [r3, #28]
 800bae4:	f7ff fa1c 	bl	800af20 <_Findx1>
 800bae8:	4638      	mov	r0, r7
 800baea:	f7fe fa93 	bl	800a014 <GUI_ALLOC_UnlockH>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	f644 6220 	movw	r2, #20000	; 0x4e20
 800baf4:	4293      	cmp	r3, r2
 800baf6:	dc89      	bgt.n	800ba0c <WM__GetNextIVR+0x7c>
 800baf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bafc:	e886 0003 	stmia.w	r6, {r0, r1}
 800bb00:	f7ff fc2e 	bl	800b360 <WM__ActivateClipRect>
 800bb04:	2001      	movs	r0, #1
 800bb06:	b004      	add	sp, #16
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	20000020 	.word	0x20000020
 800bb10:	20022af4 	.word	0x20022af4

0800bb14 <WM__InitIVRSearch>:
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	4f39      	ldr	r7, [pc, #228]	; (800bc00 <WM__InitIVRSearch+0xec>)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800bb20:	b086      	sub	sp, #24
 800bb22:	4606      	mov	r6, r0
 800bb24:	b912      	cbnz	r2, 800bb2c <WM__InitIVRSearch+0x18>
 800bb26:	f7ff fc1b 	bl	800b360 <WM__ActivateClipRect>
 800bb2a:	e064      	b.n	800bbf6 <WM__InitIVRSearch+0xe2>
 800bb2c:	4d35      	ldr	r5, [pc, #212]	; (800bc04 <WM__InitIVRSearch+0xf0>)
 800bb2e:	696a      	ldr	r2, [r5, #20]
 800bb30:	3201      	adds	r2, #1
 800bb32:	2a01      	cmp	r2, #1
 800bb34:	616a      	str	r2, [r5, #20]
 800bb36:	462c      	mov	r4, r5
 800bb38:	dc5d      	bgt.n	800bbf6 <WM__InitIVRSearch+0xe2>
 800bb3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800bb3c:	f7fe fa5c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800bb40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb44:	612a      	str	r2, [r5, #16]
 800bb46:	4a30      	ldr	r2, [pc, #192]	; (800bc08 <WM__InitIVRSearch+0xf4>)
 800bb48:	9000      	str	r0, [sp, #0]
 800bb4a:	7812      	ldrb	r2, [r2, #0]
 800bb4c:	b12a      	cbz	r2, 800bb5a <WM__InitIVRSearch+0x46>
 800bb4e:	f100 0308 	add.w	r3, r0, #8
 800bb52:	aa02      	add	r2, sp, #8
 800bb54:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb58:	e005      	b.n	800bb66 <WM__InitIVRSearch+0x52>
 800bb5a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bb5c:	f012 0802 	ands.w	r8, r2, #2
 800bb60:	d00a      	beq.n	800bb78 <WM__InitIVRSearch+0x64>
 800bb62:	c803      	ldmia	r0, {r0, r1}
 800bb64:	aa02      	add	r2, sp, #8
 800bb66:	e882 0003 	stmia.w	r2, {r0, r1}
 800bb6a:	ad02      	add	r5, sp, #8
 800bb6c:	b166      	cbz	r6, 800bb88 <WM__InitIVRSearch+0x74>
 800bb6e:	4628      	mov	r0, r5
 800bb70:	4631      	mov	r1, r6
 800bb72:	f001 fd49 	bl	800d608 <GUI__IntersectRect>
 800bb76:	e007      	b.n	800bb88 <WM__InitIVRSearch+0x74>
 800bb78:	696b      	ldr	r3, [r5, #20]
 800bb7a:	4668      	mov	r0, sp
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	616b      	str	r3, [r5, #20]
 800bb80:	f7fe fa48 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bb84:	4640      	mov	r0, r8
 800bb86:	e037      	b.n	800bbf8 <WM__InitIVRSearch+0xe4>
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	4e20      	ldr	r6, [pc, #128]	; (800bc0c <WM__InitIVRSearch+0xf8>)
 800bb8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb8e:	b1c2      	cbz	r2, 800bbc2 <WM__InitIVRSearch+0xae>
 800bb90:	9b00      	ldr	r3, [sp, #0]
 800bb92:	6810      	ldr	r0, [r2, #0]
 800bb94:	6851      	ldr	r1, [r2, #4]
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	ab04      	add	r3, sp, #16
 800bb9a:	c303      	stmia	r3!, {r0, r1}
 800bb9c:	6833      	ldr	r3, [r6, #0]
 800bb9e:	b133      	cbz	r3, 800bbae <WM__InitIVRSearch+0x9a>
 800bba0:	a801      	add	r0, sp, #4
 800bba2:	f7fe fa37 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bba6:	6830      	ldr	r0, [r6, #0]
 800bba8:	f7fe fa26 	bl	8009ff8 <GUI_ALLOC_LockH>
 800bbac:	9001      	str	r0, [sp, #4]
 800bbae:	9801      	ldr	r0, [sp, #4]
 800bbb0:	a904      	add	r1, sp, #16
 800bbb2:	f7ff fba5 	bl	800b300 <WM__Client2Screen>
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	a904      	add	r1, sp, #16
 800bbba:	f001 fd25 	bl	800d608 <GUI__IntersectRect>
 800bbbe:	a801      	add	r0, sp, #4
 800bbc0:	e000      	b.n	800bbc4 <WM__InitIVRSearch+0xb0>
 800bbc2:	4668      	mov	r0, sp
 800bbc4:	f7fe fa26 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bbc8:	6831      	ldr	r1, [r6, #0]
 800bbca:	b119      	cbz	r1, 800bbd4 <WM__InitIVRSearch+0xc0>
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f7ff faf9 	bl	800b1c4 <WM__ClipAtParentBorders>
 800bbd2:	b128      	cbz	r0, 800bbe0 <WM__InitIVRSearch+0xcc>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800bbda:	f7ff faf3 	bl	800b1c4 <WM__ClipAtParentBorders>
 800bbde:	b918      	cbnz	r0, 800bbe8 <WM__InitIVRSearch+0xd4>
 800bbe0:	6963      	ldr	r3, [r4, #20]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	6163      	str	r3, [r4, #20]
 800bbe6:	e007      	b.n	800bbf8 <WM__InitIVRSearch+0xe4>
 800bbe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bbec:	e884 0003 	stmia.w	r4, {r0, r1}
 800bbf0:	f7ff fece 	bl	800b990 <WM__GetNextIVR>
 800bbf4:	e000      	b.n	800bbf8 <WM__InitIVRSearch+0xe4>
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	b006      	add	sp, #24
 800bbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000020 	.word	0x20000020
 800bc04:	20022af4 	.word	0x20022af4
 800bc08:	20022fa9 	.word	0x20022fa9
 800bc0c:	20022f80 	.word	0x20022f80

0800bc10 <WM_SetDefault>:
 800bc10:	b508      	push	{r3, lr}
 800bc12:	f001 fea5 	bl	800d960 <GL_SetDefault>
 800bc16:	4b02      	ldr	r3, [pc, #8]	; (800bc20 <WM_SetDefault+0x10>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	645a      	str	r2, [r3, #68]	; 0x44
 800bc1e:	bd08      	pop	{r3, pc}
 800bc20:	20000020 	.word	0x20000020

0800bc24 <WM__Paint1>:
 800bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc26:	b089      	sub	sp, #36	; 0x24
 800bc28:	4604      	mov	r4, r0
 800bc2a:	f7fe f9e5 	bl	8009ff8 <GUI_ALLOC_LockH>
 800bc2e:	6907      	ldr	r7, [r0, #16]
 800bc30:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800bc32:	9001      	str	r0, [sp, #4]
 800bc34:	3008      	adds	r0, #8
 800bc36:	c803      	ldmia	r0, {r0, r1}
 800bc38:	ad02      	add	r5, sp, #8
 800bc3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800bc3e:	a801      	add	r0, sp, #4
 800bc40:	f7fe f9e8 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bc44:	2f00      	cmp	r7, #0
 800bc46:	d031      	beq.n	800bcac <WM__Paint1+0x88>
 800bc48:	07b3      	lsls	r3, r6, #30
 800bc4a:	d52f      	bpl.n	800bcac <WM__Paint1+0x88>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	212e      	movs	r1, #46	; 0x2e
 800bc50:	f002 f870 	bl	800dd34 <WM_SendMessageNoPara>
 800bc54:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <WM__Paint1+0x8c>)
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800bc5c:	f102 0201 	add.w	r2, r2, #1
 800bc60:	701a      	strb	r2, [r3, #0]
 800bc62:	461e      	mov	r6, r3
 800bc64:	d00a      	beq.n	800bc7c <WM__Paint1+0x58>
 800bc66:	230f      	movs	r3, #15
 800bc68:	9405      	str	r4, [sp, #20]
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	9507      	str	r5, [sp, #28]
 800bc6e:	f7ff ffcf 	bl	800bc10 <WM_SetDefault>
 800bc72:	4620      	mov	r0, r4
 800bc74:	a904      	add	r1, sp, #16
 800bc76:	f001 ffd5 	bl	800dc24 <WM__SendMessage>
 800bc7a:	e010      	b.n	800bc9e <WM__Paint1+0x7a>
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f7ff ff49 	bl	800bb14 <WM__InitIVRSearch>
 800bc82:	b160      	cbz	r0, 800bc9e <WM__Paint1+0x7a>
 800bc84:	230f      	movs	r3, #15
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	9405      	str	r4, [sp, #20]
 800bc8a:	9507      	str	r5, [sp, #28]
 800bc8c:	f7ff ffc0 	bl	800bc10 <WM_SetDefault>
 800bc90:	4620      	mov	r0, r4
 800bc92:	a904      	add	r1, sp, #16
 800bc94:	f001 ffc6 	bl	800dc24 <WM__SendMessage>
 800bc98:	f7ff fe7a 	bl	800b990 <WM__GetNextIVR>
 800bc9c:	e7f1      	b.n	800bc82 <WM__Paint1+0x5e>
 800bc9e:	7833      	ldrb	r3, [r6, #0]
 800bca0:	4620      	mov	r0, r4
 800bca2:	3b01      	subs	r3, #1
 800bca4:	212f      	movs	r1, #47	; 0x2f
 800bca6:	7033      	strb	r3, [r6, #0]
 800bca8:	f002 f844 	bl	800dd34 <WM_SendMessageNoPara>
 800bcac:	b009      	add	sp, #36	; 0x24
 800bcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcb0:	20022fa9 	.word	0x20022fa9

0800bcb4 <WM__Paint>:
 800bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb6:	b089      	sub	sp, #36	; 0x24
 800bcb8:	ac06      	add	r4, sp, #24
 800bcba:	9003      	str	r0, [sp, #12]
 800bcbc:	f7fe f99c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800bcc0:	f100 0208 	add.w	r2, r0, #8
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	9005      	str	r0, [sp, #20]
 800bcc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bccc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800bcce:	699e      	ldr	r6, [r3, #24]
 800bcd0:	691f      	ldr	r7, [r3, #16]
 800bcd2:	e884 0003 	stmia.w	r4, {r0, r1}
 800bcd6:	a805      	add	r0, sp, #20
 800bcd8:	f7fe f99c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bcdc:	f244 0320 	movw	r3, #16416	; 0x4020
 800bce0:	402b      	ands	r3, r5
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d034      	beq.n	800bd50 <WM__Paint+0x9c>
 800bce6:	b1bf      	cbz	r7, 800bd18 <WM__Paint+0x64>
 800bce8:	4620      	mov	r0, r4
 800bcea:	9903      	ldr	r1, [sp, #12]
 800bcec:	f7ff fa6a 	bl	800b1c4 <WM__ClipAtParentBorders>
 800bcf0:	b190      	cbz	r0, 800bd18 <WM__Paint+0x64>
 800bcf2:	9803      	ldr	r0, [sp, #12]
 800bcf4:	f7ff fcf8 	bl	800b6e8 <WM_SelectWindow>
 800bcf8:	0769      	lsls	r1, r5, #29
 800bcfa:	d50f      	bpl.n	800bd1c <WM__Paint+0x68>
 800bcfc:	b126      	cbz	r6, 800bd08 <WM__Paint+0x54>
 800bcfe:	f005 0501 	and.w	r5, r5, #1
 800bd02:	f085 0501 	eor.w	r5, r5, #1
 800bd06:	e000      	b.n	800bd0a <WM__Paint+0x56>
 800bd08:	2501      	movs	r5, #1
 800bd0a:	9500      	str	r5, [sp, #0]
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4912      	ldr	r1, [pc, #72]	; (800bd58 <WM__Paint+0xa4>)
 800bd10:	aa03      	add	r2, sp, #12
 800bd12:	2300      	movs	r3, #0
 800bd14:	f000 facc 	bl	800c2b0 <GUI_MEMDEV_Draw>
 800bd18:	2400      	movs	r4, #0
 800bd1a:	e003      	b.n	800bd24 <WM__Paint+0x70>
 800bd1c:	9803      	ldr	r0, [sp, #12]
 800bd1e:	f7ff f9e1 	bl	800b0e4 <WM__PaintWinAndOverlays>
 800bd22:	2401      	movs	r4, #1
 800bd24:	9803      	ldr	r0, [sp, #12]
 800bd26:	f7fe f967 	bl	8009ff8 <GUI_ALLOC_LockH>
 800bd2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bd2c:	9005      	str	r0, [sp, #20]
 800bd2e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800bd32:	f023 0320 	bic.w	r3, r3, #32
 800bd36:	0492      	lsls	r2, r2, #18
 800bd38:	bf48      	it	mi
 800bd3a:	f043 0304 	orrmi.w	r3, r3, #4
 800bd3e:	6283      	str	r3, [r0, #40]	; 0x28
 800bd40:	a805      	add	r0, sp, #20
 800bd42:	f7fe f967 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <WM__Paint+0xa8>)
 800bd48:	881a      	ldrh	r2, [r3, #0]
 800bd4a:	3a01      	subs	r2, #1
 800bd4c:	801a      	strh	r2, [r3, #0]
 800bd4e:	e000      	b.n	800bd52 <WM__Paint+0x9e>
 800bd50:	461c      	mov	r4, r3
 800bd52:	4620      	mov	r0, r4
 800bd54:	b009      	add	sp, #36	; 0x24
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd58:	0800b15d 	.word	0x0800b15d
 800bd5c:	20022f9c 	.word	0x20022f9c

0800bd60 <WM_Exec>:
 800bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	4b4c      	ldr	r3, [pc, #304]	; (800be98 <WM_Exec+0x138>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	b09f      	sub	sp, #124	; 0x7c
 800bd6a:	b103      	cbz	r3, 800bd6e <WM_Exec+0xe>
 800bd6c:	4798      	blx	r3
 800bd6e:	2600      	movs	r6, #0
 800bd70:	4d4a      	ldr	r5, [pc, #296]	; (800be9c <WM_Exec+0x13c>)
 800bd72:	682b      	ldr	r3, [r5, #0]
 800bd74:	b1db      	cbz	r3, 800bdae <WM_Exec+0x4e>
 800bd76:	4b4a      	ldr	r3, [pc, #296]	; (800bea0 <WM_Exec+0x140>)
 800bd78:	681c      	ldr	r4, [r3, #0]
 800bd7a:	b1bc      	cbz	r4, 800bdac <WM_Exec+0x4c>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f7fe f93b 	bl	8009ff8 <GUI_ALLOC_LockH>
 800bd82:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bd84:	6947      	ldr	r7, [r0, #20]
 800bd86:	ab1e      	add	r3, sp, #120	; 0x78
 800bd88:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800bd8c:	f843 0d70 	str.w	r0, [r3, #-112]!
 800bd90:	d007      	beq.n	800bda2 <WM_Exec+0x42>
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe f93e 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f7ff fd6f 	bl	800b87c <WM_DeleteWindow>
 800bd9e:	463c      	mov	r4, r7
 800bda0:	e7eb      	b.n	800bd7a <WM_Exec+0x1a>
 800bda2:	4618      	mov	r0, r3
 800bda4:	463c      	mov	r4, r7
 800bda6:	f7fe f935 	bl	800a014 <GUI_ALLOC_UnlockH>
 800bdaa:	e7e6      	b.n	800bd7a <WM_Exec+0x1a>
 800bdac:	602c      	str	r4, [r5, #0]
 800bdae:	4b3d      	ldr	r3, [pc, #244]	; (800bea4 <WM_Exec+0x144>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	b103      	cbz	r3, 800bdb6 <WM_Exec+0x56>
 800bdb4:	4798      	blx	r3
 800bdb6:	4b3c      	ldr	r3, [pc, #240]	; (800bea8 <WM_Exec+0x148>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	b92b      	cbnz	r3, 800bdc8 <WM_Exec+0x68>
 800bdbc:	4f3b      	ldr	r7, [pc, #236]	; (800beac <WM_Exec+0x14c>)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bdc4:	b143      	cbz	r3, 800bdd8 <WM_Exec+0x78>
 800bdc6:	e003      	b.n	800bdd0 <WM_Exec+0x70>
 800bdc8:	4798      	blx	r3
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d0f6      	beq.n	800bdbc <WM_Exec+0x5c>
 800bdce:	e058      	b.n	800be82 <WM_Exec+0x122>
 800bdd0:	f001 fe3e 	bl	800da50 <GUI_PollKeyMsg>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d154      	bne.n	800be82 <WM_Exec+0x122>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 800bdde:	b14d      	cbz	r5, 800bdf4 <WM_Exec+0x94>
 800bde0:	4b33      	ldr	r3, [pc, #204]	; (800beb0 <WM_Exec+0x150>)
 800bde2:	881d      	ldrh	r5, [r3, #0]
 800bde4:	b135      	cbz	r5, 800bdf4 <WM_Exec+0x94>
 800bde6:	4b33      	ldr	r3, [pc, #204]	; (800beb4 <WM_Exec+0x154>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d04b      	beq.n	800be86 <WM_Exec+0x126>
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4798      	blx	r3
 800bdf2:	2501      	movs	r5, #1
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bdfa:	b913      	cbnz	r3, 800be02 <WM_Exec+0xa2>
 800bdfc:	2d00      	cmp	r5, #0
 800bdfe:	d137      	bne.n	800be70 <WM_Exec+0x110>
 800be00:	e045      	b.n	800be8e <WM_Exec+0x12e>
 800be02:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800beb0 <WM_Exec+0x150>
 800be06:	f8b8 3000 	ldrh.w	r3, [r8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0f6      	beq.n	800bdfc <WM_Exec+0x9c>
 800be0e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800beb8 <WM_Exec+0x158>
 800be12:	f8d9 4000 	ldr.w	r4, [r9]
 800be16:	b90c      	cbnz	r4, 800be1c <WM_Exec+0xbc>
 800be18:	4b21      	ldr	r3, [pc, #132]	; (800bea0 <WM_Exec+0x140>)
 800be1a:	681c      	ldr	r4, [r3, #0]
 800be1c:	a802      	add	r0, sp, #8
 800be1e:	f001 fdd5 	bl	800d9cc <GUI_SaveContext_W>
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800be28:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800be2c:	b914      	cbnz	r4, 800be34 <WM_Exec+0xd4>
 800be2e:	2400      	movs	r4, #0
 800be30:	e00d      	b.n	800be4e <WM_Exec+0xee>
 800be32:	b963      	cbnz	r3, 800be4e <WM_Exec+0xee>
 800be34:	4620      	mov	r0, r4
 800be36:	f7ff ff3d 	bl	800bcb4 <WM__Paint>
 800be3a:	4603      	mov	r3, r0
 800be3c:	4620      	mov	r0, r4
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	f7fe f8d0 	bl	8009fe4 <GUI_ALLOC_h2p>
 800be44:	6944      	ldr	r4, [r0, #20]
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	2c00      	cmp	r4, #0
 800be4a:	d1f2      	bne.n	800be32 <WM_Exec+0xd2>
 800be4c:	e7ef      	b.n	800be2e <WM_Exec+0xce>
 800be4e:	4658      	mov	r0, fp
 800be50:	f8c9 4000 	str.w	r4, [r9]
 800be54:	f001 fda6 	bl	800d9a4 <GUI_SetColor>
 800be58:	4650      	mov	r0, sl
 800be5a:	f001 fda1 	bl	800d9a0 <GUI_SetBkColor>
 800be5e:	a802      	add	r0, sp, #8
 800be60:	f001 fdbe 	bl	800d9e0 <GUI_RestoreContext>
 800be64:	f8b8 3000 	ldrh.w	r3, [r8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0c7      	beq.n	800bdfc <WM_Exec+0x9c>
 800be6c:	2601      	movs	r6, #1
 800be6e:	e7c1      	b.n	800bdf4 <WM_Exec+0x94>
 800be70:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <WM_Exec+0x154>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	b110      	cbz	r0, 800be7c <WM_Exec+0x11c>
 800be76:	6843      	ldr	r3, [r0, #4]
 800be78:	4798      	blx	r3
 800be7a:	e008      	b.n	800be8e <WM_Exec+0x12e>
 800be7c:	f001 fb8a 	bl	800d594 <GUI__ManageCache>
 800be80:	e005      	b.n	800be8e <WM_Exec+0x12e>
 800be82:	2601      	movs	r6, #1
 800be84:	e774      	b.n	800bd70 <WM_Exec+0x10>
 800be86:	2001      	movs	r0, #1
 800be88:	f001 fb84 	bl	800d594 <GUI__ManageCache>
 800be8c:	e7b1      	b.n	800bdf2 <WM_Exec+0x92>
 800be8e:	4630      	mov	r0, r6
 800be90:	b01f      	add	sp, #124	; 0x7c
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	bf00      	nop
 800be98:	20022f90 	.word	0x20022f90
 800be9c:	20022af0 	.word	0x20022af0
 800bea0:	20022fa0 	.word	0x20022fa0
 800bea4:	20022f8c 	.word	0x20022f8c
 800bea8:	20022eb8 	.word	0x20022eb8
 800beac:	20000020 	.word	0x20000020
 800beb0:	20022f9c 	.word	0x20022f9c
 800beb4:	20022fbc 	.word	0x20022fbc
 800beb8:	20022b0c 	.word	0x20022b0c

0800bebc <WM_Activate>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	; (800bec8 <WM_Activate+0xc>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800bec6:	4770      	bx	lr
 800bec8:	20000020 	.word	0x20000020

0800becc <WM_Deactivate>:
 800becc:	4b03      	ldr	r3, [pc, #12]	; (800bedc <WM_Deactivate+0x10>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800bed6:	f7fc bf6f 	b.w	8008db8 <LCD_SetClipRectMax>
 800beda:	bf00      	nop
 800bedc:	20000020 	.word	0x20000020

0800bee0 <WM_DefaultProc>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	6840      	ldr	r0, [r0, #4]
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	68e1      	ldr	r1, [r4, #12]
 800beea:	2b17      	cmp	r3, #23
 800beec:	d00f      	beq.n	800bf0e <WM_DefaultProc+0x2e>
 800beee:	dc06      	bgt.n	800befe <WM_DefaultProc+0x1e>
 800bef0:	2b0e      	cmp	r3, #14
 800bef2:	d00e      	beq.n	800bf12 <WM_DefaultProc+0x32>
 800bef4:	2b14      	cmp	r3, #20
 800bef6:	d114      	bne.n	800bf22 <WM_DefaultProc+0x42>
 800bef8:	f001 ffd6 	bl	800dea8 <WM__GetClientRectEx>
 800befc:	e011      	b.n	800bf22 <WM_DefaultProc+0x42>
 800befe:	2b22      	cmp	r3, #34	; 0x22
 800bf00:	d00c      	beq.n	800bf1c <WM_DefaultProc+0x3c>
 800bf02:	2b28      	cmp	r3, #40	; 0x28
 800bf04:	d10d      	bne.n	800bf22 <WM_DefaultProc+0x42>
 800bf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf0a:	f7ff bbcc 	b.w	800b6a6 <WM_InvalidateWindow>
 800bf0e:	60e0      	str	r0, [r4, #12]
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	4621      	mov	r1, r4
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	f001 befe 	b.w	800dd18 <WM_SendToParent>
 800bf1c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800bf20:	e000      	b.n	800bf24 <WM_DefaultProc+0x44>
 800bf22:	2300      	movs	r3, #0
 800bf24:	60e3      	str	r3, [r4, #12]
 800bf26:	bd10      	pop	{r4, pc}

0800bf28 <_cbBackWin>:
 800bf28:	6803      	ldr	r3, [r0, #0]
 800bf2a:	2b0e      	cmp	r3, #14
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	4604      	mov	r4, r0
 800bf30:	d002      	beq.n	800bf38 <_cbBackWin+0x10>
 800bf32:	2b0f      	cmp	r3, #15
 800bf34:	d009      	beq.n	800bf4a <_cbBackWin+0x22>
 800bf36:	e020      	b.n	800bf7a <_cbBackWin+0x52>
 800bf38:	68c3      	ldr	r3, [r0, #12]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	2a01      	cmp	r2, #1
 800bf3e:	d121      	bne.n	800bf84 <_cbBackWin+0x5c>
 800bf40:	6818      	ldr	r0, [r3, #0]
 800bf42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf46:	f001 bd7b 	b.w	800da40 <GUI_StoreKey>
 800bf4a:	4a0f      	ldr	r2, [pc, #60]	; (800bf88 <_cbBackWin+0x60>)
 800bf4c:	6843      	ldr	r3, [r0, #4]
 800bf4e:	6811      	ldr	r1, [r2, #0]
 800bf50:	428b      	cmp	r3, r1
 800bf52:	d006      	beq.n	800bf62 <_cbBackWin+0x3a>
 800bf54:	6852      	ldr	r2, [r2, #4]
 800bf56:	4293      	cmp	r3, r2
 800bf58:	bf14      	ite	ne
 800bf5a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800bf5e:	2301      	moveq	r3, #1
 800bf60:	e000      	b.n	800bf64 <_cbBackWin+0x3c>
 800bf62:	2300      	movs	r3, #0
 800bf64:	4a09      	ldr	r2, [pc, #36]	; (800bf8c <_cbBackWin+0x64>)
 800bf66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf6a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800bf6e:	4298      	cmp	r0, r3
 800bf70:	d003      	beq.n	800bf7a <_cbBackWin+0x52>
 800bf72:	f001 fd15 	bl	800d9a0 <GUI_SetBkColor>
 800bf76:	f7fd fddf 	bl	8009b38 <GUI_Clear>
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f7ff bfae 	b.w	800bee0 <WM_DefaultProc>
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	20022f84 	.word	0x20022f84
 800bf8c:	20022fb0 	.word	0x20022fb0

0800bf90 <WM_Init>:
 800bf90:	b530      	push	{r4, r5, lr}
 800bf92:	4b2b      	ldr	r3, [pc, #172]	; (800c040 <WM_Init+0xb0>)
 800bf94:	7818      	ldrb	r0, [r3, #0]
 800bf96:	b085      	sub	sp, #20
 800bf98:	461d      	mov	r5, r3
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d14d      	bne.n	800c03a <WM_Init+0xaa>
 800bf9e:	4b29      	ldr	r3, [pc, #164]	; (800c044 <WM_Init+0xb4>)
 800bfa0:	6018      	str	r0, [r3, #0]
 800bfa2:	4b29      	ldr	r3, [pc, #164]	; (800c048 <WM_Init+0xb8>)
 800bfa4:	6018      	str	r0, [r3, #0]
 800bfa6:	4b29      	ldr	r3, [pc, #164]	; (800c04c <WM_Init+0xbc>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	6458      	str	r0, [r3, #68]	; 0x44
 800bfac:	4b28      	ldr	r3, [pc, #160]	; (800c050 <WM_Init+0xc0>)
 800bfae:	8018      	strh	r0, [r3, #0]
 800bfb0:	4b28      	ldr	r3, [pc, #160]	; (800c054 <WM_Init+0xc4>)
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	8018      	strh	r0, [r3, #0]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f7fd fc8e 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800bfbc:	b1c0      	cbz	r0, 800bff0 <WM_Init+0x60>
 800bfbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	e88d 000c 	stmia.w	sp, {r2, r3}
 800bfc8:	2000      	movs	r0, #0
 800bfca:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800bfce:	4b22      	ldr	r3, [pc, #136]	; (800c058 <WM_Init+0xc8>)
 800bfd0:	9302      	str	r3, [sp, #8]
 800bfd2:	9003      	str	r0, [sp, #12]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	f7ff fba6 	bl	800b728 <WM_CreateWindowAsChild>
 800bfdc:	4b1f      	ldr	r3, [pc, #124]	; (800c05c <WM_Init+0xcc>)
 800bfde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bfe2:	4b1f      	ldr	r3, [pc, #124]	; (800c060 <WM_Init+0xd0>)
 800bfe4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800bfe8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bfec:	f7ff fb5b 	bl	800b6a6 <WM_InvalidateWindow>
 800bff0:	3401      	adds	r4, #1
 800bff2:	2c02      	cmp	r4, #2
 800bff4:	d1df      	bne.n	800bfb6 <WM_Init+0x26>
 800bff6:	481b      	ldr	r0, [pc, #108]	; (800c064 <WM_Init+0xd4>)
 800bff8:	f001 ff68 	bl	800decc <WM__AddCriticalHandle>
 800bffc:	481a      	ldr	r0, [pc, #104]	; (800c068 <WM_Init+0xd8>)
 800bffe:	f001 ff65 	bl	800decc <WM__AddCriticalHandle>
 800c002:	481a      	ldr	r0, [pc, #104]	; (800c06c <WM_Init+0xdc>)
 800c004:	f001 ff62 	bl	800decc <WM__AddCriticalHandle>
 800c008:	4819      	ldr	r0, [pc, #100]	; (800c070 <WM_Init+0xe0>)
 800c00a:	f001 ff5f 	bl	800decc <WM__AddCriticalHandle>
 800c00e:	4819      	ldr	r0, [pc, #100]	; (800c074 <WM_Init+0xe4>)
 800c010:	f001 ff5c 	bl	800decc <WM__AddCriticalHandle>
 800c014:	4818      	ldr	r0, [pc, #96]	; (800c078 <WM_Init+0xe8>)
 800c016:	f001 ff59 	bl	800decc <WM__AddCriticalHandle>
 800c01a:	4b10      	ldr	r3, [pc, #64]	; (800c05c <WM_Init+0xcc>)
 800c01c:	6818      	ldr	r0, [r3, #0]
 800c01e:	f7ff fb63 	bl	800b6e8 <WM_SelectWindow>
 800c022:	f7ff ff4b 	bl	800bebc <WM_Activate>
 800c026:	2301      	movs	r3, #1
 800c028:	702b      	strb	r3, [r5, #0]
 800c02a:	4814      	ldr	r0, [pc, #80]	; (800c07c <WM_Init+0xec>)
 800c02c:	4b14      	ldr	r3, [pc, #80]	; (800c080 <WM_Init+0xf0>)
 800c02e:	6003      	str	r3, [r0, #0]
 800c030:	b005      	add	sp, #20
 800c032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c036:	f7fd bd8f 	b.w	8009b58 <GUI__RegisterExit>
 800c03a:	b005      	add	sp, #20
 800c03c:	bd30      	pop	{r4, r5, pc}
 800c03e:	bf00      	nop
 800c040:	20022b18 	.word	0x20022b18
 800c044:	20022fa0 	.word	0x20022fa0
 800c048:	20022b0c 	.word	0x20022b0c
 800c04c:	20000020 	.word	0x20000020
 800c050:	20022f9c 	.word	0x20022f9c
 800c054:	20022f7c 	.word	0x20022f7c
 800c058:	0800bf29 	.word	0x0800bf29
 800c05c:	20022f84 	.word	0x20022f84
 800c060:	20022fb0 	.word	0x20022fb0
 800c064:	20022ff0 	.word	0x20022ff0
 800c068:	20022fe0 	.word	0x20022fe0
 800c06c:	20022fd0 	.word	0x20022fd0
 800c070:	20022ff8 	.word	0x20022ff8
 800c074:	20022fe8 	.word	0x20022fe8
 800c078:	20022fd8 	.word	0x20022fd8
 800c07c:	20022b10 	.word	0x20022b10
 800c080:	0800ad79 	.word	0x0800ad79

0800c084 <_CreateStaticDevice>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	b087      	sub	sp, #28
 800c08a:	4604      	mov	r4, r0
 800c08c:	f7fd ffb4 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c090:	af06      	add	r7, sp, #24
 800c092:	f8b0 8000 	ldrh.w	r8, [r0]
 800c096:	8886      	ldrh	r6, [r0, #4]
 800c098:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800c09c:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800c0a0:	f847 0d04 	str.w	r0, [r7, #-4]!
 800c0a4:	fa0f f888 	sxth.w	r8, r8
 800c0a8:	b236      	sxth	r6, r6
 800c0aa:	ebc8 0606 	rsb	r6, r8, r6
 800c0ae:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800c0b2:	3601      	adds	r6, #1
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	fa0f f989 	sxth.w	r9, r9
 800c0ba:	fa0f f58b 	sxth.w	r5, fp
 800c0be:	f7fd ffa9 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c0c2:	ebc9 0505 	rsb	r5, r9, r5
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	f105 0501 	add.w	r5, r5, #1
 800c0cc:	dd4d      	ble.n	800c16a <_CreateStaticDevice+0xe6>
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	dd4b      	ble.n	800c16a <_CreateStaticDevice+0xe6>
 800c0d2:	f1ba 0f00 	cmp.w	sl, #0
 800c0d6:	d04a      	beq.n	800c16e <_CreateStaticDevice+0xea>
 800c0d8:	4650      	mov	r0, sl
 800c0da:	f7fd ff8d 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c0de:	ab06      	add	r3, sp, #24
 800c0e0:	8886      	ldrh	r6, [r0, #4]
 800c0e2:	f843 0d08 	str.w	r0, [r3, #-8]!
 800c0e6:	88c5      	ldrh	r5, [r0, #6]
 800c0e8:	b236      	sxth	r6, r6
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd ff92 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c0f0:	4546      	cmp	r6, r8
 800c0f2:	d102      	bne.n	800c0fa <_CreateStaticDevice+0x76>
 800c0f4:	b22d      	sxth	r5, r5
 800c0f6:	454d      	cmp	r5, r9
 800c0f8:	d032      	beq.n	800c160 <_CreateStaticDevice+0xdc>
 800c0fa:	4650      	mov	r0, sl
 800c0fc:	4641      	mov	r1, r8
 800c0fe:	464a      	mov	r2, r9
 800c100:	f000 f886 	bl	800c210 <GUI_MEMDEV_SetOrg>
 800c104:	e02c      	b.n	800c160 <_CreateStaticDevice+0xdc>
 800c106:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c10c:	6283      	str	r3, [r0, #40]	; 0x28
 800c10e:	4638      	mov	r0, r7
 800c110:	f7fd ff80 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c114:	4640      	mov	r0, r8
 800c116:	f000 ff93 	bl	800d040 <GUI_MEMDEV_Select>
 800c11a:	4607      	mov	r7, r0
 800c11c:	4650      	mov	r0, sl
 800c11e:	f001 fc43 	bl	800d9a8 <GUI__AlphaPreserveTrans>
 800c122:	4640      	mov	r0, r8
 800c124:	f000 f8b4 	bl	800c290 <GUI_MEMDEV_GetDataPtr>
 800c128:	4b2d      	ldr	r3, [pc, #180]	; (800c1e0 <_CreateStaticDevice+0x15c>)
 800c12a:	fb05 f206 	mul.w	r2, r5, r6
 800c12e:	7819      	ldrb	r1, [r3, #0]
 800c130:	4d2c      	ldr	r5, [pc, #176]	; (800c1e4 <_CreateStaticDevice+0x160>)
 800c132:	4e2d      	ldr	r6, [pc, #180]	; (800c1e8 <_CreateStaticDevice+0x164>)
 800c134:	0092      	lsls	r2, r2, #2
 800c136:	f7fc ff01 	bl	8008f3c <GUI__memset>
 800c13a:	4620      	mov	r0, r4
 800c13c:	f8d5 8000 	ldr.w	r8, [r5]
 800c140:	6034      	str	r4, [r6, #0]
 800c142:	f001 fea1 	bl	800de88 <WM_GetWindowOrgX>
 800c146:	6028      	str	r0, [r5, #0]
 800c148:	4620      	mov	r0, r4
 800c14a:	f7ff fd6b 	bl	800bc24 <WM__Paint1>
 800c14e:	2000      	movs	r0, #0
 800c150:	f8c5 8000 	str.w	r8, [r5]
 800c154:	6030      	str	r0, [r6, #0]
 800c156:	f001 fc27 	bl	800d9a8 <GUI__AlphaPreserveTrans>
 800c15a:	4638      	mov	r0, r7
 800c15c:	f000 ff70 	bl	800d040 <GUI_MEMDEV_Select>
 800c160:	4620      	mov	r0, r4
 800c162:	f7fd ff3f 	bl	8009fe4 <GUI_ALLOC_h2p>
 800c166:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c168:	e037      	b.n	800c1da <_CreateStaticDevice+0x156>
 800c16a:	2000      	movs	r0, #0
 800c16c:	e035      	b.n	800c1da <_CreateStaticDevice+0x156>
 800c16e:	f7fe fdf7 	bl	800ad60 <WM_GetDesktopWindow>
 800c172:	4284      	cmp	r4, r0
 800c174:	d112      	bne.n	800c19c <_CreateStaticDevice+0x118>
 800c176:	f7fc fa3d 	bl	80085f4 <LCD_GetXSize>
 800c17a:	4682      	mov	sl, r0
 800c17c:	f7fc fa42 	bl	8008604 <LCD_GetYSize>
 800c180:	4556      	cmp	r6, sl
 800c182:	dc02      	bgt.n	800c18a <_CreateStaticDevice+0x106>
 800c184:	4285      	cmp	r5, r0
 800c186:	dd09      	ble.n	800c19c <_CreateStaticDevice+0x118>
 800c188:	e000      	b.n	800c18c <_CreateStaticDevice+0x108>
 800c18a:	4656      	mov	r6, sl
 800c18c:	4285      	cmp	r5, r0
 800c18e:	bfa8      	it	ge
 800c190:	4605      	movge	r5, r0
 800c192:	4631      	mov	r1, r6
 800c194:	4620      	mov	r0, r4
 800c196:	462a      	mov	r2, r5
 800c198:	f001 fd9a 	bl	800dcd0 <WM_SetSize>
 800c19c:	4b13      	ldr	r3, [pc, #76]	; (800c1ec <_CreateStaticDevice+0x168>)
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	f04f 0a01 	mov.w	sl, #1
 800c1a4:	4b12      	ldr	r3, [pc, #72]	; (800c1f0 <_CreateStaticDevice+0x16c>)
 800c1a6:	9302      	str	r3, [sp, #8]
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	4649      	mov	r1, r9
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	462b      	mov	r3, r5
 800c1b0:	f8cd a000 	str.w	sl, [sp]
 800c1b4:	f000 fe4e 	bl	800ce54 <GUI_MEMDEV__CreateFixed>
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f7fd ff1c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c1c0:	9005      	str	r0, [sp, #20]
 800c1c2:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	d19c      	bne.n	800c106 <_CreateStaticDevice+0x82>
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	f7fd ff21 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff fd26 	bl	800bc24 <WM__Paint1>
 800c1d8:	4640      	mov	r0, r8
 800c1da:	b007      	add	sp, #28
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	2000002c 	.word	0x2000002c
 800c1e4:	20022e84 	.word	0x20022e84
 800c1e8:	20022fc8 	.word	0x20022fc8
 800c1ec:	0808042c 	.word	0x0808042c
 800c1f0:	080807e0 	.word	0x080807e0

0800c1f4 <GUI_MEMDEV_Paint1Static>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	2405      	movs	r4, #5
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f7ff ff42 	bl	800c084 <_CreateStaticDevice>
 800c200:	b910      	cbnz	r0, 800c208 <GUI_MEMDEV_Paint1Static+0x14>
 800c202:	3c01      	subs	r4, #1
 800c204:	d1f9      	bne.n	800c1fa <GUI_MEMDEV_Paint1Static+0x6>
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c20c:	f002 bb74 	b.w	800e8f8 <GUI_MEMDEV_Write>

0800c210 <GUI_MEMDEV_SetOrg>:
 800c210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c212:	460d      	mov	r5, r1
 800c214:	4614      	mov	r4, r2
 800c216:	b918      	cbnz	r0, 800c220 <GUI_MEMDEV_SetOrg+0x10>
 800c218:	4b11      	ldr	r3, [pc, #68]	; (800c260 <GUI_MEMDEV_SetOrg+0x50>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c21e:	b1e8      	cbz	r0, 800c25c <GUI_MEMDEV_SetOrg+0x4c>
 800c220:	f7fd feea 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c224:	b2a4      	uxth	r4, r4
 800c226:	b2ad      	uxth	r5, r5
 800c228:	80c4      	strh	r4, [r0, #6]
 800c22a:	8085      	strh	r5, [r0, #4]
 800c22c:	9000      	str	r0, [sp, #0]
 800c22e:	f7fc fdc3 	bl	8008db8 <LCD_SetClipRectMax>
 800c232:	9b00      	ldr	r3, [sp, #0]
 800c234:	6958      	ldr	r0, [r3, #20]
 800c236:	b170      	cbz	r0, 800c256 <GUI_MEMDEV_SetOrg+0x46>
 800c238:	f7fd fede 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c23c:	9b00      	ldr	r3, [sp, #0]
 800c23e:	9001      	str	r0, [sp, #4]
 800c240:	891a      	ldrh	r2, [r3, #8]
 800c242:	895b      	ldrh	r3, [r3, #10]
 800c244:	8082      	strh	r2, [r0, #4]
 800c246:	80c3      	strh	r3, [r0, #6]
 800c248:	b112      	cbz	r2, 800c250 <GUI_MEMDEV_SetOrg+0x40>
 800c24a:	b10b      	cbz	r3, 800c250 <GUI_MEMDEV_SetOrg+0x40>
 800c24c:	8005      	strh	r5, [r0, #0]
 800c24e:	8044      	strh	r4, [r0, #2]
 800c250:	a801      	add	r0, sp, #4
 800c252:	f7fd fedf 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c256:	4668      	mov	r0, sp
 800c258:	f7fd fedc 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c25c:	b003      	add	sp, #12
 800c25e:	bd30      	pop	{r4, r5, pc}
 800c260:	20000020 	.word	0x20000020

0800c264 <GUI_MEMDEV_GetYSize>:
 800c264:	b513      	push	{r0, r1, r4, lr}
 800c266:	b920      	cbnz	r0, 800c272 <GUI_MEMDEV_GetYSize+0xe>
 800c268:	4b08      	ldr	r3, [pc, #32]	; (800c28c <GUI_MEMDEV_GetYSize+0x28>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c26e:	4604      	mov	r4, r0
 800c270:	b148      	cbz	r0, 800c286 <GUI_MEMDEV_GetYSize+0x22>
 800c272:	f7fd fec1 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c276:	ab02      	add	r3, sp, #8
 800c278:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800c27c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c280:	4618      	mov	r0, r3
 800c282:	f7fd fec7 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c286:	4620      	mov	r0, r4
 800c288:	b002      	add	sp, #8
 800c28a:	bd10      	pop	{r4, pc}
 800c28c:	20000020 	.word	0x20000020

0800c290 <GUI_MEMDEV_GetDataPtr>:
 800c290:	b513      	push	{r0, r1, r4, lr}
 800c292:	b150      	cbz	r0, 800c2aa <GUI_MEMDEV_GetDataPtr+0x1a>
 800c294:	f7fd feb0 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c298:	4604      	mov	r4, r0
 800c29a:	a802      	add	r0, sp, #8
 800c29c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800c2a0:	f7fd feb8 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c2a4:	f104 0018 	add.w	r0, r4, #24
 800c2a8:	e7ff      	b.n	800c2aa <GUI_MEMDEV_GetDataPtr+0x1a>
 800c2aa:	b002      	add	sp, #8
 800c2ac:	bd10      	pop	{r4, pc}
	...

0800c2b0 <GUI_MEMDEV_Draw>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	461e      	mov	r6, r3
 800c2b6:	b089      	sub	sp, #36	; 0x24
 800c2b8:	4b4e      	ldr	r3, [pc, #312]	; (800c3f4 <GUI_MEMDEV_Draw+0x144>)
 800c2ba:	9204      	str	r2, [sp, #16]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	9103      	str	r1, [sp, #12]
 800c2c0:	7c54      	ldrb	r4, [r2, #17]
 800c2c2:	4a4d      	ldr	r2, [pc, #308]	; (800c3f8 <GUI_MEMDEV_Draw+0x148>)
 800c2c4:	5712      	ldrsb	r2, [r2, r4]
 800c2c6:	2a01      	cmp	r2, #1
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	469b      	mov	fp, r3
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	dd06      	ble.n	800c2de <GUI_MEMDEV_Draw+0x2e>
 800c2d0:	f7fc f974 	bl	80085bc <LCD_GetXSizeEx>
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f7fc f973 	bl	80085c2 <LCD_GetYSizeEx>
 800c2dc:	e005      	b.n	800c2ea <GUI_MEMDEV_Draw+0x3a>
 800c2de:	f7fc f973 	bl	80085c8 <LCD_GetVXSizeEx>
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f7fc f972 	bl	80085ce <LCD_GetVYSizeEx>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	b325      	cbz	r5, 800c338 <GUI_MEMDEV_Draw+0x88>
 800c2ee:	a806      	add	r0, sp, #24
 800c2f0:	a907      	add	r1, sp, #28
 800c2f2:	f001 fc0d 	bl	800db10 <GUI_GetOrg>
 800c2f6:	9b06      	ldr	r3, [sp, #24]
 800c2f8:	f9b5 a000 	ldrsh.w	sl, [r5]
 800c2fc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c300:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800c304:	441f      	add	r7, r3
 800c306:	9b07      	ldr	r3, [sp, #28]
 800c308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c30c:	3f01      	subs	r7, #1
 800c30e:	4297      	cmp	r7, r2
 800c310:	bfd4      	ite	le
 800c312:	ebca 0707 	rsble	r7, sl, r7
 800c316:	ebca 0702 	rsbgt	r7, sl, r2
 800c31a:	441c      	add	r4, r3
 800c31c:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800c320:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800c324:	3c01      	subs	r4, #1
 800c326:	4294      	cmp	r4, r2
 800c328:	bfd4      	ite	le
 800c32a:	ebc8 0404 	rsble	r4, r8, r4
 800c32e:	ebc8 0402 	rsbgt	r4, r8, r2
 800c332:	3701      	adds	r7, #1
 800c334:	3401      	adds	r4, #1
 800c336:	e001      	b.n	800c33c <GUI_MEMDEV_Draw+0x8c>
 800c338:	46a8      	mov	r8, r5
 800c33a:	46aa      	mov	sl, r5
 800c33c:	b906      	cbnz	r6, 800c340 <GUI_MEMDEV_Draw+0x90>
 800c33e:	4266      	negs	r6, r4
 800c340:	2f00      	cmp	r7, #0
 800c342:	dd52      	ble.n	800c3ea <GUI_MEMDEV_Draw+0x13a>
 800c344:	2c00      	cmp	r4, #0
 800c346:	dd50      	ble.n	800c3ea <GUI_MEMDEV_Draw+0x13a>
 800c348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	4650      	mov	r0, sl
 800c34e:	4641      	mov	r1, r8
 800c350:	463a      	mov	r2, r7
 800c352:	4633      	mov	r3, r6
 800c354:	f000 fe38 	bl	800cfc8 <GUI_MEMDEV_CreateEx>
 800c358:	4605      	mov	r5, r0
 800c35a:	b920      	cbnz	r0, 800c366 <GUI_MEMDEV_Draw+0xb6>
 800c35c:	9804      	ldr	r0, [sp, #16]
 800c35e:	9b03      	ldr	r3, [sp, #12]
 800c360:	4798      	blx	r3
 800c362:	2001      	movs	r0, #1
 800c364:	e042      	b.n	800c3ec <GUI_MEMDEV_Draw+0x13c>
 800c366:	f7ff ff7d 	bl	800c264 <GUI_MEMDEV_GetYSize>
 800c36a:	42a0      	cmp	r0, r4
 800c36c:	4606      	mov	r6, r0
 800c36e:	d006      	beq.n	800c37e <GUI_MEMDEV_Draw+0xce>
 800c370:	f8db 3000 	ldr.w	r3, [fp]
 800c374:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c376:	b110      	cbz	r0, 800c37e <GUI_MEMDEV_Draw+0xce>
 800c378:	2132      	movs	r1, #50	; 0x32
 800c37a:	f001 fc3e 	bl	800dbfa <WM__SendMessageNoPara>
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 fe5e 	bl	800d040 <GUI_MEMDEV_Select>
 800c384:	4273      	negs	r3, r6
 800c386:	9305      	str	r3, [sp, #20]
 800c388:	46a1      	mov	r9, r4
 800c38a:	2700      	movs	r7, #0
 800c38c:	45b1      	cmp	r9, r6
 800c38e:	da03      	bge.n	800c398 <GUI_MEMDEV_Draw+0xe8>
 800c390:	4628      	mov	r0, r5
 800c392:	4649      	mov	r1, r9
 800c394:	f002 fbb0 	bl	800eaf8 <GUI_MEMDEV_ReduceYSize>
 800c398:	b147      	cbz	r7, 800c3ac <GUI_MEMDEV_Draw+0xfc>
 800c39a:	4628      	mov	r0, r5
 800c39c:	4651      	mov	r1, sl
 800c39e:	eb07 0208 	add.w	r2, r7, r8
 800c3a2:	f7ff ff35 	bl	800c210 <GUI_MEMDEV_SetOrg>
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f002 fbbc 	bl	800eb24 <GUI_MEMDEV_Clear>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	9804      	ldr	r0, [sp, #16]
 800c3b0:	4798      	blx	r3
 800c3b2:	4b12      	ldr	r3, [pc, #72]	; (800c3fc <GUI_MEMDEV_Draw+0x14c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	b10b      	cbz	r3, 800c3bc <GUI_MEMDEV_Draw+0x10c>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	4798      	blx	r3
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f000 feb7 	bl	800d130 <GUI_MEMDEV_CopyToLCD>
 800c3c2:	4437      	add	r7, r6
 800c3c4:	9b05      	ldr	r3, [sp, #20]
 800c3c6:	42a7      	cmp	r7, r4
 800c3c8:	4499      	add	r9, r3
 800c3ca:	dbdf      	blt.n	800c38c <GUI_MEMDEV_Draw+0xdc>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f000 fdd9 	bl	800cf84 <GUI_MEMDEV_Delete>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	f000 fe34 	bl	800d040 <GUI_MEMDEV_Select>
 800c3d8:	42a6      	cmp	r6, r4
 800c3da:	d006      	beq.n	800c3ea <GUI_MEMDEV_Draw+0x13a>
 800c3dc:	f8db 3000 	ldr.w	r3, [fp]
 800c3e0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c3e2:	b110      	cbz	r0, 800c3ea <GUI_MEMDEV_Draw+0x13a>
 800c3e4:	2133      	movs	r1, #51	; 0x33
 800c3e6:	f001 fc08 	bl	800dbfa <WM__SendMessageNoPara>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	b009      	add	sp, #36	; 0x24
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000020 	.word	0x20000020
 800c3f8:	20022e7c 	.word	0x20022e7c
 800c3fc:	20022b1c 	.word	0x20022b1c

0800c400 <_GetDevData>:
 800c400:	4802      	ldr	r0, [pc, #8]	; (800c40c <_GetDevData+0xc>)
 800c402:	2901      	cmp	r1, #1
 800c404:	bf18      	it	ne
 800c406:	2000      	movne	r0, #0
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	0808042c 	.word	0x0808042c

0800c410 <_GetDevFunc>:
 800c410:	4802      	ldr	r0, [pc, #8]	; (800c41c <_GetDevFunc+0xc>)
 800c412:	2916      	cmp	r1, #22
 800c414:	bf18      	it	ne
 800c416:	2000      	movne	r0, #0
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	0800e709 	.word	0x0800e709

0800c420 <_GetDevProp>:
 800c420:	2908      	cmp	r1, #8
 800c422:	bf0c      	ite	eq
 800c424:	2020      	moveq	r0, #32
 800c426:	2000      	movne	r0, #0
 800c428:	4770      	bx	lr

0800c42a <_SetOrg>:
 800c42a:	b508      	push	{r3, lr}
 800c42c:	6800      	ldr	r0, [r0, #0]
 800c42e:	68c3      	ldr	r3, [r0, #12]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	4798      	blx	r3
 800c434:	bd08      	pop	{r3, pc}

0800c436 <_GetRect>:
 800c436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c438:	6880      	ldr	r0, [r0, #8]
 800c43a:	460c      	mov	r4, r1
 800c43c:	f7fd fddc 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c440:	4603      	mov	r3, r0
 800c442:	a802      	add	r0, sp, #8
 800c444:	8899      	ldrh	r1, [r3, #4]
 800c446:	88da      	ldrh	r2, [r3, #6]
 800c448:	891d      	ldrh	r5, [r3, #8]
 800c44a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c44e:	895b      	ldrh	r3, [r3, #10]
 800c450:	8021      	strh	r1, [r4, #0]
 800c452:	8062      	strh	r2, [r4, #2]
 800c454:	4429      	add	r1, r5
 800c456:	441a      	add	r2, r3
 800c458:	3901      	subs	r1, #1
 800c45a:	3a01      	subs	r2, #1
 800c45c:	80a1      	strh	r1, [r4, #4]
 800c45e:	80e2      	strh	r2, [r4, #6]
 800c460:	f7fd fdd8 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c464:	b003      	add	sp, #12
 800c466:	bd30      	pop	{r4, r5, pc}

0800c468 <_XY2PTR>:
 800c468:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <_XY2PTR+0x3c>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c46e:	4605      	mov	r5, r0
 800c470:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c472:	460e      	mov	r6, r1
 800c474:	f7fd fdc0 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c478:	4603      	mov	r3, r0
 800c47a:	a802      	add	r0, sp, #8
 800c47c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800c480:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c484:	f103 0118 	add.w	r1, r3, #24
 800c488:	1b36      	subs	r6, r6, r4
 800c48a:	68dc      	ldr	r4, [r3, #12]
 800c48c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c490:	fb04 1406 	mla	r4, r4, r6, r1
 800c494:	1aed      	subs	r5, r5, r3
 800c496:	f7fd fdbd 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c49a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c49e:	4620      	mov	r0, r4
 800c4a0:	b002      	add	sp, #8
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	20000020 	.word	0x20000020

0800c4a8 <_GetPixelIndex>:
 800c4a8:	b508      	push	{r3, lr}
 800c4aa:	4608      	mov	r0, r1
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	f7ff ffdb 	bl	800c468 <_XY2PTR>
 800c4b2:	6800      	ldr	r0, [r0, #0]
 800c4b4:	bd08      	pop	{r3, pc}
	...

0800c4b8 <_XorPixel>:
 800c4b8:	4b15      	ldr	r3, [pc, #84]	; (800c510 <_XorPixel+0x58>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c4c0:	4615      	mov	r5, r2
 800c4c2:	460e      	mov	r6, r1
 800c4c4:	f7fd fd98 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	9000      	str	r0, [sp, #0]
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7ff ffcb 	bl	800c468 <_XY2PTR>
 800c4d2:	9b00      	ldr	r3, [sp, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	4604      	mov	r4, r0
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	4798      	blx	r3
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	4058      	eors	r0, r3
 800c4e2:	9b00      	ldr	r3, [sp, #0]
 800c4e4:	6020      	str	r0, [r4, #0]
 800c4e6:	6958      	ldr	r0, [r3, #20]
 800c4e8:	b160      	cbz	r0, 800c504 <_XorPixel+0x4c>
 800c4ea:	f7fd fd85 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c4ee:	ac02      	add	r4, sp, #8
 800c4f0:	6883      	ldr	r3, [r0, #8]
 800c4f2:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	4798      	blx	r3
 800c4fe:	4620      	mov	r0, r4
 800c500:	f7fd fd88 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c504:	4668      	mov	r0, sp
 800c506:	f7fd fd85 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c50a:	b002      	add	sp, #8
 800c50c:	bd70      	pop	{r4, r5, r6, pc}
 800c50e:	bf00      	nop
 800c510:	20000020 	.word	0x20000020

0800c514 <_SetPixelIndex>:
 800c514:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c516:	461c      	mov	r4, r3
 800c518:	4b10      	ldr	r3, [pc, #64]	; (800c55c <_SetPixelIndex+0x48>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c51e:	460e      	mov	r6, r1
 800c520:	4615      	mov	r5, r2
 800c522:	f7fd fd69 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c526:	4629      	mov	r1, r5
 800c528:	9000      	str	r0, [sp, #0]
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7ff ff9c 	bl	800c468 <_XY2PTR>
 800c530:	9b00      	ldr	r3, [sp, #0]
 800c532:	6004      	str	r4, [r0, #0]
 800c534:	6958      	ldr	r0, [r3, #20]
 800c536:	b160      	cbz	r0, 800c552 <_SetPixelIndex+0x3e>
 800c538:	f7fd fd5e 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c53c:	ac02      	add	r4, sp, #8
 800c53e:	6883      	ldr	r3, [r0, #8]
 800c540:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4631      	mov	r1, r6
 800c548:	462a      	mov	r2, r5
 800c54a:	4798      	blx	r3
 800c54c:	4620      	mov	r0, r4
 800c54e:	f7fd fd61 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c552:	4668      	mov	r0, sp
 800c554:	f7fd fd5e 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c558:	b002      	add	sp, #8
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
 800c55c:	20000020 	.word	0x20000020

0800c560 <_DrawVLine>:
 800c560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c564:	4d2c      	ldr	r5, [pc, #176]	; (800c618 <_DrawVLine+0xb8>)
 800c566:	461e      	mov	r6, r3
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c56c:	460f      	mov	r7, r1
 800c56e:	4614      	mov	r4, r2
 800c570:	f7fd fd42 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c574:	9000      	str	r0, [sp, #0]
 800c576:	6940      	ldr	r0, [r0, #20]
 800c578:	46a9      	mov	r9, r5
 800c57a:	b108      	cbz	r0, 800c580 <_DrawVLine+0x20>
 800c57c:	f7fd fd3c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c580:	9001      	str	r0, [sp, #4]
 800c582:	4621      	mov	r1, r4
 800c584:	4638      	mov	r0, r7
 800c586:	f7ff ff6f 	bl	800c468 <_XY2PTR>
 800c58a:	f8d9 2000 	ldr.w	r2, [r9]
 800c58e:	9b00      	ldr	r3, [sp, #0]
 800c590:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c592:	7c12      	ldrb	r2, [r2, #16]
 800c594:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800c598:	f8d1 9000 	ldr.w	r9, [r1]
 800c59c:	07d2      	lsls	r2, r2, #31
 800c59e:	4605      	mov	r5, r0
 800c5a0:	d51f      	bpl.n	800c5e2 <_DrawVLine+0x82>
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	4798      	blx	r3
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	9801      	ldr	r0, [sp, #4]
 800c5ae:	b128      	cbz	r0, 800c5bc <_DrawVLine+0x5c>
 800c5b0:	6882      	ldr	r2, [r0, #8]
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f8d2 c000 	ldr.w	ip, [r2]
 800c5b8:	4622      	mov	r2, r4
 800c5ba:	47e0      	blx	ip
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	ea83 0308 	eor.w	r3, r3, r8
 800c5c2:	602b      	str	r3, [r5, #0]
 800c5c4:	9b00      	ldr	r3, [sp, #0]
 800c5c6:	3401      	adds	r4, #1
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	42b4      	cmp	r4, r6
 800c5cc:	441d      	add	r5, r3
 800c5ce:	dded      	ble.n	800c5ac <_DrawVLine+0x4c>
 800c5d0:	4668      	mov	r0, sp
 800c5d2:	f7fd fd1f 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	b1d3      	cbz	r3, 800c610 <_DrawVLine+0xb0>
 800c5da:	a801      	add	r0, sp, #4
 800c5dc:	f7fd fd1a 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c5e0:	e016      	b.n	800c610 <_DrawVLine+0xb0>
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	b163      	cbz	r3, 800c600 <_DrawVLine+0xa0>
 800c5e6:	9801      	ldr	r0, [sp, #4]
 800c5e8:	6883      	ldr	r3, [r0, #8]
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	3401      	adds	r4, #1
 800c5f2:	4798      	blx	r3
 800c5f4:	42b4      	cmp	r4, r6
 800c5f6:	f8c5 9000 	str.w	r9, [r5]
 800c5fa:	4445      	add	r5, r8
 800c5fc:	ddf3      	ble.n	800c5e6 <_DrawVLine+0x86>
 800c5fe:	e7e7      	b.n	800c5d0 <_DrawVLine+0x70>
 800c600:	1b34      	subs	r4, r6, r4
 800c602:	3401      	adds	r4, #1
 800c604:	3c01      	subs	r4, #1
 800c606:	f8c5 9000 	str.w	r9, [r5]
 800c60a:	4445      	add	r5, r8
 800c60c:	d1fa      	bne.n	800c604 <_DrawVLine+0xa4>
 800c60e:	e7df      	b.n	800c5d0 <_DrawVLine+0x70>
 800c610:	b003      	add	sp, #12
 800c612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c616:	bf00      	nop
 800c618:	20000020 	.word	0x20000020

0800c61c <_FillRect>:
 800c61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c620:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c6d0 <_FillRect+0xb4>
 800c624:	4614      	mov	r4, r2
 800c626:	f8db 2000 	ldr.w	r2, [fp]
 800c62a:	b085      	sub	sp, #20
 800c62c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800c62e:	460f      	mov	r7, r1
 800c630:	461d      	mov	r5, r3
 800c632:	f7fd fce1 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c636:	4621      	mov	r1, r4
 800c638:	9002      	str	r0, [sp, #8]
 800c63a:	4638      	mov	r0, r7
 800c63c:	f7ff ff14 	bl	800c468 <_XY2PTR>
 800c640:	9a02      	ldr	r2, [sp, #8]
 800c642:	f8db 3000 	ldr.w	r3, [fp]
 800c646:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800c64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c64c:	4606      	mov	r6, r0
 800c64e:	6950      	ldr	r0, [r2, #20]
 800c650:	f8d3 a000 	ldr.w	sl, [r3]
 800c654:	1bed      	subs	r5, r5, r7
 800c656:	3501      	adds	r5, #1
 800c658:	b338      	cbz	r0, 800c6aa <_FillRect+0x8e>
 800c65a:	f7fd fccd 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c65e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c660:	f10d 0810 	add.w	r8, sp, #16
 800c664:	1b13      	subs	r3, r2, r4
 800c666:	f848 0d04 	str.w	r0, [r8, #-4]!
 800c66a:	3301      	adds	r3, #1
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	4639      	mov	r1, r7
 800c670:	4622      	mov	r2, r4
 800c672:	462b      	mov	r3, r5
 800c674:	f002 fa2a 	bl	800eacc <GUI_USAGE_AddRect>
 800c678:	4640      	mov	r0, r8
 800c67a:	f7fd fccb 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c67e:	e014      	b.n	800c6aa <_FillRect+0x8e>
 800c680:	f8db 3000 	ldr.w	r3, [fp]
 800c684:	7c1b      	ldrb	r3, [r3, #16]
 800c686:	07db      	lsls	r3, r3, #31
 800c688:	d513      	bpl.n	800c6b2 <_FillRect+0x96>
 800c68a:	9b02      	ldr	r3, [sp, #8]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	4798      	blx	r3
 800c694:	4632      	mov	r2, r6
 800c696:	462b      	mov	r3, r5
 800c698:	6811      	ldr	r1, [r2, #0]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	ea81 0100 	eor.w	r1, r1, r0
 800c6a0:	f842 1b04 	str.w	r1, [r2], #4
 800c6a4:	d1f8      	bne.n	800c698 <_FillRect+0x7c>
 800c6a6:	444e      	add	r6, r9
 800c6a8:	3401      	adds	r4, #1
 800c6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6ac:	429c      	cmp	r4, r3
 800c6ae:	dde7      	ble.n	800c680 <_FillRect+0x64>
 800c6b0:	e008      	b.n	800c6c4 <_FillRect+0xa8>
 800c6b2:	2d00      	cmp	r5, #0
 800c6b4:	ddf7      	ble.n	800c6a6 <_FillRect+0x8a>
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	f842 ab04 	str.w	sl, [r2], #4
 800c6c0:	d1fb      	bne.n	800c6ba <_FillRect+0x9e>
 800c6c2:	e7f0      	b.n	800c6a6 <_FillRect+0x8a>
 800c6c4:	a802      	add	r0, sp, #8
 800c6c6:	f7fd fca5 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c6ca:	b005      	add	sp, #20
 800c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d0:	20000020 	.word	0x20000020

0800c6d4 <_DrawHLine>:
 800c6d4:	b507      	push	{r0, r1, r2, lr}
 800c6d6:	9200      	str	r2, [sp, #0]
 800c6d8:	f7ff ffa0 	bl	800c61c <_FillRect>
 800c6dc:	b003      	add	sp, #12
 800c6de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c6e4 <_DrawBitmap>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	4c9d      	ldr	r4, [pc, #628]	; (800c960 <_DrawBitmap+0x27c>)
 800c6ea:	469a      	mov	sl, r3
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	b091      	sub	sp, #68	; 0x44
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	460e      	mov	r6, r1
 800c6f8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800c6fc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f000 8387 	beq.w	800ce12 <_DrawBitmap+0x72e>
 800c704:	f7fd fc78 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c708:	900e      	str	r0, [sp, #56]	; 0x38
 800c70a:	6940      	ldr	r0, [r0, #20]
 800c70c:	b108      	cbz	r0, 800c712 <_DrawBitmap+0x2e>
 800c70e:	f7fd fc73 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c712:	900f      	str	r0, [sp, #60]	; 0x3c
 800c714:	a810      	add	r0, sp, #64	; 0x40
 800c716:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	930a      	str	r3, [sp, #40]	; 0x28
 800c71e:	f7fd fc79 	bl	800a014 <GUI_ALLOC_UnlockH>
 800c722:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c724:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c726:	4437      	add	r7, r6
 800c728:	9704      	str	r7, [sp, #16]
 800c72a:	b150      	cbz	r0, 800c742 <_DrawBitmap+0x5e>
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	7c1b      	ldrb	r3, [r3, #16]
 800c730:	079c      	lsls	r4, r3, #30
 800c732:	d406      	bmi.n	800c742 <_DrawBitmap+0x5e>
 800c734:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c736:	9700      	str	r7, [sp, #0]
 800c738:	9904      	ldr	r1, [sp, #16]
 800c73a:	9a07      	ldr	r2, [sp, #28]
 800c73c:	4653      	mov	r3, sl
 800c73e:	f002 f9c5 	bl	800eacc <GUI_USAGE_AddRect>
 800c742:	9804      	ldr	r0, [sp, #16]
 800c744:	9907      	ldr	r1, [sp, #28]
 800c746:	f7ff fe8f 	bl	800c468 <_XY2PTR>
 800c74a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c74c:	2f17      	cmp	r7, #23
 800c74e:	4606      	mov	r6, r0
 800c750:	dd64      	ble.n	800c81c <_DrawBitmap+0x138>
 800c752:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800c756:	9706      	str	r7, [sp, #24]
 800c758:	f04f 0900 	mov.w	r9, #0
 800c75c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c75e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c760:	45b9      	cmp	r9, r7
 800c762:	da57      	bge.n	800c814 <_DrawBitmap+0x130>
 800c764:	b130      	cbz	r0, 800c774 <_DrawBitmap+0x90>
 800c766:	6883      	ldr	r3, [r0, #8]
 800c768:	9a07      	ldr	r2, [sp, #28]
 800c76a:	685c      	ldr	r4, [r3, #4]
 800c76c:	9904      	ldr	r1, [sp, #16]
 800c76e:	444a      	add	r2, r9
 800c770:	4653      	mov	r3, sl
 800c772:	47a0      	blx	r4
 800c774:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c778:	68d8      	ldr	r0, [r3, #12]
 800c77a:	b128      	cbz	r0, 800c788 <_DrawBitmap+0xa4>
 800c77c:	4630      	mov	r0, r6
 800c77e:	4659      	mov	r1, fp
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	f002 fd23 	bl	800f1cc <memcpy>
 800c786:	e03e      	b.n	800c806 <_DrawBitmap+0x122>
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	4798      	blx	r3
 800c78c:	0e00      	lsrs	r0, r0, #24
 800c78e:	9005      	str	r0, [sp, #20]
 800c790:	4635      	mov	r5, r6
 800c792:	4657      	mov	r7, sl
 800c794:	465c      	mov	r4, fp
 800c796:	463b      	mov	r3, r7
 800c798:	4622      	mov	r2, r4
 800c79a:	f04f 0c00 	mov.w	ip, #0
 800c79e:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7a2:	9805      	ldr	r0, [sp, #20]
 800c7a4:	0e09      	lsrs	r1, r1, #24
 800c7a6:	4281      	cmp	r1, r0
 800c7a8:	9805      	ldr	r0, [sp, #20]
 800c7aa:	bf08      	it	eq
 800c7ac:	f10c 0c01 	addeq.w	ip, ip, #1
 800c7b0:	4281      	cmp	r1, r0
 800c7b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c7b6:	d014      	beq.n	800c7e2 <_DrawBitmap+0xfe>
 800c7b8:	f1bc 0f00 	cmp.w	ip, #0
 800c7bc:	d014      	beq.n	800c7e8 <_DrawBitmap+0x104>
 800c7be:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	9303      	str	r3, [sp, #12]
 800c7ca:	f8cd c008 	str.w	ip, [sp, #8]
 800c7ce:	f002 fcfd 	bl	800f1cc <memcpy>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c7d8:	441d      	add	r5, r3
 800c7da:	441c      	add	r4, r3
 800c7dc:	ebcc 0707 	rsb	r7, ip, r7
 800c7e0:	e00f      	b.n	800c802 <_DrawBitmap+0x11e>
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1db      	bne.n	800c79e <_DrawBitmap+0xba>
 800c7e6:	e7e7      	b.n	800c7b8 <_DrawBitmap+0xd4>
 800c7e8:	6820      	ldr	r0, [r4, #0]
 800c7ea:	0e02      	lsrs	r2, r0, #24
 800c7ec:	2aff      	cmp	r2, #255	; 0xff
 800c7ee:	d005      	beq.n	800c7fc <_DrawBitmap+0x118>
 800c7f0:	43d2      	mvns	r2, r2
 800c7f2:	6829      	ldr	r1, [r5, #0]
 800c7f4:	b2d2      	uxtb	r2, r2
 800c7f6:	f7fc fbcb 	bl	8008f90 <GUI__MixColors>
 800c7fa:	6028      	str	r0, [r5, #0]
 800c7fc:	3504      	adds	r5, #4
 800c7fe:	3404      	adds	r4, #4
 800c800:	3f01      	subs	r7, #1
 800c802:	2f00      	cmp	r7, #0
 800c804:	d1c7      	bne.n	800c796 <_DrawBitmap+0xb2>
 800c806:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c808:	44bb      	add	fp, r7
 800c80a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c80c:	f109 0901 	add.w	r9, r9, #1
 800c810:	443e      	add	r6, r7
 800c812:	e7a3      	b.n	800c75c <_DrawBitmap+0x78>
 800c814:	2800      	cmp	r0, #0
 800c816:	f040 82f9 	bne.w	800ce0c <_DrawBitmap+0x728>
 800c81a:	e2fa      	b.n	800ce12 <_DrawBitmap+0x72e>
 800c81c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c81e:	2f10      	cmp	r7, #16
 800c820:	d137      	bne.n	800c892 <_DrawBitmap+0x1ae>
 800c822:	1f06      	subs	r6, r0, #4
 800c824:	2500      	movs	r5, #0
 800c826:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c828:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800c82a:	42bd      	cmp	r5, r7
 800c82c:	f280 80a0 	bge.w	800c970 <_DrawBitmap+0x28c>
 800c830:	9f07      	ldr	r7, [sp, #28]
 800c832:	442f      	add	r7, r5
 800c834:	b13c      	cbz	r4, 800c846 <_DrawBitmap+0x162>
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	9904      	ldr	r1, [sp, #16]
 800c83a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800c83e:	4620      	mov	r0, r4
 800c840:	463a      	mov	r2, r7
 800c842:	4653      	mov	r3, sl
 800c844:	47e0      	blx	ip
 800c846:	f1ab 0302 	sub.w	r3, fp, #2
 800c84a:	9306      	str	r3, [sp, #24]
 800c84c:	9605      	str	r6, [sp, #20]
 800c84e:	46d1      	mov	r9, sl
 800c850:	9904      	ldr	r1, [sp, #16]
 800c852:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c856:	9a06      	ldr	r2, [sp, #24]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800c85e:	9206      	str	r2, [sp, #24]
 800c860:	4451      	add	r1, sl
 800c862:	ebc9 0101 	rsb	r1, r9, r1
 800c866:	9103      	str	r1, [sp, #12]
 800c868:	4798      	blx	r3
 800c86a:	9b05      	ldr	r3, [sp, #20]
 800c86c:	9903      	ldr	r1, [sp, #12]
 800c86e:	f843 0f04 	str.w	r0, [r3, #4]!
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	b124      	cbz	r4, 800c880 <_DrawBitmap+0x19c>
 800c876:	68a3      	ldr	r3, [r4, #8]
 800c878:	4620      	mov	r0, r4
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	463a      	mov	r2, r7
 800c87e:	4798      	blx	r3
 800c880:	f1b9 0901 	subs.w	r9, r9, #1
 800c884:	d1e4      	bne.n	800c850 <_DrawBitmap+0x16c>
 800c886:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c888:	44bb      	add	fp, r7
 800c88a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c88c:	3501      	adds	r5, #1
 800c88e:	443e      	add	r6, r7
 800c890:	e7c9      	b.n	800c826 <_DrawBitmap+0x142>
 800c892:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c894:	2f08      	cmp	r7, #8
 800c896:	f100 0604 	add.w	r6, r0, #4
 800c89a:	d16d      	bne.n	800c978 <_DrawBitmap+0x294>
 800c89c:	9f07      	ldr	r7, [sp, #28]
 800c89e:	9907      	ldr	r1, [sp, #28]
 800c8a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c8a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800c8a4:	1a7b      	subs	r3, r7, r1
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	f1a6 0004 	sub.w	r0, r6, #4
 800c8ac:	da60      	bge.n	800c970 <_DrawBitmap+0x28c>
 800c8ae:	4b2c      	ldr	r3, [pc, #176]	; (800c960 <_DrawBitmap+0x27c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	7c1b      	ldrb	r3, [r3, #16]
 800c8b4:	b36d      	cbz	r5, 800c912 <_DrawBitmap+0x22e>
 800c8b6:	f013 0303 	ands.w	r3, r3, #3
 800c8ba:	d005      	beq.n	800c8c8 <_DrawBitmap+0x1e4>
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d151      	bne.n	800c964 <_DrawBitmap+0x280>
 800c8c0:	46b1      	mov	r9, r6
 800c8c2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c8c6:	e01c      	b.n	800c902 <_DrawBitmap+0x21e>
 800c8c8:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800c8cc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c8d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	4553      	cmp	r3, sl
 800c8d8:	d1f6      	bne.n	800c8c8 <_DrawBitmap+0x1e4>
 800c8da:	e043      	b.n	800c964 <_DrawBitmap+0x280>
 800c8dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c8e0:	f849 3c04 	str.w	r3, [r9, #-4]
 800c8e4:	b12c      	cbz	r4, 800c8f2 <_DrawBitmap+0x20e>
 800c8e6:	68a3      	ldr	r3, [r4, #8]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4641      	mov	r1, r8
 800c8ee:	463a      	mov	r2, r7
 800c8f0:	4798      	blx	r3
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	f108 0801 	add.w	r8, r8, #1
 800c8f8:	4453      	add	r3, sl
 800c8fa:	4543      	cmp	r3, r8
 800c8fc:	f109 0904 	add.w	r9, r9, #4
 800c900:	d030      	beq.n	800c964 <_DrawBitmap+0x280>
 800c902:	9804      	ldr	r0, [sp, #16]
 800c904:	ebc0 030b 	rsb	r3, r0, fp
 800c908:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0f0      	beq.n	800c8f2 <_DrawBitmap+0x20e>
 800c910:	e7e4      	b.n	800c8dc <_DrawBitmap+0x1f8>
 800c912:	f013 0303 	ands.w	r3, r3, #3
 800c916:	d005      	beq.n	800c924 <_DrawBitmap+0x240>
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d123      	bne.n	800c964 <_DrawBitmap+0x280>
 800c91c:	46b1      	mov	r9, r6
 800c91e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c922:	e015      	b.n	800c950 <_DrawBitmap+0x26c>
 800c924:	4659      	mov	r1, fp
 800c926:	4652      	mov	r2, sl
 800c928:	f002 fc50 	bl	800f1cc <memcpy>
 800c92c:	e01a      	b.n	800c964 <_DrawBitmap+0x280>
 800c92e:	f849 3c04 	str.w	r3, [r9, #-4]
 800c932:	b12c      	cbz	r4, 800c940 <_DrawBitmap+0x25c>
 800c934:	68a3      	ldr	r3, [r4, #8]
 800c936:	4620      	mov	r0, r4
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4641      	mov	r1, r8
 800c93c:	463a      	mov	r2, r7
 800c93e:	4798      	blx	r3
 800c940:	9b04      	ldr	r3, [sp, #16]
 800c942:	f108 0801 	add.w	r8, r8, #1
 800c946:	4453      	add	r3, sl
 800c948:	4543      	cmp	r3, r8
 800c94a:	f109 0904 	add.w	r9, r9, #4
 800c94e:	d009      	beq.n	800c964 <_DrawBitmap+0x280>
 800c950:	9904      	ldr	r1, [sp, #16]
 800c952:	ebc1 030b 	rsb	r3, r1, fp
 800c956:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0f0      	beq.n	800c940 <_DrawBitmap+0x25c>
 800c95e:	e7e6      	b.n	800c92e <_DrawBitmap+0x24a>
 800c960:	20000020 	.word	0x20000020
 800c964:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c968:	4493      	add	fp, r2
 800c96a:	3701      	adds	r7, #1
 800c96c:	441e      	add	r6, r3
 800c96e:	e796      	b.n	800c89e <_DrawBitmap+0x1ba>
 800c970:	2c00      	cmp	r4, #0
 800c972:	f040 824b 	bne.w	800ce0c <_DrawBitmap+0x728>
 800c976:	e24c      	b.n	800ce12 <_DrawBitmap+0x72e>
 800c978:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c97a:	4bb2      	ldr	r3, [pc, #712]	; (800cc44 <_DrawBitmap+0x560>)
 800c97c:	9609      	str	r6, [sp, #36]	; 0x24
 800c97e:	007f      	lsls	r7, r7, #1
 800c980:	970c      	str	r7, [sp, #48]	; 0x30
 800c982:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c984:	00bf      	lsls	r7, r7, #2
 800c986:	970d      	str	r7, [sp, #52]	; 0x34
 800c988:	9f07      	ldr	r7, [sp, #28]
 800c98a:	9705      	str	r7, [sp, #20]
 800c98c:	2d00      	cmp	r5, #0
 800c98e:	bf08      	it	eq
 800c990:	461d      	moveq	r5, r3
 800c992:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c994:	9807      	ldr	r0, [sp, #28]
 800c996:	1f3c      	subs	r4, r7, #4
 800c998:	9f05      	ldr	r7, [sp, #20]
 800c99a:	1a3b      	subs	r3, r7, r0
 800c99c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c99e:	42bb      	cmp	r3, r7
 800c9a0:	f280 8232 	bge.w	800ce08 <_DrawBitmap+0x724>
 800c9a4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c9a6:	2f02      	cmp	r7, #2
 800c9a8:	f000 80ad 	beq.w	800cb06 <_DrawBitmap+0x422>
 800c9ac:	2f04      	cmp	r7, #4
 800c9ae:	f000 814f 	beq.w	800cc50 <_DrawBitmap+0x56c>
 800c9b2:	2f01      	cmp	r7, #1
 800c9b4:	f040 821e 	bne.w	800cdf4 <_DrawBitmap+0x710>
 800c9b8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800cc4c <_DrawBitmap+0x568>
 800c9bc:	f8d9 3000 	ldr.w	r3, [r9]
 800c9c0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c9c2:	f7fd fb19 	bl	8009ff8 <GUI_ALLOC_LockH>
 800c9c6:	f89b 3000 	ldrb.w	r3, [fp]
 800c9ca:	4a9f      	ldr	r2, [pc, #636]	; (800cc48 <_DrawBitmap+0x564>)
 800c9cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c9ce:	5cd6      	ldrb	r6, [r2, r3]
 800c9d0:	f8d9 3000 	ldr.w	r3, [r9]
 800c9d4:	900e      	str	r0, [sp, #56]	; 0x38
 800c9d6:	7c1b      	ldrb	r3, [r3, #16]
 800c9d8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800c9dc:	f003 0303 	and.w	r3, r3, #3
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	4657      	mov	r7, sl
 800c9e4:	f1c1 0808 	rsb	r8, r1, #8
 800c9e8:	fa46 f601 	asr.w	r6, r6, r1
 800c9ec:	d020      	beq.n	800ca30 <_DrawBitmap+0x34c>
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d061      	beq.n	800cab6 <_DrawBitmap+0x3d2>
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d05f      	beq.n	800cab6 <_DrawBitmap+0x3d2>
 800c9f6:	465a      	mov	r2, fp
 800c9f8:	4547      	cmp	r7, r8
 800c9fa:	bf38      	it	cc
 800c9fc:	46b8      	movcc	r8, r7
 800c9fe:	ebc8 0707 	rsb	r7, r8, r7
 800ca02:	4643      	mov	r3, r8
 800ca04:	4621      	mov	r1, r4
 800ca06:	f006 0001 	and.w	r0, r6, #1
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800ca10:	f841 0b04 	str.w	r0, [r1], #4
 800ca14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ca18:	d1f5      	bne.n	800ca06 <_DrawBitmap+0x322>
 800ca1a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ca1e:	2f00      	cmp	r7, #0
 800ca20:	d06d      	beq.n	800cafe <_DrawBitmap+0x41a>
 800ca22:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ca26:	4988      	ldr	r1, [pc, #544]	; (800cc48 <_DrawBitmap+0x564>)
 800ca28:	f04f 0808 	mov.w	r8, #8
 800ca2c:	5cce      	ldrb	r6, [r1, r3]
 800ca2e:	e7e3      	b.n	800c9f8 <_DrawBitmap+0x314>
 800ca30:	686b      	ldr	r3, [r5, #4]
 800ca32:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ca36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca38:	f8cd b020 	str.w	fp, [sp, #32]
 800ca3c:	4547      	cmp	r7, r8
 800ca3e:	bf38      	it	cc
 800ca40:	46b8      	movcc	r8, r7
 800ca42:	ebc8 0707 	rsb	r7, r8, r7
 800ca46:	f1bc 0f00 	cmp.w	ip, #0
 800ca4a:	d026      	beq.n	800ca9a <_DrawBitmap+0x3b6>
 800ca4c:	b91e      	cbnz	r6, 800ca56 <_DrawBitmap+0x372>
 800ca4e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ca52:	44c1      	add	r9, r8
 800ca54:	e025      	b.n	800caa2 <_DrawBitmap+0x3be>
 800ca56:	07f0      	lsls	r0, r6, #31
 800ca58:	d50c      	bpl.n	800ca74 <_DrawBitmap+0x390>
 800ca5a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800ca5e:	9a05      	ldr	r2, [sp, #20]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f8cd c008 	str.w	ip, [sp, #8]
 800ca66:	4660      	mov	r0, ip
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4798      	blx	r3
 800ca6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca6e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ca72:	6023      	str	r3, [r4, #0]
 800ca74:	f1b8 0801 	subs.w	r8, r8, #1
 800ca78:	f109 0901 	add.w	r9, r9, #1
 800ca7c:	f104 0404 	add.w	r4, r4, #4
 800ca80:	d00f      	beq.n	800caa2 <_DrawBitmap+0x3be>
 800ca82:	0876      	lsrs	r6, r6, #1
 800ca84:	e7e2      	b.n	800ca4c <_DrawBitmap+0x368>
 800ca86:	07f1      	lsls	r1, r6, #31
 800ca88:	bf44      	itt	mi
 800ca8a:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800ca8c:	6023      	strmi	r3, [r4, #0]
 800ca8e:	f1b8 0801 	subs.w	r8, r8, #1
 800ca92:	f104 0404 	add.w	r4, r4, #4
 800ca96:	d004      	beq.n	800caa2 <_DrawBitmap+0x3be>
 800ca98:	0876      	lsrs	r6, r6, #1
 800ca9a:	2e00      	cmp	r6, #0
 800ca9c:	d1f3      	bne.n	800ca86 <_DrawBitmap+0x3a2>
 800ca9e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800caa2:	b367      	cbz	r7, 800cafe <_DrawBitmap+0x41a>
 800caa4:	9808      	ldr	r0, [sp, #32]
 800caa6:	4a68      	ldr	r2, [pc, #416]	; (800cc48 <_DrawBitmap+0x564>)
 800caa8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800caac:	9008      	str	r0, [sp, #32]
 800caae:	5cd6      	ldrb	r6, [r2, r3]
 800cab0:	f04f 0808 	mov.w	r8, #8
 800cab4:	e7c2      	b.n	800ca3c <_DrawBitmap+0x358>
 800cab6:	6803      	ldr	r3, [r0, #0]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	4798      	blx	r3
 800cabe:	4659      	mov	r1, fp
 800cac0:	4547      	cmp	r7, r8
 800cac2:	bf38      	it	cc
 800cac4:	46b8      	movcc	r8, r7
 800cac6:	ebc8 0707 	rsb	r7, r8, r7
 800caca:	1d23      	adds	r3, r4, #4
 800cacc:	46c6      	mov	lr, r8
 800cace:	07f2      	lsls	r2, r6, #31
 800cad0:	d504      	bpl.n	800cadc <_DrawBitmap+0x3f8>
 800cad2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800cad6:	4042      	eors	r2, r0
 800cad8:	f843 2c04 	str.w	r2, [r3, #-4]
 800cadc:	f1be 0e01 	subs.w	lr, lr, #1
 800cae0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cae4:	f103 0304 	add.w	r3, r3, #4
 800cae8:	d1f1      	bne.n	800cace <_DrawBitmap+0x3ea>
 800caea:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800caee:	b137      	cbz	r7, 800cafe <_DrawBitmap+0x41a>
 800caf0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800caf4:	4a54      	ldr	r2, [pc, #336]	; (800cc48 <_DrawBitmap+0x564>)
 800caf6:	f04f 0808 	mov.w	r8, #8
 800cafa:	5cd6      	ldrb	r6, [r2, r3]
 800cafc:	e7e0      	b.n	800cac0 <_DrawBitmap+0x3dc>
 800cafe:	a80e      	add	r0, sp, #56	; 0x38
 800cb00:	f7fd fa88 	bl	800a014 <GUI_ALLOC_UnlockH>
 800cb04:	e176      	b.n	800cdf4 <_DrawBitmap+0x710>
 800cb06:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800cb08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb0a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800cb0e:	f1c7 0604 	rsb	r6, r7, #4
 800cb12:	f89b 7000 	ldrb.w	r7, [fp]
 800cb16:	409f      	lsls	r7, r3
 800cb18:	4b4c      	ldr	r3, [pc, #304]	; (800cc4c <_DrawBitmap+0x568>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	7c1b      	ldrb	r3, [r3, #16]
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	b2f6      	uxtb	r6, r6
 800cb26:	b2ff      	uxtb	r7, r7
 800cb28:	d066      	beq.n	800cbf8 <_DrawBitmap+0x514>
 800cb2a:	d308      	bcc.n	800cb3e <_DrawBitmap+0x45a>
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	f040 8161 	bne.w	800cdf4 <_DrawBitmap+0x710>
 800cb32:	9804      	ldr	r0, [sp, #16]
 800cb34:	f8cd b020 	str.w	fp, [sp, #32]
 800cb38:	46d0      	mov	r8, sl
 800cb3a:	9006      	str	r0, [sp, #24]
 800cb3c:	e03e      	b.n	800cbbc <_DrawBitmap+0x4d8>
 800cb3e:	465a      	mov	r2, fp
 800cb40:	4653      	mov	r3, sl
 800cb42:	429e      	cmp	r6, r3
 800cb44:	bfc8      	it	gt
 800cb46:	b2de      	uxtbgt	r6, r3
 800cb48:	1b9b      	subs	r3, r3, r6
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800cb52:	3901      	subs	r1, #1
 800cb54:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800cb58:	f840 cb04 	str.w	ip, [r0], #4
 800cb5c:	00bf      	lsls	r7, r7, #2
 800cb5e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800cb62:	b2ff      	uxtb	r7, r7
 800cb64:	d1f3      	bne.n	800cb4e <_DrawBitmap+0x46a>
 800cb66:	3e01      	subs	r6, #1
 800cb68:	b2f6      	uxtb	r6, r6
 800cb6a:	3601      	adds	r6, #1
 800cb6c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 813f 	beq.w	800cdf4 <_DrawBitmap+0x710>
 800cb76:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800cb7a:	2604      	movs	r6, #4
 800cb7c:	e7e1      	b.n	800cb42 <_DrawBitmap+0x45e>
 800cb7e:	9906      	ldr	r1, [sp, #24]
 800cb80:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800cb84:	4449      	add	r1, r9
 800cb86:	d122      	bne.n	800cbce <_DrawBitmap+0x4ea>
 800cb88:	f109 0901 	add.w	r9, r9, #1
 800cb8c:	fa5f f289 	uxtb.w	r2, r9
 800cb90:	00bf      	lsls	r7, r7, #2
 800cb92:	4296      	cmp	r6, r2
 800cb94:	b2ff      	uxtb	r7, r7
 800cb96:	d1f2      	bne.n	800cb7e <_DrawBitmap+0x49a>
 800cb98:	9f06      	ldr	r7, [sp, #24]
 800cb9a:	3e01      	subs	r6, #1
 800cb9c:	b2f6      	uxtb	r6, r6
 800cb9e:	1c7b      	adds	r3, r7, #1
 800cba0:	1c72      	adds	r2, r6, #1
 800cba2:	199e      	adds	r6, r3, r6
 800cba4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800cba8:	9606      	str	r6, [sp, #24]
 800cbaa:	f1b8 0f00 	cmp.w	r8, #0
 800cbae:	f000 8121 	beq.w	800cdf4 <_DrawBitmap+0x710>
 800cbb2:	9b08      	ldr	r3, [sp, #32]
 800cbb4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800cbb8:	9308      	str	r3, [sp, #32]
 800cbba:	2604      	movs	r6, #4
 800cbbc:	4546      	cmp	r6, r8
 800cbbe:	bfc8      	it	gt
 800cbc0:	fa5f f688 	uxtbgt.w	r6, r8
 800cbc4:	ebc6 0808 	rsb	r8, r6, r8
 800cbc8:	f04f 0900 	mov.w	r9, #0
 800cbcc:	e7d7      	b.n	800cb7e <_DrawBitmap+0x49a>
 800cbce:	09ba      	lsrs	r2, r7, #6
 800cbd0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800cbd4:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800cbd8:	f1bc 0f00 	cmp.w	ip, #0
 800cbdc:	d0d4      	beq.n	800cb88 <_DrawBitmap+0x4a4>
 800cbde:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800cbe2:	6812      	ldr	r2, [r2, #0]
 800cbe4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cbe6:	4660      	mov	r0, ip
 800cbe8:	f8cd c008 	str.w	ip, [sp, #8]
 800cbec:	9a05      	ldr	r2, [sp, #20]
 800cbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbf0:	4798      	blx	r3
 800cbf2:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cbf6:	e7c7      	b.n	800cb88 <_DrawBitmap+0x4a4>
 800cbf8:	4658      	mov	r0, fp
 800cbfa:	4653      	mov	r3, sl
 800cbfc:	429e      	cmp	r6, r3
 800cbfe:	bfc8      	it	gt
 800cc00:	b2de      	uxtbgt	r6, r3
 800cc02:	1b9b      	subs	r3, r3, r6
 800cc04:	1d22      	adds	r2, r4, #4
 800cc06:	46b4      	mov	ip, r6
 800cc08:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800cc0c:	d005      	beq.n	800cc1a <_DrawBitmap+0x536>
 800cc0e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800cc12:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800cc16:	f842 1c04 	str.w	r1, [r2, #-4]
 800cc1a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800cc1e:	00bf      	lsls	r7, r7, #2
 800cc20:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800cc24:	b2ff      	uxtb	r7, r7
 800cc26:	f102 0204 	add.w	r2, r2, #4
 800cc2a:	d1ed      	bne.n	800cc08 <_DrawBitmap+0x524>
 800cc2c:	3e01      	subs	r6, #1
 800cc2e:	b2f6      	uxtb	r6, r6
 800cc30:	3601      	adds	r6, #1
 800cc32:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f000 80dc 	beq.w	800cdf4 <_DrawBitmap+0x710>
 800cc3c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800cc40:	2604      	movs	r6, #4
 800cc42:	e7db      	b.n	800cbfc <_DrawBitmap+0x518>
 800cc44:	080803ec 	.word	0x080803ec
 800cc48:	080801d8 	.word	0x080801d8
 800cc4c:	20000020 	.word	0x20000020
 800cc50:	4a71      	ldr	r2, [pc, #452]	; (800ce18 <_DrawBitmap+0x734>)
 800cc52:	f89b 3000 	ldrb.w	r3, [fp]
 800cc56:	6812      	ldr	r2, [r2, #0]
 800cc58:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc5a:	7c12      	ldrb	r2, [r2, #16]
 800cc5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cc5e:	f002 0203 	and.w	r2, r2, #3
 800cc62:	4083      	lsls	r3, r0
 800cc64:	2a01      	cmp	r2, #1
 800cc66:	b2de      	uxtb	r6, r3
 800cc68:	f000 809c 	beq.w	800cda4 <_DrawBitmap+0x6c0>
 800cc6c:	d302      	bcc.n	800cc74 <_DrawBitmap+0x590>
 800cc6e:	2a02      	cmp	r2, #2
 800cc70:	d035      	beq.n	800ccde <_DrawBitmap+0x5fa>
 800cc72:	e0bf      	b.n	800cdf4 <_DrawBitmap+0x710>
 800cc74:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800cc76:	b15f      	cbz	r7, 800cc90 <_DrawBitmap+0x5ac>
 800cc78:	0936      	lsrs	r6, r6, #4
 800cc7a:	f10b 0201 	add.w	r2, fp, #1
 800cc7e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800cc88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cc8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cc8e:	e001      	b.n	800cc94 <_DrawBitmap+0x5b0>
 800cc90:	4653      	mov	r3, sl
 800cc92:	465a      	mov	r2, fp
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	dd1a      	ble.n	800ccce <_DrawBitmap+0x5ea>
 800cc98:	1058      	asrs	r0, r3, #1
 800cc9a:	f104 0108 	add.w	r1, r4, #8
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	eb02 0800 	add.w	r8, r2, r0
 800cca6:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800ccaa:	f006 060f 	and.w	r6, r6, #15
 800ccae:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800ccb2:	f841 7c08 	str.w	r7, [r1, #-8]
 800ccb6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ccba:	f841 6c04 	str.w	r6, [r1, #-4]
 800ccbe:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800ccc2:	4542      	cmp	r2, r8
 800ccc4:	f101 0108 	add.w	r1, r1, #8
 800ccc8:	d1ed      	bne.n	800cca6 <_DrawBitmap+0x5c2>
 800ccca:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 8090 	beq.w	800cdf4 <_DrawBitmap+0x710>
 800ccd4:	0936      	lsrs	r6, r6, #4
 800ccd6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	e08a      	b.n	800cdf4 <_DrawBitmap+0x710>
 800ccde:	981e      	ldr	r0, [sp, #120]	; 0x78
 800cce0:	b1c0      	cbz	r0, 800cd14 <_DrawBitmap+0x630>
 800cce2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800cce6:	d00a      	beq.n	800ccfe <_DrawBitmap+0x61a>
 800cce8:	0936      	lsrs	r6, r6, #4
 800ccea:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	b12f      	cbz	r7, 800ccfe <_DrawBitmap+0x61a>
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	9904      	ldr	r1, [sp, #16]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	9a05      	ldr	r2, [sp, #20]
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	4798      	blx	r3
 800ccfe:	9904      	ldr	r1, [sp, #16]
 800cd00:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cd02:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800cd06:	f101 0801 	add.w	r8, r1, #1
 800cd0a:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800cd0e:	f10b 0901 	add.w	r9, fp, #1
 800cd12:	e011      	b.n	800cd38 <_DrawBitmap+0x654>
 800cd14:	46d4      	mov	ip, sl
 800cd16:	46d9      	mov	r9, fp
 800cd18:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cd1c:	e00c      	b.n	800cd38 <_DrawBitmap+0x654>
 800cd1e:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800cd22:	d10d      	bne.n	800cd40 <_DrawBitmap+0x65c>
 800cd24:	f016 060f 	ands.w	r6, r6, #15
 800cd28:	d11b      	bne.n	800cd62 <_DrawBitmap+0x67e>
 800cd2a:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800cd2e:	3408      	adds	r4, #8
 800cd30:	f108 0802 	add.w	r8, r8, #2
 800cd34:	f1ac 0c02 	sub.w	ip, ip, #2
 800cd38:	f1bc 0f01 	cmp.w	ip, #1
 800cd3c:	dcef      	bgt.n	800cd1e <_DrawBitmap+0x63a>
 800cd3e:	e021      	b.n	800cd84 <_DrawBitmap+0x6a0>
 800cd40:	0933      	lsrs	r3, r6, #4
 800cd42:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	d0eb      	beq.n	800cd24 <_DrawBitmap+0x640>
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	9a05      	ldr	r2, [sp, #20]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f8cd c008 	str.w	ip, [sp, #8]
 800cd56:	4638      	mov	r0, r7
 800cd58:	4641      	mov	r1, r8
 800cd5a:	4798      	blx	r3
 800cd5c:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cd60:	e7e0      	b.n	800cd24 <_DrawBitmap+0x640>
 800cd62:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	2f00      	cmp	r7, #0
 800cd6a:	d0de      	beq.n	800cd2a <_DrawBitmap+0x646>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	9a05      	ldr	r2, [sp, #20]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f8cd c008 	str.w	ip, [sp, #8]
 800cd76:	4638      	mov	r0, r7
 800cd78:	f108 0101 	add.w	r1, r8, #1
 800cd7c:	4798      	blx	r3
 800cd7e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cd82:	e7d2      	b.n	800cd2a <_DrawBitmap+0x646>
 800cd84:	f1bc 0f00 	cmp.w	ip, #0
 800cd88:	d034      	beq.n	800cdf4 <_DrawBitmap+0x710>
 800cd8a:	0936      	lsrs	r6, r6, #4
 800cd8c:	d032      	beq.n	800cdf4 <_DrawBitmap+0x710>
 800cd8e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800cd92:	6023      	str	r3, [r4, #0]
 800cd94:	b377      	cbz	r7, 800cdf4 <_DrawBitmap+0x710>
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	9a05      	ldr	r2, [sp, #20]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	4641      	mov	r1, r8
 800cda0:	4798      	blx	r3
 800cda2:	e027      	b.n	800cdf4 <_DrawBitmap+0x710>
 800cda4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800cda6:	f1c7 0302 	rsb	r3, r7, #2
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	465f      	mov	r7, fp
 800cdae:	4652      	mov	r2, sl
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	bfc8      	it	gt
 800cdb4:	b2d3      	uxtbgt	r3, r2
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	1d20      	adds	r0, r4, #4
 800cdba:	469c      	mov	ip, r3
 800cdbc:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800cdc0:	d005      	beq.n	800cdce <_DrawBitmap+0x6ea>
 800cdc2:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800cdc6:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800cdca:	f840 1c04 	str.w	r1, [r0, #-4]
 800cdce:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800cdd2:	0136      	lsls	r6, r6, #4
 800cdd4:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800cdd8:	b2f6      	uxtb	r6, r6
 800cdda:	f100 0004 	add.w	r0, r0, #4
 800cdde:	d1ed      	bne.n	800cdbc <_DrawBitmap+0x6d8>
 800cde0:	3b01      	subs	r3, #1
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	3301      	adds	r3, #1
 800cde6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800cdea:	b11a      	cbz	r2, 800cdf4 <_DrawBitmap+0x710>
 800cdec:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	e7dd      	b.n	800cdb0 <_DrawBitmap+0x6cc>
 800cdf4:	9b05      	ldr	r3, [sp, #20]
 800cdf6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	44bb      	add	fp, r7
 800cdfc:	9305      	str	r3, [sp, #20]
 800cdfe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ce00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce02:	443b      	add	r3, r7
 800ce04:	9309      	str	r3, [sp, #36]	; 0x24
 800ce06:	e5c4      	b.n	800c992 <_DrawBitmap+0x2ae>
 800ce08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce0a:	b113      	cbz	r3, 800ce12 <_DrawBitmap+0x72e>
 800ce0c:	a80f      	add	r0, sp, #60	; 0x3c
 800ce0e:	f7fd f901 	bl	800a014 <GUI_ALLOC_UnlockH>
 800ce12:	b011      	add	sp, #68	; 0x44
 800ce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce18:	20000020 	.word	0x20000020

0800ce1c <GUI_MEMDEV__WriteToActiveAt>:
 800ce1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ce20:	460e      	mov	r6, r1
 800ce22:	4690      	mov	r8, r2
 800ce24:	4607      	mov	r7, r0
 800ce26:	f7fd f8e7 	bl	8009ff8 <GUI_ALLOC_LockH>
 800ce2a:	6803      	ldr	r3, [r0, #0]
 800ce2c:	ac02      	add	r4, sp, #8
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ce34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce36:	2000      	movs	r0, #0
 800ce38:	2116      	movs	r1, #22
 800ce3a:	4798      	blx	r3
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f7fd f8e8 	bl	800a014 <GUI_ALLOC_UnlockH>
 800ce44:	b11d      	cbz	r5, 800ce4e <GUI_MEMDEV__WriteToActiveAt+0x32>
 800ce46:	4638      	mov	r0, r7
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4642      	mov	r2, r8
 800ce4c:	47a8      	blx	r5
 800ce4e:	b002      	add	sp, #8
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce54 <GUI_MEMDEV__CreateFixed>:
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	4e3e      	ldr	r6, [pc, #248]	; (800cf54 <GUI_MEMDEV__CreateFixed+0x100>)
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	461d      	mov	r5, r3
 800ce5e:	6833      	ldr	r3, [r6, #0]
 800ce60:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ce62:	7c5b      	ldrb	r3, [r3, #17]
 800ce64:	4683      	mov	fp, r0
 800ce66:	468a      	mov	sl, r1
 800ce68:	4690      	mov	r8, r2
 800ce6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f7fc fd44 	bl	80098fc <GUI_DEVICE_Create>
 800ce74:	4604      	mov	r4, r0
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d033      	beq.n	800cee2 <GUI_MEMDEV__CreateFixed+0x8e>
 800ce7a:	6903      	ldr	r3, [r0, #16]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	4798      	blx	r3
 800ce80:	f7fb fc69 	bl	8008756 <LCD__GetBPPDevice>
 800ce84:	fb08 f600 	mul.w	r6, r8, r0
 800ce88:	9003      	str	r0, [sp, #12]
 800ce8a:	3607      	adds	r6, #7
 800ce8c:	f7fd fa70 	bl	800a370 <GUI_ALLOC_RequestSize>
 800ce90:	f017 0901 	ands.w	r9, r7, #1
 800ce94:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800ce98:	d104      	bne.n	800cea4 <GUI_MEMDEV__CreateFixed+0x50>
 800ce9a:	2304      	movs	r3, #4
 800ce9c:	fb90 f0f3 	sdiv	r0, r0, r3
 800cea0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cea4:	2d00      	cmp	r5, #0
 800cea6:	dc09      	bgt.n	800cebc <GUI_MEMDEV__CreateFixed+0x68>
 800cea8:	b11e      	cbz	r6, 800ceb2 <GUI_MEMDEV__CreateFixed+0x5e>
 800ceaa:	3818      	subs	r0, #24
 800ceac:	fbb0 f0f6 	udiv	r0, r0, r6
 800ceb0:	e000      	b.n	800ceb4 <GUI_MEMDEV__CreateFixed+0x60>
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	426d      	negs	r5, r5
 800ceb6:	42a8      	cmp	r0, r5
 800ceb8:	bfb8      	it	lt
 800ceba:	4605      	movlt	r5, r0
 800cebc:	f1b9 0f00 	cmp.w	r9, #0
 800cec0:	d109      	bne.n	800ced6 <GUI_MEMDEV__CreateFixed+0x82>
 800cec2:	f8cd 9000 	str.w	r9, [sp]
 800cec6:	4658      	mov	r0, fp
 800cec8:	4651      	mov	r1, sl
 800ceca:	4642      	mov	r2, r8
 800cecc:	462b      	mov	r3, r5
 800cece:	f001 fdbd 	bl	800ea4c <GUI_USAGE_BM_Create>
 800ced2:	4607      	mov	r7, r0
 800ced4:	e000      	b.n	800ced8 <GUI_MEMDEV__CreateFixed+0x84>
 800ced6:	2700      	movs	r7, #0
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	dc04      	bgt.n	800cee6 <GUI_MEMDEV__CreateFixed+0x92>
 800cedc:	4620      	mov	r0, r4
 800cede:	f7fc fd0b 	bl	80098f8 <GUI_DEVICE_Delete>
 800cee2:	2000      	movs	r0, #0
 800cee4:	e032      	b.n	800cf4c <GUI_MEMDEV__CreateFixed+0xf8>
 800cee6:	fb06 f005 	mul.w	r0, r6, r5
 800ceea:	3018      	adds	r0, #24
 800ceec:	f1b9 0f00 	cmp.w	r9, #0
 800cef0:	d002      	beq.n	800cef8 <GUI_MEMDEV__CreateFixed+0xa4>
 800cef2:	f7fd fac9 	bl	800a488 <GUI_ALLOC_AllocNoInit>
 800cef6:	e001      	b.n	800cefc <GUI_MEMDEV__CreateFixed+0xa8>
 800cef8:	f000 fe40 	bl	800db7c <GUI_ALLOC_AllocZero>
 800cefc:	4681      	mov	r9, r0
 800cefe:	b940      	cbnz	r0, 800cf12 <GUI_MEMDEV__CreateFixed+0xbe>
 800cf00:	4620      	mov	r0, r4
 800cf02:	f7fc fcf9 	bl	80098f8 <GUI_DEVICE_Delete>
 800cf06:	2f00      	cmp	r7, #0
 800cf08:	d0eb      	beq.n	800cee2 <GUI_MEMDEV__CreateFixed+0x8e>
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	f7fd f8a2 	bl	800a054 <GUI_ALLOC_Free>
 800cf10:	e01b      	b.n	800cf4a <GUI_MEMDEV__CreateFixed+0xf6>
 800cf12:	f7fd f871 	bl	8009ff8 <GUI_ALLOC_LockH>
 800cf16:	4603      	mov	r3, r0
 800cf18:	a806      	add	r0, sp, #24
 800cf1a:	9a03      	ldr	r2, [sp, #12]
 800cf1c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cf20:	611a      	str	r2, [r3, #16]
 800cf22:	601c      	str	r4, [r3, #0]
 800cf24:	f8a3 b004 	strh.w	fp, [r3, #4]
 800cf28:	f8a3 a006 	strh.w	sl, [r3, #6]
 800cf2c:	f8a3 8008 	strh.w	r8, [r3, #8]
 800cf30:	815d      	strh	r5, [r3, #10]
 800cf32:	60de      	str	r6, [r3, #12]
 800cf34:	615f      	str	r7, [r3, #20]
 800cf36:	f7fd f86d 	bl	800a014 <GUI_ALLOC_UnlockH>
 800cf3a:	4a06      	ldr	r2, [pc, #24]	; (800cf54 <GUI_MEMDEV__CreateFixed+0x100>)
 800cf3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf3e:	6123      	str	r3, [r4, #16]
 800cf40:	6813      	ldr	r3, [r2, #0]
 800cf42:	f8c4 9008 	str.w	r9, [r4, #8]
 800cf46:	7c5b      	ldrb	r3, [r3, #17]
 800cf48:	61a3      	str	r3, [r4, #24]
 800cf4a:	4648      	mov	r0, r9
 800cf4c:	b007      	add	sp, #28
 800cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf52:	bf00      	nop
 800cf54:	20000020 	.word	0x20000020

0800cf58 <GUI_MEMDEV_GetBitsPerPixel>:
 800cf58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	b170      	cbz	r0, 800cf7c <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800cf5e:	f7fd f84b 	bl	8009ff8 <GUI_ALLOC_LockH>
 800cf62:	6803      	ldr	r3, [r0, #0]
 800cf64:	ac02      	add	r4, sp, #8
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	4798      	blx	r3
 800cf70:	f7fb fbf1 	bl	8008756 <LCD__GetBPPDevice>
 800cf74:	4605      	mov	r5, r0
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7fd f84c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	b003      	add	sp, #12
 800cf80:	bd30      	pop	{r4, r5, pc}
	...

0800cf84 <GUI_MEMDEV_Delete>:
 800cf84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf86:	4604      	mov	r4, r0
 800cf88:	b1d0      	cbz	r0, 800cfc0 <GUI_MEMDEV_Delete+0x3c>
 800cf8a:	4b0e      	ldr	r3, [pc, #56]	; (800cfc4 <GUI_MEMDEV_Delete+0x40>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf90:	4283      	cmp	r3, r0
 800cf92:	d101      	bne.n	800cf98 <GUI_MEMDEV_Delete+0x14>
 800cf94:	f7fc fa26 	bl	80093e4 <GUI_SelectLCD>
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f7fd f82d 	bl	8009ff8 <GUI_ALLOC_LockH>
 800cf9e:	9001      	str	r0, [sp, #4]
 800cfa0:	6940      	ldr	r0, [r0, #20]
 800cfa2:	b108      	cbz	r0, 800cfa8 <GUI_MEMDEV_Delete+0x24>
 800cfa4:	f001 fd7e 	bl	800eaa4 <GUI_USAGE_DecUseCnt>
 800cfa8:	ad02      	add	r5, sp, #8
 800cfaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	f7fc fca2 	bl	80098f8 <GUI_DEVICE_Delete>
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f7fd f82d 	bl	800a014 <GUI_ALLOC_UnlockH>
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f7fd f84a 	bl	800a054 <GUI_ALLOC_Free>
 800cfc0:	b003      	add	sp, #12
 800cfc2:	bd30      	pop	{r4, r5, pc}
 800cfc4:	20000020 	.word	0x20000020

0800cfc8 <GUI_MEMDEV_CreateEx>:
 800cfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	469a      	mov	sl, r3
 800cfce:	4b19      	ldr	r3, [pc, #100]	; (800d034 <GUI_MEMDEV_CreateEx+0x6c>)
 800cfd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4607      	mov	r7, r0
 800cfd6:	7c58      	ldrb	r0, [r3, #17]
 800cfd8:	4b17      	ldr	r3, [pc, #92]	; (800d038 <GUI_MEMDEV_CreateEx+0x70>)
 800cfda:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800cfde:	4688      	mov	r8, r1
 800cfe0:	4691      	mov	r9, r2
 800cfe2:	68e3      	ldr	r3, [r4, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b04      	cmp	r3, #4
 800cfe8:	d006      	beq.n	800cff8 <GUI_MEMDEV_CreateEx+0x30>
 800cfea:	6824      	ldr	r4, [r4, #0]
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	d1f8      	bne.n	800cfe2 <GUI_MEMDEV_CreateEx+0x1a>
 800cff0:	f7fc fc72 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800cff4:	4604      	mov	r4, r0
 800cff6:	b130      	cbz	r0, 800d006 <GUI_MEMDEV_CreateEx+0x3e>
 800cff8:	68e3      	ldr	r3, [r4, #12]
 800cffa:	4620      	mov	r0, r4
 800cffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffe:	2101      	movs	r1, #1
 800d000:	4798      	blx	r3
 800d002:	4606      	mov	r6, r0
 800d004:	b908      	cbnz	r0, 800d00a <GUI_MEMDEV_CreateEx+0x42>
 800d006:	2000      	movs	r0, #0
 800d008:	e010      	b.n	800d02c <GUI_MEMDEV_CreateEx+0x64>
 800d00a:	6924      	ldr	r4, [r4, #16]
 800d00c:	68a3      	ldr	r3, [r4, #8]
 800d00e:	4798      	blx	r3
 800d010:	3001      	adds	r0, #1
 800d012:	bf04      	itt	eq
 800d014:	f045 0501 	orreq.w	r5, r5, #1
 800d018:	4c08      	ldreq	r4, [pc, #32]	; (800d03c <GUI_MEMDEV_CreateEx+0x74>)
 800d01a:	9402      	str	r4, [sp, #8]
 800d01c:	e88d 0060 	stmia.w	sp, {r5, r6}
 800d020:	4638      	mov	r0, r7
 800d022:	4641      	mov	r1, r8
 800d024:	464a      	mov	r2, r9
 800d026:	4653      	mov	r3, sl
 800d028:	f7ff ff14 	bl	800ce54 <GUI_MEMDEV__CreateFixed>
 800d02c:	b004      	add	sp, #16
 800d02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d032:	bf00      	nop
 800d034:	20000020 	.word	0x20000020
 800d038:	20022eac 	.word	0x20022eac
 800d03c:	080807e0 	.word	0x080807e0

0800d040 <GUI_MEMDEV_Select>:
 800d040:	4b11      	ldr	r3, [pc, #68]	; (800d088 <GUI_MEMDEV_Select+0x48>)
 800d042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	4604      	mov	r4, r0
 800d048:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800d04a:	461f      	mov	r7, r3
 800d04c:	b910      	cbnz	r0, 800d054 <GUI_MEMDEV_Select+0x14>
 800d04e:	f7fc f9c9 	bl	80093e4 <GUI_SelectLCD>
 800d052:	e016      	b.n	800d082 <GUI_MEMDEV_Select+0x42>
 800d054:	b10e      	cbz	r6, 800d05a <GUI_MEMDEV_Select+0x1a>
 800d056:	f7fc f9c5 	bl	80093e4 <GUI_SelectLCD>
 800d05a:	f7fe ff37 	bl	800becc <WM_Deactivate>
 800d05e:	4620      	mov	r0, r4
 800d060:	f7fc ffca 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d064:	ad02      	add	r5, sp, #8
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d06c:	661c      	str	r4, [r3, #96]	; 0x60
 800d06e:	6800      	ldr	r0, [r0, #0]
 800d070:	f7fc fc80 	bl	8009974 <GUI_DEVICE_Link>
 800d074:	4628      	mov	r0, r5
 800d076:	f7fc ffcd 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d07a:	f000 f85f 	bl	800d13c <LCD_UpdateColorIndices>
 800d07e:	f7fb fe9b 	bl	8008db8 <LCD_SetClipRectMax>
 800d082:	4630      	mov	r0, r6
 800d084:	b003      	add	sp, #12
 800d086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d088:	20000020 	.word	0x20000020

0800d08c <GUI_MEMDEV_CopyToLCDAt>:
 800d08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d090:	460c      	mov	r4, r1
 800d092:	b085      	sub	sp, #20
 800d094:	4615      	mov	r5, r2
 800d096:	4606      	mov	r6, r0
 800d098:	2800      	cmp	r0, #0
 800d09a:	d041      	beq.n	800d120 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800d09c:	2000      	movs	r0, #0
 800d09e:	f000 fc5d 	bl	800d95c <GUI_SetDrawMode>
 800d0a2:	4b21      	ldr	r3, [pc, #132]	; (800d128 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800d0ae:	f7fc ffa3 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d0b2:	6803      	ldr	r3, [r0, #0]
 800d0b4:	9001      	str	r0, [sp, #4]
 800d0b6:	6998      	ldr	r0, [r3, #24]
 800d0b8:	f7fc f97e 	bl	80093b8 <GUI_SelectLayer>
 800d0bc:	4b1b      	ldr	r3, [pc, #108]	; (800d12c <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800d0be:	429c      	cmp	r4, r3
 800d0c0:	9b01      	ldr	r3, [sp, #4]
 800d0c2:	bf04      	itt	eq
 800d0c4:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800d0c8:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800d0cc:	891a      	ldrh	r2, [r3, #8]
 800d0ce:	895b      	ldrh	r3, [r3, #10]
 800d0d0:	f8ad 4008 	strh.w	r4, [sp, #8]
 800d0d4:	3a01      	subs	r2, #1
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	4422      	add	r2, r4
 800d0da:	442b      	add	r3, r5
 800d0dc:	4681      	mov	r9, r0
 800d0de:	f8ad 200c 	strh.w	r2, [sp, #12]
 800d0e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d0e6:	f8ad 500a 	strh.w	r5, [sp, #10]
 800d0ea:	f7fe fee7 	bl	800bebc <WM_Activate>
 800d0ee:	a801      	add	r0, sp, #4
 800d0f0:	f7fc ff90 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d0f4:	a802      	add	r0, sp, #8
 800d0f6:	f7fe fd0d 	bl	800bb14 <WM__InitIVRSearch>
 800d0fa:	b948      	cbnz	r0, 800d110 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800d0fc:	4648      	mov	r0, r9
 800d0fe:	f7fc f95b 	bl	80093b8 <GUI_SelectLayer>
 800d102:	4640      	mov	r0, r8
 800d104:	f7ff ff9c 	bl	800d040 <GUI_MEMDEV_Select>
 800d108:	4638      	mov	r0, r7
 800d10a:	f000 fc27 	bl	800d95c <GUI_SetDrawMode>
 800d10e:	e007      	b.n	800d120 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800d110:	4630      	mov	r0, r6
 800d112:	4621      	mov	r1, r4
 800d114:	462a      	mov	r2, r5
 800d116:	f000 ff65 	bl	800dfe4 <GUI_MEMDEV__WriteToActiveOpaque>
 800d11a:	f7fe fc39 	bl	800b990 <WM__GetNextIVR>
 800d11e:	e7ec      	b.n	800d0fa <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800d120:	b005      	add	sp, #20
 800d122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d126:	bf00      	nop
 800d128:	20000020 	.word	0x20000020
 800d12c:	fffff001 	.word	0xfffff001

0800d130 <GUI_MEMDEV_CopyToLCD>:
 800d130:	4901      	ldr	r1, [pc, #4]	; (800d138 <GUI_MEMDEV_CopyToLCD+0x8>)
 800d132:	460a      	mov	r2, r1
 800d134:	f7ff bfaa 	b.w	800d08c <GUI_MEMDEV_CopyToLCDAt>
 800d138:	fffff001 	.word	0xfffff001

0800d13c <LCD_UpdateColorIndices>:
 800d13c:	b510      	push	{r4, lr}
 800d13e:	4c07      	ldr	r4, [pc, #28]	; (800d15c <LCD_UpdateColorIndices+0x20>)
 800d140:	6823      	ldr	r3, [r4, #0]
 800d142:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d144:	f7fb fe92 	bl	8008e6c <LCD_Color2Index>
 800d148:	f7fb feb0 	bl	8008eac <LCD_SetColorIndex>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d150:	f7fb fe8c 	bl	8008e6c <LCD_Color2Index>
 800d154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d158:	f7fb bec4 	b.w	8008ee4 <LCD_SetBkColorIndex>
 800d15c:	20000020 	.word	0x20000020

0800d160 <LCD_SetClipRectEx>:
 800d160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d162:	4c09      	ldr	r4, [pc, #36]	; (800d188 <LCD_SetClipRectEx+0x28>)
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	7c5a      	ldrb	r2, [r3, #17]
 800d168:	4b08      	ldr	r3, [pc, #32]	; (800d18c <LCD_SetClipRectEx+0x2c>)
 800d16a:	4605      	mov	r5, r0
 800d16c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d170:	68c2      	ldr	r2, [r0, #12]
 800d172:	4669      	mov	r1, sp
 800d174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d176:	4790      	blx	r2
 800d178:	6820      	ldr	r0, [r4, #0]
 800d17a:	4629      	mov	r1, r5
 800d17c:	466a      	mov	r2, sp
 800d17e:	3008      	adds	r0, #8
 800d180:	f000 fa10 	bl	800d5a4 <GUI__IntersectRects>
 800d184:	b003      	add	sp, #12
 800d186:	bd30      	pop	{r4, r5, pc}
 800d188:	20000020 	.word	0x20000020
 800d18c:	20022eac 	.word	0x20022eac

0800d190 <LCD_SelectLCD>:
 800d190:	b510      	push	{r4, lr}
 800d192:	4b0d      	ldr	r3, [pc, #52]	; (800d1c8 <LCD_SelectLCD+0x38>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	7c51      	ldrb	r1, [r2, #17]
 800d198:	4a0c      	ldr	r2, [pc, #48]	; (800d1cc <LCD_SelectLCD+0x3c>)
 800d19a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d19e:	461c      	mov	r4, r3
 800d1a0:	b140      	cbz	r0, 800d1b4 <LCD_SelectLCD+0x24>
 800d1a2:	68c3      	ldr	r3, [r0, #12]
 800d1a4:	b113      	cbz	r3, 800d1ac <LCD_SelectLCD+0x1c>
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	d001      	beq.n	800d1b0 <LCD_SelectLCD+0x20>
 800d1ac:	6800      	ldr	r0, [r0, #0]
 800d1ae:	e7f7      	b.n	800d1a0 <LCD_SelectLCD+0x10>
 800d1b0:	f7fc fbca 	bl	8009948 <GUI_DEVICE_Unlink>
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	661a      	str	r2, [r3, #96]	; 0x60
 800d1ba:	f103 0208 	add.w	r2, r3, #8
 800d1be:	615a      	str	r2, [r3, #20]
 800d1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1c4:	f7fb bdf8 	b.w	8008db8 <LCD_SetClipRectMax>
 800d1c8:	20000020 	.word	0x20000020
 800d1cc:	20022eac 	.word	0x20022eac

0800d1d0 <LCD_ReadRectEx>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	b087      	sub	sp, #28
 800d1d6:	4617      	mov	r7, r2
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d1de:	68da      	ldr	r2, [r3, #12]
 800d1e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d1e2:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	b973      	cbnz	r3, 800d20a <LCD_ReadRectEx+0x3a>
 800d1ec:	4b71      	ldr	r3, [pc, #452]	; (800d3b4 <LCD_ReadRectEx+0x1e4>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	7c58      	ldrb	r0, [r3, #17]
 800d1f2:	f7fb fa17 	bl	8008624 <GUI_GetBitsPerPixelEx>
 800d1f6:	2808      	cmp	r0, #8
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	dd15      	ble.n	800d228 <LCD_ReadRectEx+0x58>
 800d1fc:	2810      	cmp	r0, #16
 800d1fe:	bfcc      	ite	gt
 800d200:	f04f 0904 	movgt.w	r9, #4
 800d204:	f04f 0902 	movle.w	r9, #2
 800d208:	e010      	b.n	800d22c <LCD_ReadRectEx+0x5c>
 800d20a:	a811      	add	r0, sp, #68	; 0x44
 800d20c:	2101      	movs	r1, #1
 800d20e:	4798      	blx	r3
 800d210:	4684      	mov	ip, r0
 800d212:	2800      	cmp	r0, #0
 800d214:	d0ea      	beq.n	800d1ec <LCD_ReadRectEx+0x1c>
 800d216:	9b04      	ldr	r3, [sp, #16]
 800d218:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d21a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800d21e:	4631      	mov	r1, r6
 800d220:	462a      	mov	r2, r5
 800d222:	463b      	mov	r3, r7
 800d224:	47e0      	blx	ip
 800d226:	e0c1      	b.n	800d3ac <LCD_ReadRectEx+0x1dc>
 800d228:	f04f 0901 	mov.w	r9, #1
 800d22c:	f04f 0b00 	mov.w	fp, #0
 800d230:	9b04      	ldr	r3, [sp, #16]
 800d232:	429d      	cmp	r5, r3
 800d234:	f300 80ba 	bgt.w	800d3ac <LCD_ReadRectEx+0x1dc>
 800d238:	f1b9 0f02 	cmp.w	r9, #2
 800d23c:	d009      	beq.n	800d252 <LCD_ReadRectEx+0x82>
 800d23e:	f1b9 0f04 	cmp.w	r9, #4
 800d242:	d004      	beq.n	800d24e <LCD_ReadRectEx+0x7e>
 800d244:	f1b9 0f01 	cmp.w	r9, #1
 800d248:	f040 80ae 	bne.w	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d24c:	e003      	b.n	800d256 <LCD_ReadRectEx+0x86>
 800d24e:	46b4      	mov	ip, r6
 800d250:	e09b      	b.n	800d38a <LCD_ReadRectEx+0x1ba>
 800d252:	46b4      	mov	ip, r6
 800d254:	e08a      	b.n	800d36c <LCD_ReadRectEx+0x19c>
 800d256:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800d25a:	2a07      	cmp	r2, #7
 800d25c:	f200 80a4 	bhi.w	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d260:	e8df f002 	tbb	[pc, r2]
 800d264:	0606080a 	.word	0x0606080a
 800d268:	04040404 	.word	0x04040404
 800d26c:	46b4      	mov	ip, r6
 800d26e:	e066      	b.n	800d33e <LCD_ReadRectEx+0x16e>
 800d270:	46b4      	mov	ip, r6
 800d272:	e047      	b.n	800d304 <LCD_ReadRectEx+0x134>
 800d274:	46b4      	mov	ip, r6
 800d276:	e022      	b.n	800d2be <LCD_ReadRectEx+0xee>
 800d278:	46b4      	mov	ip, r6
 800d27a:	45bc      	cmp	ip, r7
 800d27c:	f300 8094 	bgt.w	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d280:	4661      	mov	r1, ip
 800d282:	462a      	mov	r2, r5
 800d284:	f8cd c00c 	str.w	ip, [sp, #12]
 800d288:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d28a:	47c0      	blx	r8
 800d28c:	f1cb 0207 	rsb	r2, fp, #7
 800d290:	fa00 f202 	lsl.w	r2, r0, r2
 800d294:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800d298:	7820      	ldrb	r0, [r4, #0]
 800d29a:	fa41 f10b 	asr.w	r1, r1, fp
 800d29e:	4001      	ands	r1, r0
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	7022      	strb	r2, [r4, #0]
 800d2a4:	f10b 0301 	add.w	r3, fp, #1
 800d2a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d2ac:	f023 0207 	bic.w	r2, r3, #7
 800d2b0:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800d2b4:	fa43 fb02 	asr.w	fp, r3, r2
 800d2b8:	f10c 0c01 	add.w	ip, ip, #1
 800d2bc:	e7dd      	b.n	800d27a <LCD_ReadRectEx+0xaa>
 800d2be:	45bc      	cmp	ip, r7
 800d2c0:	dc72      	bgt.n	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d2c2:	4661      	mov	r1, ip
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	f8cd c00c 	str.w	ip, [sp, #12]
 800d2ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d2cc:	47c0      	blx	r8
 800d2ce:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800d2d2:	f1c2 0106 	rsb	r1, r2, #6
 800d2d6:	fa00 f101 	lsl.w	r1, r0, r1
 800d2da:	f64f 703f 	movw	r0, #65343	; 0xff3f
 800d2de:	fa40 f202 	asr.w	r2, r0, r2
 800d2e2:	7820      	ldrb	r0, [r4, #0]
 800d2e4:	4002      	ands	r2, r0
 800d2e6:	4311      	orrs	r1, r2
 800d2e8:	7021      	strb	r1, [r4, #0]
 800d2ea:	f10b 0301 	add.w	r3, fp, #1
 800d2ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d2f2:	f023 0203 	bic.w	r2, r3, #3
 800d2f6:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800d2fa:	fa43 fb02 	asr.w	fp, r3, r2
 800d2fe:	f10c 0c01 	add.w	ip, ip, #1
 800d302:	e7dc      	b.n	800d2be <LCD_ReadRectEx+0xee>
 800d304:	45bc      	cmp	ip, r7
 800d306:	dc4f      	bgt.n	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d308:	4661      	mov	r1, ip
 800d30a:	462a      	mov	r2, r5
 800d30c:	f8cd c00c 	str.w	ip, [sp, #12]
 800d310:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d312:	47c0      	blx	r8
 800d314:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800d318:	f1c2 0104 	rsb	r1, r2, #4
 800d31c:	fa00 f101 	lsl.w	r1, r0, r1
 800d320:	200f      	movs	r0, #15
 800d322:	fa00 f202 	lsl.w	r2, r0, r2
 800d326:	7820      	ldrb	r0, [r4, #0]
 800d328:	4002      	ands	r2, r0
 800d32a:	4311      	orrs	r1, r2
 800d32c:	7021      	strb	r1, [r4, #0]
 800d32e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d332:	445c      	add	r4, fp
 800d334:	f10c 0c01 	add.w	ip, ip, #1
 800d338:	f08b 0b01 	eor.w	fp, fp, #1
 800d33c:	e7e2      	b.n	800d304 <LCD_ReadRectEx+0x134>
 800d33e:	4273      	negs	r3, r6
 800d340:	1ba2      	subs	r2, r4, r6
 800d342:	45bc      	cmp	ip, r7
 800d344:	9305      	str	r3, [sp, #20]
 800d346:	4462      	add	r2, ip
 800d348:	dc0e      	bgt.n	800d368 <LCD_ReadRectEx+0x198>
 800d34a:	4661      	mov	r1, ip
 800d34c:	462a      	mov	r2, r5
 800d34e:	f8cd c00c 	str.w	ip, [sp, #12]
 800d352:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d354:	47c0      	blx	r8
 800d356:	9a05      	ldr	r2, [sp, #20]
 800d358:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d35c:	4422      	add	r2, r4
 800d35e:	f802 000c 	strb.w	r0, [r2, ip]
 800d362:	f10c 0c01 	add.w	ip, ip, #1
 800d366:	e7ea      	b.n	800d33e <LCD_ReadRectEx+0x16e>
 800d368:	4614      	mov	r4, r2
 800d36a:	e01d      	b.n	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d36c:	45bc      	cmp	ip, r7
 800d36e:	dc1b      	bgt.n	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d370:	4661      	mov	r1, ip
 800d372:	f8cd c00c 	str.w	ip, [sp, #12]
 800d376:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d378:	462a      	mov	r2, r5
 800d37a:	47c0      	blx	r8
 800d37c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d380:	f824 0b02 	strh.w	r0, [r4], #2
 800d384:	f10c 0c01 	add.w	ip, ip, #1
 800d388:	e7f0      	b.n	800d36c <LCD_ReadRectEx+0x19c>
 800d38a:	45bc      	cmp	ip, r7
 800d38c:	dc0c      	bgt.n	800d3a8 <LCD_ReadRectEx+0x1d8>
 800d38e:	4661      	mov	r1, ip
 800d390:	f8cd c00c 	str.w	ip, [sp, #12]
 800d394:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d396:	462a      	mov	r2, r5
 800d398:	47c0      	blx	r8
 800d39a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d39e:	f844 0b04 	str.w	r0, [r4], #4
 800d3a2:	f10c 0c01 	add.w	ip, ip, #1
 800d3a6:	e7f0      	b.n	800d38a <LCD_ReadRectEx+0x1ba>
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	e741      	b.n	800d230 <LCD_ReadRectEx+0x60>
 800d3ac:	b007      	add	sp, #28
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20000020 	.word	0x20000020

0800d3b8 <GUI_ReadRectEx>:
 800d3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ba:	4d16      	ldr	r5, [pc, #88]	; (800d414 <GUI_ReadRectEx+0x5c>)
 800d3bc:	9e05      	ldr	r6, [sp, #20]
 800d3be:	682d      	ldr	r5, [r5, #0]
 800d3c0:	9c06      	ldr	r4, [sp, #24]
 800d3c2:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800d3c6:	42b8      	cmp	r0, r7
 800d3c8:	bfb8      	it	lt
 800d3ca:	4638      	movlt	r0, r7
 800d3cc:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800d3d0:	42ba      	cmp	r2, r7
 800d3d2:	bfa8      	it	ge
 800d3d4:	463a      	movge	r2, r7
 800d3d6:	4282      	cmp	r2, r0
 800d3d8:	db1b      	blt.n	800d412 <GUI_ReadRectEx+0x5a>
 800d3da:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800d3de:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800d3e2:	42b9      	cmp	r1, r7
 800d3e4:	bfb8      	it	lt
 800d3e6:	4639      	movlt	r1, r7
 800d3e8:	42ab      	cmp	r3, r5
 800d3ea:	bfa8      	it	ge
 800d3ec:	462b      	movge	r3, r5
 800d3ee:	428b      	cmp	r3, r1
 800d3f0:	db0f      	blt.n	800d412 <GUI_ReadRectEx+0x5a>
 800d3f2:	68e5      	ldr	r5, [r4, #12]
 800d3f4:	682d      	ldr	r5, [r5, #0]
 800d3f6:	f035 0704 	bics.w	r7, r5, #4
 800d3fa:	d105      	bne.n	800d408 <GUI_ReadRectEx+0x50>
 800d3fc:	9605      	str	r6, [sp, #20]
 800d3fe:	9406      	str	r4, [sp, #24]
 800d400:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d404:	f7ff bee4 	b.w	800d1d0 <LCD_ReadRectEx>
 800d408:	6825      	ldr	r5, [r4, #0]
 800d40a:	2d00      	cmp	r5, #0
 800d40c:	d0f6      	beq.n	800d3fc <GUI_ReadRectEx+0x44>
 800d40e:	462c      	mov	r4, r5
 800d410:	e7ef      	b.n	800d3f2 <GUI_ReadRectEx+0x3a>
 800d412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d414:	20000020 	.word	0x20000020

0800d418 <LCD_GetNumLayers>:
 800d418:	b510      	push	{r4, lr}
 800d41a:	2000      	movs	r0, #0
 800d41c:	f7fc fa5c 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800d420:	1c04      	adds	r4, r0, #0
 800d422:	f04f 0001 	mov.w	r0, #1
 800d426:	bf18      	it	ne
 800d428:	2401      	movne	r4, #1
 800d42a:	f7fc fa55 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800d42e:	b100      	cbz	r0, 800d432 <LCD_GetNumLayers+0x1a>
 800d430:	3401      	adds	r4, #1
 800d432:	4620      	mov	r0, r4
 800d434:	bd10      	pop	{r4, pc}
	...

0800d438 <LCD_AA_SetAndMask>:
 800d438:	4b02      	ldr	r3, [pc, #8]	; (800d444 <LCD_AA_SetAndMask+0xc>)
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	6018      	str	r0, [r3, #0]
 800d43e:	4610      	mov	r0, r2
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000030 	.word	0x20000030

0800d448 <GUI__SetPixelAlpha>:
 800d448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	4f15      	ldr	r7, [pc, #84]	; (800d4a4 <GUI__SetPixelAlpha+0x5c>)
 800d44e:	683c      	ldr	r4, [r7, #0]
 800d450:	4699      	mov	r9, r3
 800d452:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d456:	4299      	cmp	r1, r3
 800d458:	4606      	mov	r6, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	4690      	mov	r8, r2
 800d45e:	db1f      	blt.n	800d4a0 <GUI__SetPixelAlpha+0x58>
 800d460:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d464:	4299      	cmp	r1, r3
 800d466:	dc1b      	bgt.n	800d4a0 <GUI__SetPixelAlpha+0x58>
 800d468:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d46c:	4298      	cmp	r0, r3
 800d46e:	db17      	blt.n	800d4a0 <GUI__SetPixelAlpha+0x58>
 800d470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d474:	4298      	cmp	r0, r3
 800d476:	dc13      	bgt.n	800d4a0 <GUI__SetPixelAlpha+0x58>
 800d478:	f001 fb74 	bl	800eb64 <LCD_GetPixelColor>
 800d47c:	4642      	mov	r2, r8
 800d47e:	4601      	mov	r1, r0
 800d480:	4648      	mov	r0, r9
 800d482:	f7fb fd85 	bl	8008f90 <GUI__MixColors>
 800d486:	f7fb fcf1 	bl	8008e6c <LCD_Color2Index>
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	7c51      	ldrb	r1, [r2, #17]
 800d48e:	4a06      	ldr	r2, [pc, #24]	; (800d4a8 <GUI__SetPixelAlpha+0x60>)
 800d490:	4603      	mov	r3, r0
 800d492:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d496:	68c1      	ldr	r1, [r0, #12]
 800d498:	462a      	mov	r2, r5
 800d49a:	698c      	ldr	r4, [r1, #24]
 800d49c:	4631      	mov	r1, r6
 800d49e:	47a0      	blx	r4
 800d4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4a4:	20000020 	.word	0x20000020
 800d4a8:	20022eac 	.word	0x20022eac

0800d4ac <GUI__ManageCacheEx>:
 800d4ac:	2801      	cmp	r0, #1
 800d4ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	460d      	mov	r5, r1
 800d4b4:	dc65      	bgt.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d4b6:	4b34      	ldr	r3, [pc, #208]	; (800d588 <GUI__ManageCacheEx+0xdc>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	b103      	cbz	r3, 800d4be <GUI__ManageCacheEx+0x12>
 800d4bc:	4798      	blx	r3
 800d4be:	2d01      	cmp	r5, #1
 800d4c0:	d004      	beq.n	800d4cc <GUI__ManageCacheEx+0x20>
 800d4c2:	2d02      	cmp	r5, #2
 800d4c4:	d021      	beq.n	800d50a <GUI__ManageCacheEx+0x5e>
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	d15b      	bne.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d4ca:	e035      	b.n	800d538 <GUI__ManageCacheEx+0x8c>
 800d4cc:	4e2f      	ldr	r6, [pc, #188]	; (800d58c <GUI__ManageCacheEx+0xe0>)
 800d4ce:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800d4d2:	b9b7      	cbnz	r7, 800d502 <GUI__ManageCacheEx+0x56>
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f7fc f9ff 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800d4da:	9001      	str	r0, [sp, #4]
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d050      	beq.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d4e0:	68c3      	ldr	r3, [r0, #12]
 800d4e2:	210d      	movs	r1, #13
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	a801      	add	r0, sp, #4
 800d4e8:	4798      	blx	r3
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d048      	beq.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d4f0:	9801      	ldr	r0, [sp, #4]
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	4798      	blx	r3
 800d4f6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800d500:	e018      	b.n	800d534 <GUI__ManageCacheEx+0x88>
 800d502:	3701      	adds	r7, #1
 800d504:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800d508:	e03b      	b.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d50a:	4620      	mov	r0, r4
 800d50c:	f7fc f9e4 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800d510:	9001      	str	r0, [sp, #4]
 800d512:	2800      	cmp	r0, #0
 800d514:	d035      	beq.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d516:	68c3      	ldr	r3, [r0, #12]
 800d518:	210d      	movs	r1, #13
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	a801      	add	r0, sp, #4
 800d51e:	4798      	blx	r3
 800d520:	4604      	mov	r4, r0
 800d522:	2800      	cmp	r0, #0
 800d524:	d02d      	beq.n	800d582 <GUI__ManageCacheEx+0xd6>
 800d526:	4b1a      	ldr	r3, [pc, #104]	; (800d590 <GUI__ManageCacheEx+0xe4>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	b103      	cbz	r3, 800d52e <GUI__ManageCacheEx+0x82>
 800d52c:	4798      	blx	r3
 800d52e:	9801      	ldr	r0, [sp, #4]
 800d530:	2102      	movs	r1, #2
 800d532:	47a0      	blx	r4
 800d534:	2000      	movs	r0, #0
 800d536:	e025      	b.n	800d584 <GUI__ManageCacheEx+0xd8>
 800d538:	4d14      	ldr	r5, [pc, #80]	; (800d58c <GUI__ManageCacheEx+0xe0>)
 800d53a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d001      	beq.n	800d546 <GUI__ManageCacheEx+0x9a>
 800d542:	2001      	movs	r0, #1
 800d544:	e015      	b.n	800d572 <GUI__ManageCacheEx+0xc6>
 800d546:	4620      	mov	r0, r4
 800d548:	f7fc f9c6 	bl	80098d8 <GUI_DEVICE__GetpDriver>
 800d54c:	9001      	str	r0, [sp, #4]
 800d54e:	2800      	cmp	r0, #0
 800d550:	d0f7      	beq.n	800d542 <GUI__ManageCacheEx+0x96>
 800d552:	68c3      	ldr	r3, [r0, #12]
 800d554:	210d      	movs	r1, #13
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	a801      	add	r0, sp, #4
 800d55a:	4798      	blx	r3
 800d55c:	4606      	mov	r6, r0
 800d55e:	2800      	cmp	r0, #0
 800d560:	d0ef      	beq.n	800d542 <GUI__ManageCacheEx+0x96>
 800d562:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <GUI__ManageCacheEx+0xe4>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	b103      	cbz	r3, 800d56a <GUI__ManageCacheEx+0xbe>
 800d568:	4798      	blx	r3
 800d56a:	9801      	ldr	r0, [sp, #4]
 800d56c:	2100      	movs	r1, #0
 800d56e:	47b0      	blx	r6
 800d570:	2000      	movs	r0, #0
 800d572:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d576:	2b00      	cmp	r3, #0
 800d578:	bf18      	it	ne
 800d57a:	3b01      	subne	r3, #1
 800d57c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800d580:	e000      	b.n	800d584 <GUI__ManageCacheEx+0xd8>
 800d582:	2001      	movs	r0, #1
 800d584:	b003      	add	sp, #12
 800d586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d588:	20022b2c 	.word	0x20022b2c
 800d58c:	20022b24 	.word	0x20022b24
 800d590:	20022b20 	.word	0x20022b20

0800d594 <GUI__ManageCache>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <GUI__ManageCache+0xc>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4601      	mov	r1, r0
 800d59a:	7c58      	ldrb	r0, [r3, #17]
 800d59c:	f7ff bf86 	b.w	800d4ac <GUI__ManageCacheEx>
 800d5a0:	20000020 	.word	0x20000020

0800d5a4 <GUI__IntersectRects>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d5aa:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d5ae:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d5b2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800d5b6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800d5ba:	429c      	cmp	r4, r3
 800d5bc:	bfb8      	it	lt
 800d5be:	461c      	movlt	r4, r3
 800d5c0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d5c4:	429d      	cmp	r5, r3
 800d5c6:	bfa8      	it	ge
 800d5c8:	462b      	movge	r3, r5
 800d5ca:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800d5ce:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d5d2:	42ae      	cmp	r6, r5
 800d5d4:	bfb8      	it	lt
 800d5d6:	4635      	movlt	r5, r6
 800d5d8:	b2a4      	uxth	r4, r4
 800d5da:	b2ad      	uxth	r5, r5
 800d5dc:	4291      	cmp	r1, r2
 800d5de:	bfb8      	it	lt
 800d5e0:	460a      	movlt	r2, r1
 800d5e2:	8004      	strh	r4, [r0, #0]
 800d5e4:	8085      	strh	r5, [r0, #4]
 800d5e6:	b224      	sxth	r4, r4
 800d5e8:	b22d      	sxth	r5, r5
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	b292      	uxth	r2, r2
 800d5ee:	42a5      	cmp	r5, r4
 800d5f0:	8043      	strh	r3, [r0, #2]
 800d5f2:	80c2      	strh	r2, [r0, #6]
 800d5f4:	db06      	blt.n	800d604 <GUI__IntersectRects+0x60>
 800d5f6:	b210      	sxth	r0, r2
 800d5f8:	b21b      	sxth	r3, r3
 800d5fa:	4298      	cmp	r0, r3
 800d5fc:	bfb4      	ite	lt
 800d5fe:	2000      	movlt	r0, #0
 800d600:	2001      	movge	r0, #1
 800d602:	bd70      	pop	{r4, r5, r6, pc}
 800d604:	2000      	movs	r0, #0
 800d606:	bd70      	pop	{r4, r5, r6, pc}

0800d608 <GUI__IntersectRect>:
 800d608:	880b      	ldrh	r3, [r1, #0]
 800d60a:	b510      	push	{r4, lr}
 800d60c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d610:	b21a      	sxth	r2, r3
 800d612:	4294      	cmp	r4, r2
 800d614:	bfb8      	it	lt
 800d616:	8003      	strhlt	r3, [r0, #0]
 800d618:	884b      	ldrh	r3, [r1, #2]
 800d61a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800d61e:	b21a      	sxth	r2, r3
 800d620:	4294      	cmp	r4, r2
 800d622:	bfb8      	it	lt
 800d624:	8043      	strhlt	r3, [r0, #2]
 800d626:	888b      	ldrh	r3, [r1, #4]
 800d628:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d62c:	b21a      	sxth	r2, r3
 800d62e:	4294      	cmp	r4, r2
 800d630:	bfc8      	it	gt
 800d632:	8083      	strhgt	r3, [r0, #4]
 800d634:	88cb      	ldrh	r3, [r1, #6]
 800d636:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d63a:	b21a      	sxth	r2, r3
 800d63c:	4291      	cmp	r1, r2
 800d63e:	bfc8      	it	gt
 800d640:	80c3      	strhgt	r3, [r0, #6]
 800d642:	bd10      	pop	{r4, pc}

0800d644 <GUI__ExpandPixelIndicesEx>:
 800d644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d648:	1e0c      	subs	r4, r1, #0
 800d64a:	4605      	mov	r5, r0
 800d64c:	f340 80b3 	ble.w	800d7b6 <GUI__ExpandPixelIndicesEx+0x172>
 800d650:	2a08      	cmp	r2, #8
 800d652:	685f      	ldr	r7, [r3, #4]
 800d654:	dd04      	ble.n	800d660 <GUI__ExpandPixelIndicesEx+0x1c>
 800d656:	2a10      	cmp	r2, #16
 800d658:	f340 8098 	ble.w	800d78c <GUI__ExpandPixelIndicesEx+0x148>
 800d65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d660:	3a01      	subs	r2, #1
 800d662:	2a07      	cmp	r2, #7
 800d664:	f200 80a7 	bhi.w	800d7b6 <GUI__ExpandPixelIndicesEx+0x172>
 800d668:	e8df f002 	tbb	[pc, r2]
 800d66c:	58a52d04 	.word	0x58a52d04
 800d670:	83a5a5a5 	.word	0x83a5a5a5
 800d674:	1e66      	subs	r6, r4, #1
 800d676:	10f2      	asrs	r2, r6, #3
 800d678:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800d67c:	3b01      	subs	r3, #1
 800d67e:	eb05 0802 	add.w	r8, r5, r2
 800d682:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d686:	f006 0607 	and.w	r6, r6, #7
 800d68a:	f815 a002 	ldrb.w	sl, [r5, r2]
 800d68e:	2580      	movs	r5, #128	; 0x80
 800d690:	4135      	asrs	r5, r6
 800d692:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d696:	b2ed      	uxtb	r5, r5
 800d698:	f1c6 0307 	rsb	r3, r6, #7
 800d69c:	ea0a 0005 	and.w	r0, sl, r5
 800d6a0:	4118      	asrs	r0, r3
 800d6a2:	47b8      	blx	r7
 800d6a4:	f849 0904 	str.w	r0, [r9], #-4
 800d6a8:	b936      	cbnz	r6, 800d6b8 <GUI__ExpandPixelIndicesEx+0x74>
 800d6aa:	f898 a000 	ldrb.w	sl, [r8]
 800d6ae:	2501      	movs	r5, #1
 800d6b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d6b4:	2607      	movs	r6, #7
 800d6b6:	e002      	b.n	800d6be <GUI__ExpandPixelIndicesEx+0x7a>
 800d6b8:	006d      	lsls	r5, r5, #1
 800d6ba:	3e01      	subs	r6, #1
 800d6bc:	b2ed      	uxtb	r5, r5
 800d6be:	3c01      	subs	r4, #1
 800d6c0:	d1ea      	bne.n	800d698 <GUI__ExpandPixelIndicesEx+0x54>
 800d6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c6:	1e66      	subs	r6, r4, #1
 800d6c8:	10b2      	asrs	r2, r6, #2
 800d6ca:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	f006 0603 	and.w	r6, r6, #3
 800d6d4:	eb05 0802 	add.w	r8, r5, r2
 800d6d8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d6dc:	f815 a002 	ldrb.w	sl, [r5, r2]
 800d6e0:	0073      	lsls	r3, r6, #1
 800d6e2:	25c0      	movs	r5, #192	; 0xc0
 800d6e4:	411d      	asrs	r5, r3
 800d6e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d6ea:	b2ed      	uxtb	r5, r5
 800d6ec:	0073      	lsls	r3, r6, #1
 800d6ee:	f1c3 0306 	rsb	r3, r3, #6
 800d6f2:	ea0a 0005 	and.w	r0, sl, r5
 800d6f6:	4118      	asrs	r0, r3
 800d6f8:	47b8      	blx	r7
 800d6fa:	f849 0904 	str.w	r0, [r9], #-4
 800d6fe:	b936      	cbnz	r6, 800d70e <GUI__ExpandPixelIndicesEx+0xca>
 800d700:	2503      	movs	r5, #3
 800d702:	f898 a000 	ldrb.w	sl, [r8]
 800d706:	462e      	mov	r6, r5
 800d708:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d70c:	e002      	b.n	800d714 <GUI__ExpandPixelIndicesEx+0xd0>
 800d70e:	00ad      	lsls	r5, r5, #2
 800d710:	3e01      	subs	r6, #1
 800d712:	b2ed      	uxtb	r5, r5
 800d714:	3c01      	subs	r4, #1
 800d716:	d1e9      	bne.n	800d6ec <GUI__ExpandPixelIndicesEx+0xa8>
 800d718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71c:	1e66      	subs	r6, r4, #1
 800d71e:	1072      	asrs	r2, r6, #1
 800d720:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800d724:	3b01      	subs	r3, #1
 800d726:	f006 0601 	and.w	r6, r6, #1
 800d72a:	eb05 0802 	add.w	r8, r5, r2
 800d72e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d732:	f815 a002 	ldrb.w	sl, [r5, r2]
 800d736:	00b3      	lsls	r3, r6, #2
 800d738:	25f0      	movs	r5, #240	; 0xf0
 800d73a:	411d      	asrs	r5, r3
 800d73c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d740:	b2ed      	uxtb	r5, r5
 800d742:	00b3      	lsls	r3, r6, #2
 800d744:	f1c3 0304 	rsb	r3, r3, #4
 800d748:	ea0a 0005 	and.w	r0, sl, r5
 800d74c:	4118      	asrs	r0, r3
 800d74e:	47b8      	blx	r7
 800d750:	f849 0904 	str.w	r0, [r9], #-4
 800d754:	b936      	cbnz	r6, 800d764 <GUI__ExpandPixelIndicesEx+0x120>
 800d756:	f898 a000 	ldrb.w	sl, [r8]
 800d75a:	250f      	movs	r5, #15
 800d75c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d760:	2601      	movs	r6, #1
 800d762:	e002      	b.n	800d76a <GUI__ExpandPixelIndicesEx+0x126>
 800d764:	012d      	lsls	r5, r5, #4
 800d766:	b2ed      	uxtb	r5, r5
 800d768:	2600      	movs	r6, #0
 800d76a:	3c01      	subs	r4, #1
 800d76c:	d1e9      	bne.n	800d742 <GUI__ExpandPixelIndicesEx+0xfe>
 800d76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d772:	192e      	adds	r6, r5, r4
 800d774:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800d778:	1b34      	subs	r4, r6, r4
 800d77a:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800d77e:	47b8      	blx	r7
 800d780:	42a6      	cmp	r6, r4
 800d782:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d786:	d1f8      	bne.n	800d77a <GUI__ExpandPixelIndicesEx+0x136>
 800d788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d78c:	695e      	ldr	r6, [r3, #20]
 800d78e:	b12e      	cbz	r6, 800d79c <GUI__ExpandPixelIndicesEx+0x158>
 800d790:	4629      	mov	r1, r5
 800d792:	4622      	mov	r2, r4
 800d794:	2302      	movs	r3, #2
 800d796:	47b0      	blx	r6
 800d798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79c:	0064      	lsls	r4, r4, #1
 800d79e:	4425      	add	r5, r4
 800d7a0:	192e      	adds	r6, r5, r4
 800d7a2:	1b2c      	subs	r4, r5, r4
 800d7a4:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 800d7a8:	47b8      	blx	r7
 800d7aa:	42a5      	cmp	r5, r4
 800d7ac:	f846 0d04 	str.w	r0, [r6, #-4]!
 800d7b0:	d1f8      	bne.n	800d7a4 <GUI__ExpandPixelIndicesEx+0x160>
 800d7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d7bc <GUI_SignalEvent>:
 800d7bc:	b508      	push	{r3, lr}
 800d7be:	4b02      	ldr	r3, [pc, #8]	; (800d7c8 <GUI_SignalEvent+0xc>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <GUI_SignalEvent+0xa>
 800d7c4:	4798      	blx	r3
 800d7c6:	bd08      	pop	{r3, pc}
 800d7c8:	20022b30 	.word	0x20022b30

0800d7cc <_GetCharCode>:
 800d7cc:	7800      	ldrb	r0, [r0, #0]
 800d7ce:	4770      	bx	lr

0800d7d0 <_GetCharSize>:
 800d7d0:	2001      	movs	r0, #1
 800d7d2:	4770      	bx	lr

0800d7d4 <_CalcSizeOfChar>:
 800d7d4:	2001      	movs	r0, #1
 800d7d6:	4770      	bx	lr

0800d7d8 <_Encode>:
 800d7d8:	7001      	strb	r1, [r0, #0]
 800d7da:	2001      	movs	r0, #1
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <_Unlink>:
 800d7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	b1f0      	cbz	r0, 800d824 <_Unlink+0x44>
 800d7e6:	f7fc fc07 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d7ea:	4b0f      	ldr	r3, [pc, #60]	; (800d828 <_Unlink+0x48>)
 800d7ec:	9000      	str	r0, [sp, #0]
 800d7ee:	681c      	ldr	r4, [r3, #0]
 800d7f0:	42ac      	cmp	r4, r5
 800d7f2:	d104      	bne.n	800d7fe <_Unlink+0x1e>
 800d7f4:	6842      	ldr	r2, [r0, #4]
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	e011      	b.n	800d81e <_Unlink+0x3e>
 800d7fa:	f7fc fc0b 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d7fe:	b174      	cbz	r4, 800d81e <_Unlink+0x3e>
 800d800:	4620      	mov	r0, r4
 800d802:	f7fc fbf9 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d806:	4603      	mov	r3, r0
 800d808:	a802      	add	r0, sp, #8
 800d80a:	685c      	ldr	r4, [r3, #4]
 800d80c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d810:	42ac      	cmp	r4, r5
 800d812:	d1f2      	bne.n	800d7fa <_Unlink+0x1a>
 800d814:	9a00      	ldr	r2, [sp, #0]
 800d816:	6852      	ldr	r2, [r2, #4]
 800d818:	605a      	str	r2, [r3, #4]
 800d81a:	f7fc fbfb 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d81e:	4668      	mov	r0, sp
 800d820:	f7fc fbf8 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d824:	b003      	add	sp, #12
 800d826:	bd30      	pop	{r4, r5, pc}
 800d828:	20022b38 	.word	0x20022b38

0800d82c <GUI_TIMER__GetFirstTimer>:
 800d82c:	2300      	movs	r3, #0
 800d82e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d830:	6003      	str	r3, [r0, #0]
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <GUI_TIMER__GetFirstTimer+0x2c>)
 800d834:	681c      	ldr	r4, [r3, #0]
 800d836:	4605      	mov	r5, r0
 800d838:	b154      	cbz	r4, 800d850 <GUI_TIMER__GetFirstTimer+0x24>
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7fc fbdc 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d840:	ab02      	add	r3, sp, #8
 800d842:	6902      	ldr	r2, [r0, #16]
 800d844:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d848:	602a      	str	r2, [r5, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fc fbe2 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d850:	4620      	mov	r0, r4
 800d852:	b003      	add	sp, #12
 800d854:	bd30      	pop	{r4, r5, pc}
 800d856:	bf00      	nop
 800d858:	20022b34 	.word	0x20022b34

0800d85c <GUI_TIMER__GetNextTimerLin>:
 800d85c:	2300      	movs	r3, #0
 800d85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d860:	600b      	str	r3, [r1, #0]
 800d862:	460e      	mov	r6, r1
 800d864:	4604      	mov	r4, r0
 800d866:	b190      	cbz	r0, 800d88e <GUI_TIMER__GetNextTimerLin+0x32>
 800d868:	f7fc fbc6 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d86c:	ad02      	add	r5, sp, #8
 800d86e:	6884      	ldr	r4, [r0, #8]
 800d870:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d874:	b144      	cbz	r4, 800d888 <GUI_TIMER__GetNextTimerLin+0x2c>
 800d876:	4628      	mov	r0, r5
 800d878:	f7fc fbcc 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d87c:	4620      	mov	r0, r4
 800d87e:	f7fc fbbb 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d882:	6903      	ldr	r3, [r0, #16]
 800d884:	9001      	str	r0, [sp, #4]
 800d886:	6033      	str	r3, [r6, #0]
 800d888:	4628      	mov	r0, r5
 800d88a:	f7fc fbc3 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d88e:	4620      	mov	r0, r4
 800d890:	b002      	add	sp, #8
 800d892:	bd70      	pop	{r4, r5, r6, pc}

0800d894 <GUI_TIMER_Delete>:
 800d894:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d896:	4604      	mov	r4, r0
 800d898:	b358      	cbz	r0, 800d8f2 <GUI_TIMER_Delete+0x5e>
 800d89a:	4d17      	ldr	r5, [pc, #92]	; (800d8f8 <GUI_TIMER_Delete+0x64>)
 800d89c:	682e      	ldr	r6, [r5, #0]
 800d89e:	4286      	cmp	r6, r0
 800d8a0:	d10b      	bne.n	800d8ba <GUI_TIMER_Delete+0x26>
 800d8a2:	f7fc fba9 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d8a6:	ab02      	add	r3, sp, #8
 800d8a8:	6882      	ldr	r2, [r0, #8]
 800d8aa:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d8ae:	602a      	str	r2, [r5, #0]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	e016      	b.n	800d8e2 <GUI_TIMER_Delete+0x4e>
 800d8b4:	4668      	mov	r0, sp
 800d8b6:	f7fc fbad 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f7fc fb9c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d8c0:	6886      	ldr	r6, [r0, #8]
 800d8c2:	ad02      	add	r5, sp, #8
 800d8c4:	42a6      	cmp	r6, r4
 800d8c6:	f845 0d08 	str.w	r0, [r5, #-8]!
 800d8ca:	d1f3      	bne.n	800d8b4 <GUI_TIMER_Delete+0x20>
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f7fc fb93 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d8d2:	9b00      	ldr	r3, [sp, #0]
 800d8d4:	6882      	ldr	r2, [r0, #8]
 800d8d6:	9001      	str	r0, [sp, #4]
 800d8d8:	609a      	str	r2, [r3, #8]
 800d8da:	a801      	add	r0, sp, #4
 800d8dc:	f7fc fb9a 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d8e0:	4668      	mov	r0, sp
 800d8e2:	f7fc fb97 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f7ff ff7a 	bl	800d7e0 <_Unlink>
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f7fc fbb1 	bl	800a054 <GUI_ALLOC_Free>
 800d8f2:	b002      	add	sp, #8
 800d8f4:	bd70      	pop	{r4, r5, r6, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20022b34 	.word	0x20022b34

0800d8fc <GUI_TIMER_GetFlag>:
 800d8fc:	b513      	push	{r0, r1, r4, lr}
 800d8fe:	460c      	mov	r4, r1
 800d900:	b168      	cbz	r0, 800d91e <GUI_TIMER_GetFlag+0x22>
 800d902:	f7fc fb79 	bl	8009ff8 <GUI_ALLOC_LockH>
 800d906:	ab02      	add	r3, sp, #8
 800d908:	8982      	ldrh	r2, [r0, #12]
 800d90a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d90e:	4214      	tst	r4, r2
 800d910:	4618      	mov	r0, r3
 800d912:	bf0c      	ite	eq
 800d914:	2400      	moveq	r4, #0
 800d916:	2401      	movne	r4, #1
 800d918:	f7fc fb7c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800d91c:	e000      	b.n	800d920 <GUI_TIMER_GetFlag+0x24>
 800d91e:	2401      	movs	r4, #1
 800d920:	4620      	mov	r0, r4
 800d922:	b002      	add	sp, #8
 800d924:	bd10      	pop	{r4, pc}
	...

0800d928 <GUI_SetOrg>:
 800d928:	460a      	mov	r2, r1
 800d92a:	4908      	ldr	r1, [pc, #32]	; (800d94c <GUI_SetOrg+0x24>)
 800d92c:	b510      	push	{r4, lr}
 800d92e:	8008      	strh	r0, [r1, #0]
 800d930:	4907      	ldr	r1, [pc, #28]	; (800d950 <GUI_SetOrg+0x28>)
 800d932:	800a      	strh	r2, [r1, #0]
 800d934:	4907      	ldr	r1, [pc, #28]	; (800d954 <GUI_SetOrg+0x2c>)
 800d936:	6809      	ldr	r1, [r1, #0]
 800d938:	4603      	mov	r3, r0
 800d93a:	7c48      	ldrb	r0, [r1, #17]
 800d93c:	4906      	ldr	r1, [pc, #24]	; (800d958 <GUI_SetOrg+0x30>)
 800d93e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d942:	68c1      	ldr	r1, [r0, #12]
 800d944:	6a0c      	ldr	r4, [r1, #32]
 800d946:	4619      	mov	r1, r3
 800d948:	47a0      	blx	r4
 800d94a:	bd10      	pop	{r4, pc}
 800d94c:	20022e94 	.word	0x20022e94
 800d950:	20022e88 	.word	0x20022e88
 800d954:	20000020 	.word	0x20000020
 800d958:	20022eac 	.word	0x20022eac

0800d95c <GUI_SetDrawMode>:
 800d95c:	f7fa bfbc 	b.w	80088d8 <LCD_SetDrawMode>

0800d960 <GL_SetDefault>:
 800d960:	b508      	push	{r3, lr}
 800d962:	2000      	movs	r0, #0
 800d964:	f000 f81c 	bl	800d9a0 <GUI_SetBkColor>
 800d968:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d96c:	f000 f81a 	bl	800d9a4 <GUI_SetColor>
 800d970:	2001      	movs	r0, #1
 800d972:	f000 f85d 	bl	800da30 <GUI_SetPenSize>
 800d976:	2000      	movs	r0, #0
 800d978:	f001 fac6 	bl	800ef08 <GUI_SetTextAlign>
 800d97c:	2000      	movs	r0, #0
 800d97e:	f001 fab9 	bl	800eef4 <GUI_SetTextMode>
 800d982:	2000      	movs	r0, #0
 800d984:	f7ff ffea 	bl	800d95c <GUI_SetDrawMode>
 800d988:	4b04      	ldr	r3, [pc, #16]	; (800d99c <GL_SetDefault+0x3c>)
 800d98a:	6818      	ldr	r0, [r3, #0]
 800d98c:	f001 face 	bl	800ef2c <GUI_SetFont>
 800d990:	2000      	movs	r0, #0
 800d992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d996:	f001 bac1 	b.w	800ef1c <GUI_SetLineStyle>
 800d99a:	bf00      	nop
 800d99c:	20000024 	.word	0x20000024

0800d9a0 <GUI_SetBkColor>:
 800d9a0:	f7fb babc 	b.w	8008f1c <LCD_SetBkColor>

0800d9a4 <GUI_SetColor>:
 800d9a4:	f7fb bac2 	b.w	8008f2c <LCD_SetColor>

0800d9a8 <GUI__AlphaPreserveTrans>:
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	4b07      	ldr	r3, [pc, #28]	; (800d9c8 <GUI__AlphaPreserveTrans+0x20>)
 800d9ac:	781c      	ldrb	r4, [r3, #0]
 800d9ae:	b120      	cbz	r0, 800d9ba <GUI__AlphaPreserveTrans+0x12>
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	701a      	strb	r2, [r3, #0]
 800d9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9b8:	e002      	b.n	800d9c0 <GUI__AlphaPreserveTrans+0x18>
 800d9ba:	7018      	strb	r0, [r3, #0]
 800d9bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d9c0:	f7ff fd3a 	bl	800d438 <LCD_AA_SetAndMask>
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	bd10      	pop	{r4, pc}
 800d9c8:	20022e9d 	.word	0x20022e9d

0800d9cc <GUI_SaveContext_W>:
 800d9cc:	b508      	push	{r3, lr}
 800d9ce:	4b03      	ldr	r3, [pc, #12]	; (800d9dc <GUI_SaveContext_W+0x10>)
 800d9d0:	2270      	movs	r2, #112	; 0x70
 800d9d2:	6819      	ldr	r1, [r3, #0]
 800d9d4:	f001 fbfa 	bl	800f1cc <memcpy>
 800d9d8:	bd08      	pop	{r3, pc}
 800d9da:	bf00      	nop
 800d9dc:	20000020 	.word	0x20000020

0800d9e0 <GUI_RestoreContext>:
 800d9e0:	b508      	push	{r3, lr}
 800d9e2:	4b03      	ldr	r3, [pc, #12]	; (800d9f0 <GUI_RestoreContext+0x10>)
 800d9e4:	4601      	mov	r1, r0
 800d9e6:	2270      	movs	r2, #112	; 0x70
 800d9e8:	6818      	ldr	r0, [r3, #0]
 800d9ea:	f001 fbef 	bl	800f1cc <memcpy>
 800d9ee:	bd08      	pop	{r3, pc}
 800d9f0:	20000020 	.word	0x20000020

0800d9f4 <GUI_RectsIntersect>:
 800d9f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d9f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	dc14      	bgt.n	800da2a <GUI_RectsIntersect+0x36>
 800da00:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800da04:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800da08:	429a      	cmp	r2, r3
 800da0a:	dc0e      	bgt.n	800da2a <GUI_RectsIntersect+0x36>
 800da0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800da10:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	dc08      	bgt.n	800da2a <GUI_RectsIntersect+0x36>
 800da18:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800da1c:	f9b1 2000 	ldrsh.w	r2, [r1]
 800da20:	429a      	cmp	r2, r3
 800da22:	bfcc      	ite	gt
 800da24:	2000      	movgt	r0, #0
 800da26:	2001      	movle	r0, #1
 800da28:	4770      	bx	lr
 800da2a:	2000      	movs	r0, #0
 800da2c:	4770      	bx	lr
	...

0800da30 <GUI_SetPenSize>:
 800da30:	4b02      	ldr	r3, [pc, #8]	; (800da3c <GUI_SetPenSize+0xc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	7e1a      	ldrb	r2, [r3, #24]
 800da36:	7618      	strb	r0, [r3, #24]
 800da38:	4610      	mov	r0, r2
 800da3a:	4770      	bx	lr
 800da3c:	20000020 	.word	0x20000020

0800da40 <GUI_StoreKey>:
 800da40:	4b02      	ldr	r3, [pc, #8]	; (800da4c <GUI_StoreKey+0xc>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	b902      	cbnz	r2, 800da48 <GUI_StoreKey+0x8>
 800da46:	6018      	str	r0, [r3, #0]
 800da48:	f7ff beb8 	b.w	800d7bc <GUI_SignalEvent>
 800da4c:	20022b3c 	.word	0x20022b3c

0800da50 <GUI_PollKeyMsg>:
 800da50:	4a0a      	ldr	r2, [pc, #40]	; (800da7c <GUI_PollKeyMsg+0x2c>)
 800da52:	490b      	ldr	r1, [pc, #44]	; (800da80 <GUI_PollKeyMsg+0x30>)
 800da54:	6813      	ldr	r3, [r2, #0]
 800da56:	6809      	ldr	r1, [r1, #0]
 800da58:	428b      	cmp	r3, r1
 800da5a:	b510      	push	{r4, lr}
 800da5c:	d00b      	beq.n	800da76 <GUI_PollKeyMsg+0x26>
 800da5e:	4c09      	ldr	r4, [pc, #36]	; (800da84 <GUI_PollKeyMsg+0x34>)
 800da60:	42a3      	cmp	r3, r4
 800da62:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da66:	bf14      	ite	ne
 800da68:	3308      	addne	r3, #8
 800da6a:	3b50      	subeq	r3, #80	; 0x50
 800da6c:	6013      	str	r3, [r2, #0]
 800da6e:	f000 f9df 	bl	800de30 <WM_OnKey>
 800da72:	2001      	movs	r0, #1
 800da74:	bd10      	pop	{r4, pc}
 800da76:	2000      	movs	r0, #0
 800da78:	bd10      	pop	{r4, pc}
 800da7a:	bf00      	nop
 800da7c:	20000038 	.word	0x20000038
 800da80:	20000034 	.word	0x20000034
 800da84:	20022b90 	.word	0x20022b90

0800da88 <GUI_MoveRect>:
 800da88:	b168      	cbz	r0, 800daa6 <GUI_MoveRect+0x1e>
 800da8a:	8803      	ldrh	r3, [r0, #0]
 800da8c:	b289      	uxth	r1, r1
 800da8e:	440b      	add	r3, r1
 800da90:	8003      	strh	r3, [r0, #0]
 800da92:	8883      	ldrh	r3, [r0, #4]
 800da94:	4419      	add	r1, r3
 800da96:	8843      	ldrh	r3, [r0, #2]
 800da98:	8081      	strh	r1, [r0, #4]
 800da9a:	b292      	uxth	r2, r2
 800da9c:	4413      	add	r3, r2
 800da9e:	8043      	strh	r3, [r0, #2]
 800daa0:	88c3      	ldrh	r3, [r0, #6]
 800daa2:	441a      	add	r2, r3
 800daa4:	80c2      	strh	r2, [r0, #6]
 800daa6:	4770      	bx	lr

0800daa8 <GUI_MergeRect>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	b338      	cbz	r0, 800dafc <GUI_MergeRect+0x54>
 800daac:	b309      	cbz	r1, 800daf2 <GUI_MergeRect+0x4a>
 800daae:	b30a      	cbz	r2, 800daf4 <GUI_MergeRect+0x4c>
 800dab0:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dab4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800dab8:	429c      	cmp	r4, r3
 800daba:	bfb8      	it	lt
 800dabc:	4623      	movlt	r3, r4
 800dabe:	8003      	strh	r3, [r0, #0]
 800dac0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800dac4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800dac8:	429c      	cmp	r4, r3
 800daca:	bfb8      	it	lt
 800dacc:	4623      	movlt	r3, r4
 800dace:	8043      	strh	r3, [r0, #2]
 800dad0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800dad4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800dad8:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800dadc:	429c      	cmp	r4, r3
 800dade:	bfa8      	it	ge
 800dae0:	4623      	movge	r3, r4
 800dae2:	8083      	strh	r3, [r0, #4]
 800dae4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800dae8:	4299      	cmp	r1, r3
 800daea:	bfa8      	it	ge
 800daec:	460b      	movge	r3, r1
 800daee:	80c3      	strh	r3, [r0, #6]
 800daf0:	bd10      	pop	{r4, pc}
 800daf2:	4611      	mov	r1, r2
 800daf4:	680b      	ldr	r3, [r1, #0]
 800daf6:	6003      	str	r3, [r0, #0]
 800daf8:	684b      	ldr	r3, [r1, #4]
 800dafa:	6043      	str	r3, [r0, #4]
 800dafc:	bd10      	pop	{r4, pc}
	...

0800db00 <GUI_GotoXY>:
 800db00:	4b02      	ldr	r3, [pc, #8]	; (800db0c <GUI_GotoXY+0xc>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	8458      	strh	r0, [r3, #34]	; 0x22
 800db06:	8499      	strh	r1, [r3, #36]	; 0x24
 800db08:	2000      	movs	r0, #0
 800db0a:	4770      	bx	lr
 800db0c:	20000020 	.word	0x20000020

0800db10 <GUI_GetOrg>:
 800db10:	4b04      	ldr	r3, [pc, #16]	; (800db24 <GUI_GetOrg+0x14>)
 800db12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db16:	6003      	str	r3, [r0, #0]
 800db18:	4b03      	ldr	r3, [pc, #12]	; (800db28 <GUI_GetOrg+0x18>)
 800db1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db1e:	600b      	str	r3, [r1, #0]
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	20022e94 	.word	0x20022e94
 800db28:	20022e88 	.word	0x20022e88

0800db2c <GUI_CalcColorDist>:
 800db2c:	b2cb      	uxtb	r3, r1
 800db2e:	b2c2      	uxtb	r2, r0
 800db30:	1ad2      	subs	r2, r2, r3
 800db32:	b292      	uxth	r2, r2
 800db34:	b293      	uxth	r3, r2
 800db36:	b530      	push	{r4, r5, lr}
 800db38:	041c      	lsls	r4, r3, #16
 800db3a:	bf48      	it	mi
 800db3c:	4253      	negmi	r3, r2
 800db3e:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800db42:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800db46:	ebc5 0202 	rsb	r2, r5, r2
 800db4a:	bf48      	it	mi
 800db4c:	b29b      	uxthmi	r3, r3
 800db4e:	b292      	uxth	r2, r2
 800db50:	0c09      	lsrs	r1, r1, #16
 800db52:	fb13 f403 	smulbb	r4, r3, r3
 800db56:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800db5a:	b293      	uxth	r3, r2
 800db5c:	041d      	lsls	r5, r3, #16
 800db5e:	b289      	uxth	r1, r1
 800db60:	b288      	uxth	r0, r1
 800db62:	bf44      	itt	mi
 800db64:	4253      	negmi	r3, r2
 800db66:	b29b      	uxthmi	r3, r3
 800db68:	0402      	lsls	r2, r0, #16
 800db6a:	bf48      	it	mi
 800db6c:	4248      	negmi	r0, r1
 800db6e:	fb13 4303 	smlabb	r3, r3, r3, r4
 800db72:	bf48      	it	mi
 800db74:	b280      	uxthmi	r0, r0
 800db76:	fb00 3000 	mla	r0, r0, r0, r3
 800db7a:	bd30      	pop	{r4, r5, pc}

0800db7c <GUI_ALLOC_AllocZero>:
 800db7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db7e:	4605      	mov	r5, r0
 800db80:	f7fc fc82 	bl	800a488 <GUI_ALLOC_AllocNoInit>
 800db84:	4606      	mov	r6, r0
 800db86:	b158      	cbz	r0, 800dba0 <GUI_ALLOC_AllocZero+0x24>
 800db88:	f7fc fa36 	bl	8009ff8 <GUI_ALLOC_LockH>
 800db8c:	ac02      	add	r4, sp, #8
 800db8e:	2100      	movs	r1, #0
 800db90:	f844 0d04 	str.w	r0, [r4, #-4]!
 800db94:	462a      	mov	r2, r5
 800db96:	f7fb f9d1 	bl	8008f3c <GUI__memset>
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7fc fa3a 	bl	800a014 <GUI_ALLOC_UnlockH>
 800dba0:	4630      	mov	r0, r6
 800dba2:	b002      	add	sp, #8
 800dba4:	bd70      	pop	{r4, r5, r6, pc}

0800dba6 <LCD_Index2Color_M888>:
 800dba6:	b2c2      	uxtb	r2, r0
 800dba8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dbac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbb0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800dbb4:	4318      	orrs	r0, r3
 800dbb6:	4770      	bx	lr

0800dbb8 <LCD_Index2Color_M8888I>:
 800dbb8:	43c3      	mvns	r3, r0
 800dbba:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800dbbe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	b2c2      	uxtb	r2, r0
 800dbc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800dbce:	4318      	orrs	r0, r3
 800dbd0:	4770      	bx	lr

0800dbd2 <_Color2Index_8888>:
 800dbd2:	4770      	bx	lr

0800dbd4 <_GetIndexMask_8888>:
 800dbd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbd8:	4770      	bx	lr

0800dbda <_Color2IndexBulk>:
 800dbda:	b510      	push	{r4, lr}
 800dbdc:	f850 4b04 	ldr.w	r4, [r0], #4
 800dbe0:	600c      	str	r4, [r1, #0]
 800dbe2:	3a01      	subs	r2, #1
 800dbe4:	4419      	add	r1, r3
 800dbe6:	d1f9      	bne.n	800dbdc <_Color2IndexBulk+0x2>
 800dbe8:	bd10      	pop	{r4, pc}

0800dbea <_Index2ColorBulk>:
 800dbea:	b510      	push	{r4, lr}
 800dbec:	6804      	ldr	r4, [r0, #0]
 800dbee:	f841 4b04 	str.w	r4, [r1], #4
 800dbf2:	3a01      	subs	r2, #1
 800dbf4:	4418      	add	r0, r3
 800dbf6:	d1f9      	bne.n	800dbec <_Index2ColorBulk+0x2>
 800dbf8:	bd10      	pop	{r4, pc}

0800dbfa <WM__SendMessageNoPara>:
 800dbfa:	b530      	push	{r4, r5, lr}
 800dbfc:	b085      	sub	sp, #20
 800dbfe:	4604      	mov	r4, r0
 800dc00:	2210      	movs	r2, #16
 800dc02:	460d      	mov	r5, r1
 800dc04:	4668      	mov	r0, sp
 800dc06:	2100      	movs	r1, #0
 800dc08:	f001 fb05 	bl	800f216 <memset>
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f7fc f9e9 	bl	8009fe4 <GUI_ALLOC_h2p>
 800dc12:	6903      	ldr	r3, [r0, #16]
 800dc14:	b11b      	cbz	r3, 800dc1e <WM__SendMessageNoPara+0x24>
 800dc16:	9401      	str	r4, [sp, #4]
 800dc18:	9500      	str	r5, [sp, #0]
 800dc1a:	4668      	mov	r0, sp
 800dc1c:	4798      	blx	r3
 800dc1e:	b005      	add	sp, #20
 800dc20:	bd30      	pop	{r4, r5, pc}
	...

0800dc24 <WM__SendMessage>:
 800dc24:	b570      	push	{r4, r5, r6, lr}
 800dc26:	4c0d      	ldr	r4, [pc, #52]	; (800dc5c <WM__SendMessage+0x38>)
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	2b13      	cmp	r3, #19
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460d      	mov	r5, r1
 800dc30:	dc12      	bgt.n	800dc58 <WM__SendMessage+0x34>
 800dc32:	f7fc f9d7 	bl	8009fe4 <GUI_ALLOC_h2p>
 800dc36:	6903      	ldr	r3, [r0, #16]
 800dc38:	606e      	str	r6, [r5, #4]
 800dc3a:	b143      	cbz	r3, 800dc4e <WM__SendMessage+0x2a>
 800dc3c:	6822      	ldr	r2, [r4, #0]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	3201      	adds	r2, #1
 800dc42:	6022      	str	r2, [r4, #0]
 800dc44:	4798      	blx	r3
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	6023      	str	r3, [r4, #0]
 800dc4c:	bd70      	pop	{r4, r5, r6, pc}
 800dc4e:	4628      	mov	r0, r5
 800dc50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc54:	f7fe b944 	b.w	800bee0 <WM_DefaultProc>
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20022b98 	.word	0x20022b98

0800dc60 <WM_DeleteTimer>:
 800dc60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc62:	4605      	mov	r5, r0
 800dc64:	b168      	cbz	r0, 800dc82 <WM_DeleteTimer+0x22>
 800dc66:	f7fc f9c7 	bl	8009ff8 <GUI_ALLOC_LockH>
 800dc6a:	ac02      	add	r4, sp, #8
 800dc6c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800dc70:	6800      	ldr	r0, [r0, #0]
 800dc72:	f7ff fe0f 	bl	800d894 <GUI_TIMER_Delete>
 800dc76:	4620      	mov	r0, r4
 800dc78:	f7fc f9cc 	bl	800a014 <GUI_ALLOC_UnlockH>
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f7fc f9e9 	bl	800a054 <GUI_ALLOC_Free>
 800dc82:	b003      	add	sp, #12
 800dc84:	bd30      	pop	{r4, r5, pc}

0800dc86 <WM__DeleteAssocTimer>:
 800dc86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc88:	4605      	mov	r5, r0
 800dc8a:	a801      	add	r0, sp, #4
 800dc8c:	f7ff fdce 	bl	800d82c <GUI_TIMER__GetFirstTimer>
 800dc90:	4604      	mov	r4, r0
 800dc92:	b1dc      	cbz	r4, 800dccc <WM__DeleteAssocTimer+0x46>
 800dc94:	4620      	mov	r0, r4
 800dc96:	2101      	movs	r1, #1
 800dc98:	f7ff fe30 	bl	800d8fc <GUI_TIMER_GetFlag>
 800dc9c:	9b01      	ldr	r3, [sp, #4]
 800dc9e:	b183      	cbz	r3, 800dcc2 <WM__DeleteAssocTimer+0x3c>
 800dca0:	b178      	cbz	r0, 800dcc2 <WM__DeleteAssocTimer+0x3c>
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fc f99e 	bl	8009fe4 <GUI_ALLOC_h2p>
 800dca8:	6843      	ldr	r3, [r0, #4]
 800dcaa:	42ab      	cmp	r3, r5
 800dcac:	d109      	bne.n	800dcc2 <WM__DeleteAssocTimer+0x3c>
 800dcae:	4620      	mov	r0, r4
 800dcb0:	a901      	add	r1, sp, #4
 800dcb2:	9e01      	ldr	r6, [sp, #4]
 800dcb4:	f7ff fdd2 	bl	800d85c <GUI_TIMER__GetNextTimerLin>
 800dcb8:	4604      	mov	r4, r0
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f7ff ffd0 	bl	800dc60 <WM_DeleteTimer>
 800dcc0:	e7e7      	b.n	800dc92 <WM__DeleteAssocTimer+0xc>
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	a901      	add	r1, sp, #4
 800dcc6:	f7ff fdc9 	bl	800d85c <GUI_TIMER__GetNextTimerLin>
 800dcca:	e7e1      	b.n	800dc90 <WM__DeleteAssocTimer+0xa>
 800dccc:	b002      	add	sp, #8
 800dcce:	bd70      	pop	{r4, r5, r6, pc}

0800dcd0 <WM_SetSize>:
 800dcd0:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800dcd4:	460e      	mov	r6, r1
 800dcd6:	4690      	mov	r8, r2
 800dcd8:	4607      	mov	r7, r0
 800dcda:	b1d0      	cbz	r0, 800dd12 <WM_SetSize+0x42>
 800dcdc:	f7fc f98c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800dce0:	4603      	mov	r3, r0
 800dce2:	a802      	add	r0, sp, #8
 800dce4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800dce8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dcec:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800dcf0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800dcf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dcf8:	1a8a      	subs	r2, r1, r2
 800dcfa:	1aed      	subs	r5, r5, r3
 800dcfc:	43d2      	mvns	r2, r2
 800dcfe:	43ed      	mvns	r5, r5
 800dd00:	4416      	add	r6, r2
 800dd02:	4445      	add	r5, r8
 800dd04:	f7fc f986 	bl	800a014 <GUI_ALLOC_UnlockH>
 800dd08:	4638      	mov	r0, r7
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	462a      	mov	r2, r5
 800dd0e:	f000 f813 	bl	800dd38 <WM_ResizeWindow>
 800dd12:	b003      	add	sp, #12
 800dd14:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800dd18 <WM_SendToParent>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	b141      	cbz	r1, 800dd32 <WM_SendToParent+0x1a>
 800dd20:	f000 f8aa 	bl	800de78 <WM_GetParent>
 800dd24:	b128      	cbz	r0, 800dd32 <WM_SendToParent+0x1a>
 800dd26:	60a5      	str	r5, [r4, #8]
 800dd28:	4621      	mov	r1, r4
 800dd2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd2e:	f7ff bf79 	b.w	800dc24 <WM__SendMessage>
 800dd32:	bd38      	pop	{r3, r4, r5, pc}

0800dd34 <WM_SendMessageNoPara>:
 800dd34:	f7ff bf61 	b.w	800dbfa <WM__SendMessageNoPara>

0800dd38 <WM_ResizeWindow>:
 800dd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3c:	ea51 0302 	orrs.w	r3, r1, r2
 800dd40:	b08a      	sub	sp, #40	; 0x28
 800dd42:	4680      	mov	r8, r0
 800dd44:	460e      	mov	r6, r1
 800dd46:	4617      	mov	r7, r2
 800dd48:	d06e      	beq.n	800de28 <WM_ResizeWindow+0xf0>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d06c      	beq.n	800de28 <WM_ResizeWindow+0xf0>
 800dd4e:	f7fc f953 	bl	8009ff8 <GUI_ALLOC_LockH>
 800dd52:	4603      	mov	r3, r0
 800dd54:	9003      	str	r0, [sp, #12]
 800dd56:	c803      	ldmia	r0, {r0, r1}
 800dd58:	ad04      	add	r5, sp, #16
 800dd5a:	ac06      	add	r4, sp, #24
 800dd5c:	e885 0003 	stmia.w	r5, {r0, r1}
 800dd60:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd64:	b17e      	cbz	r6, 800dd86 <WM_ResizeWindow+0x4e>
 800dd66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd68:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800dd6c:	2a80      	cmp	r2, #128	; 0x80
 800dd6e:	d105      	bne.n	800dd7c <WM_ResizeWindow+0x44>
 800dd70:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800dd74:	1b96      	subs	r6, r2, r6
 800dd76:	f8ad 6018 	strh.w	r6, [sp, #24]
 800dd7a:	e004      	b.n	800dd86 <WM_ResizeWindow+0x4e>
 800dd7c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800dd80:	4416      	add	r6, r2
 800dd82:	f8ad 601c 	strh.w	r6, [sp, #28]
 800dd86:	b187      	cbz	r7, 800ddaa <WM_ResizeWindow+0x72>
 800dd88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd8a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800dd8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800dd92:	d105      	bne.n	800dda0 <WM_ResizeWindow+0x68>
 800dd94:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800dd98:	1bd7      	subs	r7, r2, r7
 800dd9a:	f8ad 701a 	strh.w	r7, [sp, #26]
 800dd9e:	e004      	b.n	800ddaa <WM_ResizeWindow+0x72>
 800dda0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dda4:	4417      	add	r7, r2
 800dda6:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ddaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddac:	03da      	lsls	r2, r3, #15
 800ddae:	d502      	bpl.n	800ddb6 <WM_ResizeWindow+0x7e>
 800ddb0:	4640      	mov	r0, r8
 800ddb2:	f7fd fb09 	bl	800b3c8 <WM__InvalidateDrawAndDescs>
 800ddb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ddc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc2:	079b      	lsls	r3, r3, #30
 800ddc4:	d50a      	bpl.n	800dddc <WM_ResizeWindow+0xa4>
 800ddc6:	a808      	add	r0, sp, #32
 800ddc8:	4629      	mov	r1, r5
 800ddca:	4622      	mov	r2, r4
 800ddcc:	f7ff fe6c 	bl	800daa8 <GUI_MergeRect>
 800ddd0:	9b03      	ldr	r3, [sp, #12]
 800ddd2:	a808      	add	r0, sp, #32
 800ddd4:	6999      	ldr	r1, [r3, #24]
 800ddd6:	6a1a      	ldr	r2, [r3, #32]
 800ddd8:	f7fd fbfa 	bl	800b5d0 <WM__InvalidateRectEx>
 800dddc:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800dde0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800dde4:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800dde8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ddec:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800ddf0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800ddf4:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800ddf8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800ddfc:	1ae3      	subs	r3, r4, r3
 800ddfe:	1a38      	subs	r0, r7, r0
 800de00:	ac0a      	add	r4, sp, #40	; 0x28
 800de02:	1aaa      	subs	r2, r5, r2
 800de04:	9000      	str	r0, [sp, #0]
 800de06:	1a71      	subs	r1, r6, r1
 800de08:	9803      	ldr	r0, [sp, #12]
 800de0a:	f001 f899 	bl	800ef40 <WM__UpdateChildPositions>
 800de0e:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800de12:	f101 0008 	add.w	r0, r1, #8
 800de16:	f7ff fbf7 	bl	800d608 <GUI__IntersectRect>
 800de1a:	4640      	mov	r0, r8
 800de1c:	2105      	movs	r1, #5
 800de1e:	f7fd fbef 	bl	800b600 <WM__SendMsgNoData>
 800de22:	4620      	mov	r0, r4
 800de24:	f7fc f8f6 	bl	800a014 <GUI_ALLOC_UnlockH>
 800de28:	b00a      	add	sp, #40	; 0x28
 800de2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800de30 <WM_OnKey>:
 800de30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de32:	4a0a      	ldr	r2, [pc, #40]	; (800de5c <WM_OnKey+0x2c>)
 800de34:	4603      	mov	r3, r0
 800de36:	6810      	ldr	r0, [r2, #0]
 800de38:	4a09      	ldr	r2, [pc, #36]	; (800de60 <WM_OnKey+0x30>)
 800de3a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800de3e:	b148      	cbz	r0, 800de54 <WM_OnKey+0x24>
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	230e      	movs	r3, #14
 800de44:	9101      	str	r1, [sp, #4]
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	a902      	add	r1, sp, #8
 800de4a:	ab00      	add	r3, sp, #0
 800de4c:	9305      	str	r3, [sp, #20]
 800de4e:	f7ff fee9 	bl	800dc24 <WM__SendMessage>
 800de52:	2001      	movs	r0, #1
 800de54:	b007      	add	sp, #28
 800de56:	f85d fb04 	ldr.w	pc, [sp], #4
 800de5a:	bf00      	nop
 800de5c:	20022fa4 	.word	0x20022fa4
 800de60:	20022f94 	.word	0x20022f94

0800de64 <WM_NotifyParent>:
 800de64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de66:	2326      	movs	r3, #38	; 0x26
 800de68:	9103      	str	r1, [sp, #12]
 800de6a:	4669      	mov	r1, sp
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	f7ff ff53 	bl	800dd18 <WM_SendToParent>
 800de72:	b005      	add	sp, #20
 800de74:	f85d fb04 	ldr.w	pc, [sp], #4

0800de78 <WM_GetParent>:
 800de78:	b508      	push	{r3, lr}
 800de7a:	4603      	mov	r3, r0
 800de7c:	b110      	cbz	r0, 800de84 <WM_GetParent+0xc>
 800de7e:	f7fc f8b1 	bl	8009fe4 <GUI_ALLOC_h2p>
 800de82:	6983      	ldr	r3, [r0, #24]
 800de84:	4618      	mov	r0, r3
 800de86:	bd08      	pop	{r3, pc}

0800de88 <WM_GetWindowOrgX>:
 800de88:	b508      	push	{r3, lr}
 800de8a:	b120      	cbz	r0, 800de96 <WM_GetWindowOrgX+0xe>
 800de8c:	f7fc f8aa 	bl	8009fe4 <GUI_ALLOC_h2p>
 800de90:	f9b0 0000 	ldrsh.w	r0, [r0]
 800de94:	bd08      	pop	{r3, pc}
 800de96:	bd08      	pop	{r3, pc}

0800de98 <WM_GetFirstChild>:
 800de98:	b508      	push	{r3, lr}
 800de9a:	4603      	mov	r3, r0
 800de9c:	b110      	cbz	r0, 800dea4 <WM_GetFirstChild+0xc>
 800de9e:	f7fc f8a1 	bl	8009fe4 <GUI_ALLOC_h2p>
 800dea2:	69c3      	ldr	r3, [r0, #28]
 800dea4:	4618      	mov	r0, r3
 800dea6:	bd08      	pop	{r3, pc}

0800dea8 <WM__GetClientRectEx>:
 800dea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deaa:	460d      	mov	r5, r1
 800deac:	b158      	cbz	r0, 800dec6 <WM__GetClientRectEx+0x1e>
 800deae:	b151      	cbz	r1, 800dec6 <WM__GetClientRectEx+0x1e>
 800deb0:	f7fc f8a2 	bl	8009ff8 <GUI_ALLOC_LockH>
 800deb4:	ac02      	add	r4, sp, #8
 800deb6:	4629      	mov	r1, r5
 800deb8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800debc:	f7fd fbab 	bl	800b616 <WM__GetClientRectWin>
 800dec0:	4620      	mov	r0, r4
 800dec2:	f7fc f8a7 	bl	800a014 <GUI_ALLOC_UnlockH>
 800dec6:	b003      	add	sp, #12
 800dec8:	bd30      	pop	{r4, r5, pc}
	...

0800decc <WM__AddCriticalHandle>:
 800decc:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <WM__AddCriticalHandle+0xc>)
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	6002      	str	r2, [r0, #0]
 800ded2:	6018      	str	r0, [r3, #0]
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	20022fb8 	.word	0x20022fb8

0800dedc <WM_BringToBottom>:
 800dedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee0:	4604      	mov	r4, r0
 800dee2:	b087      	sub	sp, #28
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d039      	beq.n	800df5c <WM_BringToBottom+0x80>
 800dee8:	f7fc f886 	bl	8009ff8 <GUI_ALLOC_LockH>
 800deec:	4603      	mov	r3, r0
 800deee:	9001      	str	r0, [sp, #4]
 800def0:	c803      	ldmia	r0, {r0, r1}
 800def2:	ad04      	add	r5, sp, #16
 800def4:	e885 0003 	stmia.w	r5, {r0, r1}
 800def8:	a801      	add	r0, sp, #4
 800defa:	6a1e      	ldr	r6, [r3, #32]
 800defc:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800df00:	f7fc f888 	bl	800a014 <GUI_ALLOC_UnlockH>
 800df04:	4620      	mov	r0, r4
 800df06:	f001 f895 	bl	800f034 <WM__GetPrevSibling>
 800df0a:	4607      	mov	r7, r0
 800df0c:	b330      	cbz	r0, 800df5c <WM_BringToBottom+0x80>
 800df0e:	4620      	mov	r0, r4
 800df10:	f7ff ffb2 	bl	800de78 <WM_GetParent>
 800df14:	f019 0f02 	tst.w	r9, #2
 800df18:	4680      	mov	r8, r0
 800df1a:	d004      	beq.n	800df26 <WM_BringToBottom+0x4a>
 800df1c:	4628      	mov	r0, r5
 800df1e:	4641      	mov	r1, r8
 800df20:	4632      	mov	r2, r6
 800df22:	f7fd fb55 	bl	800b5d0 <WM__InvalidateRectEx>
 800df26:	4620      	mov	r0, r4
 800df28:	f7fc f866 	bl	8009ff8 <GUI_ALLOC_LockH>
 800df2c:	9001      	str	r0, [sp, #4]
 800df2e:	4640      	mov	r0, r8
 800df30:	f7fc f862 	bl	8009ff8 <GUI_ALLOC_LockH>
 800df34:	9003      	str	r0, [sp, #12]
 800df36:	4638      	mov	r0, r7
 800df38:	f7fc f85e 	bl	8009ff8 <GUI_ALLOC_LockH>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	9a01      	ldr	r2, [sp, #4]
 800df40:	69d9      	ldr	r1, [r3, #28]
 800df42:	6206      	str	r6, [r0, #32]
 800df44:	9002      	str	r0, [sp, #8]
 800df46:	6211      	str	r1, [r2, #32]
 800df48:	a801      	add	r0, sp, #4
 800df4a:	61dc      	str	r4, [r3, #28]
 800df4c:	f7fc f862 	bl	800a014 <GUI_ALLOC_UnlockH>
 800df50:	a803      	add	r0, sp, #12
 800df52:	f7fc f85f 	bl	800a014 <GUI_ALLOC_UnlockH>
 800df56:	a802      	add	r0, sp, #8
 800df58:	f7fc f85c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800df5c:	b007      	add	sp, #28
 800df5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800df62 <_Convert16>:
 800df62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df66:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800df6a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800df6e:	4605      	mov	r5, r0
 800df70:	460e      	mov	r6, r1
 800df72:	4690      	mov	r8, r2
 800df74:	461f      	mov	r7, r3
 800df76:	4614      	mov	r4, r2
 800df78:	4689      	mov	r9, r1
 800df7a:	f835 0b02 	ldrh.w	r0, [r5], #2
 800df7e:	47d8      	blx	fp
 800df80:	47d0      	blx	sl
 800df82:	3c01      	subs	r4, #1
 800df84:	f849 0b04 	str.w	r0, [r9], #4
 800df88:	d1f7      	bne.n	800df7a <_Convert16+0x18>
 800df8a:	2f1f      	cmp	r7, #31
 800df8c:	d806      	bhi.n	800df9c <_Convert16+0x3a>
 800df8e:	4630      	mov	r0, r6
 800df90:	4641      	mov	r1, r8
 800df92:	463a      	mov	r2, r7
 800df94:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	f000 be1a 	b.w	800ebd0 <GUI__CompactPixelIndices>
 800df9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfa0 <_Convert8>:
 800dfa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800dfa8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800dfac:	4605      	mov	r5, r0
 800dfae:	460e      	mov	r6, r1
 800dfb0:	4690      	mov	r8, r2
 800dfb2:	461f      	mov	r7, r3
 800dfb4:	4689      	mov	r9, r1
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dfbc:	47d8      	blx	fp
 800dfbe:	47d0      	blx	sl
 800dfc0:	1b2b      	subs	r3, r5, r4
 800dfc2:	4443      	add	r3, r8
 800dfc4:	f849 0b04 	str.w	r0, [r9], #4
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1f5      	bne.n	800dfb8 <_Convert8+0x18>
 800dfcc:	2f1f      	cmp	r7, #31
 800dfce:	d806      	bhi.n	800dfde <_Convert8+0x3e>
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	4641      	mov	r1, r8
 800dfd4:	463a      	mov	r2, r7
 800dfd6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfda:	f000 bdf9 	b.w	800ebd0 <GUI__CompactPixelIndices>
 800dfde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800dfe4 <GUI_MEMDEV__WriteToActiveOpaque>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	b09d      	sub	sp, #116	; 0x74
 800dfea:	4606      	mov	r6, r0
 800dfec:	910f      	str	r1, [sp, #60]	; 0x3c
 800dfee:	920d      	str	r2, [sp, #52]	; 0x34
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f000 8386 	beq.w	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800dff6:	f7fb ffff 	bl	8009ff8 <GUI_ALLOC_LockH>
 800dffa:	ab1c      	add	r3, sp, #112	; 0x70
 800dffc:	6944      	ldr	r4, [r0, #20]
 800dffe:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800e002:	4618      	mov	r0, r3
 800e004:	f7fc f806 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e008:	4630      	mov	r0, r6
 800e00a:	f7fe ffa5 	bl	800cf58 <GUI_MEMDEV_GetBitsPerPixel>
 800e00e:	2808      	cmp	r0, #8
 800e010:	4601      	mov	r1, r0
 800e012:	dd02      	ble.n	800e01a <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800e014:	2c00      	cmp	r4, #0
 800e016:	f000 81c3 	beq.w	800e3a0 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800e01a:	2201      	movs	r2, #1
 800e01c:	f04f 0800 	mov.w	r8, #0
 800e020:	4630      	mov	r0, r6
 800e022:	921b      	str	r2, [sp, #108]	; 0x6c
 800e024:	920b      	str	r2, [sp, #44]	; 0x2c
 800e026:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e02a:	f7fb ffe5 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e02e:	6803      	ldr	r3, [r0, #0]
 800e030:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800e640 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	930e      	str	r3, [sp, #56]	; 0x38
 800e03e:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800e042:	f8da 3000 	ldr.w	r3, [sl]
 800e046:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800e04a:	6904      	ldr	r4, [r0, #16]
 800e04c:	6945      	ldr	r5, [r0, #20]
 800e04e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800e052:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800e056:	7c58      	ldrb	r0, [r3, #17]
 800e058:	9112      	str	r1, [sp, #72]	; 0x48
 800e05a:	f7fa fae3 	bl	8008624 <GUI_GetBitsPerPixelEx>
 800e05e:	f8da 3000 	ldr.w	r3, [sl]
 800e062:	9010      	str	r0, [sp, #64]	; 0x40
 800e064:	7c58      	ldrb	r0, [r3, #17]
 800e066:	f7fa fb07 	bl	8008678 <GUI_GetpfIndex2ColorEx>
 800e06a:	4603      	mov	r3, r0
 800e06c:	4658      	mov	r0, fp
 800e06e:	9309      	str	r3, [sp, #36]	; 0x24
 800e070:	f7fb ffd0 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e074:	2c08      	cmp	r4, #8
 800e076:	4651      	mov	r1, sl
 800e078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07c:	d904      	bls.n	800e088 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800e07e:	2c10      	cmp	r4, #16
 800e080:	bf8c      	ite	hi
 800e082:	2204      	movhi	r2, #4
 800e084:	2202      	movls	r2, #2
 800e086:	e005      	b.n	800e094 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800e088:	2c01      	cmp	r4, #1
 800e08a:	d103      	bne.n	800e094 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800e08c:	9411      	str	r4, [sp, #68]	; 0x44
 800e08e:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800e092:	e000      	b.n	800e096 <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800e094:	9211      	str	r2, [sp, #68]	; 0x44
 800e096:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e098:	4298      	cmp	r0, r3
 800e09a:	f000 80e2 	beq.w	800e262 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800e09e:	680b      	ldr	r3, [r1, #0]
 800e0a0:	7c58      	ldrb	r0, [r3, #17]
 800e0a2:	f7fa faf1 	bl	8008688 <GUI_GetpfColor2IndexEx>
 800e0a6:	9013      	str	r0, [sp, #76]	; 0x4c
 800e0a8:	00b8      	lsls	r0, r7, #2
 800e0aa:	f7fc f9ed 	bl	800a488 <GUI_ALLOC_AllocNoInit>
 800e0ae:	900c      	str	r0, [sp, #48]	; 0x30
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	f000 8326 	beq.w	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7fe f8ea 	bl	800c290 <GUI_MEMDEV_GetDataPtr>
 800e0bc:	4606      	mov	r6, r0
 800e0be:	2d00      	cmp	r5, #0
 800e0c0:	f000 80be 	beq.w	800e240 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	f7fb ff97 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e0ca:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800e0ce:	9018      	str	r0, [sp, #96]	; 0x60
 800e0d0:	f04f 0a00 	mov.w	sl, #0
 800e0d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0d6:	4592      	cmp	sl, r2
 800e0d8:	f280 80ae 	bge.w	800e238 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800e0dc:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e0de:	2300      	movs	r3, #0
 800e0e0:	9319      	str	r3, [sp, #100]	; 0x64
 800e0e2:	6883      	ldr	r3, [r0, #8]
 800e0e4:	a919      	add	r1, sp, #100	; 0x64
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	4652      	mov	r2, sl
 800e0ea:	4798      	blx	r3
 800e0ec:	42b8      	cmp	r0, r7
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	d12f      	bne.n	800e152 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800e0f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e0f4:	f7fb ff80 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e0f8:	2c08      	cmp	r4, #8
 800e0fa:	4601      	mov	r1, r0
 800e0fc:	9016      	str	r0, [sp, #88]	; 0x58
 800e0fe:	d909      	bls.n	800e114 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800e100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e104:	9200      	str	r2, [sp, #0]
 800e106:	9301      	str	r3, [sp, #4]
 800e108:	4630      	mov	r0, r6
 800e10a:	463a      	mov	r2, r7
 800e10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e10e:	f7ff ff28 	bl	800df62 <_Convert16>
 800e112:	e008      	b.n	800e126 <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800e114:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e116:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e118:	9000      	str	r0, [sp, #0]
 800e11a:	9201      	str	r2, [sp, #4]
 800e11c:	4630      	mov	r0, r6
 800e11e:	463a      	mov	r2, r7
 800e120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e122:	f7ff ff3d 	bl	800dfa0 <_Convert8>
 800e126:	2301      	movs	r3, #1
 800e128:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e12a:	9002      	str	r0, [sp, #8]
 800e12c:	ad1c      	add	r5, sp, #112	; 0x70
 800e12e:	2200      	movs	r2, #0
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	9203      	str	r2, [sp, #12]
 800e136:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800e13a:	9204      	str	r2, [sp, #16]
 800e13c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e13e:	f8cd 8014 	str.w	r8, [sp, #20]
 800e142:	4659      	mov	r1, fp
 800e144:	463a      	mov	r2, r7
 800e146:	f7fa fd2b 	bl	8008ba0 <LCD_DrawBitmap>
 800e14a:	4628      	mov	r0, r5
 800e14c:	f7fb ff62 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e150:	e060      	b.n	800e214 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800e152:	2c01      	cmp	r4, #1
 800e154:	d15c      	bne.n	800e210 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800e156:	2d00      	cmp	r5, #0
 800e158:	d05c      	beq.n	800e214 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800e15a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e15c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e15e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e162:	2208      	movs	r2, #8
 800e164:	fb90 f2f2 	sdiv	r2, r0, r2
 800e168:	4432      	add	r2, r6
 800e16a:	2301      	movs	r3, #1
 800e16c:	9204      	str	r2, [sp, #16]
 800e16e:	f000 0207 	and.w	r2, r0, #7
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	4408      	add	r0, r1
 800e176:	9301      	str	r3, [sp, #4]
 800e178:	9302      	str	r3, [sp, #8]
 800e17a:	9206      	str	r2, [sp, #24]
 800e17c:	4659      	mov	r1, fp
 800e17e:	462a      	mov	r2, r5
 800e180:	f8cd 8014 	str.w	r8, [sp, #20]
 800e184:	f7fa fc30 	bl	80089e8 <LCD__DrawBitmap_1bpp>
 800e188:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e18a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e18c:	441d      	add	r5, r3
 800e18e:	6883      	ldr	r3, [r0, #8]
 800e190:	9519      	str	r5, [sp, #100]	; 0x64
 800e192:	695b      	ldr	r3, [r3, #20]
 800e194:	a919      	add	r1, sp, #100	; 0x64
 800e196:	4652      	mov	r2, sl
 800e198:	4798      	blx	r3
 800e19a:	4605      	mov	r5, r0
 800e19c:	e7db      	b.n	800e156 <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800e19e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e1a0:	f7fb ff2a 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e1a4:	2c08      	cmp	r4, #8
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	9016      	str	r0, [sp, #88]	; 0x58
 800e1aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e1ac:	d938      	bls.n	800e220 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800e1ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1b0:	9200      	str	r2, [sp, #0]
 800e1b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e1b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	fb00 6002 	mla	r0, r0, r2, r6
 800e1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1be:	462a      	mov	r2, r5
 800e1c0:	f7ff fecf 	bl	800df62 <_Convert16>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800e1ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	9002      	str	r0, [sp, #8]
 800e1d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e1d6:	9203      	str	r2, [sp, #12]
 800e1d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e1da:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800e1de:	9204      	str	r2, [sp, #16]
 800e1e0:	4408      	add	r0, r1
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	4659      	mov	r1, fp
 800e1e6:	f8cd 8014 	str.w	r8, [sp, #20]
 800e1ea:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800e1ee:	f7fa fcd7 	bl	8008ba0 <LCD_DrawBitmap>
 800e1f2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800e1f6:	4660      	mov	r0, ip
 800e1f8:	f7fb ff0c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e1fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1fe:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e200:	441d      	add	r5, r3
 800e202:	6883      	ldr	r3, [r0, #8]
 800e204:	9519      	str	r5, [sp, #100]	; 0x64
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	a919      	add	r1, sp, #100	; 0x64
 800e20a:	4652      	mov	r2, sl
 800e20c:	4798      	blx	r3
 800e20e:	4605      	mov	r5, r0
 800e210:	2d00      	cmp	r5, #0
 800e212:	d1c4      	bne.n	800e19e <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800e214:	444e      	add	r6, r9
 800e216:	f10a 0a01 	add.w	sl, sl, #1
 800e21a:	f10b 0b01 	add.w	fp, fp, #1
 800e21e:	e759      	b.n	800e0d4 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800e220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e226:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e228:	9201      	str	r2, [sp, #4]
 800e22a:	fb00 6003 	mla	r0, r0, r3, r6
 800e22e:	462a      	mov	r2, r5
 800e230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e232:	f7ff feb5 	bl	800dfa0 <_Convert8>
 800e236:	e7c5      	b.n	800e1c4 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800e238:	a818      	add	r0, sp, #96	; 0x60
 800e23a:	f7fb feeb 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e23e:	e00e      	b.n	800e25e <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800e240:	2301      	movs	r3, #1
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	9004      	str	r0, [sp, #16]
 800e248:	9402      	str	r4, [sp, #8]
 800e24a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e24e:	f8cd 8014 	str.w	r8, [sp, #20]
 800e252:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e254:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e258:	463a      	mov	r2, r7
 800e25a:	f7fa fca1 	bl	8008ba0 <LCD_DrawBitmap>
 800e25e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e260:	e24d      	b.n	800e6fe <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800e262:	4630      	mov	r0, r6
 800e264:	f7fe f814 	bl	800c290 <GUI_MEMDEV_GetDataPtr>
 800e268:	4606      	mov	r6, r0
 800e26a:	2d00      	cmp	r5, #0
 800e26c:	f000 808a 	beq.w	800e384 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800e270:	4628      	mov	r0, r5
 800e272:	f7fb fec1 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e276:	2500      	movs	r5, #0
 800e278:	9018      	str	r0, [sp, #96]	; 0x60
 800e27a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e27c:	429d      	cmp	r5, r3
 800e27e:	da7d      	bge.n	800e37c <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800e280:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e282:	2300      	movs	r3, #0
 800e284:	9319      	str	r3, [sp, #100]	; 0x64
 800e286:	6883      	ldr	r3, [r0, #8]
 800e288:	a919      	add	r1, sp, #100	; 0x64
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	462a      	mov	r2, r5
 800e28e:	4798      	blx	r3
 800e290:	42b8      	cmp	r0, r7
 800e292:	4682      	mov	sl, r0
 800e294:	d124      	bne.n	800e2e0 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800e296:	46aa      	mov	sl, r5
 800e298:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e29a:	6883      	ldr	r3, [r0, #8]
 800e29c:	f10a 0b01 	add.w	fp, sl, #1
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	a919      	add	r1, sp, #100	; 0x64
 800e2a4:	465a      	mov	r2, fp
 800e2a6:	4798      	blx	r3
 800e2a8:	42b8      	cmp	r0, r7
 800e2aa:	d101      	bne.n	800e2b0 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800e2ac:	46da      	mov	sl, fp
 800e2ae:	e7f3      	b.n	800e298 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800e2b0:	ebc5 0b0a 	rsb	fp, r5, sl
 800e2b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e2b6:	9604      	str	r6, [sp, #16]
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	f10b 0b01 	add.w	fp, fp, #1
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	4429      	add	r1, r5
 800e2c4:	9402      	str	r4, [sp, #8]
 800e2c6:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2ca:	f8cd 8014 	str.w	r8, [sp, #20]
 800e2ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e2d0:	463a      	mov	r2, r7
 800e2d2:	465b      	mov	r3, fp
 800e2d4:	f7fa fc64 	bl	8008ba0 <LCD_DrawBitmap>
 800e2d8:	fb09 660b 	mla	r6, r9, fp, r6
 800e2dc:	4655      	mov	r5, sl
 800e2de:	e04b      	b.n	800e378 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800e2e0:	2c01      	cmp	r4, #1
 800e2e2:	d127      	bne.n	800e334 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800e2e4:	f1ba 0f00 	cmp.w	sl, #0
 800e2e8:	d022      	beq.n	800e330 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800e2ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e2ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e2ee:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2f2:	2208      	movs	r2, #8
 800e2f4:	fb90 f2f2 	sdiv	r2, r0, r2
 800e2f8:	4432      	add	r2, r6
 800e2fa:	9204      	str	r2, [sp, #16]
 800e2fc:	f000 0207 	and.w	r2, r0, #7
 800e300:	4408      	add	r0, r1
 800e302:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e304:	9206      	str	r2, [sp, #24]
 800e306:	2301      	movs	r3, #1
 800e308:	4652      	mov	r2, sl
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	9301      	str	r3, [sp, #4]
 800e30e:	9302      	str	r3, [sp, #8]
 800e310:	4429      	add	r1, r5
 800e312:	f8cd 8014 	str.w	r8, [sp, #20]
 800e316:	f7fa fb67 	bl	80089e8 <LCD__DrawBitmap_1bpp>
 800e31a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e31c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e31e:	4453      	add	r3, sl
 800e320:	9319      	str	r3, [sp, #100]	; 0x64
 800e322:	6883      	ldr	r3, [r0, #8]
 800e324:	a919      	add	r1, sp, #100	; 0x64
 800e326:	695b      	ldr	r3, [r3, #20]
 800e328:	462a      	mov	r2, r5
 800e32a:	4798      	blx	r3
 800e32c:	4682      	mov	sl, r0
 800e32e:	e7d9      	b.n	800e2e4 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800e330:	444e      	add	r6, r9
 800e332:	e021      	b.n	800e378 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800e334:	f1ba 0f00 	cmp.w	sl, #0
 800e338:	d0fa      	beq.n	800e330 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800e33a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e33c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e33e:	9402      	str	r4, [sp, #8]
 800e340:	fb00 6201 	mla	r2, r0, r1, r6
 800e344:	9204      	str	r2, [sp, #16]
 800e346:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e34a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e34e:	2301      	movs	r3, #1
 800e350:	4410      	add	r0, r2
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	4652      	mov	r2, sl
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	4429      	add	r1, r5
 800e35a:	f8cd 8014 	str.w	r8, [sp, #20]
 800e35e:	f7fa fc1f 	bl	8008ba0 <LCD_DrawBitmap>
 800e362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e364:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e366:	4453      	add	r3, sl
 800e368:	9319      	str	r3, [sp, #100]	; 0x64
 800e36a:	6883      	ldr	r3, [r0, #8]
 800e36c:	a919      	add	r1, sp, #100	; 0x64
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	462a      	mov	r2, r5
 800e372:	4798      	blx	r3
 800e374:	4682      	mov	sl, r0
 800e376:	e7dd      	b.n	800e334 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800e378:	3501      	adds	r5, #1
 800e37a:	e77e      	b.n	800e27a <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800e37c:	a818      	add	r0, sp, #96	; 0x60
 800e37e:	f7fb fe49 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e382:	e1be      	b.n	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e384:	2301      	movs	r3, #1
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	9004      	str	r0, [sp, #16]
 800e38c:	9402      	str	r4, [sp, #8]
 800e38e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e392:	f8cd 8014 	str.w	r8, [sp, #20]
 800e396:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e398:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e39a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e39c:	463a      	mov	r2, r7
 800e39e:	e041      	b.n	800e424 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	910a      	str	r1, [sp, #40]	; 0x28
 800e3a4:	f7fb fe28 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e3a8:	4682      	mov	sl, r0
 800e3aa:	a81c      	add	r0, sp, #112	; 0x70
 800e3ac:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800e3b0:	f840 ad10 	str.w	sl, [r0, #-16]!
 800e3b4:	f8da 4000 	ldr.w	r4, [sl]
 800e3b8:	9210      	str	r2, [sp, #64]	; 0x40
 800e3ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e3be:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800e3c2:	4c9e      	ldr	r4, [pc, #632]	; (800e63c <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800e3c4:	b213      	sxth	r3, r2
 800e3c6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e3ca:	920b      	str	r2, [sp, #44]	; 0x2c
 800e3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ce:	f7fb fe21 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e3d2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e3d6:	900e      	str	r0, [sp, #56]	; 0x38
 800e3d8:	4899      	ldr	r0, [pc, #612]	; (800e640 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800e3da:	6800      	ldr	r0, [r0, #0]
 800e3dc:	7c40      	ldrb	r0, [r0, #17]
 800e3de:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800e3e2:	6925      	ldr	r5, [r4, #16]
 800e3e4:	f8d5 8000 	ldr.w	r8, [r5]
 800e3e8:	f7fa f91c 	bl	8008624 <GUI_GetBitsPerPixelEx>
 800e3ec:	2808      	cmp	r0, #8
 800e3ee:	fa0f fb87 	sxth.w	fp, r7
 800e3f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e3f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f8:	d904      	bls.n	800e404 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800e3fa:	2810      	cmp	r0, #16
 800e3fc:	bf8c      	ite	hi
 800e3fe:	2404      	movhi	r4, #4
 800e400:	2402      	movls	r4, #2
 800e402:	e000      	b.n	800e406 <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800e404:	2401      	movs	r4, #1
 800e406:	45a9      	cmp	r9, r5
 800e408:	d10f      	bne.n	800e42a <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800e40a:	2001      	movs	r0, #1
 800e40c:	9203      	str	r2, [sp, #12]
 800e40e:	f10a 0218 	add.w	r2, sl, #24
 800e412:	9000      	str	r0, [sp, #0]
 800e414:	9001      	str	r0, [sp, #4]
 800e416:	9102      	str	r1, [sp, #8]
 800e418:	9204      	str	r2, [sp, #16]
 800e41a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e41c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e41e:	2200      	movs	r2, #0
 800e420:	9205      	str	r2, [sp, #20]
 800e422:	465a      	mov	r2, fp
 800e424:	f7fa fbbc 	bl	8008ba0 <LCD_DrawBitmap>
 800e428:	e16b      	b.n	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e42a:	2920      	cmp	r1, #32
 800e42c:	f040 808e 	bne.w	800e54c <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800e430:	fb0b f004 	mul.w	r0, fp, r4
 800e434:	f7fc f828 	bl	800a488 <GUI_ALLOC_AllocNoInit>
 800e438:	900e      	str	r0, [sp, #56]	; 0x38
 800e43a:	2800      	cmp	r0, #0
 800e43c:	f000 8161 	beq.w	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e440:	f7fb fdda 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e444:	901a      	str	r0, [sp, #104]	; 0x68
 800e446:	4630      	mov	r0, r6
 800e448:	f7fb fdd6 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e44c:	9018      	str	r0, [sp, #96]	; 0x60
 800e44e:	692b      	ldr	r3, [r5, #16]
 800e450:	f100 0a18 	add.w	sl, r0, #24
 800e454:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800e458:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d02f      	beq.n	800e4c0 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800e460:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800e464:	2c02      	cmp	r4, #2
 800e466:	d003      	beq.n	800e470 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800e468:	2c04      	cmp	r4, #4
 800e46a:	d001      	beq.n	800e470 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800e46c:	2c01      	cmp	r4, #1
 800e46e:	d106      	bne.n	800e47e <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800e470:	4650      	mov	r0, sl
 800e472:	692f      	ldr	r7, [r5, #16]
 800e474:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e476:	465a      	mov	r2, fp
 800e478:	4623      	mov	r3, r4
 800e47a:	47b8      	blx	r7
 800e47c:	44b2      	add	sl, r6
 800e47e:	2301      	movs	r3, #1
 800e480:	2200      	movs	r2, #0
 800e482:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	9301      	str	r3, [sp, #4]
 800e488:	9203      	str	r2, [sp, #12]
 800e48a:	9104      	str	r1, [sp, #16]
 800e48c:	9205      	str	r2, [sp, #20]
 800e48e:	4641      	mov	r1, r8
 800e490:	465a      	mov	r2, fp
 800e492:	f8cd 9008 	str.w	r9, [sp, #8]
 800e496:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e498:	f7fa fb82 	bl	8008ba0 <LCD_DrawBitmap>
 800e49c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4a0:	f108 0701 	add.w	r7, r8, #1
 800e4a4:	fa02 f381 	sxtah	r3, r2, r1
 800e4a8:	42bb      	cmp	r3, r7
 800e4aa:	d107      	bne.n	800e4bc <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800e4ac:	a818      	add	r0, sp, #96	; 0x60
 800e4ae:	f7fb fdb1 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e4b2:	a81a      	add	r0, sp, #104	; 0x68
 800e4b4:	f7fb fdae 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e4b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e4ba:	e120      	b.n	800e6fe <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800e4bc:	46b8      	mov	r8, r7
 800e4be:	e7d1      	b.n	800e464 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800e4c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e4c2:	2c02      	cmp	r4, #2
 800e4c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e4c6:	d00e      	beq.n	800e4e6 <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800e4c8:	2c04      	cmp	r4, #4
 800e4ca:	d018      	beq.n	800e4fe <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800e4cc:	2c01      	cmp	r4, #1
 800e4ce:	d125      	bne.n	800e51c <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800e4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d8:	47c0      	blx	r8
 800e4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4dc:	54f8      	strb	r0, [r7, r3]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	459b      	cmp	fp, r3
 800e4e2:	d1f6      	bne.n	800e4d2 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800e4e4:	e019      	b.n	800e51a <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800e4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ee:	47c0      	blx	r8
 800e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f2:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	459b      	cmp	fp, r3
 800e4fa:	d1f5      	bne.n	800e4e8 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800e4fc:	e00d      	b.n	800e51a <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800e4fe:	465a      	mov	r2, fp
 800e500:	2300      	movs	r3, #0
 800e502:	f85a 0003 	ldr.w	r0, [sl, r3]
 800e506:	920b      	str	r2, [sp, #44]	; 0x2c
 800e508:	9309      	str	r3, [sp, #36]	; 0x24
 800e50a:	47c0      	blx	r8
 800e50c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e510:	3a01      	subs	r2, #1
 800e512:	50f8      	str	r0, [r7, r3]
 800e514:	f103 0304 	add.w	r3, r3, #4
 800e518:	d1f3      	bne.n	800e502 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800e51a:	44b2      	add	sl, r6
 800e51c:	2301      	movs	r3, #1
 800e51e:	2200      	movs	r2, #0
 800e520:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	9203      	str	r2, [sp, #12]
 800e528:	9104      	str	r1, [sp, #16]
 800e52a:	9205      	str	r2, [sp, #20]
 800e52c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e52e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e532:	4629      	mov	r1, r5
 800e534:	465a      	mov	r2, fp
 800e536:	f7fa fb33 	bl	8008ba0 <LCD_DrawBitmap>
 800e53a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e53c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e53e:	1c6f      	adds	r7, r5, #1
 800e540:	fa01 f380 	sxtah	r3, r1, r0
 800e544:	42bb      	cmp	r3, r7
 800e546:	d0b1      	beq.n	800e4ac <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800e548:	463d      	mov	r5, r7
 800e54a:	e7ba      	b.n	800e4c2 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800e54c:	2910      	cmp	r1, #16
 800e54e:	f040 80d8 	bne.w	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e552:	fa0f fa87 	sxth.w	sl, r7
 800e556:	fb0a f004 	mul.w	r0, sl, r4
 800e55a:	f7fb ff95 	bl	800a488 <GUI_ALLOC_AllocNoInit>
 800e55e:	9012      	str	r0, [sp, #72]	; 0x48
 800e560:	2800      	cmp	r0, #0
 800e562:	f000 80ce 	beq.w	800e702 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e566:	f7fb fd47 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e56a:	901a      	str	r0, [sp, #104]	; 0x68
 800e56c:	4630      	mov	r0, r6
 800e56e:	f7fb fd43 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e572:	9018      	str	r0, [sp, #96]	; 0x60
 800e574:	692b      	ldr	r3, [r5, #16]
 800e576:	f100 0618 	add.w	r6, r0, #24
 800e57a:	b113      	cbz	r3, 800e582 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800e57c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e580:	b92b      	cbnz	r3, 800e58e <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800e582:	00e2      	lsls	r2, r4, #3
 800e584:	b23f      	sxth	r7, r7
 800e586:	9211      	str	r2, [sp, #68]	; 0x44
 800e588:	007f      	lsls	r7, r7, #1
 800e58a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e58c:	e088      	b.n	800e6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800e58e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800e592:	0080      	lsls	r0, r0, #2
 800e594:	f7fb ff78 	bl	800a488 <GUI_ALLOC_AllocNoInit>
 800e598:	9011      	str	r0, [sp, #68]	; 0x44
 800e59a:	b118      	cbz	r0, 800e5a4 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800e59c:	f7fb fd2c 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e5a0:	9019      	str	r0, [sp, #100]	; 0x64
 800e5a2:	e001      	b.n	800e5a8 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800e5a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5a6:	9319      	str	r3, [sp, #100]	; 0x64
 800e5a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 80a0 	beq.w	800e6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800e5b0:	b23f      	sxth	r7, r7
 800e5b2:	007f      	lsls	r7, r7, #1
 800e5b4:	970e      	str	r7, [sp, #56]	; 0x38
 800e5b6:	00e7      	lsls	r7, r4, #3
 800e5b8:	9713      	str	r7, [sp, #76]	; 0x4c
 800e5ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e5bc:	970c      	str	r7, [sp, #48]	; 0x30
 800e5be:	2c02      	cmp	r4, #2
 800e5c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e5c4:	d004      	beq.n	800e5d0 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800e5c6:	2c04      	cmp	r4, #4
 800e5c8:	d007      	beq.n	800e5da <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800e5ca:	2c01      	cmp	r4, #1
 800e5cc:	d114      	bne.n	800e5f8 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800e5ce:	e004      	b.n	800e5da <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e5d4:	4652      	mov	r2, sl
 800e5d6:	4623      	mov	r3, r4
 800e5d8:	e003      	b.n	800e5e2 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800e5da:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e5dc:	4630      	mov	r0, r6
 800e5de:	4652      	mov	r2, sl
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800e5e6:	47b8      	blx	r7
 800e5e8:	692f      	ldr	r7, [r5, #16]
 800e5ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e5ec:	4641      	mov	r1, r8
 800e5ee:	4652      	mov	r2, sl
 800e5f0:	4623      	mov	r3, r4
 800e5f2:	47b8      	blx	r7
 800e5f4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800e5f6:	443e      	add	r6, r7
 800e5f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800e5fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e5fc:	9104      	str	r1, [sp, #16]
 800e5fe:	2301      	movs	r3, #1
 800e600:	2200      	movs	r2, #0
 800e602:	f107 0801 	add.w	r8, r7, #1
 800e606:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	9702      	str	r7, [sp, #8]
 800e60e:	9203      	str	r2, [sp, #12]
 800e610:	9205      	str	r2, [sp, #20]
 800e612:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e614:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e616:	465a      	mov	r2, fp
 800e618:	f7fa fac2 	bl	8008ba0 <LCD_DrawBitmap>
 800e61c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e61e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e620:	fa00 f387 	sxtah	r3, r0, r7
 800e624:	4543      	cmp	r3, r8
 800e626:	d002      	beq.n	800e62e <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800e628:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800e62c:	e7c7      	b.n	800e5be <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800e62e:	a819      	add	r0, sp, #100	; 0x64
 800e630:	f7fb fcf0 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e634:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e636:	f7fb fd0d 	bl	800a054 <GUI_ALLOC_Free>
 800e63a:	e059      	b.n	800e6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800e63c:	20022eac 	.word	0x20022eac
 800e640:	20000020 	.word	0x20000020
 800e644:	2c04      	cmp	r4, #4
 800e646:	d041      	beq.n	800e6cc <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800e648:	2c01      	cmp	r4, #1
 800e64a:	d111      	bne.n	800e670 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800e64c:	464a      	mov	r2, r9
 800e64e:	4631      	mov	r1, r6
 800e650:	f831 0b02 	ldrh.w	r0, [r1], #2
 800e654:	910a      	str	r1, [sp, #40]	; 0x28
 800e656:	920b      	str	r2, [sp, #44]	; 0x2c
 800e658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e65a:	4798      	blx	r3
 800e65c:	47c0      	blx	r8
 800e65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e660:	f802 0b01 	strb.w	r0, [r2], #1
 800e664:	eb09 000a 	add.w	r0, r9, sl
 800e668:	4282      	cmp	r2, r0
 800e66a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e66c:	d1f0      	bne.n	800e650 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800e66e:	443e      	add	r6, r7
 800e670:	2301      	movs	r3, #1
 800e672:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e674:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	2200      	movs	r2, #0
 800e67a:	9301      	str	r3, [sp, #4]
 800e67c:	9002      	str	r0, [sp, #8]
 800e67e:	9203      	str	r2, [sp, #12]
 800e680:	9104      	str	r1, [sp, #16]
 800e682:	9205      	str	r2, [sp, #20]
 800e684:	4629      	mov	r1, r5
 800e686:	465a      	mov	r2, fp
 800e688:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e68a:	f7fa fa89 	bl	8008ba0 <LCD_DrawBitmap>
 800e68e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e692:	f105 0901 	add.w	r9, r5, #1
 800e696:	fa02 f381 	sxtah	r3, r2, r1
 800e69a:	454b      	cmp	r3, r9
 800e69c:	d028      	beq.n	800e6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800e69e:	464d      	mov	r5, r9
 800e6a0:	2c02      	cmp	r4, #2
 800e6a2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e6a6:	d1cd      	bne.n	800e644 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800e6a8:	464b      	mov	r3, r9
 800e6aa:	4631      	mov	r1, r6
 800e6ac:	46d9      	mov	r9, fp
 800e6ae:	f831 0b02 	ldrh.w	r0, [r1], #2
 800e6b2:	910a      	str	r1, [sp, #40]	; 0x28
 800e6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6b8:	4790      	blx	r2
 800e6ba:	47c0      	blx	r8
 800e6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e6c0:	f823 0b02 	strh.w	r0, [r3], #2
 800e6c4:	f1b9 0901 	subs.w	r9, r9, #1
 800e6c8:	d1f1      	bne.n	800e6ae <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800e6ca:	e7d0      	b.n	800e66e <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800e6cc:	464b      	mov	r3, r9
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	46d9      	mov	r9, fp
 800e6d2:	f831 0b02 	ldrh.w	r0, [r1], #2
 800e6d6:	910a      	str	r1, [sp, #40]	; 0x28
 800e6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6dc:	4790      	blx	r2
 800e6de:	47c0      	blx	r8
 800e6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e6e4:	f843 0b04 	str.w	r0, [r3], #4
 800e6e8:	f1b9 0901 	subs.w	r9, r9, #1
 800e6ec:	d1f1      	bne.n	800e6d2 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800e6ee:	e7be      	b.n	800e66e <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800e6f0:	a818      	add	r0, sp, #96	; 0x60
 800e6f2:	f7fb fc8f 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e6f6:	a81a      	add	r0, sp, #104	; 0x68
 800e6f8:	f7fb fc8c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e6fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e6fe:	f7fb fca9 	bl	800a054 <GUI_ALLOC_Free>
 800e702:	b01d      	add	sp, #116	; 0x74
 800e704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e708 <GUI_MEMDEV__WriteToActiveAlpha>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	b091      	sub	sp, #68	; 0x44
 800e70e:	460e      	mov	r6, r1
 800e710:	4614      	mov	r4, r2
 800e712:	900d      	str	r0, [sp, #52]	; 0x34
 800e714:	f7fb fc70 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e718:	4602      	mov	r2, r0
 800e71a:	a810      	add	r0, sp, #64	; 0x40
 800e71c:	6813      	ldr	r3, [r2, #0]
 800e71e:	4d5b      	ldr	r5, [pc, #364]	; (800e88c <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	f840 2d08 	str.w	r2, [r0, #-8]!
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 800e72c:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800e730:	9309      	str	r3, [sp, #36]	; 0x24
 800e732:	f7fb fc6f 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e736:	682b      	ldr	r3, [r5, #0]
 800e738:	4f55      	ldr	r7, [pc, #340]	; (800e890 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800e73a:	7c5b      	ldrb	r3, [r3, #17]
 800e73c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800e740:	68c3      	ldr	r3, [r0, #12]
 800e742:	2108      	movs	r1, #8
 800e744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e746:	4798      	blx	r3
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	7c5b      	ldrb	r3, [r3, #17]
 800e74c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e750:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800e754:	2817      	cmp	r0, #23
 800e756:	bf88      	it	hi
 800e758:	2020      	movhi	r0, #32
 800e75a:	9008      	str	r0, [sp, #32]
 800e75c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e760:	f8d8 2000 	ldr.w	r2, [r8]
 800e764:	910a      	str	r1, [sp, #40]	; 0x28
 800e766:	2000      	movs	r0, #0
 800e768:	920b      	str	r2, [sp, #44]	; 0x2c
 800e76a:	f7fa fde7 	bl	800933c <GUI__AllocAlphaBuffer>
 800e76e:	2800      	cmp	r0, #0
 800e770:	f040 8089 	bne.w	800e886 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800e774:	682a      	ldr	r2, [r5, #0]
 800e776:	fa0f f78b 	sxth.w	r7, fp
 800e77a:	19f5      	adds	r5, r6, r7
 800e77c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800e780:	3d01      	subs	r5, #1
 800e782:	1aed      	subs	r5, r5, r3
 800e784:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800e788:	2d00      	cmp	r5, #0
 800e78a:	bfcc      	ite	gt
 800e78c:	ebc5 0507 	rsbgt	r5, r5, r7
 800e790:	463d      	movle	r5, r7
 800e792:	42b3      	cmp	r3, r6
 800e794:	bfc3      	ittte	gt
 800e796:	ebc6 0103 	rsbgt	r1, r6, r3
 800e79a:	ebc1 0505 	rsbgt	r5, r1, r5
 800e79e:	461e      	movgt	r6, r3
 800e7a0:	2100      	movle	r1, #0
 800e7a2:	2d00      	cmp	r5, #0
 800e7a4:	dd6f      	ble.n	800e886 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800e7a6:	fa0f f389 	sxth.w	r3, r9
 800e7aa:	18e0      	adds	r0, r4, r3
 800e7ac:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800e7b0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800e7b4:	3801      	subs	r0, #1
 800e7b6:	ebcc 0000 	rsb	r0, ip, r0
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	bfc8      	it	gt
 800e7be:	ebc0 0303 	rsbgt	r3, r0, r3
 800e7c2:	4294      	cmp	r4, r2
 800e7c4:	bfbd      	ittte	lt
 800e7c6:	ebc4 0a02 	rsblt	sl, r4, r2
 800e7ca:	ebca 0303 	rsblt	r3, sl, r3
 800e7ce:	4614      	movlt	r4, r2
 800e7d0:	f04f 0a00 	movge.w	sl, #0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	dd56      	ble.n	800e886 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800e7d8:	fb07 1a0a 	mla	sl, r7, sl, r1
 800e7dc:	18e3      	adds	r3, r4, r3
 800e7de:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e7e2:	930c      	str	r3, [sp, #48]	; 0x30
 800e7e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e7e6:	f7fd fd53 	bl	800c290 <GUI_MEMDEV_GetDataPtr>
 800e7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	ab0f      	add	r3, sp, #60	; 0x3c
 800e7f0:	eb00 020a 	add.w	r2, r0, sl
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	462b      	mov	r3, r5
 800e7fc:	f7fa fcb8 	bl	8009170 <GUI__DoAlphaBlending>
 800e800:	4681      	mov	r9, r0
 800e802:	2800      	cmp	r0, #0
 800e804:	d03f      	beq.n	800e886 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800e806:	4b23      	ldr	r3, [pc, #140]	; (800e894 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800e808:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e80a:	4299      	cmp	r1, r3
 800e80c:	d01e      	beq.n	800e84c <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800e80e:	4629      	mov	r1, r5
 800e810:	9a08      	ldr	r2, [sp, #32]
 800e812:	4643      	mov	r3, r8
 800e814:	f000 fb66 	bl	800eee4 <GUI__CompactPixelIndicesEx>
 800e818:	b9c0      	cbnz	r0, 800e84c <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800e81a:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800e81e:	f1bc 0f00 	cmp.w	ip, #0
 800e822:	d006      	beq.n	800e832 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800e824:	4648      	mov	r0, r9
 800e826:	4649      	mov	r1, r9
 800e828:	fa0f f28b 	sxth.w	r2, fp
 800e82c:	2304      	movs	r3, #4
 800e82e:	47e0      	blx	ip
 800e830:	e00c      	b.n	800e84c <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800e832:	464a      	mov	r2, r9
 800e834:	463b      	mov	r3, r7
 800e836:	6810      	ldr	r0, [r2, #0]
 800e838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e83a:	9206      	str	r2, [sp, #24]
 800e83c:	9307      	str	r3, [sp, #28]
 800e83e:	4788      	blx	r1
 800e840:	9b07      	ldr	r3, [sp, #28]
 800e842:	9a06      	ldr	r2, [sp, #24]
 800e844:	3b01      	subs	r3, #1
 800e846:	f842 0b04 	str.w	r0, [r2], #4
 800e84a:	d1f4      	bne.n	800e836 <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800e84c:	9a08      	ldr	r2, [sp, #32]
 800e84e:	9202      	str	r2, [sp, #8]
 800e850:	2301      	movs	r3, #1
 800e852:	2200      	movs	r2, #0
 800e854:	f104 0c01 	add.w	ip, r4, #1
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	9203      	str	r2, [sp, #12]
 800e85e:	9205      	str	r2, [sp, #20]
 800e860:	f8cd 9010 	str.w	r9, [sp, #16]
 800e864:	4630      	mov	r0, r6
 800e866:	4621      	mov	r1, r4
 800e868:	462a      	mov	r2, r5
 800e86a:	f8cd c01c 	str.w	ip, [sp, #28]
 800e86e:	f7fa f997 	bl	8008ba0 <LCD_DrawBitmap>
 800e872:	2304      	movs	r3, #4
 800e874:	fb1b aa03 	smlabb	sl, fp, r3, sl
 800e878:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e87c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e87e:	459c      	cmp	ip, r3
 800e880:	d001      	beq.n	800e886 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800e882:	4664      	mov	r4, ip
 800e884:	e7ae      	b.n	800e7e4 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800e886:	b011      	add	sp, #68	; 0x44
 800e888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88c:	20000020 	.word	0x20000020
 800e890:	20022eac 	.word	0x20022eac
 800e894:	0800a643 	.word	0x0800a643

0800e898 <GUI_MEMDEV_WriteAt>:
 800e898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e89a:	460c      	mov	r4, r1
 800e89c:	4615      	mov	r5, r2
 800e89e:	4606      	mov	r6, r0
 800e8a0:	b330      	cbz	r0, 800e8f0 <GUI_MEMDEV_WriteAt+0x58>
 800e8a2:	f7fb fba9 	bl	8009ff8 <GUI_ALLOC_LockH>
 800e8a6:	4a13      	ldr	r2, [pc, #76]	; (800e8f4 <GUI_MEMDEV_WriteAt+0x5c>)
 800e8a8:	8943      	ldrh	r3, [r0, #10]
 800e8aa:	9001      	str	r0, [sp, #4]
 800e8ac:	4294      	cmp	r4, r2
 800e8ae:	8902      	ldrh	r2, [r0, #8]
 800e8b0:	bf04      	itt	eq
 800e8b2:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800e8b6:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800e8ba:	f8ad 4008 	strh.w	r4, [sp, #8]
 800e8be:	3a01      	subs	r2, #1
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	4422      	add	r2, r4
 800e8c4:	442b      	add	r3, r5
 800e8c6:	a801      	add	r0, sp, #4
 800e8c8:	f8ad 200c 	strh.w	r2, [sp, #12]
 800e8cc:	f8ad 500a 	strh.w	r5, [sp, #10]
 800e8d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e8d4:	f7fb fb9e 	bl	800a014 <GUI_ALLOC_UnlockH>
 800e8d8:	a802      	add	r0, sp, #8
 800e8da:	f7fd f91b 	bl	800bb14 <WM__InitIVRSearch>
 800e8de:	b138      	cbz	r0, 800e8f0 <GUI_MEMDEV_WriteAt+0x58>
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	462a      	mov	r2, r5
 800e8e6:	f7fe fa99 	bl	800ce1c <GUI_MEMDEV__WriteToActiveAt>
 800e8ea:	f7fd f851 	bl	800b990 <WM__GetNextIVR>
 800e8ee:	e7f6      	b.n	800e8de <GUI_MEMDEV_WriteAt+0x46>
 800e8f0:	b004      	add	sp, #16
 800e8f2:	bd70      	pop	{r4, r5, r6, pc}
 800e8f4:	fffff001 	.word	0xfffff001

0800e8f8 <GUI_MEMDEV_Write>:
 800e8f8:	4901      	ldr	r1, [pc, #4]	; (800e900 <GUI_MEMDEV_Write+0x8>)
 800e8fa:	460a      	mov	r2, r1
 800e8fc:	f7ff bfcc 	b.w	800e898 <GUI_MEMDEV_WriteAt>
 800e900:	fffff001 	.word	0xfffff001

0800e904 <GUI_USAGE_BM_AddPixel>:
 800e904:	4603      	mov	r3, r0
 800e906:	b510      	push	{r4, lr}
 800e908:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800e90c:	1b09      	subs	r1, r1, r4
 800e90e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800e912:	6900      	ldr	r0, [r0, #16]
 800e914:	1b12      	subs	r2, r2, r4
 800e916:	fb00 3302 	mla	r3, r0, r2, r3
 800e91a:	10c8      	asrs	r0, r1, #3
 800e91c:	2280      	movs	r2, #128	; 0x80
 800e91e:	f001 0107 	and.w	r1, r1, #7
 800e922:	fa42 f101 	asr.w	r1, r2, r1
 800e926:	5c1a      	ldrb	r2, [r3, r0]
 800e928:	4311      	orrs	r1, r2
 800e92a:	5419      	strb	r1, [r3, r0]
 800e92c:	bd10      	pop	{r4, pc}

0800e92e <GUI_USAGE_BM_GetNextDirty>:
 800e92e:	b570      	push	{r4, r5, r6, lr}
 800e930:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800e934:	680b      	ldr	r3, [r1, #0]
 800e936:	8886      	ldrh	r6, [r0, #4]
 800e938:	42a2      	cmp	r2, r4
 800e93a:	da41      	bge.n	800e9c0 <GUI_USAGE_BM_GetNextDirty+0x92>
 800e93c:	b236      	sxth	r6, r6
 800e93e:	42b3      	cmp	r3, r6
 800e940:	6904      	ldr	r4, [r0, #16]
 800e942:	da3d      	bge.n	800e9c0 <GUI_USAGE_BM_GetNextDirty+0x92>
 800e944:	3014      	adds	r0, #20
 800e946:	fb04 0202 	mla	r2, r4, r2, r0
 800e94a:	10dd      	asrs	r5, r3, #3
 800e94c:	1e70      	subs	r0, r6, #1
 800e94e:	1954      	adds	r4, r2, r5
 800e950:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800e954:	5d55      	ldrb	r5, [r2, r5]
 800e956:	f003 0207 	and.w	r2, r3, #7
 800e95a:	fa05 f202 	lsl.w	r2, r5, r2
 800e95e:	3401      	adds	r4, #1
 800e960:	b2d2      	uxtb	r2, r2
 800e962:	b93a      	cbnz	r2, 800e974 <GUI_USAGE_BM_GetNextDirty+0x46>
 800e964:	b368      	cbz	r0, 800e9c2 <GUI_USAGE_BM_GetNextDirty+0x94>
 800e966:	3308      	adds	r3, #8
 800e968:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e96c:	3801      	subs	r0, #1
 800e96e:	f023 0307 	bic.w	r3, r3, #7
 800e972:	e7f6      	b.n	800e962 <GUI_USAGE_BM_GetNextDirty+0x34>
 800e974:	0615      	lsls	r5, r2, #24
 800e976:	d403      	bmi.n	800e980 <GUI_USAGE_BM_GetNextDirty+0x52>
 800e978:	0052      	lsls	r2, r2, #1
 800e97a:	b2d2      	uxtb	r2, r2
 800e97c:	3301      	adds	r3, #1
 800e97e:	e7f9      	b.n	800e974 <GUI_USAGE_BM_GetNextDirty+0x46>
 800e980:	2aff      	cmp	r2, #255	; 0xff
 800e982:	461d      	mov	r5, r3
 800e984:	d005      	beq.n	800e992 <GUI_USAGE_BM_GetNextDirty+0x64>
 800e986:	0656      	lsls	r6, r2, #25
 800e988:	d504      	bpl.n	800e994 <GUI_USAGE_BM_GetNextDirty+0x66>
 800e98a:	0052      	lsls	r2, r2, #1
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	3301      	adds	r3, #1
 800e990:	e7f9      	b.n	800e986 <GUI_USAGE_BM_GetNextDirty+0x58>
 800e992:	3307      	adds	r3, #7
 800e994:	f003 0207 	and.w	r2, r3, #7
 800e998:	2a07      	cmp	r2, #7
 800e99a:	d10d      	bne.n	800e9b8 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800e99c:	3801      	subs	r0, #1
 800e99e:	d40b      	bmi.n	800e9b8 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800e9a0:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e9a4:	2aff      	cmp	r2, #255	; 0xff
 800e9a6:	d101      	bne.n	800e9ac <GUI_USAGE_BM_GetNextDirty+0x7e>
 800e9a8:	3308      	adds	r3, #8
 800e9aa:	e7f7      	b.n	800e99c <GUI_USAGE_BM_GetNextDirty+0x6e>
 800e9ac:	0610      	lsls	r0, r2, #24
 800e9ae:	d503      	bpl.n	800e9b8 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800e9b0:	0052      	lsls	r2, r2, #1
 800e9b2:	b2d2      	uxtb	r2, r2
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	e7f9      	b.n	800e9ac <GUI_USAGE_BM_GetNextDirty+0x7e>
 800e9b8:	1b58      	subs	r0, r3, r5
 800e9ba:	600d      	str	r5, [r1, #0]
 800e9bc:	3001      	adds	r0, #1
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	bd70      	pop	{r4, r5, r6, pc}

0800e9c4 <_GUI_USAGE_BM_Delete>:
 800e9c4:	f7fb bb46 	b.w	800a054 <GUI_ALLOC_Free>

0800e9c8 <GUI_USAGE_BM_Clear>:
 800e9c8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800e9cc:	6902      	ldr	r2, [r0, #16]
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	3014      	adds	r0, #20
 800e9d2:	435a      	muls	r2, r3
 800e9d4:	f000 bc1f 	b.w	800f216 <memset>

0800e9d8 <GUI_USAGE_BM_AddHLine>:
 800e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9da:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e9de:	1b09      	subs	r1, r1, r4
 800e9e0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800e9e4:	42a1      	cmp	r1, r4
 800e9e6:	da2f      	bge.n	800ea48 <GUI_USAGE_BM_AddHLine+0x70>
 800e9e8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800e9ec:	440b      	add	r3, r1
 800e9ee:	f100 0414 	add.w	r4, r0, #20
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	6900      	ldr	r0, [r0, #16]
 800e9f6:	1b52      	subs	r2, r2, r5
 800e9f8:	43de      	mvns	r6, r3
 800e9fa:	fb00 4202 	mla	r2, r0, r2, r4
 800e9fe:	f001 0707 	and.w	r7, r1, #7
 800ea02:	10cc      	asrs	r4, r1, #3
 800ea04:	f006 0607 	and.w	r6, r6, #7
 800ea08:	21ff      	movs	r1, #255	; 0xff
 800ea0a:	fa41 f707 	asr.w	r7, r1, r7
 800ea0e:	fa01 f606 	lsl.w	r6, r1, r6
 800ea12:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800ea16:	eb02 0504 	add.w	r5, r2, r4
 800ea1a:	b2ff      	uxtb	r7, r7
 800ea1c:	b2f6      	uxtb	r6, r6
 800ea1e:	5d10      	ldrb	r0, [r2, r4]
 800ea20:	d103      	bne.n	800ea2a <GUI_USAGE_BM_AddHLine+0x52>
 800ea22:	403e      	ands	r6, r7
 800ea24:	4330      	orrs	r0, r6
 800ea26:	5510      	strb	r0, [r2, r4]
 800ea28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea2a:	4338      	orrs	r0, r7
 800ea2c:	5510      	strb	r0, [r2, r4]
 800ea2e:	1e5c      	subs	r4, r3, #1
 800ea30:	2c00      	cmp	r4, #0
 800ea32:	f105 0501 	add.w	r5, r5, #1
 800ea36:	dd04      	ble.n	800ea42 <GUI_USAGE_BM_AddHLine+0x6a>
 800ea38:	4628      	mov	r0, r5
 800ea3a:	4622      	mov	r2, r4
 800ea3c:	f000 fbeb 	bl	800f216 <memset>
 800ea40:	4425      	add	r5, r4
 800ea42:	782b      	ldrb	r3, [r5, #0]
 800ea44:	431e      	orrs	r6, r3
 800ea46:	702e      	strb	r6, [r5, #0]
 800ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea4c <GUI_USAGE_BM_Create>:
 800ea4c:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	f102 060f 	add.w	r6, r2, #15
 800ea54:	1136      	asrs	r6, r6, #4
 800ea56:	0076      	lsls	r6, r6, #1
 800ea58:	4682      	mov	sl, r0
 800ea5a:	fb06 f003 	mul.w	r0, r6, r3
 800ea5e:	3014      	adds	r0, #20
 800ea60:	4689      	mov	r9, r1
 800ea62:	4690      	mov	r8, r2
 800ea64:	461f      	mov	r7, r3
 800ea66:	f7ff f889 	bl	800db7c <GUI_ALLOC_AllocZero>
 800ea6a:	4683      	mov	fp, r0
 800ea6c:	b198      	cbz	r0, 800ea96 <GUI_USAGE_BM_Create+0x4a>
 800ea6e:	f7fb fac3 	bl	8009ff8 <GUI_ALLOC_LockH>
 800ea72:	4604      	mov	r4, r0
 800ea74:	4b0a      	ldr	r3, [pc, #40]	; (800eaa0 <GUI_USAGE_BM_Create+0x54>)
 800ea76:	60a3      	str	r3, [r4, #8]
 800ea78:	a802      	add	r0, sp, #8
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800ea80:	f8a4 8004 	strh.w	r8, [r4, #4]
 800ea84:	f8a4 a000 	strh.w	sl, [r4]
 800ea88:	f8a4 9002 	strh.w	r9, [r4, #2]
 800ea8c:	80e7      	strh	r7, [r4, #6]
 800ea8e:	81a3      	strh	r3, [r4, #12]
 800ea90:	6126      	str	r6, [r4, #16]
 800ea92:	f7fb fabf 	bl	800a014 <GUI_ALLOC_UnlockH>
 800ea96:	4658      	mov	r0, fp
 800ea98:	b002      	add	sp, #8
 800ea9a:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800ea9e:	bf00      	nop
 800eaa0:	080807f8 	.word	0x080807f8

0800eaa4 <GUI_USAGE_DecUseCnt>:
 800eaa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	f7fb faa6 	bl	8009ff8 <GUI_ALLOC_LockH>
 800eaac:	4602      	mov	r2, r0
 800eaae:	a802      	add	r0, sp, #8
 800eab0:	8994      	ldrh	r4, [r2, #12]
 800eab2:	f840 2d04 	str.w	r2, [r0, #-4]!
 800eab6:	3c01      	subs	r4, #1
 800eab8:	b2a4      	uxth	r4, r4
 800eaba:	8194      	strh	r4, [r2, #12]
 800eabc:	f7fb faaa 	bl	800a014 <GUI_ALLOC_UnlockH>
 800eac0:	b914      	cbnz	r4, 800eac8 <GUI_USAGE_DecUseCnt+0x24>
 800eac2:	4628      	mov	r0, r5
 800eac4:	f7fb fac6 	bl	800a054 <GUI_ALLOC_Free>
 800eac8:	b003      	add	sp, #12
 800eaca:	bd30      	pop	{r4, r5, pc}

0800eacc <GUI_USAGE_AddRect>:
 800eacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead0:	4605      	mov	r5, r0
 800ead2:	4688      	mov	r8, r1
 800ead4:	4617      	mov	r7, r2
 800ead6:	4699      	mov	r9, r3
 800ead8:	68a8      	ldr	r0, [r5, #8]
 800eada:	464b      	mov	r3, r9
 800eadc:	6846      	ldr	r6, [r0, #4]
 800eade:	4641      	mov	r1, r8
 800eae0:	4628      	mov	r0, r5
 800eae2:	1c54      	adds	r4, r2, #1
 800eae4:	47b0      	blx	r6
 800eae6:	9b08      	ldr	r3, [sp, #32]
 800eae8:	443b      	add	r3, r7
 800eaea:	42a3      	cmp	r3, r4
 800eaec:	d001      	beq.n	800eaf2 <GUI_USAGE_AddRect+0x26>
 800eaee:	4622      	mov	r2, r4
 800eaf0:	e7f2      	b.n	800ead8 <GUI_USAGE_AddRect+0xc>
 800eaf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800eaf8 <GUI_MEMDEV_ReduceYSize>:
 800eaf8:	b513      	push	{r0, r1, r4, lr}
 800eafa:	460c      	mov	r4, r1
 800eafc:	b918      	cbnz	r0, 800eb06 <GUI_MEMDEV_ReduceYSize+0xe>
 800eafe:	4b08      	ldr	r3, [pc, #32]	; (800eb20 <GUI_MEMDEV_ReduceYSize+0x28>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800eb04:	b150      	cbz	r0, 800eb1c <GUI_MEMDEV_ReduceYSize+0x24>
 800eb06:	f7fb fa77 	bl	8009ff8 <GUI_ALLOC_LockH>
 800eb0a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800eb0e:	9001      	str	r0, [sp, #4]
 800eb10:	429c      	cmp	r4, r3
 800eb12:	bfb8      	it	lt
 800eb14:	8144      	strhlt	r4, [r0, #10]
 800eb16:	a801      	add	r0, sp, #4
 800eb18:	f7fb fa7c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800eb1c:	b002      	add	sp, #8
 800eb1e:	bd10      	pop	{r4, pc}
 800eb20:	20000020 	.word	0x20000020

0800eb24 <GUI_MEMDEV_Clear>:
 800eb24:	b513      	push	{r0, r1, r4, lr}
 800eb26:	b918      	cbnz	r0, 800eb30 <GUI_MEMDEV_Clear+0xc>
 800eb28:	4b0d      	ldr	r3, [pc, #52]	; (800eb60 <GUI_MEMDEV_Clear+0x3c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800eb2e:	b1a8      	cbz	r0, 800eb5c <GUI_MEMDEV_Clear+0x38>
 800eb30:	f7fb fa62 	bl	8009ff8 <GUI_ALLOC_LockH>
 800eb34:	ab02      	add	r3, sp, #8
 800eb36:	6944      	ldr	r4, [r0, #20]
 800eb38:	f843 0d08 	str.w	r0, [r3, #-8]!
 800eb3c:	4668      	mov	r0, sp
 800eb3e:	f7fb fa69 	bl	800a014 <GUI_ALLOC_UnlockH>
 800eb42:	b15c      	cbz	r4, 800eb5c <GUI_MEMDEV_Clear+0x38>
 800eb44:	4620      	mov	r0, r4
 800eb46:	f7fb fa57 	bl	8009ff8 <GUI_ALLOC_LockH>
 800eb4a:	ac02      	add	r4, sp, #8
 800eb4c:	6883      	ldr	r3, [r0, #8]
 800eb4e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	4798      	blx	r3
 800eb56:	4620      	mov	r0, r4
 800eb58:	f7fb fa5c 	bl	800a014 <GUI_ALLOC_UnlockH>
 800eb5c:	b002      	add	sp, #8
 800eb5e:	bd10      	pop	{r4, pc}
 800eb60:	20000020 	.word	0x20000020

0800eb64 <LCD_GetPixelColor>:
 800eb64:	b508      	push	{r3, lr}
 800eb66:	f000 f805 	bl	800eb74 <LCD_GetPixelIndex>
 800eb6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eb6e:	f7fa b98d 	b.w	8008e8c <LCD_Index2Color>
	...

0800eb74 <LCD_GetPixelIndex>:
 800eb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb76:	4f14      	ldr	r7, [pc, #80]	; (800ebc8 <LCD_GetPixelIndex+0x54>)
 800eb78:	4e14      	ldr	r6, [pc, #80]	; (800ebcc <LCD_GetPixelIndex+0x58>)
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	7c5b      	ldrb	r3, [r3, #17]
 800eb7e:	4605      	mov	r5, r0
 800eb80:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800eb84:	68c3      	ldr	r3, [r0, #12]
 800eb86:	460c      	mov	r4, r1
 800eb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8a:	4669      	mov	r1, sp
 800eb8c:	4798      	blx	r3
 800eb8e:	f9bd 3000 	ldrsh.w	r3, [sp]
 800eb92:	429d      	cmp	r5, r3
 800eb94:	db15      	blt.n	800ebc2 <LCD_GetPixelIndex+0x4e>
 800eb96:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800eb9a:	429d      	cmp	r5, r3
 800eb9c:	dc11      	bgt.n	800ebc2 <LCD_GetPixelIndex+0x4e>
 800eb9e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800eba2:	429c      	cmp	r4, r3
 800eba4:	db0d      	blt.n	800ebc2 <LCD_GetPixelIndex+0x4e>
 800eba6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800ebaa:	429c      	cmp	r4, r3
 800ebac:	dc09      	bgt.n	800ebc2 <LCD_GetPixelIndex+0x4e>
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	7c5b      	ldrb	r3, [r3, #17]
 800ebb2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800ebb6:	68c3      	ldr	r3, [r0, #12]
 800ebb8:	4629      	mov	r1, r5
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	4622      	mov	r2, r4
 800ebbe:	4798      	blx	r3
 800ebc0:	e000      	b.n	800ebc4 <LCD_GetPixelIndex+0x50>
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc8:	20000020 	.word	0x20000020
 800ebcc:	20022eac 	.word	0x20022eac

0800ebd0 <GUI__CompactPixelIndices>:
 800ebd0:	2a08      	cmp	r2, #8
 800ebd2:	b510      	push	{r4, lr}
 800ebd4:	dd0e      	ble.n	800ebf4 <GUI__CompactPixelIndices+0x24>
 800ebd6:	2a10      	cmp	r2, #16
 800ebd8:	dc0a      	bgt.n	800ebf0 <GUI__CompactPixelIndices+0x20>
 800ebda:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ebde:	4603      	mov	r3, r0
 800ebe0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ebe4:	f823 2b02 	strh.w	r2, [r3], #2
 800ebe8:	428b      	cmp	r3, r1
 800ebea:	d1f9      	bne.n	800ebe0 <GUI__CompactPixelIndices+0x10>
 800ebec:	2001      	movs	r0, #1
 800ebee:	bd10      	pop	{r4, pc}
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	bd10      	pop	{r4, pc}
 800ebf4:	2a02      	cmp	r2, #2
 800ebf6:	d06d      	beq.n	800ecd4 <GUI__CompactPixelIndices+0x104>
 800ebf8:	2a04      	cmp	r2, #4
 800ebfa:	d054      	beq.n	800eca6 <GUI__CompactPixelIndices+0xd6>
 800ebfc:	2a01      	cmp	r2, #1
 800ebfe:	f040 8095 	bne.w	800ed2c <GUI__CompactPixelIndices+0x15c>
 800ec02:	4604      	mov	r4, r0
 800ec04:	6803      	ldr	r3, [r0, #0]
 800ec06:	2901      	cmp	r1, #1
 800ec08:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	d047      	beq.n	800eca0 <GUI__CompactPixelIndices+0xd0>
 800ec10:	6842      	ldr	r2, [r0, #4]
 800ec12:	2902      	cmp	r1, #2
 800ec14:	f002 0201 	and.w	r2, r2, #1
 800ec18:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ec1c:	d102      	bne.n	800ec24 <GUI__CompactPixelIndices+0x54>
 800ec1e:	f100 0208 	add.w	r2, r0, #8
 800ec22:	e03e      	b.n	800eca2 <GUI__CompactPixelIndices+0xd2>
 800ec24:	6882      	ldr	r2, [r0, #8]
 800ec26:	2903      	cmp	r1, #3
 800ec28:	f002 0201 	and.w	r2, r2, #1
 800ec2c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ec30:	d102      	bne.n	800ec38 <GUI__CompactPixelIndices+0x68>
 800ec32:	f100 020c 	add.w	r2, r0, #12
 800ec36:	e034      	b.n	800eca2 <GUI__CompactPixelIndices+0xd2>
 800ec38:	68c2      	ldr	r2, [r0, #12]
 800ec3a:	2904      	cmp	r1, #4
 800ec3c:	f002 0201 	and.w	r2, r2, #1
 800ec40:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ec44:	d102      	bne.n	800ec4c <GUI__CompactPixelIndices+0x7c>
 800ec46:	f100 0210 	add.w	r2, r0, #16
 800ec4a:	e02a      	b.n	800eca2 <GUI__CompactPixelIndices+0xd2>
 800ec4c:	6902      	ldr	r2, [r0, #16]
 800ec4e:	2905      	cmp	r1, #5
 800ec50:	f002 0201 	and.w	r2, r2, #1
 800ec54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ec58:	d102      	bne.n	800ec60 <GUI__CompactPixelIndices+0x90>
 800ec5a:	f100 0214 	add.w	r2, r0, #20
 800ec5e:	e020      	b.n	800eca2 <GUI__CompactPixelIndices+0xd2>
 800ec60:	6942      	ldr	r2, [r0, #20]
 800ec62:	2906      	cmp	r1, #6
 800ec64:	f002 0201 	and.w	r2, r2, #1
 800ec68:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800ec6c:	d102      	bne.n	800ec74 <GUI__CompactPixelIndices+0xa4>
 800ec6e:	f100 0218 	add.w	r2, r0, #24
 800ec72:	e016      	b.n	800eca2 <GUI__CompactPixelIndices+0xd2>
 800ec74:	6982      	ldr	r2, [r0, #24]
 800ec76:	3907      	subs	r1, #7
 800ec78:	f002 0201 	and.w	r2, r2, #1
 800ec7c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800ec80:	d102      	bne.n	800ec88 <GUI__CompactPixelIndices+0xb8>
 800ec82:	f100 021c 	add.w	r2, r0, #28
 800ec86:	e005      	b.n	800ec94 <GUI__CompactPixelIndices+0xc4>
 800ec88:	f100 0220 	add.w	r2, r0, #32
 800ec8c:	69c0      	ldr	r0, [r0, #28]
 800ec8e:	f000 0001 	and.w	r0, r0, #1
 800ec92:	4303      	orrs	r3, r0
 800ec94:	f804 3b01 	strb.w	r3, [r4], #1
 800ec98:	2900      	cmp	r1, #0
 800ec9a:	d0a7      	beq.n	800ebec <GUI__CompactPixelIndices+0x1c>
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	e7b1      	b.n	800ec04 <GUI__CompactPixelIndices+0x34>
 800eca0:	1d02      	adds	r2, r0, #4
 800eca2:	2100      	movs	r1, #0
 800eca4:	e7f6      	b.n	800ec94 <GUI__CompactPixelIndices+0xc4>
 800eca6:	4602      	mov	r2, r0
 800eca8:	6803      	ldr	r3, [r0, #0]
 800ecaa:	2901      	cmp	r1, #1
 800ecac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	d102      	bne.n	800ecba <GUI__CompactPixelIndices+0xea>
 800ecb4:	1d04      	adds	r4, r0, #4
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	e006      	b.n	800ecc8 <GUI__CompactPixelIndices+0xf8>
 800ecba:	f100 0408 	add.w	r4, r0, #8
 800ecbe:	6840      	ldr	r0, [r0, #4]
 800ecc0:	f000 000f 	and.w	r0, r0, #15
 800ecc4:	4303      	orrs	r3, r0
 800ecc6:	3902      	subs	r1, #2
 800ecc8:	f802 3b01 	strb.w	r3, [r2], #1
 800eccc:	2900      	cmp	r1, #0
 800ecce:	d08d      	beq.n	800ebec <GUI__CompactPixelIndices+0x1c>
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	e7e9      	b.n	800eca8 <GUI__CompactPixelIndices+0xd8>
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	6803      	ldr	r3, [r0, #0]
 800ecd8:	2901      	cmp	r1, #1
 800ecda:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	d021      	beq.n	800ed26 <GUI__CompactPixelIndices+0x156>
 800ece2:	6842      	ldr	r2, [r0, #4]
 800ece4:	2902      	cmp	r1, #2
 800ece6:	f002 0203 	and.w	r2, r2, #3
 800ecea:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ecee:	d102      	bne.n	800ecf6 <GUI__CompactPixelIndices+0x126>
 800ecf0:	f100 0208 	add.w	r2, r0, #8
 800ecf4:	e018      	b.n	800ed28 <GUI__CompactPixelIndices+0x158>
 800ecf6:	6882      	ldr	r2, [r0, #8]
 800ecf8:	2903      	cmp	r1, #3
 800ecfa:	f002 0203 	and.w	r2, r2, #3
 800ecfe:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800ed02:	d102      	bne.n	800ed0a <GUI__CompactPixelIndices+0x13a>
 800ed04:	f100 020c 	add.w	r2, r0, #12
 800ed08:	e00e      	b.n	800ed28 <GUI__CompactPixelIndices+0x158>
 800ed0a:	f100 0210 	add.w	r2, r0, #16
 800ed0e:	68c0      	ldr	r0, [r0, #12]
 800ed10:	f000 0003 	and.w	r0, r0, #3
 800ed14:	4303      	orrs	r3, r0
 800ed16:	3904      	subs	r1, #4
 800ed18:	f804 3b01 	strb.w	r3, [r4], #1
 800ed1c:	2900      	cmp	r1, #0
 800ed1e:	f43f af65 	beq.w	800ebec <GUI__CompactPixelIndices+0x1c>
 800ed22:	4610      	mov	r0, r2
 800ed24:	e7d7      	b.n	800ecd6 <GUI__CompactPixelIndices+0x106>
 800ed26:	1d02      	adds	r2, r0, #4
 800ed28:	2100      	movs	r1, #0
 800ed2a:	e7f5      	b.n	800ed18 <GUI__CompactPixelIndices+0x148>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800ed32:	54c2      	strb	r2, [r0, r3]
 800ed34:	3301      	adds	r3, #1
 800ed36:	428b      	cmp	r3, r1
 800ed38:	d1f9      	bne.n	800ed2e <GUI__CompactPixelIndices+0x15e>
 800ed3a:	e757      	b.n	800ebec <GUI__CompactPixelIndices+0x1c>

0800ed3c <GUI__ConvertColor2Index>:
 800ed3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed44:	681e      	ldr	r6, [r3, #0]
 800ed46:	f1b8 0f00 	cmp.w	r8, #0
 800ed4a:	bf08      	it	eq
 800ed4c:	4680      	moveq	r8, r0
 800ed4e:	2a08      	cmp	r2, #8
 800ed50:	4604      	mov	r4, r0
 800ed52:	460d      	mov	r5, r1
 800ed54:	dd05      	ble.n	800ed62 <GUI__ConvertColor2Index+0x26>
 800ed56:	2a10      	cmp	r2, #16
 800ed58:	f340 80b6 	ble.w	800eec8 <GUI__ConvertColor2Index+0x18c>
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed62:	3a01      	subs	r2, #1
 800ed64:	2a07      	cmp	r2, #7
 800ed66:	f200 80a4 	bhi.w	800eeb2 <GUI__ConvertColor2Index+0x176>
 800ed6a:	e8df f002 	tbb	[pc, r2]
 800ed6e:	6111      	.short	0x6111
 800ed70:	a2a287a2 	.word	0xa2a287a2
 800ed74:	92a2      	.short	0x92a2
 800ed76:	69e0      	ldr	r0, [r4, #28]
 800ed78:	47b0      	blx	r6
 800ed7a:	4338      	orrs	r0, r7
 800ed7c:	f104 0920 	add.w	r9, r4, #32
 800ed80:	b2c7      	uxtb	r7, r0
 800ed82:	3d08      	subs	r5, #8
 800ed84:	f808 7b01 	strb.w	r7, [r8], #1
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	f000 8092 	beq.w	800eeb2 <GUI__ConvertColor2Index+0x176>
 800ed8e:	464c      	mov	r4, r9
 800ed90:	6820      	ldr	r0, [r4, #0]
 800ed92:	47b0      	blx	r6
 800ed94:	2d01      	cmp	r5, #1
 800ed96:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800ed9a:	b2c7      	uxtb	r7, r0
 800ed9c:	f000 808c 	beq.w	800eeb8 <GUI__ConvertColor2Index+0x17c>
 800eda0:	6860      	ldr	r0, [r4, #4]
 800eda2:	47b0      	blx	r6
 800eda4:	2d02      	cmp	r5, #2
 800eda6:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 800edaa:	b2c7      	uxtb	r7, r0
 800edac:	d102      	bne.n	800edb4 <GUI__ConvertColor2Index+0x78>
 800edae:	f104 0908 	add.w	r9, r4, #8
 800edb2:	e083      	b.n	800eebc <GUI__ConvertColor2Index+0x180>
 800edb4:	68a0      	ldr	r0, [r4, #8]
 800edb6:	47b0      	blx	r6
 800edb8:	2d03      	cmp	r5, #3
 800edba:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 800edbe:	b2c7      	uxtb	r7, r0
 800edc0:	d102      	bne.n	800edc8 <GUI__ConvertColor2Index+0x8c>
 800edc2:	f104 090c 	add.w	r9, r4, #12
 800edc6:	e079      	b.n	800eebc <GUI__ConvertColor2Index+0x180>
 800edc8:	68e0      	ldr	r0, [r4, #12]
 800edca:	47b0      	blx	r6
 800edcc:	2d04      	cmp	r5, #4
 800edce:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800edd2:	b2c7      	uxtb	r7, r0
 800edd4:	d102      	bne.n	800eddc <GUI__ConvertColor2Index+0xa0>
 800edd6:	f104 0910 	add.w	r9, r4, #16
 800edda:	e06f      	b.n	800eebc <GUI__ConvertColor2Index+0x180>
 800eddc:	6920      	ldr	r0, [r4, #16]
 800edde:	47b0      	blx	r6
 800ede0:	2d05      	cmp	r5, #5
 800ede2:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 800ede6:	b2c7      	uxtb	r7, r0
 800ede8:	d102      	bne.n	800edf0 <GUI__ConvertColor2Index+0xb4>
 800edea:	f104 0914 	add.w	r9, r4, #20
 800edee:	e065      	b.n	800eebc <GUI__ConvertColor2Index+0x180>
 800edf0:	6960      	ldr	r0, [r4, #20]
 800edf2:	47b0      	blx	r6
 800edf4:	2d06      	cmp	r5, #6
 800edf6:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800edfa:	b2c7      	uxtb	r7, r0
 800edfc:	d102      	bne.n	800ee04 <GUI__ConvertColor2Index+0xc8>
 800edfe:	f104 0918 	add.w	r9, r4, #24
 800ee02:	e05b      	b.n	800eebc <GUI__ConvertColor2Index+0x180>
 800ee04:	69a0      	ldr	r0, [r4, #24]
 800ee06:	47b0      	blx	r6
 800ee08:	2d07      	cmp	r5, #7
 800ee0a:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 800ee0e:	b2c7      	uxtb	r7, r0
 800ee10:	d1b1      	bne.n	800ed76 <GUI__ConvertColor2Index+0x3a>
 800ee12:	f104 091c 	add.w	r9, r4, #28
 800ee16:	e051      	b.n	800eebc <GUI__ConvertColor2Index+0x180>
 800ee18:	68e0      	ldr	r0, [r4, #12]
 800ee1a:	47b0      	blx	r6
 800ee1c:	4338      	orrs	r0, r7
 800ee1e:	f104 0910 	add.w	r9, r4, #16
 800ee22:	b2c7      	uxtb	r7, r0
 800ee24:	3d04      	subs	r5, #4
 800ee26:	f808 7b01 	strb.w	r7, [r8], #1
 800ee2a:	2d00      	cmp	r5, #0
 800ee2c:	d041      	beq.n	800eeb2 <GUI__ConvertColor2Index+0x176>
 800ee2e:	464c      	mov	r4, r9
 800ee30:	6820      	ldr	r0, [r4, #0]
 800ee32:	47b0      	blx	r6
 800ee34:	2d01      	cmp	r5, #1
 800ee36:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800ee3a:	b2c7      	uxtb	r7, r0
 800ee3c:	d040      	beq.n	800eec0 <GUI__ConvertColor2Index+0x184>
 800ee3e:	6860      	ldr	r0, [r4, #4]
 800ee40:	47b0      	blx	r6
 800ee42:	2d02      	cmp	r5, #2
 800ee44:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800ee48:	b2c7      	uxtb	r7, r0
 800ee4a:	d102      	bne.n	800ee52 <GUI__ConvertColor2Index+0x116>
 800ee4c:	f104 0908 	add.w	r9, r4, #8
 800ee50:	e038      	b.n	800eec4 <GUI__ConvertColor2Index+0x188>
 800ee52:	68a0      	ldr	r0, [r4, #8]
 800ee54:	47b0      	blx	r6
 800ee56:	2d03      	cmp	r5, #3
 800ee58:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800ee5c:	b2c7      	uxtb	r7, r0
 800ee5e:	d1db      	bne.n	800ee18 <GUI__ConvertColor2Index+0xdc>
 800ee60:	f104 090c 	add.w	r9, r4, #12
 800ee64:	e02e      	b.n	800eec4 <GUI__ConvertColor2Index+0x188>
 800ee66:	6860      	ldr	r0, [r4, #4]
 800ee68:	47b0      	blx	r6
 800ee6a:	4338      	orrs	r0, r7
 800ee6c:	f104 0908 	add.w	r9, r4, #8
 800ee70:	b2c7      	uxtb	r7, r0
 800ee72:	3d02      	subs	r5, #2
 800ee74:	f808 7b01 	strb.w	r7, [r8], #1
 800ee78:	b1dd      	cbz	r5, 800eeb2 <GUI__ConvertColor2Index+0x176>
 800ee7a:	464c      	mov	r4, r9
 800ee7c:	6820      	ldr	r0, [r4, #0]
 800ee7e:	47b0      	blx	r6
 800ee80:	2d01      	cmp	r5, #1
 800ee82:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800ee86:	b2c7      	uxtb	r7, r0
 800ee88:	d1ed      	bne.n	800ee66 <GUI__ConvertColor2Index+0x12a>
 800ee8a:	f104 0904 	add.w	r9, r4, #4
 800ee8e:	2500      	movs	r5, #0
 800ee90:	e7f0      	b.n	800ee74 <GUI__ConvertColor2Index+0x138>
 800ee92:	691f      	ldr	r7, [r3, #16]
 800ee94:	b12f      	cbz	r7, 800eea2 <GUI__ConvertColor2Index+0x166>
 800ee96:	4620      	mov	r0, r4
 800ee98:	4641      	mov	r1, r8
 800ee9a:	462a      	mov	r2, r5
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	47b8      	blx	r7
 800eea0:	e007      	b.n	800eeb2 <GUI__ConvertColor2Index+0x176>
 800eea2:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 800eea6:	47b0      	blx	r6
 800eea8:	f808 0007 	strb.w	r0, [r8, r7]
 800eeac:	3701      	adds	r7, #1
 800eeae:	42bd      	cmp	r5, r7
 800eeb0:	d1f7      	bne.n	800eea2 <GUI__ConvertColor2Index+0x166>
 800eeb2:	2001      	movs	r0, #1
 800eeb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb8:	f104 0904 	add.w	r9, r4, #4
 800eebc:	2500      	movs	r5, #0
 800eebe:	e761      	b.n	800ed84 <GUI__ConvertColor2Index+0x48>
 800eec0:	f104 0904 	add.w	r9, r4, #4
 800eec4:	2500      	movs	r5, #0
 800eec6:	e7ae      	b.n	800ee26 <GUI__ConvertColor2Index+0xea>
 800eec8:	691f      	ldr	r7, [r3, #16]
 800eeca:	b11f      	cbz	r7, 800eed4 <GUI__ConvertColor2Index+0x198>
 800eecc:	4641      	mov	r1, r8
 800eece:	462a      	mov	r2, r5
 800eed0:	2302      	movs	r3, #2
 800eed2:	e7e4      	b.n	800ee9e <GUI__ConvertColor2Index+0x162>
 800eed4:	f854 0b04 	ldr.w	r0, [r4], #4
 800eed8:	47b0      	blx	r6
 800eeda:	3d01      	subs	r5, #1
 800eedc:	f828 0b02 	strh.w	r0, [r8], #2
 800eee0:	d1f8      	bne.n	800eed4 <GUI__ConvertColor2Index+0x198>
 800eee2:	e7e6      	b.n	800eeb2 <GUI__ConvertColor2Index+0x176>

0800eee4 <GUI__CompactPixelIndicesEx>:
 800eee4:	b513      	push	{r0, r1, r4, lr}
 800eee6:	2400      	movs	r4, #0
 800eee8:	9400      	str	r4, [sp, #0]
 800eeea:	f7ff ff27 	bl	800ed3c <GUI__ConvertColor2Index>
 800eeee:	b002      	add	sp, #8
 800eef0:	bd10      	pop	{r4, pc}
	...

0800eef4 <GUI_SetTextMode>:
 800eef4:	4b03      	ldr	r3, [pc, #12]	; (800ef04 <GUI_SetTextMode+0x10>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800eefc:	8558      	strh	r0, [r3, #42]	; 0x2a
 800eefe:	4610      	mov	r0, r2
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	20000020 	.word	0x20000020

0800ef08 <GUI_SetTextAlign>:
 800ef08:	4b03      	ldr	r3, [pc, #12]	; (800ef18 <GUI_SetTextAlign+0x10>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800ef10:	8598      	strh	r0, [r3, #44]	; 0x2c
 800ef12:	4610      	mov	r0, r2
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	20000020 	.word	0x20000020

0800ef1c <GUI_SetLineStyle>:
 800ef1c:	4b02      	ldr	r3, [pc, #8]	; (800ef28 <GUI_SetLineStyle+0xc>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	7e9a      	ldrb	r2, [r3, #26]
 800ef22:	7698      	strb	r0, [r3, #26]
 800ef24:	4610      	mov	r0, r2
 800ef26:	4770      	bx	lr
 800ef28:	20000020 	.word	0x20000020

0800ef2c <GUI_SetFont>:
 800ef2c:	4b03      	ldr	r3, [pc, #12]	; (800ef3c <GUI_SetFont+0x10>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	69d9      	ldr	r1, [r3, #28]
 800ef32:	b100      	cbz	r0, 800ef36 <GUI_SetFont+0xa>
 800ef34:	61d8      	str	r0, [r3, #28]
 800ef36:	4608      	mov	r0, r1
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	20000020 	.word	0x20000020

0800ef40 <WM__UpdateChildPositions>:
 800ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef44:	b087      	sub	sp, #28
 800ef46:	69c4      	ldr	r4, [r0, #28]
 800ef48:	9303      	str	r3, [sp, #12]
 800ef4a:	468a      	mov	sl, r1
 800ef4c:	4693      	mov	fp, r2
 800ef4e:	2c00      	cmp	r4, #0
 800ef50:	d06d      	beq.n	800f02e <WM__UpdateChildPositions+0xee>
 800ef52:	4620      	mov	r0, r4
 800ef54:	f7fb f850 	bl	8009ff8 <GUI_ALLOC_LockH>
 800ef58:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ef5a:	9005      	str	r0, [sp, #20]
 800ef5c:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800ef60:	2b80      	cmp	r3, #128	; 0x80
 800ef62:	f8b0 8000 	ldrh.w	r8, [r0]
 800ef66:	8842      	ldrh	r2, [r0, #2]
 800ef68:	8886      	ldrh	r6, [r0, #4]
 800ef6a:	88c5      	ldrh	r5, [r0, #6]
 800ef6c:	d008      	beq.n	800ef80 <WM__UpdateChildPositions+0x40>
 800ef6e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef72:	d108      	bne.n	800ef86 <WM__UpdateChildPositions+0x46>
 800ef74:	eb08 090a 	add.w	r9, r8, sl
 800ef78:	fa1f f989 	uxth.w	r9, r9
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	e008      	b.n	800ef92 <WM__UpdateChildPositions+0x52>
 800ef80:	9803      	ldr	r0, [sp, #12]
 800ef82:	b283      	uxth	r3, r0
 800ef84:	e001      	b.n	800ef8a <WM__UpdateChildPositions+0x4a>
 800ef86:	fa1f f38a 	uxth.w	r3, sl
 800ef8a:	eb03 0908 	add.w	r9, r3, r8
 800ef8e:	fa1f f989 	uxth.w	r9, r9
 800ef92:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800ef96:	4433      	add	r3, r6
 800ef98:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	d008      	beq.n	800efb2 <WM__UpdateChildPositions+0x72>
 800efa0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800efa4:	d108      	bne.n	800efb8 <WM__UpdateChildPositions+0x78>
 800efa6:	eb02 0c0b 	add.w	ip, r2, fp
 800efaa:	fa1f fc8c 	uxth.w	ip, ip
 800efae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800efb0:	e008      	b.n	800efc4 <WM__UpdateChildPositions+0x84>
 800efb2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800efb4:	b28f      	uxth	r7, r1
 800efb6:	e001      	b.n	800efbc <WM__UpdateChildPositions+0x7c>
 800efb8:	fa1f f78b 	uxth.w	r7, fp
 800efbc:	eb07 0c02 	add.w	ip, r7, r2
 800efc0:	fa1f fc8c 	uxth.w	ip, ip
 800efc4:	fa0f f989 	sxth.w	r9, r9
 800efc8:	fa0f f888 	sxth.w	r8, r8
 800efcc:	b212      	sxth	r2, r2
 800efce:	442f      	add	r7, r5
 800efd0:	fa0f fc8c 	sxth.w	ip, ip
 800efd4:	ebb9 0108 	subs.w	r1, r9, r8
 800efd8:	9202      	str	r2, [sp, #8]
 800efda:	b2bf      	uxth	r7, r7
 800efdc:	ebc2 020c 	rsb	r2, r2, ip
 800efe0:	d100      	bne.n	800efe4 <WM__UpdateChildPositions+0xa4>
 800efe2:	b142      	cbz	r2, 800eff6 <WM__UpdateChildPositions+0xb6>
 800efe4:	4620      	mov	r0, r4
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	f8cd c000 	str.w	ip, [sp]
 800efec:	f000 f8c8 	bl	800f180 <WM_MoveWindow>
 800eff0:	f8dd c000 	ldr.w	ip, [sp]
 800eff4:	9b01      	ldr	r3, [sp, #4]
 800eff6:	b21b      	sxth	r3, r3
 800eff8:	ebc9 0903 	rsb	r9, r9, r3
 800effc:	b236      	sxth	r6, r6
 800effe:	9b02      	ldr	r3, [sp, #8]
 800f000:	ebc6 0808 	rsb	r8, r6, r8
 800f004:	b23f      	sxth	r7, r7
 800f006:	b22d      	sxth	r5, r5
 800f008:	ebcc 0c07 	rsb	ip, ip, r7
 800f00c:	1b5d      	subs	r5, r3, r5
 800f00e:	eb19 0108 	adds.w	r1, r9, r8
 800f012:	eb0c 0205 	add.w	r2, ip, r5
 800f016:	d100      	bne.n	800f01a <WM__UpdateChildPositions+0xda>
 800f018:	b112      	cbz	r2, 800f020 <WM__UpdateChildPositions+0xe0>
 800f01a:	4620      	mov	r0, r4
 800f01c:	f7fe fe8c 	bl	800dd38 <WM_ResizeWindow>
 800f020:	a806      	add	r0, sp, #24
 800f022:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800f026:	6a1c      	ldr	r4, [r3, #32]
 800f028:	f7fa fff4 	bl	800a014 <GUI_ALLOC_UnlockH>
 800f02c:	e78f      	b.n	800ef4e <WM__UpdateChildPositions+0xe>
 800f02e:	b007      	add	sp, #28
 800f030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f034 <WM__GetPrevSibling>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4605      	mov	r5, r0
 800f038:	f000 f80f 	bl	800f05a <WM__GetFirstSibling>
 800f03c:	4604      	mov	r4, r0
 800f03e:	b154      	cbz	r4, 800f056 <WM__GetPrevSibling+0x22>
 800f040:	42ac      	cmp	r4, r5
 800f042:	d007      	beq.n	800f054 <WM__GetPrevSibling+0x20>
 800f044:	4620      	mov	r0, r4
 800f046:	f7fa ffcd 	bl	8009fe4 <GUI_ALLOC_h2p>
 800f04a:	6a03      	ldr	r3, [r0, #32]
 800f04c:	42ab      	cmp	r3, r5
 800f04e:	d002      	beq.n	800f056 <WM__GetPrevSibling+0x22>
 800f050:	461c      	mov	r4, r3
 800f052:	e7f4      	b.n	800f03e <WM__GetPrevSibling+0xa>
 800f054:	2400      	movs	r4, #0
 800f056:	4620      	mov	r0, r4
 800f058:	bd38      	pop	{r3, r4, r5, pc}

0800f05a <WM__GetFirstSibling>:
 800f05a:	b508      	push	{r3, lr}
 800f05c:	f7fe ff0c 	bl	800de78 <WM_GetParent>
 800f060:	b118      	cbz	r0, 800f06a <WM__GetFirstSibling+0x10>
 800f062:	f7fa ffbf 	bl	8009fe4 <GUI_ALLOC_h2p>
 800f066:	69c0      	ldr	r0, [r0, #28]
 800f068:	bd08      	pop	{r3, pc}
 800f06a:	bd08      	pop	{r3, pc}

0800f06c <_MoveDescendents>:
 800f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f070:	b088      	sub	sp, #32
 800f072:	4606      	mov	r6, r0
 800f074:	460c      	mov	r4, r1
 800f076:	4615      	mov	r5, r2
 800f078:	a804      	add	r0, sp, #16
 800f07a:	2100      	movs	r1, #0
 800f07c:	2210      	movs	r2, #16
 800f07e:	f000 f8ca 	bl	800f216 <memset>
 800f082:	b336      	cbz	r6, 800f0d2 <_MoveDescendents+0x66>
 800f084:	4630      	mov	r0, r6
 800f086:	f7fa ffb7 	bl	8009ff8 <GUI_ALLOC_LockH>
 800f08a:	4621      	mov	r1, r4
 800f08c:	462a      	mov	r2, r5
 800f08e:	9001      	str	r0, [sp, #4]
 800f090:	f7fe fcfa 	bl	800da88 <GUI_MoveRect>
 800f094:	9801      	ldr	r0, [sp, #4]
 800f096:	4621      	mov	r1, r4
 800f098:	3008      	adds	r0, #8
 800f09a:	462a      	mov	r2, r5
 800f09c:	f7fe fcf4 	bl	800da88 <GUI_MoveRect>
 800f0a0:	a808      	add	r0, sp, #32
 800f0a2:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 800f0a6:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800f0aa:	6a17      	ldr	r7, [r2, #32]
 800f0ac:	f7fa ffb2 	bl	800a014 <GUI_ALLOC_UnlockH>
 800f0b0:	4640      	mov	r0, r8
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	462a      	mov	r2, r5
 800f0b6:	f7ff ffd9 	bl	800f06c <_MoveDescendents>
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	9304      	str	r3, [sp, #16]
 800f0be:	4630      	mov	r0, r6
 800f0c0:	ab02      	add	r3, sp, #8
 800f0c2:	a904      	add	r1, sp, #16
 800f0c4:	9307      	str	r3, [sp, #28]
 800f0c6:	9402      	str	r4, [sp, #8]
 800f0c8:	9503      	str	r5, [sp, #12]
 800f0ca:	463e      	mov	r6, r7
 800f0cc:	f7fe fdaa 	bl	800dc24 <WM__SendMessage>
 800f0d0:	e7d7      	b.n	800f082 <_MoveDescendents+0x16>
 800f0d2:	b008      	add	sp, #32
 800f0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f0d8 <WM__MoveWindow>:
 800f0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	b08b      	sub	sp, #44	; 0x2c
 800f0de:	4606      	mov	r6, r0
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	4614      	mov	r4, r2
 800f0e4:	a806      	add	r0, sp, #24
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	2210      	movs	r2, #16
 800f0ea:	f000 f894 	bl	800f216 <memset>
 800f0ee:	2e00      	cmp	r6, #0
 800f0f0:	d043      	beq.n	800f17a <WM__MoveWindow+0xa2>
 800f0f2:	b90d      	cbnz	r5, 800f0f8 <WM__MoveWindow+0x20>
 800f0f4:	2c00      	cmp	r4, #0
 800f0f6:	d040      	beq.n	800f17a <WM__MoveWindow+0xa2>
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f7fa ff7d 	bl	8009ff8 <GUI_ALLOC_LockH>
 800f0fe:	4603      	mov	r3, r0
 800f100:	9001      	str	r0, [sp, #4]
 800f102:	c803      	ldmia	r0, {r0, r1}
 800f104:	f10d 0808 	add.w	r8, sp, #8
 800f108:	e888 0003 	stmia.w	r8, {r0, r1}
 800f10c:	4622      	mov	r2, r4
 800f10e:	4618      	mov	r0, r3
 800f110:	4629      	mov	r1, r5
 800f112:	f7fe fcb9 	bl	800da88 <GUI_MoveRect>
 800f116:	9801      	ldr	r0, [sp, #4]
 800f118:	af0a      	add	r7, sp, #40	; 0x28
 800f11a:	4629      	mov	r1, r5
 800f11c:	4622      	mov	r2, r4
 800f11e:	3008      	adds	r0, #8
 800f120:	f7fe fcb2 	bl	800da88 <GUI_MoveRect>
 800f124:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800f128:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800f12c:	4638      	mov	r0, r7
 800f12e:	f7fa ff71 	bl	800a014 <GUI_ALLOC_UnlockH>
 800f132:	4622      	mov	r2, r4
 800f134:	4648      	mov	r0, r9
 800f136:	4629      	mov	r1, r5
 800f138:	f7ff ff98 	bl	800f06c <_MoveDescendents>
 800f13c:	4630      	mov	r0, r6
 800f13e:	f7fa ff5b 	bl	8009ff8 <GUI_ALLOC_LockH>
 800f142:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f144:	9001      	str	r0, [sp, #4]
 800f146:	0792      	lsls	r2, r2, #30
 800f148:	d50a      	bpl.n	800f160 <WM__MoveWindow+0x88>
 800f14a:	6981      	ldr	r1, [r0, #24]
 800f14c:	b141      	cbz	r1, 800f160 <WM__MoveWindow+0x88>
 800f14e:	6a02      	ldr	r2, [r0, #32]
 800f150:	f7fc fa29 	bl	800b5a6 <WM__InvalidateParent>
 800f154:	9b01      	ldr	r3, [sp, #4]
 800f156:	4640      	mov	r0, r8
 800f158:	6999      	ldr	r1, [r3, #24]
 800f15a:	6a1a      	ldr	r2, [r3, #32]
 800f15c:	f7fc fa23 	bl	800b5a6 <WM__InvalidateParent>
 800f160:	4638      	mov	r0, r7
 800f162:	f7fa ff57 	bl	800a014 <GUI_ALLOC_UnlockH>
 800f166:	2303      	movs	r3, #3
 800f168:	9306      	str	r3, [sp, #24]
 800f16a:	4630      	mov	r0, r6
 800f16c:	ab04      	add	r3, sp, #16
 800f16e:	a906      	add	r1, sp, #24
 800f170:	9309      	str	r3, [sp, #36]	; 0x24
 800f172:	9504      	str	r5, [sp, #16]
 800f174:	9405      	str	r4, [sp, #20]
 800f176:	f7fe fd55 	bl	800dc24 <WM__SendMessage>
 800f17a:	b00b      	add	sp, #44	; 0x2c
 800f17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f180 <WM_MoveWindow>:
 800f180:	f7ff bfaa 	b.w	800f0d8 <WM__MoveWindow>

0800f184 <__libc_init_array>:
 800f184:	b570      	push	{r4, r5, r6, lr}
 800f186:	4e0d      	ldr	r6, [pc, #52]	; (800f1bc <__libc_init_array+0x38>)
 800f188:	4c0d      	ldr	r4, [pc, #52]	; (800f1c0 <__libc_init_array+0x3c>)
 800f18a:	1ba4      	subs	r4, r4, r6
 800f18c:	10a4      	asrs	r4, r4, #2
 800f18e:	2500      	movs	r5, #0
 800f190:	42a5      	cmp	r5, r4
 800f192:	d109      	bne.n	800f1a8 <__libc_init_array+0x24>
 800f194:	4e0b      	ldr	r6, [pc, #44]	; (800f1c4 <__libc_init_array+0x40>)
 800f196:	4c0c      	ldr	r4, [pc, #48]	; (800f1c8 <__libc_init_array+0x44>)
 800f198:	f000 f846 	bl	800f228 <_init>
 800f19c:	1ba4      	subs	r4, r4, r6
 800f19e:	10a4      	asrs	r4, r4, #2
 800f1a0:	2500      	movs	r5, #0
 800f1a2:	42a5      	cmp	r5, r4
 800f1a4:	d105      	bne.n	800f1b2 <__libc_init_array+0x2e>
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}
 800f1a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1ac:	4798      	blx	r3
 800f1ae:	3501      	adds	r5, #1
 800f1b0:	e7ee      	b.n	800f190 <__libc_init_array+0xc>
 800f1b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1b6:	4798      	blx	r3
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	e7f2      	b.n	800f1a2 <__libc_init_array+0x1e>
 800f1bc:	08080818 	.word	0x08080818
 800f1c0:	08080818 	.word	0x08080818
 800f1c4:	08080818 	.word	0x08080818
 800f1c8:	0808081c 	.word	0x0808081c

0800f1cc <memcpy>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	1e43      	subs	r3, r0, #1
 800f1d0:	440a      	add	r2, r1
 800f1d2:	4291      	cmp	r1, r2
 800f1d4:	d100      	bne.n	800f1d8 <memcpy+0xc>
 800f1d6:	bd10      	pop	{r4, pc}
 800f1d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1e0:	e7f7      	b.n	800f1d2 <memcpy+0x6>

0800f1e2 <memmove>:
 800f1e2:	4288      	cmp	r0, r1
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	eb01 0302 	add.w	r3, r1, r2
 800f1ea:	d803      	bhi.n	800f1f4 <memmove+0x12>
 800f1ec:	1e42      	subs	r2, r0, #1
 800f1ee:	4299      	cmp	r1, r3
 800f1f0:	d10c      	bne.n	800f20c <memmove+0x2a>
 800f1f2:	bd10      	pop	{r4, pc}
 800f1f4:	4298      	cmp	r0, r3
 800f1f6:	d2f9      	bcs.n	800f1ec <memmove+0xa>
 800f1f8:	1881      	adds	r1, r0, r2
 800f1fa:	1ad2      	subs	r2, r2, r3
 800f1fc:	42d3      	cmn	r3, r2
 800f1fe:	d100      	bne.n	800f202 <memmove+0x20>
 800f200:	bd10      	pop	{r4, pc}
 800f202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f206:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f20a:	e7f7      	b.n	800f1fc <memmove+0x1a>
 800f20c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f210:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f214:	e7eb      	b.n	800f1ee <memmove+0xc>

0800f216 <memset>:
 800f216:	4402      	add	r2, r0
 800f218:	4603      	mov	r3, r0
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d100      	bne.n	800f220 <memset+0xa>
 800f21e:	4770      	bx	lr
 800f220:	f803 1b01 	strb.w	r1, [r3], #1
 800f224:	e7f9      	b.n	800f21a <memset+0x4>
	...

0800f228 <_init>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	bf00      	nop
 800f22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22e:	bc08      	pop	{r3}
 800f230:	469e      	mov	lr, r3
 800f232:	4770      	bx	lr

0800f234 <_fini>:
 800f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f236:	bf00      	nop
 800f238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23a:	bc08      	pop	{r3}
 800f23c:	469e      	mov	lr, r3
 800f23e:	4770      	bx	lr
