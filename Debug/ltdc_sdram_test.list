
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b29c  0800b29c  0001b29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  0800b2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  8 .bss          0001fddc  2000001c  2000001c  0002001c  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2001fdf8  2001fdf8  0002001c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002d2b1  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003ed4  00000000  00000000  0004d2fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001520  00000000  00000000  000511d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001378  00000000  00000000  000526f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a233  00000000  00000000  00053a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007f75  00000000  00000000  0005dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fe  00000000  00000000  00065c10  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058b0  00000000  00000000  00065d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a940 	.word	0x0800a940

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	0800a940 	.word	0x0800a940

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f947 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f005 f8e2 	bl	80056f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f95f 	bl	8000822 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f927 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	2001f95c 	.word	0x2001f95c

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2001f95c 	.word	0x2001f95c

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <NVIC_EnableIRQ+0x30>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da0b      	bge.n	80006e8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	490d      	ldr	r1, [pc, #52]	; (8000708 <NVIC_SetPriority+0x4c>)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	3b04      	subs	r3, #4
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e6:	e009      	b.n	80006fc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	4908      	ldr	r1, [pc, #32]	; (800070c <NVIC_SetPriority+0x50>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000e100 	.word	0xe000e100

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf28      	it	cs
 800072e:	2304      	movcs	r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3304      	adds	r3, #4
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3b03      	subs	r3, #3
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	2201      	movs	r2, #1
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	401a      	ands	r2, r3
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000756:	2101      	movs	r1, #1
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	1e59      	subs	r1, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000798:	f7ff ff90 	bl	80006bc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff2f 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff44 	bl	800066c <NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff90 	bl	8000710 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5f 	bl	80006bc <NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff37 	bl	8000688 <NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff febe 	bl	80005c8 <HAL_GetTick>
 800084c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d101      	bne.n	8000858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	e099      	b.n	800098c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2202      	movs	r2, #2
 8000864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	f022 0201 	bic.w	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000878:	e00f      	b.n	800089a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800087a:	f7ff fea5 	bl	80005c8 <HAL_GetTick>
 800087e:	4602      	mov	r2, r0
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b05      	cmp	r3, #5
 8000886:	d908      	bls.n	800089a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2220      	movs	r2, #32
 800088c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2203      	movs	r2, #3
 8000892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000896:	2303      	movs	r3, #3
 8000898:	e078      	b.n	800098c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1e8      	bne.n	800087a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	4b38      	ldr	r3, [pc, #224]	; (8000994 <HAL_DMA_Init+0x158>)
 80008b4:	4013      	ands	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a1b      	ldr	r3, [r3, #32]
 80008e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d107      	bne.n	8000904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4313      	orrs	r3, r2
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4313      	orrs	r3, r2
 8000902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f023 0307 	bic.w	r3, r3, #7
 800091a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	4313      	orrs	r3, r2
 8000924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	2b04      	cmp	r3, #4
 800092c:	d117      	bne.n	800095e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	4313      	orrs	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00e      	beq.n	800095e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 f9e9 	bl	8000d18 <DMA_CheckFifoParam>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d008      	beq.n	800095e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2240      	movs	r2, #64	; 0x40
 8000950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800095a:	2301      	movs	r3, #1
 800095c:	e016      	b.n	800098c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f9a0 	bl	8000cac <DMA_CalcBaseAndBitshift>
 800096c:	4603      	mov	r3, r0
 800096e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000974:	223f      	movs	r2, #63	; 0x3f
 8000976:	409a      	lsls	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	f010803f 	.word	0xf010803f

08000998 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009a4:	4b92      	ldr	r3, [pc, #584]	; (8000bf0 <HAL_DMA_IRQHandler+0x258>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a92      	ldr	r2, [pc, #584]	; (8000bf4 <HAL_DMA_IRQHandler+0x25c>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	0a9b      	lsrs	r3, r3, #10
 80009b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c2:	2208      	movs	r2, #8
 80009c4:	409a      	lsls	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4013      	ands	r3, r2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01a      	beq.n	8000a04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d013      	beq.n	8000a04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	f022 0204 	bic.w	r2, r2, #4
 80009ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f0:	2208      	movs	r2, #8
 80009f2:	409a      	lsls	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009fc:	f043 0201 	orr.w	r2, r3, #1
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a08:	2201      	movs	r2, #1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d012      	beq.n	8000a3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00b      	beq.n	8000a3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a26:	2201      	movs	r2, #1
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a32:	f043 0202 	orr.w	r2, r3, #2
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a3e:	2204      	movs	r2, #4
 8000a40:	409a      	lsls	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d012      	beq.n	8000a70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00b      	beq.n	8000a70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	f043 0204 	orr.w	r2, r3, #4
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a74:	2210      	movs	r2, #16
 8000a76:	409a      	lsls	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d043      	beq.n	8000b08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d03c      	beq.n	8000b08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a92:	2210      	movs	r2, #16
 8000a94:	409a      	lsls	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d018      	beq.n	8000ada <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d108      	bne.n	8000ac8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d024      	beq.n	8000b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	4798      	blx	r3
 8000ac6:	e01f      	b.n	8000b08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d01b      	beq.n	8000b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	4798      	blx	r3
 8000ad8:	e016      	b.n	8000b08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d107      	bne.n	8000af8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	f022 0208 	bic.w	r2, r2, #8
 8000af6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 808e 	beq.w	8000c36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 8086 	beq.w	8000c36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2e:	2220      	movs	r2, #32
 8000b30:	409a      	lsls	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	d136      	bne.n	8000bb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	f022 0216 	bic.w	r2, r2, #22
 8000b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	6952      	ldr	r2, [r2, #20]
 8000b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <HAL_DMA_IRQHandler+0x1da>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	f022 0208 	bic.w	r2, r2, #8
 8000b80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b86:	223f      	movs	r2, #63	; 0x3f
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d07d      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	4798      	blx	r3
        }
        return;
 8000bae:	e078      	b.n	8000ca2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01c      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d108      	bne.n	8000bde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d030      	beq.n	8000c36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	4798      	blx	r3
 8000bdc:	e02b      	b.n	8000c36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d027      	beq.n	8000c36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	4798      	blx	r3
 8000bee:	e022      	b.n	8000c36 <HAL_DMA_IRQHandler+0x29e>
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10f      	bne.n	8000c26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	f022 0210 	bic.w	r2, r2, #16
 8000c14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d032      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d022      	beq.n	8000c90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	f022 0201 	bic.w	r2, r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d807      	bhi.n	8000c7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f2      	bne.n	8000c62 <HAL_DMA_IRQHandler+0x2ca>
 8000c7c:	e000      	b.n	8000c80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000c7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	4798      	blx	r3
 8000ca0:	e000      	b.n	8000ca4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000ca2:	bf00      	nop
    }
  }
}
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop

08000cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	3b10      	subs	r3, #16
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <DMA_CalcBaseAndBitshift+0x64>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <DMA_CalcBaseAndBitshift+0x68>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d909      	bls.n	8000cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ce2:	f023 0303 	bic.w	r3, r3, #3
 8000ce6:	1d1a      	adds	r2, r3, #4
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	659a      	str	r2, [r3, #88]	; 0x58
 8000cec:	e007      	b.n	8000cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	aaaaaaab 	.word	0xaaaaaaab
 8000d14:	0800a95c 	.word	0x0800a95c

08000d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d11f      	bne.n	8000d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d855      	bhi.n	8000de4 <DMA_CheckFifoParam+0xcc>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <DMA_CheckFifoParam+0x28>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d51 	.word	0x08000d51
 8000d44:	08000d63 	.word	0x08000d63
 8000d48:	08000d51 	.word	0x08000d51
 8000d4c:	08000de5 	.word	0x08000de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d045      	beq.n	8000de8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d60:	e042      	b.n	8000de8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d6a:	d13f      	bne.n	8000dec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d70:	e03c      	b.n	8000dec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d7a:	d121      	bne.n	8000dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d836      	bhi.n	8000df0 <DMA_CheckFifoParam+0xd8>
 8000d82:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <DMA_CheckFifoParam+0x70>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000d99 	.word	0x08000d99
 8000d8c:	08000d9f 	.word	0x08000d9f
 8000d90:	08000d99 	.word	0x08000d99
 8000d94:	08000db1 	.word	0x08000db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8000d9c:	e02f      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d024      	beq.n	8000df4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dae:	e021      	b.n	8000df4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000db8:	d11e      	bne.n	8000df8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000dbe:	e01b      	b.n	8000df8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d902      	bls.n	8000dcc <DMA_CheckFifoParam+0xb4>
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d003      	beq.n	8000dd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000dca:	e018      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
      break;
 8000dd0:	e015      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00e      	beq.n	8000dfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
      break;
 8000de2:	e00b      	b.n	8000dfc <DMA_CheckFifoParam+0xe4>
      break;
 8000de4:	bf00      	nop
 8000de6:	e00a      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      break;
 8000de8:	bf00      	nop
 8000dea:	e008      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      break;
 8000dec:	bf00      	nop
 8000dee:	e006      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      break;
 8000df0:	bf00      	nop
 8000df2:	e004      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      break;
 8000df4:	bf00      	nop
 8000df6:	e002      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      break;   
 8000df8:	bf00      	nop
 8000dfa:	e000      	b.n	8000dfe <DMA_CheckFifoParam+0xe6>
      break;
 8000dfc:	bf00      	nop
    }
  } 
  
  return status; 
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e03b      	b.n	8000e96 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f004 fc88 	bl	8005748 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6852      	ldr	r2, [r2, #4]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e60:	f022 0107 	bic.w	r1, r2, #7
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6892      	ldr	r2, [r2, #8]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	68c9      	ldr	r1, [r1, #12]
 8000e82:	430b      	orrs	r3, r1
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d026      	beq.n	8000f0e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d021      	beq.n	8000f0e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ede:	f043 0201 	orr.w	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d026      	beq.n	8000f66 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d021      	beq.n	8000f66 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f30:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2220      	movs	r2, #32
 8000f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3e:	f043 0202 	orr.w	r2, r3, #2
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d026      	beq.n	8000fbe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d021      	beq.n	8000fbe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f88:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2208      	movs	r2, #8
 8000f90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	f043 0204 	orr.w	r2, r3, #4
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00e      	beq.n	8000ff0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f853 	bl	8001096 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d024      	beq.n	8001044 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001000:	2b00      	cmp	r3, #0
 8001002:	d01f      	beq.n	8001044 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001012:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2202      	movs	r2, #2
 800101a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01f      	beq.n	800108e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01a      	beq.n	800108e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001066:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2210      	movs	r2, #16
 800106e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f80e 	bl	80010aa <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	3318      	adds	r3, #24
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_DMA2D_ConfigLayer+0x30>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e070      	b.n	80011d2 <HAL_DMA2D_ConfigLayer+0x112>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b0a      	cmp	r3, #10
 8001106:	d003      	beq.n	8001110 <HAL_DMA2D_ConfigLayer+0x50>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b09      	cmp	r3, #9
 800110e:	d10c      	bne.n	800112a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	041b      	lsls	r3, r3, #16
 800111a:	431a      	orrs	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001124:	4313      	orrs	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e00a      	b.n	8001140 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	061b      	lsls	r3, r3, #24
 800113c:	4313      	orrs	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d11e      	bne.n	8001184 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001152:	400b      	ands	r3, r1
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	430b      	orrs	r3, r1
 8001158:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b0a      	cmp	r3, #10
 800116a:	d003      	beq.n	8001174 <HAL_DMA2D_ConfigLayer+0xb4>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d125      	bne.n	80011c0 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	68d2      	ldr	r2, [r2, #12]
 800117c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
 8001182:	e01d      	b.n	80011c0 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69d9      	ldr	r1, [r3, #28]
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001190:	400b      	ands	r3, r1
 8001192:	68f9      	ldr	r1, [r7, #12]
 8001194:	430b      	orrs	r3, r1
 8001196:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b0a      	cmp	r3, #10
 80011a8:	d003      	beq.n	80011b2 <HAL_DMA2D_ConfigLayer+0xf2>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d106      	bne.n	80011c0 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	68d2      	ldr	r2, [r2, #12]
 80011ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80011be:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	00fcfff0 	.word	0x00fcfff0

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e177      	b.n	80014f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8166 	bne.w	80014ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x4a>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b12      	cmp	r3, #18
 800122c:	d123      	bne.n	8001276 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	69b9      	ldr	r1, [r7, #24]
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0203 	and.w	r2, r3, #3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d00b      	beq.n	80012ca <HAL_GPIO_Init+0xe6>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	2b11      	cmp	r3, #17
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80c0 	beq.w	80014ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_GPIO_Init+0x320>)
 8001370:	4b64      	ldr	r3, [pc, #400]	; (8001504 <HAL_GPIO_Init+0x320>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b62      	ldr	r3, [pc, #392]	; (8001504 <HAL_GPIO_Init+0x320>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a60      	ldr	r2, [pc, #384]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_GPIO_Init+0x328>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d037      	beq.n	8001422 <HAL_GPIO_Init+0x23e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d031      	beq.n	800141e <HAL_GPIO_Init+0x23a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x236>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_GPIO_Init+0x334>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x232>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_GPIO_Init+0x338>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x22e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_GPIO_Init+0x33c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x22a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a51      	ldr	r2, [pc, #324]	; (8001524 <HAL_GPIO_Init+0x340>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x226>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a50      	ldr	r2, [pc, #320]	; (8001528 <HAL_GPIO_Init+0x344>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x222>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <HAL_GPIO_Init+0x348>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x21e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_GPIO_Init+0x34c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x21a>
 80013fa:	2309      	movs	r3, #9
 80013fc:	e012      	b.n	8001424 <HAL_GPIO_Init+0x240>
 80013fe:	230a      	movs	r3, #10
 8001400:	e010      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001402:	2308      	movs	r3, #8
 8001404:	e00e      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001406:	2307      	movs	r3, #7
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800140a:	2306      	movs	r3, #6
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4934      	ldr	r1, [pc, #208]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_GPIO_Init+0x350>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001466:	4a33      	ldr	r2, [pc, #204]	; (8001534 <HAL_GPIO_Init+0x350>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_GPIO_Init+0x350>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001490:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_GPIO_Init+0x350>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_GPIO_Init+0x350>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_GPIO_Init+0x350>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_GPIO_Init+0x350>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e4:	4a13      	ldr	r2, [pc, #76]	; (8001534 <HAL_GPIO_Init+0x350>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae84 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	3724      	adds	r7, #36	; 0x24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40023800 	.word	0x40023800
 8001508:	40013800 	.word	0x40013800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020400 	.word	0x40020400
 8001514:	40020800 	.word	0x40020800
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40021000 	.word	0x40021000
 8001520:	40021400 	.word	0x40021400
 8001524:	40021800 	.word	0x40021800
 8001528:	40021c00 	.word	0x40021c00
 800152c:	40022000 	.word	0x40022000
 8001530:	40022400 	.word	0x40022400
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0c8      	b.n	8001718 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f004 f8fc 	bl	8005798 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	; 0x24
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b8:	f001 ffee 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 80015bc:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	4a57      	ldr	r2, [pc, #348]	; (8001720 <HAL_I2C_Init+0x1b4>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4952      	ldr	r1, [pc, #328]	; (8001724 <HAL_I2C_Init+0x1b8>)
 80015dc:	428b      	cmp	r3, r1
 80015de:	d802      	bhi.n	80015e6 <HAL_I2C_Init+0x7a>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	e009      	b.n	80015fa <HAL_I2C_Init+0x8e>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	494d      	ldr	r1, [pc, #308]	; (8001728 <HAL_I2C_Init+0x1bc>)
 80015f2:	fba1 1303 	umull	r1, r3, r1, r3
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	3301      	adds	r3, #1
 80015fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a47      	ldr	r2, [pc, #284]	; (8001724 <HAL_I2C_Init+0x1b8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d812      	bhi.n	8001630 <HAL_I2C_Init+0xc4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161a:	2b03      	cmp	r3, #3
 800161c:	d906      	bls.n	800162c <HAL_I2C_Init+0xc0>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	e045      	b.n	80016b8 <HAL_I2C_Init+0x14c>
 800162c:	2304      	movs	r3, #4
 800162e:	e043      	b.n	80016b8 <HAL_I2C_Init+0x14c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10f      	bne.n	8001658 <HAL_I2C_Init+0xec>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e010      	b.n	800167a <HAL_I2C_Init+0x10e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009a      	lsls	r2, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_Init+0x116>
 800167e:	2301      	movs	r3, #1
 8001680:	e01a      	b.n	80016b8 <HAL_I2C_Init+0x14c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <HAL_I2C_Init+0x134>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	e00b      	b.n	80016b8 <HAL_I2C_Init+0x14c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	009a      	lsls	r2, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	69d1      	ldr	r1, [r2, #28]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6a12      	ldr	r2, [r2, #32]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6911      	ldr	r1, [r2, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68d2      	ldr	r2, [r2, #12]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6951      	ldr	r1, [r2, #20]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6992      	ldr	r2, [r2, #24]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	431bde83 	.word	0x431bde83
 8001724:	000186a0 	.word	0x000186a0
 8001728:	10624dd3 	.word	0x10624dd3

0800172c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	460b      	mov	r3, r1
 800173a:	817b      	strh	r3, [r7, #10]
 800173c:	4613      	mov	r3, r2
 800173e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001744:	f7fe ff40 	bl	80005c8 <HAL_GetTick>
 8001748:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b20      	cmp	r3, #32
 8001754:	f040 80ee 	bne.w	8001934 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2319      	movs	r3, #25
 800175e:	2201      	movs	r2, #1
 8001760:	4977      	ldr	r1, [pc, #476]	; (8001940 <HAL_I2C_Master_Transmit+0x214>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fc6c 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	e0e1      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_I2C_Master_Transmit+0x54>
 800177c:	2302      	movs	r3, #2
 800177e:	e0da      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d007      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2221      	movs	r2, #33	; 0x21
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2210      	movs	r2, #16
 80017c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	893a      	ldrh	r2, [r7, #8]
 80017d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <HAL_I2C_Master_Transmit+0x218>)
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017e8:	8979      	ldrh	r1, [r7, #10]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fadc 	bl	8001dac <I2C_MasterRequestWrite>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00f      	beq.n	800181a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d105      	bne.n	800180e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e093      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e08d      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001830:	e066      	b.n	8001900 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	6a39      	ldr	r1, [r7, #32]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fcc1 	bl	80021be <I2C_WaitOnTXEFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00f      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b04      	cmp	r3, #4
 8001848:	d109      	bne.n	800185e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001858:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06b      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e069      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	1c58      	adds	r0, r3, #1
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	6248      	str	r0, [r1, #36]	; 0x24
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b04      	cmp	r3, #4
 800189a:	d119      	bne.n	80018d0 <HAL_I2C_Master_Transmit+0x1a4>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	1c58      	adds	r0, r3, #1
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	6248      	str	r0, [r1, #36]	; 0x24
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fcaf 	bl	8002238 <I2C_WaitOnBTFFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00f      	beq.n	8001900 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d109      	bne.n	80018fc <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e01c      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e01a      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d194      	bne.n	8001832 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	00100002 	.word	0x00100002
 8001944:	ffff0000 	.word	0xffff0000

08001948 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	460b      	mov	r3, r1
 8001956:	817b      	strh	r3, [r7, #10]
 8001958:	4613      	mov	r3, r2
 800195a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001960:	f7fe fe32 	bl	80005c8 <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	f040 8215 	bne.w	8001d9e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2319      	movs	r3, #25
 800197a:	2201      	movs	r2, #1
 800197c:	4985      	ldr	r1, [pc, #532]	; (8001b94 <HAL_I2C_Master_Receive+0x24c>)
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fb5e 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	e208      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_I2C_Master_Receive+0x54>
 8001998:	2302      	movs	r3, #2
 800199a:	e201      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d007      	beq.n	80019c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2222      	movs	r2, #34	; 0x22
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2210      	movs	r2, #16
 80019de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	893a      	ldrh	r2, [r7, #8]
 80019f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a68      	ldr	r2, [pc, #416]	; (8001b98 <HAL_I2C_Master_Receive+0x250>)
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fa50 	bl	8001eb0 <I2C_MasterRequestRead>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d105      	bne.n	8001a2a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1ba      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1b4      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d113      	bne.n	8001a66 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	623b      	str	r3, [r7, #32]
 8001a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e188      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e168      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d11b      	bne.n	8001ae6 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	e148      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001b0c:	e134      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	f200 80eb 	bhi.w	8001cee <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d127      	bne.n	8001b70 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fbc4 	bl	80022b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d101      	bne.n	8001b3c <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e131      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e12f      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c59      	adds	r1, r3, #1
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	6251      	str	r1, [r2, #36]	; 0x24
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	6912      	ldr	r2, [r2, #16]
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b6e:	e103      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d14a      	bne.n	8001c0e <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4906      	ldr	r1, [pc, #24]	; (8001b9c <HAL_I2C_Master_Receive+0x254>)
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fa5c 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e106      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
 8001b92:	bf00      	nop
 8001b94:	00100002 	.word	0x00100002
 8001b98:	ffff0000 	.word	0xffff0000
 8001b9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	6251      	str	r1, [r2, #36]	; 0x24
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	6912      	ldr	r2, [r2, #16]
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	1c59      	adds	r1, r3, #1
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	6251      	str	r1, [r2, #36]	; 0x24
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	6912      	ldr	r2, [r2, #16]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c0c:	e0b4      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	2200      	movs	r2, #0
 8001c16:	4964      	ldr	r1, [pc, #400]	; (8001da8 <HAL_I2C_Master_Receive+0x460>)
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 fa11 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0bb      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c59      	adds	r1, r3, #1
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	6251      	str	r1, [r2, #36]	; 0x24
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	6912      	ldr	r2, [r2, #16]
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	494e      	ldr	r1, [pc, #312]	; (8001da8 <HAL_I2C_Master_Receive+0x460>)
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f9e5 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e08f      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	1c59      	adds	r1, r3, #1
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	6251      	str	r1, [r2, #36]	; 0x24
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	6912      	ldr	r2, [r2, #16]
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	1c59      	adds	r1, r3, #1
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6251      	str	r1, [r2, #36]	; 0x24
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	6912      	ldr	r2, [r2, #16]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cec:	e044      	b.n	8001d78 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fadd 	bl	80022b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04a      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e048      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	6251      	str	r1, [r2, #36]	; 0x24
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	6912      	ldr	r2, [r2, #16]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d116      	bne.n	8001d78 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6251      	str	r1, [r2, #36]	; 0x24
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	6912      	ldr	r2, [r2, #16]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f aec6 	bne.w	8001b0e <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
  }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	00010004 	.word	0x00010004

08001dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	460b      	mov	r3, r1
 8001dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d006      	beq.n	8001dd6 <I2C_MasterRequestWrite+0x2a>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d003      	beq.n	8001dd6 <I2C_MasterRequestWrite+0x2a>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e00b      	b.n	8001e00 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	2b12      	cmp	r3, #18
 8001dee:	d107      	bne.n	8001e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f917 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e040      	b.n	8001e9e <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e24:	d107      	bne.n	8001e36 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	897a      	ldrh	r2, [r7, #10]
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	e021      	b.n	8001e7a <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	897a      	ldrh	r2, [r7, #10]
 8001e3c:	11d2      	asrs	r2, r2, #7
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 0206 	and.w	r2, r2, #6
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f062 020f 	orn	r2, r2, #15
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4915      	ldr	r1, [pc, #84]	; (8001ea8 <I2C_MasterRequestWrite+0xfc>)
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f944 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d101      	bne.n	8001e6c <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e018      	b.n	8001e9e <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e016      	b.n	8001e9e <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	897a      	ldrh	r2, [r7, #10]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	490b      	ldr	r1, [pc, #44]	; (8001eac <I2C_MasterRequestWrite+0x100>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f92e 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d101      	bne.n	8001e98 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e002      	b.n	8001e9e <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	00010008 	.word	0x00010008
 8001eac:	00010002 	.word	0x00010002

08001eb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d006      	beq.n	8001eea <I2C_MasterRequestRead+0x3a>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d003      	beq.n	8001eea <I2C_MasterRequestRead+0x3a>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ee8:	d108      	bne.n	8001efc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e00b      	b.n	8001f14 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	2b11      	cmp	r3, #17
 8001f02:	d107      	bne.n	8001f14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f88d 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e07f      	b.n	8002030 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f38:	d108      	bne.n	8001f4c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	897a      	ldrh	r2, [r7, #10]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	e05f      	b.n	800200c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	897a      	ldrh	r2, [r7, #10]
 8001f52:	11d2      	asrs	r2, r2, #7
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 0206 	and.w	r2, r2, #6
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f062 020f 	orn	r2, r2, #15
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4933      	ldr	r1, [pc, #204]	; (8002038 <I2C_MasterRequestRead+0x188>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f8b9 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d101      	bne.n	8001f82 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e056      	b.n	8002030 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e054      	b.n	8002030 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	897a      	ldrh	r2, [r7, #10]
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4929      	ldr	r1, [pc, #164]	; (800203c <I2C_MasterRequestRead+0x18c>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8a3 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d101      	bne.n	8001fae <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e040      	b.n	8002030 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e03e      	b.n	8002030 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f82b 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e01d      	b.n	8002030 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	897a      	ldrh	r2, [r7, #10]
 8001ffa:	11d2      	asrs	r2, r2, #7
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 0206 	and.w	r2, r2, #6
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f062 020e 	orn	r2, r2, #14
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	490a      	ldr	r1, [pc, #40]	; (800203c <I2C_MasterRequestRead+0x18c>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f865 	bl	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b04      	cmp	r3, #4
 8002024:	d101      	bne.n	800202a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e002      	b.n	8002030 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e000      	b.n	8002030 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	00010008 	.word	0x00010008
 800203c:	00010002 	.word	0x00010002

08002040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002050:	e01f      	b.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002058:	d01b      	beq.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002060:	f7fe fab2 	bl	80005c8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	1ad2      	subs	r2, r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d910      	bls.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e023      	b.n	80020da <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10d      	bne.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x78>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4013      	ands	r3, r2
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	e00c      	b.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x92>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4013      	ands	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d0bc      	beq.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020f0:	e040      	b.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002100:	d11c      	bne.n	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002110:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800211a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2204      	movs	r2, #4
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e03c      	b.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002142:	d017      	beq.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800214a:	f7fe fa3d 	bl	80005c8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e020      	b.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10c      	bne.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	43da      	mvns	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e00b      	b.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4013      	ands	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d19e      	bne.n	80020f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ca:	e029      	b.n	8002220 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f8ba 	bl	8002346 <I2C_IsAcknowledgeFailed>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e029      	b.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e2:	d01d      	beq.n	8002220 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021ea:	f7fe f9ed 	bl	80005c8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d912      	bls.n	8002220 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e007      	b.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	d1ce      	bne.n	80021cc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002244:	e029      	b.n	800229a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f87d 	bl	8002346 <I2C_IsAcknowledgeFailed>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e029      	b.n	80022aa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800225c:	d01d      	beq.n	800229a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002264:	f7fe f9b0 	bl	80005c8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad2      	subs	r2, r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	d912      	bls.n	800229a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e007      	b.n	80022aa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d1ce      	bne.n	8002246 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022be:	e036      	b.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d114      	bne.n	80022f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f06f 0210 	mvn.w	r2, #16
 80022d6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e022      	b.n	800233e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80022fe:	f7fe f963 	bl	80005c8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1ad2      	subs	r2, r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90f      	bls.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e007      	b.n	800233e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d1c1      	bne.n	80022c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235c:	d114      	bne.n	8002388 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002366:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d129      	bne.n	8002400 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ce:	f022 0210 	bic.w	r2, r2, #16
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b20      	cmp	r3, #32
 8002426:	d12a      	bne.n	800247e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	f023 030f 	bic.w	r3, r3, #15
 800244e:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b29a      	uxth	r2, r3
 8002454:	89fb      	ldrh	r3, [r7, #14]
 8002456:	4313      	orrs	r3, r2
 8002458:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	89fa      	ldrh	r2, [r7, #14]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 800247e:	2302      	movs	r3, #2
  }
}  
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0bf      	b.n	8002626 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f003 fa3a 	bl	8005934 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	6992      	ldr	r2, [r2, #24]
 80024d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80024d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	6991      	ldr	r1, [r2, #24]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6850      	ldr	r0, [r2, #4]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6892      	ldr	r2, [r2, #8]
 80024ea:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024f0:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6912      	ldr	r2, [r2, #16]
 80024f6:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024f8:	430a      	orrs	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_LTDC_Init+0x1a4>)
 8002508:	400b      	ands	r3, r1
 800250a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	6891      	ldr	r1, [r2, #8]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6990      	ldr	r0, [r2, #24]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4302      	orrs	r2, r0
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68d9      	ldr	r1, [r3, #12]
 8002534:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <HAL_LTDC_Init+0x1a4>)
 8002536:	400b      	ands	r3, r1
 8002538:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	68d1      	ldr	r1, [r2, #12]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6a10      	ldr	r0, [r2, #32]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4302      	orrs	r2, r0
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_LTDC_Init+0x1a4>)
 8002564:	400b      	ands	r3, r1
 8002566:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	6911      	ldr	r1, [r2, #16]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4302      	orrs	r2, r0
 8002582:	430a      	orrs	r2, r1
 8002584:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6959      	ldr	r1, [r3, #20]
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_LTDC_Init+0x1a4>)
 8002592:	400b      	ands	r3, r1
 8002594:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	6951      	ldr	r1, [r2, #20]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4302      	orrs	r2, r0
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025d2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025e2:	68b8      	ldr	r0, [r7, #8]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4302      	orrs	r2, r0
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80025ee:	4302      	orrs	r2, r0
 80025f0:	430a      	orrs	r2, r1
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025fe:	f042 0206 	orr.w	r2, r2, #6
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	6992      	ldr	r2, [r2, #24]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	f000f800 	.word	0xf000f800

08002634 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d023      	beq.n	800269e <HAL_LTDC_IRQHandler+0x6a>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01e      	beq.n	800269e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2204      	movs	r2, #4
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f86f 	bl	800277c <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_LTDC_IRQHandler+0xbc>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01e      	beq.n	80026f0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026bc:	f022 0202 	bic.w	r2, r2, #2
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2202      	movs	r2, #2
 80026c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026d0:	f043 0202 	orr.w	r2, r3, #2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2204      	movs	r2, #4
 80026de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f846 	bl	800277c <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01b      	beq.n	8002732 <HAL_LTDC_IRQHandler+0xfe>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f002 fa15 	bl	8004b5c <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_LTDC_IRQHandler+0x140>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002750:	f022 0208 	bic.w	r2, r2, #8
 8002754:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2208      	movs	r2, #8
 800275c:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f80e 	bl	8002790 <HAL_LTDC_ReloadEventCallback>
  }
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80027a4:	b5b0      	push	{r4, r5, r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_LTDC_ConfigLayer+0x1a>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e02c      	b.n	8002818 <HAL_LTDC_ConfigLayer+0x74>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2134      	movs	r1, #52	; 0x34
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f8ef 	bl	80029dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bdb0      	pop	{r4, r5, r7, pc}

08002820 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_LTDC_EnableDither+0x16>
 8002832:	2302      	movs	r3, #2
 8002834:	e016      	b.n	8002864 <HAL_LTDC_EnableDither+0x44>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_LTDC_EnableDither+0x50>)
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_LTDC_EnableDither+0x50>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40016800 	.word	0x40016800

08002874 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_LTDC_SetWindowPosition+0x1c>
 800288c:	2302      	movs	r3, #2
 800288e:	e033      	b.n	80028f8 <HAL_LTDC_SetWindowPosition+0x84>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2234      	movs	r2, #52	; 0x34
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	3338      	adds	r3, #56	; 0x38
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	441a      	add	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	441a      	add	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	6979      	ldr	r1, [r7, #20]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f87f 	bl	80029dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_LTDC_SetAddress+0x1a>
 8002916:	2302      	movs	r3, #2
 8002918:	e024      	b.n	8002964 <HAL_LTDC_SetAddress+0x64>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2234      	movs	r2, #52	; 0x34
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	3338      	adds	r3, #56	; 0x38
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6979      	ldr	r1, [r7, #20]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f849 	bl	80029dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_LTDC_ProgramLineEvent+0x18>
 8002980:	2302      	movs	r3, #2
 8002982:	e023      	b.n	80029cc <HAL_LTDC_ProgramLineEvent+0x60>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40016800 	.word	0x40016800

080029dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	4413      	add	r3, r2
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	01db      	lsls	r3, r3, #7
 8002a14:	4413      	add	r3, r2
 8002a16:	3384      	adds	r3, #132	; 0x84
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	01db      	lsls	r3, r3, #7
 8002a24:	440b      	add	r3, r1
 8002a26:	3384      	adds	r3, #132	; 0x84
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a2e:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	01db      	lsls	r3, r3, #7
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3384      	adds	r3, #132	; 0x84
 8002a3e:	4619      	mov	r1, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	4413      	add	r3, r2
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a68:	4413      	add	r3, r2
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	01db      	lsls	r3, r3, #7
 8002a78:	4413      	add	r3, r2
 8002a7a:	3384      	adds	r3, #132	; 0x84
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	01db      	lsls	r3, r3, #7
 8002a88:	440b      	add	r3, r1
 8002a8a:	3384      	adds	r3, #132	; 0x84
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	01db      	lsls	r3, r3, #7
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3384      	adds	r3, #132	; 0x84
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab2:	4413      	add	r3, r2
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	01db      	lsls	r3, r3, #7
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3384      	adds	r3, #132	; 0x84
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	01db      	lsls	r3, r3, #7
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3384      	adds	r3, #132	; 0x84
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f023 0307 	bic.w	r3, r3, #7
 8002ae0:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	4413      	add	r3, r2
 8002aee:	3384      	adds	r3, #132	; 0x84
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	01db      	lsls	r3, r3, #7
 8002b1e:	4413      	add	r3, r2
 8002b20:	3384      	adds	r3, #132	; 0x84
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	01db      	lsls	r3, r3, #7
 8002b2e:	4413      	add	r3, r2
 8002b30:	3384      	adds	r3, #132	; 0x84
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	01db      	lsls	r3, r3, #7
 8002b42:	4413      	add	r3, r2
 8002b44:	3384      	adds	r3, #132	; 0x84
 8002b46:	4619      	mov	r1, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4e:	461a      	mov	r2, r3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	01db      	lsls	r3, r3, #7
 8002b68:	4413      	add	r3, r2
 8002b6a:	3384      	adds	r3, #132	; 0x84
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	01db      	lsls	r3, r3, #7
 8002b78:	440b      	add	r3, r1
 8002b7a:	3384      	adds	r3, #132	; 0x84
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b82:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	01db      	lsls	r3, r3, #7
 8002b8e:	4413      	add	r3, r2
 8002b90:	3384      	adds	r3, #132	; 0x84
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	01db      	lsls	r3, r3, #7
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3384      	adds	r3, #132	; 0x84
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	01db      	lsls	r3, r3, #7
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3384      	adds	r3, #132	; 0x84
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bbe:	f023 0307 	bic.w	r3, r3, #7
 8002bc2:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	01db      	lsls	r3, r3, #7
 8002bce:	4413      	add	r3, r2
 8002bd0:	3384      	adds	r3, #132	; 0x84
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	01db      	lsls	r3, r3, #7
 8002bea:	4413      	add	r3, r2
 8002bec:	3384      	adds	r3, #132	; 0x84
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	01db      	lsls	r3, r3, #7
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3384      	adds	r3, #132	; 0x84
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	01db      	lsls	r3, r3, #7
 8002c0e:	4413      	add	r3, r2
 8002c10:	3384      	adds	r3, #132	; 0x84
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 8002c22:	2304      	movs	r3, #4
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e01b      	b.n	8002c60 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d102      	bne.n	8002c36 <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 8002c30:	2303      	movs	r3, #3
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e014      	b.n	8002c60 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00b      	beq.n	8002c56 <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d007      	beq.n	8002c56 <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d003      	beq.n	8002c56 <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c52:	2b07      	cmp	r3, #7
 8002c54:	d102      	bne.n	8002c5c <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 8002c56:	2302      	movs	r3, #2
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e001      	b.n	8002c60 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	01db      	lsls	r3, r3, #7
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3384      	adds	r3, #132	; 0x84
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3384      	adds	r3, #132	; 0x84
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002c84:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	01db      	lsls	r3, r3, #7
 8002c90:	4413      	add	r3, r2
 8002c92:	3384      	adds	r3, #132	; 0x84
 8002c94:	4618      	mov	r0, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1acb      	subs	r3, r1, r3
 8002cac:	69f9      	ldr	r1, [r7, #28]
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	3303      	adds	r3, #3
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	01db      	lsls	r3, r3, #7
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3384      	adds	r3, #132	; 0x84
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	01db      	lsls	r3, r3, #7
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3384      	adds	r3, #132	; 0x84
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cdc:	f023 0307 	bic.w	r3, r3, #7
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	01db      	lsls	r3, r3, #7
 8002cec:	4413      	add	r3, r2
 8002cee:	3384      	adds	r3, #132	; 0x84
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	01db      	lsls	r3, r3, #7
 8002d02:	4413      	add	r3, r2
 8002d04:	3384      	adds	r3, #132	; 0x84
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	01db      	lsls	r3, r3, #7
 8002d12:	440b      	add	r3, r1
 8002d14:	3384      	adds	r3, #132	; 0x84
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d58:	f7fd fc36 	bl	80005c8 <HAL_GetTick>
 8002d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d5e:	e009      	b.n	8002d74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d60:	f7fd fc32 	bl	80005c8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d6e:	d901      	bls.n	8002d74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e01f      	b.n	8002db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d1ee      	bne.n	8002d60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d88:	f7fd fc1e 	bl	80005c8 <HAL_GetTick>
 8002d8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d8e:	e009      	b.n	8002da4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d90:	f7fd fc1a 	bl	80005c8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9e:	d901      	bls.n	8002da4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e007      	b.n	8002db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db0:	d1ee      	bne.n	8002d90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	420e0040 	.word	0x420e0040
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	420e0044 	.word	0x420e0044

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e22d      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d112      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b9d      	ldr	r3, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b99      	ldr	r3, [pc, #612]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e208      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4a91      	ldr	r2, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	4b90      	ldr	r3, [pc, #576]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4a8b      	ldr	r2, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	4b8a      	ldr	r3, [pc, #552]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4a88      	ldr	r2, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	4b87      	ldr	r3, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e64:	4a84      	ldr	r2, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	4b84      	ldr	r3, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4a81      	ldr	r2, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	4b81      	ldr	r3, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fd fba0 	bl	80005c8 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fd fb9c 	bl	80005c8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1cd      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fd fb8c 	bl	80005c8 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fd fb88 	bl	80005c8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1b9      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	4b6c      	ldr	r3, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eee:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e18d      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4956      	ldr	r1, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	4b55      	ldr	r3, [pc, #340]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e03a      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fd fb41 	bl	80005c8 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fd fb3d 	bl	80005c8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e16e      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4943      	ldr	r1, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fd fb20 	bl	80005c8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7fd fb1c 	bl	80005c8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e14d      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d030      	beq.n	8003018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fb00 	bl	80005c8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fd fafc 	bl	80005c8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e12d      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
 8002fea:	e015      	b.n	8003018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fae9 	bl	80005c8 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fd fae5 	bl	80005c8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e116      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a0 	beq.w	8003166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fd faab 	bl	80005c8 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e011      	b.n	800309a <HAL_RCC_OscConfig+0x2ce>
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	42470000 	.word	0x42470000
 8003080:	42470e80 	.word	0x42470e80
 8003084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fd fa9e 	bl	80005c8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0cf      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_OscConfig+0x478>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x2f0>
 80030ae:	4a66      	ldr	r2, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x312>
 80030c4:	4a60      	ldr	r2, [pc, #384]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	4a5d      	ldr	r2, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030de:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	4a57      	ldr	r2, [pc, #348]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fd fa63 	bl	80005c8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fd fa5f 	bl	80005c8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e08e      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x33a>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fd fa4d 	bl	80005c8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fd fa49 	bl	80005c8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e078      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d064      	beq.n	8003238 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d05c      	beq.n	8003234 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d141      	bne.n	8003206 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCC_OscConfig+0x480>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fa1e 	bl	80005c8 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fd fa1a 	bl	80005c8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04b      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ae:	4926      	ldr	r1, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	019b      	lsls	r3, r3, #6
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_RCC_OscConfig+0x480>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fd f9f3 	bl	80005c8 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd f9ef 	bl	80005c8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e020      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x41a>
 8003204:	e018      	b.n	8003238 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_RCC_OscConfig+0x480>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd f9dc 	bl	80005c8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd f9d8 	bl	80005c8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e009      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x47c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x448>
 8003232:	e001      	b.n	8003238 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40007000 	.word	0x40007000
 8003248:	40023800 	.word	0x40023800
 800324c:	42470060 	.word	0x42470060

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0ca      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_ClockConfig+0x1b4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d20c      	bcs.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_ClockConfig+0x1b4>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b62      	ldr	r3, [pc, #392]	; (8003404 <HAL_RCC_ClockConfig+0x1b4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 020f 	and.w	r2, r3, #15
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b6      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	4b58      	ldr	r3, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	4b52      	ldr	r3, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	494f      	ldr	r1, [pc, #316]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032ca:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07d      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06d      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e065      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 0203 	bic.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fd f942 	bl	80005c8 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fd f93e 	bl	80005c8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04d      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x1b4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d90c      	bls.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_ClockConfig+0x1b4>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <HAL_RCC_ClockConfig+0x1b4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e030      	b.n	80033fa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4918      	ldr	r1, [pc, #96]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4911      	ldr	r1, [pc, #68]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f81d 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033da:	4601      	mov	r1, r0
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	fa21 f303 	lsr.w	r3, r1, r3
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd f8a4 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	0800a964 	.word	0x0800a964
 8003410:	20000008 	.word	0x20000008

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800341c:	2200      	movs	r2, #0
 800341e:	60fa      	str	r2, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	617a      	str	r2, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003428:	2200      	movs	r2, #0
 800342a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800342c:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_RCC_GetSysClockFreq+0x160>)
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	f002 020c 	and.w	r2, r2, #12
 8003434:	2a04      	cmp	r2, #4
 8003436:	d007      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	2a08      	cmp	r2, #8
 800343a:	d008      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x3a>
 800343c:	2a00      	cmp	r2, #0
 800343e:	f040 8090 	bne.w	8003562 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <HAL_RCC_GetSysClockFreq+0x164>)
 8003444:	613b      	str	r3, [r7, #16]
       break;
 8003446:	e08f      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCC_GetSysClockFreq+0x168>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	e08c      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800344e:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_RCC_GetSysClockFreq+0x160>)
 8003450:	6852      	ldr	r2, [r2, #4]
 8003452:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003456:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003458:	4a46      	ldr	r2, [pc, #280]	; (8003574 <HAL_RCC_GetSysClockFreq+0x160>)
 800345a:	6852      	ldr	r2, [r2, #4]
 800345c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003460:	2a00      	cmp	r2, #0
 8003462:	d023      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003464:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCC_GetSysClockFreq+0x160>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	ea03 0301 	and.w	r3, r3, r1
 800347a:	ea04 0402 	and.w	r4, r4, r2
 800347e:	4a3f      	ldr	r2, [pc, #252]	; (800357c <HAL_RCC_GetSysClockFreq+0x168>)
 8003480:	fb02 f104 	mul.w	r1, r2, r4
 8003484:	2200      	movs	r2, #0
 8003486:	fb02 f203 	mul.w	r2, r2, r3
 800348a:	440a      	add	r2, r1
 800348c:	493b      	ldr	r1, [pc, #236]	; (800357c <HAL_RCC_GetSysClockFreq+0x168>)
 800348e:	fba3 0101 	umull	r0, r1, r3, r1
 8003492:	1853      	adds	r3, r2, r1
 8003494:	4619      	mov	r1, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	461a      	mov	r2, r3
 800349e:	4623      	mov	r3, r4
 80034a0:	f7fc fea4 	bl	80001ec <__aeabi_uldivmod>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e04c      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	0992      	lsrs	r2, r2, #6
 80034b2:	4611      	mov	r1, r2
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f240 15ff 	movw	r5, #511	; 0x1ff
 80034bc:	f04f 0600 	mov.w	r6, #0
 80034c0:	ea05 0501 	and.w	r5, r5, r1
 80034c4:	ea06 0602 	and.w	r6, r6, r2
 80034c8:	4629      	mov	r1, r5
 80034ca:	4632      	mov	r2, r6
 80034cc:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80034d0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80034d4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80034d8:	4651      	mov	r1, sl
 80034da:	465a      	mov	r2, fp
 80034dc:	46aa      	mov	sl, r5
 80034de:	46b3      	mov	fp, r6
 80034e0:	4655      	mov	r5, sl
 80034e2:	465e      	mov	r6, fp
 80034e4:	1b4d      	subs	r5, r1, r5
 80034e6:	eb62 0606 	sbc.w	r6, r2, r6
 80034ea:	4629      	mov	r1, r5
 80034ec:	4632      	mov	r2, r6
 80034ee:	0194      	lsls	r4, r2, #6
 80034f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034f4:	018b      	lsls	r3, r1, #6
 80034f6:	1a5b      	subs	r3, r3, r1
 80034f8:	eb64 0402 	sbc.w	r4, r4, r2
 80034fc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003500:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003504:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003508:	4643      	mov	r3, r8
 800350a:	464c      	mov	r4, r9
 800350c:	4655      	mov	r5, sl
 800350e:	465e      	mov	r6, fp
 8003510:	18ed      	adds	r5, r5, r3
 8003512:	eb46 0604 	adc.w	r6, r6, r4
 8003516:	462b      	mov	r3, r5
 8003518:	4634      	mov	r4, r6
 800351a:	02a2      	lsls	r2, r4, #10
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	029b      	lsls	r3, r3, #10
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800352e:	4618      	mov	r0, r3
 8003530:	4621      	mov	r1, r4
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f04f 0400 	mov.w	r4, #0
 8003538:	461a      	mov	r2, r3
 800353a:	4623      	mov	r3, r4
 800353c:	f7fc fe56 	bl	80001ec <__aeabi_uldivmod>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_GetSysClockFreq+0x160>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	3301      	adds	r3, #1
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	613b      	str	r3, [r7, #16]
      break;
 8003560:	e002      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x164>)
 8003564:	613b      	str	r3, [r7, #16]
      break;
 8003566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003568:	693b      	ldr	r3, [r7, #16]
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	017d7840 	.word	0x017d7840

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_RCC_GetHCLKFreq+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000008 	.word	0x20000008

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800359c:	f7ff fff0 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035a0:	4601      	mov	r1, r0
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0a9b      	lsrs	r3, r3, #10
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4a03      	ldr	r2, [pc, #12]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	0800a974 	.word	0x0800a974

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d061      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e8:	4ba3      	ldr	r3, [pc, #652]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035ee:	f7fc ffeb 	bl	80005c8 <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035f6:	f7fc ffe7 	bl	80005c8 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e177      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003608:	4b9c      	ldr	r3, [pc, #624]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003620:	4996      	ldr	r1, [pc, #600]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	019a      	lsls	r2, r3, #6
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003640:	4b8e      	ldr	r3, [pc, #568]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003646:	0f1b      	lsrs	r3, r3, #28
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800364e:	498b      	ldr	r1, [pc, #556]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	019a      	lsls	r2, r3, #6
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	431a      	orrs	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003668:	4984      	ldr	r1, [pc, #528]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800366a:	4b84      	ldr	r3, [pc, #528]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	f023 021f 	bic.w	r2, r3, #31
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	3b01      	subs	r3, #1
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003680:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003686:	f7fc ff9f 	bl	80005c8 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800368e:	f7fc ff9b 	bl	80005c8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e12b      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036a0:	4b76      	ldr	r3, [pc, #472]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d079      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036c4:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ca:	f7fc ff7d 	bl	80005c8 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80036d2:	f7fc ff79 	bl	80005c8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e109      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036e4:	4b65      	ldr	r3, [pc, #404]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f0:	d0ef      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d020      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036fe:	4b5f      	ldr	r3, [pc, #380]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	0f1b      	lsrs	r3, r3, #28
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800370c:	495b      	ldr	r1, [pc, #364]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	019a      	lsls	r2, r3, #6
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	431a      	orrs	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	071b      	lsls	r3, r3, #28
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003726:	4955      	ldr	r1, [pc, #340]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003728:	4b54      	ldr	r3, [pc, #336]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800372a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	3b01      	subs	r3, #1
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800374c:	4b4b      	ldr	r3, [pc, #300]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	0e1b      	lsrs	r3, r3, #24
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800375a:	4948      	ldr	r1, [pc, #288]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	019a      	lsls	r2, r3, #6
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003774:	4941      	ldr	r1, [pc, #260]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003790:	f7fc ff1a 	bl	80005c8 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003798:	f7fc ff16 	bl	80005c8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0a6      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037aa:	4b34      	ldr	r3, [pc, #208]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b6:	d1ef      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808d 	beq.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4a2c      	ldr	r2, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b29      	ldr	r3, [pc, #164]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037e2:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ee:	f7fc feeb 	bl	80005c8 <HAL_GetTick>
 80037f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fc fee7 	bl	80005c8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e077      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d039      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	d032      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800385a:	f7fc feb5 	bl	80005c8 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e014      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fc feb1 	bl	80005c8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d90b      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e03f      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003878:	42470068 	.word	0x42470068
 800387c:	40023800 	.word	0x40023800
 8003880:	42470070 	.word	0x42470070
 8003884:	40007000 	.word	0x40007000
 8003888:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0e4      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x302>
 80038a6:	4916      	ldr	r1, [pc, #88]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
 80038c0:	e005      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038cc:	6093      	str	r3, [r2, #8]
 80038ce:	490c      	ldr	r1, [pc, #48]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	4313      	orrs	r3, r2
 80038de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ec:	4a05      	ldr	r2, [pc, #20]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038f4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	424711e0 	.word	0x424711e0

08003908 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e025      	b.n	8003968 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f002 fa11 	bl	8005d58 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f000 fcea 	bl	8004322 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	f000 fd55 	bl	8004408 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d101      	bne.n	800398c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	e018      	b.n	80039be <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fdb2 	bl	8004506 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d104      	bne.n	80039b4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2205      	movs	r2, #5
 80039ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80039b2:	e003      	b.n	80039bc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d101      	bne.n	80039e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
 80039de:	e00e      	b.n	80039fe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fdc5 	bl	800457e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e055      	b.n	8003ac4 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f002 f894 	bl	8005b60 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6851      	ldr	r1, [r2, #4]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6912      	ldr	r2, [r2, #16]
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6952      	ldr	r2, [r2, #20]
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6992      	ldr	r2, [r2, #24]
 8003a74:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	69d2      	ldr	r2, [r2, #28]
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6a12      	ldr	r2, [r2, #32]
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6992      	ldr	r2, [r2, #24]
 8003a96:	0c12      	lsrs	r2, r2, #16
 8003a98:	f002 0104 	and.w	r1, r2, #4
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	69d2      	ldr	r2, [r2, #28]
 8003aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab2:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_SPI_Transmit+0x26>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e123      	b.n	8003d3a <HAL_SPI_Transmit+0x26e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003afa:	f7fc fd65 	bl	80005c8 <HAL_GetTick>
 8003afe:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b10:	e10a      	b.n	8003d28 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Transmit+0x52>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b22:	e101      	b.n	8003d28 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2203      	movs	r2, #3
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6a:	d107      	bne.n	8003b7c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d007      	beq.n	8003b9a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d147      	bne.n	8003c34 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_SPI_Transmit+0xea>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d138      	bne.n	8003c28 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bd4:	e028      	b.n	8003c28 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d10f      	bne.n	8003c04 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	8812      	ldrh	r2, [r2, #0]
 8003bec:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c02:	e011      	b.n	8003c28 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_SPI_Transmit+0x156>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d00a      	beq.n	8003c28 <HAL_SPI_Transmit+0x15c>
 8003c12:	f7fc fcd9 	bl	80005c8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c26:	e07f      	b.n	8003d28 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1d1      	bne.n	8003bd6 <HAL_SPI_Transmit+0x10a>
 8003c32:	e048      	b.n	8003cc6 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_SPI_Transmit+0x17a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d13a      	bne.n	8003cbc <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c66:	e029      	b.n	8003cbc <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d110      	bne.n	8003c98 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	7812      	ldrb	r2, [r2, #0]
 8003c80:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c96:	e011      	b.n	8003cbc <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_SPI_Transmit+0x1ea>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca4:	d00a      	beq.n	8003cbc <HAL_SPI_Transmit+0x1f0>
 8003ca6:	f7fc fc8f 	bl	80005c8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cba:	e035      	b.n	8003d28 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d0      	bne.n	8003c68 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2102      	movs	r1, #2
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f836 	bl	8003d42 <SPI_WaitFlagStateUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce0:	e022      	b.n	8003d28 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	6839      	ldr	r1, [r7, #0]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f894 	bl	8003e14 <SPI_CheckFlag_BSY>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cfc:	e014      	b.n	8003d28 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003d50:	e04d      	b.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d049      	beq.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003d60:	f7fc fc32 	bl	80005c8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d33e      	bcc.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	6852      	ldr	r2, [r2, #4]
 8003d7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d7e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d88:	d111      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d004      	beq.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x5c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d107      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d110      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e00e      	b.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	401a      	ands	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d101      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003dfe:	2201      	movs	r2, #1
 8003e00:	e000      	b.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003e02:	2200      	movs	r2, #0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d1a3      	bne.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff ff89 	bl	8003d42 <SPI_WaitFlagStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e000      	b.n	8003e48 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e01d      	b.n	8003e9e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f001 feba 	bl	8005bf0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 f944 	bl	800411c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d122      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d11b      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f06f 0202 	mvn.w	r2, #2
 8003ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8f8 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003eee:	e005      	b.n	8003efc <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8ea 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8fb 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d122      	bne.n	8003f56 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d11b      	bne.n	8003f56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0204 	mvn.w	r2, #4
 8003f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f8ce 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003f42:	e005      	b.n	8003f50 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8c0 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8d1 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d122      	bne.n	8003faa <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d11b      	bne.n	8003faa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0208 	mvn.w	r2, #8
 8003f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8a4 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003f96:	e005      	b.n	8003fa4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f896 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8a7 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d122      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d11b      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0210 	mvn.w	r2, #16
 8003fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f87a 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003fea:	e005      	b.n	8003ff8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f86c 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f87d 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10e      	bne.n	800402a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0201 	mvn.w	r2, #1
 8004022:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f846 	bl	80040b6 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d10e      	bne.n	8004056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d107      	bne.n	8004056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800404e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f95c 	bl	800430e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b40      	cmp	r3, #64	; 0x40
 8004062:	d10e      	bne.n	8004082 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d107      	bne.n	8004082 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800407a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f842 	bl	8004106 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b20      	cmp	r3, #32
 800408e:	d10e      	bne.n	80040ae <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b20      	cmp	r3, #32
 800409c:	d107      	bne.n	80040ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0220 	mvn.w	r2, #32
 80040a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f926 	bl	80042fa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a44      	ldr	r2, [pc, #272]	; (8004244 <TIM_Base_SetConfig+0x128>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <TIM_Base_SetConfig+0x44>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d00f      	beq.n	8004160 <TIM_Base_SetConfig+0x44>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a41      	ldr	r2, [pc, #260]	; (8004248 <TIM_Base_SetConfig+0x12c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_Base_SetConfig+0x44>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a40      	ldr	r2, [pc, #256]	; (800424c <TIM_Base_SetConfig+0x130>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_Base_SetConfig+0x44>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3f      	ldr	r2, [pc, #252]	; (8004250 <TIM_Base_SetConfig+0x134>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_Base_SetConfig+0x44>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3e      	ldr	r2, [pc, #248]	; (8004254 <TIM_Base_SetConfig+0x138>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <TIM_Base_SetConfig+0x48>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <TIM_Base_SetConfig+0x4a>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a31      	ldr	r2, [pc, #196]	; (8004244 <TIM_Base_SetConfig+0x128>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d02b      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d027      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <TIM_Base_SetConfig+0x12c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d023      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <TIM_Base_SetConfig+0x130>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d01f      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <TIM_Base_SetConfig+0x134>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01b      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <TIM_Base_SetConfig+0x138>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d017      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <TIM_Base_SetConfig+0x13c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <TIM_Base_SetConfig+0x140>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00f      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a28      	ldr	r2, [pc, #160]	; (8004260 <TIM_Base_SetConfig+0x144>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a27      	ldr	r2, [pc, #156]	; (8004264 <TIM_Base_SetConfig+0x148>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_Base_SetConfig+0x14c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0xc0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <TIM_Base_SetConfig+0x150>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <TIM_Base_SetConfig+0xc4>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <TIM_Base_SetConfig+0xc6>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <TIM_Base_SetConfig+0x128>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x102>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <TIM_Base_SetConfig+0x138>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <TIM_Base_SetConfig+0x106>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <TIM_Base_SetConfig+0x108>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40010400 	.word	0x40010400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800
 8004264:	40001800 	.word	0x40001800
 8004268:	40001c00 	.word	0x40001c00
 800426c:	40002000 	.word	0x40002000

08004270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004284:	2302      	movs	r3, #2
 8004286:	e032      	b.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	6852      	ldr	r2, [r2, #4]
 80042a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042a6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	6851      	ldr	r1, [r2, #4]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c8:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	6891      	ldr	r1, [r2, #8]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	6852      	ldr	r2, [r2, #4]
 80042d8:	430a      	orrs	r2, r1
 80042da:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
} 
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d029      	beq.n	8004390 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004348:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800434c:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004356:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800435c:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8004362:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004368:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800436e:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8004374:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800437a:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004380:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e034      	b.n	80043fa <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800439c:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80043a6:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80043ac:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043c4:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80043ce:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80043d4:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80043da:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80043e0:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80043e6:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d02e      	beq.n	8004480 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800442e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800443e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	3b01      	subs	r3, #1
 8004446:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004448:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004452:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800445c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	3b01      	subs	r3, #1
 8004464:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004466:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	3b01      	subs	r3, #1
 800446e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004470:	4313      	orrs	r3, r2
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	e03b      	b.n	80044f8 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800448c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004490:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	3b01      	subs	r3, #1
 8004498:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	3b01      	subs	r3, #1
 80044a0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80044a2:	4313      	orrs	r3, r2
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044b6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80044c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80044d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80044da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80044e4:	4313      	orrs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004522:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	3b01      	subs	r3, #1
 800452a:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800452c:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800453e:	f7fc f843 	bl	80005c8 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004544:	e010      	b.n	8004568 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800454c:	d00c      	beq.n	8004568 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <FMC_SDRAM_SendCommand+0x5e>
 8004554:	f7fc f838 	bl	80005c8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	1ad2      	subs	r2, r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d901      	bls.n	8004568 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e006      	b.n	8004576 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e8      	bne.n	8004546 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 80045a8:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 80045ac:	4803      	ldr	r0, [pc, #12]	; (80045bc <GUI_X_Config+0x18>)
 80045ae:	f003 fb6b 	bl	8007c88 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 80045b2:	4803      	ldr	r0, [pc, #12]	; (80045c0 <GUI_X_Config+0x1c>)
 80045b4:	f003 f8aa 	bl	800770c <GUI_SetDefaultFont>
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000038 	.word	0x20000038
 80045c0:	0800a990 	.word	0x0800a990

080045c4 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <LTDC_init>:
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
static void DMA2D_FillBuffer(void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex);
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine);

void LTDC_init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <LTDC_init+0xa4>)
 80045da:	4a28      	ldr	r2, [pc, #160]	; (800467c <LTDC_init+0xa8>)
 80045dc:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <LTDC_init+0xa4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <LTDC_init+0xa4>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <LTDC_init+0xa4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80045f0:	4b21      	ldr	r3, [pc, #132]	; (8004678 <LTDC_init+0xa4>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 8;
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <LTDC_init+0xa4>)
 80045f8:	2208      	movs	r2, #8
 80045fa:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 0;
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <LTDC_init+0xa4>)
 80045fe:	2200      	movs	r2, #0
 8004600:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <LTDC_init+0xa4>)
 8004604:	221d      	movs	r2, #29
 8004606:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <LTDC_init+0xa4>)
 800460a:	2203      	movs	r2, #3
 800460c:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <LTDC_init+0xa4>)
 8004610:	f240 120d 	movw	r2, #269	; 0x10d
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8004616:	4b18      	ldr	r3, [pc, #96]	; (8004678 <LTDC_init+0xa4>)
 8004618:	f240 1243 	movw	r2, #323	; 0x143
 800461c:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 279;
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <LTDC_init+0xa4>)
 8004620:	f240 1217 	movw	r2, #279	; 0x117
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c
    hltdc.Init.TotalHeigh = 327;
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <LTDC_init+0xa4>)
 8004628:	f240 1247 	movw	r2, #327	; 0x147
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
    hltdc.Init.Backcolor.Blue = 0;
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <LTDC_init+0xa4>)
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hltdc.Init.Backcolor.Green = 0;
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <LTDC_init+0xa4>)
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hltdc.Init.Backcolor.Red = 0;
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <LTDC_init+0xa4>)
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    HAL_LTDC_Init(&hltdc);
 8004646:	480c      	ldr	r0, [pc, #48]	; (8004678 <LTDC_init+0xa4>)
 8004648:	f7fd ff20 	bl	800248c <HAL_LTDC_Init>
    HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 800464c:	2100      	movs	r1, #0
 800464e:	480a      	ldr	r0, [pc, #40]	; (8004678 <LTDC_init+0xa4>)
 8004650:	f7fe f98c 	bl	800296c <HAL_LTDC_ProgramLineEvent>
    HAL_LTDC_EnableDither(&hltdc);
 8004654:	4808      	ldr	r0, [pc, #32]	; (8004678 <LTDC_init+0xa4>)
 8004656:	f7fe f8e3 	bl	8002820 <HAL_LTDC_EnableDither>

    HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800465a:	2201      	movs	r2, #1
 800465c:	2104      	movs	r1, #4
 800465e:	4808      	ldr	r0, [pc, #32]	; (8004680 <LTDC_init+0xac>)
 8004660:	f7fc ff6a 	bl	8001538 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800466a:	4806      	ldr	r0, [pc, #24]	; (8004684 <LTDC_init+0xb0>)
 800466c:	f7fc ff64 	bl	8001538 <HAL_GPIO_WritePin>

    LCD_PowerOn();
 8004670:	f000 faae 	bl	8004bd0 <LCD_PowerOn>
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2001f998 	.word	0x2001f998
 800467c:	40016800 	.word	0x40016800
 8004680:	40020800 	.word	0x40020800
 8004684:	40020c00 	.word	0x40020c00

08004688 <Layer_init>:

void Layer_init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
    playerCfg.WindowX0 = 0;
 800468c:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <Layer_init+0x78>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
	playerCfg.WindowX1 = 240;
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <Layer_init+0x78>)
 8004694:	22f0      	movs	r2, #240	; 0xf0
 8004696:	605a      	str	r2, [r3, #4]
	playerCfg.WindowY0 = 0;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <Layer_init+0x78>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
	playerCfg.WindowY1 = 320;
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <Layer_init+0x78>)
 80046a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80046a4:	60da      	str	r2, [r3, #12]
	playerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <Layer_init+0x78>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	611a      	str	r2, [r3, #16]
	playerCfg.Alpha = 255;
 80046ac:	4b14      	ldr	r3, [pc, #80]	; (8004700 <Layer_init+0x78>)
 80046ae:	22ff      	movs	r2, #255	; 0xff
 80046b0:	615a      	str	r2, [r3, #20]
	playerCfg.Alpha0 = 0;
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <Layer_init+0x78>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	619a      	str	r2, [r3, #24]
	playerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <Layer_init+0x78>)
 80046ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046be:	61da      	str	r2, [r3, #28]
	playerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <Layer_init+0x78>)
 80046c2:	2207      	movs	r2, #7
 80046c4:	621a      	str	r2, [r3, #32]
	playerCfg.FBStartAdress = (uint32_t) 0xD0050000;
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <Layer_init+0x78>)
 80046c8:	4a0e      	ldr	r2, [pc, #56]	; (8004704 <Layer_init+0x7c>)
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
	playerCfg.ImageWidth = 240;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <Layer_init+0x78>)
 80046ce:	22f0      	movs	r2, #240	; 0xf0
 80046d0:	629a      	str	r2, [r3, #40]	; 0x28
	playerCfg.ImageHeight = 320;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <Layer_init+0x78>)
 80046d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c
	playerCfg.Backcolor.Blue = 0;
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <Layer_init+0x78>)
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	playerCfg.Backcolor.Green = 0;
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <Layer_init+0x78>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	playerCfg.Backcolor.Red = 0;
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <Layer_init+0x78>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	HAL_LTDC_ConfigLayer(&hltdc, &playerCfg, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	4902      	ldr	r1, [pc, #8]	; (8004700 <Layer_init+0x78>)
 80046f6:	4804      	ldr	r0, [pc, #16]	; (8004708 <Layer_init+0x80>)
 80046f8:	f7fe f854 	bl	80027a4 <HAL_LTDC_ConfigLayer>
}
 80046fc:	bf00      	nop
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2001f964 	.word	0x2001f964
 8004704:	d0050000 	.word	0xd0050000
 8004708:	2001f998 	.word	0x2001f998

0800470c <CUSTOM_CopyBuffer>:

static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
	U32 BufferSize, AddrSrc, AddrDst;
	BufferSize = XSIZE_PHYS * YSIZE_PHYS * (LCD_GetBitsPerPixel() >> 3); //in bytes
 8004718:	f002 fbb8 	bl	8006e8c <LCD_GetBitsPerPixel>
 800471c:	4603      	mov	r3, r0
 800471e:	10db      	asrs	r3, r3, #3
 8004720:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	61fb      	str	r3, [r7, #28]
	AddrSrc = FRAME_BUFFER_ADDRESS + BufferSize * IndexSrc;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8004736:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800473a:	61bb      	str	r3, [r7, #24]
	AddrDst = FRAME_BUFFER_ADDRESS + BufferSize * IndexDst;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8004748:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800474c:	617b      	str	r3, [r7, #20]
	DMA2D_CopyBuffer((void *) AddrSrc, (void *) AddrDst, XSIZE_PHYS, YSIZE_PHYS, 0, 0);
 800474e:	69b8      	ldr	r0, [r7, #24]
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	2300      	movs	r3, #0
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	2300      	movs	r3, #0
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	23f0      	movs	r3, #240	; 0xf0
 800475c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004760:	f000 f80a 	bl	8004778 <DMA2D_CopyBuffer>
	bufferIndex = IndexDst;
 8004764:	4a03      	ldr	r2, [pc, #12]	; (8004774 <CUSTOM_CopyBuffer+0x68>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6013      	str	r3, [r2, #0]
}
 800476a:	bf00      	nop
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2001f838 	.word	0x2001f838

08004778 <DMA2D_CopyBuffer>:

static void DMA2D_CopyBuffer(void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	DMA2D->CR = 0x00000000UL | (1 << 9);
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 8004788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]
	DMA2D->FGMAR = (U32) pSrc;
 800478e:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	60d3      	str	r3, [r2, #12]
	DMA2D->OMAR = (U32) pDst;
 8004794:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->FGOR = OffLineSrc;
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6113      	str	r3, [r2, #16]
	DMA2D->OOR = OffLineDst;
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	61da      	str	r2, [r3, #28]
	DMA2D->NLR = (U32) (xSize << 16) | (U16) ySize;
 80047ac:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	b289      	uxth	r1, r1
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6453      	str	r3, [r2, #68]	; 0x44
	DMA2D->CR |= DMA2D_CR_START;
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6013      	str	r3, [r2, #0]
	while (DMA2D->CR & DMA2D_CR_START);
 80047c6:	bf00      	nop
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <DMA2D_CopyBuffer+0x68>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f9      	bne.n	80047c8 <DMA2D_CopyBuffer+0x50>
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	4002b000 	.word	0x4002b000

080047e4 <CUSTOM_CopyRect>:

static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize)
{
 80047e4:	b5b0      	push	{r4, r5, r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
	U32 AddrSrc, AddrDst;
	AddrSrc = FRAME_BUFFER_ADDRESS + (y0 * XSIZE_PHYS + x0) * (LCD_GetBitsPerPixel() >> 3);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	019b      	lsls	r3, r3, #6
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	18d4      	adds	r4, r2, r3
 8004802:	f002 fb43 	bl	8006e8c <LCD_GetBitsPerPixel>
 8004806:	4603      	mov	r3, r0
 8004808:	10db      	asrs	r3, r3, #3
 800480a:	fb03 f304 	mul.w	r3, r3, r4
 800480e:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8004812:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004816:	617b      	str	r3, [r7, #20]
	AddrDst = FRAME_BUFFER_ADDRESS + (y1 * XSIZE_PHYS + x1) * (LCD_GetBitsPerPixel() >> 3);
 8004818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	461a      	mov	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	18d4      	adds	r4, r2, r3
 8004828:	f002 fb30 	bl	8006e8c <LCD_GetBitsPerPixel>
 800482c:	4603      	mov	r3, r0
 800482e:	10db      	asrs	r3, r3, #3
 8004830:	fb03 f304 	mul.w	r3, r3, r4
 8004834:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8004838:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800483c:	613b      	str	r3, [r7, #16]
	DMA2D_CopyBuffer((void *) AddrSrc, (void *) AddrDst, xSize, ySize, (XSIZE_PHYS - xSize), (XSIZE_PHYS - xSize));
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	6939      	ldr	r1, [r7, #16]
 8004842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004844:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800484c:	461d      	mov	r5, r3
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	9500      	str	r5, [sp, #0]
 8004858:	4623      	mov	r3, r4
 800485a:	f7ff ff8d 	bl	8004778 <DMA2D_CopyBuffer>
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004868 <CUSTOM_DrawBitmap32bpp>:

static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004868:	b5b0      	push	{r4, r5, r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
	U32 AddrDst;
	int OffLineSrc, OffLineDst;
	AddrDst = FRAME_BUFFER_ADDRESS + (XSIZE_PHYS * YSIZE_PHYS * (LCD_GetBitsPerPixel() >> 3) * bufferIndex) + (y * XSIZE_PHYS + x) * (LCD_GetBitsPerPixel() >> 3);
 8004876:	f002 fb09 	bl	8006e8c <LCD_GetBitsPerPixel>
 800487a:	4603      	mov	r3, r0
 800487c:	10db      	asrs	r3, r3, #3
 800487e:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <CUSTOM_DrawBitmap32bpp+0x8c>)
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	461d      	mov	r5, r3
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	18d4      	adds	r4, r2, r3
 80048a0:	f002 faf4 	bl	8006e8c <LCD_GetBitsPerPixel>
 80048a4:	4603      	mov	r3, r0
 80048a6:	10db      	asrs	r3, r3, #3
 80048a8:	fb03 f304 	mul.w	r3, r3, r4
 80048ac:	442b      	add	r3, r5
 80048ae:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80048b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048b6:	61fb      	str	r3, [r7, #28]
	OffLineSrc = (BytesPerLine / 4) - xSize;
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da00      	bge.n	80048c0 <CUSTOM_DrawBitmap32bpp+0x58>
 80048be:	3303      	adds	r3, #3
 80048c0:	109b      	asrs	r3, r3, #2
 80048c2:	461a      	mov	r2, r3
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	61bb      	str	r3, [r7, #24]
	OffLineDst = XSIZE_PHYS - xSize;
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80048d0:	617b      	str	r3, [r7, #20]
	DMA2D_CopyBuffer((void *) p, (void *) AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 80048d2:	69f9      	ldr	r1, [r7, #28]
 80048d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d6:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	9201      	str	r2, [sp, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	4623      	mov	r3, r4
 80048e2:	4602      	mov	r2, r0
 80048e4:	6838      	ldr	r0, [r7, #0]
 80048e6:	f7ff ff47 	bl	8004778 <DMA2D_CopyBuffer>
}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bdb0      	pop	{r4, r5, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2001f838 	.word	0x2001f838

080048f8 <LCD_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*   
*/
void LCD_X_Config(void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
	LTDC_init();
 80048fc:	f7ff fe6a 	bl	80045d4 <LTDC_init>

	GUI_DEVICE_CreateAndLink(GUIDRV_LIN_32, GUICC_M8888I, 0, 0);
 8004900:	2300      	movs	r3, #0
 8004902:	2200      	movs	r2, #0
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <LCD_X_Config+0x68>)
 8004906:	4817      	ldr	r0, [pc, #92]	; (8004964 <LCD_X_Config+0x6c>)
 8004908:	f002 fe96 	bl	8007638 <GUI_DEVICE_CreateAndLink>
	LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 800490c:	22f0      	movs	r2, #240	; 0xf0
 800490e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004912:	2000      	movs	r0, #0
 8004914:	f002 fa12 	bl	8006d3c <LCD_SetVSizeEx>
	LCD_SetSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 8004918:	22f0      	movs	r2, #240	; 0xf0
 800491a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800491e:	2000      	movs	r0, #0
 8004920:	f002 fa24 	bl	8006d6c <LCD_SetSizeEx>
	LCD_SetVRAMAddrEx(0, (void *)FRAME_BUFFER_ADDRESS);
 8004924:	4910      	ldr	r1, [pc, #64]	; (8004968 <LCD_X_Config+0x70>)
 8004926:	2000      	movs	r0, #0
 8004928:	f002 f9f2 	bl	8006d10 <LCD_SetVRAMAddrEx>
	GUI_MULTIBUF_Config(NUM_BUFFERS);
 800492c:	2001      	movs	r0, #1
 800492e:	f002 fdf3 	bl	8007518 <GUI_MULTIBUF_Config>
	LCD_SetDevFunc(0, LCD_DEVFUNC_COPYBUFFER, (void (*)(void)) CUSTOM_CopyBuffer);
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <LCD_X_Config+0x74>)
 8004934:	2121      	movs	r1, #33	; 0x21
 8004936:	2000      	movs	r0, #0
 8004938:	f002 fa60 	bl	8006dfc <LCD_SetDevFunc>
	LCD_SetDevFunc(0, LCD_DEVFUNC_COPYRECT, (void (*)(void)) CUSTOM_CopyRect);
 800493c:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <LCD_X_Config+0x78>)
 800493e:	2123      	movs	r1, #35	; 0x23
 8004940:	2000      	movs	r0, #0
 8004942:	f002 fa5b 	bl	8006dfc <LCD_SetDevFunc>
	LCD_SetDevFunc(0, LCD_DEVFUNC_FILLRECT, (void (*)(void)) CUSTOM_FillRect); //still can't dispose of bugs
 8004946:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <LCD_X_Config+0x7c>)
 8004948:	2119      	movs	r1, #25
 800494a:	2000      	movs	r0, #0
 800494c:	f002 fa56 	bl	8006dfc <LCD_SetDevFunc>
	LCD_SetDevFunc(0, LCD_DEVFUNC_DRAWBMP_32BPP, (void (*)(void)) CUSTOM_DrawBitmap32bpp);
 8004950:	4a09      	ldr	r2, [pc, #36]	; (8004978 <LCD_X_Config+0x80>)
 8004952:	2128      	movs	r1, #40	; 0x28
 8004954:	2000      	movs	r0, #0
 8004956:	f002 fa51 	bl	8006dfc <LCD_SetDevFunc>
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	0800b1dc 	.word	0x0800b1dc
 8004964:	0800b094 	.word	0x0800b094
 8004968:	d0020000 	.word	0xd0020000
 800496c:	0800470d 	.word	0x0800470d
 8004970:	080047e5 	.word	0x080047e5
 8004974:	08004ad5 	.word	0x08004ad5
 8004978:	08004869 	.word	0x08004869

0800497c <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  int r;
  int xPos, yPos;

  switch (Cmd) {
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	3b01      	subs	r3, #1
 800498c:	2b0d      	cmp	r3, #13
 800498e:	d85e      	bhi.n	8004a4e <LCD_X_DisplayDriver+0xd2>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <LCD_X_DisplayDriver+0x1c>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049e1 	.word	0x080049e1
 80049a4:	080049fb 	.word	0x080049fb
 80049a8:	08004a03 	.word	0x08004a03
 80049ac:	08004a17 	.word	0x08004a17
 80049b0:	08004a2b 	.word	0x08004a2b
 80049b4:	08004a4f 	.word	0x08004a4f
 80049b8:	08004a4f 	.word	0x08004a4f
 80049bc:	08004a4f 	.word	0x08004a4f
 80049c0:	08004a4f 	.word	0x08004a4f
 80049c4:	08004a4f 	.word	0x08004a4f
 80049c8:	08004a4f 	.word	0x08004a4f
 80049cc:	080049ef 	.word	0x080049ef
  case LCD_X_INITCONTROLLER: {
	  Layer_init();
 80049d0:	f7ff fe5a 	bl	8004688 <Layer_init>
	  return 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e03e      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
    //
    // Required for setting the address of the video RAM for drivers
    // with memory mapped video RAM which is passed in the 'pVRAM' element of p
    //
    LCD_X_SETVRAMADDR_INFO * p;
    p = (LCD_X_SETVRAMADDR_INFO *)pData;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
    //...
    return 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	e03a      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  }
  case LCD_X_SETORG: {
	  HAL_LTDC_SetAddress(&hltdc, FRAME_BUFFER_ADDRESS, 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	491f      	ldr	r1, [pc, #124]	; (8004a60 <LCD_X_DisplayDriver+0xe4>)
 80049e4:	481f      	ldr	r0, [pc, #124]	; (8004a64 <LCD_X_DisplayDriver+0xe8>)
 80049e6:	f7fd ff8b 	bl	8002900 <HAL_LTDC_SetAddress>
	  return 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e033      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  }
  case LCD_X_SHOWBUFFER: {
	  pending_buffer = ((LCD_X_SHOWBUFFER_INFO *) pData)->Index;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <LCD_X_DisplayDriver+0xec>)
 80049f4:	6013      	str	r3, [r2, #0]
	  return 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e02d      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  case LCD_X_SETLUTENTRY: {
    //
    // Required for setting a lookup table entry which is passed in the 'Pos' and 'Color' element of p
    //
    LCD_X_SETLUTENTRY_INFO * p;
    p = (LCD_X_SETLUTENTRY_INFO *)pData;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	623b      	str	r3, [r7, #32]
    //...
    return 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e029      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  }
  case LCD_X_ON: {
	  __HAL_LTDC_ENABLE(&hltdc);
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <LCD_X_DisplayDriver+0xe8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <LCD_X_DisplayDriver+0xe8>)
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	6992      	ldr	r2, [r2, #24]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	619a      	str	r2, [r3, #24]
	  return 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e01f      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  }
  case LCD_X_OFF: {
	  __HAL_LTDC_DISABLE(&hltdc);
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <LCD_X_DisplayDriver+0xe8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <LCD_X_DisplayDriver+0xe8>)
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6992      	ldr	r2, [r2, #24]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	619a      	str	r2, [r3, #24]
	  return 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e015      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  }
  case LCD_X_SETSIZE: {
	  GUI_GetLayerPosEx(0, &xPos, &yPos);
 8004a2a:	f107 0214 	add.w	r2, r7, #20
 8004a2e:	f107 0318 	add.w	r3, r7, #24
 8004a32:	4619      	mov	r1, r3
 8004a34:	2000      	movs	r0, #0
 8004a36:	f002 fd15 	bl	8007464 <GUI_GetLayerPosEx>
	  HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, 0);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	461a      	mov	r2, r3
 8004a42:	2300      	movs	r3, #0
 8004a44:	4807      	ldr	r0, [pc, #28]	; (8004a64 <LCD_X_DisplayDriver+0xe8>)
 8004a46:	f7fd ff15 	bl	8002874 <HAL_LTDC_SetWindowPosition>
	  return 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e003      	b.n	8004a56 <LCD_X_DisplayDriver+0xda>
  }
  default:
    r = -1;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a52:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004a54:	69fb      	ldr	r3, [r7, #28]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3728      	adds	r7, #40	; 0x28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	d0020000 	.word	0xd0020000
 8004a64:	2001f998 	.word	0x2001f998
 8004a68:	2001f83c 	.word	0x2001f83c

08004a6c <DMA2D_FillBuffer>:

static void DMA2D_FillBuffer(void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
	DMA2D->CR = 0x00030000UL | (1 << 9);
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <DMA2D_FillBuffer+0x64>)
 8004a7e:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = ColorIndex;
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (U32) pDst;
 8004a86:	4a11      	ldr	r2, [pc, #68]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
 8004a8c:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (U32) (xSize << 16) | (U16) ySize;
 8004a98:	4a0c      	ldr	r2, [pc, #48]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	b289      	uxth	r1, r1
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	6453      	str	r3, [r2, #68]	; 0x44
	DMA2D->CR |= DMA2D_CR_START;
 8004aa6:	4a09      	ldr	r2, [pc, #36]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6013      	str	r3, [r2, #0]
	while (DMA2D->CR & DMA2D_CR_START);
 8004ab2:	bf00      	nop
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <DMA2D_FillBuffer+0x60>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f9      	bne.n	8004ab4 <DMA2D_FillBuffer+0x48>
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	4002b000 	.word	0x4002b000
 8004ad0:	00030200 	.word	0x00030200

08004ad4 <CUSTOM_FillRect>:

static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex)
{
 8004ad4:	b5b0      	push	{r4, r5, r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  U32 AddrDst;
  int xSize, ySize;
  xSize = x1 - x0 + 1;
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
  ySize = y1 - y0 + 1;
 8004aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
  AddrDst = FRAME_BUFFER_ADDRESS + (XSIZE_PHYS * YSIZE_PHYS * (LCD_GetBitsPerPixel() >> 3) * bufferIndex) + (y0 * XSIZE_PHYS + x0) * (LCD_GetBitsPerPixel() >> 3);
 8004af6:	f002 f9c9 	bl	8006e8c <LCD_GetBitsPerPixel>
 8004afa:	4603      	mov	r3, r0
 8004afc:	10db      	asrs	r3, r3, #3
 8004afe:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <CUSTOM_FillRect+0x84>)
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	461d      	mov	r5, r3
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	18d4      	adds	r4, r2, r3
 8004b20:	f002 f9b4 	bl	8006e8c <LCD_GetBitsPerPixel>
 8004b24:	4603      	mov	r3, r0
 8004b26:	10db      	asrs	r3, r3, #3
 8004b28:	fb03 f304 	mul.w	r3, r3, r4
 8004b2c:	442b      	add	r3, r5
 8004b2e:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8004b32:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b36:	617b      	str	r3, [r7, #20]
  DMA2D_FillBuffer((void *) AddrDst, xSize, ySize, XSIZE_PHYS - xSize, PixelIndex);
 8004b38:	6978      	ldr	r0, [r7, #20]
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004b44:	461c      	mov	r4, r3
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	f7ff ff8e 	bl	8004a6c <DMA2D_FillBuffer>
}
 8004b50:	bf00      	nop
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}
 8004b58:	2001f838 	.word	0x2001f838

08004b5c <HAL_LTDC_LineEventCallback>:

void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	U32 Addr;
	if (pending_buffer >= 0)
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_LTDC_LineEventCallback+0x70>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	db27      	blt.n	8004bbc <HAL_LTDC_LineEventCallback+0x60>
	{
		Addr = FRAME_BUFFER_ADDRESS + XSIZE_PHYS * YSIZE_PHYS * pending_buffer * (LCD_GetBitsPerPixel() >> 3);
 8004b6c:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <HAL_LTDC_LineEventCallback+0x70>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8004b74:	fb02 f403 	mul.w	r4, r2, r3
 8004b78:	f002 f988 	bl	8006e8c <LCD_GetBitsPerPixel>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	10db      	asrs	r3, r3, #3
 8004b80:	fb03 f304 	mul.w	r3, r3, r4
 8004b84:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8004b88:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b8c:	60fb      	str	r3, [r7, #12]
	    __HAL_LTDC_LAYER(hltdc, 0)->CFBAR = Addr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3384      	adds	r3, #132	; 0x84
 8004b94:	461a      	mov	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6293      	str	r3, [r2, #40]	; 0x28
	    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
	    GUI_MULTIBUF_Confirm(pending_buffer);
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_LTDC_LineEventCallback+0x70>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 fcaa 	bl	8007508 <GUI_MULTIBUF_Confirm>
	    pending_buffer = -1;
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_LTDC_LineEventCallback+0x70>)
 8004bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bba:	601a      	str	r2, [r3, #0]
	}
	HAL_LTDC_ProgramLineEvent(hltdc, 0); //Define the position of the line interrupt
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd fed4 	bl	800296c <HAL_LTDC_ProgramLineEvent>
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd90      	pop	{r4, r7, pc}
 8004bcc:	2001f83c 	.word	0x2001f83c

08004bd0 <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8004bd4:	20ca      	movs	r0, #202	; 0xca
 8004bd6:	f000 f943 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8004bda:	20c3      	movs	r0, #195	; 0xc3
 8004bdc:	f000 f96a 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x08);
 8004be0:	2008      	movs	r0, #8
 8004be2:	f000 f967 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x50);
 8004be6:	2050      	movs	r0, #80	; 0x50
 8004be8:	f000 f964 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 8004bec:	20cf      	movs	r0, #207	; 0xcf
 8004bee:	f000 f937 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f000 f95e 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8004bf8:	20c1      	movs	r0, #193	; 0xc1
 8004bfa:	f000 f95b 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x30);
 8004bfe:	2030      	movs	r0, #48	; 0x30
 8004c00:	f000 f958 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8004c04:	20ed      	movs	r0, #237	; 0xed
 8004c06:	f000 f92b 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8004c0a:	2064      	movs	r0, #100	; 0x64
 8004c0c:	f000 f952 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x03);
 8004c10:	2003      	movs	r0, #3
 8004c12:	f000 f94f 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x12);
 8004c16:	2012      	movs	r0, #18
 8004c18:	f000 f94c 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x81);
 8004c1c:	2081      	movs	r0, #129	; 0x81
 8004c1e:	f000 f949 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 8004c22:	20e8      	movs	r0, #232	; 0xe8
 8004c24:	f000 f91c 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8004c28:	2085      	movs	r0, #133	; 0x85
 8004c2a:	f000 f943 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f000 f940 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x78);
 8004c34:	2078      	movs	r0, #120	; 0x78
 8004c36:	f000 f93d 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8004c3a:	20cb      	movs	r0, #203	; 0xcb
 8004c3c:	f000 f910 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8004c40:	2039      	movs	r0, #57	; 0x39
 8004c42:	f000 f937 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8004c46:	202c      	movs	r0, #44	; 0x2c
 8004c48:	f000 f934 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f000 f931 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x34);
 8004c52:	2034      	movs	r0, #52	; 0x34
 8004c54:	f000 f92e 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x02);
 8004c58:	2002      	movs	r0, #2
 8004c5a:	f000 f92b 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 8004c5e:	20f7      	movs	r0, #247	; 0xf7
 8004c60:	f000 f8fe 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8004c64:	2020      	movs	r0, #32
 8004c66:	f000 f925 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8004c6a:	20ea      	movs	r0, #234	; 0xea
 8004c6c:	f000 f8f8 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f000 f91f 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f000 f91c 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 8004c7c:	20b1      	movs	r0, #177	; 0xb1
 8004c7e:	f000 f8ef 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004c82:	2000      	movs	r0, #0
 8004c84:	f000 f916 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8004c88:	201b      	movs	r0, #27
 8004c8a:	f000 f913 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8004c8e:	20b6      	movs	r0, #182	; 0xb6
 8004c90:	f000 f8e6 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8004c94:	200a      	movs	r0, #10
 8004c96:	f000 f90d 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0xA2);
 8004c9a:	20a2      	movs	r0, #162	; 0xa2
 8004c9c:	f000 f90a 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 8004ca0:	20c0      	movs	r0, #192	; 0xc0
 8004ca2:	f000 f8dd 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8004ca6:	2010      	movs	r0, #16
 8004ca8:	f000 f904 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8004cac:	20c1      	movs	r0, #193	; 0xc1
 8004cae:	f000 f8d7 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8004cb2:	2010      	movs	r0, #16
 8004cb4:	f000 f8fe 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8004cb8:	20c5      	movs	r0, #197	; 0xc5
 8004cba:	f000 f8d1 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 8004cbe:	2045      	movs	r0, #69	; 0x45
 8004cc0:	f000 f8f8 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x15);
 8004cc4:	2015      	movs	r0, #21
 8004cc6:	f000 f8f5 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 8004cca:	20c7      	movs	r0, #199	; 0xc7
 8004ccc:	f000 f8c8 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8004cd0:	2090      	movs	r0, #144	; 0x90
 8004cd2:	f000 f8ef 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8004cd6:	2036      	movs	r0, #54	; 0x36
 8004cd8:	f000 f8c2 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8004cdc:	20c8      	movs	r0, #200	; 0xc8
 8004cde:	f000 f8e9 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8004ce2:	20f2      	movs	r0, #242	; 0xf2
 8004ce4:	f000 f8bc 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f000 f8e3 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8004cee:	20b0      	movs	r0, #176	; 0xb0
 8004cf0:	f000 f8b6 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8004cf4:	20c2      	movs	r0, #194	; 0xc2
 8004cf6:	f000 f8dd 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8004cfa:	20b6      	movs	r0, #182	; 0xb6
 8004cfc:	f000 f8b0 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8004d00:	200a      	movs	r0, #10
 8004d02:	f000 f8d7 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0xA7);
 8004d06:	20a7      	movs	r0, #167	; 0xa7
 8004d08:	f000 f8d4 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x27);
 8004d0c:	2027      	movs	r0, #39	; 0x27
 8004d0e:	f000 f8d1 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x04);
 8004d12:	2004      	movs	r0, #4
 8004d14:	f000 f8ce 	bl	8004eb4 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8004d18:	202a      	movs	r0, #42	; 0x2a
 8004d1a:	f000 f8a1 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f000 f8c8 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004d24:	2000      	movs	r0, #0
 8004d26:	f000 f8c5 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f000 f8c2 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8004d30:	20ef      	movs	r0, #239	; 0xef
 8004d32:	f000 f8bf 	bl	8004eb4 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8004d36:	202b      	movs	r0, #43	; 0x2b
 8004d38:	f000 f892 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f000 f8b9 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004d42:	2000      	movs	r0, #0
 8004d44:	f000 f8b6 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x01);
 8004d48:	2001      	movs	r0, #1
 8004d4a:	f000 f8b3 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8004d4e:	203f      	movs	r0, #63	; 0x3f
 8004d50:	f000 f8b0 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8004d54:	20f6      	movs	r0, #246	; 0xf6
 8004d56:	f000 f883 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f000 f8aa 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004d60:	2000      	movs	r0, #0
 8004d62:	f000 f8a7 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x06);
 8004d66:	2006      	movs	r0, #6
 8004d68:	f000 f8a4 	bl	8004eb4 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8004d6c:	202c      	movs	r0, #44	; 0x2c
 8004d6e:	f000 f877 	bl	8004e60 <LCD_WriteCommand>
	HAL_Delay(100);
 8004d72:	2064      	movs	r0, #100	; 0x64
 8004d74:	f7fb fc34 	bl	80005e0 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8004d78:	2026      	movs	r0, #38	; 0x26
 8004d7a:	f000 f871 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f000 f898 	bl	8004eb4 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8004d84:	20e0      	movs	r0, #224	; 0xe0
 8004d86:	f000 f86b 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8004d8a:	200f      	movs	r0, #15
 8004d8c:	f000 f892 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x29);
 8004d90:	2029      	movs	r0, #41	; 0x29
 8004d92:	f000 f88f 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x24);
 8004d96:	2024      	movs	r0, #36	; 0x24
 8004d98:	f000 f88c 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8004d9c:	200c      	movs	r0, #12
 8004d9e:	f000 f889 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8004da2:	200e      	movs	r0, #14
 8004da4:	f000 f886 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x09);
 8004da8:	2009      	movs	r0, #9
 8004daa:	f000 f883 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8004dae:	204e      	movs	r0, #78	; 0x4e
 8004db0:	f000 f880 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x78);
 8004db4:	2078      	movs	r0, #120	; 0x78
 8004db6:	f000 f87d 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8004dba:	203c      	movs	r0, #60	; 0x3c
 8004dbc:	f000 f87a 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x09);
 8004dc0:	2009      	movs	r0, #9
 8004dc2:	f000 f877 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x13);
 8004dc6:	2013      	movs	r0, #19
 8004dc8:	f000 f874 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x05);
 8004dcc:	2005      	movs	r0, #5
 8004dce:	f000 f871 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x17);
 8004dd2:	2017      	movs	r0, #23
 8004dd4:	f000 f86e 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x11);
 8004dd8:	2011      	movs	r0, #17
 8004dda:	f000 f86b 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8004dde:	2000      	movs	r0, #0
 8004de0:	f000 f868 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8004de4:	20e1      	movs	r0, #225	; 0xe1
 8004de6:	f000 f83b 	bl	8004e60 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f000 f862 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x16);
 8004df0:	2016      	movs	r0, #22
 8004df2:	f000 f85f 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8004df6:	201b      	movs	r0, #27
 8004df8:	f000 f85c 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x04);
 8004dfc:	2004      	movs	r0, #4
 8004dfe:	f000 f859 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x11);
 8004e02:	2011      	movs	r0, #17
 8004e04:	f000 f856 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x07);
 8004e08:	2007      	movs	r0, #7
 8004e0a:	f000 f853 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x31);
 8004e0e:	2031      	movs	r0, #49	; 0x31
 8004e10:	f000 f850 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x33);
 8004e14:	2033      	movs	r0, #51	; 0x33
 8004e16:	f000 f84d 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x42);
 8004e1a:	2042      	movs	r0, #66	; 0x42
 8004e1c:	f000 f84a 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x05);
 8004e20:	2005      	movs	r0, #5
 8004e22:	f000 f847 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8004e26:	200c      	movs	r0, #12
 8004e28:	f000 f844 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8004e2c:	200a      	movs	r0, #10
 8004e2e:	f000 f841 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x28);
 8004e32:	2028      	movs	r0, #40	; 0x28
 8004e34:	f000 f83e 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8004e38:	202f      	movs	r0, #47	; 0x2f
 8004e3a:	f000 f83b 	bl	8004eb4 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8004e3e:	200f      	movs	r0, #15
 8004e40:	f000 f838 	bl	8004eb4 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8004e44:	2011      	movs	r0, #17
 8004e46:	f000 f80b 	bl	8004e60 <LCD_WriteCommand>
	HAL_Delay(100);
 8004e4a:	2064      	movs	r0, #100	; 0x64
 8004e4c:	f7fb fbc8 	bl	80005e0 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8004e50:	2029      	movs	r0, #41	; 0x29
 8004e52:	f000 f805 	bl	8004e60 <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8004e56:	202c      	movs	r0, #44	; 0x2c
 8004e58:	f000 f802 	bl	8004e60 <LCD_WriteCommand>
}
 8004e5c:	bf00      	nop
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	733b      	strb	r3, [r7, #12]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8004e72:	2200      	movs	r2, #0
 8004e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e78:	480b      	ldr	r0, [pc, #44]	; (8004ea8 <LCD_WriteCommand+0x48>)
 8004e7a:	f7fc fb5d 	bl	8001538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2104      	movs	r1, #4
 8004e82:	480a      	ldr	r0, [pc, #40]	; (8004eac <LCD_WriteCommand+0x4c>)
 8004e84:	f7fc fb58 	bl	8001538 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8004e88:	f107 010c 	add.w	r1, r7, #12
 8004e8c:	2364      	movs	r3, #100	; 0x64
 8004e8e:	2201      	movs	r2, #1
 8004e90:	4807      	ldr	r0, [pc, #28]	; (8004eb0 <LCD_WriteCommand+0x50>)
 8004e92:	f7fe fe1b 	bl	8003acc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8004e96:	2201      	movs	r2, #1
 8004e98:	2104      	movs	r1, #4
 8004e9a:	4804      	ldr	r0, [pc, #16]	; (8004eac <LCD_WriteCommand+0x4c>)
 8004e9c:	f7fc fb4c 	bl	8001538 <HAL_GPIO_WritePin>
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40020c00 	.word	0x40020c00
 8004eac:	40020800 	.word	0x40020800
 8004eb0:	2001fb58 	.word	0x2001fb58

08004eb4 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	733b      	strb	r3, [r7, #12]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ecc:	480b      	ldr	r0, [pc, #44]	; (8004efc <LCD_WriteData+0x48>)
 8004ece:	f7fc fb33 	bl	8001538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	480a      	ldr	r0, [pc, #40]	; (8004f00 <LCD_WriteData+0x4c>)
 8004ed8:	f7fc fb2e 	bl	8001538 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8004edc:	f107 010c 	add.w	r1, r7, #12
 8004ee0:	2364      	movs	r3, #100	; 0x64
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4807      	ldr	r0, [pc, #28]	; (8004f04 <LCD_WriteData+0x50>)
 8004ee6:	f7fe fdf1 	bl	8003acc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8004eea:	2201      	movs	r2, #1
 8004eec:	2104      	movs	r1, #4
 8004eee:	4804      	ldr	r0, [pc, #16]	; (8004f00 <LCD_WriteData+0x4c>)
 8004ef0:	f7fc fb22 	bl	8001538 <HAL_GPIO_WritePin>
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40020c00 	.word	0x40020c00
 8004f00:	40020800 	.word	0x40020800
 8004f04:	2001fb58 	.word	0x2001fb58

08004f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f0e:	f7fb faf5 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f12:	f000 f849 	bl	8004fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f16:	f000 fad1 	bl	80054bc <MX_GPIO_Init>
  MX_DMA_Init();
 8004f1a:	f000 fa5f 	bl	80053dc <MX_DMA_Init>
  MX_LTDC_Init();
 8004f1e:	f000 f93f 	bl	80051a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8004f22:	f000 f9f3 	bl	800530c <MX_SPI5_Init>
  MX_FMC_Init();
 8004f26:	f000 fa81 	bl	800542c <MX_FMC_Init>
  MX_DMA2D_Init();
 8004f2a:	f000 f8c7 	bl	80050bc <MX_DMA2D_Init>
  MX_I2C3_Init();
 8004f2e:	f000 f8f7 	bl	8005120 <MX_I2C3_Init>
  MX_TIM6_Init();
 8004f32:	f000 fa21 	bl	8005378 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8004f36:	4819      	ldr	r0, [pc, #100]	; (8004f9c <main+0x94>)
 8004f38:	f000 fb76 	bl	8005628 <SDRAM_init>
//  LCD_PowerOn();
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER,0);
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004f42:	4817      	ldr	r0, [pc, #92]	; (8004fa0 <main+0x98>)
 8004f44:	f7fd fcdc 	bl	8002900 <HAL_LTDC_SetAddress>
  TP_Config();
 8004f48:	f001 f862 	bl	8006010 <TP_Config>

  __HAL_RCC_CRC_CLK_ENABLE();
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <main+0x9c>)
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <main+0x9c>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5c:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <main+0x9c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
  GUI_Init();
 8004f68:	f002 fc42 	bl	80077f0 <GUI_Init>
  GUI_SetBkColor(GUI_DARKBLUE);
 8004f6c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f70:	f002 fa76 	bl	8007460 <GUI_SetBkColor>
  GUI_Clear();/*
 8004f74:	f002 fc02 	bl	800777c <GUI_Clear>
  GUI_SetColor(GUI_ORANGE);
  GUI_DispStringAt("STemWin", 0, 0);
  GUI_SetColor(GUI_RED);
  GUI_DrawLine(0,0,100,100);
  GUI_FillRect(100,100,200,200);*/
  LCD_SetColor(0xFFFFFF);
 8004f78:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004f7c:	f002 fa3e 	bl	80073fc <LCD_SetColor>
  LCD_DrawPixel(200,200);
 8004f80:	21c8      	movs	r1, #200	; 0xc8
 8004f82:	20c8      	movs	r0, #200	; 0xc8
 8004f84:	f001 fff4 	bl	8006f70 <LCD_DrawPixel>
  LCD_DrawPixel(0,0);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f001 fff0 	bl	8006f70 <LCD_DrawPixel>
  LCD_DrawPixel(1,1);
 8004f90:	2101      	movs	r1, #1
 8004f92:	2001      	movs	r0, #1
 8004f94:	f001 ffec 	bl	8006f70 <LCD_DrawPixel>
  */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f98:	e7fe      	b.n	8004f98 <main+0x90>
 8004f9a:	bf00      	nop
 8004f9c:	2001fc2c 	.word	0x2001fc2c
 8004fa0:	2001f998 	.word	0x2001f998
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b0a0      	sub	sp, #128	; 0x80
 8004fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004fb2:	2230      	movs	r2, #48	; 0x30
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f005 fcb9 	bl	800a92e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	2230      	movs	r2, #48	; 0x30
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f005 fcaa 	bl	800a92e <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	4a35      	ldr	r2, [pc, #212]	; (80050b4 <SystemClock_Config+0x10c>)
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <SystemClock_Config+0x10c>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <SystemClock_Config+0x10c>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	4a2f      	ldr	r2, [pc, #188]	; (80050b8 <SystemClock_Config+0x110>)
 8004ffc:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <SystemClock_Config+0x110>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <SystemClock_Config+0x110>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005012:	2302      	movs	r3, #2
 8005014:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005016:	2301      	movs	r3, #1
 8005018:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800501a:	2310      	movs	r3, #16
 800501c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800501e:	2302      	movs	r3, #2
 8005020:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005022:	2300      	movs	r3, #0
 8005024:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005026:	2308      	movs	r3, #8
 8005028:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800502a:	23b4      	movs	r3, #180	; 0xb4
 800502c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800502e:	2302      	movs	r3, #2
 8005030:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005032:	2304      	movs	r3, #4
 8005034:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd fec6 	bl	8002dcc <HAL_RCC_OscConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005046:	f000 fae7 	bl	8005618 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800504a:	f7fd fe6f 	bl	8002d2c <HAL_PWREx_EnableOverDrive>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005054:	f000 fae0 	bl	8005618 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005058:	230f      	movs	r3, #15
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800505c:	2302      	movs	r3, #2
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005060:	2300      	movs	r3, #0
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005064:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005068:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800506a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005070:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005074:	2105      	movs	r1, #5
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f8ea 	bl	8003250 <HAL_RCC_ClockConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005082:	f000 fac9 	bl	8005618 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005086:	2308      	movs	r3, #8
 8005088:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800508a:	233c      	movs	r3, #60	; 0x3c
 800508c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800508e:	2302      	movs	r3, #2
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fa8f 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <SystemClock_Config+0x104>
  {
    Error_Handler();
 80050a8:	f000 fab6 	bl	8005618 <Error_Handler>
  }
}
 80050ac:	bf00      	nop
 80050ae:	3780      	adds	r7, #128	; 0x80
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40007000 	.word	0x40007000

080050bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80050c0:	4b15      	ldr	r3, [pc, #84]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050c2:	4a16      	ldr	r2, [pc, #88]	; (800511c <MX_DMA2D_Init+0x60>)
 80050c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80050de:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80050f0:	4809      	ldr	r0, [pc, #36]	; (8005118 <MX_DMA2D_Init+0x5c>)
 80050f2:	f7fb fe8b 	bl	8000e0c <HAL_DMA2D_Init>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80050fc:	f000 fa8c 	bl	8005618 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005100:	2101      	movs	r1, #1
 8005102:	4805      	ldr	r0, [pc, #20]	; (8005118 <MX_DMA2D_Init+0x5c>)
 8005104:	f7fb ffdc 	bl	80010c0 <HAL_DMA2D_ConfigLayer>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800510e:	f000 fa83 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2001fbec 	.word	0x2001fbec
 800511c:	4002b000 	.word	0x4002b000

08005120 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005124:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <MX_I2C3_Init+0x74>)
 8005126:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <MX_I2C3_Init+0x78>)
 8005128:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <MX_I2C3_Init+0x74>)
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <MX_I2C3_Init+0x7c>)
 800512e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005130:	4b18      	ldr	r3, [pc, #96]	; (8005194 <MX_I2C3_Init+0x74>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <MX_I2C3_Init+0x74>)
 8005138:	2282      	movs	r2, #130	; 0x82
 800513a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800513c:	4b15      	ldr	r3, [pc, #84]	; (8005194 <MX_I2C3_Init+0x74>)
 800513e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005142:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <MX_I2C3_Init+0x74>)
 8005146:	2200      	movs	r2, #0
 8005148:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <MX_I2C3_Init+0x74>)
 800514c:	2200      	movs	r2, #0
 800514e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <MX_I2C3_Init+0x74>)
 8005152:	2200      	movs	r2, #0
 8005154:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <MX_I2C3_Init+0x74>)
 8005158:	2200      	movs	r2, #0
 800515a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800515c:	480d      	ldr	r0, [pc, #52]	; (8005194 <MX_I2C3_Init+0x74>)
 800515e:	f7fc fa05 	bl	800156c <HAL_I2C_Init>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005168:	f000 fa56 	bl	8005618 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800516c:	2100      	movs	r1, #0
 800516e:	4809      	ldr	r0, [pc, #36]	; (8005194 <MX_I2C3_Init+0x74>)
 8005170:	f7fd f911 	bl	8002396 <HAL_I2CEx_ConfigAnalogFilter>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800517a:	f000 fa4d 	bl	8005618 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800517e:	2100      	movs	r1, #0
 8005180:	4804      	ldr	r0, [pc, #16]	; (8005194 <MX_I2C3_Init+0x74>)
 8005182:	f7fd f944 	bl	800240e <HAL_I2CEx_ConfigDigitalFilter>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800518c:	f000 fa44 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005190:	bf00      	nop
 8005192:	bd80      	pop	{r7, pc}
 8005194:	2001faa4 	.word	0x2001faa4
 8005198:	40005c00 	.word	0x40005c00
 800519c:	000186a0 	.word	0x000186a0

080051a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b09a      	sub	sp, #104	; 0x68
 80051a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80051a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051aa:	2234      	movs	r2, #52	; 0x34
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f005 fbbd 	bl	800a92e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80051b4:	463b      	mov	r3, r7
 80051b6:	2234      	movs	r2, #52	; 0x34
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f005 fbb7 	bl	800a92e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80051c0:	4b50      	ldr	r3, [pc, #320]	; (8005304 <MX_LTDC_Init+0x164>)
 80051c2:	4a51      	ldr	r2, [pc, #324]	; (8005308 <MX_LTDC_Init+0x168>)
 80051c4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80051c6:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <MX_LTDC_Init+0x164>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80051cc:	4b4d      	ldr	r3, [pc, #308]	; (8005304 <MX_LTDC_Init+0x164>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80051d2:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <MX_LTDC_Init+0x164>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80051d8:	4b4a      	ldr	r3, [pc, #296]	; (8005304 <MX_LTDC_Init+0x164>)
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 80051de:	4b49      	ldr	r3, [pc, #292]	; (8005304 <MX_LTDC_Init+0x164>)
 80051e0:	2208      	movs	r2, #8
 80051e2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80051e4:	4b47      	ldr	r3, [pc, #284]	; (8005304 <MX_LTDC_Init+0x164>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80051ea:	4b46      	ldr	r3, [pc, #280]	; (8005304 <MX_LTDC_Init+0x164>)
 80051ec:	221d      	movs	r2, #29
 80051ee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80051f0:	4b44      	ldr	r3, [pc, #272]	; (8005304 <MX_LTDC_Init+0x164>)
 80051f2:	2203      	movs	r2, #3
 80051f4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80051f6:	4b43      	ldr	r3, [pc, #268]	; (8005304 <MX_LTDC_Init+0x164>)
 80051f8:	f240 120d 	movw	r2, #269	; 0x10d
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <MX_LTDC_Init+0x164>)
 8005200:	f240 1243 	movw	r2, #323	; 0x143
 8005204:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8005206:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <MX_LTDC_Init+0x164>)
 8005208:	f240 1217 	movw	r2, #279	; 0x117
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800520e:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <MX_LTDC_Init+0x164>)
 8005210:	f240 1247 	movw	r2, #327	; 0x147
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005216:	4b3b      	ldr	r3, [pc, #236]	; (8005304 <MX_LTDC_Init+0x164>)
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800521e:	4b39      	ldr	r3, [pc, #228]	; (8005304 <MX_LTDC_Init+0x164>)
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005226:	4b37      	ldr	r3, [pc, #220]	; (8005304 <MX_LTDC_Init+0x164>)
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800522e:	4835      	ldr	r0, [pc, #212]	; (8005304 <MX_LTDC_Init+0x164>)
 8005230:	f7fd f92c 	bl	800248c <HAL_LTDC_Init>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800523a:	f000 f9ed 	bl	8005618 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8005242:	23f0      	movs	r3, #240	; 0xf0
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800524a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800524e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005250:	2300      	movs	r3, #0
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8005254:	23ff      	movs	r3, #255	; 0xff
 8005256:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800525c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005260:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005262:	2307      	movs	r3, #7
 8005264:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 800526a:	23f0      	movs	r3, #240	; 0xf0
 800526c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 800526e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005272:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005286:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800528a:	2200      	movs	r2, #0
 800528c:	4619      	mov	r1, r3
 800528e:	481d      	ldr	r0, [pc, #116]	; (8005304 <MX_LTDC_Init+0x164>)
 8005290:	f7fd fa88 	bl	80027a4 <HAL_LTDC_ConfigLayer>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 800529a:	f000 f9bd 	bl	8005618 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 80052a2:	23f0      	movs	r3, #240	; 0xf0
 80052a4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 80052aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80052ae:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 80052b0:	2303      	movs	r3, #3
 80052b2:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80052bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80052c2:	2305      	movs	r3, #5
 80052c4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 80052ca:	23f0      	movs	r3, #240	; 0xf0
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 80052ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80052e6:	463b      	mov	r3, r7
 80052e8:	2201      	movs	r2, #1
 80052ea:	4619      	mov	r1, r3
 80052ec:	4805      	ldr	r0, [pc, #20]	; (8005304 <MX_LTDC_Init+0x164>)
 80052ee:	f7fd fa59 	bl	80027a4 <HAL_LTDC_ConfigLayer>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 80052f8:	f000 f98e 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80052fc:	bf00      	nop
 80052fe:	3768      	adds	r7, #104	; 0x68
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2001f998 	.word	0x2001f998
 8005308:	40016800 	.word	0x40016800

0800530c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <MX_SPI5_Init+0x64>)
 8005312:	4a18      	ldr	r2, [pc, #96]	; (8005374 <MX_SPI5_Init+0x68>)
 8005314:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005316:	4b16      	ldr	r3, [pc, #88]	; (8005370 <MX_SPI5_Init+0x64>)
 8005318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800531c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <MX_SPI5_Init+0x64>)
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <MX_SPI5_Init+0x64>)
 8005326:	2200      	movs	r2, #0
 8005328:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <MX_SPI5_Init+0x64>)
 800532c:	2200      	movs	r2, #0
 800532e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <MX_SPI5_Init+0x64>)
 8005332:	2200      	movs	r2, #0
 8005334:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005336:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <MX_SPI5_Init+0x64>)
 8005338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800533e:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <MX_SPI5_Init+0x64>)
 8005340:	2218      	movs	r2, #24
 8005342:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <MX_SPI5_Init+0x64>)
 8005346:	2200      	movs	r2, #0
 8005348:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <MX_SPI5_Init+0x64>)
 800534c:	2200      	movs	r2, #0
 800534e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <MX_SPI5_Init+0x64>)
 8005352:	2200      	movs	r2, #0
 8005354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <MX_SPI5_Init+0x64>)
 8005358:	220a      	movs	r2, #10
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800535c:	4804      	ldr	r0, [pc, #16]	; (8005370 <MX_SPI5_Init+0x64>)
 800535e:	f7fe fb52 	bl	8003a06 <HAL_SPI_Init>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005368:	f000 f956 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800536c:	bf00      	nop
 800536e:	bd80      	pop	{r7, pc}
 8005370:	2001fb58 	.word	0x2001fb58
 8005374:	40015000 	.word	0x40015000

08005378 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800537e:	463b      	mov	r3, r7
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <MX_TIM6_Init+0x5c>)
 8005388:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <MX_TIM6_Init+0x60>)
 800538a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <MX_TIM6_Init+0x5c>)
 800538e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005392:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <MX_TIM6_Init+0x5c>)
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 800539a:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <MX_TIM6_Init+0x5c>)
 800539c:	22c8      	movs	r2, #200	; 0xc8
 800539e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80053a0:	480c      	ldr	r0, [pc, #48]	; (80053d4 <MX_TIM6_Init+0x5c>)
 80053a2:	f7fe fd55 	bl	8003e50 <HAL_TIM_Base_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80053ac:	f000 f934 	bl	8005618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80053b0:	2310      	movs	r3, #16
 80053b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80053b8:	463b      	mov	r3, r7
 80053ba:	4619      	mov	r1, r3
 80053bc:	4805      	ldr	r0, [pc, #20]	; (80053d4 <MX_TIM6_Init+0x5c>)
 80053be:	f7fe ff57 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 80053c8:	f000 f926 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	2001fbb0 	.word	0x2001fbb0
 80053d8:	40001000 	.word	0x40001000

080053dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <MX_DMA_Init+0x4c>)
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <MX_DMA_Init+0x4c>)
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <MX_DMA_Init+0x4c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80053fe:	2200      	movs	r2, #0
 8005400:	2100      	movs	r1, #0
 8005402:	200d      	movs	r0, #13
 8005404:	f7fb f9e3 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005408:	200d      	movs	r0, #13
 800540a:	f7fb f9fc 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800540e:	2200      	movs	r2, #0
 8005410:	2100      	movs	r1, #0
 8005412:	200f      	movs	r0, #15
 8005414:	f7fb f9db 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005418:	200f      	movs	r0, #15
 800541a:	f7fb f9f4 	bl	8000806 <HAL_NVIC_EnableIRQ>

}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800

0800542c <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <MX_FMC_Init+0x88>)
 8005434:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <MX_FMC_Init+0x8c>)
 8005436:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8005438:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <MX_FMC_Init+0x88>)
 800543a:	2201      	movs	r2, #1
 800543c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <MX_FMC_Init+0x88>)
 8005440:	2200      	movs	r2, #0
 8005442:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <MX_FMC_Init+0x88>)
 8005446:	2204      	movs	r2, #4
 8005448:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <MX_FMC_Init+0x88>)
 800544c:	2210      	movs	r2, #16
 800544e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005450:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <MX_FMC_Init+0x88>)
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005456:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <MX_FMC_Init+0x88>)
 8005458:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800545c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800545e:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <MX_FMC_Init+0x88>)
 8005460:	2200      	movs	r2, #0
 8005462:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <MX_FMC_Init+0x88>)
 8005466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <MX_FMC_Init+0x88>)
 800546e:	2200      	movs	r2, #0
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <MX_FMC_Init+0x88>)
 8005474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005478:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800547a:	2302      	movs	r3, #2
 800547c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800547e:	2307      	movs	r3, #7
 8005480:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8005482:	2304      	movs	r3, #4
 8005484:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8005486:	2307      	movs	r3, #7
 8005488:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800548a:	2303      	movs	r3, #3
 800548c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800548e:	2302      	movs	r3, #2
 8005490:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8005492:	2302      	movs	r3, #2
 8005494:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4806      	ldr	r0, [pc, #24]	; (80054b4 <MX_FMC_Init+0x88>)
 800549c:	f7fe fa34 	bl	8003908 <HAL_SDRAM_Init>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 80054a6:	f000 f8b7 	bl	8005618 <Error_Handler>
  }

}
 80054aa:	bf00      	nop
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	2001fc2c 	.word	0x2001fc2c
 80054b8:	a0000140 	.word	0xa0000140

080054bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	; 0x30
 80054c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c2:	f107 031c 	add.w	r3, r7, #28
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	609a      	str	r2, [r3, #8]
 80054ce:	60da      	str	r2, [r3, #12]
 80054d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	4a4c      	ldr	r2, [pc, #304]	; (8005608 <MX_GPIO_Init+0x14c>)
 80054d8:	4b4b      	ldr	r3, [pc, #300]	; (8005608 <MX_GPIO_Init+0x14c>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f043 0320 	orr.w	r3, r3, #32
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b49      	ldr	r3, [pc, #292]	; (8005608 <MX_GPIO_Init+0x14c>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	4a45      	ldr	r2, [pc, #276]	; (8005608 <MX_GPIO_Init+0x14c>)
 80054f4:	4b44      	ldr	r3, [pc, #272]	; (8005608 <MX_GPIO_Init+0x14c>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	6313      	str	r3, [r2, #48]	; 0x30
 80054fe:	4b42      	ldr	r3, [pc, #264]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	4a3e      	ldr	r2, [pc, #248]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6313      	str	r3, [r2, #48]	; 0x30
 800551a:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <MX_GPIO_Init+0x14c>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4a37      	ldr	r2, [pc, #220]	; (8005608 <MX_GPIO_Init+0x14c>)
 800552c:	4b36      	ldr	r3, [pc, #216]	; (8005608 <MX_GPIO_Init+0x14c>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
 8005536:	4b34      	ldr	r3, [pc, #208]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	4a30      	ldr	r2, [pc, #192]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005548:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <MX_GPIO_Init+0x14c>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005550:	6313      	str	r3, [r2, #48]	; 0x30
 8005552:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	4a29      	ldr	r2, [pc, #164]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005564:	4b28      	ldr	r3, [pc, #160]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	f043 0310 	orr.w	r3, r3, #16
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4a22      	ldr	r2, [pc, #136]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005580:	4b21      	ldr	r3, [pc, #132]	; (8005608 <MX_GPIO_Init+0x14c>)
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	6313      	str	r3, [r2, #48]	; 0x30
 800558a:	4b1f      	ldr	r3, [pc, #124]	; (8005608 <MX_GPIO_Init+0x14c>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8005596:	2201      	movs	r2, #1
 8005598:	2104      	movs	r1, #4
 800559a:	481c      	ldr	r0, [pc, #112]	; (800560c <MX_GPIO_Init+0x150>)
 800559c:	f7fb ffcc 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80055a0:	2200      	movs	r2, #0
 80055a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055a6:	481a      	ldr	r0, [pc, #104]	; (8005610 <MX_GPIO_Init+0x154>)
 80055a8:	f7fb ffc6 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 80055ac:	2304      	movs	r3, #4
 80055ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b0:	2301      	movs	r3, #1
 80055b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055b8:	2302      	movs	r3, #2
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 80055bc:	f107 031c 	add.w	r3, r7, #28
 80055c0:	4619      	mov	r1, r3
 80055c2:	4812      	ldr	r0, [pc, #72]	; (800560c <MX_GPIO_Init+0x150>)
 80055c4:	f7fb fe0e 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 80055c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ce:	2301      	movs	r3, #1
 80055d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055d6:	2302      	movs	r3, #2
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 80055da:	f107 031c 	add.w	r3, r7, #28
 80055de:	4619      	mov	r1, r3
 80055e0:	480b      	ldr	r0, [pc, #44]	; (8005610 <MX_GPIO_Init+0x154>)
 80055e2:	f7fb fdff 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80055e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ec:	2300      	movs	r3, #0
 80055ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80055f4:	f107 031c 	add.w	r3, r7, #28
 80055f8:	4619      	mov	r1, r3
 80055fa:	4806      	ldr	r0, [pc, #24]	; (8005614 <MX_GPIO_Init+0x158>)
 80055fc:	f7fb fdf2 	bl	80011e4 <HAL_GPIO_Init>

}
 8005600:	bf00      	nop
 8005602:	3730      	adds	r7, #48	; 0x30
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	40020800 	.word	0x40020800
 8005610:	40020c00 	.word	0x40020c00
 8005614:	40020000 	.word	0x40020000

08005618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8005634:	4b2f      	ldr	r3, [pc, #188]	; (80056f4 <SDRAM_init+0xcc>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <SDRAM_init+0xcc>)
 800563c:	2208      	movs	r2, #8
 800563e:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8005640:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <SDRAM_init+0xcc>)
 8005642:	2201      	movs	r2, #1
 8005644:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <SDRAM_init+0xcc>)
 8005648:	2200      	movs	r2, #0
 800564a:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800564c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005650:	4928      	ldr	r1, [pc, #160]	; (80056f4 <SDRAM_init+0xcc>)
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fe f98c 	bl	8003970 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8005658:	200a      	movs	r0, #10
 800565a:	f7fa ffc1 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 800565e:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <SDRAM_init+0xcc>)
 8005660:	2202      	movs	r2, #2
 8005662:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <SDRAM_init+0xcc>)
 8005666:	2208      	movs	r2, #8
 8005668:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <SDRAM_init+0xcc>)
 800566c:	2201      	movs	r2, #1
 800566e:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <SDRAM_init+0xcc>)
 8005672:	2200      	movs	r2, #0
 8005674:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800567a:	491e      	ldr	r1, [pc, #120]	; (80056f4 <SDRAM_init+0xcc>)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fe f977 	bl	8003970 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8005682:	200a      	movs	r0, #10
 8005684:	f7fa ffac 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005688:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <SDRAM_init+0xcc>)
 800568a:	2203      	movs	r2, #3
 800568c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800568e:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <SDRAM_init+0xcc>)
 8005690:	2208      	movs	r2, #8
 8005692:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8005694:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <SDRAM_init+0xcc>)
 8005696:	2204      	movs	r2, #4
 8005698:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800569a:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <SDRAM_init+0xcc>)
 800569c:	2200      	movs	r2, #0
 800569e:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80056a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056a4:	4913      	ldr	r1, [pc, #76]	; (80056f4 <SDRAM_init+0xcc>)
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fe f962 	bl	8003970 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80056ac:	200a      	movs	r0, #10
 80056ae:	f7fa ff97 	bl	80005e0 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 80056b2:	f240 2331 	movw	r3, #561	; 0x231
 80056b6:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <SDRAM_init+0xcc>)
 80056ba:	2204      	movs	r2, #4
 80056bc:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <SDRAM_init+0xcc>)
 80056c0:	2208      	movs	r2, #8
 80056c2:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <SDRAM_init+0xcc>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <SDRAM_init+0xcc>)
 80056ce:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80056d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056d4:	4907      	ldr	r1, [pc, #28]	; (80056f4 <SDRAM_init+0xcc>)
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fe f94a 	bl	8003970 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80056dc:	200a      	movs	r0, #10
 80056de:	f7fa ff7f 	bl	80005e0 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 80056e2:	f240 516a 	movw	r1, #1386	; 0x56a
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fe f96d 	bl	80039c6 <HAL_SDRAM_ProgramRefreshRate>
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	2001fc60 	.word	0x2001fc60

080056f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <HAL_MspInit+0x4c>)
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <HAL_MspInit+0x4c>)
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800570c:	6453      	str	r3, [r2, #68]	; 0x44
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <HAL_MspInit+0x4c>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4a09      	ldr	r2, [pc, #36]	; (8005744 <HAL_MspInit+0x4c>)
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_MspInit+0x4c>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_MspInit+0x4c>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800

08005748 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0e      	ldr	r2, [pc, #56]	; (8005790 <HAL_DMA2D_MspInit+0x48>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d115      	bne.n	8005786 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <HAL_DMA2D_MspInit+0x4c>)
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <HAL_DMA2D_MspInit+0x4c>)
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005768:	6313      	str	r3, [r2, #48]	; 0x30
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_DMA2D_MspInit+0x4c>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005776:	2200      	movs	r2, #0
 8005778:	2100      	movs	r1, #0
 800577a:	205a      	movs	r0, #90	; 0x5a
 800577c:	f7fb f827 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005780:	205a      	movs	r0, #90	; 0x5a
 8005782:	f7fb f840 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	4002b000 	.word	0x4002b000
 8005794:	40023800 	.word	0x40023800

08005798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a57      	ldr	r2, [pc, #348]	; (8005914 <HAL_I2C_MspInit+0x17c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f040 80a8 	bne.w	800590c <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	4a55      	ldr	r2, [pc, #340]	; (8005918 <HAL_I2C_MspInit+0x180>)
 80057c2:	4b55      	ldr	r3, [pc, #340]	; (8005918 <HAL_I2C_MspInit+0x180>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f043 0304 	orr.w	r3, r3, #4
 80057ca:	6313      	str	r3, [r2, #48]	; 0x30
 80057cc:	4b52      	ldr	r3, [pc, #328]	; (8005918 <HAL_I2C_MspInit+0x180>)
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	4a4e      	ldr	r2, [pc, #312]	; (8005918 <HAL_I2C_MspInit+0x180>)
 80057de:	4b4e      	ldr	r3, [pc, #312]	; (8005918 <HAL_I2C_MspInit+0x180>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6313      	str	r3, [r2, #48]	; 0x30
 80057e8:	4b4b      	ldr	r3, [pc, #300]	; (8005918 <HAL_I2C_MspInit+0x180>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057fa:	2312      	movs	r3, #18
 80057fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005802:	2303      	movs	r3, #3
 8005804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005806:	2304      	movs	r3, #4
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800580a:	f107 0314 	add.w	r3, r7, #20
 800580e:	4619      	mov	r1, r3
 8005810:	4842      	ldr	r0, [pc, #264]	; (800591c <HAL_I2C_MspInit+0x184>)
 8005812:	f7fb fce7 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800581a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800581c:	2312      	movs	r3, #18
 800581e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005820:	2301      	movs	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005824:	2303      	movs	r3, #3
 8005826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005828:	2304      	movs	r3, #4
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	4619      	mov	r1, r3
 8005832:	483b      	ldr	r0, [pc, #236]	; (8005920 <HAL_I2C_MspInit+0x188>)
 8005834:	f7fb fcd6 	bl	80011e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	4a36      	ldr	r2, [pc, #216]	; (8005918 <HAL_I2C_MspInit+0x180>)
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_I2C_MspInit+0x180>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005846:	6413      	str	r3, [r2, #64]	; 0x40
 8005848:	4b33      	ldr	r3, [pc, #204]	; (8005918 <HAL_I2C_MspInit+0x180>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8005854:	4b33      	ldr	r3, [pc, #204]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005856:	4a34      	ldr	r2, [pc, #208]	; (8005928 <HAL_I2C_MspInit+0x190>)
 8005858:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 800585a:	4b32      	ldr	r3, [pc, #200]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 800585c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005860:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005862:	4b30      	ldr	r3, [pc, #192]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005864:	2200      	movs	r2, #0
 8005866:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005868:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 800586a:	2200      	movs	r2, #0
 800586c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005874:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005876:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005878:	2200      	movs	r2, #0
 800587a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800587c:	4b29      	ldr	r3, [pc, #164]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 800587e:	2200      	movs	r2, #0
 8005880:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005884:	2200      	movs	r2, #0
 8005886:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005888:	4b26      	ldr	r3, [pc, #152]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 800588a:	2200      	movs	r2, #0
 800588c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005890:	2200      	movs	r2, #0
 8005892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8005894:	4823      	ldr	r0, [pc, #140]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 8005896:	f7fa ffd1 	bl	800083c <HAL_DMA_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80058a0:	f7ff feba 	bl	8005618 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <HAL_I2C_MspInit+0x18c>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80058b0:	4b1e      	ldr	r3, [pc, #120]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058b2:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <HAL_I2C_MspInit+0x198>)
 80058b4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80058bc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058be:	4b1b      	ldr	r3, [pc, #108]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058c0:	2240      	movs	r2, #64	; 0x40
 80058c2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058ca:	4b18      	ldr	r3, [pc, #96]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058d0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058d2:	4b16      	ldr	r3, [pc, #88]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058d8:	4b14      	ldr	r3, [pc, #80]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058da:	2200      	movs	r2, #0
 80058dc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80058f0:	480e      	ldr	r0, [pc, #56]	; (800592c <HAL_I2C_MspInit+0x194>)
 80058f2:	f7fa ffa3 	bl	800083c <HAL_DMA_Init>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80058fc:	f7ff fe8c 	bl	8005618 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <HAL_I2C_MspInit+0x194>)
 8005904:	635a      	str	r2, [r3, #52]	; 0x34
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_I2C_MspInit+0x194>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800590c:	bf00      	nop
 800590e:	3728      	adds	r7, #40	; 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40005c00 	.word	0x40005c00
 8005918:	40023800 	.word	0x40023800
 800591c:	40020800 	.word	0x40020800
 8005920:	40020000 	.word	0x40020000
 8005924:	2001faf8 	.word	0x2001faf8
 8005928:	40026040 	.word	0x40026040
 800592c:	2001fa44 	.word	0x2001fa44
 8005930:	40026070 	.word	0x40026070

08005934 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800593c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a7b      	ldr	r2, [pc, #492]	; (8005b40 <HAL_LTDC_MspInit+0x20c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f040 80f0 	bne.w	8005b38 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005958:	2300      	movs	r3, #0
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	4a79      	ldr	r2, [pc, #484]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 800595e:	4b79      	ldr	r3, [pc, #484]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005966:	6453      	str	r3, [r2, #68]	; 0x44
 8005968:	4b76      	ldr	r3, [pc, #472]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	4a72      	ldr	r2, [pc, #456]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 800597a:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f043 0320 	orr.w	r3, r3, #32
 8005982:	6313      	str	r3, [r2, #48]	; 0x30
 8005984:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	4a6b      	ldr	r2, [pc, #428]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005996:	4b6b      	ldr	r3, [pc, #428]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6313      	str	r3, [r2, #48]	; 0x30
 80059a0:	4b68      	ldr	r3, [pc, #416]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	4a64      	ldr	r2, [pc, #400]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059b2:	4b64      	ldr	r3, [pc, #400]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	f043 0302 	orr.w	r3, r3, #2
 80059ba:	6313      	str	r3, [r2, #48]	; 0x30
 80059bc:	4b61      	ldr	r3, [pc, #388]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80059c8:	2300      	movs	r3, #0
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	4a5d      	ldr	r2, [pc, #372]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059ce:	4b5d      	ldr	r3, [pc, #372]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d6:	6313      	str	r3, [r2, #48]	; 0x30
 80059d8:	4b5a      	ldr	r3, [pc, #360]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	4a56      	ldr	r2, [pc, #344]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059ea:	4b56      	ldr	r3, [pc, #344]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f043 0304 	orr.w	r3, r3, #4
 80059f2:	6313      	str	r3, [r2, #48]	; 0x30
 80059f4:	4b53      	ldr	r3, [pc, #332]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a00:	2300      	movs	r3, #0
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	4a4f      	ldr	r2, [pc, #316]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005a06:	4b4f      	ldr	r3, [pc, #316]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	f043 0308 	orr.w	r3, r3, #8
 8005a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8005a10:	4b4c      	ldr	r3, [pc, #304]	; (8005b44 <HAL_LTDC_MspInit+0x210>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a22:	2302      	movs	r3, #2
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a2e:	230e      	movs	r3, #14
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a36:	4619      	mov	r1, r3
 8005a38:	4843      	ldr	r0, [pc, #268]	; (8005b48 <HAL_LTDC_MspInit+0x214>)
 8005a3a:	f7fb fbd3 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8005a3e:	f641 0358 	movw	r3, #6232	; 0x1858
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a50:	230e      	movs	r3, #14
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a58:	4619      	mov	r1, r3
 8005a5a:	483c      	ldr	r0, [pc, #240]	; (8005b4c <HAL_LTDC_MspInit+0x218>)
 8005a5c:	f7fb fbc2 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a60:	2303      	movs	r3, #3
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a64:	2302      	movs	r3, #2
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005a70:	2309      	movs	r3, #9
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4835      	ldr	r0, [pc, #212]	; (8005b50 <HAL_LTDC_MspInit+0x21c>)
 8005a7c:	f7fb fbb2 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005a80:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	2302      	movs	r3, #2
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a92:	230e      	movs	r3, #14
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	482c      	ldr	r0, [pc, #176]	; (8005b50 <HAL_LTDC_MspInit+0x21c>)
 8005a9e:	f7fb fba1 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8005aa2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ab4:	230e      	movs	r3, #14
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005abc:	4619      	mov	r1, r3
 8005abe:	4825      	ldr	r0, [pc, #148]	; (8005b54 <HAL_LTDC_MspInit+0x220>)
 8005ac0:	f7fb fb90 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005ac4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aca:	2302      	movs	r3, #2
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ad6:	230e      	movs	r3, #14
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ade:	4619      	mov	r1, r3
 8005ae0:	481d      	ldr	r0, [pc, #116]	; (8005b58 <HAL_LTDC_MspInit+0x224>)
 8005ae2:	f7fb fb7f 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005ae6:	2348      	movs	r3, #72	; 0x48
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aea:	2302      	movs	r3, #2
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005af2:	2302      	movs	r3, #2
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005af6:	230e      	movs	r3, #14
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afe:	4619      	mov	r1, r3
 8005b00:	4816      	ldr	r0, [pc, #88]	; (8005b5c <HAL_LTDC_MspInit+0x228>)
 8005b02:	f7fb fb6f 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8005b06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b14:	2302      	movs	r3, #2
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005b18:	2309      	movs	r3, #9
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b20:	4619      	mov	r1, r3
 8005b22:	480c      	ldr	r0, [pc, #48]	; (8005b54 <HAL_LTDC_MspInit+0x220>)
 8005b24:	f7fb fb5e 	bl	80011e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	2058      	movs	r0, #88	; 0x58
 8005b2e:	f7fa fe4e 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005b32:	2058      	movs	r0, #88	; 0x58
 8005b34:	f7fa fe67 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005b38:	bf00      	nop
 8005b3a:	3738      	adds	r7, #56	; 0x38
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40016800 	.word	0x40016800
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40021400 	.word	0x40021400
 8005b4c:	40020000 	.word	0x40020000
 8005b50:	40020400 	.word	0x40020400
 8005b54:	40021800 	.word	0x40021800
 8005b58:	40020800 	.word	0x40020800
 8005b5c:	40020c00 	.word	0x40020c00

08005b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b68:	f107 0314 	add.w	r3, r7, #20
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	609a      	str	r2, [r3, #8]
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <HAL_SPI_MspInit+0x84>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d12c      	bne.n	8005bdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <HAL_SPI_MspInit+0x88>)
 8005b88:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <HAL_SPI_MspInit+0x88>)
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b90:	6453      	str	r3, [r2, #68]	; 0x44
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <HAL_SPI_MspInit+0x88>)
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <HAL_SPI_MspInit+0x88>)
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <HAL_SPI_MspInit+0x88>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f043 0320 	orr.w	r3, r3, #32
 8005bac:	6313      	str	r3, [r2, #48]	; 0x30
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <HAL_SPI_MspInit+0x88>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005bba:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005bcc:	2305      	movs	r3, #5
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005bd0:	f107 0314 	add.w	r3, r7, #20
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4805      	ldr	r0, [pc, #20]	; (8005bec <HAL_SPI_MspInit+0x8c>)
 8005bd8:	f7fb fb04 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8005bdc:	bf00      	nop
 8005bde:	3728      	adds	r7, #40	; 0x28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40015000 	.word	0x40015000
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40021400 	.word	0x40021400

08005bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <HAL_TIM_Base_MspInit+0x48>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d115      	bne.n	8005c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <HAL_TIM_Base_MspInit+0x4c>)
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <HAL_TIM_Base_MspInit+0x4c>)
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	f043 0310 	orr.w	r3, r3, #16
 8005c10:	6413      	str	r3, [r2, #64]	; 0x40
 8005c12:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <HAL_TIM_Base_MspInit+0x4c>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2105      	movs	r1, #5
 8005c22:	2036      	movs	r0, #54	; 0x36
 8005c24:	f7fa fdd3 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c28:	2036      	movs	r0, #54	; 0x36
 8005c2a:	f7fa fdec 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40001000 	.word	0x40001000
 8005c3c:	40023800 	.word	0x40023800

08005c40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8005c46:	4b3c      	ldr	r3, [pc, #240]	; (8005d38 <HAL_FMC_MspInit+0xf8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d16f      	bne.n	8005d2e <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8005c4e:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <HAL_FMC_MspInit+0xf8>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c54:	2300      	movs	r3, #0
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4a38      	ldr	r2, [pc, #224]	; (8005d3c <HAL_FMC_MspInit+0xfc>)
 8005c5a:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <HAL_FMC_MspInit+0xfc>)
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	6393      	str	r3, [r2, #56]	; 0x38
 8005c64:	4b35      	ldr	r3, [pc, #212]	; (8005d3c <HAL_FMC_MspInit+0xfc>)
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005c70:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005c74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c76:	2302      	movs	r3, #2
 8005c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c82:	230c      	movs	r3, #12
 8005c84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	482d      	ldr	r0, [pc, #180]	; (8005d40 <HAL_FMC_MspInit+0x100>)
 8005c8c:	f7fb faaa 	bl	80011e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005c90:	2301      	movs	r3, #1
 8005c92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	2302      	movs	r3, #2
 8005c96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4826      	ldr	r0, [pc, #152]	; (8005d44 <HAL_FMC_MspInit+0x104>)
 8005caa:	f7fb fa9b 	bl	80011e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8005cae:	f248 1333 	movw	r3, #33075	; 0x8133
 8005cb2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	481f      	ldr	r0, [pc, #124]	; (8005d48 <HAL_FMC_MspInit+0x108>)
 8005cca:	f7fb fa8b 	bl	80011e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005cce:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005cd2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4818      	ldr	r0, [pc, #96]	; (8005d4c <HAL_FMC_MspInit+0x10c>)
 8005cea:	f7fb fa7b 	bl	80011e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8005cee:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005cf2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005d00:	230c      	movs	r3, #12
 8005d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4811      	ldr	r0, [pc, #68]	; (8005d50 <HAL_FMC_MspInit+0x110>)
 8005d0a:	f7fb fa6b 	bl	80011e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005d0e:	2360      	movs	r3, #96	; 0x60
 8005d10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d12:	2302      	movs	r3, #2
 8005d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005d1e:	230c      	movs	r3, #12
 8005d20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	480b      	ldr	r0, [pc, #44]	; (8005d54 <HAL_FMC_MspInit+0x114>)
 8005d28:	f7fb fa5c 	bl	80011e4 <HAL_GPIO_Init>
 8005d2c:	e000      	b.n	8005d30 <HAL_FMC_MspInit+0xf0>
    return;
 8005d2e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	2001f840 	.word	0x2001f840
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40021400 	.word	0x40021400
 8005d44:	40020800 	.word	0x40020800
 8005d48:	40021800 	.word	0x40021800
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40020c00 	.word	0x40020c00
 8005d54:	40020400 	.word	0x40020400

08005d58 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005d60:	f7ff ff6e 	bl	8005c40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d7e:	e7fe      	b.n	8005d7e <HardFault_Handler+0x4>

08005d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d84:	e7fe      	b.n	8005d84 <MemManage_Handler+0x4>

08005d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d86:	b480      	push	{r7}
 8005d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d8a:	e7fe      	b.n	8005d8a <BusFault_Handler+0x4>

08005d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d90:	e7fe      	b.n	8005d90 <UsageFault_Handler+0x4>

08005d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d96:	bf00      	nop
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005db2:	bf00      	nop
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dc0:	f7fa fbee 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <SysTick_Handler+0x18>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a02      	ldr	r2, [pc, #8]	; (8005dd4 <SysTick_Handler+0x18>)
 8005dcc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	2001f960 	.word	0x2001f960

08005dd8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8005ddc:	4802      	ldr	r0, [pc, #8]	; (8005de8 <DMA1_Stream2_IRQHandler+0x10>)
 8005dde:	f7fa fddb 	bl	8000998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2001faf8 	.word	0x2001faf8

08005dec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8005df0:	4802      	ldr	r0, [pc, #8]	; (8005dfc <DMA1_Stream4_IRQHandler+0x10>)
 8005df2:	f7fa fdd1 	bl	8000998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2001fa44 	.word	0x2001fa44

08005e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e04:	4802      	ldr	r0, [pc, #8]	; (8005e10 <TIM6_DAC_IRQHandler+0x10>)
 8005e06:	f7fe f84e 	bl	8003ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2001fbb0 	.word	0x2001fbb0

08005e14 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <LTDC_IRQHandler+0x10>)
 8005e1a:	f7fc fc0b 	bl	8002634 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2001f998 	.word	0x2001f998

08005e28 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <DMA2D_IRQHandler+0x10>)
 8005e2e:	f7fb f836 	bl	8000e9e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2001fbec 	.word	0x2001fbec

08005e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e40:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <SystemInit+0x60>)
 8005e42:	4b16      	ldr	r3, [pc, #88]	; (8005e9c <SystemInit+0x60>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005e50:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <SystemInit+0x64>)
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <SystemInit+0x64>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e5c:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <SystemInit+0x64>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005e62:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <SystemInit+0x64>)
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <SystemInit+0x64>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005e72:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <SystemInit+0x64>)
 8005e74:	4a0b      	ldr	r2, [pc, #44]	; (8005ea4 <SystemInit+0x68>)
 8005e76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <SystemInit+0x64>)
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <SystemInit+0x64>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <SystemInit+0x64>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e8a:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <SystemInit+0x60>)
 8005e8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e90:	609a      	str	r2, [r3, #8]
#endif
}
 8005e92:	bf00      	nop
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	e000ed00 	.word	0xe000ed00
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	24003010 	.word	0x24003010

08005ea8 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 8005eae:	2300      	movs	r3, #0
 8005eb0:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005eba:	1d3a      	adds	r2, r7, #4
 8005ebc:	2364      	movs	r3, #100	; 0x64
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	2182      	movs	r1, #130	; 0x82
 8005ec4:	480b      	ldr	r0, [pc, #44]	; (8005ef4 <touchReset+0x4c>)
 8005ec6:	f7fb fc31 	bl	800172c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8005eca:	2014      	movs	r0, #20
 8005ecc:	f7fa fb88 	bl	80005e0 <HAL_Delay>
	sendBuf[1] = 0x00;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005ed4:	1d3a      	adds	r2, r7, #4
 8005ed6:	2364      	movs	r3, #100	; 0x64
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2302      	movs	r3, #2
 8005edc:	2182      	movs	r1, #130	; 0x82
 8005ede:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <touchReset+0x4c>)
 8005ee0:	f7fb fc24 	bl	800172c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8005ee4:	2014      	movs	r0, #20
 8005ee6:	f7fa fb7b 	bl	80005e0 <HAL_Delay>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	2001faa4 	.word	0x2001faa4

08005ef8 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	4603      	mov	r3, r0
 8005f00:	460a      	mov	r2, r1
 8005f02:	71fb      	strb	r3, [r7, #7]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8005f10:	2304      	movs	r3, #4
 8005f12:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005f14:	f107 020c 	add.w	r2, r7, #12
 8005f18:	2364      	movs	r3, #100	; 0x64
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	2182      	movs	r1, #130	; 0x82
 8005f20:	4817      	ldr	r0, [pc, #92]	; (8005f80 <fnctCmd+0x88>)
 8005f22:	f7fb fc03 	bl	800172c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005f26:	f107 020c 	add.w	r2, r7, #12
 8005f2a:	2364      	movs	r3, #100	; 0x64
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	2301      	movs	r3, #1
 8005f30:	2182      	movs	r1, #130	; 0x82
 8005f32:	4813      	ldr	r0, [pc, #76]	; (8005f80 <fnctCmd+0x88>)
 8005f34:	f7fb fd08 	bl	8001948 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8005f38:	7b3b      	ldrb	r3, [r7, #12]
 8005f3a:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8005f3c:	79bb      	ldrb	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	43db      	mvns	r3, r3
 8005f48:	b25a      	sxtb	r2, r3
 8005f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e003      	b.n	8005f5e <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8005f5e:	2304      	movs	r3, #4
 8005f60:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005f66:	f107 020c 	add.w	r2, r7, #12
 8005f6a:	2364      	movs	r3, #100	; 0x64
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2302      	movs	r3, #2
 8005f70:	2182      	movs	r1, #130	; 0x82
 8005f72:	4803      	ldr	r0, [pc, #12]	; (8005f80 <fnctCmd+0x88>)
 8005f74:	f7fb fbda 	bl	800172c <HAL_I2C_Master_Transmit>
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	2001faa4 	.word	0x2001faa4

08005f84 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	460a      	mov	r2, r1
 8005f8e:	71fb      	strb	r3, [r7, #7]
 8005f90:	4613      	mov	r3, r2
 8005f92:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8005f98:	2300      	movs	r3, #0
 8005f9a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 8005f9c:	2317      	movs	r3, #23
 8005f9e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005fa0:	f107 020c 	add.w	r2, r7, #12
 8005fa4:	2364      	movs	r3, #100	; 0x64
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	2301      	movs	r3, #1
 8005faa:	2182      	movs	r1, #130	; 0x82
 8005fac:	4817      	ldr	r0, [pc, #92]	; (800600c <ioAFConfig+0x88>)
 8005fae:	f7fb fbbd 	bl	800172c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005fb2:	f107 020c 	add.w	r2, r7, #12
 8005fb6:	2364      	movs	r3, #100	; 0x64
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	2301      	movs	r3, #1
 8005fbc:	2182      	movs	r1, #130	; 0x82
 8005fbe:	4813      	ldr	r0, [pc, #76]	; (800600c <ioAFConfig+0x88>)
 8005fc0:	f7fb fcc2 	bl	8001948 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8005fc4:	7b3b      	ldrb	r3, [r7, #12]
 8005fc6:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8005fc8:	79bb      	ldrb	r3, [r7, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 8005fce:	7bfa      	ldrb	r2, [r7, #15]
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	73fb      	strb	r3, [r7, #15]
 8005fd6:	e008      	b.n	8005fea <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8005fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	b25a      	sxtb	r2, r3
 8005fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	b25b      	sxtb	r3, r3
 8005fe8:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 8005fea:	2317      	movs	r3, #23
 8005fec:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005ff2:	f107 020c 	add.w	r2, r7, #12
 8005ff6:	2364      	movs	r3, #100	; 0x64
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	2182      	movs	r1, #130	; 0x82
 8005ffe:	4803      	ldr	r0, [pc, #12]	; (800600c <ioAFConfig+0x88>)
 8006000:	f7fb fb94 	bl	800172c <HAL_I2C_Master_Transmit>
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	2001faa4 	.word	0x2001faa4

08006010 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af02      	add	r7, sp, #8
	touchReset();
 8006016:	f7ff ff47 	bl	8005ea8 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 800601a:	2101      	movs	r1, #1
 800601c:	2001      	movs	r0, #1
 800601e:	f7ff ff6b 	bl	8005ef8 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8006022:	2101      	movs	r1, #1
 8006024:	2002      	movs	r0, #2
 8006026:	f7ff ff67 	bl	8005ef8 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <TP_Config+0x120>)
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006030:	1d3a      	adds	r2, r7, #4
 8006032:	2364      	movs	r3, #100	; 0x64
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2302      	movs	r3, #2
 8006038:	2182      	movs	r1, #130	; 0x82
 800603a:	483e      	ldr	r0, [pc, #248]	; (8006134 <TP_Config+0x124>)
 800603c:	f7fb fb76 	bl	800172c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8006040:	2014      	movs	r0, #20
 8006042:	f7fa facd 	bl	80005e0 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 8006046:	2321      	movs	r3, #33	; 0x21
 8006048:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800604a:	2301      	movs	r3, #1
 800604c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800604e:	1d3a      	adds	r2, r7, #4
 8006050:	2364      	movs	r3, #100	; 0x64
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2302      	movs	r3, #2
 8006056:	2182      	movs	r1, #130	; 0x82
 8006058:	4836      	ldr	r0, [pc, #216]	; (8006134 <TP_Config+0x124>)
 800605a:	f7fb fb67 	bl	800172c <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 800605e:	2100      	movs	r1, #0
 8006060:	201e      	movs	r0, #30
 8006062:	f7ff ff8f 	bl	8005f84 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8006066:	2341      	movs	r3, #65	; 0x41
 8006068:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 800606a:	239a      	movs	r3, #154	; 0x9a
 800606c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800606e:	1d3a      	adds	r2, r7, #4
 8006070:	2364      	movs	r3, #100	; 0x64
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	2302      	movs	r3, #2
 8006076:	2182      	movs	r1, #130	; 0x82
 8006078:	482e      	ldr	r0, [pc, #184]	; (8006134 <TP_Config+0x124>)
 800607a:	f7fb fb57 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 800607e:	234a      	movs	r3, #74	; 0x4a
 8006080:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8006082:	2301      	movs	r3, #1
 8006084:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006086:	1d3a      	adds	r2, r7, #4
 8006088:	2364      	movs	r3, #100	; 0x64
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2302      	movs	r3, #2
 800608e:	2182      	movs	r1, #130	; 0x82
 8006090:	4828      	ldr	r0, [pc, #160]	; (8006134 <TP_Config+0x124>)
 8006092:	f7fb fb4b 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8006096:	234b      	movs	r3, #75	; 0x4b
 8006098:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800609a:	2301      	movs	r3, #1
 800609c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800609e:	1d3a      	adds	r2, r7, #4
 80060a0:	2364      	movs	r3, #100	; 0x64
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2302      	movs	r3, #2
 80060a6:	2182      	movs	r1, #130	; 0x82
 80060a8:	4822      	ldr	r0, [pc, #136]	; (8006134 <TP_Config+0x124>)
 80060aa:	f7fb fb3f 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80060ae:	234b      	movs	r3, #75	; 0x4b
 80060b0:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 80060b2:	2300      	movs	r3, #0
 80060b4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80060b6:	1d3a      	adds	r2, r7, #4
 80060b8:	2364      	movs	r3, #100	; 0x64
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2302      	movs	r3, #2
 80060be:	2182      	movs	r1, #130	; 0x82
 80060c0:	481c      	ldr	r0, [pc, #112]	; (8006134 <TP_Config+0x124>)
 80060c2:	f7fb fb33 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 80060c6:	2356      	movs	r3, #86	; 0x56
 80060c8:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80060ca:	2301      	movs	r3, #1
 80060cc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80060ce:	1d3a      	adds	r2, r7, #4
 80060d0:	2364      	movs	r3, #100	; 0x64
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2302      	movs	r3, #2
 80060d6:	2182      	movs	r1, #130	; 0x82
 80060d8:	4816      	ldr	r0, [pc, #88]	; (8006134 <TP_Config+0x124>)
 80060da:	f7fb fb27 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 80060de:	2358      	movs	r3, #88	; 0x58
 80060e0:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80060e2:	2301      	movs	r3, #1
 80060e4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80060e6:	1d3a      	adds	r2, r7, #4
 80060e8:	2364      	movs	r3, #100	; 0x64
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2302      	movs	r3, #2
 80060ee:	2182      	movs	r1, #130	; 0x82
 80060f0:	4810      	ldr	r0, [pc, #64]	; (8006134 <TP_Config+0x124>)
 80060f2:	f7fb fb1b 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 80060f6:	2340      	movs	r3, #64	; 0x40
 80060f8:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 80060fa:	2303      	movs	r3, #3
 80060fc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80060fe:	1d3a      	adds	r2, r7, #4
 8006100:	2364      	movs	r3, #100	; 0x64
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2302      	movs	r3, #2
 8006106:	2182      	movs	r1, #130	; 0x82
 8006108:	480a      	ldr	r0, [pc, #40]	; (8006134 <TP_Config+0x124>)
 800610a:	f7fb fb0f 	bl	800172c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 800610e:	230b      	movs	r3, #11
 8006110:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8006112:	23ff      	movs	r3, #255	; 0xff
 8006114:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006116:	1d3a      	adds	r2, r7, #4
 8006118:	2364      	movs	r3, #100	; 0x64
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2302      	movs	r3, #2
 800611e:	2182      	movs	r1, #130	; 0x82
 8006120:	4804      	ldr	r0, [pc, #16]	; (8006134 <TP_Config+0x124>)
 8006122:	f7fb fb03 	bl	800172c <HAL_I2C_Master_Transmit>

}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	0800a958 	.word	0x0800a958
 8006134:	2001faa4 	.word	0x2001faa4

08006138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006170 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800613c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800613e:	e003      	b.n	8006148 <LoopCopyDataInit>

08006140 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006142:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006144:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006146:	3104      	adds	r1, #4

08006148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006148:	480b      	ldr	r0, [pc, #44]	; (8006178 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800614a:	4b0c      	ldr	r3, [pc, #48]	; (800617c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800614c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800614e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006150:	d3f6      	bcc.n	8006140 <CopyDataInit>
  ldr  r2, =_sbss
 8006152:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006154:	e002      	b.n	800615c <LoopFillZerobss>

08006156 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006156:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006158:	f842 3b04 	str.w	r3, [r2], #4

0800615c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800615e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006160:	d3f9      	bcc.n	8006156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006162:	f7ff fe6b 	bl	8005e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006166:	f004 fb99 	bl	800a89c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800616a:	f7fe fecd 	bl	8004f08 <main>
  bx  lr    
 800616e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006170:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006174:	0800b2a0 	.word	0x0800b2a0
  ldr  r0, =_sdata
 8006178:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800617c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8006180:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8006184:	2001fdf8 	.word	0x2001fdf8

08006188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006188:	e7fe      	b.n	8006188 <ADC_IRQHandler>

0800618a <_GetRect>:
 800618a:	6883      	ldr	r3, [r0, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	800a      	strh	r2, [r1, #0]
 8006190:	804a      	strh	r2, [r1, #2]
 8006192:	695a      	ldr	r2, [r3, #20]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	3a01      	subs	r2, #1
 8006198:	3b01      	subs	r3, #1
 800619a:	808a      	strh	r2, [r1, #4]
 800619c:	80cb      	strh	r3, [r1, #6]
 800619e:	4770      	bx	lr

080061a0 <_SetPixelIndex>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	6880      	ldr	r0, [r0, #8]
 80061a4:	69c4      	ldr	r4, [r0, #28]
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	fb04 1202 	mla	r2, r4, r2, r1
 80061ac:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <_GetPixelIndex>:
 80061b2:	6883      	ldr	r3, [r0, #8]
 80061b4:	69d8      	ldr	r0, [r3, #28]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	fb00 1202 	mla	r2, r0, r2, r1
 80061bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80061c0:	4770      	bx	lr

080061c2 <_XorPixel>:
 80061c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	460f      	mov	r7, r1
 80061ca:	4616      	mov	r6, r2
 80061cc:	f7ff fff1 	bl	80061b2 <_GetPixelIndex>
 80061d0:	6925      	ldr	r5, [r4, #16]
 80061d2:	68ab      	ldr	r3, [r5, #8]
 80061d4:	4680      	mov	r8, r0
 80061d6:	4798      	blx	r3
 80061d8:	4639      	mov	r1, r7
 80061da:	ea80 0308 	eor.w	r3, r0, r8
 80061de:	4632      	mov	r2, r6
 80061e0:	4620      	mov	r0, r4
 80061e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	f7ff bfdb 	b.w	80061a0 <_SetPixelIndex>
	...

080061ec <_FillRect>:
 80061ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	6886      	ldr	r6, [r0, #8]
 80061f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80061f4:	6b34      	ldr	r4, [r6, #48]	; 0x30
 80061f6:	f8df c114 	ldr.w	ip, [pc, #276]	; 800630c <_FillRect+0x120>
 80061fa:	4689      	mov	r9, r1
 80061fc:	4692      	mov	sl, r2
 80061fe:	b144      	cbz	r4, 8006212 <_FillRect+0x26>
 8006200:	9700      	str	r7, [sp, #0]
 8006202:	f8dc 5000 	ldr.w	r5, [ip]
 8006206:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8006208:	682d      	ldr	r5, [r5, #0]
 800620a:	9501      	str	r5, [sp, #4]
 800620c:	6980      	ldr	r0, [r0, #24]
 800620e:	47a0      	blx	r4
 8006210:	e079      	b.n	8006306 <_FillRect+0x11a>
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	f8dc 1000 	ldr.w	r1, [ip]
 8006218:	f891 c010 	ldrb.w	ip, [r1, #16]
 800621c:	ebc2 0807 	rsb	r8, r2, r7
 8006220:	f01c 0c01 	ands.w	ip, ip, #1
 8006224:	f103 0401 	add.w	r4, r3, #1
 8006228:	f108 0501 	add.w	r5, r8, #1
 800622c:	69f7      	ldr	r7, [r6, #28]
 800622e:	d021      	beq.n	8006274 <_FillRect+0x88>
 8006230:	6903      	ldr	r3, [r0, #16]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4798      	blx	r3
 8006236:	69f2      	ldr	r2, [r6, #28]
 8006238:	2c00      	cmp	r4, #0
 800623a:	d064      	beq.n	8006306 <_FillRect+0x11a>
 800623c:	f06f 0c03 	mvn.w	ip, #3
 8006240:	fb02 990a 	mla	r9, r2, sl, r9
 8006244:	fb0c fc07 	mul.w	ip, ip, r7
 8006248:	fb07 9708 	mla	r7, r7, r8, r9
 800624c:	00bf      	lsls	r7, r7, #2
 800624e:	2d00      	cmp	r5, #0
 8006250:	d059      	beq.n	8006306 <_FillRect+0x11a>
 8006252:	3d01      	subs	r5, #1
 8006254:	463b      	mov	r3, r7
 8006256:	4622      	mov	r2, r4
 8006258:	f8d6 8000 	ldr.w	r8, [r6]
 800625c:	f853 1008 	ldr.w	r1, [r3, r8]
 8006260:	3a01      	subs	r2, #1
 8006262:	ea81 0100 	eor.w	r1, r1, r0
 8006266:	f843 1008 	str.w	r1, [r3, r8]
 800626a:	f103 0304 	add.w	r3, r3, #4
 800626e:	d1f3      	bne.n	8006258 <_FillRect+0x6c>
 8006270:	4467      	add	r7, ip
 8006272:	e7ec      	b.n	800624e <_FillRect+0x62>
 8006274:	6830      	ldr	r0, [r6, #0]
 8006276:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8006278:	fb07 9202 	mla	r2, r7, r2, r9
 800627c:	2c0f      	cmp	r4, #15
 800627e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006282:	6808      	ldr	r0, [r1, #0]
 8006284:	d92f      	bls.n	80062e6 <_FillRect+0xfa>
 8006286:	f1a3 0a0f 	sub.w	sl, r3, #15
 800628a:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800628e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8006292:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 8006296:	f10a 0a01 	add.w	sl, sl, #1
 800629a:	fb09 2101 	mla	r1, r9, r1, r2
 800629e:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 80062a2:	462e      	mov	r6, r5
 80062a4:	4662      	mov	r2, ip
 80062a6:	b1e6      	cbz	r6, 80062e2 <_FillRect+0xf6>
 80062a8:	4622      	mov	r2, r4
 80062aa:	460b      	mov	r3, r1
 80062ac:	3a10      	subs	r2, #16
 80062ae:	2a0f      	cmp	r2, #15
 80062b0:	6018      	str	r0, [r3, #0]
 80062b2:	6058      	str	r0, [r3, #4]
 80062b4:	6098      	str	r0, [r3, #8]
 80062b6:	60d8      	str	r0, [r3, #12]
 80062b8:	6118      	str	r0, [r3, #16]
 80062ba:	6158      	str	r0, [r3, #20]
 80062bc:	6198      	str	r0, [r3, #24]
 80062be:	61d8      	str	r0, [r3, #28]
 80062c0:	6218      	str	r0, [r3, #32]
 80062c2:	6258      	str	r0, [r3, #36]	; 0x24
 80062c4:	6298      	str	r0, [r3, #40]	; 0x28
 80062c6:	62d8      	str	r0, [r3, #44]	; 0x2c
 80062c8:	6318      	str	r0, [r3, #48]	; 0x30
 80062ca:	6358      	str	r0, [r3, #52]	; 0x34
 80062cc:	6398      	str	r0, [r3, #56]	; 0x38
 80062ce:	63d8      	str	r0, [r3, #60]	; 0x3c
 80062d0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80062d4:	d8ea      	bhi.n	80062ac <_FillRect+0xc0>
 80062d6:	eb01 020a 	add.w	r2, r1, sl
 80062da:	3e01      	subs	r6, #1
 80062dc:	ebc9 0101 	rsb	r1, r9, r1
 80062e0:	e7e1      	b.n	80062a6 <_FillRect+0xba>
 80062e2:	f004 040f 	and.w	r4, r4, #15
 80062e6:	b174      	cbz	r4, 8006306 <_FillRect+0x11a>
 80062e8:	00bf      	lsls	r7, r7, #2
 80062ea:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80062ee:	fb07 2208 	mla	r2, r7, r8, r2
 80062f2:	b145      	cbz	r5, 8006306 <_FillRect+0x11a>
 80062f4:	4611      	mov	r1, r2
 80062f6:	4623      	mov	r3, r4
 80062f8:	3b01      	subs	r3, #1
 80062fa:	f841 0b04 	str.w	r0, [r1], #4
 80062fe:	d1fb      	bne.n	80062f8 <_FillRect+0x10c>
 8006300:	3d01      	subs	r5, #1
 8006302:	1bd2      	subs	r2, r2, r7
 8006304:	e7f5      	b.n	80062f2 <_FillRect+0x106>
 8006306:	b002      	add	sp, #8
 8006308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630c:	20000010 	.word	0x20000010

08006310 <_DrawHLine>:
 8006310:	b507      	push	{r0, r1, r2, lr}
 8006312:	9200      	str	r2, [sp, #0]
 8006314:	f7ff ff6a 	bl	80061ec <_FillRect>
 8006318:	b003      	add	sp, #12
 800631a:	f85d fb04 	ldr.w	pc, [sp], #4

0800631e <_DrawVLine>:
 800631e:	b507      	push	{r0, r1, r2, lr}
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	460b      	mov	r3, r1
 8006324:	f7ff ff62 	bl	80061ec <_FillRect>
 8006328:	b003      	add	sp, #12
 800632a:	f85d fb04 	ldr.w	pc, [sp], #4

0800632e <_GetDevProp>:
 800632e:	3901      	subs	r1, #1
 8006330:	6883      	ldr	r3, [r0, #8]
 8006332:	290d      	cmp	r1, #13
 8006334:	d814      	bhi.n	8006360 <_GetDevProp+0x32>
 8006336:	e8df f001 	tbb	[pc, r1]
 800633a:	0b09      	.short	0x0b09
 800633c:	13130f0d 	.word	0x13130f0d
 8006340:	11160713 	.word	0x11160713
 8006344:	16161611 	.word	0x16161611
 8006348:	2020      	movs	r0, #32
 800634a:	4770      	bx	lr
 800634c:	68d8      	ldr	r0, [r3, #12]
 800634e:	4770      	bx	lr
 8006350:	6918      	ldr	r0, [r3, #16]
 8006352:	4770      	bx	lr
 8006354:	6958      	ldr	r0, [r3, #20]
 8006356:	4770      	bx	lr
 8006358:	6998      	ldr	r0, [r3, #24]
 800635a:	4770      	bx	lr
 800635c:	2001      	movs	r0, #1
 800635e:	4770      	bx	lr
 8006360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006364:	4770      	bx	lr
 8006366:	2000      	movs	r0, #0
 8006368:	4770      	bx	lr
	...

0800636c <_GetDevData>:
 800636c:	4802      	ldr	r0, [pc, #8]	; (8006378 <_GetDevData+0xc>)
 800636e:	2901      	cmp	r1, #1
 8006370:	bf18      	it	ne
 8006372:	2000      	movne	r0, #0
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	0800b234 	.word	0x0800b234

0800637c <_ReadRect>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	460f      	mov	r7, r1
 8006382:	6881      	ldr	r1, [r0, #8]
 8006384:	69c8      	ldr	r0, [r1, #28]
 8006386:	f06f 0903 	mvn.w	r9, #3
 800638a:	fb00 7502 	mla	r5, r0, r2, r7
 800638e:	1bdb      	subs	r3, r3, r7
 8006390:	00ae      	lsls	r6, r5, #2
 8006392:	fb09 fc00 	mul.w	ip, r9, r0
 8006396:	fb09 f505 	mul.w	r5, r9, r5
 800639a:	f103 0901 	add.w	r9, r3, #1
 800639e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80063a2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80063a6:	1c5f      	adds	r7, r3, #1
 80063a8:	4630      	mov	r0, r6
 80063aa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80063ae:	680c      	ldr	r4, [r1, #0]
 80063b0:	44aa      	add	sl, r5
 80063b2:	f850 b004 	ldr.w	fp, [r0, r4]
 80063b6:	f84a b000 	str.w	fp, [sl, r0]
 80063ba:	3f01      	subs	r7, #1
 80063bc:	f100 0004 	add.w	r0, r0, #4
 80063c0:	d1f3      	bne.n	80063aa <_ReadRect+0x2e>
 80063c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063c4:	444c      	add	r4, r9
 80063c6:	940a      	str	r4, [sp, #40]	; 0x28
 80063c8:	3201      	adds	r2, #1
 80063ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80063cc:	1e50      	subs	r0, r2, #1
 80063ce:	42a0      	cmp	r0, r4
 80063d0:	4446      	add	r6, r8
 80063d2:	4465      	add	r5, ip
 80063d4:	dbe7      	blt.n	80063a6 <_ReadRect+0x2a>
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080063dc <_GetDevFunc>:
 80063dc:	3901      	subs	r1, #1
 80063de:	2924      	cmp	r1, #36	; 0x24
 80063e0:	d844      	bhi.n	800646c <_GetDevFunc+0x90>
 80063e2:	e8df f001 	tbb	[pc, r1]
 80063e6:	1b41      	.short	0x1b41
 80063e8:	1d431917 	.word	0x1d431917
 80063ec:	45134343 	.word	0x45134343
 80063f0:	21431f15 	.word	0x21431f15
 80063f4:	43434323 	.word	0x43434323
 80063f8:	2f292725 	.word	0x2f292725
 80063fc:	43314343 	.word	0x43314343
 8006400:	43434343 	.word	0x43434343
 8006404:	2d2b3543 	.word	0x2d2b3543
 8006408:	433d      	.short	0x433d
 800640a:	39          	.byte	0x39
 800640b:	00          	.byte	0x00
 800640c:	4819      	ldr	r0, [pc, #100]	; (8006474 <_GetDevFunc+0x98>)
 800640e:	4770      	bx	lr
 8006410:	4819      	ldr	r0, [pc, #100]	; (8006478 <_GetDevFunc+0x9c>)
 8006412:	4770      	bx	lr
 8006414:	4819      	ldr	r0, [pc, #100]	; (800647c <_GetDevFunc+0xa0>)
 8006416:	4770      	bx	lr
 8006418:	4819      	ldr	r0, [pc, #100]	; (8006480 <_GetDevFunc+0xa4>)
 800641a:	4770      	bx	lr
 800641c:	4819      	ldr	r0, [pc, #100]	; (8006484 <_GetDevFunc+0xa8>)
 800641e:	4770      	bx	lr
 8006420:	4819      	ldr	r0, [pc, #100]	; (8006488 <_GetDevFunc+0xac>)
 8006422:	4770      	bx	lr
 8006424:	4819      	ldr	r0, [pc, #100]	; (800648c <_GetDevFunc+0xb0>)
 8006426:	4770      	bx	lr
 8006428:	4819      	ldr	r0, [pc, #100]	; (8006490 <_GetDevFunc+0xb4>)
 800642a:	4770      	bx	lr
 800642c:	4819      	ldr	r0, [pc, #100]	; (8006494 <_GetDevFunc+0xb8>)
 800642e:	4770      	bx	lr
 8006430:	4819      	ldr	r0, [pc, #100]	; (8006498 <_GetDevFunc+0xbc>)
 8006432:	4770      	bx	lr
 8006434:	4819      	ldr	r0, [pc, #100]	; (800649c <_GetDevFunc+0xc0>)
 8006436:	4770      	bx	lr
 8006438:	4819      	ldr	r0, [pc, #100]	; (80064a0 <_GetDevFunc+0xc4>)
 800643a:	4770      	bx	lr
 800643c:	4819      	ldr	r0, [pc, #100]	; (80064a4 <_GetDevFunc+0xc8>)
 800643e:	4770      	bx	lr
 8006440:	4819      	ldr	r0, [pc, #100]	; (80064a8 <_GetDevFunc+0xcc>)
 8006442:	4770      	bx	lr
 8006444:	4819      	ldr	r0, [pc, #100]	; (80064ac <_GetDevFunc+0xd0>)
 8006446:	4770      	bx	lr
 8006448:	6803      	ldr	r3, [r0, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800644e:	4770      	bx	lr
 8006450:	6803      	ldr	r3, [r0, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006456:	4770      	bx	lr
 8006458:	6803      	ldr	r3, [r0, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800645e:	4770      	bx	lr
 8006460:	6803      	ldr	r3, [r0, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006466:	4770      	bx	lr
 8006468:	4811      	ldr	r0, [pc, #68]	; (80064b0 <_GetDevFunc+0xd4>)
 800646a:	4770      	bx	lr
 800646c:	2000      	movs	r0, #0
 800646e:	4770      	bx	lr
 8006470:	4810      	ldr	r0, [pc, #64]	; (80064b4 <_GetDevFunc+0xd8>)
 8006472:	4770      	bx	lr
 8006474:	08006b47 	.word	0x08006b47
 8006478:	08006ca9 	.word	0x08006ca9
 800647c:	08006bc3 	.word	0x08006bc3
 8006480:	08006a9b 	.word	0x08006a9b
 8006484:	08006b1f 	.word	0x08006b1f
 8006488:	08006af7 	.word	0x08006af7
 800648c:	08006add 	.word	0x08006add
 8006490:	08006505 	.word	0x08006505
 8006494:	080064fb 	.word	0x080064fb
 8006498:	080064e5 	.word	0x080064e5
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064b9 	.word	0x080064b9
 80064a4:	08006b71 	.word	0x08006b71
 80064a8:	08006ab7 	.word	0x08006ab7
 80064ac:	08006a55 	.word	0x08006a55
 80064b0:	0800637d 	.word	0x0800637d
 80064b4:	08006ceb 	.word	0x08006ceb

080064b8 <_SetChroma>:
 80064b8:	b507      	push	{r0, r1, r2, lr}
 80064ba:	6980      	ldr	r0, [r0, #24]
 80064bc:	e88d 0006 	stmia.w	sp, {r1, r2}
 80064c0:	210d      	movs	r1, #13
 80064c2:	466a      	mov	r2, sp
 80064c4:	f7fe fa5a 	bl	800497c <LCD_X_DisplayDriver>
 80064c8:	b003      	add	sp, #12
 80064ca:	f85d fb04 	ldr.w	pc, [sp], #4

080064ce <_SetChromaMode>:
 80064ce:	b507      	push	{r0, r1, r2, lr}
 80064d0:	aa02      	add	r2, sp, #8
 80064d2:	6980      	ldr	r0, [r0, #24]
 80064d4:	f842 1d04 	str.w	r1, [r2, #-4]!
 80064d8:	210c      	movs	r1, #12
 80064da:	f7fe fa4f 	bl	800497c <LCD_X_DisplayDriver>
 80064de:	b003      	add	sp, #12
 80064e0:	f85d fb04 	ldr.w	pc, [sp], #4

080064e4 <_SetAlphaMode>:
 80064e4:	b507      	push	{r0, r1, r2, lr}
 80064e6:	aa02      	add	r2, sp, #8
 80064e8:	6980      	ldr	r0, [r0, #24]
 80064ea:	f842 1d04 	str.w	r1, [r2, #-4]!
 80064ee:	210b      	movs	r1, #11
 80064f0:	f7fe fa44 	bl	800497c <LCD_X_DisplayDriver>
 80064f4:	b003      	add	sp, #12
 80064f6:	f85d fb04 	ldr.w	pc, [sp], #4

080064fa <_Off>:
 80064fa:	6980      	ldr	r0, [r0, #24]
 80064fc:	2106      	movs	r1, #6
 80064fe:	2200      	movs	r2, #0
 8006500:	f7fe ba3c 	b.w	800497c <LCD_X_DisplayDriver>

08006504 <_On>:
 8006504:	6980      	ldr	r0, [r0, #24]
 8006506:	2105      	movs	r1, #5
 8006508:	2200      	movs	r2, #0
 800650a:	f7fe ba37 	b.w	800497c <LCD_X_DisplayDriver>

0800650e <_SetOrg>:
 800650e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006512:	2300      	movs	r3, #0
 8006514:	4607      	mov	r7, r0
 8006516:	6884      	ldr	r4, [r0, #8]
 8006518:	6980      	ldr	r0, [r0, #24]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	460d      	mov	r5, r1
 800651e:	4616      	mov	r6, r2
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	f000 fca9 	bl	8006e78 <LCD_GetMirrorXEx>
 8006526:	4680      	mov	r8, r0
 8006528:	69b8      	ldr	r0, [r7, #24]
 800652a:	f000 fca8 	bl	8006e7e <LCD_GetMirrorYEx>
 800652e:	4681      	mov	r9, r0
 8006530:	69b8      	ldr	r0, [r7, #24]
 8006532:	f000 fca7 	bl	8006e84 <LCD_GetSwapXYEx>
 8006536:	0080      	lsls	r0, r0, #2
 8006538:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800653c:	ea40 0008 	orr.w	r0, r0, r8
 8006540:	2807      	cmp	r0, #7
 8006542:	d826      	bhi.n	8006592 <_SetOrg+0x84>
 8006544:	e8df f000 	tbb	[pc, r0]
 8006548:	0b0f0408 	.word	0x0b0f0408
 800654c:	1b1f1519 	.word	0x1b1f1519
 8006550:	6962      	ldr	r2, [r4, #20]
 8006552:	68e3      	ldr	r3, [r4, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	1b5d      	subs	r5, r3, r5
 8006558:	9500      	str	r5, [sp, #0]
 800655a:	9601      	str	r6, [sp, #4]
 800655c:	e019      	b.n	8006592 <_SetOrg+0x84>
 800655e:	6962      	ldr	r2, [r4, #20]
 8006560:	68e3      	ldr	r3, [r4, #12]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	1b5d      	subs	r5, r3, r5
 8006566:	69a2      	ldr	r2, [r4, #24]
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	9500      	str	r5, [sp, #0]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	1b9e      	subs	r6, r3, r6
 8006570:	e7f3      	b.n	800655a <_SetOrg+0x4c>
 8006572:	69a2      	ldr	r2, [r4, #24]
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	1b9e      	subs	r6, r3, r6
 800657a:	9600      	str	r6, [sp, #0]
 800657c:	e008      	b.n	8006590 <_SetOrg+0x82>
 800657e:	69a2      	ldr	r2, [r4, #24]
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	1b9e      	subs	r6, r3, r6
 8006586:	6962      	ldr	r2, [r4, #20]
 8006588:	68e3      	ldr	r3, [r4, #12]
 800658a:	9600      	str	r6, [sp, #0]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	1b5d      	subs	r5, r3, r5
 8006590:	9501      	str	r5, [sp, #4]
 8006592:	69b8      	ldr	r0, [r7, #24]
 8006594:	2103      	movs	r1, #3
 8006596:	466a      	mov	r2, sp
 8006598:	f7fe f9f0 	bl	800497c <LCD_X_DisplayDriver>
 800659c:	b003      	add	sp, #12
 800659e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080065a4 <_DrawBitmap>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	b08d      	sub	sp, #52	; 0x34
 80065aa:	4606      	mov	r6, r0
 80065ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80065ae:	910a      	str	r1, [sp, #40]	; 0x28
 80065b0:	2804      	cmp	r0, #4
 80065b2:	469b      	mov	fp, r3
 80065b4:	9209      	str	r2, [sp, #36]	; 0x24
 80065b6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80065b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80065ba:	68b3      	ldr	r3, [r6, #8]
 80065bc:	d011      	beq.n	80065e2 <_DrawBitmap+0x3e>
 80065be:	dc09      	bgt.n	80065d4 <_DrawBitmap+0x30>
 80065c0:	2801      	cmp	r0, #1
 80065c2:	d013      	beq.n	80065ec <_DrawBitmap+0x48>
 80065c4:	2802      	cmp	r0, #2
 80065c6:	f040 822d 	bne.w	8006a24 <_DrawBitmap+0x480>
 80065ca:	4aab      	ldr	r2, [pc, #684]	; (8006878 <_DrawBitmap+0x2d4>)
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80065d0:	2100      	movs	r1, #0
 80065d2:	e0b8      	b.n	8006746 <_DrawBitmap+0x1a2>
 80065d4:	2808      	cmp	r0, #8
 80065d6:	f000 8172 	beq.w	80068be <_DrawBitmap+0x31a>
 80065da:	2820      	cmp	r0, #32
 80065dc:	f000 81fb 	beq.w	80069d6 <_DrawBitmap+0x432>
 80065e0:	e220      	b.n	8006a24 <_DrawBitmap+0x480>
 80065e2:	4aa5      	ldr	r2, [pc, #660]	; (8006878 <_DrawBitmap+0x2d4>)
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80065e8:	2100      	movs	r1, #0
 80065ea:	e10a      	b.n	8006802 <_DrawBitmap+0x25e>
 80065ec:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80065ee:	b90f      	cbnz	r7, 80065f4 <_DrawBitmap+0x50>
 80065f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065f2:	e042      	b.n	800667a <_DrawBitmap+0xd6>
 80065f4:	4ba0      	ldr	r3, [pc, #640]	; (8006878 <_DrawBitmap+0x2d4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	7c1b      	ldrb	r3, [r3, #16]
 80065fa:	07db      	lsls	r3, r3, #31
 80065fc:	d4f8      	bmi.n	80065f0 <_DrawBitmap+0x4c>
 80065fe:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006600:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006602:	9302      	str	r3, [sp, #8]
 8006604:	e88d 0801 	stmia.w	sp, {r0, fp}
 8006608:	9818      	ldr	r0, [sp, #96]	; 0x60
 800660a:	9003      	str	r0, [sp, #12]
 800660c:	9504      	str	r5, [sp, #16]
 800660e:	69b0      	ldr	r0, [r6, #24]
 8006610:	4623      	mov	r3, r4
 8006612:	47b8      	blx	r7
 8006614:	e206      	b.n	8006a24 <_DrawBitmap+0x480>
 8006616:	4b98      	ldr	r3, [pc, #608]	; (8006878 <_DrawBitmap+0x2d4>)
 8006618:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006620:	7c1b      	ldrb	r3, [r3, #16]
 8006622:	f8d5 c000 	ldr.w	ip, [r5]
 8006626:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800662a:	68b0      	ldr	r0, [r6, #8]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b02      	cmp	r3, #2
 8006632:	448a      	add	sl, r1
 8006634:	d02d      	beq.n	8006692 <_DrawBitmap+0xee>
 8006636:	2b03      	cmp	r3, #3
 8006638:	d04d      	beq.n	80066d6 <_DrawBitmap+0x132>
 800663a:	2b01      	cmp	r3, #1
 800663c:	d04b      	beq.n	80066d6 <_DrawBitmap+0x132>
 800663e:	f1c1 0308 	rsb	r3, r1, #8
 8006642:	7822      	ldrb	r2, [r4, #0]
 8006644:	498d      	ldr	r1, [pc, #564]	; (800687c <_DrawBitmap+0x2d8>)
 8006646:	5c8a      	ldrb	r2, [r1, r2]
 8006648:	991a      	ldr	r1, [sp, #104]	; 0x68
 800664a:	410a      	asrs	r2, r1
 800664c:	69c1      	ldr	r1, [r0, #28]
 800664e:	6800      	ldr	r0, [r0, #0]
 8006650:	fb01 a107 	mla	r1, r1, r7, sl
 8006654:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 8006658:	4659      	mov	r1, fp
 800665a:	4620      	mov	r0, r4
 800665c:	f012 0f01 	tst.w	r2, #1
 8006660:	bf0c      	ite	eq
 8006662:	46e0      	moveq	r8, ip
 8006664:	46c8      	movne	r8, r9
 8006666:	3b01      	subs	r3, #1
 8006668:	d00d      	beq.n	8006686 <_DrawBitmap+0xe2>
 800666a:	0852      	lsrs	r2, r2, #1
 800666c:	3901      	subs	r1, #1
 800666e:	f84a 8b04 	str.w	r8, [sl], #4
 8006672:	d1f3      	bne.n	800665c <_DrawBitmap+0xb8>
 8006674:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006676:	3701      	adds	r7, #1
 8006678:	4414      	add	r4, r2
 800667a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800667c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800667e:	1a3b      	subs	r3, r7, r0
 8006680:	428b      	cmp	r3, r1
 8006682:	dbc8      	blt.n	8006616 <_DrawBitmap+0x72>
 8006684:	e1ce      	b.n	8006a24 <_DrawBitmap+0x480>
 8006686:	7843      	ldrb	r3, [r0, #1]
 8006688:	4a7c      	ldr	r2, [pc, #496]	; (800687c <_DrawBitmap+0x2d8>)
 800668a:	3001      	adds	r0, #1
 800668c:	5cd2      	ldrb	r2, [r2, r3]
 800668e:	2308      	movs	r3, #8
 8006690:	e7ec      	b.n	800666c <_DrawBitmap+0xc8>
 8006692:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006694:	4979      	ldr	r1, [pc, #484]	; (800687c <_DrawBitmap+0x2d8>)
 8006696:	f1c2 0308 	rsb	r3, r2, #8
 800669a:	7822      	ldrb	r2, [r4, #0]
 800669c:	5c89      	ldrb	r1, [r1, r2]
 800669e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066a0:	4111      	asrs	r1, r2
 80066a2:	69c2      	ldr	r2, [r0, #28]
 80066a4:	6800      	ldr	r0, [r0, #0]
 80066a6:	fb02 a207 	mla	r2, r2, r7, sl
 80066aa:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 80066ae:	4622      	mov	r2, r4
 80066b0:	2000      	movs	r0, #0
 80066b2:	f011 0f01 	tst.w	r1, #1
 80066b6:	bf18      	it	ne
 80066b8:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 80066bc:	3b01      	subs	r3, #1
 80066be:	d001      	beq.n	80066c4 <_DrawBitmap+0x120>
 80066c0:	0849      	lsrs	r1, r1, #1
 80066c2:	e004      	b.n	80066ce <_DrawBitmap+0x12a>
 80066c4:	7853      	ldrb	r3, [r2, #1]
 80066c6:	496d      	ldr	r1, [pc, #436]	; (800687c <_DrawBitmap+0x2d8>)
 80066c8:	3201      	adds	r2, #1
 80066ca:	5cc9      	ldrb	r1, [r1, r3]
 80066cc:	2308      	movs	r3, #8
 80066ce:	3001      	adds	r0, #1
 80066d0:	4558      	cmp	r0, fp
 80066d2:	d1ee      	bne.n	80066b2 <_DrawBitmap+0x10e>
 80066d4:	e7ce      	b.n	8006674 <_DrawBitmap+0xd0>
 80066d6:	6933      	ldr	r3, [r6, #16]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	4798      	blx	r3
 80066dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80066e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80066e2:	46d9      	mov	r9, fp
 80066e4:	46a4      	mov	ip, r4
 80066e6:	f89c 1000 	ldrb.w	r1, [ip]
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	fa42 f208 	asr.w	r2, r2, r8
 80066f0:	eb0a 030b 	add.w	r3, sl, fp
 80066f4:	4211      	tst	r1, r2
 80066f6:	ebc9 0303 	rsb	r3, r9, r3
 80066fa:	d013      	beq.n	8006724 <_DrawBitmap+0x180>
 80066fc:	4619      	mov	r1, r3
 80066fe:	463a      	mov	r2, r7
 8006700:	4630      	mov	r0, r6
 8006702:	f8cd c01c 	str.w	ip, [sp, #28]
 8006706:	9308      	str	r3, [sp, #32]
 8006708:	f7ff fd53 	bl	80061b2 <_GetPixelIndex>
 800670c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800670e:	9b08      	ldr	r3, [sp, #32]
 8006710:	ea80 0e01 	eor.w	lr, r0, r1
 8006714:	463a      	mov	r2, r7
 8006716:	4619      	mov	r1, r3
 8006718:	4630      	mov	r0, r6
 800671a:	4673      	mov	r3, lr
 800671c:	f7ff fd40 	bl	80061a0 <_SetPixelIndex>
 8006720:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006724:	f108 0801 	add.w	r8, r8, #1
 8006728:	f1b8 0f08 	cmp.w	r8, #8
 800672c:	bf04      	itt	eq
 800672e:	f10c 0c01 	addeq.w	ip, ip, #1
 8006732:	f04f 0800 	moveq.w	r8, #0
 8006736:	f1b9 0901 	subs.w	r9, r9, #1
 800673a:	d1d4      	bne.n	80066e6 <_DrawBitmap+0x142>
 800673c:	e79a      	b.n	8006674 <_DrawBitmap+0xd0>
 800673e:	b935      	cbnz	r5, 800674e <_DrawBitmap+0x1aa>
 8006740:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8006742:	3101      	adds	r1, #1
 8006744:	443c      	add	r4, r7
 8006746:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8006748:	42b9      	cmp	r1, r7
 800674a:	dbf8      	blt.n	800673e <_DrawBitmap+0x19a>
 800674c:	e16a      	b.n	8006a24 <_DrawBitmap+0x480>
 800674e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006752:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006754:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	7826      	ldrb	r6, [r4, #0]
 800675a:	4438      	add	r0, r7
 800675c:	4488      	add	r8, r1
 800675e:	fb02 0808 	mla	r8, r2, r8, r0
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006766:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800676a:	7c02      	ldrb	r2, [r0, #16]
 800676c:	f012 0203 	ands.w	r2, r2, #3
 8006770:	46c4      	mov	ip, r8
 8006772:	d005      	beq.n	8006780 <_DrawBitmap+0x1dc>
 8006774:	2a02      	cmp	r2, #2
 8006776:	d1e3      	bne.n	8006740 <_DrawBitmap+0x19c>
 8006778:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800677a:	9406      	str	r4, [sp, #24]
 800677c:	2000      	movs	r0, #0
 800677e:	e020      	b.n	80067c2 <_DrawBitmap+0x21e>
 8006780:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006782:	4658      	mov	r0, fp
 8006784:	4627      	mov	r7, r4
 8006786:	f1c2 0803 	rsb	r8, r2, #3
 800678a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800678e:	f1c8 0906 	rsb	r9, r8, #6
 8006792:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8006796:	fa4a f909 	asr.w	r9, sl, r9
 800679a:	ea09 0906 	and.w	r9, r9, r6
 800679e:	fa29 f808 	lsr.w	r8, r9, r8
 80067a2:	3201      	adds	r2, #1
 80067a4:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 80067a8:	f84c 8b04 	str.w	r8, [ip], #4
 80067ac:	2a04      	cmp	r2, #4
 80067ae:	d102      	bne.n	80067b6 <_DrawBitmap+0x212>
 80067b0:	787e      	ldrb	r6, [r7, #1]
 80067b2:	2200      	movs	r2, #0
 80067b4:	3701      	adds	r7, #1
 80067b6:	3801      	subs	r0, #1
 80067b8:	d1e5      	bne.n	8006786 <_DrawBitmap+0x1e2>
 80067ba:	e7c1      	b.n	8006740 <_DrawBitmap+0x19c>
 80067bc:	3001      	adds	r0, #1
 80067be:	4558      	cmp	r0, fp
 80067c0:	d0be      	beq.n	8006740 <_DrawBitmap+0x19c>
 80067c2:	f1c2 0c03 	rsb	ip, r2, #3
 80067c6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80067ca:	f1cc 0906 	rsb	r9, ip, #6
 80067ce:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 80067d2:	fa4a f909 	asr.w	r9, sl, r9
 80067d6:	ea09 0906 	and.w	r9, r9, r6
 80067da:	fa39 fc0c 	lsrs.w	ip, r9, ip
 80067de:	bf1c      	itt	ne
 80067e0:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 80067e4:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 80067e8:	3201      	adds	r2, #1
 80067ea:	2a04      	cmp	r2, #4
 80067ec:	d1e6      	bne.n	80067bc <_DrawBitmap+0x218>
 80067ee:	9a06      	ldr	r2, [sp, #24]
 80067f0:	7856      	ldrb	r6, [r2, #1]
 80067f2:	3201      	adds	r2, #1
 80067f4:	9206      	str	r2, [sp, #24]
 80067f6:	2200      	movs	r2, #0
 80067f8:	e7e0      	b.n	80067bc <_DrawBitmap+0x218>
 80067fa:	b935      	cbnz	r5, 800680a <_DrawBitmap+0x266>
 80067fc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80067fe:	3101      	adds	r1, #1
 8006800:	443c      	add	r4, r7
 8006802:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8006804:	42b9      	cmp	r1, r7
 8006806:	dbf8      	blt.n	80067fa <_DrawBitmap+0x256>
 8006808:	e10c      	b.n	8006a24 <_DrawBitmap+0x480>
 800680a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800680e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006810:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	7826      	ldrb	r6, [r4, #0]
 8006816:	4438      	add	r0, r7
 8006818:	4488      	add	r8, r1
 800681a:	fb02 0808 	mla	r8, r2, r8, r0
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006822:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8006826:	7c02      	ldrb	r2, [r0, #16]
 8006828:	f012 0203 	ands.w	r2, r2, #3
 800682c:	46c4      	mov	ip, r8
 800682e:	d005      	beq.n	800683c <_DrawBitmap+0x298>
 8006830:	2a02      	cmp	r2, #2
 8006832:	d1e3      	bne.n	80067fc <_DrawBitmap+0x258>
 8006834:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006836:	9406      	str	r4, [sp, #24]
 8006838:	2000      	movs	r0, #0
 800683a:	e024      	b.n	8006886 <_DrawBitmap+0x2e2>
 800683c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800683e:	4658      	mov	r0, fp
 8006840:	4627      	mov	r7, r4
 8006842:	f1c2 0801 	rsb	r8, r2, #1
 8006846:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800684a:	f1c8 0904 	rsb	r9, r8, #4
 800684e:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8006852:	fa4a f909 	asr.w	r9, sl, r9
 8006856:	ea09 0906 	and.w	r9, r9, r6
 800685a:	fa29 f808 	lsr.w	r8, r9, r8
 800685e:	3201      	adds	r2, #1
 8006860:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 8006864:	f84c 8b04 	str.w	r8, [ip], #4
 8006868:	2a02      	cmp	r2, #2
 800686a:	d102      	bne.n	8006872 <_DrawBitmap+0x2ce>
 800686c:	787e      	ldrb	r6, [r7, #1]
 800686e:	2200      	movs	r2, #0
 8006870:	3701      	adds	r7, #1
 8006872:	3801      	subs	r0, #1
 8006874:	d1e5      	bne.n	8006842 <_DrawBitmap+0x29e>
 8006876:	e7c1      	b.n	80067fc <_DrawBitmap+0x258>
 8006878:	20000010 	.word	0x20000010
 800687c:	0800b0c8 	.word	0x0800b0c8
 8006880:	3001      	adds	r0, #1
 8006882:	4558      	cmp	r0, fp
 8006884:	d0ba      	beq.n	80067fc <_DrawBitmap+0x258>
 8006886:	f1c2 0c01 	rsb	ip, r2, #1
 800688a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800688e:	f1cc 0904 	rsb	r9, ip, #4
 8006892:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8006896:	fa4a f909 	asr.w	r9, sl, r9
 800689a:	ea09 0906 	and.w	r9, r9, r6
 800689e:	fa39 fc0c 	lsrs.w	ip, r9, ip
 80068a2:	bf1c      	itt	ne
 80068a4:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 80068a8:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 80068ac:	3201      	adds	r2, #1
 80068ae:	2a02      	cmp	r2, #2
 80068b0:	d1e6      	bne.n	8006880 <_DrawBitmap+0x2dc>
 80068b2:	9a06      	ldr	r2, [sp, #24]
 80068b4:	7856      	ldrb	r6, [r2, #1]
 80068b6:	3201      	adds	r2, #1
 80068b8:	9206      	str	r2, [sp, #24]
 80068ba:	2200      	movs	r2, #0
 80068bc:	e7e0      	b.n	8006880 <_DrawBitmap+0x2dc>
 80068be:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80068c0:	f8df c168 	ldr.w	ip, [pc, #360]	; 8006a2c <_DrawBitmap+0x488>
 80068c4:	b127      	cbz	r7, 80068d0 <_DrawBitmap+0x32c>
 80068c6:	f8dc 0000 	ldr.w	r0, [ip]
 80068ca:	7c00      	ldrb	r0, [r0, #16]
 80068cc:	0780      	lsls	r0, r0, #30
 80068ce:	d504      	bpl.n	80068da <_DrawBitmap+0x336>
 80068d0:	f8dc c000 	ldr.w	ip, [ip]
 80068d4:	f04f 0900 	mov.w	r9, #0
 80068d8:	e011      	b.n	80068fe <_DrawBitmap+0x35a>
 80068da:	2d00      	cmp	r5, #0
 80068dc:	d0f8      	beq.n	80068d0 <_DrawBitmap+0x32c>
 80068de:	9816      	ldr	r0, [sp, #88]	; 0x58
 80068e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	f8cd b000 	str.w	fp, [sp]
 80068e8:	9001      	str	r0, [sp, #4]
 80068ea:	9503      	str	r5, [sp, #12]
 80068ec:	69b0      	ldr	r0, [r6, #24]
 80068ee:	4623      	mov	r3, r4
 80068f0:	47b8      	blx	r7
 80068f2:	e097      	b.n	8006a24 <_DrawBitmap+0x480>
 80068f4:	b93d      	cbnz	r5, 8006906 <_DrawBitmap+0x362>
 80068f6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80068f8:	f109 0901 	add.w	r9, r9, #1
 80068fc:	443c      	add	r4, r7
 80068fe:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8006900:	45b9      	cmp	r9, r7
 8006902:	dbf7      	blt.n	80068f4 <_DrawBitmap+0x350>
 8006904:	e08e      	b.n	8006a24 <_DrawBitmap+0x480>
 8006906:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800690c:	4448      	add	r0, r9
 800690e:	fb02 7000 	mla	r0, r2, r0, r7
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006918:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800691c:	f012 0203 	ands.w	r2, r2, #3
 8006920:	4601      	mov	r1, r0
 8006922:	d003      	beq.n	800692c <_DrawBitmap+0x388>
 8006924:	2a02      	cmp	r2, #2
 8006926:	d1e6      	bne.n	80068f6 <_DrawBitmap+0x352>
 8006928:	2100      	movs	r1, #0
 800692a:	e04f      	b.n	80069cc <_DrawBitmap+0x428>
 800692c:	4658      	mov	r0, fp
 800692e:	4622      	mov	r2, r4
 8006930:	2807      	cmp	r0, #7
 8006932:	dd23      	ble.n	800697c <_DrawBitmap+0x3d8>
 8006934:	7816      	ldrb	r6, [r2, #0]
 8006936:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800693a:	600e      	str	r6, [r1, #0]
 800693c:	7856      	ldrb	r6, [r2, #1]
 800693e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006942:	604e      	str	r6, [r1, #4]
 8006944:	7896      	ldrb	r6, [r2, #2]
 8006946:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800694a:	608e      	str	r6, [r1, #8]
 800694c:	78d6      	ldrb	r6, [r2, #3]
 800694e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006952:	60ce      	str	r6, [r1, #12]
 8006954:	7916      	ldrb	r6, [r2, #4]
 8006956:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800695a:	610e      	str	r6, [r1, #16]
 800695c:	7956      	ldrb	r6, [r2, #5]
 800695e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006962:	614e      	str	r6, [r1, #20]
 8006964:	7996      	ldrb	r6, [r2, #6]
 8006966:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800696a:	618e      	str	r6, [r1, #24]
 800696c:	79d6      	ldrb	r6, [r2, #7]
 800696e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006972:	61ce      	str	r6, [r1, #28]
 8006974:	3808      	subs	r0, #8
 8006976:	3208      	adds	r2, #8
 8006978:	3120      	adds	r1, #32
 800697a:	e7d9      	b.n	8006930 <_DrawBitmap+0x38c>
 800697c:	2803      	cmp	r0, #3
 800697e:	dd13      	ble.n	80069a8 <_DrawBitmap+0x404>
 8006980:	7816      	ldrb	r6, [r2, #0]
 8006982:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006986:	600e      	str	r6, [r1, #0]
 8006988:	7856      	ldrb	r6, [r2, #1]
 800698a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800698e:	604e      	str	r6, [r1, #4]
 8006990:	7896      	ldrb	r6, [r2, #2]
 8006992:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006996:	608e      	str	r6, [r1, #8]
 8006998:	78d6      	ldrb	r6, [r2, #3]
 800699a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800699e:	60ce      	str	r6, [r1, #12]
 80069a0:	3804      	subs	r0, #4
 80069a2:	3204      	adds	r2, #4
 80069a4:	3110      	adds	r1, #16
 80069a6:	e7e9      	b.n	800697c <_DrawBitmap+0x3d8>
 80069a8:	2600      	movs	r6, #0
 80069aa:	4286      	cmp	r6, r0
 80069ac:	d0a3      	beq.n	80068f6 <_DrawBitmap+0x352>
 80069ae:	f812 8006 	ldrb.w	r8, [r2, r6]
 80069b2:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 80069b6:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 80069ba:	3601      	adds	r6, #1
 80069bc:	e7f5      	b.n	80069aa <_DrawBitmap+0x406>
 80069be:	5c62      	ldrb	r2, [r4, r1]
 80069c0:	b11a      	cbz	r2, 80069ca <_DrawBitmap+0x426>
 80069c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80069c6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 80069ca:	3101      	adds	r1, #1
 80069cc:	ebc1 020b 	rsb	r2, r1, fp
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	dcf4      	bgt.n	80069be <_DrawBitmap+0x41a>
 80069d4:	e78f      	b.n	80068f6 <_DrawBitmap+0x352>
 80069d6:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80069d8:	b90d      	cbnz	r5, 80069de <_DrawBitmap+0x43a>
 80069da:	462b      	mov	r3, r5
 80069dc:	e012      	b.n	8006a04 <_DrawBitmap+0x460>
 80069de:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80069e0:	9701      	str	r7, [sp, #4]
 80069e2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80069e4:	f8cd b000 	str.w	fp, [sp]
 80069e8:	9702      	str	r7, [sp, #8]
 80069ea:	69b0      	ldr	r0, [r6, #24]
 80069ec:	4623      	mov	r3, r4
 80069ee:	47a8      	blx	r5
 80069f0:	e018      	b.n	8006a24 <_DrawBitmap+0x480>
 80069f2:	f851 7f04 	ldr.w	r7, [r1, #4]!
 80069f6:	1b0d      	subs	r5, r1, r4
 80069f8:	3a01      	subs	r2, #1
 80069fa:	502f      	str	r7, [r5, r0]
 80069fc:	d1f9      	bne.n	80069f2 <_DrawBitmap+0x44e>
 80069fe:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8006a00:	3301      	adds	r3, #1
 8006a02:	443c      	add	r4, r7
 8006a04:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006a06:	42ab      	cmp	r3, r5
 8006a08:	da0c      	bge.n	8006a24 <_DrawBitmap+0x480>
 8006a0a:	68b2      	ldr	r2, [r6, #8]
 8006a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a0e:	69d1      	ldr	r1, [r2, #28]
 8006a10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	4418      	add	r0, r3
 8006a16:	fb01 5100 	mla	r1, r1, r0, r5
 8006a1a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8006a1e:	1f21      	subs	r1, r4, #4
 8006a20:	465a      	mov	r2, fp
 8006a22:	e7e6      	b.n	80069f2 <_DrawBitmap+0x44e>
 8006a24:	b00d      	add	sp, #52	; 0x34
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000010 	.word	0x20000010

08006a30 <_InitOnce.isra.4>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	6805      	ldr	r5, [r0, #0]
 8006a34:	4604      	mov	r4, r0
 8006a36:	b93d      	cbnz	r5, 8006a48 <_InitOnce.isra.4+0x18>
 8006a38:	2048      	movs	r0, #72	; 0x48
 8006a3a:	f001 fa4b 	bl	8007ed4 <GUI_ALLOC_GetFixedBlock>
 8006a3e:	4629      	mov	r1, r5
 8006a40:	6020      	str	r0, [r4, #0]
 8006a42:	2248      	movs	r2, #72	; 0x48
 8006a44:	f000 fce2 	bl	800740c <GUI__memset>
 8006a48:	6820      	ldr	r0, [r4, #0]
 8006a4a:	f1d0 0001 	rsbs	r0, r0, #1
 8006a4e:	bf38      	it	cc
 8006a50:	2000      	movcc	r0, #0
 8006a52:	bd38      	pop	{r3, r4, r5, pc}

08006a54 <_SetDevFunc>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	4605      	mov	r5, r0
 8006a58:	3008      	adds	r0, #8
 8006a5a:	460e      	mov	r6, r1
 8006a5c:	4614      	mov	r4, r2
 8006a5e:	f7ff ffe7 	bl	8006a30 <_InitOnce.isra.4>
 8006a62:	68ab      	ldr	r3, [r5, #8]
 8006a64:	b1c3      	cbz	r3, 8006a98 <_SetDevFunc+0x44>
 8006a66:	f1a6 0119 	sub.w	r1, r6, #25
 8006a6a:	290f      	cmp	r1, #15
 8006a6c:	d814      	bhi.n	8006a98 <_SetDevFunc+0x44>
 8006a6e:	e8df f001 	tbb	[pc, r1]
 8006a72:	1308      	.short	0x1308
 8006a74:	13131313 	.word	0x13131313
 8006a78:	130a0c13 	.word	0x130a0c13
 8006a7c:	130e1310 	.word	0x130e1310
 8006a80:	1213      	.short	0x1213
 8006a82:	631c      	str	r4, [r3, #48]	; 0x30
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	635c      	str	r4, [r3, #52]	; 0x34
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	639c      	str	r4, [r3, #56]	; 0x38
 8006a8c:	bd70      	pop	{r4, r5, r6, pc}
 8006a8e:	63dc      	str	r4, [r3, #60]	; 0x3c
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	641c      	str	r4, [r3, #64]	; 0x40
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	645c      	str	r4, [r3, #68]	; 0x44
 8006a98:	bd70      	pop	{r4, r5, r6, pc}

08006a9a <_GetPos>:
 8006a9a:	b570      	push	{r4, r5, r6, lr}
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	3008      	adds	r0, #8
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	4616      	mov	r6, r2
 8006aa4:	f7ff ffc4 	bl	8006a30 <_InitOnce.isra.4>
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	b11b      	cbz	r3, 8006ab4 <_GetPos+0x1a>
 8006aac:	6a18      	ldr	r0, [r3, #32]
 8006aae:	6028      	str	r0, [r5, #0]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	6033      	str	r3, [r6, #0]
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}

08006ab6 <_ShowBuffer>:
 8006ab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	2300      	movs	r3, #0
 8006abc:	3008      	adds	r0, #8
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	f7ff ffb5 	bl	8006a30 <_InitOnce.isra.4>
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	b133      	cbz	r3, 8006ad8 <_ShowBuffer+0x22>
 8006aca:	aa02      	add	r2, sp, #8
 8006acc:	69a0      	ldr	r0, [r4, #24]
 8006ace:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006ad2:	210e      	movs	r1, #14
 8006ad4:	f7fd ff52 	bl	800497c <LCD_X_DisplayDriver>
 8006ad8:	b003      	add	sp, #12
 8006ada:	bd30      	pop	{r4, r5, pc}

08006adc <_Init>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4604      	mov	r4, r0
 8006ae0:	3008      	adds	r0, #8
 8006ae2:	f7ff ffa5 	bl	8006a30 <_InitOnce.isra.4>
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4605      	mov	r5, r0
 8006aea:	2200      	movs	r2, #0
 8006aec:	69a0      	ldr	r0, [r4, #24]
 8006aee:	f7fd ff45 	bl	800497c <LCD_X_DisplayDriver>
 8006af2:	4328      	orrs	r0, r5
 8006af4:	bd38      	pop	{r3, r4, r5, pc}

08006af6 <_SetVis>:
 8006af6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	2300      	movs	r3, #0
 8006afc:	3008      	adds	r0, #8
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	460d      	mov	r5, r1
 8006b02:	f7ff ff95 	bl	8006a30 <_InitOnce.isra.4>
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	b13b      	cbz	r3, 8006b1a <_SetVis+0x24>
 8006b0a:	aa02      	add	r2, sp, #8
 8006b0c:	62dd      	str	r5, [r3, #44]	; 0x2c
 8006b0e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006b12:	69a0      	ldr	r0, [r4, #24]
 8006b14:	2109      	movs	r1, #9
 8006b16:	f7fd ff31 	bl	800497c <LCD_X_DisplayDriver>
 8006b1a:	b003      	add	sp, #12
 8006b1c:	bd30      	pop	{r4, r5, pc}

08006b1e <_SetAlpha>:
 8006b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	2300      	movs	r3, #0
 8006b24:	3008      	adds	r0, #8
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	460d      	mov	r5, r1
 8006b2a:	f7ff ff81 	bl	8006a30 <_InitOnce.isra.4>
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	b13b      	cbz	r3, 8006b42 <_SetAlpha+0x24>
 8006b32:	aa02      	add	r2, sp, #8
 8006b34:	629d      	str	r5, [r3, #40]	; 0x28
 8006b36:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006b3a:	69a0      	ldr	r0, [r4, #24]
 8006b3c:	210a      	movs	r1, #10
 8006b3e:	f7fd ff1d 	bl	800497c <LCD_X_DisplayDriver>
 8006b42:	b003      	add	sp, #12
 8006b44:	bd30      	pop	{r4, r5, pc}

08006b46 <_SetVRAMAddr>:
 8006b46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	3008      	adds	r0, #8
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	460d      	mov	r5, r1
 8006b52:	f7ff ff6d 	bl	8006a30 <_InitOnce.isra.4>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	b143      	cbz	r3, 8006b6c <_SetVRAMAddr+0x26>
 8006b5a:	aa02      	add	r2, sp, #8
 8006b5c:	601d      	str	r5, [r3, #0]
 8006b5e:	605d      	str	r5, [r3, #4]
 8006b60:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006b64:	69a0      	ldr	r0, [r4, #24]
 8006b66:	2102      	movs	r1, #2
 8006b68:	f7fd ff08 	bl	800497c <LCD_X_DisplayDriver>
 8006b6c:	b003      	add	sp, #12
 8006b6e:	bd30      	pop	{r4, r5, pc}

08006b70 <_CopyBuffer>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4605      	mov	r5, r0
 8006b76:	3008      	adds	r0, #8
 8006b78:	460e      	mov	r6, r1
 8006b7a:	4617      	mov	r7, r2
 8006b7c:	f7ff ff58 	bl	8006a30 <_InitOnce.isra.4>
 8006b80:	68ac      	ldr	r4, [r5, #8]
 8006b82:	b1e4      	cbz	r4, 8006bbe <_CopyBuffer+0x4e>
 8006b84:	42be      	cmp	r6, r7
 8006b86:	d01a      	beq.n	8006bbe <_CopyBuffer+0x4e>
 8006b88:	68eb      	ldr	r3, [r5, #12]
 8006b8a:	2108      	movs	r1, #8
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	4628      	mov	r0, r5
 8006b90:	4798      	blx	r3
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	68e2      	ldr	r2, [r4, #12]
 8006b96:	6861      	ldr	r1, [r4, #4]
 8006b98:	435a      	muls	r2, r3
 8006b9a:	4350      	muls	r0, r2
 8006b9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b9e:	08c2      	lsrs	r2, r0, #3
 8006ba0:	fb07 1802 	mla	r8, r7, r2, r1
 8006ba4:	b123      	cbz	r3, 8006bb0 <_CopyBuffer+0x40>
 8006ba6:	69a8      	ldr	r0, [r5, #24]
 8006ba8:	4631      	mov	r1, r6
 8006baa:	463a      	mov	r2, r7
 8006bac:	4798      	blx	r3
 8006bae:	e004      	b.n	8006bba <_CopyBuffer+0x4a>
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	fb06 1102 	mla	r1, r6, r2, r1
 8006bb6:	f003 fe95 	bl	800a8e4 <memcpy>
 8006bba:	f8c4 8000 	str.w	r8, [r4]
 8006bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006bc2 <_SetPos>:
 8006bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460e      	mov	r6, r1
 8006bcc:	4615      	mov	r5, r2
 8006bce:	2100      	movs	r1, #0
 8006bd0:	2218      	movs	r2, #24
 8006bd2:	4668      	mov	r0, sp
 8006bd4:	f003 feab 	bl	800a92e <memset>
 8006bd8:	f104 0008 	add.w	r0, r4, #8
 8006bdc:	f7ff ff28 	bl	8006a30 <_InitOnce.isra.4>
 8006be0:	68a7      	ldr	r7, [r4, #8]
 8006be2:	2f00      	cmp	r7, #0
 8006be4:	d05d      	beq.n	8006ca2 <_SetPos+0xe0>
 8006be6:	623e      	str	r6, [r7, #32]
 8006be8:	627d      	str	r5, [r7, #36]	; 0x24
 8006bea:	f000 f999 	bl	8006f20 <LCD_GetXSizeDisplay>
 8006bee:	4681      	mov	r9, r0
 8006bf0:	f000 f99c 	bl	8006f2c <LCD_GetYSizeDisplay>
 8006bf4:	68e3      	ldr	r3, [r4, #12]
 8006bf6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f8d7 b010 	ldr.w	fp, [r7, #16]
 8006c00:	4680      	mov	r8, r0
 8006c02:	2108      	movs	r1, #8
 8006c04:	4620      	mov	r0, r4
 8006c06:	4798      	blx	r3
 8006c08:	2308      	movs	r3, #8
 8006c0a:	3007      	adds	r0, #7
 8006c0c:	fb90 f0f3 	sdiv	r0, r0, r3
 8006c10:	2e00      	cmp	r6, #0
 8006c12:	9004      	str	r0, [sp, #16]
 8006c14:	eb0a 0306 	add.w	r3, sl, r6
 8006c18:	da07      	bge.n	8006c2a <_SetPos+0x68>
 8006c1a:	9a05      	ldr	r2, [sp, #20]
 8006c1c:	9302      	str	r3, [sp, #8]
 8006c1e:	fb00 2616 	mls	r6, r0, r6, r2
 8006c22:	2200      	movs	r2, #0
 8006c24:	9605      	str	r6, [sp, #20]
 8006c26:	9200      	str	r2, [sp, #0]
 8006c28:	e007      	b.n	8006c3a <_SetPos+0x78>
 8006c2a:	454b      	cmp	r3, r9
 8006c2c:	9600      	str	r6, [sp, #0]
 8006c2e:	bfca      	itet	gt
 8006c30:	ebc6 0609 	rsbgt	r6, r6, r9
 8006c34:	f8cd a008 	strle.w	sl, [sp, #8]
 8006c38:	9602      	strgt	r6, [sp, #8]
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	eb0b 0305 	add.w	r3, fp, r5
 8006c40:	da09      	bge.n	8006c56 <_SetPos+0x94>
 8006c42:	9a04      	ldr	r2, [sp, #16]
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	4355      	muls	r5, r2
 8006c48:	9a05      	ldr	r2, [sp, #20]
 8006c4a:	fb0a 2215 	mls	r2, sl, r5, r2
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	2200      	movs	r2, #0
 8006c52:	9201      	str	r2, [sp, #4]
 8006c54:	e007      	b.n	8006c66 <_SetPos+0xa4>
 8006c56:	4543      	cmp	r3, r8
 8006c58:	9501      	str	r5, [sp, #4]
 8006c5a:	bfca      	itet	gt
 8006c5c:	ebc5 0508 	rsbgt	r5, r5, r8
 8006c60:	f8cd b00c 	strle.w	fp, [sp, #12]
 8006c64:	9503      	strgt	r5, [sp, #12]
 8006c66:	9b02      	ldr	r3, [sp, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	dd08      	ble.n	8006c80 <_SetPos+0xbe>
 8006c6e:	9a03      	ldr	r2, [sp, #12]
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	dd05      	ble.n	8006c80 <_SetPos+0xbe>
 8006c74:	9a00      	ldr	r2, [sp, #0]
 8006c76:	454a      	cmp	r2, r9
 8006c78:	da02      	bge.n	8006c80 <_SetPos+0xbe>
 8006c7a:	9a01      	ldr	r2, [sp, #4]
 8006c7c:	4542      	cmp	r2, r8
 8006c7e:	db06      	blt.n	8006c8e <_SetPos+0xcc>
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10e      	bne.n	8006ca2 <_SetPos+0xe0>
 8006c84:	4620      	mov	r0, r4
 8006c86:	2100      	movs	r1, #0
 8006c88:	f7ff ff35 	bl	8006af6 <_SetVis>
 8006c8c:	e009      	b.n	8006ca2 <_SetPos+0xe0>
 8006c8e:	b91b      	cbnz	r3, 8006c98 <_SetPos+0xd6>
 8006c90:	4620      	mov	r0, r4
 8006c92:	2101      	movs	r1, #1
 8006c94:	f7ff ff2f 	bl	8006af6 <_SetVis>
 8006c98:	69a0      	ldr	r0, [r4, #24]
 8006c9a:	2108      	movs	r1, #8
 8006c9c:	466a      	mov	r2, sp
 8006c9e:	f7fd fe6d 	bl	800497c <LCD_X_DisplayDriver>
 8006ca2:	b007      	add	sp, #28
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ca8 <_SetSize>:
 8006ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006caa:	4605      	mov	r5, r0
 8006cac:	2300      	movs	r3, #0
 8006cae:	3008      	adds	r0, #8
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	4617      	mov	r7, r2
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	f7ff feba 	bl	8006a30 <_InitOnce.isra.4>
 8006cbc:	68ac      	ldr	r4, [r5, #8]
 8006cbe:	b194      	cbz	r4, 8006ce6 <_SetSize+0x3e>
 8006cc0:	69e3      	ldr	r3, [r4, #28]
 8006cc2:	b93b      	cbnz	r3, 8006cd4 <_SetSize+0x2c>
 8006cc4:	69a8      	ldr	r0, [r5, #24]
 8006cc6:	f000 f8dd 	bl	8006e84 <LCD_GetSwapXYEx>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	bf0c      	ite	eq
 8006cce:	4630      	moveq	r0, r6
 8006cd0:	4638      	movne	r0, r7
 8006cd2:	61e0      	str	r0, [r4, #28]
 8006cd4:	60e6      	str	r6, [r4, #12]
 8006cd6:	6127      	str	r7, [r4, #16]
 8006cd8:	69a8      	ldr	r0, [r5, #24]
 8006cda:	2107      	movs	r1, #7
 8006cdc:	466a      	mov	r2, sp
 8006cde:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8006ce2:	f7fd fe4b 	bl	800497c <LCD_X_DisplayDriver>
 8006ce6:	b003      	add	sp, #12
 8006ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cea <_SetVSize>:
 8006cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cec:	4606      	mov	r6, r0
 8006cee:	3008      	adds	r0, #8
 8006cf0:	460d      	mov	r5, r1
 8006cf2:	4617      	mov	r7, r2
 8006cf4:	f7ff fe9c 	bl	8006a30 <_InitOnce.isra.4>
 8006cf8:	68b4      	ldr	r4, [r6, #8]
 8006cfa:	b144      	cbz	r4, 8006d0e <_SetVSize+0x24>
 8006cfc:	69b0      	ldr	r0, [r6, #24]
 8006cfe:	f000 f8c1 	bl	8006e84 <LCD_GetSwapXYEx>
 8006d02:	6165      	str	r5, [r4, #20]
 8006d04:	61a7      	str	r7, [r4, #24]
 8006d06:	b108      	cbz	r0, 8006d0c <_SetVSize+0x22>
 8006d08:	61e7      	str	r7, [r4, #28]
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0c:	61e5      	str	r5, [r4, #28]
 8006d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d10 <LCD_SetVRAMAddrEx>:
 8006d10:	b513      	push	{r0, r1, r4, lr}
 8006d12:	460c      	mov	r4, r1
 8006d14:	f000 fc08 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006d18:	9001      	str	r0, [sp, #4]
 8006d1a:	b908      	cbnz	r0, 8006d20 <LCD_SetVRAMAddrEx+0x10>
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	e00b      	b.n	8006d38 <LCD_SetVRAMAddrEx+0x28>
 8006d20:	68c3      	ldr	r3, [r0, #12]
 8006d22:	2109      	movs	r1, #9
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	a801      	add	r0, sp, #4
 8006d28:	4798      	blx	r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d0f5      	beq.n	8006d1c <LCD_SetVRAMAddrEx+0xc>
 8006d30:	9801      	ldr	r0, [sp, #4]
 8006d32:	4621      	mov	r1, r4
 8006d34:	4798      	blx	r3
 8006d36:	2000      	movs	r0, #0
 8006d38:	b002      	add	sp, #8
 8006d3a:	bd10      	pop	{r4, pc}

08006d3c <LCD_SetVSizeEx>:
 8006d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d3e:	460d      	mov	r5, r1
 8006d40:	4614      	mov	r4, r2
 8006d42:	f000 fbf1 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006d46:	9001      	str	r0, [sp, #4]
 8006d48:	b908      	cbnz	r0, 8006d4e <LCD_SetVSizeEx+0x12>
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	e00c      	b.n	8006d68 <LCD_SetVSizeEx+0x2c>
 8006d4e:	68c3      	ldr	r3, [r0, #12]
 8006d50:	210a      	movs	r1, #10
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	a801      	add	r0, sp, #4
 8006d56:	4798      	blx	r3
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d0f5      	beq.n	8006d4a <LCD_SetVSizeEx+0xe>
 8006d5e:	9801      	ldr	r0, [sp, #4]
 8006d60:	4629      	mov	r1, r5
 8006d62:	4622      	mov	r2, r4
 8006d64:	4798      	blx	r3
 8006d66:	2000      	movs	r0, #0
 8006d68:	b003      	add	sp, #12
 8006d6a:	bd30      	pop	{r4, r5, pc}

08006d6c <LCD_SetSizeEx>:
 8006d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d6e:	460d      	mov	r5, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	f000 fbd9 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006d76:	9001      	str	r0, [sp, #4]
 8006d78:	b908      	cbnz	r0, 8006d7e <LCD_SetSizeEx+0x12>
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	e00c      	b.n	8006d98 <LCD_SetSizeEx+0x2c>
 8006d7e:	68c3      	ldr	r3, [r0, #12]
 8006d80:	210b      	movs	r1, #11
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	a801      	add	r0, sp, #4
 8006d86:	4798      	blx	r3
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0f5      	beq.n	8006d7a <LCD_SetSizeEx+0xe>
 8006d8e:	9801      	ldr	r0, [sp, #4]
 8006d90:	4629      	mov	r1, r5
 8006d92:	4622      	mov	r2, r4
 8006d94:	4798      	blx	r3
 8006d96:	2000      	movs	r0, #0
 8006d98:	b003      	add	sp, #12
 8006d9a:	bd30      	pop	{r4, r5, pc}

08006d9c <LCD_SetLUTEntryEx>:
 8006d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d9e:	460d      	mov	r5, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	f000 fbc1 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006da6:	9001      	str	r0, [sp, #4]
 8006da8:	b908      	cbnz	r0, 8006dae <LCD_SetLUTEntryEx+0x12>
 8006daa:	2001      	movs	r0, #1
 8006dac:	e00c      	b.n	8006dc8 <LCD_SetLUTEntryEx+0x2c>
 8006dae:	68c3      	ldr	r3, [r0, #12]
 8006db0:	2110      	movs	r1, #16
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	a801      	add	r0, sp, #4
 8006db6:	4798      	blx	r3
 8006db8:	4603      	mov	r3, r0
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0f5      	beq.n	8006daa <LCD_SetLUTEntryEx+0xe>
 8006dbe:	9801      	ldr	r0, [sp, #4]
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4798      	blx	r3
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	b003      	add	sp, #12
 8006dca:	bd30      	pop	{r4, r5, pc}

08006dcc <LCD_GetPosEx>:
 8006dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dce:	460d      	mov	r5, r1
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	f000 fba9 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006dd6:	9001      	str	r0, [sp, #4]
 8006dd8:	b908      	cbnz	r0, 8006dde <LCD_GetPosEx+0x12>
 8006dda:	2001      	movs	r0, #1
 8006ddc:	e00c      	b.n	8006df8 <LCD_GetPosEx+0x2c>
 8006dde:	68c3      	ldr	r3, [r0, #12]
 8006de0:	2104      	movs	r1, #4
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	a801      	add	r0, sp, #4
 8006de6:	4798      	blx	r3
 8006de8:	4603      	mov	r3, r0
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d0f5      	beq.n	8006dda <LCD_GetPosEx+0xe>
 8006dee:	9801      	ldr	r0, [sp, #4]
 8006df0:	4629      	mov	r1, r5
 8006df2:	4622      	mov	r2, r4
 8006df4:	4798      	blx	r3
 8006df6:	2000      	movs	r0, #0
 8006df8:	b003      	add	sp, #12
 8006dfa:	bd30      	pop	{r4, r5, pc}

08006dfc <LCD_SetDevFunc>:
 8006dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dfe:	460d      	mov	r5, r1
 8006e00:	4614      	mov	r4, r2
 8006e02:	f000 fb91 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006e06:	9001      	str	r0, [sp, #4]
 8006e08:	b908      	cbnz	r0, 8006e0e <LCD_SetDevFunc+0x12>
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	e00c      	b.n	8006e28 <LCD_SetDevFunc+0x2c>
 8006e0e:	68c3      	ldr	r3, [r0, #12]
 8006e10:	2116      	movs	r1, #22
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	a801      	add	r0, sp, #4
 8006e16:	4798      	blx	r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d0f5      	beq.n	8006e0a <LCD_SetDevFunc+0xe>
 8006e1e:	9801      	ldr	r0, [sp, #4]
 8006e20:	4629      	mov	r1, r5
 8006e22:	4622      	mov	r2, r4
 8006e24:	4798      	blx	r3
 8006e26:	2000      	movs	r0, #0
 8006e28:	b003      	add	sp, #12
 8006e2a:	bd30      	pop	{r4, r5, pc}

08006e2c <_GetDevProp>:
 8006e2c:	2801      	cmp	r0, #1
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	460c      	mov	r4, r1
 8006e32:	dc08      	bgt.n	8006e46 <_GetDevProp+0x1a>
 8006e34:	f000 fb78 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006e38:	b120      	cbz	r0, 8006e44 <_GetDevProp+0x18>
 8006e3a:	68c3      	ldr	r3, [r0, #12]
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	4798      	blx	r3
 8006e42:	bd10      	pop	{r4, pc}
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	2000      	movs	r0, #0
 8006e48:	bd10      	pop	{r4, pc}

08006e4a <_GetMaxValue>:
 8006e4a:	b538      	push	{r3, r4, r5, lr}
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4621      	mov	r1, r4
 8006e50:	2001      	movs	r0, #1
 8006e52:	f7ff ffeb 	bl	8006e2c <_GetDevProp>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4605      	mov	r5, r0
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7ff ffe6 	bl	8006e2c <_GetDevProp>
 8006e60:	42a8      	cmp	r0, r5
 8006e62:	bfb8      	it	lt
 8006e64:	4628      	movlt	r0, r5
 8006e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}

08006e6c <LCD_GetBitsPerPixelEx>:
 8006e6c:	2108      	movs	r1, #8
 8006e6e:	f7ff bfdd 	b.w	8006e2c <_GetDevProp>

08006e72 <LCD_GetNumColorsEx>:
 8006e72:	2109      	movs	r1, #9
 8006e74:	f7ff bfda 	b.w	8006e2c <_GetDevProp>

08006e78 <LCD_GetMirrorXEx>:
 8006e78:	210c      	movs	r1, #12
 8006e7a:	f7ff bfd7 	b.w	8006e2c <_GetDevProp>

08006e7e <LCD_GetMirrorYEx>:
 8006e7e:	210d      	movs	r1, #13
 8006e80:	f7ff bfd4 	b.w	8006e2c <_GetDevProp>

08006e84 <LCD_GetSwapXYEx>:
 8006e84:	210e      	movs	r1, #14
 8006e86:	f7ff bfd1 	b.w	8006e2c <_GetDevProp>
	...

08006e8c <LCD_GetBitsPerPixel>:
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <LCD_GetBitsPerPixel+0xc>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	7c58      	ldrb	r0, [r3, #17]
 8006e92:	f7ff bfeb 	b.w	8006e6c <LCD_GetBitsPerPixelEx>
 8006e96:	bf00      	nop
 8006e98:	20000010 	.word	0x20000010

08006e9c <LCD_GetNumColors>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <LCD_GetNumColors+0xc>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	7c58      	ldrb	r0, [r3, #17]
 8006ea2:	f7ff bfe6 	b.w	8006e72 <LCD_GetNumColorsEx>
 8006ea6:	bf00      	nop
 8006ea8:	20000010 	.word	0x20000010

08006eac <GUI_GetBitsPerPixelEx>:
 8006eac:	b508      	push	{r3, lr}
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <GUI_GetBitsPerPixelEx+0x14>)
 8006eb0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006eb4:	68c3      	ldr	r3, [r0, #12]
 8006eb6:	2108      	movs	r1, #8
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eba:	4798      	blx	r3
 8006ebc:	bd08      	pop	{r3, pc}
 8006ebe:	bf00      	nop
 8006ec0:	2001fca0 	.word	0x2001fca0

08006ec4 <LCD_GetPaletteEx>:
 8006ec4:	b508      	push	{r3, lr}
 8006ec6:	f000 fb2f 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8006eca:	b120      	cbz	r0, 8006ed6 <LCD_GetPaletteEx+0x12>
 8006ecc:	68c3      	ldr	r3, [r0, #12]
 8006ece:	2102      	movs	r1, #2
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	4798      	blx	r3
 8006ed4:	bd08      	pop	{r3, pc}
 8006ed6:	bd08      	pop	{r3, pc}

08006ed8 <LCD_GetPalette>:
 8006ed8:	4b02      	ldr	r3, [pc, #8]	; (8006ee4 <LCD_GetPalette+0xc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	7c58      	ldrb	r0, [r3, #17]
 8006ede:	f7ff bff1 	b.w	8006ec4 <LCD_GetPaletteEx>
 8006ee2:	bf00      	nop
 8006ee4:	20000010 	.word	0x20000010

08006ee8 <GUI_GetpfIndex2ColorEx>:
 8006ee8:	4b02      	ldr	r3, [pc, #8]	; (8006ef4 <GUI_GetpfIndex2ColorEx+0xc>)
 8006eea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	6858      	ldr	r0, [r3, #4]
 8006ef2:	4770      	bx	lr
 8006ef4:	2001fca0 	.word	0x2001fca0

08006ef8 <LCD_GetXSizeMax>:
 8006ef8:	2001      	movs	r0, #1
 8006efa:	f7ff bfa6 	b.w	8006e4a <_GetMaxValue>

08006efe <LCD_GetYSizeMax>:
 8006efe:	2002      	movs	r0, #2
 8006f00:	f7ff bfa3 	b.w	8006e4a <_GetMaxValue>

08006f04 <LCD_GetVXSizeMax>:
 8006f04:	2003      	movs	r0, #3
 8006f06:	f7ff bfa0 	b.w	8006e4a <_GetMaxValue>
	...

08006f0c <LCD_SetDisplaySize>:
 8006f0c:	4b02      	ldr	r3, [pc, #8]	; (8006f18 <LCD_SetDisplaySize+0xc>)
 8006f0e:	6018      	str	r0, [r3, #0]
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <LCD_SetDisplaySize+0x10>)
 8006f12:	6019      	str	r1, [r3, #0]
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	2001f848 	.word	0x2001f848
 8006f1c:	2001f844 	.word	0x2001f844

08006f20 <LCD_GetXSizeDisplay>:
 8006f20:	4b01      	ldr	r3, [pc, #4]	; (8006f28 <LCD_GetXSizeDisplay+0x8>)
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	2001f848 	.word	0x2001f848

08006f2c <LCD_GetYSizeDisplay>:
 8006f2c:	4b01      	ldr	r3, [pc, #4]	; (8006f34 <LCD_GetYSizeDisplay+0x8>)
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	2001f844 	.word	0x2001f844

08006f38 <_SetDrawMode>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <_SetDrawMode+0x24>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	7c1a      	ldrb	r2, [r3, #16]
 8006f40:	ea80 0102 	eor.w	r1, r0, r2
 8006f44:	0749      	lsls	r1, r1, #29
 8006f46:	d505      	bpl.n	8006f54 <_SetDrawMode+0x1c>
 8006f48:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006f4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006f4c:	6826      	ldr	r6, [r4, #0]
 8006f4e:	680d      	ldr	r5, [r1, #0]
 8006f50:	6025      	str	r5, [r4, #0]
 8006f52:	600e      	str	r6, [r1, #0]
 8006f54:	7418      	strb	r0, [r3, #16]
 8006f56:	4610      	mov	r0, r2
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000010 	.word	0x20000010

08006f60 <LCD_SetDrawMode>:
 8006f60:	b508      	push	{r3, lr}
 8006f62:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <LCD_SetDrawMode+0xc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4798      	blx	r3
 8006f6a:	bd08      	pop	{r3, pc}
 8006f6c:	2000000c 	.word	0x2000000c

08006f70 <LCD_DrawPixel>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <LCD_DrawPixel+0x54>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	460a      	mov	r2, r1
 8006f78:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8006f7c:	428a      	cmp	r2, r1
 8006f7e:	4604      	mov	r4, r0
 8006f80:	db1e      	blt.n	8006fc0 <LCD_DrawPixel+0x50>
 8006f82:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006f86:	428a      	cmp	r2, r1
 8006f88:	dc1a      	bgt.n	8006fc0 <LCD_DrawPixel+0x50>
 8006f8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8006f8e:	4288      	cmp	r0, r1
 8006f90:	db16      	blt.n	8006fc0 <LCD_DrawPixel+0x50>
 8006f92:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8006f96:	4288      	cmp	r0, r1
 8006f98:	dc12      	bgt.n	8006fc0 <LCD_DrawPixel+0x50>
 8006f9a:	7c19      	ldrb	r1, [r3, #16]
 8006f9c:	7c58      	ldrb	r0, [r3, #17]
 8006f9e:	f011 0f01 	tst.w	r1, #1
 8006fa2:	4909      	ldr	r1, [pc, #36]	; (8006fc8 <LCD_DrawPixel+0x58>)
 8006fa4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8006fa8:	d004      	beq.n	8006fb4 <LCD_DrawPixel+0x44>
 8006faa:	68c3      	ldr	r3, [r0, #12]
 8006fac:	4621      	mov	r1, r4
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4798      	blx	r3
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	68c1      	ldr	r1, [r0, #12]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	698d      	ldr	r5, [r1, #24]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	47a8      	blx	r5
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000010 	.word	0x20000010
 8006fc8:	2001fca0 	.word	0x2001fca0

08006fcc <LCD_DrawHLine>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4b10      	ldr	r3, [pc, #64]	; (8007010 <LCD_DrawHLine+0x44>)
 8006fd0:	681c      	ldr	r4, [r3, #0]
 8006fd2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8006fd6:	4299      	cmp	r1, r3
 8006fd8:	460d      	mov	r5, r1
 8006fda:	db17      	blt.n	800700c <LCD_DrawHLine+0x40>
 8006fdc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	dc13      	bgt.n	800700c <LCD_DrawHLine+0x40>
 8006fe4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8006fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fec:	4288      	cmp	r0, r1
 8006fee:	bfa8      	it	ge
 8006ff0:	4601      	movge	r1, r0
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	bfb8      	it	lt
 8006ff6:	4613      	movlt	r3, r2
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	db07      	blt.n	800700c <LCD_DrawHLine+0x40>
 8006ffc:	7c60      	ldrb	r0, [r4, #17]
 8006ffe:	4a05      	ldr	r2, [pc, #20]	; (8007014 <LCD_DrawHLine+0x48>)
 8007000:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007004:	68c2      	ldr	r2, [r0, #12]
 8007006:	6894      	ldr	r4, [r2, #8]
 8007008:	462a      	mov	r2, r5
 800700a:	47a0      	blx	r4
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	20000010 	.word	0x20000010
 8007014:	2001fca0 	.word	0x2001fca0

08007018 <LCD_FillRect>:
 8007018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800701a:	460e      	mov	r6, r1
 800701c:	4912      	ldr	r1, [pc, #72]	; (8007068 <LCD_FillRect+0x50>)
 800701e:	680c      	ldr	r4, [r1, #0]
 8007020:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8007024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007028:	4288      	cmp	r0, r1
 800702a:	bfa8      	it	ge
 800702c:	4601      	movge	r1, r0
 800702e:	42aa      	cmp	r2, r5
 8007030:	bfb8      	it	lt
 8007032:	4615      	movlt	r5, r2
 8007034:	428d      	cmp	r5, r1
 8007036:	db14      	blt.n	8007062 <LCD_FillRect+0x4a>
 8007038:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800703c:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8007040:	4296      	cmp	r6, r2
 8007042:	bfa8      	it	ge
 8007044:	4632      	movge	r2, r6
 8007046:	4283      	cmp	r3, r0
 8007048:	bfa8      	it	ge
 800704a:	4603      	movge	r3, r0
 800704c:	4293      	cmp	r3, r2
 800704e:	db08      	blt.n	8007062 <LCD_FillRect+0x4a>
 8007050:	7c64      	ldrb	r4, [r4, #17]
 8007052:	4806      	ldr	r0, [pc, #24]	; (800706c <LCD_FillRect+0x54>)
 8007054:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007058:	68c4      	ldr	r4, [r0, #12]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	6924      	ldr	r4, [r4, #16]
 800705e:	462b      	mov	r3, r5
 8007060:	47a0      	blx	r4
 8007062:	b002      	add	sp, #8
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	bf00      	nop
 8007068:	20000010 	.word	0x20000010
 800706c:	2001fca0 	.word	0x2001fca0

08007070 <LCD_DrawBitmap>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8007284 <LCD_DrawBitmap+0x214>
 8007078:	b091      	sub	sp, #68	; 0x44
 800707a:	f8dc 9000 	ldr.w	r9, [ip]
 800707e:	9207      	str	r2, [sp, #28]
 8007080:	4605      	mov	r5, r0
 8007082:	4688      	mov	r8, r1
 8007084:	469b      	mov	fp, r3
 8007086:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007088:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800708a:	f1b9 0f00 	cmp.w	r9, #0
 800708e:	d00c      	beq.n	80070aa <LCD_DrawBitmap+0x3a>
 8007090:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007092:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007094:	9500      	str	r5, [sp, #0]
 8007096:	9701      	str	r7, [sp, #4]
 8007098:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800709a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800709c:	9602      	str	r6, [sp, #8]
 800709e:	9503      	str	r5, [sp, #12]
 80070a0:	9404      	str	r4, [sp, #16]
 80070a2:	9705      	str	r7, [sp, #20]
 80070a4:	f8d9 4000 	ldr.w	r4, [r9]
 80070a8:	e081      	b.n	80071ae <LCD_DrawBitmap+0x13e>
 80070aa:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80070ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80070ae:	ea47 0300 	orr.w	r3, r7, r0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d17d      	bne.n	80071b2 <LCD_DrawBitmap+0x142>
 80070b6:	4b71      	ldr	r3, [pc, #452]	; (800727c <LCD_DrawBitmap+0x20c>)
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80070be:	1a53      	subs	r3, r2, r1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dd08      	ble.n	80070d6 <LCD_DrawBitmap+0x66>
 80070c4:	ebc3 010b 	rsb	r1, r3, fp
 80070c8:	2900      	cmp	r1, #0
 80070ca:	f340 80d4 	ble.w	8007276 <LCD_DrawBitmap+0x206>
 80070ce:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80070d0:	fb07 4403 	mla	r4, r7, r3, r4
 80070d4:	e001      	b.n	80070da <LCD_DrawBitmap+0x6a>
 80070d6:	4659      	mov	r1, fp
 80070d8:	4642      	mov	r2, r8
 80070da:	44d8      	add	r8, fp
 80070dc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80070e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80070e4:	ebc3 0808 	rsb	r8, r3, r8
 80070e8:	f1b8 0f00 	cmp.w	r8, #0
 80070ec:	dd04      	ble.n	80070f8 <LCD_DrawBitmap+0x88>
 80070ee:	ebc8 0101 	rsb	r1, r8, r1
 80070f2:	2900      	cmp	r1, #0
 80070f4:	f340 80bf 	ble.w	8007276 <LCD_DrawBitmap+0x206>
 80070f8:	9b07      	ldr	r3, [sp, #28]
 80070fa:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 80070fe:	442b      	add	r3, r5
 8007100:	3b01      	subs	r3, #1
 8007102:	ebcc 0303 	rsb	r3, ip, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	dd02      	ble.n	8007110 <LCD_DrawBitmap+0xa0>
 800710a:	9f07      	ldr	r7, [sp, #28]
 800710c:	1aff      	subs	r7, r7, r3
 800710e:	9707      	str	r7, [sp, #28]
 8007110:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8007114:	4565      	cmp	r5, ip
 8007116:	da33      	bge.n	8007180 <LCD_DrawBitmap+0x110>
 8007118:	9f07      	ldr	r7, [sp, #28]
 800711a:	ebc5 030c 	rsb	r3, r5, ip
 800711e:	1aff      	subs	r7, r7, r3
 8007120:	2e08      	cmp	r6, #8
 8007122:	9707      	str	r7, [sp, #28]
 8007124:	d027      	beq.n	8007176 <LCD_DrawBitmap+0x106>
 8007126:	dc0d      	bgt.n	8007144 <LCD_DrawBitmap+0xd4>
 8007128:	2e02      	cmp	r6, #2
 800712a:	d014      	beq.n	8007156 <LCD_DrawBitmap+0xe6>
 800712c:	2e04      	cmp	r6, #4
 800712e:	d01a      	beq.n	8007166 <LCD_DrawBitmap+0xf6>
 8007130:	2e01      	cmp	r6, #1
 8007132:	d126      	bne.n	8007182 <LCD_DrawBitmap+0x112>
 8007134:	f023 0c07 	bic.w	ip, r3, #7
 8007138:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800713c:	4465      	add	r5, ip
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	e01e      	b.n	8007182 <LCD_DrawBitmap+0x112>
 8007144:	2e18      	cmp	r6, #24
 8007146:	d018      	beq.n	800717a <LCD_DrawBitmap+0x10a>
 8007148:	2e20      	cmp	r6, #32
 800714a:	d016      	beq.n	800717a <LCD_DrawBitmap+0x10a>
 800714c:	2e10      	cmp	r6, #16
 800714e:	d118      	bne.n	8007182 <LCD_DrawBitmap+0x112>
 8007150:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007154:	e013      	b.n	800717e <LCD_DrawBitmap+0x10e>
 8007156:	f023 0c03 	bic.w	ip, r3, #3
 800715a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800715e:	4465      	add	r5, ip
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	e00d      	b.n	8007182 <LCD_DrawBitmap+0x112>
 8007166:	f023 0c01 	bic.w	ip, r3, #1
 800716a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800716e:	4465      	add	r5, ip
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	e005      	b.n	8007182 <LCD_DrawBitmap+0x112>
 8007176:	441c      	add	r4, r3
 8007178:	e001      	b.n	800717e <LCD_DrawBitmap+0x10e>
 800717a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800717e:	4665      	mov	r5, ip
 8007180:	2300      	movs	r3, #0
 8007182:	9f07      	ldr	r7, [sp, #28]
 8007184:	2f00      	cmp	r7, #0
 8007186:	dd76      	ble.n	8007276 <LCD_DrawBitmap+0x206>
 8007188:	f890 e011 	ldrb.w	lr, [r0, #17]
 800718c:	483c      	ldr	r0, [pc, #240]	; (8007280 <LCD_DrawBitmap+0x210>)
 800718e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8007190:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8007194:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8007198:	9403      	str	r4, [sp, #12]
 800719a:	e88d 0042 	stmia.w	sp, {r1, r6}
 800719e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	9702      	str	r7, [sp, #8]
 80071a4:	9405      	str	r4, [sp, #20]
 80071a6:	f8de 4004 	ldr.w	r4, [lr, #4]
 80071aa:	9b07      	ldr	r3, [sp, #28]
 80071ac:	4629      	mov	r1, r5
 80071ae:	47a0      	blx	r4
 80071b0:	e061      	b.n	8007276 <LCD_DrawBitmap+0x206>
 80071b2:	f1c6 0708 	rsb	r7, r6, #8
 80071b6:	970e      	str	r7, [sp, #56]	; 0x38
 80071b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80071bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80071be:	455f      	cmp	r7, fp
 80071c0:	da59      	bge.n	8007276 <LCD_DrawBitmap+0x206>
 80071c2:	4b2e      	ldr	r3, [pc, #184]	; (800727c <LCD_DrawBitmap+0x20c>)
 80071c4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4447      	add	r7, r8
 80071ca:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80071ce:	970c      	str	r7, [sp, #48]	; 0x30
 80071d0:	3f01      	subs	r7, #1
 80071d2:	4297      	cmp	r7, r2
 80071d4:	970d      	str	r7, [sp, #52]	; 0x34
 80071d6:	db46      	blt.n	8007266 <LCD_DrawBitmap+0x1f6>
 80071d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80071dc:	4598      	cmp	r8, r3
 80071de:	dc42      	bgt.n	8007266 <LCD_DrawBitmap+0x1f6>
 80071e0:	f04f 0a00 	mov.w	sl, #0
 80071e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80071e6:	46ac      	mov	ip, r5
 80071e8:	4657      	mov	r7, sl
 80071ea:	9807      	ldr	r0, [sp, #28]
 80071ec:	4287      	cmp	r7, r0
 80071ee:	da3a      	bge.n	8007266 <LCD_DrawBitmap+0x1f6>
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	d106      	bne.n	8007204 <LCD_DrawBitmap+0x194>
 80071f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071f8:	f890 9000 	ldrb.w	r9, [r0]
 80071fc:	3001      	adds	r0, #1
 80071fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8007200:	f04f 0a08 	mov.w	sl, #8
 8007204:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007206:	4a1d      	ldr	r2, [pc, #116]	; (800727c <LCD_DrawBitmap+0x20c>)
 8007208:	fa49 f301 	asr.w	r3, r9, r1
 800720c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8007210:	fa09 f906 	lsl.w	r9, r9, r6
 8007214:	fa5f f989 	uxtb.w	r9, r9
 8007218:	ebc6 0a0a 	rsb	sl, r6, sl
 800721c:	d103      	bne.n	8007226 <LCD_DrawBitmap+0x1b6>
 800721e:	6810      	ldr	r0, [r2, #0]
 8007220:	7c00      	ldrb	r0, [r0, #16]
 8007222:	0780      	lsls	r0, r0, #30
 8007224:	d41b      	bmi.n	800725e <LCD_DrawBitmap+0x1ee>
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800722a:	6810      	ldr	r0, [r2, #0]
 800722c:	900f      	str	r0, [sp, #60]	; 0x3c
 800722e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007230:	b110      	cbz	r0, 8007238 <LCD_DrawBitmap+0x1c8>
 8007232:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8007236:	e000      	b.n	800723a <LCD_DrawBitmap+0x1ca>
 8007238:	b2db      	uxtb	r3, r3
 800723a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	1e4a      	subs	r2, r1, #1
 8007240:	4462      	add	r2, ip
 8007242:	4660      	mov	r0, ip
 8007244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007246:	f8cd c020 	str.w	ip, [sp, #32]
 800724a:	4641      	mov	r1, r8
 800724c:	f7ff fee4 	bl	8007018 <LCD_FillRect>
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <LCD_DrawBitmap+0x20c>)
 8007252:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8dd c020 	ldr.w	ip, [sp, #32]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007260:	3701      	adds	r7, #1
 8007262:	449c      	add	ip, r3
 8007264:	e7c1      	b.n	80071ea <LCD_DrawBitmap+0x17a>
 8007266:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007268:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800726c:	3701      	adds	r7, #1
 800726e:	970a      	str	r7, [sp, #40]	; 0x28
 8007270:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8007272:	443c      	add	r4, r7
 8007274:	e7a2      	b.n	80071bc <LCD_DrawBitmap+0x14c>
 8007276:	b011      	add	sp, #68	; 0x44
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	20000010 	.word	0x20000010
 8007280:	2001fca0 	.word	0x2001fca0
 8007284:	2001fc74 	.word	0x2001fc74

08007288 <LCD_SetClipRectMax>:
 8007288:	b508      	push	{r3, lr}
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <LCD_SetClipRectMax+0x18>)
 800728c:	6819      	ldr	r1, [r3, #0]
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <LCD_SetClipRectMax+0x1c>)
 8007290:	7c4a      	ldrb	r2, [r1, #17]
 8007292:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007296:	68c3      	ldr	r3, [r0, #12]
 8007298:	3108      	adds	r1, #8
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	4798      	blx	r3
 800729e:	bd08      	pop	{r3, pc}
 80072a0:	20000010 	.word	0x20000010
 80072a4:	2001fca0 	.word	0x2001fca0

080072a8 <emWin_LCD_Init>:
 80072a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072aa:	f7ff ffed 	bl	8007288 <LCD_SetClipRectMax>
 80072ae:	f002 fae9 	bl	8009884 <LCD_InitColors>
 80072b2:	4604      	mov	r4, r0
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d13d      	bne.n	8007334 <emWin_LCD_Init+0x8c>
 80072b8:	4605      	mov	r5, r0
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f934 	bl	8007528 <GUI_DEVICE__GetpDriver>
 80072c0:	9001      	str	r0, [sp, #4]
 80072c2:	b148      	cbz	r0, 80072d8 <emWin_LCD_Init+0x30>
 80072c4:	68c3      	ldr	r3, [r0, #12]
 80072c6:	210c      	movs	r1, #12
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	a801      	add	r0, sp, #4
 80072cc:	4798      	blx	r3
 80072ce:	4603      	mov	r3, r0
 80072d0:	b370      	cbz	r0, 8007330 <emWin_LCD_Init+0x88>
 80072d2:	9801      	ldr	r0, [sp, #4]
 80072d4:	4798      	blx	r3
 80072d6:	4304      	orrs	r4, r0
 80072d8:	3501      	adds	r5, #1
 80072da:	2d02      	cmp	r5, #2
 80072dc:	d1ed      	bne.n	80072ba <emWin_LCD_Init+0x12>
 80072de:	bb4c      	cbnz	r4, 8007334 <emWin_LCD_Init+0x8c>
 80072e0:	f002 faec 	bl	80098bc <LCD_InitLUT>
 80072e4:	2401      	movs	r4, #1
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 f91e 	bl	8007528 <GUI_DEVICE__GetpDriver>
 80072ec:	9001      	str	r0, [sp, #4]
 80072ee:	b1d0      	cbz	r0, 8007326 <emWin_LCD_Init+0x7e>
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 f8c1 	bl	8007478 <GUI_SelectLayer>
 80072f6:	2004      	movs	r0, #4
 80072f8:	f7ff fe32 	bl	8006f60 <LCD_SetDrawMode>
 80072fc:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007300:	2000      	movs	r0, #0
 8007302:	4601      	mov	r1, r0
 8007304:	4613      	mov	r3, r2
 8007306:	f7ff fe87 	bl	8007018 <LCD_FillRect>
 800730a:	2000      	movs	r0, #0
 800730c:	f7ff fe28 	bl	8006f60 <LCD_SetDrawMode>
 8007310:	a802      	add	r0, sp, #8
 8007312:	210e      	movs	r1, #14
 8007314:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	b108      	cbz	r0, 8007326 <emWin_LCD_Init+0x7e>
 8007322:	9801      	ldr	r0, [sp, #4]
 8007324:	4798      	blx	r3
 8007326:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800732a:	d2dc      	bcs.n	80072e6 <emWin_LCD_Init+0x3e>
 800732c:	2000      	movs	r0, #0
 800732e:	e002      	b.n	8007336 <emWin_LCD_Init+0x8e>
 8007330:	2001      	movs	r0, #1
 8007332:	e000      	b.n	8007336 <emWin_LCD_Init+0x8e>
 8007334:	4620      	mov	r0, r4
 8007336:	b003      	add	sp, #12
 8007338:	bd30      	pop	{r4, r5, pc}
	...

0800733c <LCD_Color2Index>:
 800733c:	b508      	push	{r3, lr}
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <LCD_Color2Index+0x18>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	7c5a      	ldrb	r2, [r3, #17]
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <LCD_Color2Index+0x1c>)
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4798      	blx	r3
 8007350:	bd08      	pop	{r3, pc}
 8007352:	bf00      	nop
 8007354:	20000010 	.word	0x20000010
 8007358:	2001fca0 	.word	0x2001fca0

0800735c <LCD_Index2Color>:
 800735c:	b508      	push	{r3, lr}
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <LCD_Index2Color+0x18>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	7c5a      	ldrb	r2, [r3, #17]
 8007364:	4b04      	ldr	r3, [pc, #16]	; (8007378 <LCD_Index2Color+0x1c>)
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	4798      	blx	r3
 8007370:	bd08      	pop	{r3, pc}
 8007372:	bf00      	nop
 8007374:	20000010 	.word	0x20000010
 8007378:	2001fca0 	.word	0x2001fca0

0800737c <LCD_SetColorIndex>:
 800737c:	4b04      	ldr	r3, [pc, #16]	; (8007390 <LCD_SetColorIndex+0x14>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	7c1a      	ldrb	r2, [r3, #16]
 8007382:	0752      	lsls	r2, r2, #29
 8007384:	bf4c      	ite	mi
 8007386:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8007388:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800738a:	6018      	str	r0, [r3, #0]
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000010 	.word	0x20000010

08007394 <_SetColor>:
 8007394:	b508      	push	{r3, lr}
 8007396:	4b06      	ldr	r3, [pc, #24]	; (80073b0 <_SetColor+0x1c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800739c:	4281      	cmp	r1, r0
 800739e:	d006      	beq.n	80073ae <_SetColor+0x1a>
 80073a0:	6318      	str	r0, [r3, #48]	; 0x30
 80073a2:	f7ff ffcb 	bl	800733c <LCD_Color2Index>
 80073a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073aa:	f7ff bfe7 	b.w	800737c <LCD_SetColorIndex>
 80073ae:	bd08      	pop	{r3, pc}
 80073b0:	20000010 	.word	0x20000010

080073b4 <LCD_SetBkColorIndex>:
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <LCD_SetBkColorIndex+0x14>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	7c1a      	ldrb	r2, [r3, #16]
 80073ba:	0752      	lsls	r2, r2, #29
 80073bc:	bf4c      	ite	mi
 80073be:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80073c0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80073c2:	6018      	str	r0, [r3, #0]
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000010 	.word	0x20000010

080073cc <_SetBkColor>:
 80073cc:	b508      	push	{r3, lr}
 80073ce:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <_SetBkColor+0x1c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073d4:	4281      	cmp	r1, r0
 80073d6:	d006      	beq.n	80073e6 <_SetBkColor+0x1a>
 80073d8:	6358      	str	r0, [r3, #52]	; 0x34
 80073da:	f7ff ffaf 	bl	800733c <LCD_Color2Index>
 80073de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073e2:	f7ff bfe7 	b.w	80073b4 <LCD_SetBkColorIndex>
 80073e6:	bd08      	pop	{r3, pc}
 80073e8:	20000010 	.word	0x20000010

080073ec <LCD_SetBkColor>:
 80073ec:	b508      	push	{r3, lr}
 80073ee:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <LCD_SetBkColor+0xc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4798      	blx	r3
 80073f6:	bd08      	pop	{r3, pc}
 80073f8:	2000000c 	.word	0x2000000c

080073fc <LCD_SetColor>:
 80073fc:	b508      	push	{r3, lr}
 80073fe:	4b02      	ldr	r3, [pc, #8]	; (8007408 <LCD_SetColor+0xc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4798      	blx	r3
 8007406:	bd08      	pop	{r3, pc}
 8007408:	2000000c 	.word	0x2000000c

0800740c <GUI__memset>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	b12a      	cbz	r2, 800741c <GUI__memset+0x10>
 8007410:	0783      	lsls	r3, r0, #30
 8007412:	d003      	beq.n	800741c <GUI__memset+0x10>
 8007414:	f800 1b01 	strb.w	r1, [r0], #1
 8007418:	3a01      	subs	r2, #1
 800741a:	e7f8      	b.n	800740e <GUI__memset+0x2>
 800741c:	0893      	lsrs	r3, r2, #2
 800741e:	d101      	bne.n	8007424 <GUI__memset+0x18>
 8007420:	4402      	add	r2, r0
 8007422:	e017      	b.n	8007454 <GUI__memset+0x48>
 8007424:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8007428:	f002 0203 	and.w	r2, r2, #3
 800742c:	434c      	muls	r4, r1
 800742e:	2b03      	cmp	r3, #3
 8007430:	4605      	mov	r5, r0
 8007432:	dd06      	ble.n	8007442 <GUI__memset+0x36>
 8007434:	6004      	str	r4, [r0, #0]
 8007436:	6044      	str	r4, [r0, #4]
 8007438:	6084      	str	r4, [r0, #8]
 800743a:	60c4      	str	r4, [r0, #12]
 800743c:	3b04      	subs	r3, #4
 800743e:	3010      	adds	r0, #16
 8007440:	e7f5      	b.n	800742e <GUI__memset+0x22>
 8007442:	461e      	mov	r6, r3
 8007444:	b11b      	cbz	r3, 800744e <GUI__memset+0x42>
 8007446:	f845 4b04 	str.w	r4, [r5], #4
 800744a:	3b01      	subs	r3, #1
 800744c:	e7fa      	b.n	8007444 <GUI__memset+0x38>
 800744e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8007452:	e7e5      	b.n	8007420 <GUI__memset+0x14>
 8007454:	4290      	cmp	r0, r2
 8007456:	d002      	beq.n	800745e <GUI__memset+0x52>
 8007458:	f800 1b01 	strb.w	r1, [r0], #1
 800745c:	e7fa      	b.n	8007454 <GUI__memset+0x48>
 800745e:	bd70      	pop	{r4, r5, r6, pc}

08007460 <GUI_SetBkColor>:
 8007460:	f7ff bfc4 	b.w	80073ec <LCD_SetBkColor>

08007464 <GUI_GetLayerPosEx>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	460d      	mov	r5, r1
 8007468:	4614      	mov	r4, r2
 800746a:	f7ff fcaf 	bl	8006dcc <LCD_GetPosEx>
 800746e:	b110      	cbz	r0, 8007476 <GUI_GetLayerPosEx+0x12>
 8007470:	2300      	movs	r3, #0
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}

08007478 <GUI_SelectLayer>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4d08      	ldr	r5, [pc, #32]	; (800749c <GUI_SelectLayer+0x24>)
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	2801      	cmp	r0, #1
 8007480:	4604      	mov	r4, r0
 8007482:	7c5e      	ldrb	r6, [r3, #17]
 8007484:	d808      	bhi.n	8007498 <GUI_SelectLayer+0x20>
 8007486:	f000 f84f 	bl	8007528 <GUI_DEVICE__GetpDriver>
 800748a:	b128      	cbz	r0, 8007498 <GUI_SelectLayer+0x20>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	745c      	strb	r4, [r3, #17]
 8007490:	f000 f808 	bl	80074a4 <GUI_SelectLCD>
 8007494:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <GUI_SelectLayer+0x28>)
 8007496:	601c      	str	r4, [r3, #0]
 8007498:	4630      	mov	r0, r6
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	20000010 	.word	0x20000010
 80074a0:	2001fd98 	.word	0x2001fd98

080074a4 <GUI_SelectLCD>:
 80074a4:	b508      	push	{r3, lr}
 80074a6:	f002 f9c3 	bl	8009830 <LCD_SelectLCD>
 80074aa:	f002 f997 	bl	80097dc <LCD_UpdateColorIndices>
 80074ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074b2:	f001 bb79 	b.w	8008ba8 <WM_Activate>
	...

080074b8 <GUI_MULTIBUF_ConfirmEx>:
 80074b8:	4b08      	ldr	r3, [pc, #32]	; (80074dc <GUI_MULTIBUF_ConfirmEx+0x24>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf18      	it	ne
 80074c0:	2000      	movne	r0, #0
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <GUI_MULTIBUF_ConfirmEx+0x28>)
 80074c4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	db06      	blt.n	80074da <GUI_MULTIBUF_ConfirmEx+0x22>
 80074cc:	4a05      	ldr	r2, [pc, #20]	; (80074e4 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 80074ce:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074d6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80074da:	4770      	bx	lr
 80074dc:	2001f85c 	.word	0x2001f85c
 80074e0:	2001f854 	.word	0x2001f854
 80074e4:	2001f84c 	.word	0x2001f84c

080074e8 <GUI_MULTIBUF_ConfigEx>:
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <GUI_MULTIBUF_ConfigEx+0x18>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bf18      	it	ne
 80074f0:	2000      	movne	r0, #0
 80074f2:	4b04      	ldr	r3, [pc, #16]	; (8007504 <GUI_MULTIBUF_ConfigEx+0x1c>)
 80074f4:	2901      	cmp	r1, #1
 80074f6:	bfb8      	it	lt
 80074f8:	2101      	movlt	r1, #1
 80074fa:	5419      	strb	r1, [r3, r0]
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	2001f85c 	.word	0x2001f85c
 8007504:	2001fc70 	.word	0x2001fc70

08007508 <GUI_MULTIBUF_Confirm>:
 8007508:	4b02      	ldr	r3, [pc, #8]	; (8007514 <GUI_MULTIBUF_Confirm+0xc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4601      	mov	r1, r0
 800750e:	7c58      	ldrb	r0, [r3, #17]
 8007510:	f7ff bfd2 	b.w	80074b8 <GUI_MULTIBUF_ConfirmEx>
 8007514:	20000010 	.word	0x20000010

08007518 <GUI_MULTIBUF_Config>:
 8007518:	4b02      	ldr	r3, [pc, #8]	; (8007524 <GUI_MULTIBUF_Config+0xc>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4601      	mov	r1, r0
 800751e:	7c58      	ldrb	r0, [r3, #17]
 8007520:	f7ff bfe2 	b.w	80074e8 <GUI_MULTIBUF_ConfigEx>
 8007524:	20000010 	.word	0x20000010

08007528 <GUI_DEVICE__GetpDriver>:
 8007528:	2801      	cmp	r0, #1
 800752a:	dc09      	bgt.n	8007540 <GUI_DEVICE__GetpDriver+0x18>
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <GUI_DEVICE__GetpDriver+0x1c>)
 800752e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007532:	b120      	cbz	r0, 800753e <GUI_DEVICE__GetpDriver+0x16>
 8007534:	68c3      	ldr	r3, [r0, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	b11b      	cbz	r3, 8007542 <GUI_DEVICE__GetpDriver+0x1a>
 800753a:	6800      	ldr	r0, [r0, #0]
 800753c:	e7f9      	b.n	8007532 <GUI_DEVICE__GetpDriver+0xa>
 800753e:	4770      	bx	lr
 8007540:	2000      	movs	r0, #0
 8007542:	4770      	bx	lr
 8007544:	2001fca0 	.word	0x2001fca0

08007548 <GUI_DEVICE_Delete>:
 8007548:	f000 bb64 	b.w	8007c14 <GUI_ALLOC_FreeFixedBlock>

0800754c <GUI_DEVICE_Create>:
 800754c:	2b01      	cmp	r3, #1
 800754e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007550:	4606      	mov	r6, r0
 8007552:	460d      	mov	r5, r1
 8007554:	4617      	mov	r7, r2
 8007556:	461c      	mov	r4, r3
 8007558:	dd01      	ble.n	800755e <GUI_DEVICE_Create+0x12>
 800755a:	2000      	movs	r0, #0
 800755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800755e:	201c      	movs	r0, #28
 8007560:	f000 fcb8 	bl	8007ed4 <GUI_ALLOC_GetFixedBlock>
 8007564:	2800      	cmp	r0, #0
 8007566:	d0f8      	beq.n	800755a <GUI_DEVICE_Create+0xe>
 8007568:	b10d      	cbz	r5, 800756e <GUI_DEVICE_Create+0x22>
 800756a:	6105      	str	r5, [r0, #16]
 800756c:	e009      	b.n	8007582 <GUI_DEVICE_Create+0x36>
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <GUI_DEVICE_Create+0x48>)
 8007570:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8007574:	b129      	cbz	r1, 8007582 <GUI_DEVICE_Create+0x36>
 8007576:	680b      	ldr	r3, [r1, #0]
 8007578:	b10b      	cbz	r3, 800757e <GUI_DEVICE_Create+0x32>
 800757a:	4619      	mov	r1, r3
 800757c:	e7fb      	b.n	8007576 <GUI_DEVICE_Create+0x2a>
 800757e:	690b      	ldr	r3, [r1, #16]
 8007580:	6103      	str	r3, [r0, #16]
 8007582:	2300      	movs	r3, #0
 8007584:	6083      	str	r3, [r0, #8]
 8007586:	6184      	str	r4, [r0, #24]
 8007588:	8287      	strh	r7, [r0, #20]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	6043      	str	r3, [r0, #4]
 8007590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007592:	bf00      	nop
 8007594:	2001fca0 	.word	0x2001fca0

08007598 <GUI_DEVICE_Unlink>:
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <GUI_DEVICE_Unlink+0x28>)
 800759a:	6982      	ldr	r2, [r0, #24]
 800759c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a0:	4281      	cmp	r1, r0
 80075a2:	bf04      	itt	eq
 80075a4:	6801      	ldreq	r1, [r0, #0]
 80075a6:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 80075aa:	6843      	ldr	r3, [r0, #4]
 80075ac:	b10b      	cbz	r3, 80075b2 <GUI_DEVICE_Unlink+0x1a>
 80075ae:	6802      	ldr	r2, [r0, #0]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	6802      	ldr	r2, [r0, #0]
 80075b4:	b102      	cbz	r2, 80075b8 <GUI_DEVICE_Unlink+0x20>
 80075b6:	6053      	str	r3, [r2, #4]
 80075b8:	2300      	movs	r3, #0
 80075ba:	6003      	str	r3, [r0, #0]
 80075bc:	6043      	str	r3, [r0, #4]
 80075be:	4770      	bx	lr
 80075c0:	2001fca0 	.word	0x2001fca0

080075c4 <GUI_DEVICE_Link>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	b338      	cbz	r0, 8007618 <GUI_DEVICE_Link+0x54>
 80075c8:	6982      	ldr	r2, [r0, #24]
 80075ca:	2a01      	cmp	r2, #1
 80075cc:	dc24      	bgt.n	8007618 <GUI_DEVICE_Link+0x54>
 80075ce:	4919      	ldr	r1, [pc, #100]	; (8007634 <GUI_DEVICE_Link+0x70>)
 80075d0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80075d4:	460d      	mov	r5, r1
 80075d6:	b913      	cbnz	r3, 80075de <GUI_DEVICE_Link+0x1a>
 80075d8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80075dc:	e01a      	b.n	8007614 <GUI_DEVICE_Link+0x50>
 80075de:	6859      	ldr	r1, [r3, #4]
 80075e0:	b109      	cbz	r1, 80075e6 <GUI_DEVICE_Link+0x22>
 80075e2:	460b      	mov	r3, r1
 80075e4:	e7fb      	b.n	80075de <GUI_DEVICE_Link+0x1a>
 80075e6:	68c1      	ldr	r1, [r0, #12]
 80075e8:	680e      	ldr	r6, [r1, #0]
 80075ea:	68d9      	ldr	r1, [r3, #12]
 80075ec:	680c      	ldr	r4, [r1, #0]
 80075ee:	42b4      	cmp	r4, r6
 80075f0:	dd03      	ble.n	80075fa <GUI_DEVICE_Link+0x36>
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f8      	bne.n	80075ea <GUI_DEVICE_Link+0x26>
 80075f8:	e00e      	b.n	8007618 <GUI_DEVICE_Link+0x54>
 80075fa:	d102      	bne.n	8007602 <GUI_DEVICE_Link+0x3e>
 80075fc:	8a81      	ldrh	r1, [r0, #20]
 80075fe:	2901      	cmp	r1, #1
 8007600:	d011      	beq.n	8007626 <GUI_DEVICE_Link+0x62>
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	b199      	cbz	r1, 800762e <GUI_DEVICE_Link+0x6a>
 8007606:	6008      	str	r0, [r1, #0]
 8007608:	6041      	str	r1, [r0, #4]
 800760a:	6058      	str	r0, [r3, #4]
 800760c:	4298      	cmp	r0, r3
 800760e:	bf08      	it	eq
 8007610:	2300      	moveq	r3, #0
 8007612:	6003      	str	r3, [r0, #0]
 8007614:	2000      	movs	r0, #0
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	2001      	movs	r0, #1
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	68cb      	ldr	r3, [r1, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	42a3      	cmp	r3, r4
 8007622:	460b      	mov	r3, r1
 8007624:	dbed      	blt.n	8007602 <GUI_DEVICE_Link+0x3e>
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	2900      	cmp	r1, #0
 800762a:	d1f7      	bne.n	800761c <GUI_DEVICE_Link+0x58>
 800762c:	e7e9      	b.n	8007602 <GUI_DEVICE_Link+0x3e>
 800762e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8007632:	e7ea      	b.n	800760a <GUI_DEVICE_Link+0x46>
 8007634:	2001fca0 	.word	0x2001fca0

08007638 <GUI_DEVICE_CreateAndLink>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	461d      	mov	r5, r3
 800763c:	f7ff ff86 	bl	800754c <GUI_DEVICE_Create>
 8007640:	4604      	mov	r4, r0
 8007642:	b148      	cbz	r0, 8007658 <GUI_DEVICE_CreateAndLink+0x20>
 8007644:	f7ff ffbe 	bl	80075c4 <GUI_DEVICE_Link>
 8007648:	68e3      	ldr	r3, [r4, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	b923      	cbnz	r3, 8007658 <GUI_DEVICE_CreateAndLink+0x20>
 800764e:	4b03      	ldr	r3, [pc, #12]	; (800765c <GUI_DEVICE_CreateAndLink+0x24>)
 8007650:	3516      	adds	r5, #22
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8007658:	4620      	mov	r0, r4
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20000010 	.word	0x20000010

08007660 <_OnExit>:
 8007660:	b510      	push	{r4, lr}
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <_OnExit+0x20>)
 8007664:	4807      	ldr	r0, [pc, #28]	; (8007684 <_OnExit+0x24>)
 8007666:	2400      	movs	r4, #0
 8007668:	4621      	mov	r1, r4
 800766a:	2270      	movs	r2, #112	; 0x70
 800766c:	601c      	str	r4, [r3, #0]
 800766e:	f7ff fecd 	bl	800740c <GUI__memset>
 8007672:	4621      	mov	r1, r4
 8007674:	4804      	ldr	r0, [pc, #16]	; (8007688 <_OnExit+0x28>)
 8007676:	2208      	movs	r2, #8
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f7ff bec6 	b.w	800740c <GUI__memset>
 8007680:	2001f8dc 	.word	0x2001f8dc
 8007684:	2001f864 	.word	0x2001f864
 8007688:	2001fca0 	.word	0x2001fca0

0800768c <_InitContext>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d19      	ldr	r5, [pc, #100]	; (80076f4 <_InitContext+0x68>)
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	63da      	str	r2, [r3, #60]	; 0x3c
 8007696:	f103 0208 	add.w	r2, r3, #8
 800769a:	639b      	str	r3, [r3, #56]	; 0x38
 800769c:	641b      	str	r3, [r3, #64]	; 0x40
 800769e:	6142      	str	r2, [r0, #20]
 80076a0:	7c5a      	ldrb	r2, [r3, #17]
 80076a2:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <_InitContext+0x6c>)
 80076a4:	4604      	mov	r4, r0
 80076a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80076aa:	68c3      	ldr	r3, [r0, #12]
 80076ac:	f104 0108 	add.w	r1, r4, #8
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4798      	blx	r3
 80076b4:	4b11      	ldr	r3, [pc, #68]	; (80076fc <_InitContext+0x70>)
 80076b6:	6663      	str	r3, [r4, #100]	; 0x64
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <_InitContext+0x74>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	61e3      	str	r3, [r4, #28]
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	6163      	str	r3, [r4, #20]
 80076c4:	2301      	movs	r3, #1
 80076c6:	7623      	strb	r3, [r4, #24]
 80076c8:	f000 fd20 	bl	800810c <WM_GetDesktopWindow>
 80076cc:	2303      	movs	r3, #3
 80076ce:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80076d2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80076d6:	6323      	str	r3, [r4, #48]	; 0x30
 80076d8:	6363      	str	r3, [r4, #52]	; 0x34
 80076da:	64a0      	str	r0, [r4, #72]	; 0x48
 80076dc:	2000      	movs	r0, #0
 80076de:	f7ff fe85 	bl	80073ec <LCD_SetBkColor>
 80076e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80076e6:	f7ff fe89 	bl	80073fc <LCD_SetColor>
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <_InitContext+0x78>)
 80076ec:	4a06      	ldr	r2, [pc, #24]	; (8007708 <_InitContext+0x7c>)
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	20000010 	.word	0x20000010
 80076f8:	2001fca0 	.word	0x2001fca0
 80076fc:	0800b1d4 	.word	0x0800b1d4
 8007700:	20000014 	.word	0x20000014
 8007704:	2001fc98 	.word	0x2001fc98
 8007708:	0800b268 	.word	0x0800b268

0800770c <GUI_SetDefaultFont>:
 800770c:	4b01      	ldr	r3, [pc, #4]	; (8007714 <GUI_SetDefaultFont+0x8>)
 800770e:	6018      	str	r0, [r3, #0]
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000014 	.word	0x20000014

08007718 <GUI_ClearRect>:
 8007718:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	4607      	mov	r7, r0
 800771e:	2004      	movs	r0, #4
 8007720:	469a      	mov	sl, r3
 8007722:	460e      	mov	r6, r1
 8007724:	4691      	mov	r9, r2
 8007726:	f7ff fc1b 	bl	8006f60 <LCD_SetDrawMode>
 800772a:	4b13      	ldr	r3, [pc, #76]	; (8007778 <GUI_ClearRect+0x60>)
 800772c:	681c      	ldr	r4, [r3, #0]
 800772e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007730:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8007732:	442f      	add	r7, r5
 8007734:	4426      	add	r6, r4
 8007736:	4680      	mov	r8, r0
 8007738:	444d      	add	r5, r9
 800773a:	4454      	add	r4, sl
 800773c:	4668      	mov	r0, sp
 800773e:	f8ad 7000 	strh.w	r7, [sp]
 8007742:	f8ad 5004 	strh.w	r5, [sp, #4]
 8007746:	f8ad 6002 	strh.w	r6, [sp, #2]
 800774a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800774e:	f001 f9ad 	bl	8008aac <WM__InitIVRSearch>
 8007752:	b928      	cbnz	r0, 8007760 <GUI_ClearRect+0x48>
 8007754:	4640      	mov	r0, r8
 8007756:	f7ff fc03 	bl	8006f60 <LCD_SetDrawMode>
 800775a:	b002      	add	sp, #8
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	4638      	mov	r0, r7
 8007762:	4631      	mov	r1, r6
 8007764:	462a      	mov	r2, r5
 8007766:	4623      	mov	r3, r4
 8007768:	f7ff fc56 	bl	8007018 <LCD_FillRect>
 800776c:	f001 f8dc 	bl	8008928 <WM__GetNextIVR>
 8007770:	2800      	cmp	r0, #0
 8007772:	d1f5      	bne.n	8007760 <GUI_ClearRect+0x48>
 8007774:	e7ee      	b.n	8007754 <GUI_ClearRect+0x3c>
 8007776:	bf00      	nop
 8007778:	20000010 	.word	0x20000010

0800777c <GUI_Clear>:
 800777c:	b510      	push	{r4, lr}
 800777e:	2000      	movs	r0, #0
 8007780:	4601      	mov	r1, r0
 8007782:	f002 fb5f 	bl	8009e44 <GUI_GotoXY>
 8007786:	4804      	ldr	r0, [pc, #16]	; (8007798 <GUI_Clear+0x1c>)
 8007788:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800778c:	4601      	mov	r1, r0
 800778e:	4613      	mov	r3, r2
 8007790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007794:	f7ff bfc0 	b.w	8007718 <GUI_ClearRect>
 8007798:	ffffc001 	.word	0xffffc001

0800779c <GUI__RegisterExit>:
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	4b05      	ldr	r3, [pc, #20]	; (80077bc <GUI__RegisterExit+0x20>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	4b03      	ldr	r3, [pc, #12]	; (80077bc <GUI__RegisterExit+0x20>)
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	2001f860 	.word	0x2001f860

080077c0 <GUI__Config>:
 80077c0:	b508      	push	{r3, lr}
 80077c2:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <GUI__Config+0x24>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	b962      	cbnz	r2, 80077e2 <GUI__Config+0x22>
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	f7fc feea 	bl	80045a4 <GUI_X_Config>
 80077d0:	f7fd f892 	bl	80048f8 <LCD_X_Config>
 80077d4:	4804      	ldr	r0, [pc, #16]	; (80077e8 <GUI__Config+0x28>)
 80077d6:	4b05      	ldr	r3, [pc, #20]	; (80077ec <GUI__Config+0x2c>)
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80077de:	f7ff bfdd 	b.w	800779c <GUI__RegisterExit>
 80077e2:	bd08      	pop	{r3, pc}
 80077e4:	2001f8dc 	.word	0x2001f8dc
 80077e8:	2001f8d4 	.word	0x2001f8d4
 80077ec:	08007661 	.word	0x08007661

080077f0 <GUI_Init>:
 80077f0:	b590      	push	{r4, r7, lr}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <GUI_Init+0x88>)
 80077f8:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <GUI_Init+0x88>)
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	f022 0201 	bic.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	4b1e      	ldr	r3, [pc, #120]	; (800787c <GUI_Init+0x8c>)
 8007804:	2201      	movs	r2, #1
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <GUI_Init+0x90>)
 800780a:	4a1e      	ldr	r2, [pc, #120]	; (8007884 <GUI_Init+0x94>)
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	4b1c      	ldr	r3, [pc, #112]	; (8007880 <GUI_Init+0x90>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <GUI_Init+0x98>)
 8007814:	429a      	cmp	r2, r3
 8007816:	d000      	beq.n	800781a <GUI_Init+0x2a>
 8007818:	e7fe      	b.n	8007818 <GUI_Init+0x28>
 800781a:	f7ff ffd1 	bl	80077c0 <GUI__Config>
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <GUI_Init+0x9c>)
 8007820:	222e      	movs	r2, #46	; 0x2e
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	f7fc fece 	bl	80045c4 <GUI_X_Init>
 8007828:	4819      	ldr	r0, [pc, #100]	; (8007890 <GUI_Init+0xa0>)
 800782a:	f7ff ff2f 	bl	800768c <_InitContext>
 800782e:	f7ff fd3b 	bl	80072a8 <emWin_LCD_Init>
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	f7ff fb74 	bl	8006f20 <LCD_GetXSizeDisplay>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <GUI_Init+0x58>
 800783e:	f7ff fb75 	bl	8006f2c <LCD_GetYSizeDisplay>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <GUI_Init+0x6c>
 8007848:	f7ff fb56 	bl	8006ef8 <LCD_GetXSizeMax>
 800784c:	4604      	mov	r4, r0
 800784e:	f7ff fb56 	bl	8006efe <LCD_GetYSizeMax>
 8007852:	4603      	mov	r3, r0
 8007854:	4620      	mov	r0, r4
 8007856:	4619      	mov	r1, r3
 8007858:	f7ff fb58 	bl	8006f0c <LCD_SetDisplaySize>
 800785c:	2000      	movs	r0, #0
 800785e:	2100      	movs	r1, #0
 8007860:	f002 fa74 	bl	8009d4c <GUI_SetOrg>
 8007864:	f001 fa00 	bl	8008c68 <WM_Init>
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <GUI_Init+0xa4>)
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bd90      	pop	{r4, r7, pc}
 8007878:	e0002000 	.word	0xe0002000
 800787c:	40023008 	.word	0x40023008
 8007880:	40023000 	.word	0x40023000
 8007884:	f407a5c2 	.word	0xf407a5c2
 8007888:	b5e8b5cd 	.word	0xb5e8b5cd
 800788c:	2001fc72 	.word	0x2001fc72
 8007890:	2001f864 	.word	0x2001f864
 8007894:	2001fc90 	.word	0x2001fc90

08007898 <GUIMONO_DispChar>:
 8007898:	4b52      	ldr	r3, [pc, #328]	; (80079e4 <GUIMONO_DispChar+0x14c>)
 800789a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69d9      	ldr	r1, [r3, #28]
 80078a2:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 80078a4:	69cc      	ldr	r4, [r1, #28]
 80078a6:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 80078a8:	89a2      	ldrh	r2, [r4, #12]
 80078aa:	4290      	cmp	r0, r2
 80078ac:	b08b      	sub	sp, #44	; 0x2c
 80078ae:	d308      	bcc.n	80078c2 <GUIMONO_DispChar+0x2a>
 80078b0:	89e6      	ldrh	r6, [r4, #14]
 80078b2:	4286      	cmp	r6, r0
 80078b4:	d305      	bcc.n	80078c2 <GUIMONO_DispChar+0x2a>
 80078b6:	f8d4 9000 	ldr.w	r9, [r4]
 80078ba:	1a82      	subs	r2, r0, r2
 80078bc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80078c0:	e015      	b.n	80078ee <GUIMONO_DispChar+0x56>
 80078c2:	68a2      	ldr	r2, [r4, #8]
 80078c4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	f000 8081 	beq.w	80079d0 <GUIMONO_DispChar+0x138>
 80078ce:	8816      	ldrh	r6, [r2, #0]
 80078d0:	42b0      	cmp	r0, r6
 80078d2:	d37d      	bcc.n	80079d0 <GUIMONO_DispChar+0x138>
 80078d4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 80078d8:	4584      	cmp	ip, r0
 80078da:	d379      	bcc.n	80079d0 <GUIMONO_DispChar+0x138>
 80078dc:	6852      	ldr	r2, [r2, #4]
 80078de:	1b80      	subs	r0, r0, r6
 80078e0:	b280      	uxth	r0, r0
 80078e2:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80078e6:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 80078ea:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 80078ee:	1c50      	adds	r0, r2, #1
 80078f0:	d06e      	beq.n	80079d0 <GUIMONO_DispChar+0x138>
 80078f2:	f891 8018 	ldrb.w	r8, [r1, #24]
 80078f6:	7ca1      	ldrb	r1, [r4, #18]
 80078f8:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 80078fc:	7c26      	ldrb	r6, [r4, #16]
 80078fe:	9206      	str	r2, [sp, #24]
 8007900:	fb18 f101 	smulbb	r1, r8, r1
 8007904:	9107      	str	r1, [sp, #28]
 8007906:	fa0f f18a 	sxth.w	r1, sl
 800790a:	4608      	mov	r0, r1
 800790c:	9108      	str	r1, [sp, #32]
 800790e:	f7ff fb27 	bl	8006f60 <LCD_SetDrawMode>
 8007912:	4934      	ldr	r1, [pc, #208]	; (80079e4 <GUIMONO_DispChar+0x14c>)
 8007914:	9009      	str	r0, [sp, #36]	; 0x24
 8007916:	680b      	ldr	r3, [r1, #0]
 8007918:	9a06      	ldr	r2, [sp, #24]
 800791a:	69d9      	ldr	r1, [r3, #28]
 800791c:	7e88      	ldrb	r0, [r1, #26]
 800791e:	9000      	str	r0, [sp, #0]
 8007920:	7ec9      	ldrb	r1, [r1, #27]
 8007922:	9101      	str	r1, [sp, #4]
 8007924:	2101      	movs	r1, #1
 8007926:	9102      	str	r1, [sp, #8]
 8007928:	7ca1      	ldrb	r1, [r4, #18]
 800792a:	9103      	str	r1, [sp, #12]
 800792c:	9907      	ldr	r1, [sp, #28]
 800792e:	fb01 9202 	mla	r2, r1, r2, r9
 8007932:	9204      	str	r2, [sp, #16]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	9305      	str	r3, [sp, #20]
 8007938:	b23f      	sxth	r7, r7
 800793a:	b22d      	sxth	r5, r5
 800793c:	4638      	mov	r0, r7
 800793e:	4629      	mov	r1, r5
 8007940:	4632      	mov	r2, r6
 8007942:	4643      	mov	r3, r8
 8007944:	f7ff fb94 	bl	8007070 <LCD_DrawBitmap>
 8007948:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800794c:	d01b      	beq.n	8007986 <GUIMONO_DispChar+0xee>
 800794e:	f04a 0002 	orr.w	r0, sl, #2
 8007952:	b200      	sxth	r0, r0
 8007954:	f7ff fb04 	bl	8006f60 <LCD_SetDrawMode>
 8007958:	4a22      	ldr	r2, [pc, #136]	; (80079e4 <GUIMONO_DispChar+0x14c>)
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	69da      	ldr	r2, [r3, #28]
 800795e:	7e91      	ldrb	r1, [r2, #26]
 8007960:	9100      	str	r1, [sp, #0]
 8007962:	7ed2      	ldrb	r2, [r2, #27]
 8007964:	9201      	str	r2, [sp, #4]
 8007966:	2101      	movs	r1, #1
 8007968:	9102      	str	r1, [sp, #8]
 800796a:	9907      	ldr	r1, [sp, #28]
 800796c:	7ca2      	ldrb	r2, [r4, #18]
 800796e:	9203      	str	r2, [sp, #12]
 8007970:	fb01 920b 	mla	r2, r1, fp, r9
 8007974:	9204      	str	r2, [sp, #16]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	9305      	str	r3, [sp, #20]
 800797a:	4638      	mov	r0, r7
 800797c:	4629      	mov	r1, r5
 800797e:	4632      	mov	r2, r6
 8007980:	4643      	mov	r3, r8
 8007982:	f7ff fb75 	bl	8007070 <LCD_DrawBitmap>
 8007986:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80079e4 <GUIMONO_DispChar+0x14c>
 800798a:	f8d8 3000 	ldr.w	r3, [r8]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	7e5a      	ldrb	r2, [r3, #25]
 8007992:	7e1b      	ldrb	r3, [r3, #24]
 8007994:	429a      	cmp	r2, r3
 8007996:	d917      	bls.n	80079c8 <GUIMONO_DispChar+0x130>
 8007998:	9a08      	ldr	r2, [sp, #32]
 800799a:	2a02      	cmp	r2, #2
 800799c:	d014      	beq.n	80079c8 <GUIMONO_DispChar+0x130>
 800799e:	f08a 0004 	eor.w	r0, sl, #4
 80079a2:	b200      	sxth	r0, r0
 80079a4:	f7ff fadc 	bl	8006f60 <LCD_SetDrawMode>
 80079a8:	f8d8 3000 	ldr.w	r3, [r8]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f893 e018 	ldrb.w	lr, [r3, #24]
 80079b2:	7ed9      	ldrb	r1, [r3, #27]
 80079b4:	7e9a      	ldrb	r2, [r3, #26]
 80079b6:	7e5b      	ldrb	r3, [r3, #25]
 80079b8:	4638      	mov	r0, r7
 80079ba:	fb0e 5101 	mla	r1, lr, r1, r5
 80079be:	fb06 7202 	mla	r2, r6, r2, r7
 80079c2:	442b      	add	r3, r5
 80079c4:	f7ff fb28 	bl	8007018 <LCD_FillRect>
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	b2d8      	uxtb	r0, r3
 80079cc:	f7ff fac8 	bl	8006f60 <LCD_SetDrawMode>
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <GUIMONO_DispChar+0x14c>)
 80079d2:	7c61      	ldrb	r1, [r4, #17]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80079d8:	440a      	add	r2, r1
 80079da:	845a      	strh	r2, [r3, #34]	; 0x22
 80079dc:	b00b      	add	sp, #44	; 0x2c
 80079de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e2:	bf00      	nop
 80079e4:	20000010 	.word	0x20000010

080079e8 <GUIMONO_GetCharDistX>:
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <GUIMONO_GetCharDistX+0x14>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	b109      	cbz	r1, 80079f6 <GUIMONO_GetCharDistX+0xe>
 80079f2:	7c1a      	ldrb	r2, [r3, #16]
 80079f4:	600a      	str	r2, [r1, #0]
 80079f6:	7c58      	ldrb	r0, [r3, #17]
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000010 	.word	0x20000010

08007a00 <GUIMONO_GetFontInfo>:
 8007a00:	2302      	movs	r3, #2
 8007a02:	800b      	strh	r3, [r1, #0]
 8007a04:	4770      	bx	lr

08007a06 <GUIMONO_IsInFont>:
 8007a06:	69c3      	ldr	r3, [r0, #28]
 8007a08:	899a      	ldrh	r2, [r3, #12]
 8007a0a:	428a      	cmp	r2, r1
 8007a0c:	d802      	bhi.n	8007a14 <GUIMONO_IsInFont+0xe>
 8007a0e:	89da      	ldrh	r2, [r3, #14]
 8007a10:	428a      	cmp	r2, r1
 8007a12:	d20f      	bcs.n	8007a34 <GUIMONO_IsInFont+0x2e>
 8007a14:	6898      	ldr	r0, [r3, #8]
 8007a16:	b180      	cbz	r0, 8007a3a <GUIMONO_IsInFont+0x34>
 8007a18:	8803      	ldrh	r3, [r0, #0]
 8007a1a:	4299      	cmp	r1, r3
 8007a1c:	d30c      	bcc.n	8007a38 <GUIMONO_IsInFont+0x32>
 8007a1e:	8842      	ldrh	r2, [r0, #2]
 8007a20:	428a      	cmp	r2, r1
 8007a22:	d309      	bcc.n	8007a38 <GUIMONO_IsInFont+0x32>
 8007a24:	1ac9      	subs	r1, r1, r3
 8007a26:	6842      	ldr	r2, [r0, #4]
 8007a28:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8007a2c:	43c0      	mvns	r0, r0
 8007a2e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8007a32:	4770      	bx	lr
 8007a34:	2001      	movs	r0, #1
 8007a36:	4770      	bx	lr
 8007a38:	2000      	movs	r0, #0
 8007a3a:	4770      	bx	lr

08007a3c <_PushFreeBlock>:
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <_PushFreeBlock+0x20>)
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a42:	3201      	adds	r2, #1
 8007a44:	b510      	push	{r4, lr}
 8007a46:	605a      	str	r2, [r3, #4]
 8007a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a4a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8007a4e:	6061      	str	r1, [r4, #4]
 8007a50:	2100      	movs	r1, #0
 8007a52:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8007a56:	6258      	str	r0, [r3, #36]	; 0x24
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	bf00      	nop
 8007a5c:	2001fcb0 	.word	0x2001fcb0

08007a60 <_OnExit>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d0b      	ldr	r5, [pc, #44]	; (8007a90 <_OnExit+0x30>)
 8007a64:	2400      	movs	r4, #0
 8007a66:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	2280      	movs	r2, #128	; 0x80
 8007a6e:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8007a72:	f7ff fccb 	bl	800740c <GUI__memset>
 8007a76:	4628      	mov	r0, r5
 8007a78:	4621      	mov	r1, r4
 8007a7a:	22c0      	movs	r2, #192	; 0xc0
 8007a7c:	f7ff fcc6 	bl	800740c <GUI__memset>
 8007a80:	4621      	mov	r1, r4
 8007a82:	4804      	ldr	r0, [pc, #16]	; (8007a94 <_OnExit+0x34>)
 8007a84:	220c      	movs	r2, #12
 8007a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8a:	f7ff bcbf 	b.w	800740c <GUI__memset>
 8007a8e:	bf00      	nop
 8007a90:	2001fcb0 	.word	0x2001fcb0
 8007a94:	2001f8e0 	.word	0x2001f8e0

08007a98 <_RemoveFreeBlock>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	6842      	ldr	r2, [r0, #4]
 8007a9c:	230f      	movs	r3, #15
 8007a9e:	490d      	ldr	r1, [pc, #52]	; (8007ad4 <_RemoveFreeBlock+0x3c>)
 8007aa0:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 8007aa4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8007aa6:	42a2      	cmp	r2, r4
 8007aa8:	d203      	bcs.n	8007ab2 <_RemoveFreeBlock+0x1a>
 8007aaa:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007aae:	d2f6      	bcs.n	8007a9e <_RemoveFreeBlock+0x6>
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	d80c      	bhi.n	8007ad0 <_RemoveFreeBlock+0x38>
 8007ab6:	680c      	ldr	r4, [r1, #0]
 8007ab8:	1aa2      	subs	r2, r4, r2
 8007aba:	600a      	str	r2, [r1, #0]
 8007abc:	6882      	ldr	r2, [r0, #8]
 8007abe:	68c0      	ldr	r0, [r0, #12]
 8007ac0:	b102      	cbz	r2, 8007ac4 <_RemoveFreeBlock+0x2c>
 8007ac2:	6050      	str	r0, [r2, #4]
 8007ac4:	b108      	cbz	r0, 8007aca <_RemoveFreeBlock+0x32>
 8007ac6:	6002      	str	r2, [r0, #0]
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8007ace:	645a      	str	r2, [r3, #68]	; 0x44
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2001fcb0 	.word	0x2001fcb0

08007ad8 <_AddFreeMemory>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	4e26      	ldr	r6, [pc, #152]	; (8007b74 <_AddFreeMemory+0x9c>)
 8007adc:	68f3      	ldr	r3, [r6, #12]
 8007ade:	1e5a      	subs	r2, r3, #1
 8007ae0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	4413      	add	r3, r2
 8007ae6:	1808      	adds	r0, r1, r0
 8007ae8:	4298      	cmp	r0, r3
 8007aea:	460c      	mov	r4, r1
 8007aec:	d805      	bhi.n	8007afa <_AddFreeMemory+0x22>
 8007aee:	594b      	ldr	r3, [r1, r5]
 8007af0:	b91b      	cbnz	r3, 8007afa <_AddFreeMemory+0x22>
 8007af2:	6843      	ldr	r3, [r0, #4]
 8007af4:	441d      	add	r5, r3
 8007af6:	f7ff ffcf 	bl	8007a98 <_RemoveFreeBlock>
 8007afa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d90a      	bls.n	8007b16 <_AddFreeMemory+0x3e>
 8007b00:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8007b04:	1be7      	subs	r7, r4, r7
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	b92b      	cbnz	r3, 8007b16 <_AddFreeMemory+0x3e>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	441d      	add	r5, r3
 8007b10:	f7ff ffc2 	bl	8007a98 <_RemoveFreeBlock>
 8007b14:	463c      	mov	r4, r7
 8007b16:	230f      	movs	r3, #15
 8007b18:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8007b1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b1e:	4295      	cmp	r5, r2
 8007b20:	d203      	bcs.n	8007b2a <_AddFreeMemory+0x52>
 8007b22:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007b26:	d2f7      	bcs.n	8007b18 <_AddFreeMemory+0x40>
 8007b28:	e022      	b.n	8007b70 <_AddFreeMemory+0x98>
 8007b2a:	2b0f      	cmp	r3, #15
 8007b2c:	d820      	bhi.n	8007b70 <_AddFreeMemory+0x98>
 8007b2e:	3308      	adds	r3, #8
 8007b30:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8007b34:	1961      	adds	r1, r4, r5
 8007b36:	6852      	ldr	r2, [r2, #4]
 8007b38:	60a2      	str	r2, [r4, #8]
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e884 0021 	stmia.w	r4, {r0, r5}
 8007b40:	6124      	str	r4, [r4, #16]
 8007b42:	f841 5c04 	str.w	r5, [r1, #-4]
 8007b46:	f104 0108 	add.w	r1, r4, #8
 8007b4a:	b102      	cbz	r2, 8007b4e <_AddFreeMemory+0x76>
 8007b4c:	6051      	str	r1, [r2, #4]
 8007b4e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8007b52:	60e0      	str	r0, [r4, #12]
 8007b54:	6059      	str	r1, [r3, #4]
 8007b56:	6833      	ldr	r3, [r6, #0]
 8007b58:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8007b5c:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <_AddFreeMemory+0x9c>)
 8007b5e:	442b      	add	r3, r5
 8007b60:	6033      	str	r3, [r6, #0]
 8007b62:	b929      	cbnz	r1, 8007b70 <_AddFreeMemory+0x98>
 8007b64:	68d1      	ldr	r1, [r2, #12]
 8007b66:	1acb      	subs	r3, r1, r3
 8007b68:	6891      	ldr	r1, [r2, #8]
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	bf38      	it	cc
 8007b6e:	6093      	strcc	r3, [r2, #8]
 8007b70:	4628      	mov	r0, r5
 8007b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b74:	2001fcb0 	.word	0x2001fcb0

08007b78 <_RemoveHoles>:
 8007b78:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <_RemoveHoles+0x98>)
 8007b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8007b82:	3a01      	subs	r2, #1
 8007b84:	4682      	mov	sl, r0
 8007b86:	eb02 0904 	add.w	r9, r2, r4
 8007b8a:	469b      	mov	fp, r3
 8007b8c:	e894 0028 	ldmia.w	r4, {r3, r5}
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d133      	bne.n	8007bfc <_RemoveHoles+0x84>
 8007b94:	eb04 0805 	add.w	r8, r4, r5
 8007b98:	45c8      	cmp	r8, r9
 8007b9a:	d22f      	bcs.n	8007bfc <_RemoveHoles+0x84>
 8007b9c:	f854 c005 	ldr.w	ip, [r4, r5]
 8007ba0:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8007ba4:	f1bc 0f00 	cmp.w	ip, #0
 8007ba8:	d028      	beq.n	8007bfc <_RemoveHoles+0x84>
 8007baa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8007bae:	4f18      	ldr	r7, [pc, #96]	; (8007c10 <_RemoveHoles+0x98>)
 8007bb0:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d121      	bne.n	8007bfc <_RemoveHoles+0x84>
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	4620      	mov	r0, r4
 8007bbc:	e88d 1008 	stmia.w	sp, {r3, ip}
 8007bc0:	f7ff ff6a 	bl	8007a98 <_RemoveFreeBlock>
 8007bc4:	f8d8 1000 	ldr.w	r1, [r8]
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007bce:	4620      	mov	r0, r4
 8007bd0:	6054      	str	r4, [r2, #4]
 8007bd2:	4641      	mov	r1, r8
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	f002 fe90 	bl	800a8fa <memmove>
 8007bda:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8007bde:	459c      	cmp	ip, r3
 8007be0:	d102      	bne.n	8007be8 <_RemoveHoles+0x70>
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	1b5b      	subs	r3, r3, r5
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	4628      	mov	r0, r5
 8007bea:	19a1      	adds	r1, r4, r6
 8007bec:	f7ff ff74 	bl	8007ad8 <_AddFreeMemory>
 8007bf0:	f1ba 0f00 	cmp.w	sl, #0
 8007bf4:	d001      	beq.n	8007bfa <_RemoveHoles+0x82>
 8007bf6:	4582      	cmp	sl, r0
 8007bf8:	d905      	bls.n	8007c06 <_RemoveHoles+0x8e>
 8007bfa:	4635      	mov	r5, r6
 8007bfc:	442c      	add	r4, r5
 8007bfe:	454c      	cmp	r4, r9
 8007c00:	d3c4      	bcc.n	8007b8c <_RemoveHoles+0x14>
 8007c02:	2001      	movs	r0, #1
 8007c04:	e000      	b.n	8007c08 <_RemoveHoles+0x90>
 8007c06:	2000      	movs	r0, #0
 8007c08:	b003      	add	sp, #12
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	bf00      	nop
 8007c10:	2001fcb0 	.word	0x2001fcb0

08007c14 <GUI_ALLOC_FreeFixedBlock>:
 8007c14:	b128      	cbz	r0, 8007c22 <GUI_ALLOC_FreeFixedBlock+0xe>
 8007c16:	4a03      	ldr	r2, [pc, #12]	; (8007c24 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8007c18:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007c1a:	6003      	str	r3, [r0, #0]
 8007c1c:	b103      	cbz	r3, 8007c20 <GUI_ALLOC_FreeFixedBlock+0xc>
 8007c1e:	6058      	str	r0, [r3, #4]
 8007c20:	63d0      	str	r0, [r2, #60]	; 0x3c
 8007c22:	4770      	bx	lr
 8007c24:	2001fcb0 	.word	0x2001fcb0

08007c28 <GUI_ALLOC_h2p>:
 8007c28:	b128      	cbz	r0, 8007c36 <GUI_ALLOC_h2p+0xe>
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <GUI_ALLOC_h2p+0x10>)
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8007c32:	6840      	ldr	r0, [r0, #4]
 8007c34:	3008      	adds	r0, #8
 8007c36:	4770      	bx	lr
 8007c38:	2001fcb0 	.word	0x2001fcb0

08007c3c <GUI_ALLOC_LockH>:
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <GUI_ALLOC_LockH+0x18>)
 8007c3e:	69d9      	ldr	r1, [r3, #28]
 8007c40:	3101      	adds	r1, #1
 8007c42:	61d9      	str	r1, [r3, #28]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8007c4a:	3101      	adds	r1, #1
 8007c4c:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8007c50:	f7ff bfea 	b.w	8007c28 <GUI_ALLOC_h2p>
 8007c54:	2001fcb0 	.word	0x2001fcb0

08007c58 <GUI_ALLOC_UnlockH>:
 8007c58:	b530      	push	{r4, r5, lr}
 8007c5a:	6802      	ldr	r2, [r0, #0]
 8007c5c:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <GUI_ALLOC_UnlockH+0x2c>)
 8007c5e:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8007c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c64:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8007c68:	2c01      	cmp	r4, #1
 8007c6a:	d903      	bls.n	8007c74 <GUI_ALLOC_UnlockH+0x1c>
 8007c6c:	69dd      	ldr	r5, [r3, #28]
 8007c6e:	b10d      	cbz	r5, 8007c74 <GUI_ALLOC_UnlockH+0x1c>
 8007c70:	3d01      	subs	r5, #1
 8007c72:	61dd      	str	r5, [r3, #28]
 8007c74:	3c01      	subs	r4, #1
 8007c76:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6003      	str	r3, [r0, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	bd30      	pop	{r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	2001fcb0 	.word	0x2001fcb0

08007c88 <GUI_ALLOC_AssignMemory>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <GUI_ALLOC_AssignMemory+0xc>)
 8007c8a:	f021 0103 	bic.w	r1, r1, #3
 8007c8e:	6018      	str	r0, [r3, #0]
 8007c90:	6059      	str	r1, [r3, #4]
 8007c92:	4770      	bx	lr
 8007c94:	2001f8e0 	.word	0x2001f8e0

08007c98 <GUI_ALLOC_Free>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	b180      	cbz	r0, 8007cc0 <GUI_ALLOC_Free+0x28>
 8007c9e:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <GUI_ALLOC_Free+0x2c>)
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8007ca6:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d108      	bne.n	8007cc0 <GUI_ALLOC_Free+0x28>
 8007cae:	6851      	ldr	r1, [r2, #4]
 8007cb0:	6848      	ldr	r0, [r1, #4]
 8007cb2:	f7ff ff11 	bl	8007ad8 <_AddFreeMemory>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cbc:	f7ff bebe 	b.w	8007a3c <_PushFreeBlock>
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	bf00      	nop
 8007cc4:	2001fcb0 	.word	0x2001fcb0

08007cc8 <_EnlargeBlocks>:
 8007cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ccc:	4c22      	ldr	r4, [pc, #136]	; (8007d58 <_EnlargeBlocks+0x90>)
 8007cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cd0:	b93b      	cbnz	r3, 8007ce2 <_EnlargeBlocks+0x1a>
 8007cd2:	4b22      	ldr	r3, [pc, #136]	; (8007d5c <_EnlargeBlocks+0x94>)
 8007cd4:	689d      	ldr	r5, [r3, #8]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	3508      	adds	r5, #8
 8007cda:	fbb3 f5f5 	udiv	r5, r3, r5
 8007cde:	3502      	adds	r5, #2
 8007ce0:	e003      	b.n	8007cea <_EnlargeBlocks+0x22>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	1d1d      	adds	r5, r3, #4
 8007ce6:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 8007cea:	00e8      	lsls	r0, r5, #3
 8007cec:	f000 f944 	bl	8007f78 <_Alloc>
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	b360      	cbz	r0, 8007d4e <_EnlargeBlocks+0x86>
 8007cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cf6:	6922      	ldr	r2, [r4, #16]
 8007cf8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007cfa:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8007cfe:	00d2      	lsls	r2, r2, #3
 8007d00:	685e      	ldr	r6, [r3, #4]
 8007d02:	3608      	adds	r6, #8
 8007d04:	4630      	mov	r0, r6
 8007d06:	f002 fded 	bl	800a8e4 <memcpy>
 8007d0a:	6922      	ldr	r2, [r4, #16]
 8007d0c:	6366      	str	r6, [r4, #52]	; 0x34
 8007d0e:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 8007d12:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8007d16:	3104      	adds	r1, #4
 8007d18:	4613      	mov	r3, r2
 8007d1a:	1e68      	subs	r0, r5, #1
 8007d1c:	4283      	cmp	r3, r0
 8007d1e:	f101 0108 	add.w	r1, r1, #8
 8007d22:	d203      	bcs.n	8007d2c <_EnlargeBlocks+0x64>
 8007d24:	3301      	adds	r3, #1
 8007d26:	f841 3c08 	str.w	r3, [r1, #-8]
 8007d2a:	e7f6      	b.n	8007d1a <_EnlargeBlocks+0x52>
 8007d2c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8007d30:	2600      	movs	r6, #0
 8007d32:	605e      	str	r6, [r3, #4]
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	6262      	str	r2, [r4, #36]	; 0x24
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	442b      	add	r3, r5
 8007d3c:	6063      	str	r3, [r4, #4]
 8007d3e:	6125      	str	r5, [r4, #16]
 8007d40:	4638      	mov	r0, r7
 8007d42:	b13f      	cbz	r7, 8007d54 <_EnlargeBlocks+0x8c>
 8007d44:	f7ff ffa8 	bl	8007c98 <GUI_ALLOC_Free>
 8007d48:	4630      	mov	r0, r6
 8007d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4e:	2001      	movs	r0, #1
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	2001fcb0 	.word	0x2001fcb0
 8007d5c:	2001f8e0 	.word	0x2001f8e0

08007d60 <_InitOnce>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	4e58      	ldr	r6, [pc, #352]	; (8007ec4 <_InitOnce+0x164>)
 8007d64:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	f040 80aa 	bne.w	8007ec2 <_InitOnce+0x162>
 8007d6e:	4d56      	ldr	r5, [pc, #344]	; (8007ec8 <_InitOnce+0x168>)
 8007d70:	686a      	ldr	r2, [r5, #4]
 8007d72:	2301      	movs	r3, #1
 8007d74:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8007d78:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007d7c:	bf28      	it	cs
 8007d7e:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8007d82:	682b      	ldr	r3, [r5, #0]
 8007d84:	0894      	lsrs	r4, r2, #2
 8007d86:	2000      	movs	r0, #0
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d00c      	beq.n	8007da6 <_InitOnce+0x46>
 8007d8c:	1847      	adds	r7, r0, r1
 8007d8e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007d92:	fbb7 fefe 	udiv	lr, r7, lr
 8007d96:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8007d9a:	ebce 0707 	rsb	r7, lr, r7
 8007d9e:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8007da2:	3001      	adds	r0, #1
 8007da4:	e7f0      	b.n	8007d88 <_InitOnce+0x28>
 8007da6:	2000      	movs	r0, #0
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d016      	beq.n	8007dda <_InitOnce+0x7a>
 8007dac:	1847      	adds	r7, r0, r1
 8007dae:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007db2:	fbb7 fefe 	udiv	lr, r7, lr
 8007db6:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8007dba:	ebce 0e07 	rsb	lr, lr, r7
 8007dbe:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007dc2:	4577      	cmp	r7, lr
 8007dc4:	d007      	beq.n	8007dd6 <_InitOnce+0x76>
 8007dc6:	68aa      	ldr	r2, [r5, #8]
 8007dc8:	4b3f      	ldr	r3, [pc, #252]	; (8007ec8 <_InitOnce+0x168>)
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	d155      	bne.n	8007e7a <_InitOnce+0x11a>
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	0892      	lsrs	r2, r2, #2
 8007dd2:	609a      	str	r2, [r3, #8]
 8007dd4:	e051      	b.n	8007e7a <_InitOnce+0x11a>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	e7e6      	b.n	8007da8 <_InitOnce+0x48>
 8007dda:	3101      	adds	r1, #1
 8007ddc:	2902      	cmp	r1, #2
 8007dde:	d1d2      	bne.n	8007d86 <_InitOnce+0x26>
 8007de0:	0854      	lsrs	r4, r2, #1
 8007de2:	2100      	movs	r1, #0
 8007de4:	2000      	movs	r0, #0
 8007de6:	42a0      	cmp	r0, r4
 8007de8:	d00c      	beq.n	8007e04 <_InitOnce+0xa4>
 8007dea:	1847      	adds	r7, r0, r1
 8007dec:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007df0:	fbb7 fefe 	udiv	lr, r7, lr
 8007df4:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8007df8:	ebce 0707 	rsb	r7, lr, r7
 8007dfc:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 8007e00:	3001      	adds	r0, #1
 8007e02:	e7f0      	b.n	8007de6 <_InitOnce+0x86>
 8007e04:	2000      	movs	r0, #0
 8007e06:	42a0      	cmp	r0, r4
 8007e08:	d00f      	beq.n	8007e2a <_InitOnce+0xca>
 8007e0a:	1847      	adds	r7, r0, r1
 8007e0c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007e10:	fbb7 fefe 	udiv	lr, r7, lr
 8007e14:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8007e18:	ebce 0707 	rsb	r7, lr, r7
 8007e1c:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 8007e20:	b2bf      	uxth	r7, r7
 8007e22:	45bc      	cmp	ip, r7
 8007e24:	d1cf      	bne.n	8007dc6 <_InitOnce+0x66>
 8007e26:	3001      	adds	r0, #1
 8007e28:	e7ed      	b.n	8007e06 <_InitOnce+0xa6>
 8007e2a:	3101      	adds	r1, #1
 8007e2c:	2902      	cmp	r1, #2
 8007e2e:	d1d9      	bne.n	8007de4 <_InitOnce+0x84>
 8007e30:	2100      	movs	r1, #0
 8007e32:	2000      	movs	r0, #0
 8007e34:	4290      	cmp	r0, r2
 8007e36:	d007      	beq.n	8007e48 <_InitOnce+0xe8>
 8007e38:	1844      	adds	r4, r0, r1
 8007e3a:	27ff      	movs	r7, #255	; 0xff
 8007e3c:	fbb4 f7f7 	udiv	r7, r4, r7
 8007e40:	443c      	add	r4, r7
 8007e42:	541c      	strb	r4, [r3, r0]
 8007e44:	3001      	adds	r0, #1
 8007e46:	e7f5      	b.n	8007e34 <_InitOnce+0xd4>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	4290      	cmp	r0, r2
 8007e4c:	d00b      	beq.n	8007e66 <_InitOnce+0x106>
 8007e4e:	1844      	adds	r4, r0, r1
 8007e50:	27ff      	movs	r7, #255	; 0xff
 8007e52:	fbb4 f7f7 	udiv	r7, r4, r7
 8007e56:	443c      	add	r4, r7
 8007e58:	5c1f      	ldrb	r7, [r3, r0]
 8007e5a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8007e5e:	42a7      	cmp	r7, r4
 8007e60:	d1b1      	bne.n	8007dc6 <_InitOnce+0x66>
 8007e62:	3001      	adds	r0, #1
 8007e64:	e7f1      	b.n	8007e4a <_InitOnce+0xea>
 8007e66:	3101      	adds	r1, #1
 8007e68:	2902      	cmp	r1, #2
 8007e6a:	d1e2      	bne.n	8007e32 <_InitOnce+0xd2>
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4291      	cmp	r1, r2
 8007e70:	d0a9      	beq.n	8007dc6 <_InitOnce+0x66>
 8007e72:	2000      	movs	r0, #0
 8007e74:	5458      	strb	r0, [r3, r1]
 8007e76:	3101      	adds	r1, #1
 8007e78:	e7f9      	b.n	8007e6e <_InitOnce+0x10e>
 8007e7a:	4814      	ldr	r0, [pc, #80]	; (8007ecc <_InitOnce+0x16c>)
 8007e7c:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <_InitOnce+0x170>)
 8007e7e:	6003      	str	r3, [r0, #0]
 8007e80:	f7ff fc8c 	bl	800779c <GUI__RegisterExit>
 8007e84:	235a      	movs	r3, #90	; 0x5a
 8007e86:	6233      	str	r3, [r6, #32]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2110      	movs	r1, #16
 8007e8c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8007e90:	4099      	lsls	r1, r3
 8007e92:	3301      	adds	r3, #1
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	4c0b      	ldr	r4, [pc, #44]	; (8007ec4 <_InitOnce+0x164>)
 8007e98:	6411      	str	r1, [r2, #64]	; 0x40
 8007e9a:	d1f6      	bne.n	8007e8a <_InitOnce+0x12a>
 8007e9c:	6868      	ldr	r0, [r5, #4]
 8007e9e:	6829      	ldr	r1, [r5, #0]
 8007ea0:	63a1      	str	r1, [r4, #56]	; 0x38
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	6123      	str	r3, [r4, #16]
 8007ea6:	f1a0 0314 	sub.w	r3, r0, #20
 8007eaa:	440b      	add	r3, r1
 8007eac:	2501      	movs	r5, #1
 8007eae:	6363      	str	r3, [r4, #52]	; 0x34
 8007eb0:	60e0      	str	r0, [r4, #12]
 8007eb2:	605d      	str	r5, [r3, #4]
 8007eb4:	6265      	str	r5, [r4, #36]	; 0x24
 8007eb6:	6065      	str	r5, [r4, #4]
 8007eb8:	f7ff fe0e 	bl	8007ad8 <_AddFreeMemory>
 8007ebc:	f7ff ff04 	bl	8007cc8 <_EnlargeBlocks>
 8007ec0:	6325      	str	r5, [r4, #48]	; 0x30
 8007ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec4:	2001fcb0 	.word	0x2001fcb0
 8007ec8:	2001f8e0 	.word	0x2001f8e0
 8007ecc:	2001f8ec 	.word	0x2001f8ec
 8007ed0:	08007a61 	.word	0x08007a61

08007ed4 <GUI_ALLOC_GetFixedBlock>:
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	4605      	mov	r5, r0
 8007eda:	4e26      	ldr	r6, [pc, #152]	; (8007f74 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8007edc:	3503      	adds	r5, #3
 8007ede:	f7ff ff3f 	bl	8007d60 <_InitOnce>
 8007ee2:	f025 0503 	bic.w	r5, r5, #3
 8007ee6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007ee8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8007eea:	3504      	adds	r5, #4
 8007eec:	429d      	cmp	r5, r3
 8007eee:	bf38      	it	cc
 8007ef0:	461d      	movcc	r5, r3
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	b12c      	cbz	r4, 8007f02 <GUI_ALLOC_GetFixedBlock+0x2e>
 8007ef6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007efa:	42ab      	cmp	r3, r5
 8007efc:	d02c      	beq.n	8007f58 <GUI_ALLOC_GetFixedBlock+0x84>
 8007efe:	6824      	ldr	r4, [r4, #0]
 8007f00:	e7f8      	b.n	8007ef4 <GUI_ALLOC_GetFixedBlock+0x20>
 8007f02:	68f3      	ldr	r3, [r6, #12]
 8007f04:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8007f06:	eb02 0803 	add.w	r8, r2, r3
 8007f0a:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8007f0e:	ebc7 0708 	rsb	r7, r7, r8
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	b133      	cbz	r3, 8007f24 <GUI_ALLOC_GetFixedBlock+0x50>
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7ff fe2e 	bl	8007b78 <_RemoveHoles>
 8007f1c:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8007f20:	ebc7 0708 	rsb	r7, r7, r8
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	bb13      	cbnz	r3, 8007f6e <GUI_ALLOC_GetFixedBlock+0x9a>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	42ab      	cmp	r3, r5
 8007f2c:	db1f      	blt.n	8007f6e <GUI_ALLOC_GetFixedBlock+0x9a>
 8007f2e:	4638      	mov	r0, r7
 8007f30:	1d1c      	adds	r4, r3, #4
 8007f32:	f7ff fdb1 	bl	8007a98 <_RemoveFreeBlock>
 8007f36:	68f3      	ldr	r3, [r6, #12]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	1b5b      	subs	r3, r3, r5
 8007f3c:	60f3      	str	r3, [r6, #12]
 8007f3e:	6973      	ldr	r3, [r6, #20]
 8007f40:	1b64      	subs	r4, r4, r5
 8007f42:	442b      	add	r3, r5
 8007f44:	1b40      	subs	r0, r0, r5
 8007f46:	443c      	add	r4, r7
 8007f48:	6173      	str	r3, [r6, #20]
 8007f4a:	d002      	beq.n	8007f52 <GUI_ALLOC_GetFixedBlock+0x7e>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7ff fdc3 	bl	8007ad8 <_AddFreeMemory>
 8007f52:	f844 5c04 	str.w	r5, [r4, #-4]
 8007f56:	e00a      	b.n	8007f6e <GUI_ALLOC_GetFixedBlock+0x9a>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	b10b      	cbz	r3, 8007f60 <GUI_ALLOC_GetFixedBlock+0x8c>
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	6059      	str	r1, [r3, #4]
 8007f60:	6861      	ldr	r1, [r4, #4]
 8007f62:	b101      	cbz	r1, 8007f66 <GUI_ALLOC_GetFixedBlock+0x92>
 8007f64:	600b      	str	r3, [r1, #0]
 8007f66:	42a2      	cmp	r2, r4
 8007f68:	d101      	bne.n	8007f6e <GUI_ALLOC_GetFixedBlock+0x9a>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	63f3      	str	r3, [r6, #60]	; 0x3c
 8007f6e:	4620      	mov	r0, r4
 8007f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f74:	2001fcb0 	.word	0x2001fcb0

08007f78 <_Alloc>:
 8007f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	4d38      	ldr	r5, [pc, #224]	; (8008060 <_Alloc+0xe8>)
 8007f7e:	4604      	mov	r4, r0
 8007f80:	f7ff feee 	bl	8007d60 <_InitOnce>
 8007f84:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8007f86:	682b      	ldr	r3, [r5, #0]
 8007f88:	42bc      	cmp	r4, r7
 8007f8a:	bf24      	itt	cs
 8007f8c:	1ce7      	addcs	r7, r4, #3
 8007f8e:	f027 0703 	biccs.w	r7, r7, #3
 8007f92:	370c      	adds	r7, #12
 8007f94:	429f      	cmp	r7, r3
 8007f96:	4c32      	ldr	r4, [pc, #200]	; (8008060 <_Alloc+0xe8>)
 8007f98:	d83e      	bhi.n	8008018 <_Alloc+0xa0>
 8007f9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f9c:	6862      	ldr	r2, [r4, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d90f      	bls.n	8007fc2 <_Alloc+0x4a>
 8007fa2:	686b      	ldr	r3, [r5, #4]
 8007fa4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	606b      	str	r3, [r5, #4]
 8007faa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007fac:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8007fb0:	eb03 0209 	add.w	r2, r3, r9
 8007fb4:	6852      	ldr	r2, [r2, #4]
 8007fb6:	626a      	str	r2, [r5, #36]	; 0x24
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8007fbe:	b956      	cbnz	r6, 8007fd6 <_Alloc+0x5e>
 8007fc0:	e02a      	b.n	8008018 <_Alloc+0xa0>
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	6323      	str	r3, [r4, #48]	; 0x30
 8007fc6:	f7ff fe7f 	bl	8007cc8 <_EnlargeBlocks>
 8007fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007fcc:	3301      	adds	r3, #1
 8007fce:	6323      	str	r3, [r4, #48]	; 0x30
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d0e6      	beq.n	8007fa2 <_Alloc+0x2a>
 8007fd4:	e020      	b.n	8008018 <_Alloc+0xa0>
 8007fd6:	230f      	movs	r3, #15
 8007fd8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8007fdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007fde:	4297      	cmp	r7, r2
 8007fe0:	d20c      	bcs.n	8007ffc <_Alloc+0x84>
 8007fe2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007fe6:	d2f7      	bcs.n	8007fd8 <_Alloc+0x60>
 8007fe8:	e008      	b.n	8007ffc <_Alloc+0x84>
 8007fea:	6894      	ldr	r4, [r2, #8]
 8007fec:	b12c      	cbz	r4, 8007ffa <_Alloc+0x82>
 8007fee:	6862      	ldr	r2, [r4, #4]
 8007ff0:	4297      	cmp	r7, r2
 8007ff2:	d914      	bls.n	800801e <_Alloc+0xa6>
 8007ff4:	68a2      	ldr	r2, [r4, #8]
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	d1f7      	bne.n	8007fea <_Alloc+0x72>
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d803      	bhi.n	8008008 <_Alloc+0x90>
 8008000:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008004:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008006:	e7f6      	b.n	8007ff6 <_Alloc+0x7e>
 8008008:	4638      	mov	r0, r7
 800800a:	f7ff fdb5 	bl	8007b78 <_RemoveHoles>
 800800e:	2800      	cmp	r0, #0
 8008010:	d0e1      	beq.n	8007fd6 <_Alloc+0x5e>
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff fd12 	bl	8007a3c <_PushFreeBlock>
 8008018:	2000      	movs	r0, #0
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008022:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008024:	ebc7 0208 	rsb	r2, r7, r8
 8008028:	330c      	adds	r3, #12
 800802a:	4620      	mov	r0, r4
 800802c:	429a      	cmp	r2, r3
 800802e:	bf38      	it	cc
 8008030:	4647      	movcc	r7, r8
 8008032:	f7ff fd31 	bl	8007a98 <_RemoveFreeBlock>
 8008036:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008038:	444b      	add	r3, r9
 800803a:	19e1      	adds	r1, r4, r7
 800803c:	605c      	str	r4, [r3, #4]
 800803e:	45b8      	cmp	r8, r7
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e884 00c0 	stmia.w	r4, {r6, r7}
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	6124      	str	r4, [r4, #16]
 800804c:	f841 7c04 	str.w	r7, [r1, #-4]
 8008050:	dd03      	ble.n	800805a <_Alloc+0xe2>
 8008052:	ebc7 0008 	rsb	r0, r7, r8
 8008056:	f7ff fd3f 	bl	8007ad8 <_AddFreeMemory>
 800805a:	4630      	mov	r0, r6
 800805c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008060:	2001fcb0 	.word	0x2001fcb0

08008064 <GUI_ALLOC_AllocNoInit>:
 8008064:	b108      	cbz	r0, 800806a <GUI_ALLOC_AllocNoInit+0x6>
 8008066:	f7ff bf87 	b.w	8007f78 <_Alloc>
 800806a:	4770      	bx	lr

0800806c <_Color2Index_M8888I>:
 800806c:	43c3      	mvns	r3, r0
 800806e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8008072:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008076:	4313      	orrs	r3, r2
 8008078:	b2c2      	uxtb	r2, r0
 800807a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800807e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8008082:	4318      	orrs	r0, r3
 8008084:	4770      	bx	lr

08008086 <_GetIndexMask_M8888I>:
 8008086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800808a:	4770      	bx	lr

0800808c <_Color2IndexBulk_M8888I>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	4c0e      	ldr	r4, [pc, #56]	; (80080c8 <_Color2IndexBulk_M8888I+0x3c>)
 8008090:	6824      	ldr	r4, [r4, #0]
 8008092:	4607      	mov	r7, r0
 8008094:	460e      	mov	r6, r1
 8008096:	4615      	mov	r5, r2
 8008098:	469c      	mov	ip, r3
 800809a:	b10c      	cbz	r4, 80080a0 <_Color2IndexBulk_M8888I+0x14>
 800809c:	47a0      	blx	r4
 800809e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a0:	f857 4b04 	ldr.w	r4, [r7], #4
 80080a4:	43e3      	mvns	r3, r4
 80080a6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80080aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b2e2      	uxtb	r2, r4
 80080b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80080ba:	431c      	orrs	r4, r3
 80080bc:	3d01      	subs	r5, #1
 80080be:	6034      	str	r4, [r6, #0]
 80080c0:	4466      	add	r6, ip
 80080c2:	d1ed      	bne.n	80080a0 <_Color2IndexBulk_M8888I+0x14>
 80080c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c6:	bf00      	nop
 80080c8:	2001f8f8 	.word	0x2001f8f8

080080cc <_Index2ColorBulk_M8888I>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	4c0e      	ldr	r4, [pc, #56]	; (8008108 <_Index2ColorBulk_M8888I+0x3c>)
 80080d0:	6824      	ldr	r4, [r4, #0]
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	4615      	mov	r5, r2
 80080d8:	469c      	mov	ip, r3
 80080da:	b10c      	cbz	r4, 80080e0 <_Index2ColorBulk_M8888I+0x14>
 80080dc:	47a0      	blx	r4
 80080de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e0:	6834      	ldr	r4, [r6, #0]
 80080e2:	43e3      	mvns	r3, r4
 80080e4:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80080e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	4313      	orrs	r3, r2
 80080ee:	b2e2      	uxtb	r2, r4
 80080f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80080f8:	431c      	orrs	r4, r3
 80080fa:	3d01      	subs	r5, #1
 80080fc:	f847 4b04 	str.w	r4, [r7], #4
 8008100:	4466      	add	r6, ip
 8008102:	d1ed      	bne.n	80080e0 <_Index2ColorBulk_M8888I+0x14>
 8008104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008106:	bf00      	nop
 8008108:	2001f8f4 	.word	0x2001f8f4

0800810c <WM_GetDesktopWindow>:
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <WM_GetDesktopWindow+0x10>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	7c5a      	ldrb	r2, [r3, #17]
 8008112:	4b03      	ldr	r3, [pc, #12]	; (8008120 <WM_GetDesktopWindow+0x14>)
 8008114:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000010 	.word	0x20000010
 8008120:	2001fd78 	.word	0x2001fd78

08008124 <_OnExit>:
 8008124:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <_OnExit+0x2c>)
 8008126:	490b      	ldr	r1, [pc, #44]	; (8008154 <_OnExit+0x30>)
 8008128:	2300      	movs	r3, #0
 800812a:	7013      	strb	r3, [r2, #0]
 800812c:	4a0a      	ldr	r2, [pc, #40]	; (8008158 <_OnExit+0x34>)
 800812e:	600b      	str	r3, [r1, #0]
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	4a0a      	ldr	r2, [pc, #40]	; (800815c <_OnExit+0x38>)
 8008134:	604b      	str	r3, [r1, #4]
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4a09      	ldr	r2, [pc, #36]	; (8008160 <_OnExit+0x3c>)
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	4a09      	ldr	r2, [pc, #36]	; (8008164 <_OnExit+0x40>)
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	4a09      	ldr	r2, [pc, #36]	; (8008168 <_OnExit+0x44>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <_OnExit+0x48>)
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <_OnExit+0x4c>)
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	4770      	bx	lr
 8008150:	2001f924 	.word	0x2001f924
 8008154:	2001fd88 	.word	0x2001fd88
 8008158:	2001f8fc 	.word	0x2001f8fc
 800815c:	2001fdac 	.word	0x2001fdac
 8008160:	2001fdb4 	.word	0x2001fdb4
 8008164:	2001fdc0 	.word	0x2001fdc0
 8008168:	2001fd74 	.word	0x2001fd74
 800816c:	2001fda0 	.word	0x2001fda0
 8008170:	2001fdb0 	.word	0x2001fdb0

08008174 <_Findy1>:
 8008174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008176:	4605      	mov	r5, r0
 8008178:	b085      	sub	sp, #20
 800817a:	460c      	mov	r4, r1
 800817c:	4616      	mov	r6, r2
 800817e:	2d00      	cmp	r5, #0
 8008180:	d04c      	beq.n	800821c <_Findy1+0xa8>
 8008182:	4628      	mov	r0, r5
 8008184:	f7ff fd5a 	bl	8007c3c <GUI_ALLOC_LockH>
 8008188:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800818a:	9001      	str	r0, [sp, #4]
 800818c:	07bb      	lsls	r3, r7, #30
 800818e:	4601      	mov	r1, r0
 8008190:	d53d      	bpl.n	800820e <_Findy1+0x9a>
 8008192:	ad02      	add	r5, sp, #8
 8008194:	b126      	cbz	r6, 80081a0 <_Findy1+0x2c>
 8008196:	4628      	mov	r0, r5
 8008198:	4632      	mov	r2, r6
 800819a:	f001 fbcd 	bl	8009938 <GUI__IntersectRects>
 800819e:	e002      	b.n	80081a6 <_Findy1+0x32>
 80081a0:	c803      	ldmia	r0, {r0, r1}
 80081a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80081a6:	4620      	mov	r0, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	f001 fde9 	bl	8009d80 <GUI_RectsIntersect>
 80081ae:	b370      	cbz	r0, 800820e <_Findy1+0x9a>
 80081b0:	f017 0f01 	tst.w	r7, #1
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	d11e      	bne.n	80081f6 <_Findy1+0x82>
 80081b8:	b13e      	cbz	r6, 80081ca <_Findy1+0x56>
 80081ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80081be:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	bfa8      	it	ge
 80081c6:	4613      	movge	r3, r2
 80081c8:	e001      	b.n	80081ce <_Findy1+0x5a>
 80081ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80081ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80081d2:	4293      	cmp	r3, r2
 80081d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80081d8:	dd06      	ble.n	80081e8 <_Findy1+0x74>
 80081da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80081de:	b219      	sxth	r1, r3
 80081e0:	428a      	cmp	r2, r1
 80081e2:	db14      	blt.n	800820e <_Findy1+0x9a>
 80081e4:	3b01      	subs	r3, #1
 80081e6:	e004      	b.n	80081f2 <_Findy1+0x7e>
 80081e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80081ec:	b219      	sxth	r1, r3
 80081ee:	428a      	cmp	r2, r1
 80081f0:	dd0d      	ble.n	800820e <_Findy1+0x9a>
 80081f2:	80e3      	strh	r3, [r4, #6]
 80081f4:	e00b      	b.n	800820e <_Findy1+0x9a>
 80081f6:	69df      	ldr	r7, [r3, #28]
 80081f8:	b14f      	cbz	r7, 800820e <_Findy1+0x9a>
 80081fa:	4638      	mov	r0, r7
 80081fc:	4621      	mov	r1, r4
 80081fe:	462a      	mov	r2, r5
 8008200:	f7ff ffb8 	bl	8008174 <_Findy1>
 8008204:	4638      	mov	r0, r7
 8008206:	f7ff fd0f 	bl	8007c28 <GUI_ALLOC_h2p>
 800820a:	6a07      	ldr	r7, [r0, #32]
 800820c:	e7f4      	b.n	80081f8 <_Findy1+0x84>
 800820e:	a804      	add	r0, sp, #16
 8008210:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008214:	6a1d      	ldr	r5, [r3, #32]
 8008216:	f7ff fd1f 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800821a:	e7b0      	b.n	800817e <_Findy1+0xa>
 800821c:	b005      	add	sp, #20
 800821e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008220 <_Findx0>:
 8008220:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	460f      	mov	r7, r1
 8008228:	4690      	mov	r8, r2
 800822a:	2500      	movs	r5, #0
 800822c:	2c00      	cmp	r4, #0
 800822e:	d037      	beq.n	80082a0 <_Findx0+0x80>
 8008230:	4620      	mov	r0, r4
 8008232:	f7ff fd03 	bl	8007c3c <GUI_ALLOC_LockH>
 8008236:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008238:	9001      	str	r0, [sp, #4]
 800823a:	07b2      	lsls	r2, r6, #30
 800823c:	4601      	mov	r1, r0
 800823e:	d528      	bpl.n	8008292 <_Findx0+0x72>
 8008240:	ac02      	add	r4, sp, #8
 8008242:	f1b8 0f00 	cmp.w	r8, #0
 8008246:	d004      	beq.n	8008252 <_Findx0+0x32>
 8008248:	4620      	mov	r0, r4
 800824a:	4642      	mov	r2, r8
 800824c:	f001 fb74 	bl	8009938 <GUI__IntersectRects>
 8008250:	e002      	b.n	8008258 <_Findx0+0x38>
 8008252:	c803      	ldmia	r0, {r0, r1}
 8008254:	e884 0003 	stmia.w	r4, {r0, r1}
 8008258:	4638      	mov	r0, r7
 800825a:	4621      	mov	r1, r4
 800825c:	f001 fd90 	bl	8009d80 <GUI_RectsIntersect>
 8008260:	b1b8      	cbz	r0, 8008292 <_Findx0+0x72>
 8008262:	07f3      	lsls	r3, r6, #31
 8008264:	d405      	bmi.n	8008272 <_Findx0+0x52>
 8008266:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	803b      	strh	r3, [r7, #0]
 800826e:	2501      	movs	r5, #1
 8008270:	e00f      	b.n	8008292 <_Findx0+0x72>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	69de      	ldr	r6, [r3, #28]
 8008276:	b166      	cbz	r6, 8008292 <_Findx0+0x72>
 8008278:	4630      	mov	r0, r6
 800827a:	4639      	mov	r1, r7
 800827c:	4622      	mov	r2, r4
 800827e:	f7ff ffcf 	bl	8008220 <_Findx0>
 8008282:	2800      	cmp	r0, #0
 8008284:	4630      	mov	r0, r6
 8008286:	bf18      	it	ne
 8008288:	2501      	movne	r5, #1
 800828a:	f7ff fccd 	bl	8007c28 <GUI_ALLOC_h2p>
 800828e:	6a06      	ldr	r6, [r0, #32]
 8008290:	e7f1      	b.n	8008276 <_Findx0+0x56>
 8008292:	a804      	add	r0, sp, #16
 8008294:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008298:	6a1c      	ldr	r4, [r3, #32]
 800829a:	f7ff fcdd 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800829e:	e7c5      	b.n	800822c <_Findx0+0xc>
 80082a0:	4628      	mov	r0, r5
 80082a2:	b004      	add	sp, #16
 80082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082a8 <_Findx1>:
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	4604      	mov	r4, r0
 80082ac:	b085      	sub	sp, #20
 80082ae:	460e      	mov	r6, r1
 80082b0:	4617      	mov	r7, r2
 80082b2:	2c00      	cmp	r4, #0
 80082b4:	d031      	beq.n	800831a <_Findx1+0x72>
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff fcc0 	bl	8007c3c <GUI_ALLOC_LockH>
 80082bc:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80082be:	9001      	str	r0, [sp, #4]
 80082c0:	07aa      	lsls	r2, r5, #30
 80082c2:	4601      	mov	r1, r0
 80082c4:	d522      	bpl.n	800830c <_Findx1+0x64>
 80082c6:	ac02      	add	r4, sp, #8
 80082c8:	b127      	cbz	r7, 80082d4 <_Findx1+0x2c>
 80082ca:	4620      	mov	r0, r4
 80082cc:	463a      	mov	r2, r7
 80082ce:	f001 fb33 	bl	8009938 <GUI__IntersectRects>
 80082d2:	e002      	b.n	80082da <_Findx1+0x32>
 80082d4:	c803      	ldmia	r0, {r0, r1}
 80082d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80082da:	4630      	mov	r0, r6
 80082dc:	4621      	mov	r1, r4
 80082de:	f001 fd4f 	bl	8009d80 <GUI_RectsIntersect>
 80082e2:	b198      	cbz	r0, 800830c <_Findx1+0x64>
 80082e4:	07eb      	lsls	r3, r5, #31
 80082e6:	d404      	bmi.n	80082f2 <_Findx1+0x4a>
 80082e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	80b3      	strh	r3, [r6, #4]
 80082f0:	e00c      	b.n	800830c <_Findx1+0x64>
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	69dd      	ldr	r5, [r3, #28]
 80082f6:	b14d      	cbz	r5, 800830c <_Findx1+0x64>
 80082f8:	4628      	mov	r0, r5
 80082fa:	4631      	mov	r1, r6
 80082fc:	4622      	mov	r2, r4
 80082fe:	f7ff ffd3 	bl	80082a8 <_Findx1>
 8008302:	4628      	mov	r0, r5
 8008304:	f7ff fc90 	bl	8007c28 <GUI_ALLOC_h2p>
 8008308:	6a05      	ldr	r5, [r0, #32]
 800830a:	e7f4      	b.n	80082f6 <_Findx1+0x4e>
 800830c:	a804      	add	r0, sp, #16
 800830e:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008312:	6a1c      	ldr	r4, [r3, #32]
 8008314:	f7ff fca0 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008318:	e7cb      	b.n	80082b2 <_Findx1+0xa>
 800831a:	b005      	add	sp, #20
 800831c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008320 <WM__ClipAtParentBorders>:
 8008320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008322:	4607      	mov	r7, r0
 8008324:	460d      	mov	r5, r1
 8008326:	4628      	mov	r0, r5
 8008328:	f7ff fc88 	bl	8007c3c <GUI_ALLOC_LockH>
 800832c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800832e:	ac02      	add	r4, sp, #8
 8008330:	f013 0602 	ands.w	r6, r3, #2
 8008334:	4601      	mov	r1, r0
 8008336:	f844 0d04 	str.w	r0, [r4, #-4]!
 800833a:	d104      	bne.n	8008346 <WM__ClipAtParentBorders+0x26>
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff fc8b 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008342:	4630      	mov	r0, r6
 8008344:	e016      	b.n	8008374 <WM__ClipAtParentBorders+0x54>
 8008346:	4638      	mov	r0, r7
 8008348:	f001 fb28 	bl	800999c <GUI__IntersectRect>
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	699e      	ldr	r6, [r3, #24]
 8008350:	4620      	mov	r0, r4
 8008352:	b956      	cbnz	r6, 800836a <WM__ClipAtParentBorders+0x4a>
 8008354:	f7ff fc80 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008358:	4b07      	ldr	r3, [pc, #28]	; (8008378 <WM__ClipAtParentBorders+0x58>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	4295      	cmp	r5, r2
 800835e:	d008      	beq.n	8008372 <WM__ClipAtParentBorders+0x52>
 8008360:	6858      	ldr	r0, [r3, #4]
 8008362:	1a2b      	subs	r3, r5, r0
 8008364:	4258      	negs	r0, r3
 8008366:	4158      	adcs	r0, r3
 8008368:	e004      	b.n	8008374 <WM__ClipAtParentBorders+0x54>
 800836a:	f7ff fc75 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800836e:	4635      	mov	r5, r6
 8008370:	e7d9      	b.n	8008326 <WM__ClipAtParentBorders+0x6>
 8008372:	2001      	movs	r0, #1
 8008374:	b003      	add	sp, #12
 8008376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008378:	2001fd78 	.word	0x2001fd78

0800837c <WM__InsertWindowIntoList>:
 800837c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837e:	4604      	mov	r4, r0
 8008380:	b085      	sub	sp, #20
 8008382:	460d      	mov	r5, r1
 8008384:	2900      	cmp	r1, #0
 8008386:	d049      	beq.n	800841c <WM__InsertWindowIntoList+0xa0>
 8008388:	f7ff fc58 	bl	8007c3c <GUI_ALLOC_LockH>
 800838c:	2300      	movs	r3, #0
 800838e:	6203      	str	r3, [r0, #32]
 8008390:	6185      	str	r5, [r0, #24]
 8008392:	9001      	str	r0, [sp, #4]
 8008394:	4628      	mov	r0, r5
 8008396:	f7ff fc51 	bl	8007c3c <GUI_ALLOC_LockH>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	69c5      	ldr	r5, [r0, #28]
 800839e:	9002      	str	r0, [sp, #8]
 80083a0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80083a2:	b92d      	cbnz	r5, 80083b0 <WM__InsertWindowIntoList+0x34>
 80083a4:	61c4      	str	r4, [r0, #28]
 80083a6:	a801      	add	r0, sp, #4
 80083a8:	f7ff fc56 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80083ac:	a802      	add	r0, sp, #8
 80083ae:	e033      	b.n	8008418 <WM__InsertWindowIntoList+0x9c>
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff fc43 	bl	8007c3c <GUI_ALLOC_LockH>
 80083b6:	ae04      	add	r6, sp, #16
 80083b8:	f007 0708 	and.w	r7, r7, #8
 80083bc:	f846 0d04 	str.w	r0, [r6, #-4]!
 80083c0:	b977      	cbnz	r7, 80083e0 <WM__InsertWindowIntoList+0x64>
 80083c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80083c4:	071a      	lsls	r2, r3, #28
 80083c6:	d50b      	bpl.n	80083e0 <WM__InsertWindowIntoList+0x64>
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	621d      	str	r5, [r3, #32]
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	a801      	add	r0, sp, #4
 80083d0:	61dc      	str	r4, [r3, #28]
 80083d2:	f7ff fc41 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80083d6:	a802      	add	r0, sp, #8
 80083d8:	f7ff fc3e 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80083dc:	4630      	mov	r0, r6
 80083de:	e01b      	b.n	8008418 <WM__InsertWindowIntoList+0x9c>
 80083e0:	a802      	add	r0, sp, #8
 80083e2:	f7ff fc39 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7ff fc36 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7ff fc1b 	bl	8007c28 <GUI_ALLOC_h2p>
 80083f2:	9003      	str	r0, [sp, #12]
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	6a1d      	ldr	r5, [r3, #32]
 80083f8:	b90d      	cbnz	r5, 80083fe <WM__InsertWindowIntoList+0x82>
 80083fa:	621c      	str	r4, [r3, #32]
 80083fc:	e00b      	b.n	8008416 <WM__InsertWindowIntoList+0x9a>
 80083fe:	4628      	mov	r0, r5
 8008400:	f7ff fc12 	bl	8007c28 <GUI_ALLOC_h2p>
 8008404:	2f00      	cmp	r7, #0
 8008406:	d1f4      	bne.n	80083f2 <WM__InsertWindowIntoList+0x76>
 8008408:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800840a:	071b      	lsls	r3, r3, #28
 800840c:	d5f1      	bpl.n	80083f2 <WM__InsertWindowIntoList+0x76>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	621c      	str	r4, [r3, #32]
 8008412:	9b01      	ldr	r3, [sp, #4]
 8008414:	621d      	str	r5, [r3, #32]
 8008416:	a801      	add	r0, sp, #4
 8008418:	f7ff fc1e 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800841c:	b005      	add	sp, #20
 800841e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008420 <WM__Client2Screen>:
 8008420:	4603      	mov	r3, r0
 8008422:	4608      	mov	r0, r1
 8008424:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008428:	f9b3 1000 	ldrsh.w	r1, [r3]
 800842c:	f001 bcce 	b.w	8009dcc <GUI_MoveRect>

08008430 <_SetClipRectUserIntersect>:
 8008430:	4b11      	ldr	r3, [pc, #68]	; (8008478 <_SetClipRectUserIntersect+0x48>)
 8008432:	b530      	push	{r4, r5, lr}
 8008434:	681c      	ldr	r4, [r3, #0]
 8008436:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008438:	b085      	sub	sp, #20
 800843a:	4605      	mov	r5, r0
 800843c:	b1ba      	cbz	r2, 800846e <_SetClipRectUserIntersect+0x3e>
 800843e:	6810      	ldr	r0, [r2, #0]
 8008440:	6851      	ldr	r1, [r2, #4]
 8008442:	ab02      	add	r3, sp, #8
 8008444:	c303      	stmia	r3!, {r0, r1}
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <_SetClipRectUserIntersect+0x4c>)
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	b900      	cbnz	r0, 800844e <_SetClipRectUserIntersect+0x1e>
 800844c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800844e:	f7ff fbf5 	bl	8007c3c <GUI_ALLOC_LockH>
 8008452:	ac04      	add	r4, sp, #16
 8008454:	a902      	add	r1, sp, #8
 8008456:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800845a:	f7ff ffe1 	bl	8008420 <WM__Client2Screen>
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff fbfa 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008464:	a802      	add	r0, sp, #8
 8008466:	4629      	mov	r1, r5
 8008468:	f001 fa98 	bl	800999c <GUI__IntersectRect>
 800846c:	a802      	add	r0, sp, #8
 800846e:	f001 f9c7 	bl	8009800 <LCD_SetClipRectEx>
 8008472:	b005      	add	sp, #20
 8008474:	bd30      	pop	{r4, r5, pc}
 8008476:	bf00      	nop
 8008478:	20000010 	.word	0x20000010
 800847c:	2001fd74 	.word	0x2001fd74

08008480 <WM__ActivateClipRect>:
 8008480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008482:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <WM__ActivateClipRect+0x3c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800848a:	b10a      	cbz	r2, 8008490 <WM__ActivateClipRect+0x10>
 800848c:	480c      	ldr	r0, [pc, #48]	; (80084c0 <WM__ActivateClipRect+0x40>)
 800848e:	e011      	b.n	80084b4 <WM__ActivateClipRect+0x34>
 8008490:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008492:	f7ff fbd3 	bl	8007c3c <GUI_ALLOC_LockH>
 8008496:	9001      	str	r0, [sp, #4]
 8008498:	c803      	ldmia	r0, {r0, r1}
 800849a:	ac02      	add	r4, sp, #8
 800849c:	e884 0003 	stmia.w	r4, {r0, r1}
 80084a0:	a801      	add	r0, sp, #4
 80084a2:	f7ff fbd9 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <WM__ActivateClipRect+0x44>)
 80084a8:	6819      	ldr	r1, [r3, #0]
 80084aa:	b111      	cbz	r1, 80084b2 <WM__ActivateClipRect+0x32>
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff ff37 	bl	8008320 <WM__ClipAtParentBorders>
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff ffbc 	bl	8008430 <_SetClipRectUserIntersect>
 80084b8:	b004      	add	sp, #16
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	20000010 	.word	0x20000010
 80084c0:	2001f908 	.word	0x2001f908
 80084c4:	2001fd74 	.word	0x2001fd74

080084c8 <WM__InvalidateDrawAndDescs>:
 80084c8:	b513      	push	{r0, r1, r4, lr}
 80084ca:	4604      	mov	r4, r0
 80084cc:	b300      	cbz	r0, 8008510 <WM__InvalidateDrawAndDescs+0x48>
 80084ce:	f7ff fbb5 	bl	8007c3c <GUI_ALLOC_LockH>
 80084d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80084d4:	9001      	str	r0, [sp, #4]
 80084d6:	0793      	lsls	r3, r2, #30
 80084d8:	d517      	bpl.n	800850a <WM__InvalidateDrawAndDescs+0x42>
 80084da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80084dc:	b140      	cbz	r0, 80084f0 <WM__InvalidateDrawAndDescs+0x28>
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <WM__InvalidateDrawAndDescs+0x4c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	d004      	beq.n	80084f0 <WM__InvalidateDrawAndDescs+0x28>
 80084e6:	f001 f957 	bl	8009798 <GUI_MEMDEV_Delete>
 80084ea:	9b01      	ldr	r3, [sp, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24
 80084f0:	4620      	mov	r0, r4
 80084f2:	f001 fd6d 	bl	8009fd0 <WM_GetFirstChild>
 80084f6:	4604      	mov	r4, r0
 80084f8:	b13c      	cbz	r4, 800850a <WM__InvalidateDrawAndDescs+0x42>
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7ff ffe4 	bl	80084c8 <WM__InvalidateDrawAndDescs>
 8008500:	4620      	mov	r0, r4
 8008502:	f7ff fb91 	bl	8007c28 <GUI_ALLOC_h2p>
 8008506:	6a04      	ldr	r4, [r0, #32]
 8008508:	e7f6      	b.n	80084f8 <WM__InvalidateDrawAndDescs+0x30>
 800850a:	a801      	add	r0, sp, #4
 800850c:	f7ff fba4 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008510:	b002      	add	sp, #8
 8008512:	bd10      	pop	{r4, pc}
 8008514:	2001fdbc 	.word	0x2001fdbc

08008518 <WM__RectIsNZ>:
 8008518:	f9b0 2000 	ldrsh.w	r2, [r0]
 800851c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	dc08      	bgt.n	8008536 <WM__RectIsNZ+0x1e>
 8008524:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008528:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800852c:	429a      	cmp	r2, r3
 800852e:	bfcc      	ite	gt
 8008530:	2000      	movgt	r0, #0
 8008532:	2001      	movle	r0, #1
 8008534:	4770      	bx	lr
 8008536:	2000      	movs	r0, #0
 8008538:	4770      	bx	lr
	...

0800853c <_Invalidate1Abs>:
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	b085      	sub	sp, #20
 8008540:	4606      	mov	r6, r0
 8008542:	460d      	mov	r5, r1
 8008544:	4617      	mov	r7, r2
 8008546:	f7ff fb6f 	bl	8007c28 <GUI_ALLOC_h2p>
 800854a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800854c:	9001      	str	r0, [sp, #4]
 800854e:	07a3      	lsls	r3, r4, #30
 8008550:	d534      	bpl.n	80085bc <_Invalidate1Abs+0x80>
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff ffe0 	bl	8008518 <WM__RectIsNZ>
 8008558:	2800      	cmp	r0, #0
 800855a:	d02f      	beq.n	80085bc <_Invalidate1Abs+0x80>
 800855c:	f640 0301 	movw	r3, #2049	; 0x801
 8008560:	4023      	ands	r3, r4
 8008562:	2b01      	cmp	r3, #1
 8008564:	d02a      	beq.n	80085bc <_Invalidate1Abs+0x80>
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff fb68 	bl	8007c3c <GUI_ALLOC_LockH>
 800856c:	ac02      	add	r4, sp, #8
 800856e:	4602      	mov	r2, r0
 8008570:	9001      	str	r0, [sp, #4]
 8008572:	4629      	mov	r1, r5
 8008574:	4620      	mov	r0, r4
 8008576:	f001 f9df 	bl	8009938 <GUI__IntersectRects>
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff ffcc 	bl	8008518 <WM__RectIsNZ>
 8008580:	b1c8      	cbz	r0, 80085b6 <_Invalidate1Abs+0x7a>
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8008586:	f244 0120 	movw	r1, #16416	; 0x4020
 800858a:	4031      	ands	r1, r6
 800858c:	f103 0508 	add.w	r5, r3, #8
 8008590:	b129      	cbz	r1, 800859e <_Invalidate1Abs+0x62>
 8008592:	4628      	mov	r0, r5
 8008594:	4629      	mov	r1, r5
 8008596:	4622      	mov	r2, r4
 8008598:	f001 fc28 	bl	8009dec <GUI_MergeRect>
 800859c:	e00b      	b.n	80085b6 <_Invalidate1Abs+0x7a>
 800859e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085a2:	433e      	orrs	r6, r7
 80085a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80085a8:	629e      	str	r6, [r3, #40]	; 0x28
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <_Invalidate1Abs+0x84>)
 80085ac:	881a      	ldrh	r2, [r3, #0]
 80085ae:	3201      	adds	r2, #1
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	f001 fbb9 	bl	8009d28 <GUI_SignalEvent>
 80085b6:	a801      	add	r0, sp, #4
 80085b8:	f7ff fb4e 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80085bc:	b005      	add	sp, #20
 80085be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c0:	2001fd90 	.word	0x2001fd90

080085c4 <WM__Invalidate1Abs>:
 80085c4:	2220      	movs	r2, #32
 80085c6:	f7ff bfb9 	b.w	800853c <_Invalidate1Abs>

080085ca <WM_InvalidateWindowAndDescsEx>:
 80085ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085cc:	460f      	mov	r7, r1
 80085ce:	b085      	sub	sp, #20
 80085d0:	4615      	mov	r5, r2
 80085d2:	4606      	mov	r6, r0
 80085d4:	b348      	cbz	r0, 800862a <WM_InvalidateWindowAndDescsEx+0x60>
 80085d6:	f7ff fb31 	bl	8007c3c <GUI_ALLOC_LockH>
 80085da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085dc:	ac04      	add	r4, sp, #16
 80085de:	079b      	lsls	r3, r3, #30
 80085e0:	4602      	mov	r2, r0
 80085e2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80085e6:	d403      	bmi.n	80085f0 <WM_InvalidateWindowAndDescsEx+0x26>
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7ff fb35 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80085ee:	e01c      	b.n	800862a <WM_InvalidateWindowAndDescsEx+0x60>
 80085f0:	a802      	add	r0, sp, #8
 80085f2:	4639      	mov	r1, r7
 80085f4:	f001 f9a0 	bl	8009938 <GUI__IntersectRects>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d0f5      	beq.n	80085e8 <WM_InvalidateWindowAndDescsEx+0x1e>
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7ff fb2b 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008602:	4630      	mov	r0, r6
 8008604:	a902      	add	r1, sp, #8
 8008606:	462a      	mov	r2, r5
 8008608:	f7ff ff98 	bl	800853c <_Invalidate1Abs>
 800860c:	4630      	mov	r0, r6
 800860e:	f001 fcdf 	bl	8009fd0 <WM_GetFirstChild>
 8008612:	4604      	mov	r4, r0
 8008614:	b14c      	cbz	r4, 800862a <WM_InvalidateWindowAndDescsEx+0x60>
 8008616:	4620      	mov	r0, r4
 8008618:	a902      	add	r1, sp, #8
 800861a:	462a      	mov	r2, r5
 800861c:	f7ff ffd5 	bl	80085ca <WM_InvalidateWindowAndDescsEx>
 8008620:	4620      	mov	r0, r4
 8008622:	f7ff fb01 	bl	8007c28 <GUI_ALLOC_h2p>
 8008626:	6a04      	ldr	r4, [r0, #32]
 8008628:	e7f4      	b.n	8008614 <WM_InvalidateWindowAndDescsEx+0x4a>
 800862a:	b005      	add	sp, #20
 800862c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800862e <WM__InvalidateRect>:
 800862e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008632:	4680      	mov	r8, r0
 8008634:	4617      	mov	r7, r2
 8008636:	461d      	mov	r5, r3
 8008638:	460c      	mov	r4, r1
 800863a:	2900      	cmp	r1, #0
 800863c:	d030      	beq.n	80086a0 <WM__InvalidateRect+0x72>
 800863e:	4608      	mov	r0, r1
 8008640:	f7ff fafc 	bl	8007c3c <GUI_ALLOC_LockH>
 8008644:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008646:	9001      	str	r0, [sp, #4]
 8008648:	07b3      	lsls	r3, r6, #30
 800864a:	4602      	mov	r2, r0
 800864c:	d525      	bpl.n	800869a <WM__InvalidateRect+0x6c>
 800864e:	a802      	add	r0, sp, #8
 8008650:	4641      	mov	r1, r8
 8008652:	f001 f971 	bl	8009938 <GUI__IntersectRects>
 8008656:	b300      	cbz	r0, 800869a <WM__InvalidateRect+0x6c>
 8008658:	f640 0301 	movw	r3, #2049	; 0x801
 800865c:	4033      	ands	r3, r6
 800865e:	2b01      	cmp	r3, #1
 8008660:	d107      	bne.n	8008672 <WM__InvalidateRect+0x44>
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	a802      	add	r0, sp, #8
 8008666:	6999      	ldr	r1, [r3, #24]
 8008668:	6a1a      	ldr	r2, [r3, #32]
 800866a:	462b      	mov	r3, r5
 800866c:	f7ff ffdf 	bl	800862e <WM__InvalidateRect>
 8008670:	e004      	b.n	800867c <WM__InvalidateRect+0x4e>
 8008672:	4620      	mov	r0, r4
 8008674:	a902      	add	r1, sp, #8
 8008676:	462a      	mov	r2, r5
 8008678:	f7ff ff60 	bl	800853c <_Invalidate1Abs>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	69dc      	ldr	r4, [r3, #28]
 8008680:	b15c      	cbz	r4, 800869a <WM__InvalidateRect+0x6c>
 8008682:	42bc      	cmp	r4, r7
 8008684:	d009      	beq.n	800869a <WM__InvalidateRect+0x6c>
 8008686:	4620      	mov	r0, r4
 8008688:	a902      	add	r1, sp, #8
 800868a:	462a      	mov	r2, r5
 800868c:	f7ff ff9d 	bl	80085ca <WM_InvalidateWindowAndDescsEx>
 8008690:	4620      	mov	r0, r4
 8008692:	f7ff fac9 	bl	8007c28 <GUI_ALLOC_h2p>
 8008696:	6a04      	ldr	r4, [r0, #32]
 8008698:	e7f2      	b.n	8008680 <WM__InvalidateRect+0x52>
 800869a:	a801      	add	r0, sp, #4
 800869c:	f7ff fadc 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80086a0:	b004      	add	sp, #16
 80086a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086a6 <WM__InvalidateRectEx>:
 80086a6:	2320      	movs	r3, #32
 80086a8:	f7ff bfc1 	b.w	800862e <WM__InvalidateRect>

080086ac <WM__SendMsgNoData>:
 80086ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ae:	ab04      	add	r3, sp, #16
 80086b0:	9001      	str	r0, [sp, #4]
 80086b2:	f843 1d10 	str.w	r1, [r3, #-16]!
 80086b6:	4669      	mov	r1, sp
 80086b8:	f001 fc56 	bl	8009f68 <WM__SendMessage>
 80086bc:	b005      	add	sp, #20
 80086be:	f85d fb04 	ldr.w	pc, [sp], #4

080086c2 <WM__GetClientRectWin>:
 80086c2:	2300      	movs	r3, #0
 80086c4:	800b      	strh	r3, [r1, #0]
 80086c6:	8882      	ldrh	r2, [r0, #4]
 80086c8:	804b      	strh	r3, [r1, #2]
 80086ca:	8803      	ldrh	r3, [r0, #0]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	808b      	strh	r3, [r1, #4]
 80086d0:	88c2      	ldrh	r2, [r0, #6]
 80086d2:	8843      	ldrh	r3, [r0, #2]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	80cb      	strh	r3, [r1, #6]
 80086d8:	4770      	bx	lr

080086da <WM_InvalidateRect>:
 80086da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086dc:	460f      	mov	r7, r1
 80086de:	b087      	sub	sp, #28
 80086e0:	4605      	mov	r5, r0
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d033      	beq.n	800874e <WM_InvalidateRect+0x74>
 80086e6:	f7ff faa9 	bl	8007c3c <GUI_ALLOC_LockH>
 80086ea:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80086ec:	9001      	str	r0, [sp, #4]
 80086ee:	07b2      	lsls	r2, r6, #30
 80086f0:	d52a      	bpl.n	8008748 <WM_InvalidateRect+0x6e>
 80086f2:	c803      	ldmia	r0, {r0, r1}
 80086f4:	ac04      	add	r4, sp, #16
 80086f6:	03f3      	lsls	r3, r6, #15
 80086f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80086fc:	d502      	bpl.n	8008704 <WM_InvalidateRect+0x2a>
 80086fe:	4628      	mov	r0, r5
 8008700:	f7ff fee2 	bl	80084c8 <WM__InvalidateDrawAndDescs>
 8008704:	b15f      	cbz	r7, 800871e <WM_InvalidateRect+0x44>
 8008706:	6838      	ldr	r0, [r7, #0]
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	ab02      	add	r3, sp, #8
 800870c:	c303      	stmia	r3!, {r0, r1}
 800870e:	9801      	ldr	r0, [sp, #4]
 8008710:	a902      	add	r1, sp, #8
 8008712:	f7ff fe85 	bl	8008420 <WM__Client2Screen>
 8008716:	4620      	mov	r0, r4
 8008718:	a902      	add	r1, sp, #8
 800871a:	f001 f93f 	bl	800999c <GUI__IntersectRect>
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	f7ff fdfd 	bl	8008320 <WM__ClipAtParentBorders>
 8008726:	b178      	cbz	r0, 8008748 <WM_InvalidateRect+0x6e>
 8008728:	f640 0301 	movw	r3, #2049	; 0x801
 800872c:	4033      	ands	r3, r6
 800872e:	2b01      	cmp	r3, #1
 8008730:	d106      	bne.n	8008740 <WM_InvalidateRect+0x66>
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	4620      	mov	r0, r4
 8008736:	6999      	ldr	r1, [r3, #24]
 8008738:	6a1a      	ldr	r2, [r3, #32]
 800873a:	f7ff ffb4 	bl	80086a6 <WM__InvalidateRectEx>
 800873e:	e003      	b.n	8008748 <WM_InvalidateRect+0x6e>
 8008740:	4628      	mov	r0, r5
 8008742:	4621      	mov	r1, r4
 8008744:	f7ff ff3e 	bl	80085c4 <WM__Invalidate1Abs>
 8008748:	a801      	add	r0, sp, #4
 800874a:	f7ff fa85 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800874e:	b007      	add	sp, #28
 8008750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008752 <WM_InvalidateWindow>:
 8008752:	2100      	movs	r1, #0
 8008754:	f7ff bfc1 	b.w	80086da <WM_InvalidateRect>

08008758 <WM__GetTopLevelLayer>:
 8008758:	b510      	push	{r4, lr}
 800875a:	4604      	mov	r4, r0
 800875c:	f7ff fa64 	bl	8007c28 <GUI_ALLOC_h2p>
 8008760:	6980      	ldr	r0, [r0, #24]
 8008762:	2800      	cmp	r0, #0
 8008764:	d1f9      	bne.n	800875a <WM__GetTopLevelLayer+0x2>
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <WM__GetTopLevelLayer+0x24>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	4294      	cmp	r4, r2
 800876c:	d005      	beq.n	800877a <WM__GetTopLevelLayer+0x22>
 800876e:	6858      	ldr	r0, [r3, #4]
 8008770:	4284      	cmp	r4, r0
 8008772:	bf14      	ite	ne
 8008774:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008778:	2001      	moveq	r0, #1
 800877a:	bd10      	pop	{r4, pc}
 800877c:	2001fd78 	.word	0x2001fd78

08008780 <WM__SelectTopLevelLayer>:
 8008780:	b508      	push	{r3, lr}
 8008782:	f7ff ffe9 	bl	8008758 <WM__GetTopLevelLayer>
 8008786:	2800      	cmp	r0, #0
 8008788:	db03      	blt.n	8008792 <WM__SelectTopLevelLayer+0x12>
 800878a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800878e:	f7fe be73 	b.w	8007478 <GUI_SelectLayer>
 8008792:	bd08      	pop	{r3, pc}

08008794 <WM_SelectWindow>:
 8008794:	4a0d      	ldr	r2, [pc, #52]	; (80087cc <WM_SelectWindow+0x38>)
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800879c:	4604      	mov	r4, r0
 800879e:	4616      	mov	r6, r2
 80087a0:	b908      	cbnz	r0, 80087a6 <WM_SelectWindow+0x12>
 80087a2:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <WM_SelectWindow+0x3c>)
 80087a4:	6814      	ldr	r4, [r2, #0]
 80087a6:	649c      	str	r4, [r3, #72]	; 0x48
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7ff ffe9 	bl	8008780 <WM__SelectTopLevelLayer>
 80087ae:	f7fe fd6b 	bl	8007288 <LCD_SetClipRectMax>
 80087b2:	4620      	mov	r0, r4
 80087b4:	f7ff fa38 	bl	8007c28 <GUI_ALLOC_h2p>
 80087b8:	6833      	ldr	r3, [r6, #0]
 80087ba:	f9b0 1000 	ldrsh.w	r1, [r0]
 80087be:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80087c2:	64d9      	str	r1, [r3, #76]	; 0x4c
 80087c4:	651a      	str	r2, [r3, #80]	; 0x50
 80087c6:	4628      	mov	r0, r5
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	bf00      	nop
 80087cc:	20000010 	.word	0x20000010
 80087d0:	2001fd94 	.word	0x2001fd94

080087d4 <WM_CreateWindowAsChild>:
 80087d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087da:	469b      	mov	fp, r3
 80087dc:	4b4b      	ldr	r3, [pc, #300]	; (800890c <WM_CreateWindowAsChild+0x138>)
 80087de:	4607      	mov	r7, r0
 80087e0:	4688      	mov	r8, r1
 80087e2:	4692      	mov	sl, r2
 80087e4:	681e      	ldr	r6, [r3, #0]
 80087e6:	bb65      	cbnz	r5, 8008842 <WM_CreateWindowAsChild+0x6e>
 80087e8:	4b49      	ldr	r3, [pc, #292]	; (8008910 <WM_CreateWindowAsChild+0x13c>)
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b363      	cbz	r3, 8008848 <WM_CreateWindowAsChild+0x74>
 80087ee:	4b49      	ldr	r3, [pc, #292]	; (8008914 <WM_CreateWindowAsChild+0x140>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	7c5a      	ldrb	r2, [r3, #17]
 80087f4:	4b48      	ldr	r3, [pc, #288]	; (8008918 <WM_CreateWindowAsChild+0x144>)
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	d024      	beq.n	8008848 <WM_CreateWindowAsChild+0x74>
 80087fe:	b31b      	cbz	r3, 8008848 <WM_CreateWindowAsChild+0x74>
 8008800:	461d      	mov	r5, r3
 8008802:	4628      	mov	r0, r5
 8008804:	f7ff fa1a 	bl	8007c3c <GUI_ALLOC_LockH>
 8008808:	f9b0 2000 	ldrsh.w	r2, [r0]
 800880c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008810:	9001      	str	r0, [sp, #4]
 8008812:	4417      	add	r7, r2
 8008814:	4498      	add	r8, r3
 8008816:	f1ba 0f00 	cmp.w	sl, #0
 800881a:	d105      	bne.n	8008828 <WM_CreateWindowAsChild+0x54>
 800881c:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8008820:	ebc2 0a0a 	rsb	sl, r2, sl
 8008824:	f10a 0a01 	add.w	sl, sl, #1
 8008828:	f1bb 0f00 	cmp.w	fp, #0
 800882c:	d105      	bne.n	800883a <WM_CreateWindowAsChild+0x66>
 800882e:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8008832:	ebc3 0b0b 	rsb	fp, r3, fp
 8008836:	f10b 0b01 	add.w	fp, fp, #1
 800883a:	a801      	add	r0, sp, #4
 800883c:	f7ff fa0c 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008840:	e002      	b.n	8008848 <WM_CreateWindowAsChild+0x74>
 8008842:	1c6b      	adds	r3, r5, #1
 8008844:	d1dd      	bne.n	8008802 <WM_CreateWindowAsChild+0x2e>
 8008846:	2500      	movs	r5, #0
 8008848:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800884a:	302c      	adds	r0, #44	; 0x2c
 800884c:	f001 fb02 	bl	8009e54 <GUI_ALLOC_AllocZero>
 8008850:	4604      	mov	r4, r0
 8008852:	2800      	cmp	r0, #0
 8008854:	d056      	beq.n	8008904 <WM_CreateWindowAsChild+0x130>
 8008856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008858:	431e      	orrs	r6, r3
 800885a:	4b2d      	ldr	r3, [pc, #180]	; (8008910 <WM_CreateWindowAsChild+0x13c>)
 800885c:	881a      	ldrh	r2, [r3, #0]
 800885e:	3201      	adds	r2, #1
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	f7ff f9eb 	bl	8007c3c <GUI_ALLOC_LockH>
 8008866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008868:	6103      	str	r3, [r0, #16]
 800886a:	f10d 0908 	add.w	r9, sp, #8
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <WM_CreateWindowAsChild+0x148>)
 8008870:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008872:	f849 0d08 	str.w	r0, [r9, #-8]!
 8008876:	4033      	ands	r3, r6
 8008878:	8007      	strh	r7, [r0, #0]
 800887a:	f8a0 8002 	strh.w	r8, [r0, #2]
 800887e:	4457      	add	r7, sl
 8008880:	44d8      	add	r8, fp
 8008882:	4313      	orrs	r3, r2
 8008884:	3f01      	subs	r7, #1
 8008886:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800888a:	6283      	str	r3, [r0, #40]	; 0x28
 800888c:	8087      	strh	r7, [r0, #4]
 800888e:	f8a0 8006 	strh.w	r8, [r0, #6]
 8008892:	4668      	mov	r0, sp
 8008894:	f7ff f9e0 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008898:	4b21      	ldr	r3, [pc, #132]	; (8008920 <WM_CreateWindowAsChild+0x14c>)
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	b148      	cbz	r0, 80088b2 <WM_CreateWindowAsChild+0xde>
 800889e:	f7ff f9c3 	bl	8007c28 <GUI_ALLOC_h2p>
 80088a2:	4607      	mov	r7, r0
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7ff f9bf 	bl	8007c28 <GUI_ALLOC_h2p>
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	6143      	str	r3, [r0, #20]
 80088ae:	617c      	str	r4, [r7, #20]
 80088b0:	e000      	b.n	80088b4 <WM_CreateWindowAsChild+0xe0>
 80088b2:	601c      	str	r4, [r3, #0]
 80088b4:	4629      	mov	r1, r5
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff fd60 	bl	800837c <WM__InsertWindowIntoList>
 80088bc:	06b5      	lsls	r5, r6, #26
 80088be:	d502      	bpl.n	80088c6 <WM_CreateWindowAsChild+0xf2>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7ff ff67 	bl	8008794 <WM_SelectWindow>
 80088c6:	07f0      	lsls	r0, r6, #31
 80088c8:	d503      	bpl.n	80088d2 <WM_CreateWindowAsChild+0xfe>
 80088ca:	4b16      	ldr	r3, [pc, #88]	; (8008924 <WM_CreateWindowAsChild+0x150>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	3201      	adds	r2, #1
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	0671      	lsls	r1, r6, #25
 80088d4:	d502      	bpl.n	80088dc <WM_CreateWindowAsChild+0x108>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f001 fb9c 	bl	800a014 <WM_BringToBottom>
 80088dc:	07b2      	lsls	r2, r6, #30
 80088de:	d50d      	bpl.n	80088fc <WM_CreateWindowAsChild+0x128>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f7ff f9ab 	bl	8007c3c <GUI_ALLOC_LockH>
 80088e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088e8:	9000      	str	r0, [sp, #0]
 80088ea:	f043 0302 	orr.w	r3, r3, #2
 80088ee:	6283      	str	r3, [r0, #40]	; 0x28
 80088f0:	4668      	mov	r0, sp
 80088f2:	f7ff f9b1 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff ff2b 	bl	8008752 <WM_InvalidateWindow>
 80088fc:	4620      	mov	r0, r4
 80088fe:	2101      	movs	r1, #1
 8008900:	f7ff fed4 	bl	80086ac <WM__SendMsgNoData>
 8008904:	4620      	mov	r0, r4
 8008906:	b003      	add	sp, #12
 8008908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	2001fda0 	.word	0x2001fda0
 8008910:	2001fd70 	.word	0x2001fd70
 8008914:	20000010 	.word	0x20000010
 8008918:	2001fd78 	.word	0x2001fd78
 800891c:	003f3f9f 	.word	0x003f3f9f
 8008920:	2001fd94 	.word	0x2001fd94
 8008924:	2001fdc0 	.word	0x2001fdc0

08008928 <WM__GetNextIVR>:
 8008928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800892c:	4f5d      	ldr	r7, [pc, #372]	; (8008aa4 <WM__GetNextIVR+0x17c>)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8008934:	2800      	cmp	r0, #0
 8008936:	f000 80b2 	beq.w	8008a9e <WM__GetNextIVR+0x176>
 800893a:	4b5b      	ldr	r3, [pc, #364]	; (8008aa8 <WM__GetNextIVR+0x180>)
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	2a01      	cmp	r2, #1
 8008940:	461c      	mov	r4, r3
 8008942:	dd03      	ble.n	800894c <WM__GetNextIVR+0x24>
 8008944:	3a01      	subs	r2, #1
 8008946:	615a      	str	r2, [r3, #20]
 8008948:	2000      	movs	r0, #0
 800894a:	e0a8      	b.n	8008a9e <WM__GetNextIVR+0x176>
 800894c:	f104 0608 	add.w	r6, r4, #8
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008956:	3301      	adds	r3, #1
 8008958:	ad02      	add	r5, sp, #8
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008960:	b923      	cbnz	r3, 800896c <WM__GetNextIVR+0x44>
 8008962:	8823      	ldrh	r3, [r4, #0]
 8008964:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008968:	8863      	ldrh	r3, [r4, #2]
 800896a:	e011      	b.n	8008990 <WM__GetNextIVR+0x68>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	8962      	ldrh	r2, [r4, #10]
 8008970:	f8ad 200a 	strh.w	r2, [sp, #10]
 8008974:	3301      	adds	r3, #1
 8008976:	b29b      	uxth	r3, r3
 8008978:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800897c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008980:	b21b      	sxth	r3, r3
 8008982:	429a      	cmp	r2, r3
 8008984:	da06      	bge.n	8008994 <WM__GetNextIVR+0x6c>
 8008986:	8823      	ldrh	r3, [r4, #0]
 8008988:	f8ad 3008 	strh.w	r3, [sp, #8]
 800898c:	89e3      	ldrh	r3, [r4, #14]
 800898e:	3301      	adds	r3, #1
 8008990:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008994:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008998:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800899c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8008aa8 <WM__GetNextIVR+0x180>
 80089a0:	429a      	cmp	r2, r3
 80089a2:	dd04      	ble.n	80089ae <WM__GetNextIVR+0x86>
 80089a4:	6963      	ldr	r3, [r4, #20]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	2000      	movs	r0, #0
 80089aa:	6163      	str	r3, [r4, #20]
 80089ac:	e077      	b.n	8008a9e <WM__GetNextIVR+0x176>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80089b2:	f7ff f943 	bl	8007c3c <GUI_ALLOC_LockH>
 80089b6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80089ba:	f9b8 3000 	ldrsh.w	r3, [r8]
 80089be:	9001      	str	r0, [sp, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d11c      	bne.n	80089fe <WM__GetNextIVR+0xd6>
 80089c4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80089c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80089cc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80089d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80089d4:	4b33      	ldr	r3, [pc, #204]	; (8008aa4 <WM__GetNextIVR+0x17c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089da:	b15a      	cbz	r2, 80089f4 <WM__GetNextIVR+0xcc>
 80089dc:	4610      	mov	r0, r2
 80089de:	f7ff f923 	bl	8007c28 <GUI_ALLOC_h2p>
 80089e2:	4680      	mov	r8, r0
 80089e4:	2200      	movs	r2, #0
 80089e6:	6a00      	ldr	r0, [r0, #32]
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7ff fbc3 	bl	8008174 <_Findy1>
 80089ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80089f2:	e7f2      	b.n	80089da <WM__GetNextIVR+0xb2>
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	4629      	mov	r1, r5
 80089f8:	69d8      	ldr	r0, [r3, #28]
 80089fa:	f7ff fbbb 	bl	8008174 <_Findy1>
 80089fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008a02:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a0a:	b16a      	cbz	r2, 8008a28 <WM__GetNextIVR+0x100>
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f7ff f90b 	bl	8007c28 <GUI_ALLOC_h2p>
 8008a12:	4629      	mov	r1, r5
 8008a14:	4680      	mov	r8, r0
 8008a16:	2200      	movs	r2, #0
 8008a18:	6a00      	ldr	r0, [r0, #32]
 8008a1a:	f7ff fc01 	bl	8008220 <_Findx0>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d1ed      	bne.n	80089fe <WM__GetNextIVR+0xd6>
 8008a22:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008a26:	e7f0      	b.n	8008a0a <WM__GetNextIVR+0xe2>
 8008a28:	9b01      	ldr	r3, [sp, #4]
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	69d8      	ldr	r0, [r3, #28]
 8008a2e:	f7ff fbf7 	bl	8008220 <_Findx0>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d1e3      	bne.n	80089fe <WM__GetNextIVR+0xd6>
 8008a36:	88a3      	ldrh	r3, [r4, #4]
 8008a38:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008a3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a40:	b21b      	sxth	r3, r3
 8008a42:	429a      	cmp	r2, r3
 8008a44:	dd07      	ble.n	8008a56 <WM__GetNextIVR+0x12e>
 8008a46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a4a:	e886 0003 	stmia.w	r6, {r0, r1}
 8008a4e:	a801      	add	r0, sp, #4
 8008a50:	f7ff f902 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008a54:	e797      	b.n	8008986 <WM__GetNextIVR+0x5e>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a5a:	b152      	cbz	r2, 8008a72 <WM__GetNextIVR+0x14a>
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7ff f8e3 	bl	8007c28 <GUI_ALLOC_h2p>
 8008a62:	4607      	mov	r7, r0
 8008a64:	2200      	movs	r2, #0
 8008a66:	6a00      	ldr	r0, [r0, #32]
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7ff fc1d 	bl	80082a8 <_Findx1>
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	e7f3      	b.n	8008a5a <WM__GetNextIVR+0x132>
 8008a72:	af04      	add	r7, sp, #16
 8008a74:	4629      	mov	r1, r5
 8008a76:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8008a7a:	69d8      	ldr	r0, [r3, #28]
 8008a7c:	f7ff fc14 	bl	80082a8 <_Findx1>
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff f8e9 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	dc89      	bgt.n	80089a4 <WM__GetNextIVR+0x7c>
 8008a90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a94:	e886 0003 	stmia.w	r6, {r0, r1}
 8008a98:	f7ff fcf2 	bl	8008480 <WM__ActivateClipRect>
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	b004      	add	sp, #16
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	20000010 	.word	0x20000010
 8008aa8:	2001f900 	.word	0x2001f900

08008aac <WM__InitIVRSearch>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4f39      	ldr	r7, [pc, #228]	; (8008b98 <WM__InitIVRSearch+0xec>)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008ab8:	b086      	sub	sp, #24
 8008aba:	4606      	mov	r6, r0
 8008abc:	b912      	cbnz	r2, 8008ac4 <WM__InitIVRSearch+0x18>
 8008abe:	f7ff fcdf 	bl	8008480 <WM__ActivateClipRect>
 8008ac2:	e064      	b.n	8008b8e <WM__InitIVRSearch+0xe2>
 8008ac4:	4d35      	ldr	r5, [pc, #212]	; (8008b9c <WM__InitIVRSearch+0xf0>)
 8008ac6:	696a      	ldr	r2, [r5, #20]
 8008ac8:	3201      	adds	r2, #1
 8008aca:	2a01      	cmp	r2, #1
 8008acc:	616a      	str	r2, [r5, #20]
 8008ace:	462c      	mov	r4, r5
 8008ad0:	dc5d      	bgt.n	8008b8e <WM__InitIVRSearch+0xe2>
 8008ad2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ad4:	f7ff f8b2 	bl	8007c3c <GUI_ALLOC_LockH>
 8008ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008adc:	612a      	str	r2, [r5, #16]
 8008ade:	4a30      	ldr	r2, [pc, #192]	; (8008ba0 <WM__InitIVRSearch+0xf4>)
 8008ae0:	9000      	str	r0, [sp, #0]
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	b12a      	cbz	r2, 8008af2 <WM__InitIVRSearch+0x46>
 8008ae6:	f100 0308 	add.w	r3, r0, #8
 8008aea:	aa02      	add	r2, sp, #8
 8008aec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008af0:	e005      	b.n	8008afe <WM__InitIVRSearch+0x52>
 8008af2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008af4:	f012 0802 	ands.w	r8, r2, #2
 8008af8:	d00a      	beq.n	8008b10 <WM__InitIVRSearch+0x64>
 8008afa:	c803      	ldmia	r0, {r0, r1}
 8008afc:	aa02      	add	r2, sp, #8
 8008afe:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b02:	ad02      	add	r5, sp, #8
 8008b04:	b166      	cbz	r6, 8008b20 <WM__InitIVRSearch+0x74>
 8008b06:	4628      	mov	r0, r5
 8008b08:	4631      	mov	r1, r6
 8008b0a:	f000 ff47 	bl	800999c <GUI__IntersectRect>
 8008b0e:	e007      	b.n	8008b20 <WM__InitIVRSearch+0x74>
 8008b10:	696b      	ldr	r3, [r5, #20]
 8008b12:	4668      	mov	r0, sp
 8008b14:	3b01      	subs	r3, #1
 8008b16:	616b      	str	r3, [r5, #20]
 8008b18:	f7ff f89e 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	e037      	b.n	8008b90 <WM__InitIVRSearch+0xe4>
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	4e20      	ldr	r6, [pc, #128]	; (8008ba4 <WM__InitIVRSearch+0xf8>)
 8008b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b26:	b1c2      	cbz	r2, 8008b5a <WM__InitIVRSearch+0xae>
 8008b28:	9b00      	ldr	r3, [sp, #0]
 8008b2a:	6810      	ldr	r0, [r2, #0]
 8008b2c:	6851      	ldr	r1, [r2, #4]
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	ab04      	add	r3, sp, #16
 8008b32:	c303      	stmia	r3!, {r0, r1}
 8008b34:	6833      	ldr	r3, [r6, #0]
 8008b36:	b133      	cbz	r3, 8008b46 <WM__InitIVRSearch+0x9a>
 8008b38:	a801      	add	r0, sp, #4
 8008b3a:	f7ff f88d 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008b3e:	6830      	ldr	r0, [r6, #0]
 8008b40:	f7ff f87c 	bl	8007c3c <GUI_ALLOC_LockH>
 8008b44:	9001      	str	r0, [sp, #4]
 8008b46:	9801      	ldr	r0, [sp, #4]
 8008b48:	a904      	add	r1, sp, #16
 8008b4a:	f7ff fc69 	bl	8008420 <WM__Client2Screen>
 8008b4e:	4628      	mov	r0, r5
 8008b50:	a904      	add	r1, sp, #16
 8008b52:	f000 ff23 	bl	800999c <GUI__IntersectRect>
 8008b56:	a801      	add	r0, sp, #4
 8008b58:	e000      	b.n	8008b5c <WM__InitIVRSearch+0xb0>
 8008b5a:	4668      	mov	r0, sp
 8008b5c:	f7ff f87c 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008b60:	6831      	ldr	r1, [r6, #0]
 8008b62:	b119      	cbz	r1, 8008b6c <WM__InitIVRSearch+0xc0>
 8008b64:	4628      	mov	r0, r5
 8008b66:	f7ff fbdb 	bl	8008320 <WM__ClipAtParentBorders>
 8008b6a:	b128      	cbz	r0, 8008b78 <WM__InitIVRSearch+0xcc>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	4628      	mov	r0, r5
 8008b70:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008b72:	f7ff fbd5 	bl	8008320 <WM__ClipAtParentBorders>
 8008b76:	b918      	cbnz	r0, 8008b80 <WM__InitIVRSearch+0xd4>
 8008b78:	6963      	ldr	r3, [r4, #20]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	e007      	b.n	8008b90 <WM__InitIVRSearch+0xe4>
 8008b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008b84:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b88:	f7ff fece 	bl	8008928 <WM__GetNextIVR>
 8008b8c:	e000      	b.n	8008b90 <WM__InitIVRSearch+0xe4>
 8008b8e:	2001      	movs	r0, #1
 8008b90:	b006      	add	sp, #24
 8008b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b96:	bf00      	nop
 8008b98:	20000010 	.word	0x20000010
 8008b9c:	2001f900 	.word	0x2001f900
 8008ba0:	2001fd9d 	.word	0x2001fd9d
 8008ba4:	2001fd74 	.word	0x2001fd74

08008ba8 <WM_Activate>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <WM_Activate+0xc>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008bb2:	4770      	bx	lr
 8008bb4:	20000010 	.word	0x20000010

08008bb8 <WM_DefaultProc>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	4604      	mov	r4, r0
 8008bbc:	6840      	ldr	r0, [r0, #4]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	68e1      	ldr	r1, [r4, #12]
 8008bc2:	2b17      	cmp	r3, #23
 8008bc4:	d00f      	beq.n	8008be6 <WM_DefaultProc+0x2e>
 8008bc6:	dc06      	bgt.n	8008bd6 <WM_DefaultProc+0x1e>
 8008bc8:	2b0e      	cmp	r3, #14
 8008bca:	d00e      	beq.n	8008bea <WM_DefaultProc+0x32>
 8008bcc:	2b14      	cmp	r3, #20
 8008bce:	d114      	bne.n	8008bfa <WM_DefaultProc+0x42>
 8008bd0:	f001 fa06 	bl	8009fe0 <WM__GetClientRectEx>
 8008bd4:	e011      	b.n	8008bfa <WM_DefaultProc+0x42>
 8008bd6:	2b22      	cmp	r3, #34	; 0x22
 8008bd8:	d00c      	beq.n	8008bf4 <WM_DefaultProc+0x3c>
 8008bda:	2b28      	cmp	r3, #40	; 0x28
 8008bdc:	d10d      	bne.n	8008bfa <WM_DefaultProc+0x42>
 8008bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be2:	f7ff bdb6 	b.w	8008752 <WM_InvalidateWindow>
 8008be6:	60e0      	str	r0, [r4, #12]
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	4621      	mov	r1, r4
 8008bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf0:	f001 b9d8 	b.w	8009fa4 <WM_SendToParent>
 8008bf4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008bf8:	e000      	b.n	8008bfc <WM_DefaultProc+0x44>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60e3      	str	r3, [r4, #12]
 8008bfe:	bd10      	pop	{r4, pc}

08008c00 <_cbBackWin>:
 8008c00:	6803      	ldr	r3, [r0, #0]
 8008c02:	2b0e      	cmp	r3, #14
 8008c04:	b510      	push	{r4, lr}
 8008c06:	4604      	mov	r4, r0
 8008c08:	d002      	beq.n	8008c10 <_cbBackWin+0x10>
 8008c0a:	2b0f      	cmp	r3, #15
 8008c0c:	d009      	beq.n	8008c22 <_cbBackWin+0x22>
 8008c0e:	e020      	b.n	8008c52 <_cbBackWin+0x52>
 8008c10:	68c3      	ldr	r3, [r0, #12]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	2a01      	cmp	r2, #1
 8008c16:	d121      	bne.n	8008c5c <_cbBackWin+0x5c>
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c1e:	f001 b8cd 	b.w	8009dbc <GUI_StoreKey>
 8008c22:	4a0f      	ldr	r2, [pc, #60]	; (8008c60 <_cbBackWin+0x60>)
 8008c24:	6843      	ldr	r3, [r0, #4]
 8008c26:	6811      	ldr	r1, [r2, #0]
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	d006      	beq.n	8008c3a <_cbBackWin+0x3a>
 8008c2c:	6852      	ldr	r2, [r2, #4]
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	bf14      	ite	ne
 8008c32:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008c36:	2301      	moveq	r3, #1
 8008c38:	e000      	b.n	8008c3c <_cbBackWin+0x3c>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4a09      	ldr	r2, [pc, #36]	; (8008c64 <_cbBackWin+0x64>)
 8008c3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c42:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008c46:	4298      	cmp	r0, r3
 8008c48:	d003      	beq.n	8008c52 <_cbBackWin+0x52>
 8008c4a:	f7fe fc09 	bl	8007460 <GUI_SetBkColor>
 8008c4e:	f7fe fd95 	bl	800777c <GUI_Clear>
 8008c52:	4620      	mov	r0, r4
 8008c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c58:	f7ff bfae 	b.w	8008bb8 <WM_DefaultProc>
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	bf00      	nop
 8008c60:	2001fd78 	.word	0x2001fd78
 8008c64:	2001fda4 	.word	0x2001fda4

08008c68 <WM_Init>:
 8008c68:	b530      	push	{r4, r5, lr}
 8008c6a:	4b2b      	ldr	r3, [pc, #172]	; (8008d18 <WM_Init+0xb0>)
 8008c6c:	7818      	ldrb	r0, [r3, #0]
 8008c6e:	b085      	sub	sp, #20
 8008c70:	461d      	mov	r5, r3
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d14d      	bne.n	8008d12 <WM_Init+0xaa>
 8008c76:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <WM_Init+0xb4>)
 8008c78:	6018      	str	r0, [r3, #0]
 8008c7a:	4b29      	ldr	r3, [pc, #164]	; (8008d20 <WM_Init+0xb8>)
 8008c7c:	6018      	str	r0, [r3, #0]
 8008c7e:	4b29      	ldr	r3, [pc, #164]	; (8008d24 <WM_Init+0xbc>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6458      	str	r0, [r3, #68]	; 0x44
 8008c84:	4b28      	ldr	r3, [pc, #160]	; (8008d28 <WM_Init+0xc0>)
 8008c86:	8018      	strh	r0, [r3, #0]
 8008c88:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <WM_Init+0xc4>)
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	8018      	strh	r0, [r3, #0]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7fe fc4a 	bl	8007528 <GUI_DEVICE__GetpDriver>
 8008c94:	b1c0      	cbz	r0, 8008cc8 <WM_Init+0x60>
 8008c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8008ca6:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <WM_Init+0xc8>)
 8008ca8:	9302      	str	r3, [sp, #8]
 8008caa:	9003      	str	r0, [sp, #12]
 8008cac:	4613      	mov	r3, r2
 8008cae:	4601      	mov	r1, r0
 8008cb0:	f7ff fd90 	bl	80087d4 <WM_CreateWindowAsChild>
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	; (8008d34 <WM_Init+0xcc>)
 8008cb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cba:	4b1f      	ldr	r3, [pc, #124]	; (8008d38 <WM_Init+0xd0>)
 8008cbc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008cc0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008cc4:	f7ff fd45 	bl	8008752 <WM_InvalidateWindow>
 8008cc8:	3401      	adds	r4, #1
 8008cca:	2c02      	cmp	r4, #2
 8008ccc:	d1df      	bne.n	8008c8e <WM_Init+0x26>
 8008cce:	481b      	ldr	r0, [pc, #108]	; (8008d3c <WM_Init+0xd4>)
 8008cd0:	f001 f998 	bl	800a004 <WM__AddCriticalHandle>
 8008cd4:	481a      	ldr	r0, [pc, #104]	; (8008d40 <WM_Init+0xd8>)
 8008cd6:	f001 f995 	bl	800a004 <WM__AddCriticalHandle>
 8008cda:	481a      	ldr	r0, [pc, #104]	; (8008d44 <WM_Init+0xdc>)
 8008cdc:	f001 f992 	bl	800a004 <WM__AddCriticalHandle>
 8008ce0:	4819      	ldr	r0, [pc, #100]	; (8008d48 <WM_Init+0xe0>)
 8008ce2:	f001 f98f 	bl	800a004 <WM__AddCriticalHandle>
 8008ce6:	4819      	ldr	r0, [pc, #100]	; (8008d4c <WM_Init+0xe4>)
 8008ce8:	f001 f98c 	bl	800a004 <WM__AddCriticalHandle>
 8008cec:	4818      	ldr	r0, [pc, #96]	; (8008d50 <WM_Init+0xe8>)
 8008cee:	f001 f989 	bl	800a004 <WM__AddCriticalHandle>
 8008cf2:	4b10      	ldr	r3, [pc, #64]	; (8008d34 <WM_Init+0xcc>)
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	f7ff fd4d 	bl	8008794 <WM_SelectWindow>
 8008cfa:	f7ff ff55 	bl	8008ba8 <WM_Activate>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	702b      	strb	r3, [r5, #0]
 8008d02:	4814      	ldr	r0, [pc, #80]	; (8008d54 <WM_Init+0xec>)
 8008d04:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <WM_Init+0xf0>)
 8008d06:	6003      	str	r3, [r0, #0]
 8008d08:	b005      	add	sp, #20
 8008d0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d0e:	f7fe bd45 	b.w	800779c <GUI__RegisterExit>
 8008d12:	b005      	add	sp, #20
 8008d14:	bd30      	pop	{r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	2001f924 	.word	0x2001f924
 8008d1c:	2001fd94 	.word	0x2001fd94
 8008d20:	2001f918 	.word	0x2001f918
 8008d24:	20000010 	.word	0x20000010
 8008d28:	2001fd90 	.word	0x2001fd90
 8008d2c:	2001fd70 	.word	0x2001fd70
 8008d30:	08008c01 	.word	0x08008c01
 8008d34:	2001fd78 	.word	0x2001fd78
 8008d38:	2001fda4 	.word	0x2001fda4
 8008d3c:	2001fde8 	.word	0x2001fde8
 8008d40:	2001fdd8 	.word	0x2001fdd8
 8008d44:	2001fdc8 	.word	0x2001fdc8
 8008d48:	2001fdf0 	.word	0x2001fdf0
 8008d4c:	2001fde0 	.word	0x2001fde0
 8008d50:	2001fdd0 	.word	0x2001fdd0
 8008d54:	2001f91c 	.word	0x2001f91c
 8008d58:	08008125 	.word	0x08008125

08008d5c <GUI_MEMDEV_GetDataPtr>:
 8008d5c:	b513      	push	{r0, r1, r4, lr}
 8008d5e:	b150      	cbz	r0, 8008d76 <GUI_MEMDEV_GetDataPtr+0x1a>
 8008d60:	f7fe ff6c 	bl	8007c3c <GUI_ALLOC_LockH>
 8008d64:	4604      	mov	r4, r0
 8008d66:	a802      	add	r0, sp, #8
 8008d68:	f840 4d04 	str.w	r4, [r0, #-4]!
 8008d6c:	f7fe ff74 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008d70:	f104 0018 	add.w	r0, r4, #24
 8008d74:	e7ff      	b.n	8008d76 <GUI_MEMDEV_GetDataPtr+0x1a>
 8008d76:	b002      	add	sp, #8
 8008d78:	bd10      	pop	{r4, pc}
	...

08008d7c <_GetDevData>:
 8008d7c:	4802      	ldr	r0, [pc, #8]	; (8008d88 <_GetDevData+0xc>)
 8008d7e:	2901      	cmp	r1, #1
 8008d80:	bf18      	it	ne
 8008d82:	2000      	movne	r0, #0
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	0800b234 	.word	0x0800b234

08008d8c <_GetDevFunc>:
 8008d8c:	4802      	ldr	r0, [pc, #8]	; (8008d98 <_GetDevFunc+0xc>)
 8008d8e:	2916      	cmp	r1, #22
 8008d90:	bf18      	it	ne
 8008d92:	2000      	movne	r0, #0
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	0800a09d 	.word	0x0800a09d

08008d9c <_GetDevProp>:
 8008d9c:	2908      	cmp	r1, #8
 8008d9e:	bf0c      	ite	eq
 8008da0:	2020      	moveq	r0, #32
 8008da2:	2000      	movne	r0, #0
 8008da4:	4770      	bx	lr

08008da6 <_SetOrg>:
 8008da6:	b508      	push	{r3, lr}
 8008da8:	6800      	ldr	r0, [r0, #0]
 8008daa:	68c3      	ldr	r3, [r0, #12]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	4798      	blx	r3
 8008db0:	bd08      	pop	{r3, pc}

08008db2 <_GetRect>:
 8008db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db4:	6880      	ldr	r0, [r0, #8]
 8008db6:	460c      	mov	r4, r1
 8008db8:	f7fe ff40 	bl	8007c3c <GUI_ALLOC_LockH>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	a802      	add	r0, sp, #8
 8008dc0:	8899      	ldrh	r1, [r3, #4]
 8008dc2:	88da      	ldrh	r2, [r3, #6]
 8008dc4:	891d      	ldrh	r5, [r3, #8]
 8008dc6:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008dca:	895b      	ldrh	r3, [r3, #10]
 8008dcc:	8021      	strh	r1, [r4, #0]
 8008dce:	8062      	strh	r2, [r4, #2]
 8008dd0:	4429      	add	r1, r5
 8008dd2:	441a      	add	r2, r3
 8008dd4:	3901      	subs	r1, #1
 8008dd6:	3a01      	subs	r2, #1
 8008dd8:	80a1      	strh	r1, [r4, #4]
 8008dda:	80e2      	strh	r2, [r4, #6]
 8008ddc:	f7fe ff3c 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008de0:	b003      	add	sp, #12
 8008de2:	bd30      	pop	{r4, r5, pc}

08008de4 <_XY2PTR>:
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <_XY2PTR+0x3c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dea:	4605      	mov	r5, r0
 8008dec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008dee:	460e      	mov	r6, r1
 8008df0:	f7fe ff24 	bl	8007c3c <GUI_ALLOC_LockH>
 8008df4:	4603      	mov	r3, r0
 8008df6:	a802      	add	r0, sp, #8
 8008df8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8008dfc:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008e00:	f103 0118 	add.w	r1, r3, #24
 8008e04:	1b36      	subs	r6, r6, r4
 8008e06:	68dc      	ldr	r4, [r3, #12]
 8008e08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e0c:	fb04 1406 	mla	r4, r4, r6, r1
 8008e10:	1aed      	subs	r5, r5, r3
 8008e12:	f7fe ff21 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008e16:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	b002      	add	sp, #8
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	20000010 	.word	0x20000010

08008e24 <_GetPixelIndex>:
 8008e24:	b508      	push	{r3, lr}
 8008e26:	4608      	mov	r0, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	f7ff ffdb 	bl	8008de4 <_XY2PTR>
 8008e2e:	6800      	ldr	r0, [r0, #0]
 8008e30:	bd08      	pop	{r3, pc}
	...

08008e34 <_XorPixel>:
 8008e34:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <_XorPixel+0x58>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e3a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	460e      	mov	r6, r1
 8008e40:	f7fe fefc 	bl	8007c3c <GUI_ALLOC_LockH>
 8008e44:	4629      	mov	r1, r5
 8008e46:	9000      	str	r0, [sp, #0]
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffcb 	bl	8008de4 <_XY2PTR>
 8008e4e:	9b00      	ldr	r3, [sp, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	4604      	mov	r4, r0
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	4798      	blx	r3
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	4058      	eors	r0, r3
 8008e5e:	9b00      	ldr	r3, [sp, #0]
 8008e60:	6020      	str	r0, [r4, #0]
 8008e62:	6958      	ldr	r0, [r3, #20]
 8008e64:	b160      	cbz	r0, 8008e80 <_XorPixel+0x4c>
 8008e66:	f7fe fee9 	bl	8007c3c <GUI_ALLOC_LockH>
 8008e6a:	ac02      	add	r4, sp, #8
 8008e6c:	6883      	ldr	r3, [r0, #8]
 8008e6e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4631      	mov	r1, r6
 8008e76:	462a      	mov	r2, r5
 8008e78:	4798      	blx	r3
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7fe feec 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008e80:	4668      	mov	r0, sp
 8008e82:	f7fe fee9 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008e86:	b002      	add	sp, #8
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000010 	.word	0x20000010

08008e90 <_SetPixelIndex>:
 8008e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e92:	461c      	mov	r4, r3
 8008e94:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <_SetPixelIndex+0x48>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	4615      	mov	r5, r2
 8008e9e:	f7fe fecd 	bl	8007c3c <GUI_ALLOC_LockH>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	9000      	str	r0, [sp, #0]
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff9c 	bl	8008de4 <_XY2PTR>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	6004      	str	r4, [r0, #0]
 8008eb0:	6958      	ldr	r0, [r3, #20]
 8008eb2:	b160      	cbz	r0, 8008ece <_SetPixelIndex+0x3e>
 8008eb4:	f7fe fec2 	bl	8007c3c <GUI_ALLOC_LockH>
 8008eb8:	ac02      	add	r4, sp, #8
 8008eba:	6883      	ldr	r3, [r0, #8]
 8008ebc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	4798      	blx	r3
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7fe fec5 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008ece:	4668      	mov	r0, sp
 8008ed0:	f7fe fec2 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008ed4:	b002      	add	sp, #8
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	20000010 	.word	0x20000010

08008edc <_DrawVLine>:
 8008edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ee0:	4d2c      	ldr	r5, [pc, #176]	; (8008f94 <_DrawVLine+0xb8>)
 8008ee2:	461e      	mov	r6, r3
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008ee8:	460f      	mov	r7, r1
 8008eea:	4614      	mov	r4, r2
 8008eec:	f7fe fea6 	bl	8007c3c <GUI_ALLOC_LockH>
 8008ef0:	9000      	str	r0, [sp, #0]
 8008ef2:	6940      	ldr	r0, [r0, #20]
 8008ef4:	46a9      	mov	r9, r5
 8008ef6:	b108      	cbz	r0, 8008efc <_DrawVLine+0x20>
 8008ef8:	f7fe fea0 	bl	8007c3c <GUI_ALLOC_LockH>
 8008efc:	9001      	str	r0, [sp, #4]
 8008efe:	4621      	mov	r1, r4
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ff6f 	bl	8008de4 <_XY2PTR>
 8008f06:	f8d9 2000 	ldr.w	r2, [r9]
 8008f0a:	9b00      	ldr	r3, [sp, #0]
 8008f0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008f0e:	7c12      	ldrb	r2, [r2, #16]
 8008f10:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8008f14:	f8d1 9000 	ldr.w	r9, [r1]
 8008f18:	07d2      	lsls	r2, r2, #31
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	d51f      	bpl.n	8008f5e <_DrawVLine+0x82>
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	4798      	blx	r3
 8008f26:	4680      	mov	r8, r0
 8008f28:	9801      	ldr	r0, [sp, #4]
 8008f2a:	b128      	cbz	r0, 8008f38 <_DrawVLine+0x5c>
 8008f2c:	6882      	ldr	r2, [r0, #8]
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f8d2 c000 	ldr.w	ip, [r2]
 8008f34:	4622      	mov	r2, r4
 8008f36:	47e0      	blx	ip
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	ea83 0308 	eor.w	r3, r3, r8
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	9b00      	ldr	r3, [sp, #0]
 8008f42:	3401      	adds	r4, #1
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	42b4      	cmp	r4, r6
 8008f48:	441d      	add	r5, r3
 8008f4a:	dded      	ble.n	8008f28 <_DrawVLine+0x4c>
 8008f4c:	4668      	mov	r0, sp
 8008f4e:	f7fe fe83 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	b1d3      	cbz	r3, 8008f8c <_DrawVLine+0xb0>
 8008f56:	a801      	add	r0, sp, #4
 8008f58:	f7fe fe7e 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008f5c:	e016      	b.n	8008f8c <_DrawVLine+0xb0>
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	b163      	cbz	r3, 8008f7c <_DrawVLine+0xa0>
 8008f62:	9801      	ldr	r0, [sp, #4]
 8008f64:	6883      	ldr	r3, [r0, #8]
 8008f66:	4622      	mov	r2, r4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	4798      	blx	r3
 8008f70:	42b4      	cmp	r4, r6
 8008f72:	f8c5 9000 	str.w	r9, [r5]
 8008f76:	4445      	add	r5, r8
 8008f78:	ddf3      	ble.n	8008f62 <_DrawVLine+0x86>
 8008f7a:	e7e7      	b.n	8008f4c <_DrawVLine+0x70>
 8008f7c:	1b34      	subs	r4, r6, r4
 8008f7e:	3401      	adds	r4, #1
 8008f80:	3c01      	subs	r4, #1
 8008f82:	f8c5 9000 	str.w	r9, [r5]
 8008f86:	4445      	add	r5, r8
 8008f88:	d1fa      	bne.n	8008f80 <_DrawVLine+0xa4>
 8008f8a:	e7df      	b.n	8008f4c <_DrawVLine+0x70>
 8008f8c:	b003      	add	sp, #12
 8008f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f92:	bf00      	nop
 8008f94:	20000010 	.word	0x20000010

08008f98 <_FillRect>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800904c <_FillRect+0xb4>
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	f8db 2000 	ldr.w	r2, [fp]
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8008faa:	460f      	mov	r7, r1
 8008fac:	461d      	mov	r5, r3
 8008fae:	f7fe fe45 	bl	8007c3c <GUI_ALLOC_LockH>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	9002      	str	r0, [sp, #8]
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f7ff ff14 	bl	8008de4 <_XY2PTR>
 8008fbc:	9a02      	ldr	r2, [sp, #8]
 8008fbe:	f8db 3000 	ldr.w	r3, [fp]
 8008fc2:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc8:	4606      	mov	r6, r0
 8008fca:	6950      	ldr	r0, [r2, #20]
 8008fcc:	f8d3 a000 	ldr.w	sl, [r3]
 8008fd0:	1bed      	subs	r5, r5, r7
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	b338      	cbz	r0, 8009026 <_FillRect+0x8e>
 8008fd6:	f7fe fe31 	bl	8007c3c <GUI_ALLOC_LockH>
 8008fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fdc:	f10d 0810 	add.w	r8, sp, #16
 8008fe0:	1b13      	subs	r3, r2, r4
 8008fe2:	f848 0d04 	str.w	r0, [r8, #-4]!
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4639      	mov	r1, r7
 8008fec:	4622      	mov	r2, r4
 8008fee:	462b      	mov	r3, r5
 8008ff0:	f001 f930 	bl	800a254 <GUI_USAGE_AddRect>
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	f7fe fe2f 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8008ffa:	e014      	b.n	8009026 <_FillRect+0x8e>
 8008ffc:	f8db 3000 	ldr.w	r3, [fp]
 8009000:	7c1b      	ldrb	r3, [r3, #16]
 8009002:	07db      	lsls	r3, r3, #31
 8009004:	d513      	bpl.n	800902e <_FillRect+0x96>
 8009006:	9b02      	ldr	r3, [sp, #8]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	4798      	blx	r3
 8009010:	4632      	mov	r2, r6
 8009012:	462b      	mov	r3, r5
 8009014:	6811      	ldr	r1, [r2, #0]
 8009016:	3b01      	subs	r3, #1
 8009018:	ea81 0100 	eor.w	r1, r1, r0
 800901c:	f842 1b04 	str.w	r1, [r2], #4
 8009020:	d1f8      	bne.n	8009014 <_FillRect+0x7c>
 8009022:	444e      	add	r6, r9
 8009024:	3401      	adds	r4, #1
 8009026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009028:	429c      	cmp	r4, r3
 800902a:	dde7      	ble.n	8008ffc <_FillRect+0x64>
 800902c:	e008      	b.n	8009040 <_FillRect+0xa8>
 800902e:	2d00      	cmp	r5, #0
 8009030:	ddf7      	ble.n	8009022 <_FillRect+0x8a>
 8009032:	462b      	mov	r3, r5
 8009034:	4632      	mov	r2, r6
 8009036:	3b01      	subs	r3, #1
 8009038:	f842 ab04 	str.w	sl, [r2], #4
 800903c:	d1fb      	bne.n	8009036 <_FillRect+0x9e>
 800903e:	e7f0      	b.n	8009022 <_FillRect+0x8a>
 8009040:	a802      	add	r0, sp, #8
 8009042:	f7fe fe09 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8009046:	b005      	add	sp, #20
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	20000010 	.word	0x20000010

08009050 <_DrawHLine>:
 8009050:	b507      	push	{r0, r1, r2, lr}
 8009052:	9200      	str	r2, [sp, #0]
 8009054:	f7ff ffa0 	bl	8008f98 <_FillRect>
 8009058:	b003      	add	sp, #12
 800905a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009060 <_DrawBitmap>:
 8009060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	4c9d      	ldr	r4, [pc, #628]	; (80092dc <_DrawBitmap+0x27c>)
 8009066:	469a      	mov	sl, r3
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	b091      	sub	sp, #68	; 0x44
 800906c:	4680      	mov	r8, r0
 800906e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009070:	9207      	str	r2, [sp, #28]
 8009072:	460e      	mov	r6, r1
 8009074:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8009078:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800907a:	2800      	cmp	r0, #0
 800907c:	f000 8387 	beq.w	800978e <_DrawBitmap+0x72e>
 8009080:	f7fe fddc 	bl	8007c3c <GUI_ALLOC_LockH>
 8009084:	900e      	str	r0, [sp, #56]	; 0x38
 8009086:	6940      	ldr	r0, [r0, #20]
 8009088:	b108      	cbz	r0, 800908e <_DrawBitmap+0x2e>
 800908a:	f7fe fdd7 	bl	8007c3c <GUI_ALLOC_LockH>
 800908e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009090:	a810      	add	r0, sp, #64	; 0x40
 8009092:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	930a      	str	r3, [sp, #40]	; 0x28
 800909a:	f7fe fddd 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800909e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80090a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80090a2:	4437      	add	r7, r6
 80090a4:	9704      	str	r7, [sp, #16]
 80090a6:	b150      	cbz	r0, 80090be <_DrawBitmap+0x5e>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	7c1b      	ldrb	r3, [r3, #16]
 80090ac:	079c      	lsls	r4, r3, #30
 80090ae:	d406      	bmi.n	80090be <_DrawBitmap+0x5e>
 80090b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80090b2:	9700      	str	r7, [sp, #0]
 80090b4:	9904      	ldr	r1, [sp, #16]
 80090b6:	9a07      	ldr	r2, [sp, #28]
 80090b8:	4653      	mov	r3, sl
 80090ba:	f001 f8cb 	bl	800a254 <GUI_USAGE_AddRect>
 80090be:	9804      	ldr	r0, [sp, #16]
 80090c0:	9907      	ldr	r1, [sp, #28]
 80090c2:	f7ff fe8f 	bl	8008de4 <_XY2PTR>
 80090c6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80090c8:	2f17      	cmp	r7, #23
 80090ca:	4606      	mov	r6, r0
 80090cc:	dd64      	ble.n	8009198 <_DrawBitmap+0x138>
 80090ce:	ea4f 078a 	mov.w	r7, sl, lsl #2
 80090d2:	9706      	str	r7, [sp, #24]
 80090d4:	f04f 0900 	mov.w	r9, #0
 80090d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80090da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80090dc:	45b9      	cmp	r9, r7
 80090de:	da57      	bge.n	8009190 <_DrawBitmap+0x130>
 80090e0:	b130      	cbz	r0, 80090f0 <_DrawBitmap+0x90>
 80090e2:	6883      	ldr	r3, [r0, #8]
 80090e4:	9a07      	ldr	r2, [sp, #28]
 80090e6:	685c      	ldr	r4, [r3, #4]
 80090e8:	9904      	ldr	r1, [sp, #16]
 80090ea:	444a      	add	r2, r9
 80090ec:	4653      	mov	r3, sl
 80090ee:	47a0      	blx	r4
 80090f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80090f4:	68d8      	ldr	r0, [r3, #12]
 80090f6:	b128      	cbz	r0, 8009104 <_DrawBitmap+0xa4>
 80090f8:	4630      	mov	r0, r6
 80090fa:	4659      	mov	r1, fp
 80090fc:	9a06      	ldr	r2, [sp, #24]
 80090fe:	f001 fbf1 	bl	800a8e4 <memcpy>
 8009102:	e03e      	b.n	8009182 <_DrawBitmap+0x122>
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	4798      	blx	r3
 8009108:	0e00      	lsrs	r0, r0, #24
 800910a:	9005      	str	r0, [sp, #20]
 800910c:	4635      	mov	r5, r6
 800910e:	4657      	mov	r7, sl
 8009110:	465c      	mov	r4, fp
 8009112:	463b      	mov	r3, r7
 8009114:	4622      	mov	r2, r4
 8009116:	f04f 0c00 	mov.w	ip, #0
 800911a:	f852 1b04 	ldr.w	r1, [r2], #4
 800911e:	9805      	ldr	r0, [sp, #20]
 8009120:	0e09      	lsrs	r1, r1, #24
 8009122:	4281      	cmp	r1, r0
 8009124:	9805      	ldr	r0, [sp, #20]
 8009126:	bf08      	it	eq
 8009128:	f10c 0c01 	addeq.w	ip, ip, #1
 800912c:	4281      	cmp	r1, r0
 800912e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009132:	d014      	beq.n	800915e <_DrawBitmap+0xfe>
 8009134:	f1bc 0f00 	cmp.w	ip, #0
 8009138:	d014      	beq.n	8009164 <_DrawBitmap+0x104>
 800913a:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800913e:	4628      	mov	r0, r5
 8009140:	4621      	mov	r1, r4
 8009142:	461a      	mov	r2, r3
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	f8cd c008 	str.w	ip, [sp, #8]
 800914a:	f001 fbcb 	bl	800a8e4 <memcpy>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009154:	441d      	add	r5, r3
 8009156:	441c      	add	r4, r3
 8009158:	ebcc 0707 	rsb	r7, ip, r7
 800915c:	e00f      	b.n	800917e <_DrawBitmap+0x11e>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1db      	bne.n	800911a <_DrawBitmap+0xba>
 8009162:	e7e7      	b.n	8009134 <_DrawBitmap+0xd4>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	0e02      	lsrs	r2, r0, #24
 8009168:	2aff      	cmp	r2, #255	; 0xff
 800916a:	d005      	beq.n	8009178 <_DrawBitmap+0x118>
 800916c:	43d2      	mvns	r2, r2
 800916e:	6829      	ldr	r1, [r5, #0]
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	f000 fc31 	bl	80099d8 <GUI__MixColors>
 8009176:	6028      	str	r0, [r5, #0]
 8009178:	3504      	adds	r5, #4
 800917a:	3404      	adds	r4, #4
 800917c:	3f01      	subs	r7, #1
 800917e:	2f00      	cmp	r7, #0
 8009180:	d1c7      	bne.n	8009112 <_DrawBitmap+0xb2>
 8009182:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009184:	44bb      	add	fp, r7
 8009186:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009188:	f109 0901 	add.w	r9, r9, #1
 800918c:	443e      	add	r6, r7
 800918e:	e7a3      	b.n	80090d8 <_DrawBitmap+0x78>
 8009190:	2800      	cmp	r0, #0
 8009192:	f040 82f9 	bne.w	8009788 <_DrawBitmap+0x728>
 8009196:	e2fa      	b.n	800978e <_DrawBitmap+0x72e>
 8009198:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800919a:	2f10      	cmp	r7, #16
 800919c:	d137      	bne.n	800920e <_DrawBitmap+0x1ae>
 800919e:	1f06      	subs	r6, r0, #4
 80091a0:	2500      	movs	r5, #0
 80091a2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80091a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80091a6:	42bd      	cmp	r5, r7
 80091a8:	f280 80a0 	bge.w	80092ec <_DrawBitmap+0x28c>
 80091ac:	9f07      	ldr	r7, [sp, #28]
 80091ae:	442f      	add	r7, r5
 80091b0:	b13c      	cbz	r4, 80091c2 <_DrawBitmap+0x162>
 80091b2:	68a3      	ldr	r3, [r4, #8]
 80091b4:	9904      	ldr	r1, [sp, #16]
 80091b6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80091ba:	4620      	mov	r0, r4
 80091bc:	463a      	mov	r2, r7
 80091be:	4653      	mov	r3, sl
 80091c0:	47e0      	blx	ip
 80091c2:	f1ab 0302 	sub.w	r3, fp, #2
 80091c6:	9306      	str	r3, [sp, #24]
 80091c8:	9605      	str	r6, [sp, #20]
 80091ca:	46d1      	mov	r9, sl
 80091cc:	9904      	ldr	r1, [sp, #16]
 80091ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80091d2:	9a06      	ldr	r2, [sp, #24]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80091da:	9206      	str	r2, [sp, #24]
 80091dc:	4451      	add	r1, sl
 80091de:	ebc9 0101 	rsb	r1, r9, r1
 80091e2:	9103      	str	r1, [sp, #12]
 80091e4:	4798      	blx	r3
 80091e6:	9b05      	ldr	r3, [sp, #20]
 80091e8:	9903      	ldr	r1, [sp, #12]
 80091ea:	f843 0f04 	str.w	r0, [r3, #4]!
 80091ee:	9305      	str	r3, [sp, #20]
 80091f0:	b124      	cbz	r4, 80091fc <_DrawBitmap+0x19c>
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	4620      	mov	r0, r4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	463a      	mov	r2, r7
 80091fa:	4798      	blx	r3
 80091fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009200:	d1e4      	bne.n	80091cc <_DrawBitmap+0x16c>
 8009202:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009204:	44bb      	add	fp, r7
 8009206:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009208:	3501      	adds	r5, #1
 800920a:	443e      	add	r6, r7
 800920c:	e7c9      	b.n	80091a2 <_DrawBitmap+0x142>
 800920e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009210:	2f08      	cmp	r7, #8
 8009212:	f100 0604 	add.w	r6, r0, #4
 8009216:	d16d      	bne.n	80092f4 <_DrawBitmap+0x294>
 8009218:	9f07      	ldr	r7, [sp, #28]
 800921a:	9907      	ldr	r1, [sp, #28]
 800921c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800921e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009220:	1a7b      	subs	r3, r7, r1
 8009222:	4293      	cmp	r3, r2
 8009224:	f1a6 0004 	sub.w	r0, r6, #4
 8009228:	da60      	bge.n	80092ec <_DrawBitmap+0x28c>
 800922a:	4b2c      	ldr	r3, [pc, #176]	; (80092dc <_DrawBitmap+0x27c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	7c1b      	ldrb	r3, [r3, #16]
 8009230:	b36d      	cbz	r5, 800928e <_DrawBitmap+0x22e>
 8009232:	f013 0303 	ands.w	r3, r3, #3
 8009236:	d005      	beq.n	8009244 <_DrawBitmap+0x1e4>
 8009238:	2b02      	cmp	r3, #2
 800923a:	d151      	bne.n	80092e0 <_DrawBitmap+0x280>
 800923c:	46b1      	mov	r9, r6
 800923e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009242:	e01c      	b.n	800927e <_DrawBitmap+0x21e>
 8009244:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8009248:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800924c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009250:	3301      	adds	r3, #1
 8009252:	4553      	cmp	r3, sl
 8009254:	d1f6      	bne.n	8009244 <_DrawBitmap+0x1e4>
 8009256:	e043      	b.n	80092e0 <_DrawBitmap+0x280>
 8009258:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800925c:	f849 3c04 	str.w	r3, [r9, #-4]
 8009260:	b12c      	cbz	r4, 800926e <_DrawBitmap+0x20e>
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	4620      	mov	r0, r4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4641      	mov	r1, r8
 800926a:	463a      	mov	r2, r7
 800926c:	4798      	blx	r3
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	f108 0801 	add.w	r8, r8, #1
 8009274:	4453      	add	r3, sl
 8009276:	4543      	cmp	r3, r8
 8009278:	f109 0904 	add.w	r9, r9, #4
 800927c:	d030      	beq.n	80092e0 <_DrawBitmap+0x280>
 800927e:	9804      	ldr	r0, [sp, #16]
 8009280:	ebc0 030b 	rsb	r3, r0, fp
 8009284:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <_DrawBitmap+0x20e>
 800928c:	e7e4      	b.n	8009258 <_DrawBitmap+0x1f8>
 800928e:	f013 0303 	ands.w	r3, r3, #3
 8009292:	d005      	beq.n	80092a0 <_DrawBitmap+0x240>
 8009294:	2b02      	cmp	r3, #2
 8009296:	d123      	bne.n	80092e0 <_DrawBitmap+0x280>
 8009298:	46b1      	mov	r9, r6
 800929a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800929e:	e015      	b.n	80092cc <_DrawBitmap+0x26c>
 80092a0:	4659      	mov	r1, fp
 80092a2:	4652      	mov	r2, sl
 80092a4:	f001 fb1e 	bl	800a8e4 <memcpy>
 80092a8:	e01a      	b.n	80092e0 <_DrawBitmap+0x280>
 80092aa:	f849 3c04 	str.w	r3, [r9, #-4]
 80092ae:	b12c      	cbz	r4, 80092bc <_DrawBitmap+0x25c>
 80092b0:	68a3      	ldr	r3, [r4, #8]
 80092b2:	4620      	mov	r0, r4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4641      	mov	r1, r8
 80092b8:	463a      	mov	r2, r7
 80092ba:	4798      	blx	r3
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	f108 0801 	add.w	r8, r8, #1
 80092c2:	4453      	add	r3, sl
 80092c4:	4543      	cmp	r3, r8
 80092c6:	f109 0904 	add.w	r9, r9, #4
 80092ca:	d009      	beq.n	80092e0 <_DrawBitmap+0x280>
 80092cc:	9904      	ldr	r1, [sp, #16]
 80092ce:	ebc1 030b 	rsb	r3, r1, fp
 80092d2:	f813 3008 	ldrb.w	r3, [r3, r8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f0      	beq.n	80092bc <_DrawBitmap+0x25c>
 80092da:	e7e6      	b.n	80092aa <_DrawBitmap+0x24a>
 80092dc:	20000010 	.word	0x20000010
 80092e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e4:	4493      	add	fp, r2
 80092e6:	3701      	adds	r7, #1
 80092e8:	441e      	add	r6, r3
 80092ea:	e796      	b.n	800921a <_DrawBitmap+0x1ba>
 80092ec:	2c00      	cmp	r4, #0
 80092ee:	f040 824b 	bne.w	8009788 <_DrawBitmap+0x728>
 80092f2:	e24c      	b.n	800978e <_DrawBitmap+0x72e>
 80092f4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80092f6:	4bb2      	ldr	r3, [pc, #712]	; (80095c0 <_DrawBitmap+0x560>)
 80092f8:	9609      	str	r6, [sp, #36]	; 0x24
 80092fa:	007f      	lsls	r7, r7, #1
 80092fc:	970c      	str	r7, [sp, #48]	; 0x30
 80092fe:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009300:	00bf      	lsls	r7, r7, #2
 8009302:	970d      	str	r7, [sp, #52]	; 0x34
 8009304:	9f07      	ldr	r7, [sp, #28]
 8009306:	9705      	str	r7, [sp, #20]
 8009308:	2d00      	cmp	r5, #0
 800930a:	bf08      	it	eq
 800930c:	461d      	moveq	r5, r3
 800930e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009310:	9807      	ldr	r0, [sp, #28]
 8009312:	1f3c      	subs	r4, r7, #4
 8009314:	9f05      	ldr	r7, [sp, #20]
 8009316:	1a3b      	subs	r3, r7, r0
 8009318:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800931a:	42bb      	cmp	r3, r7
 800931c:	f280 8232 	bge.w	8009784 <_DrawBitmap+0x724>
 8009320:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009322:	2f02      	cmp	r7, #2
 8009324:	f000 80ad 	beq.w	8009482 <_DrawBitmap+0x422>
 8009328:	2f04      	cmp	r7, #4
 800932a:	f000 814f 	beq.w	80095cc <_DrawBitmap+0x56c>
 800932e:	2f01      	cmp	r7, #1
 8009330:	f040 821e 	bne.w	8009770 <_DrawBitmap+0x710>
 8009334:	f8df 9290 	ldr.w	r9, [pc, #656]	; 80095c8 <_DrawBitmap+0x568>
 8009338:	f8d9 3000 	ldr.w	r3, [r9]
 800933c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800933e:	f7fe fc7d 	bl	8007c3c <GUI_ALLOC_LockH>
 8009342:	f89b 3000 	ldrb.w	r3, [fp]
 8009346:	4a9f      	ldr	r2, [pc, #636]	; (80095c4 <_DrawBitmap+0x564>)
 8009348:	991e      	ldr	r1, [sp, #120]	; 0x78
 800934a:	5cd6      	ldrb	r6, [r2, r3]
 800934c:	f8d9 3000 	ldr.w	r3, [r9]
 8009350:	900e      	str	r0, [sp, #56]	; 0x38
 8009352:	7c1b      	ldrb	r3, [r3, #16]
 8009354:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	2b02      	cmp	r3, #2
 800935e:	4657      	mov	r7, sl
 8009360:	f1c1 0808 	rsb	r8, r1, #8
 8009364:	fa46 f601 	asr.w	r6, r6, r1
 8009368:	d020      	beq.n	80093ac <_DrawBitmap+0x34c>
 800936a:	2b03      	cmp	r3, #3
 800936c:	d061      	beq.n	8009432 <_DrawBitmap+0x3d2>
 800936e:	2b01      	cmp	r3, #1
 8009370:	d05f      	beq.n	8009432 <_DrawBitmap+0x3d2>
 8009372:	465a      	mov	r2, fp
 8009374:	4547      	cmp	r7, r8
 8009376:	bf38      	it	cc
 8009378:	46b8      	movcc	r8, r7
 800937a:	ebc8 0707 	rsb	r7, r8, r7
 800937e:	4643      	mov	r3, r8
 8009380:	4621      	mov	r1, r4
 8009382:	f006 0001 	and.w	r0, r6, #1
 8009386:	3b01      	subs	r3, #1
 8009388:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800938c:	f841 0b04 	str.w	r0, [r1], #4
 8009390:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009394:	d1f5      	bne.n	8009382 <_DrawBitmap+0x322>
 8009396:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800939a:	2f00      	cmp	r7, #0
 800939c:	d06d      	beq.n	800947a <_DrawBitmap+0x41a>
 800939e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80093a2:	4988      	ldr	r1, [pc, #544]	; (80095c4 <_DrawBitmap+0x564>)
 80093a4:	f04f 0808 	mov.w	r8, #8
 80093a8:	5cce      	ldrb	r6, [r1, r3]
 80093aa:	e7e3      	b.n	8009374 <_DrawBitmap+0x314>
 80093ac:	686b      	ldr	r3, [r5, #4]
 80093ae:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80093b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80093b4:	f8cd b020 	str.w	fp, [sp, #32]
 80093b8:	4547      	cmp	r7, r8
 80093ba:	bf38      	it	cc
 80093bc:	46b8      	movcc	r8, r7
 80093be:	ebc8 0707 	rsb	r7, r8, r7
 80093c2:	f1bc 0f00 	cmp.w	ip, #0
 80093c6:	d026      	beq.n	8009416 <_DrawBitmap+0x3b6>
 80093c8:	b91e      	cbnz	r6, 80093d2 <_DrawBitmap+0x372>
 80093ca:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80093ce:	44c1      	add	r9, r8
 80093d0:	e025      	b.n	800941e <_DrawBitmap+0x3be>
 80093d2:	07f0      	lsls	r0, r6, #31
 80093d4:	d50c      	bpl.n	80093f0 <_DrawBitmap+0x390>
 80093d6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80093da:	9a05      	ldr	r2, [sp, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f8cd c008 	str.w	ip, [sp, #8]
 80093e2:	4660      	mov	r0, ip
 80093e4:	4649      	mov	r1, r9
 80093e6:	4798      	blx	r3
 80093e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ea:	f8dd c008 	ldr.w	ip, [sp, #8]
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	f1b8 0801 	subs.w	r8, r8, #1
 80093f4:	f109 0901 	add.w	r9, r9, #1
 80093f8:	f104 0404 	add.w	r4, r4, #4
 80093fc:	d00f      	beq.n	800941e <_DrawBitmap+0x3be>
 80093fe:	0876      	lsrs	r6, r6, #1
 8009400:	e7e2      	b.n	80093c8 <_DrawBitmap+0x368>
 8009402:	07f1      	lsls	r1, r6, #31
 8009404:	bf44      	itt	mi
 8009406:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 8009408:	6023      	strmi	r3, [r4, #0]
 800940a:	f1b8 0801 	subs.w	r8, r8, #1
 800940e:	f104 0404 	add.w	r4, r4, #4
 8009412:	d004      	beq.n	800941e <_DrawBitmap+0x3be>
 8009414:	0876      	lsrs	r6, r6, #1
 8009416:	2e00      	cmp	r6, #0
 8009418:	d1f3      	bne.n	8009402 <_DrawBitmap+0x3a2>
 800941a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800941e:	b367      	cbz	r7, 800947a <_DrawBitmap+0x41a>
 8009420:	9808      	ldr	r0, [sp, #32]
 8009422:	4a68      	ldr	r2, [pc, #416]	; (80095c4 <_DrawBitmap+0x564>)
 8009424:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009428:	9008      	str	r0, [sp, #32]
 800942a:	5cd6      	ldrb	r6, [r2, r3]
 800942c:	f04f 0808 	mov.w	r8, #8
 8009430:	e7c2      	b.n	80093b8 <_DrawBitmap+0x358>
 8009432:	6803      	ldr	r3, [r0, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	4798      	blx	r3
 800943a:	4659      	mov	r1, fp
 800943c:	4547      	cmp	r7, r8
 800943e:	bf38      	it	cc
 8009440:	46b8      	movcc	r8, r7
 8009442:	ebc8 0707 	rsb	r7, r8, r7
 8009446:	1d23      	adds	r3, r4, #4
 8009448:	46c6      	mov	lr, r8
 800944a:	07f2      	lsls	r2, r6, #31
 800944c:	d504      	bpl.n	8009458 <_DrawBitmap+0x3f8>
 800944e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8009452:	4042      	eors	r2, r0
 8009454:	f843 2c04 	str.w	r2, [r3, #-4]
 8009458:	f1be 0e01 	subs.w	lr, lr, #1
 800945c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009460:	f103 0304 	add.w	r3, r3, #4
 8009464:	d1f1      	bne.n	800944a <_DrawBitmap+0x3ea>
 8009466:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800946a:	b137      	cbz	r7, 800947a <_DrawBitmap+0x41a>
 800946c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009470:	4a54      	ldr	r2, [pc, #336]	; (80095c4 <_DrawBitmap+0x564>)
 8009472:	f04f 0808 	mov.w	r8, #8
 8009476:	5cd6      	ldrb	r6, [r2, r3]
 8009478:	e7e0      	b.n	800943c <_DrawBitmap+0x3dc>
 800947a:	a80e      	add	r0, sp, #56	; 0x38
 800947c:	f7fe fbec 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8009480:	e176      	b.n	8009770 <_DrawBitmap+0x710>
 8009482:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009486:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800948a:	f1c7 0604 	rsb	r6, r7, #4
 800948e:	f89b 7000 	ldrb.w	r7, [fp]
 8009492:	409f      	lsls	r7, r3
 8009494:	4b4c      	ldr	r3, [pc, #304]	; (80095c8 <_DrawBitmap+0x568>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	7c1b      	ldrb	r3, [r3, #16]
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	2b01      	cmp	r3, #1
 80094a0:	b2f6      	uxtb	r6, r6
 80094a2:	b2ff      	uxtb	r7, r7
 80094a4:	d066      	beq.n	8009574 <_DrawBitmap+0x514>
 80094a6:	d308      	bcc.n	80094ba <_DrawBitmap+0x45a>
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	f040 8161 	bne.w	8009770 <_DrawBitmap+0x710>
 80094ae:	9804      	ldr	r0, [sp, #16]
 80094b0:	f8cd b020 	str.w	fp, [sp, #32]
 80094b4:	46d0      	mov	r8, sl
 80094b6:	9006      	str	r0, [sp, #24]
 80094b8:	e03e      	b.n	8009538 <_DrawBitmap+0x4d8>
 80094ba:	465a      	mov	r2, fp
 80094bc:	4653      	mov	r3, sl
 80094be:	429e      	cmp	r6, r3
 80094c0:	bfc8      	it	gt
 80094c2:	b2de      	uxtbgt	r6, r3
 80094c4:	1b9b      	subs	r3, r3, r6
 80094c6:	4631      	mov	r1, r6
 80094c8:	4620      	mov	r0, r4
 80094ca:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 80094ce:	3901      	subs	r1, #1
 80094d0:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80094d4:	f840 cb04 	str.w	ip, [r0], #4
 80094d8:	00bf      	lsls	r7, r7, #2
 80094da:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80094de:	b2ff      	uxtb	r7, r7
 80094e0:	d1f3      	bne.n	80094ca <_DrawBitmap+0x46a>
 80094e2:	3e01      	subs	r6, #1
 80094e4:	b2f6      	uxtb	r6, r6
 80094e6:	3601      	adds	r6, #1
 80094e8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 813f 	beq.w	8009770 <_DrawBitmap+0x710>
 80094f2:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80094f6:	2604      	movs	r6, #4
 80094f8:	e7e1      	b.n	80094be <_DrawBitmap+0x45e>
 80094fa:	9906      	ldr	r1, [sp, #24]
 80094fc:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009500:	4449      	add	r1, r9
 8009502:	d122      	bne.n	800954a <_DrawBitmap+0x4ea>
 8009504:	f109 0901 	add.w	r9, r9, #1
 8009508:	fa5f f289 	uxtb.w	r2, r9
 800950c:	00bf      	lsls	r7, r7, #2
 800950e:	4296      	cmp	r6, r2
 8009510:	b2ff      	uxtb	r7, r7
 8009512:	d1f2      	bne.n	80094fa <_DrawBitmap+0x49a>
 8009514:	9f06      	ldr	r7, [sp, #24]
 8009516:	3e01      	subs	r6, #1
 8009518:	b2f6      	uxtb	r6, r6
 800951a:	1c7b      	adds	r3, r7, #1
 800951c:	1c72      	adds	r2, r6, #1
 800951e:	199e      	adds	r6, r3, r6
 8009520:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009524:	9606      	str	r6, [sp, #24]
 8009526:	f1b8 0f00 	cmp.w	r8, #0
 800952a:	f000 8121 	beq.w	8009770 <_DrawBitmap+0x710>
 800952e:	9b08      	ldr	r3, [sp, #32]
 8009530:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	2604      	movs	r6, #4
 8009538:	4546      	cmp	r6, r8
 800953a:	bfc8      	it	gt
 800953c:	fa5f f688 	uxtbgt.w	r6, r8
 8009540:	ebc6 0808 	rsb	r8, r6, r8
 8009544:	f04f 0900 	mov.w	r9, #0
 8009548:	e7d7      	b.n	80094fa <_DrawBitmap+0x49a>
 800954a:	09ba      	lsrs	r2, r7, #6
 800954c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009550:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 8009554:	f1bc 0f00 	cmp.w	ip, #0
 8009558:	d0d4      	beq.n	8009504 <_DrawBitmap+0x4a4>
 800955a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800955e:	6812      	ldr	r2, [r2, #0]
 8009560:	920b      	str	r2, [sp, #44]	; 0x2c
 8009562:	4660      	mov	r0, ip
 8009564:	f8cd c008 	str.w	ip, [sp, #8]
 8009568:	9a05      	ldr	r2, [sp, #20]
 800956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800956c:	4798      	blx	r3
 800956e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009572:	e7c7      	b.n	8009504 <_DrawBitmap+0x4a4>
 8009574:	4658      	mov	r0, fp
 8009576:	4653      	mov	r3, sl
 8009578:	429e      	cmp	r6, r3
 800957a:	bfc8      	it	gt
 800957c:	b2de      	uxtbgt	r6, r3
 800957e:	1b9b      	subs	r3, r3, r6
 8009580:	1d22      	adds	r2, r4, #4
 8009582:	46b4      	mov	ip, r6
 8009584:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009588:	d005      	beq.n	8009596 <_DrawBitmap+0x536>
 800958a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800958e:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009592:	f842 1c04 	str.w	r1, [r2, #-4]
 8009596:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800959a:	00bf      	lsls	r7, r7, #2
 800959c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 80095a0:	b2ff      	uxtb	r7, r7
 80095a2:	f102 0204 	add.w	r2, r2, #4
 80095a6:	d1ed      	bne.n	8009584 <_DrawBitmap+0x524>
 80095a8:	3e01      	subs	r6, #1
 80095aa:	b2f6      	uxtb	r6, r6
 80095ac:	3601      	adds	r6, #1
 80095ae:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80dc 	beq.w	8009770 <_DrawBitmap+0x710>
 80095b8:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80095bc:	2604      	movs	r6, #4
 80095be:	e7db      	b.n	8009578 <_DrawBitmap+0x518>
 80095c0:	0800b1f4 	.word	0x0800b1f4
 80095c4:	0800b0c8 	.word	0x0800b0c8
 80095c8:	20000010 	.word	0x20000010
 80095cc:	4a71      	ldr	r2, [pc, #452]	; (8009794 <_DrawBitmap+0x734>)
 80095ce:	f89b 3000 	ldrb.w	r3, [fp]
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80095d6:	7c12      	ldrb	r2, [r2, #16]
 80095d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80095da:	f002 0203 	and.w	r2, r2, #3
 80095de:	4083      	lsls	r3, r0
 80095e0:	2a01      	cmp	r2, #1
 80095e2:	b2de      	uxtb	r6, r3
 80095e4:	f000 809c 	beq.w	8009720 <_DrawBitmap+0x6c0>
 80095e8:	d302      	bcc.n	80095f0 <_DrawBitmap+0x590>
 80095ea:	2a02      	cmp	r2, #2
 80095ec:	d035      	beq.n	800965a <_DrawBitmap+0x5fa>
 80095ee:	e0bf      	b.n	8009770 <_DrawBitmap+0x710>
 80095f0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80095f2:	b15f      	cbz	r7, 800960c <_DrawBitmap+0x5ac>
 80095f4:	0936      	lsrs	r6, r6, #4
 80095f6:	f10b 0201 	add.w	r2, fp, #1
 80095fa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8009604:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009606:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800960a:	e001      	b.n	8009610 <_DrawBitmap+0x5b0>
 800960c:	4653      	mov	r3, sl
 800960e:	465a      	mov	r2, fp
 8009610:	2b01      	cmp	r3, #1
 8009612:	dd1a      	ble.n	800964a <_DrawBitmap+0x5ea>
 8009614:	1058      	asrs	r0, r3, #1
 8009616:	f104 0108 	add.w	r1, r4, #8
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	eb02 0800 	add.w	r8, r2, r0
 8009622:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 8009626:	f006 060f 	and.w	r6, r6, #15
 800962a:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800962e:	f841 7c08 	str.w	r7, [r1, #-8]
 8009632:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8009636:	f841 6c04 	str.w	r6, [r1, #-4]
 800963a:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800963e:	4542      	cmp	r2, r8
 8009640:	f101 0108 	add.w	r1, r1, #8
 8009644:	d1ed      	bne.n	8009622 <_DrawBitmap+0x5c2>
 8009646:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 8090 	beq.w	8009770 <_DrawBitmap+0x710>
 8009650:	0936      	lsrs	r6, r6, #4
 8009652:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	e08a      	b.n	8009770 <_DrawBitmap+0x710>
 800965a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800965c:	b1c0      	cbz	r0, 8009690 <_DrawBitmap+0x630>
 800965e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8009662:	d00a      	beq.n	800967a <_DrawBitmap+0x61a>
 8009664:	0936      	lsrs	r6, r6, #4
 8009666:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	b12f      	cbz	r7, 800967a <_DrawBitmap+0x61a>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	9904      	ldr	r1, [sp, #16]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	9a05      	ldr	r2, [sp, #20]
 8009676:	4638      	mov	r0, r7
 8009678:	4798      	blx	r3
 800967a:	9904      	ldr	r1, [sp, #16]
 800967c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800967e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8009682:	f101 0801 	add.w	r8, r1, #1
 8009686:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800968a:	f10b 0901 	add.w	r9, fp, #1
 800968e:	e011      	b.n	80096b4 <_DrawBitmap+0x654>
 8009690:	46d4      	mov	ip, sl
 8009692:	46d9      	mov	r9, fp
 8009694:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009698:	e00c      	b.n	80096b4 <_DrawBitmap+0x654>
 800969a:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800969e:	d10d      	bne.n	80096bc <_DrawBitmap+0x65c>
 80096a0:	f016 060f 	ands.w	r6, r6, #15
 80096a4:	d11b      	bne.n	80096de <_DrawBitmap+0x67e>
 80096a6:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 80096aa:	3408      	adds	r4, #8
 80096ac:	f108 0802 	add.w	r8, r8, #2
 80096b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80096b4:	f1bc 0f01 	cmp.w	ip, #1
 80096b8:	dcef      	bgt.n	800969a <_DrawBitmap+0x63a>
 80096ba:	e021      	b.n	8009700 <_DrawBitmap+0x6a0>
 80096bc:	0933      	lsrs	r3, r6, #4
 80096be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	2f00      	cmp	r7, #0
 80096c6:	d0eb      	beq.n	80096a0 <_DrawBitmap+0x640>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	9a05      	ldr	r2, [sp, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8cd c008 	str.w	ip, [sp, #8]
 80096d2:	4638      	mov	r0, r7
 80096d4:	4641      	mov	r1, r8
 80096d6:	4798      	blx	r3
 80096d8:	f8dd c008 	ldr.w	ip, [sp, #8]
 80096dc:	e7e0      	b.n	80096a0 <_DrawBitmap+0x640>
 80096de:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80096e2:	6063      	str	r3, [r4, #4]
 80096e4:	2f00      	cmp	r7, #0
 80096e6:	d0de      	beq.n	80096a6 <_DrawBitmap+0x646>
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	9a05      	ldr	r2, [sp, #20]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8cd c008 	str.w	ip, [sp, #8]
 80096f2:	4638      	mov	r0, r7
 80096f4:	f108 0101 	add.w	r1, r8, #1
 80096f8:	4798      	blx	r3
 80096fa:	f8dd c008 	ldr.w	ip, [sp, #8]
 80096fe:	e7d2      	b.n	80096a6 <_DrawBitmap+0x646>
 8009700:	f1bc 0f00 	cmp.w	ip, #0
 8009704:	d034      	beq.n	8009770 <_DrawBitmap+0x710>
 8009706:	0936      	lsrs	r6, r6, #4
 8009708:	d032      	beq.n	8009770 <_DrawBitmap+0x710>
 800970a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	b377      	cbz	r7, 8009770 <_DrawBitmap+0x710>
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	9a05      	ldr	r2, [sp, #20]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4638      	mov	r0, r7
 800971a:	4641      	mov	r1, r8
 800971c:	4798      	blx	r3
 800971e:	e027      	b.n	8009770 <_DrawBitmap+0x710>
 8009720:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009722:	f1c7 0302 	rsb	r3, r7, #2
 8009726:	b2db      	uxtb	r3, r3
 8009728:	465f      	mov	r7, fp
 800972a:	4652      	mov	r2, sl
 800972c:	4293      	cmp	r3, r2
 800972e:	bfc8      	it	gt
 8009730:	b2d3      	uxtbgt	r3, r2
 8009732:	1ad2      	subs	r2, r2, r3
 8009734:	1d20      	adds	r0, r4, #4
 8009736:	469c      	mov	ip, r3
 8009738:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800973c:	d005      	beq.n	800974a <_DrawBitmap+0x6ea>
 800973e:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8009742:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009746:	f840 1c04 	str.w	r1, [r0, #-4]
 800974a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800974e:	0136      	lsls	r6, r6, #4
 8009750:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009754:	b2f6      	uxtb	r6, r6
 8009756:	f100 0004 	add.w	r0, r0, #4
 800975a:	d1ed      	bne.n	8009738 <_DrawBitmap+0x6d8>
 800975c:	3b01      	subs	r3, #1
 800975e:	b2db      	uxtb	r3, r3
 8009760:	3301      	adds	r3, #1
 8009762:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009766:	b11a      	cbz	r2, 8009770 <_DrawBitmap+0x710>
 8009768:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800976c:	2302      	movs	r3, #2
 800976e:	e7dd      	b.n	800972c <_DrawBitmap+0x6cc>
 8009770:	9b05      	ldr	r3, [sp, #20]
 8009772:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009774:	3301      	adds	r3, #1
 8009776:	44bb      	add	fp, r7
 8009778:	9305      	str	r3, [sp, #20]
 800977a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	443b      	add	r3, r7
 8009780:	9309      	str	r3, [sp, #36]	; 0x24
 8009782:	e5c4      	b.n	800930e <_DrawBitmap+0x2ae>
 8009784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009786:	b113      	cbz	r3, 800978e <_DrawBitmap+0x72e>
 8009788:	a80f      	add	r0, sp, #60	; 0x3c
 800978a:	f7fe fa65 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800978e:	b011      	add	sp, #68	; 0x44
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	20000010 	.word	0x20000010

08009798 <GUI_MEMDEV_Delete>:
 8009798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800979a:	4604      	mov	r4, r0
 800979c:	b1d0      	cbz	r0, 80097d4 <GUI_MEMDEV_Delete+0x3c>
 800979e:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <GUI_MEMDEV_Delete+0x40>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a4:	4283      	cmp	r3, r0
 80097a6:	d101      	bne.n	80097ac <GUI_MEMDEV_Delete+0x14>
 80097a8:	f7fd fe7c 	bl	80074a4 <GUI_SelectLCD>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7fe fa45 	bl	8007c3c <GUI_ALLOC_LockH>
 80097b2:	9001      	str	r0, [sp, #4]
 80097b4:	6940      	ldr	r0, [r0, #20]
 80097b6:	b108      	cbz	r0, 80097bc <GUI_MEMDEV_Delete+0x24>
 80097b8:	f000 fd38 	bl	800a22c <GUI_USAGE_DecUseCnt>
 80097bc:	ad02      	add	r5, sp, #8
 80097be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	f7fd fec0 	bl	8007548 <GUI_DEVICE_Delete>
 80097c8:	4628      	mov	r0, r5
 80097ca:	f7fe fa45 	bl	8007c58 <GUI_ALLOC_UnlockH>
 80097ce:	4620      	mov	r0, r4
 80097d0:	f7fe fa62 	bl	8007c98 <GUI_ALLOC_Free>
 80097d4:	b003      	add	sp, #12
 80097d6:	bd30      	pop	{r4, r5, pc}
 80097d8:	20000010 	.word	0x20000010

080097dc <LCD_UpdateColorIndices>:
 80097dc:	b510      	push	{r4, lr}
 80097de:	4c07      	ldr	r4, [pc, #28]	; (80097fc <LCD_UpdateColorIndices+0x20>)
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097e4:	f7fd fdaa 	bl	800733c <LCD_Color2Index>
 80097e8:	f7fd fdc8 	bl	800737c <LCD_SetColorIndex>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80097f0:	f7fd fda4 	bl	800733c <LCD_Color2Index>
 80097f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f8:	f7fd bddc 	b.w	80073b4 <LCD_SetBkColorIndex>
 80097fc:	20000010 	.word	0x20000010

08009800 <LCD_SetClipRectEx>:
 8009800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009802:	4c09      	ldr	r4, [pc, #36]	; (8009828 <LCD_SetClipRectEx+0x28>)
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	7c5a      	ldrb	r2, [r3, #17]
 8009808:	4b08      	ldr	r3, [pc, #32]	; (800982c <LCD_SetClipRectEx+0x2c>)
 800980a:	4605      	mov	r5, r0
 800980c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009810:	68c2      	ldr	r2, [r0, #12]
 8009812:	4669      	mov	r1, sp
 8009814:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009816:	4790      	blx	r2
 8009818:	6820      	ldr	r0, [r4, #0]
 800981a:	4629      	mov	r1, r5
 800981c:	466a      	mov	r2, sp
 800981e:	3008      	adds	r0, #8
 8009820:	f000 f88a 	bl	8009938 <GUI__IntersectRects>
 8009824:	b003      	add	sp, #12
 8009826:	bd30      	pop	{r4, r5, pc}
 8009828:	20000010 	.word	0x20000010
 800982c:	2001fca0 	.word	0x2001fca0

08009830 <LCD_SelectLCD>:
 8009830:	b510      	push	{r4, lr}
 8009832:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <LCD_SelectLCD+0x38>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	7c51      	ldrb	r1, [r2, #17]
 8009838:	4a0c      	ldr	r2, [pc, #48]	; (800986c <LCD_SelectLCD+0x3c>)
 800983a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800983e:	461c      	mov	r4, r3
 8009840:	b140      	cbz	r0, 8009854 <LCD_SelectLCD+0x24>
 8009842:	68c3      	ldr	r3, [r0, #12]
 8009844:	b113      	cbz	r3, 800984c <LCD_SelectLCD+0x1c>
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b04      	cmp	r3, #4
 800984a:	d001      	beq.n	8009850 <LCD_SelectLCD+0x20>
 800984c:	6800      	ldr	r0, [r0, #0]
 800984e:	e7f7      	b.n	8009840 <LCD_SelectLCD+0x10>
 8009850:	f7fd fea2 	bl	8007598 <GUI_DEVICE_Unlink>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	2200      	movs	r2, #0
 8009858:	661a      	str	r2, [r3, #96]	; 0x60
 800985a:	f103 0208 	add.w	r2, r3, #8
 800985e:	615a      	str	r2, [r3, #20]
 8009860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009864:	f7fd bd10 	b.w	8007288 <LCD_SetClipRectMax>
 8009868:	20000010 	.word	0x20000010
 800986c:	2001fca0 	.word	0x2001fca0

08009870 <_OnExit>:
 8009870:	b510      	push	{r4, lr}
 8009872:	4c03      	ldr	r4, [pc, #12]	; (8009880 <_OnExit+0x10>)
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	f7fe f9cd 	bl	8007c14 <GUI_ALLOC_FreeFixedBlock>
 800987a:	2300      	movs	r3, #0
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd10      	pop	{r4, pc}
 8009880:	2001fdc4 	.word	0x2001fdc4

08009884 <LCD_InitColors>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d09      	ldr	r5, [pc, #36]	; (80098ac <LCD_InitColors+0x28>)
 8009888:	682c      	ldr	r4, [r5, #0]
 800988a:	b95c      	cbnz	r4, 80098a4 <LCD_InitColors+0x20>
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <LCD_InitColors+0x2c>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	0080      	lsls	r0, r0, #2
 8009892:	f7fe fb1f 	bl	8007ed4 <GUI_ALLOC_GetFixedBlock>
 8009896:	6028      	str	r0, [r5, #0]
 8009898:	b130      	cbz	r0, 80098a8 <LCD_InitColors+0x24>
 800989a:	4806      	ldr	r0, [pc, #24]	; (80098b4 <LCD_InitColors+0x30>)
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <LCD_InitColors+0x34>)
 800989e:	6003      	str	r3, [r0, #0]
 80098a0:	f7fd ff7c 	bl	800779c <GUI__RegisterExit>
 80098a4:	2000      	movs	r0, #0
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	2001      	movs	r0, #1
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	2001fdc4 	.word	0x2001fdc4
 80098b0:	20000018 	.word	0x20000018
 80098b4:	2001f928 	.word	0x2001f928
 80098b8:	08009871 	.word	0x08009871

080098bc <LCD_InitLUT>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	f000 fe02 	bl	800a4c8 <LCD_GetNumLayers>
 80098c4:	2400      	movs	r4, #0
 80098c6:	4680      	mov	r8, r0
 80098c8:	4544      	cmp	r4, r8
 80098ca:	da2c      	bge.n	8009926 <LCD_InitLUT+0x6a>
 80098cc:	4620      	mov	r0, r4
 80098ce:	f7fd fe2b 	bl	8007528 <GUI_DEVICE__GetpDriver>
 80098d2:	b330      	cbz	r0, 8009922 <LCD_InitLUT+0x66>
 80098d4:	4e15      	ldr	r6, [pc, #84]	; (800992c <LCD_InitLUT+0x70>)
 80098d6:	6833      	ldr	r3, [r6, #0]
 80098d8:	4620      	mov	r0, r4
 80098da:	f893 9011 	ldrb.w	r9, [r3, #17]
 80098de:	745c      	strb	r4, [r3, #17]
 80098e0:	f7fd fac4 	bl	8006e6c <LCD_GetBitsPerPixelEx>
 80098e4:	2808      	cmp	r0, #8
 80098e6:	dd03      	ble.n	80098f0 <LCD_InitLUT+0x34>
 80098e8:	6833      	ldr	r3, [r6, #0]
 80098ea:	f883 9011 	strb.w	r9, [r3, #17]
 80098ee:	e018      	b.n	8009922 <LCD_InitLUT+0x66>
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <LCD_InitLUT+0x74>)
 80098f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80098f6:	691a      	ldr	r2, [r3, #16]
 80098f8:	4b0e      	ldr	r3, [pc, #56]	; (8009934 <LCD_InitLUT+0x78>)
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d0f4      	beq.n	80098e8 <LCD_InitLUT+0x2c>
 80098fe:	4620      	mov	r0, r4
 8009900:	f7fd fab7 	bl	8006e72 <LCD_GetNumColorsEx>
 8009904:	2500      	movs	r5, #0
 8009906:	4682      	mov	sl, r0
 8009908:	4555      	cmp	r5, sl
 800990a:	daed      	bge.n	80098e8 <LCD_InitLUT+0x2c>
 800990c:	b2ef      	uxtb	r7, r5
 800990e:	4638      	mov	r0, r7
 8009910:	f7fd fd24 	bl	800735c <LCD_Index2Color>
 8009914:	4639      	mov	r1, r7
 8009916:	4602      	mov	r2, r0
 8009918:	4620      	mov	r0, r4
 800991a:	f7fd fa3f 	bl	8006d9c <LCD_SetLUTEntryEx>
 800991e:	3501      	adds	r5, #1
 8009920:	e7f2      	b.n	8009908 <LCD_InitLUT+0x4c>
 8009922:	3401      	adds	r4, #1
 8009924:	e7d0      	b.n	80098c8 <LCD_InitLUT+0xc>
 8009926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992a:	bf00      	nop
 800992c:	20000010 	.word	0x20000010
 8009930:	2001fca0 	.word	0x2001fca0
 8009934:	0800b278 	.word	0x0800b278

08009938 <GUI__IntersectRects>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800993e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8009942:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009946:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800994a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800994e:	429c      	cmp	r4, r3
 8009950:	bfb8      	it	lt
 8009952:	461c      	movlt	r4, r3
 8009954:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8009958:	429d      	cmp	r5, r3
 800995a:	bfa8      	it	ge
 800995c:	462b      	movge	r3, r5
 800995e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8009962:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8009966:	42ae      	cmp	r6, r5
 8009968:	bfb8      	it	lt
 800996a:	4635      	movlt	r5, r6
 800996c:	b2a4      	uxth	r4, r4
 800996e:	b2ad      	uxth	r5, r5
 8009970:	4291      	cmp	r1, r2
 8009972:	bfb8      	it	lt
 8009974:	460a      	movlt	r2, r1
 8009976:	8004      	strh	r4, [r0, #0]
 8009978:	8085      	strh	r5, [r0, #4]
 800997a:	b224      	sxth	r4, r4
 800997c:	b22d      	sxth	r5, r5
 800997e:	b29b      	uxth	r3, r3
 8009980:	b292      	uxth	r2, r2
 8009982:	42a5      	cmp	r5, r4
 8009984:	8043      	strh	r3, [r0, #2]
 8009986:	80c2      	strh	r2, [r0, #6]
 8009988:	db06      	blt.n	8009998 <GUI__IntersectRects+0x60>
 800998a:	b210      	sxth	r0, r2
 800998c:	b21b      	sxth	r3, r3
 800998e:	4298      	cmp	r0, r3
 8009990:	bfb4      	ite	lt
 8009992:	2000      	movlt	r0, #0
 8009994:	2001      	movge	r0, #1
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	2000      	movs	r0, #0
 800999a:	bd70      	pop	{r4, r5, r6, pc}

0800999c <GUI__IntersectRect>:
 800999c:	880b      	ldrh	r3, [r1, #0]
 800999e:	b510      	push	{r4, lr}
 80099a0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80099a4:	b21a      	sxth	r2, r3
 80099a6:	4294      	cmp	r4, r2
 80099a8:	bfb8      	it	lt
 80099aa:	8003      	strhlt	r3, [r0, #0]
 80099ac:	884b      	ldrh	r3, [r1, #2]
 80099ae:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80099b2:	b21a      	sxth	r2, r3
 80099b4:	4294      	cmp	r4, r2
 80099b6:	bfb8      	it	lt
 80099b8:	8043      	strhlt	r3, [r0, #2]
 80099ba:	888b      	ldrh	r3, [r1, #4]
 80099bc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80099c0:	b21a      	sxth	r2, r3
 80099c2:	4294      	cmp	r4, r2
 80099c4:	bfc8      	it	gt
 80099c6:	8083      	strhgt	r3, [r0, #4]
 80099c8:	88cb      	ldrh	r3, [r1, #6]
 80099ca:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80099ce:	b21a      	sxth	r2, r3
 80099d0:	4291      	cmp	r1, r2
 80099d2:	bfc8      	it	gt
 80099d4:	80c3      	strhgt	r3, [r0, #6]
 80099d6:	bd10      	pop	{r4, pc}

080099d8 <GUI__MixColors>:
 80099d8:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 80099dc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80099e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e2:	d027      	beq.n	8009a34 <GUI__MixColors+0x5c>
 80099e4:	43d3      	mvns	r3, r2
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	b2cd      	uxtb	r5, r1
 80099ea:	b2c6      	uxtb	r6, r0
 80099ec:	435d      	muls	r5, r3
 80099ee:	fb02 5506 	mla	r5, r2, r6, r5
 80099f2:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80099f6:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 80099fa:	435e      	muls	r6, r3
 80099fc:	fb02 6604 	mla	r6, r2, r4, r6
 8009a00:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 8009a04:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 8009a08:	435c      	muls	r4, r3
 8009a0a:	0e09      	lsrs	r1, r1, #24
 8009a0c:	0e00      	lsrs	r0, r0, #24
 8009a0e:	fb02 4407 	mla	r4, r2, r7, r4
 8009a12:	434b      	muls	r3, r1
 8009a14:	0a36      	lsrs	r6, r6, #8
 8009a16:	fb02 3200 	mla	r2, r2, r0, r3
 8009a1a:	0a24      	lsrs	r4, r4, #8
 8009a1c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8009a20:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 8009a24:	4318      	orrs	r0, r3
 8009a26:	0412      	lsls	r2, r2, #16
 8009a28:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8009a2c:	4318      	orrs	r0, r3
 8009a2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a32:	4310      	orrs	r0, r2
 8009a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009a38 <_OnExit>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4c0a      	ldr	r4, [pc, #40]	; (8009a64 <_OnExit+0x2c>)
 8009a3c:	4d0a      	ldr	r5, [pc, #40]	; (8009a68 <_OnExit+0x30>)
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	4e0a      	ldr	r6, [pc, #40]	; (8009a6c <_OnExit+0x34>)
 8009a42:	f7fe f8e7 	bl	8007c14 <GUI_ALLOC_FreeFixedBlock>
 8009a46:	6828      	ldr	r0, [r5, #0]
 8009a48:	f7fe f8e4 	bl	8007c14 <GUI_ALLOC_FreeFixedBlock>
 8009a4c:	6830      	ldr	r0, [r6, #0]
 8009a4e:	f7fe f8e1 	bl	8007c14 <GUI_ALLOC_FreeFixedBlock>
 8009a52:	4a07      	ldr	r2, [pc, #28]	; (8009a70 <_OnExit+0x38>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	4a06      	ldr	r2, [pc, #24]	; (8009a74 <_OnExit+0x3c>)
 8009a5a:	6033      	str	r3, [r6, #0]
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	2001f934 	.word	0x2001f934
 8009a68:	2001f930 	.word	0x2001f930
 8009a6c:	2001f938 	.word	0x2001f938
 8009a70:	2001f93c 	.word	0x2001f93c
 8009a74:	2001f94c 	.word	0x2001f94c

08009a78 <GUI__GetAlphaBuffer>:
 8009a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a7c:	461c      	mov	r4, r3
 8009a7e:	4b28      	ldr	r3, [pc, #160]	; (8009b20 <GUI__GetAlphaBuffer+0xa8>)
 8009a80:	4617      	mov	r7, r2
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4606      	mov	r6, r0
 8009a86:	4688      	mov	r8, r1
 8009a88:	b932      	cbnz	r2, 8009a98 <GUI__GetAlphaBuffer+0x20>
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4825      	ldr	r0, [pc, #148]	; (8009b24 <GUI__GetAlphaBuffer+0xac>)
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	4b25      	ldr	r3, [pc, #148]	; (8009b28 <GUI__GetAlphaBuffer+0xb0>)
 8009a92:	6003      	str	r3, [r0, #0]
 8009a94:	f7fd fe82 	bl	800779c <GUI__RegisterExit>
 8009a98:	4d24      	ldr	r5, [pc, #144]	; (8009b2c <GUI__GetAlphaBuffer+0xb4>)
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	b933      	cbnz	r3, 8009aac <GUI__GetAlphaBuffer+0x34>
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <GUI__GetAlphaBuffer+0xb8>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	b913      	cbnz	r3, 8009aac <GUI__GetAlphaBuffer+0x34>
 8009aa6:	f7fd fa2d 	bl	8006f04 <LCD_GetVXSizeMax>
 8009aaa:	6028      	str	r0, [r5, #0]
 8009aac:	b10c      	cbz	r4, 8009ab2 <GUI__GetAlphaBuffer+0x3a>
 8009aae:	682b      	ldr	r3, [r5, #0]
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	b196      	cbz	r6, 8009ada <GUI__GetAlphaBuffer+0x62>
 8009ab4:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <GUI__GetAlphaBuffer+0xbc>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	4699      	mov	r9, r3
 8009aba:	2400      	movs	r4, #0
 8009abc:	b94a      	cbnz	r2, 8009ad2 <GUI__GetAlphaBuffer+0x5a>
 8009abe:	6828      	ldr	r0, [r5, #0]
 8009ac0:	0080      	lsls	r0, r0, #2
 8009ac2:	f7fe fa07 	bl	8007ed4 <GUI_ALLOC_GetFixedBlock>
 8009ac6:	f1d0 0401 	rsbs	r4, r0, #1
 8009aca:	f8c9 0000 	str.w	r0, [r9]
 8009ace:	bf38      	it	cc
 8009ad0:	2400      	movcc	r4, #0
 8009ad2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ad6:	6033      	str	r3, [r6, #0]
 8009ad8:	e000      	b.n	8009adc <GUI__GetAlphaBuffer+0x64>
 8009ada:	4634      	mov	r4, r6
 8009adc:	f1b8 0f00 	cmp.w	r8, #0
 8009ae0:	d00d      	beq.n	8009afe <GUI__GetAlphaBuffer+0x86>
 8009ae2:	4e15      	ldr	r6, [pc, #84]	; (8009b38 <GUI__GetAlphaBuffer+0xc0>)
 8009ae4:	6833      	ldr	r3, [r6, #0]
 8009ae6:	b93b      	cbnz	r3, 8009af8 <GUI__GetAlphaBuffer+0x80>
 8009ae8:	6828      	ldr	r0, [r5, #0]
 8009aea:	0080      	lsls	r0, r0, #2
 8009aec:	f7fe f9f2 	bl	8007ed4 <GUI_ALLOC_GetFixedBlock>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	6030      	str	r0, [r6, #0]
 8009af4:	bf08      	it	eq
 8009af6:	2401      	moveq	r4, #1
 8009af8:	6833      	ldr	r3, [r6, #0]
 8009afa:	f8c8 3000 	str.w	r3, [r8]
 8009afe:	b167      	cbz	r7, 8009b1a <GUI__GetAlphaBuffer+0xa2>
 8009b00:	4e0e      	ldr	r6, [pc, #56]	; (8009b3c <GUI__GetAlphaBuffer+0xc4>)
 8009b02:	6833      	ldr	r3, [r6, #0]
 8009b04:	b93b      	cbnz	r3, 8009b16 <GUI__GetAlphaBuffer+0x9e>
 8009b06:	6828      	ldr	r0, [r5, #0]
 8009b08:	0080      	lsls	r0, r0, #2
 8009b0a:	f7fe f9e3 	bl	8007ed4 <GUI_ALLOC_GetFixedBlock>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	6030      	str	r0, [r6, #0]
 8009b12:	bf08      	it	eq
 8009b14:	2401      	moveq	r4, #1
 8009b16:	6833      	ldr	r3, [r6, #0]
 8009b18:	603b      	str	r3, [r7, #0]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b20:	2001f94c 	.word	0x2001f94c
 8009b24:	2001f944 	.word	0x2001f944
 8009b28:	08009a39 	.word	0x08009a39
 8009b2c:	2001f93c 	.word	0x2001f93c
 8009b30:	2001fca8 	.word	0x2001fca8
 8009b34:	2001f934 	.word	0x2001f934
 8009b38:	2001f930 	.word	0x2001f930
 8009b3c:	2001f938 	.word	0x2001f938

08009b40 <GUI__DoAlphaBlending>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	b093      	sub	sp, #76	; 0x4c
 8009b46:	2400      	movs	r4, #0
 8009b48:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009b4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b4c:	910c      	str	r1, [sp, #48]	; 0x30
 8009b4e:	4690      	mov	r8, r2
 8009b50:	461f      	mov	r7, r3
 8009b52:	6034      	str	r4, [r6, #0]
 8009b54:	a80f      	add	r0, sp, #60	; 0x3c
 8009b56:	a910      	add	r1, sp, #64	; 0x40
 8009b58:	4622      	mov	r2, r4
 8009b5a:	ab11      	add	r3, sp, #68	; 0x44
 8009b5c:	f7ff ff8c 	bl	8009a78 <GUI__GetAlphaBuffer>
 8009b60:	4605      	mov	r5, r0
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f040 80c3 	bne.w	8009cee <GUI__DoAlphaBlending+0x1ae>
 8009b68:	4c63      	ldr	r4, [pc, #396]	; (8009cf8 <GUI__DoAlphaBlending+0x1b8>)
 8009b6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	7c58      	ldrb	r0, [r3, #17]
 8009b70:	4b62      	ldr	r3, [pc, #392]	; (8009cfc <GUI__DoAlphaBlending+0x1bc>)
 8009b72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009b76:	9307      	str	r3, [sp, #28]
 8009b78:	4297      	cmp	r7, r2
 8009b7a:	bfa8      	it	ge
 8009b7c:	4617      	movge	r7, r2
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	920d      	str	r2, [sp, #52]	; 0x34
 8009b82:	970a      	str	r7, [sp, #40]	; 0x28
 8009b84:	f7fd f992 	bl	8006eac <GUI_GetBitsPerPixelEx>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	9008      	str	r0, [sp, #32]
 8009b8c:	7c58      	ldrb	r0, [r3, #17]
 8009b8e:	f7fd f9ab 	bl	8006ee8 <GUI_GetpfIndex2ColorEx>
 8009b92:	4b5b      	ldr	r3, [pc, #364]	; (8009d00 <GUI__DoAlphaBlending+0x1c0>)
 8009b94:	9004      	str	r0, [sp, #16]
 8009b96:	4298      	cmp	r0, r3
 8009b98:	d005      	beq.n	8009ba6 <GUI__DoAlphaBlending+0x66>
 8009b9a:	4b5a      	ldr	r3, [pc, #360]	; (8009d04 <GUI__DoAlphaBlending+0x1c4>)
 8009b9c:	1ac3      	subs	r3, r0, r3
 8009b9e:	bf18      	it	ne
 8009ba0:	2301      	movne	r3, #1
 8009ba2:	9306      	str	r3, [sp, #24]
 8009ba4:	e000      	b.n	8009ba8 <GUI__DoAlphaBlending+0x68>
 8009ba6:	9506      	str	r5, [sp, #24]
 8009ba8:	2500      	movs	r5, #0
 8009baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009bac:	46ab      	mov	fp, r5
 8009bae:	4643      	mov	r3, r8
 8009bb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bb2:	f853 0b04 	ldr.w	r0, [r3], #4
 8009bb6:	9305      	str	r3, [sp, #20]
 8009bb8:	4790      	blx	r2
 8009bba:	0e03      	lsrs	r3, r0, #24
 8009bbc:	4681      	mov	r9, r0
 8009bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc0:	f000 8085 	beq.w	8009cce <GUI__DoAlphaBlending+0x18e>
 8009bc4:	f1bb 0f00 	cmp.w	fp, #0
 8009bc8:	d13f      	bne.n	8009c4a <GUI__DoAlphaBlending+0x10a>
 8009bca:	4b4b      	ldr	r3, [pc, #300]	; (8009cf8 <GUI__DoAlphaBlending+0x1b8>)
 8009bcc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009bd6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8009bda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bdc:	442f      	add	r7, r5
 8009bde:	42bb      	cmp	r3, r7
 8009be0:	bfc8      	it	gt
 8009be2:	ebc7 0b03 	rsbgt	fp, r7, r3
 8009be6:	eb0b 0a05 	add.w	sl, fp, r5
 8009bea:	bfc8      	it	gt
 8009bec:	461f      	movgt	r7, r3
 8009bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8009bf4:	4453      	add	r3, sl
 8009bf6:	4494      	add	ip, r2
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	9b07      	ldr	r3, [sp, #28]
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8009c02:	4638      	mov	r0, r7
 8009c04:	460b      	mov	r3, r1
 8009c06:	f8cd c00c 	str.w	ip, [sp, #12]
 8009c0a:	f000 fc2d 	bl	800a468 <GUI_ReadRectEx>
 8009c0e:	9a08      	ldr	r2, [sp, #32]
 8009c10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009c12:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009c16:	2a17      	cmp	r2, #23
 8009c18:	dc06      	bgt.n	8009c28 <GUI__DoAlphaBlending+0xe8>
 8009c1a:	4450      	add	r0, sl
 8009c1c:	ebcb 0104 	rsb	r1, fp, r4
 8009c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c22:	f000 fc60 	bl	800a4e6 <GUI__ExpandPixelIndicesEx>
 8009c26:	e001      	b.n	8009c2c <GUI__DoAlphaBlending+0xec>
 8009c28:	9b06      	ldr	r3, [sp, #24]
 8009c2a:	b913      	cbnz	r3, 8009c32 <GUI__DoAlphaBlending+0xf2>
 8009c2c:	f04f 0b01 	mov.w	fp, #1
 8009c30:	e00b      	b.n	8009c4a <GUI__DoAlphaBlending+0x10a>
 8009c32:	ebc7 070c 	rsb	r7, r7, ip
 8009c36:	4482      	add	sl, r0
 8009c38:	f8da 0000 	ldr.w	r0, [sl]
 8009c3c:	9a04      	ldr	r2, [sp, #16]
 8009c3e:	4790      	blx	r2
 8009c40:	3f01      	subs	r7, #1
 8009c42:	f84a 0b04 	str.w	r0, [sl], #4
 8009c46:	d1f7      	bne.n	8009c38 <GUI__DoAlphaBlending+0xf8>
 8009c48:	e7f0      	b.n	8009c2c <GUI__DoAlphaBlending+0xec>
 8009c4a:	4b2f      	ldr	r3, [pc, #188]	; (8009d08 <GUI__DoAlphaBlending+0x1c8>)
 8009c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c4e:	f8d3 c000 	ldr.w	ip, [r3]
 8009c52:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009c54:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8009c58:	f1bc 0f00 	cmp.w	ip, #0
 8009c5c:	d024      	beq.n	8009ca8 <GUI__DoAlphaBlending+0x168>
 8009c5e:	eb07 020a 	add.w	r2, r7, sl
 8009c62:	4451      	add	r1, sl
 8009c64:	9210      	str	r2, [sp, #64]	; 0x40
 8009c66:	4623      	mov	r3, r4
 8009c68:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	47e0      	blx	ip
 8009c6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c72:	2300      	movs	r3, #0
 8009c74:	f858 1003 	ldr.w	r1, [r8, r3]
 8009c78:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 8009c7c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8009c80:	58e8      	ldr	r0, [r5, r3]
 8009c82:	d101      	bne.n	8009c88 <GUI__DoAlphaBlending+0x148>
 8009c84:	50d0      	str	r0, [r2, r3]
 8009c86:	e005      	b.n	8009c94 <GUI__DoAlphaBlending+0x154>
 8009c88:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8009c8c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8009c90:	bf08      	it	eq
 8009c92:	50d1      	streq	r1, [r2, r3]
 8009c94:	3c01      	subs	r4, #1
 8009c96:	f103 0304 	add.w	r3, r3, #4
 8009c9a:	d1eb      	bne.n	8009c74 <GUI__DoAlphaBlending+0x134>
 8009c9c:	6833      	ldr	r3, [r6, #0]
 8009c9e:	9710      	str	r7, [sp, #64]	; 0x40
 8009ca0:	f043 0301 	orr.w	r3, r3, #1
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	e020      	b.n	8009cea <GUI__DoAlphaBlending+0x1aa>
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	2bff      	cmp	r3, #255	; 0xff
 8009cac:	d104      	bne.n	8009cb8 <GUI__DoAlphaBlending+0x178>
 8009cae:	f851 300a 	ldr.w	r3, [r1, sl]
 8009cb2:	f847 300a 	str.w	r3, [r7, sl]
 8009cb6:	e011      	b.n	8009cdc <GUI__DoAlphaBlending+0x19c>
 8009cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cba:	f851 100a 	ldr.w	r1, [r1, sl]
 8009cbe:	43da      	mvns	r2, r3
 8009cc0:	4648      	mov	r0, r9
 8009cc2:	b2d2      	uxtb	r2, r2
 8009cc4:	f7ff fe88 	bl	80099d8 <GUI__MixColors>
 8009cc8:	f847 000a 	str.w	r0, [r7, sl]
 8009ccc:	e002      	b.n	8009cd4 <GUI__DoAlphaBlending+0x194>
 8009cce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cd0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009cd4:	6833      	ldr	r3, [r6, #0]
 8009cd6:	f043 0301 	orr.w	r3, r3, #1
 8009cda:	6033      	str	r3, [r6, #0]
 8009cdc:	3c01      	subs	r4, #1
 8009cde:	f105 0501 	add.w	r5, r5, #1
 8009ce2:	d002      	beq.n	8009cea <GUI__DoAlphaBlending+0x1aa>
 8009ce4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009ce8:	e761      	b.n	8009bae <GUI__DoAlphaBlending+0x6e>
 8009cea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009cec:	e000      	b.n	8009cf0 <GUI__DoAlphaBlending+0x1b0>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	b013      	add	sp, #76	; 0x4c
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000010 	.word	0x20000010
 8009cfc:	2001fca0 	.word	0x2001fca0
 8009d00:	08009e9b 	.word	0x08009e9b
 8009d04:	08009e99 	.word	0x08009e99
 8009d08:	2001f940 	.word	0x2001f940

08009d0c <GUI__AllocAlphaBuffer>:
 8009d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d0e:	b108      	cbz	r0, 8009d14 <GUI__AllocAlphaBuffer+0x8>
 8009d10:	aa03      	add	r2, sp, #12
 8009d12:	e000      	b.n	8009d16 <GUI__AllocAlphaBuffer+0xa>
 8009d14:	4602      	mov	r2, r0
 8009d16:	a801      	add	r0, sp, #4
 8009d18:	a902      	add	r1, sp, #8
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f7ff feac 	bl	8009a78 <GUI__GetAlphaBuffer>
 8009d20:	b005      	add	sp, #20
 8009d22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009d28 <GUI_SignalEvent>:
 8009d28:	b508      	push	{r3, lr}
 8009d2a:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <GUI_SignalEvent+0xc>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <GUI_SignalEvent+0xa>
 8009d30:	4798      	blx	r3
 8009d32:	bd08      	pop	{r3, pc}
 8009d34:	2001f950 	.word	0x2001f950

08009d38 <_GetCharCode>:
 8009d38:	7800      	ldrb	r0, [r0, #0]
 8009d3a:	4770      	bx	lr

08009d3c <_GetCharSize>:
 8009d3c:	2001      	movs	r0, #1
 8009d3e:	4770      	bx	lr

08009d40 <_CalcSizeOfChar>:
 8009d40:	2001      	movs	r0, #1
 8009d42:	4770      	bx	lr

08009d44 <_Encode>:
 8009d44:	7001      	strb	r1, [r0, #0]
 8009d46:	2001      	movs	r0, #1
 8009d48:	4770      	bx	lr
	...

08009d4c <GUI_SetOrg>:
 8009d4c:	460a      	mov	r2, r1
 8009d4e:	4908      	ldr	r1, [pc, #32]	; (8009d70 <GUI_SetOrg+0x24>)
 8009d50:	b510      	push	{r4, lr}
 8009d52:	8008      	strh	r0, [r1, #0]
 8009d54:	4907      	ldr	r1, [pc, #28]	; (8009d74 <GUI_SetOrg+0x28>)
 8009d56:	800a      	strh	r2, [r1, #0]
 8009d58:	4907      	ldr	r1, [pc, #28]	; (8009d78 <GUI_SetOrg+0x2c>)
 8009d5a:	6809      	ldr	r1, [r1, #0]
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	7c48      	ldrb	r0, [r1, #17]
 8009d60:	4906      	ldr	r1, [pc, #24]	; (8009d7c <GUI_SetOrg+0x30>)
 8009d62:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009d66:	68c1      	ldr	r1, [r0, #12]
 8009d68:	6a0c      	ldr	r4, [r1, #32]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	47a0      	blx	r4
 8009d6e:	bd10      	pop	{r4, pc}
 8009d70:	2001fc88 	.word	0x2001fc88
 8009d74:	2001fc7c 	.word	0x2001fc7c
 8009d78:	20000010 	.word	0x20000010
 8009d7c:	2001fca0 	.word	0x2001fca0

08009d80 <GUI_RectsIntersect>:
 8009d80:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009d84:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	dc14      	bgt.n	8009db6 <GUI_RectsIntersect+0x36>
 8009d8c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8009d90:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	dc0e      	bgt.n	8009db6 <GUI_RectsIntersect+0x36>
 8009d98:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009d9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	dc08      	bgt.n	8009db6 <GUI_RectsIntersect+0x36>
 8009da4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009da8:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	bfcc      	ite	gt
 8009db0:	2000      	movgt	r0, #0
 8009db2:	2001      	movle	r0, #1
 8009db4:	4770      	bx	lr
 8009db6:	2000      	movs	r0, #0
 8009db8:	4770      	bx	lr
	...

08009dbc <GUI_StoreKey>:
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <GUI_StoreKey+0xc>)
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	b902      	cbnz	r2, 8009dc4 <GUI_StoreKey+0x8>
 8009dc2:	6018      	str	r0, [r3, #0]
 8009dc4:	f7ff bfb0 	b.w	8009d28 <GUI_SignalEvent>
 8009dc8:	2001f954 	.word	0x2001f954

08009dcc <GUI_MoveRect>:
 8009dcc:	b168      	cbz	r0, 8009dea <GUI_MoveRect+0x1e>
 8009dce:	8803      	ldrh	r3, [r0, #0]
 8009dd0:	b289      	uxth	r1, r1
 8009dd2:	440b      	add	r3, r1
 8009dd4:	8003      	strh	r3, [r0, #0]
 8009dd6:	8883      	ldrh	r3, [r0, #4]
 8009dd8:	4419      	add	r1, r3
 8009dda:	8843      	ldrh	r3, [r0, #2]
 8009ddc:	8081      	strh	r1, [r0, #4]
 8009dde:	b292      	uxth	r2, r2
 8009de0:	4413      	add	r3, r2
 8009de2:	8043      	strh	r3, [r0, #2]
 8009de4:	88c3      	ldrh	r3, [r0, #6]
 8009de6:	441a      	add	r2, r3
 8009de8:	80c2      	strh	r2, [r0, #6]
 8009dea:	4770      	bx	lr

08009dec <GUI_MergeRect>:
 8009dec:	b510      	push	{r4, lr}
 8009dee:	b338      	cbz	r0, 8009e40 <GUI_MergeRect+0x54>
 8009df0:	b309      	cbz	r1, 8009e36 <GUI_MergeRect+0x4a>
 8009df2:	b30a      	cbz	r2, 8009e38 <GUI_MergeRect+0x4c>
 8009df4:	f9b1 4000 	ldrsh.w	r4, [r1]
 8009df8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	bfb8      	it	lt
 8009e00:	4623      	movlt	r3, r4
 8009e02:	8003      	strh	r3, [r0, #0]
 8009e04:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8009e08:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	bfb8      	it	lt
 8009e10:	4623      	movlt	r3, r4
 8009e12:	8043      	strh	r3, [r0, #2]
 8009e14:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8009e18:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009e1c:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8009e20:	429c      	cmp	r4, r3
 8009e22:	bfa8      	it	ge
 8009e24:	4623      	movge	r3, r4
 8009e26:	8083      	strh	r3, [r0, #4]
 8009e28:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009e2c:	4299      	cmp	r1, r3
 8009e2e:	bfa8      	it	ge
 8009e30:	460b      	movge	r3, r1
 8009e32:	80c3      	strh	r3, [r0, #6]
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	4611      	mov	r1, r2
 8009e38:	680b      	ldr	r3, [r1, #0]
 8009e3a:	6003      	str	r3, [r0, #0]
 8009e3c:	684b      	ldr	r3, [r1, #4]
 8009e3e:	6043      	str	r3, [r0, #4]
 8009e40:	bd10      	pop	{r4, pc}
	...

08009e44 <GUI_GotoXY>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <GUI_GotoXY+0xc>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	8458      	strh	r0, [r3, #34]	; 0x22
 8009e4a:	8499      	strh	r1, [r3, #36]	; 0x24
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	4770      	bx	lr
 8009e50:	20000010 	.word	0x20000010

08009e54 <GUI_ALLOC_AllocZero>:
 8009e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e56:	4605      	mov	r5, r0
 8009e58:	f7fe f904 	bl	8008064 <GUI_ALLOC_AllocNoInit>
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	b158      	cbz	r0, 8009e78 <GUI_ALLOC_AllocZero+0x24>
 8009e60:	f7fd feec 	bl	8007c3c <GUI_ALLOC_LockH>
 8009e64:	ac02      	add	r4, sp, #8
 8009e66:	2100      	movs	r1, #0
 8009e68:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	f7fd facd 	bl	800740c <GUI__memset>
 8009e72:	4620      	mov	r0, r4
 8009e74:	f7fd fef0 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8009e78:	4630      	mov	r0, r6
 8009e7a:	b002      	add	sp, #8
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}

08009e7e <LCD_Index2Color_M8888I>:
 8009e7e:	43c3      	mvns	r3, r0
 8009e80:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8009e84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	b2c2      	uxtb	r2, r0
 8009e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8009e94:	4318      	orrs	r0, r3
 8009e96:	4770      	bx	lr

08009e98 <LCD_Index2Color_888>:
 8009e98:	4770      	bx	lr

08009e9a <LCD_Index2Color_8888>:
 8009e9a:	4770      	bx	lr

08009e9c <_GetIndexMask_0>:
 8009e9c:	b508      	push	{r3, lr}
 8009e9e:	f7fc fffd 	bl	8006e9c <LCD_GetNumColors>
 8009ea2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009ea6:	d010      	beq.n	8009eca <_GetIndexMask_0+0x2e>
 8009ea8:	287f      	cmp	r0, #127	; 0x7f
 8009eaa:	d810      	bhi.n	8009ece <_GetIndexMask_0+0x32>
 8009eac:	283f      	cmp	r0, #63	; 0x3f
 8009eae:	d810      	bhi.n	8009ed2 <_GetIndexMask_0+0x36>
 8009eb0:	281f      	cmp	r0, #31
 8009eb2:	d810      	bhi.n	8009ed6 <_GetIndexMask_0+0x3a>
 8009eb4:	280f      	cmp	r0, #15
 8009eb6:	d810      	bhi.n	8009eda <_GetIndexMask_0+0x3e>
 8009eb8:	2807      	cmp	r0, #7
 8009eba:	d810      	bhi.n	8009ede <_GetIndexMask_0+0x42>
 8009ebc:	2803      	cmp	r0, #3
 8009ebe:	d810      	bhi.n	8009ee2 <_GetIndexMask_0+0x46>
 8009ec0:	2801      	cmp	r0, #1
 8009ec2:	bf94      	ite	ls
 8009ec4:	2000      	movls	r0, #0
 8009ec6:	2001      	movhi	r0, #1
 8009ec8:	e00c      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009eca:	2008      	movs	r0, #8
 8009ecc:	e00a      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009ece:	2007      	movs	r0, #7
 8009ed0:	e008      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009ed2:	2006      	movs	r0, #6
 8009ed4:	e006      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009ed6:	2005      	movs	r0, #5
 8009ed8:	e004      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009eda:	2004      	movs	r0, #4
 8009edc:	e002      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009ede:	2003      	movs	r0, #3
 8009ee0:	e000      	b.n	8009ee4 <_GetIndexMask_0+0x48>
 8009ee2:	2002      	movs	r0, #2
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8009eea:	3801      	subs	r0, #1
 8009eec:	bd08      	pop	{r3, pc}

08009eee <_Index2Color_0>:
 8009eee:	b538      	push	{r3, r4, r5, lr}
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	f7fc ffd3 	bl	8006e9c <LCD_GetNumColors>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	f7fc ffee 	bl	8006ed8 <LCD_GetPalette>
 8009efc:	42ac      	cmp	r4, r5
 8009efe:	d203      	bcs.n	8009f08 <_Index2Color_0+0x1a>
 8009f00:	b118      	cbz	r0, 8009f0a <_Index2Color_0+0x1c>
 8009f02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	2000      	movs	r0, #0
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}

08009f0c <_Color2Index_0>:
 8009f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f10:	4681      	mov	r9, r0
 8009f12:	f7fc ffc3 	bl	8006e9c <LCD_GetNumColors>
 8009f16:	4680      	mov	r8, r0
 8009f18:	f7fc ffde 	bl	8006ed8 <LCD_GetPalette>
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	b1d8      	cbz	r0, 8009f58 <_Color2Index_0+0x4c>
 8009f20:	2300      	movs	r3, #0
 8009f22:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8009f26:	4591      	cmp	r9, r2
 8009f28:	d01a      	beq.n	8009f60 <_Color2Index_0+0x54>
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	4543      	cmp	r3, r8
 8009f2e:	dbf8      	blt.n	8009f22 <_Color2Index_0+0x16>
 8009f30:	2500      	movs	r5, #0
 8009f32:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8009f36:	462c      	mov	r4, r5
 8009f38:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f000 fc68 	bl	800a812 <GUI_CalcColorDist>
 8009f42:	42b8      	cmp	r0, r7
 8009f44:	bf38      	it	cc
 8009f46:	4625      	movcc	r5, r4
 8009f48:	f104 0401 	add.w	r4, r4, #1
 8009f4c:	bf28      	it	cs
 8009f4e:	4638      	movcs	r0, r7
 8009f50:	4544      	cmp	r4, r8
 8009f52:	da02      	bge.n	8009f5a <_Color2Index_0+0x4e>
 8009f54:	4607      	mov	r7, r0
 8009f56:	e7ef      	b.n	8009f38 <_Color2Index_0+0x2c>
 8009f58:	4605      	mov	r5, r0
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f60:	4618      	mov	r0, r3
 8009f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009f68 <WM__SendMessage>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4c0d      	ldr	r4, [pc, #52]	; (8009fa0 <WM__SendMessage+0x38>)
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	2b13      	cmp	r3, #19
 8009f70:	4606      	mov	r6, r0
 8009f72:	460d      	mov	r5, r1
 8009f74:	dc12      	bgt.n	8009f9c <WM__SendMessage+0x34>
 8009f76:	f7fd fe57 	bl	8007c28 <GUI_ALLOC_h2p>
 8009f7a:	6903      	ldr	r3, [r0, #16]
 8009f7c:	606e      	str	r6, [r5, #4]
 8009f7e:	b143      	cbz	r3, 8009f92 <WM__SendMessage+0x2a>
 8009f80:	6822      	ldr	r2, [r4, #0]
 8009f82:	4628      	mov	r0, r5
 8009f84:	3201      	adds	r2, #1
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	4798      	blx	r3
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	6023      	str	r3, [r4, #0]
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
 8009f92:	4628      	mov	r0, r5
 8009f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f98:	f7fe be0e 	b.w	8008bb8 <WM_DefaultProc>
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2001f958 	.word	0x2001f958

08009fa4 <WM_SendToParent>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	b141      	cbz	r1, 8009fbe <WM_SendToParent+0x1a>
 8009fac:	f000 f808 	bl	8009fc0 <WM_GetParent>
 8009fb0:	b128      	cbz	r0, 8009fbe <WM_SendToParent+0x1a>
 8009fb2:	60a5      	str	r5, [r4, #8]
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fba:	f7ff bfd5 	b.w	8009f68 <WM__SendMessage>
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}

08009fc0 <WM_GetParent>:
 8009fc0:	b508      	push	{r3, lr}
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	b110      	cbz	r0, 8009fcc <WM_GetParent+0xc>
 8009fc6:	f7fd fe2f 	bl	8007c28 <GUI_ALLOC_h2p>
 8009fca:	6983      	ldr	r3, [r0, #24]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	bd08      	pop	{r3, pc}

08009fd0 <WM_GetFirstChild>:
 8009fd0:	b508      	push	{r3, lr}
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	b110      	cbz	r0, 8009fdc <WM_GetFirstChild+0xc>
 8009fd6:	f7fd fe27 	bl	8007c28 <GUI_ALLOC_h2p>
 8009fda:	69c3      	ldr	r3, [r0, #28]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	bd08      	pop	{r3, pc}

08009fe0 <WM__GetClientRectEx>:
 8009fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	b158      	cbz	r0, 8009ffe <WM__GetClientRectEx+0x1e>
 8009fe6:	b151      	cbz	r1, 8009ffe <WM__GetClientRectEx+0x1e>
 8009fe8:	f7fd fe28 	bl	8007c3c <GUI_ALLOC_LockH>
 8009fec:	ac02      	add	r4, sp, #8
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009ff4:	f7fe fb65 	bl	80086c2 <WM__GetClientRectWin>
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f7fd fe2d 	bl	8007c58 <GUI_ALLOC_UnlockH>
 8009ffe:	b003      	add	sp, #12
 800a000:	bd30      	pop	{r4, r5, pc}
	...

0800a004 <WM__AddCriticalHandle>:
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <WM__AddCriticalHandle+0xc>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	6002      	str	r2, [r0, #0]
 800a00a:	6018      	str	r0, [r3, #0]
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	2001fdac 	.word	0x2001fdac

0800a014 <WM_BringToBottom>:
 800a014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	b087      	sub	sp, #28
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d039      	beq.n	800a094 <WM_BringToBottom+0x80>
 800a020:	f7fd fe0c 	bl	8007c3c <GUI_ALLOC_LockH>
 800a024:	4603      	mov	r3, r0
 800a026:	9001      	str	r0, [sp, #4]
 800a028:	c803      	ldmia	r0, {r0, r1}
 800a02a:	ad04      	add	r5, sp, #16
 800a02c:	e885 0003 	stmia.w	r5, {r0, r1}
 800a030:	a801      	add	r0, sp, #4
 800a032:	6a1e      	ldr	r6, [r3, #32]
 800a034:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800a038:	f7fd fe0e 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fc10 	bl	800a862 <WM__GetPrevSibling>
 800a042:	4607      	mov	r7, r0
 800a044:	b330      	cbz	r0, 800a094 <WM_BringToBottom+0x80>
 800a046:	4620      	mov	r0, r4
 800a048:	f7ff ffba 	bl	8009fc0 <WM_GetParent>
 800a04c:	f019 0f02 	tst.w	r9, #2
 800a050:	4680      	mov	r8, r0
 800a052:	d004      	beq.n	800a05e <WM_BringToBottom+0x4a>
 800a054:	4628      	mov	r0, r5
 800a056:	4641      	mov	r1, r8
 800a058:	4632      	mov	r2, r6
 800a05a:	f7fe fb24 	bl	80086a6 <WM__InvalidateRectEx>
 800a05e:	4620      	mov	r0, r4
 800a060:	f7fd fdec 	bl	8007c3c <GUI_ALLOC_LockH>
 800a064:	9001      	str	r0, [sp, #4]
 800a066:	4640      	mov	r0, r8
 800a068:	f7fd fde8 	bl	8007c3c <GUI_ALLOC_LockH>
 800a06c:	9003      	str	r0, [sp, #12]
 800a06e:	4638      	mov	r0, r7
 800a070:	f7fd fde4 	bl	8007c3c <GUI_ALLOC_LockH>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	9a01      	ldr	r2, [sp, #4]
 800a078:	69d9      	ldr	r1, [r3, #28]
 800a07a:	6206      	str	r6, [r0, #32]
 800a07c:	9002      	str	r0, [sp, #8]
 800a07e:	6211      	str	r1, [r2, #32]
 800a080:	a801      	add	r0, sp, #4
 800a082:	61dc      	str	r4, [r3, #28]
 800a084:	f7fd fde8 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800a088:	a803      	add	r0, sp, #12
 800a08a:	f7fd fde5 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800a08e:	a802      	add	r0, sp, #8
 800a090:	f7fd fde2 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800a094:	b007      	add	sp, #28
 800a096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a09c <GUI_MEMDEV__WriteToActiveAlpha>:
 800a09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	b091      	sub	sp, #68	; 0x44
 800a0a2:	460e      	mov	r6, r1
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	900d      	str	r0, [sp, #52]	; 0x34
 800a0a8:	f7fd fdc8 	bl	8007c3c <GUI_ALLOC_LockH>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	a810      	add	r0, sp, #64	; 0x40
 800a0b0:	6813      	ldr	r3, [r2, #0]
 800a0b2:	4d5b      	ldr	r5, [pc, #364]	; (800a220 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 800a0c0:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800a0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c6:	f7fd fdc7 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	4f55      	ldr	r7, [pc, #340]	; (800a224 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800a0ce:	7c5b      	ldrb	r3, [r3, #17]
 800a0d0:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800a0d4:	68c3      	ldr	r3, [r0, #12]
 800a0d6:	2108      	movs	r1, #8
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	4798      	blx	r3
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	7c5b      	ldrb	r3, [r3, #17]
 800a0e0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a0e4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a0e8:	2817      	cmp	r0, #23
 800a0ea:	bf88      	it	hi
 800a0ec:	2020      	movhi	r0, #32
 800a0ee:	9008      	str	r0, [sp, #32]
 800a0f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0f4:	f8d8 2000 	ldr.w	r2, [r8]
 800a0f8:	910a      	str	r1, [sp, #40]	; 0x28
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0fe:	f7ff fe05 	bl	8009d0c <GUI__AllocAlphaBuffer>
 800a102:	2800      	cmp	r0, #0
 800a104:	f040 8089 	bne.w	800a21a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800a108:	682a      	ldr	r2, [r5, #0]
 800a10a:	fa0f f78b 	sxth.w	r7, fp
 800a10e:	19f5      	adds	r5, r6, r7
 800a110:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a114:	3d01      	subs	r5, #1
 800a116:	1aed      	subs	r5, r5, r3
 800a118:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	bfcc      	ite	gt
 800a120:	ebc5 0507 	rsbgt	r5, r5, r7
 800a124:	463d      	movle	r5, r7
 800a126:	42b3      	cmp	r3, r6
 800a128:	bfc3      	ittte	gt
 800a12a:	ebc6 0103 	rsbgt	r1, r6, r3
 800a12e:	ebc1 0505 	rsbgt	r5, r1, r5
 800a132:	461e      	movgt	r6, r3
 800a134:	2100      	movle	r1, #0
 800a136:	2d00      	cmp	r5, #0
 800a138:	dd6f      	ble.n	800a21a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800a13a:	fa0f f389 	sxth.w	r3, r9
 800a13e:	18e0      	adds	r0, r4, r3
 800a140:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800a144:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800a148:	3801      	subs	r0, #1
 800a14a:	ebcc 0000 	rsb	r0, ip, r0
 800a14e:	2800      	cmp	r0, #0
 800a150:	bfc8      	it	gt
 800a152:	ebc0 0303 	rsbgt	r3, r0, r3
 800a156:	4294      	cmp	r4, r2
 800a158:	bfbd      	ittte	lt
 800a15a:	ebc4 0a02 	rsblt	sl, r4, r2
 800a15e:	ebca 0303 	rsblt	r3, sl, r3
 800a162:	4614      	movlt	r4, r2
 800a164:	f04f 0a00 	movge.w	sl, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dd56      	ble.n	800a21a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800a16c:	fb07 1a0a 	mla	sl, r7, sl, r1
 800a170:	18e3      	adds	r3, r4, r3
 800a172:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800a176:	930c      	str	r3, [sp, #48]	; 0x30
 800a178:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a17a:	f7fe fdef 	bl	8008d5c <GUI_MEMDEV_GetDataPtr>
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	ab0f      	add	r3, sp, #60	; 0x3c
 800a184:	eb00 020a 	add.w	r2, r0, sl
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	4630      	mov	r0, r6
 800a18c:	4621      	mov	r1, r4
 800a18e:	462b      	mov	r3, r5
 800a190:	f7ff fcd6 	bl	8009b40 <GUI__DoAlphaBlending>
 800a194:	4681      	mov	r9, r0
 800a196:	2800      	cmp	r0, #0
 800a198:	d03f      	beq.n	800a21a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800a19a:	4b23      	ldr	r3, [pc, #140]	; (800a228 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800a19c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a19e:	4299      	cmp	r1, r3
 800a1a0:	d01e      	beq.n	800a1e0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	9a08      	ldr	r2, [sp, #32]
 800a1a6:	4643      	mov	r3, r8
 800a1a8:	f000 fb2c 	bl	800a804 <GUI__CompactPixelIndicesEx>
 800a1ac:	b9c0      	cbnz	r0, 800a1e0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800a1ae:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800a1b2:	f1bc 0f00 	cmp.w	ip, #0
 800a1b6:	d006      	beq.n	800a1c6 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800a1b8:	4648      	mov	r0, r9
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	fa0f f28b 	sxth.w	r2, fp
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	47e0      	blx	ip
 800a1c4:	e00c      	b.n	800a1e0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800a1c6:	464a      	mov	r2, r9
 800a1c8:	463b      	mov	r3, r7
 800a1ca:	6810      	ldr	r0, [r2, #0]
 800a1cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1ce:	9206      	str	r2, [sp, #24]
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	4788      	blx	r1
 800a1d4:	9b07      	ldr	r3, [sp, #28]
 800a1d6:	9a06      	ldr	r2, [sp, #24]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	f842 0b04 	str.w	r0, [r2], #4
 800a1de:	d1f4      	bne.n	800a1ca <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800a1e0:	9a08      	ldr	r2, [sp, #32]
 800a1e2:	9202      	str	r2, [sp, #8]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f104 0c01 	add.w	ip, r4, #1
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	9203      	str	r2, [sp, #12]
 800a1f2:	9205      	str	r2, [sp, #20]
 800a1f4:	f8cd 9010 	str.w	r9, [sp, #16]
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	f8cd c01c 	str.w	ip, [sp, #28]
 800a202:	f7fc ff35 	bl	8007070 <LCD_DrawBitmap>
 800a206:	2304      	movs	r3, #4
 800a208:	fb1b aa03 	smlabb	sl, fp, r3, sl
 800a20c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a212:	459c      	cmp	ip, r3
 800a214:	d001      	beq.n	800a21a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800a216:	4664      	mov	r4, ip
 800a218:	e7ae      	b.n	800a178 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800a21a:	b011      	add	sp, #68	; 0x44
 800a21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a220:	20000010 	.word	0x20000010
 800a224:	2001fca0 	.word	0x2001fca0
 800a228:	08009e9b 	.word	0x08009e9b

0800a22c <GUI_USAGE_DecUseCnt>:
 800a22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a22e:	4605      	mov	r5, r0
 800a230:	f7fd fd04 	bl	8007c3c <GUI_ALLOC_LockH>
 800a234:	4602      	mov	r2, r0
 800a236:	a802      	add	r0, sp, #8
 800a238:	8994      	ldrh	r4, [r2, #12]
 800a23a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800a23e:	3c01      	subs	r4, #1
 800a240:	b2a4      	uxth	r4, r4
 800a242:	8194      	strh	r4, [r2, #12]
 800a244:	f7fd fd08 	bl	8007c58 <GUI_ALLOC_UnlockH>
 800a248:	b914      	cbnz	r4, 800a250 <GUI_USAGE_DecUseCnt+0x24>
 800a24a:	4628      	mov	r0, r5
 800a24c:	f7fd fd24 	bl	8007c98 <GUI_ALLOC_Free>
 800a250:	b003      	add	sp, #12
 800a252:	bd30      	pop	{r4, r5, pc}

0800a254 <GUI_USAGE_AddRect>:
 800a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a258:	4605      	mov	r5, r0
 800a25a:	4688      	mov	r8, r1
 800a25c:	4617      	mov	r7, r2
 800a25e:	4699      	mov	r9, r3
 800a260:	68a8      	ldr	r0, [r5, #8]
 800a262:	464b      	mov	r3, r9
 800a264:	6846      	ldr	r6, [r0, #4]
 800a266:	4641      	mov	r1, r8
 800a268:	4628      	mov	r0, r5
 800a26a:	1c54      	adds	r4, r2, #1
 800a26c:	47b0      	blx	r6
 800a26e:	9b08      	ldr	r3, [sp, #32]
 800a270:	443b      	add	r3, r7
 800a272:	42a3      	cmp	r3, r4
 800a274:	d001      	beq.n	800a27a <GUI_USAGE_AddRect+0x26>
 800a276:	4622      	mov	r2, r4
 800a278:	e7f2      	b.n	800a260 <GUI_USAGE_AddRect+0xc>
 800a27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800a280 <LCD_ReadRectEx>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b087      	sub	sp, #28
 800a286:	4617      	mov	r7, r2
 800a288:	9304      	str	r3, [sp, #16]
 800a28a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a28c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a292:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800a296:	4606      	mov	r6, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	b973      	cbnz	r3, 800a2ba <LCD_ReadRectEx+0x3a>
 800a29c:	4b71      	ldr	r3, [pc, #452]	; (800a464 <LCD_ReadRectEx+0x1e4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	7c58      	ldrb	r0, [r3, #17]
 800a2a2:	f7fc fe03 	bl	8006eac <GUI_GetBitsPerPixelEx>
 800a2a6:	2808      	cmp	r0, #8
 800a2a8:	4682      	mov	sl, r0
 800a2aa:	dd15      	ble.n	800a2d8 <LCD_ReadRectEx+0x58>
 800a2ac:	2810      	cmp	r0, #16
 800a2ae:	bfcc      	ite	gt
 800a2b0:	f04f 0904 	movgt.w	r9, #4
 800a2b4:	f04f 0902 	movle.w	r9, #2
 800a2b8:	e010      	b.n	800a2dc <LCD_ReadRectEx+0x5c>
 800a2ba:	a811      	add	r0, sp, #68	; 0x44
 800a2bc:	2101      	movs	r1, #1
 800a2be:	4798      	blx	r3
 800a2c0:	4684      	mov	ip, r0
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d0ea      	beq.n	800a29c <LCD_ReadRectEx+0x1c>
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a2ca:	e88d 0018 	stmia.w	sp, {r3, r4}
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	47e0      	blx	ip
 800a2d6:	e0c1      	b.n	800a45c <LCD_ReadRectEx+0x1dc>
 800a2d8:	f04f 0901 	mov.w	r9, #1
 800a2dc:	f04f 0b00 	mov.w	fp, #0
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	f300 80ba 	bgt.w	800a45c <LCD_ReadRectEx+0x1dc>
 800a2e8:	f1b9 0f02 	cmp.w	r9, #2
 800a2ec:	d009      	beq.n	800a302 <LCD_ReadRectEx+0x82>
 800a2ee:	f1b9 0f04 	cmp.w	r9, #4
 800a2f2:	d004      	beq.n	800a2fe <LCD_ReadRectEx+0x7e>
 800a2f4:	f1b9 0f01 	cmp.w	r9, #1
 800a2f8:	f040 80ae 	bne.w	800a458 <LCD_ReadRectEx+0x1d8>
 800a2fc:	e003      	b.n	800a306 <LCD_ReadRectEx+0x86>
 800a2fe:	46b4      	mov	ip, r6
 800a300:	e09b      	b.n	800a43a <LCD_ReadRectEx+0x1ba>
 800a302:	46b4      	mov	ip, r6
 800a304:	e08a      	b.n	800a41c <LCD_ReadRectEx+0x19c>
 800a306:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800a30a:	2a07      	cmp	r2, #7
 800a30c:	f200 80a4 	bhi.w	800a458 <LCD_ReadRectEx+0x1d8>
 800a310:	e8df f002 	tbb	[pc, r2]
 800a314:	0606080a 	.word	0x0606080a
 800a318:	04040404 	.word	0x04040404
 800a31c:	46b4      	mov	ip, r6
 800a31e:	e066      	b.n	800a3ee <LCD_ReadRectEx+0x16e>
 800a320:	46b4      	mov	ip, r6
 800a322:	e047      	b.n	800a3b4 <LCD_ReadRectEx+0x134>
 800a324:	46b4      	mov	ip, r6
 800a326:	e022      	b.n	800a36e <LCD_ReadRectEx+0xee>
 800a328:	46b4      	mov	ip, r6
 800a32a:	45bc      	cmp	ip, r7
 800a32c:	f300 8094 	bgt.w	800a458 <LCD_ReadRectEx+0x1d8>
 800a330:	4661      	mov	r1, ip
 800a332:	462a      	mov	r2, r5
 800a334:	f8cd c00c 	str.w	ip, [sp, #12]
 800a338:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a33a:	47c0      	blx	r8
 800a33c:	f1cb 0207 	rsb	r2, fp, #7
 800a340:	fa00 f202 	lsl.w	r2, r0, r2
 800a344:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800a348:	7820      	ldrb	r0, [r4, #0]
 800a34a:	fa41 f10b 	asr.w	r1, r1, fp
 800a34e:	4001      	ands	r1, r0
 800a350:	430a      	orrs	r2, r1
 800a352:	7022      	strb	r2, [r4, #0]
 800a354:	f10b 0301 	add.w	r3, fp, #1
 800a358:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a35c:	f023 0207 	bic.w	r2, r3, #7
 800a360:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800a364:	fa43 fb02 	asr.w	fp, r3, r2
 800a368:	f10c 0c01 	add.w	ip, ip, #1
 800a36c:	e7dd      	b.n	800a32a <LCD_ReadRectEx+0xaa>
 800a36e:	45bc      	cmp	ip, r7
 800a370:	dc72      	bgt.n	800a458 <LCD_ReadRectEx+0x1d8>
 800a372:	4661      	mov	r1, ip
 800a374:	462a      	mov	r2, r5
 800a376:	f8cd c00c 	str.w	ip, [sp, #12]
 800a37a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a37c:	47c0      	blx	r8
 800a37e:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800a382:	f1c2 0106 	rsb	r1, r2, #6
 800a386:	fa00 f101 	lsl.w	r1, r0, r1
 800a38a:	f64f 703f 	movw	r0, #65343	; 0xff3f
 800a38e:	fa40 f202 	asr.w	r2, r0, r2
 800a392:	7820      	ldrb	r0, [r4, #0]
 800a394:	4002      	ands	r2, r0
 800a396:	4311      	orrs	r1, r2
 800a398:	7021      	strb	r1, [r4, #0]
 800a39a:	f10b 0301 	add.w	r3, fp, #1
 800a39e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a3a2:	f023 0203 	bic.w	r2, r3, #3
 800a3a6:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800a3aa:	fa43 fb02 	asr.w	fp, r3, r2
 800a3ae:	f10c 0c01 	add.w	ip, ip, #1
 800a3b2:	e7dc      	b.n	800a36e <LCD_ReadRectEx+0xee>
 800a3b4:	45bc      	cmp	ip, r7
 800a3b6:	dc4f      	bgt.n	800a458 <LCD_ReadRectEx+0x1d8>
 800a3b8:	4661      	mov	r1, ip
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	f8cd c00c 	str.w	ip, [sp, #12]
 800a3c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a3c2:	47c0      	blx	r8
 800a3c4:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800a3c8:	f1c2 0104 	rsb	r1, r2, #4
 800a3cc:	fa00 f101 	lsl.w	r1, r0, r1
 800a3d0:	200f      	movs	r0, #15
 800a3d2:	fa00 f202 	lsl.w	r2, r0, r2
 800a3d6:	7820      	ldrb	r0, [r4, #0]
 800a3d8:	4002      	ands	r2, r0
 800a3da:	4311      	orrs	r1, r2
 800a3dc:	7021      	strb	r1, [r4, #0]
 800a3de:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a3e2:	445c      	add	r4, fp
 800a3e4:	f10c 0c01 	add.w	ip, ip, #1
 800a3e8:	f08b 0b01 	eor.w	fp, fp, #1
 800a3ec:	e7e2      	b.n	800a3b4 <LCD_ReadRectEx+0x134>
 800a3ee:	4273      	negs	r3, r6
 800a3f0:	1ba2      	subs	r2, r4, r6
 800a3f2:	45bc      	cmp	ip, r7
 800a3f4:	9305      	str	r3, [sp, #20]
 800a3f6:	4462      	add	r2, ip
 800a3f8:	dc0e      	bgt.n	800a418 <LCD_ReadRectEx+0x198>
 800a3fa:	4661      	mov	r1, ip
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	f8cd c00c 	str.w	ip, [sp, #12]
 800a402:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a404:	47c0      	blx	r8
 800a406:	9a05      	ldr	r2, [sp, #20]
 800a408:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a40c:	4422      	add	r2, r4
 800a40e:	f802 000c 	strb.w	r0, [r2, ip]
 800a412:	f10c 0c01 	add.w	ip, ip, #1
 800a416:	e7ea      	b.n	800a3ee <LCD_ReadRectEx+0x16e>
 800a418:	4614      	mov	r4, r2
 800a41a:	e01d      	b.n	800a458 <LCD_ReadRectEx+0x1d8>
 800a41c:	45bc      	cmp	ip, r7
 800a41e:	dc1b      	bgt.n	800a458 <LCD_ReadRectEx+0x1d8>
 800a420:	4661      	mov	r1, ip
 800a422:	f8cd c00c 	str.w	ip, [sp, #12]
 800a426:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a428:	462a      	mov	r2, r5
 800a42a:	47c0      	blx	r8
 800a42c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a430:	f824 0b02 	strh.w	r0, [r4], #2
 800a434:	f10c 0c01 	add.w	ip, ip, #1
 800a438:	e7f0      	b.n	800a41c <LCD_ReadRectEx+0x19c>
 800a43a:	45bc      	cmp	ip, r7
 800a43c:	dc0c      	bgt.n	800a458 <LCD_ReadRectEx+0x1d8>
 800a43e:	4661      	mov	r1, ip
 800a440:	f8cd c00c 	str.w	ip, [sp, #12]
 800a444:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a446:	462a      	mov	r2, r5
 800a448:	47c0      	blx	r8
 800a44a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a44e:	f844 0b04 	str.w	r0, [r4], #4
 800a452:	f10c 0c01 	add.w	ip, ip, #1
 800a456:	e7f0      	b.n	800a43a <LCD_ReadRectEx+0x1ba>
 800a458:	3501      	adds	r5, #1
 800a45a:	e741      	b.n	800a2e0 <LCD_ReadRectEx+0x60>
 800a45c:	b007      	add	sp, #28
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a462:	bf00      	nop
 800a464:	20000010 	.word	0x20000010

0800a468 <GUI_ReadRectEx>:
 800a468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46a:	4d16      	ldr	r5, [pc, #88]	; (800a4c4 <GUI_ReadRectEx+0x5c>)
 800a46c:	9e05      	ldr	r6, [sp, #20]
 800a46e:	682d      	ldr	r5, [r5, #0]
 800a470:	9c06      	ldr	r4, [sp, #24]
 800a472:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800a476:	42b8      	cmp	r0, r7
 800a478:	bfb8      	it	lt
 800a47a:	4638      	movlt	r0, r7
 800a47c:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800a480:	42ba      	cmp	r2, r7
 800a482:	bfa8      	it	ge
 800a484:	463a      	movge	r2, r7
 800a486:	4282      	cmp	r2, r0
 800a488:	db1b      	blt.n	800a4c2 <GUI_ReadRectEx+0x5a>
 800a48a:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800a48e:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800a492:	42b9      	cmp	r1, r7
 800a494:	bfb8      	it	lt
 800a496:	4639      	movlt	r1, r7
 800a498:	42ab      	cmp	r3, r5
 800a49a:	bfa8      	it	ge
 800a49c:	462b      	movge	r3, r5
 800a49e:	428b      	cmp	r3, r1
 800a4a0:	db0f      	blt.n	800a4c2 <GUI_ReadRectEx+0x5a>
 800a4a2:	68e5      	ldr	r5, [r4, #12]
 800a4a4:	682d      	ldr	r5, [r5, #0]
 800a4a6:	f035 0704 	bics.w	r7, r5, #4
 800a4aa:	d105      	bne.n	800a4b8 <GUI_ReadRectEx+0x50>
 800a4ac:	9605      	str	r6, [sp, #20]
 800a4ae:	9406      	str	r4, [sp, #24]
 800a4b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a4b4:	f7ff bee4 	b.w	800a280 <LCD_ReadRectEx>
 800a4b8:	6825      	ldr	r5, [r4, #0]
 800a4ba:	2d00      	cmp	r5, #0
 800a4bc:	d0f6      	beq.n	800a4ac <GUI_ReadRectEx+0x44>
 800a4be:	462c      	mov	r4, r5
 800a4c0:	e7ef      	b.n	800a4a2 <GUI_ReadRectEx+0x3a>
 800a4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c4:	20000010 	.word	0x20000010

0800a4c8 <LCD_GetNumLayers>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7fd f82c 	bl	8007528 <GUI_DEVICE__GetpDriver>
 800a4d0:	1c04      	adds	r4, r0, #0
 800a4d2:	f04f 0001 	mov.w	r0, #1
 800a4d6:	bf18      	it	ne
 800a4d8:	2401      	movne	r4, #1
 800a4da:	f7fd f825 	bl	8007528 <GUI_DEVICE__GetpDriver>
 800a4de:	b100      	cbz	r0, 800a4e2 <LCD_GetNumLayers+0x1a>
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	bd10      	pop	{r4, pc}

0800a4e6 <GUI__ExpandPixelIndicesEx>:
 800a4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ea:	1e0c      	subs	r4, r1, #0
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	f340 80b3 	ble.w	800a658 <GUI__ExpandPixelIndicesEx+0x172>
 800a4f2:	2a08      	cmp	r2, #8
 800a4f4:	685f      	ldr	r7, [r3, #4]
 800a4f6:	dd04      	ble.n	800a502 <GUI__ExpandPixelIndicesEx+0x1c>
 800a4f8:	2a10      	cmp	r2, #16
 800a4fa:	f340 8098 	ble.w	800a62e <GUI__ExpandPixelIndicesEx+0x148>
 800a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a502:	3a01      	subs	r2, #1
 800a504:	2a07      	cmp	r2, #7
 800a506:	f200 80a7 	bhi.w	800a658 <GUI__ExpandPixelIndicesEx+0x172>
 800a50a:	e8df f002 	tbb	[pc, r2]
 800a50e:	2d04      	.short	0x2d04
 800a510:	a5a558a5 	.word	0xa5a558a5
 800a514:	83a5      	.short	0x83a5
 800a516:	1e66      	subs	r6, r4, #1
 800a518:	10f2      	asrs	r2, r6, #3
 800a51a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800a51e:	3b01      	subs	r3, #1
 800a520:	eb05 0802 	add.w	r8, r5, r2
 800a524:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800a528:	f006 0607 	and.w	r6, r6, #7
 800a52c:	f815 a002 	ldrb.w	sl, [r5, r2]
 800a530:	2580      	movs	r5, #128	; 0x80
 800a532:	4135      	asrs	r5, r6
 800a534:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a538:	b2ed      	uxtb	r5, r5
 800a53a:	f1c6 0307 	rsb	r3, r6, #7
 800a53e:	ea0a 0005 	and.w	r0, sl, r5
 800a542:	4118      	asrs	r0, r3
 800a544:	47b8      	blx	r7
 800a546:	f849 0904 	str.w	r0, [r9], #-4
 800a54a:	b936      	cbnz	r6, 800a55a <GUI__ExpandPixelIndicesEx+0x74>
 800a54c:	f898 a000 	ldrb.w	sl, [r8]
 800a550:	2501      	movs	r5, #1
 800a552:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a556:	2607      	movs	r6, #7
 800a558:	e002      	b.n	800a560 <GUI__ExpandPixelIndicesEx+0x7a>
 800a55a:	006d      	lsls	r5, r5, #1
 800a55c:	3e01      	subs	r6, #1
 800a55e:	b2ed      	uxtb	r5, r5
 800a560:	3c01      	subs	r4, #1
 800a562:	d1ea      	bne.n	800a53a <GUI__ExpandPixelIndicesEx+0x54>
 800a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a568:	1e66      	subs	r6, r4, #1
 800a56a:	10b2      	asrs	r2, r6, #2
 800a56c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800a570:	3b01      	subs	r3, #1
 800a572:	f006 0603 	and.w	r6, r6, #3
 800a576:	eb05 0802 	add.w	r8, r5, r2
 800a57a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800a57e:	f815 a002 	ldrb.w	sl, [r5, r2]
 800a582:	0073      	lsls	r3, r6, #1
 800a584:	25c0      	movs	r5, #192	; 0xc0
 800a586:	411d      	asrs	r5, r3
 800a588:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a58c:	b2ed      	uxtb	r5, r5
 800a58e:	0073      	lsls	r3, r6, #1
 800a590:	f1c3 0306 	rsb	r3, r3, #6
 800a594:	ea0a 0005 	and.w	r0, sl, r5
 800a598:	4118      	asrs	r0, r3
 800a59a:	47b8      	blx	r7
 800a59c:	f849 0904 	str.w	r0, [r9], #-4
 800a5a0:	b936      	cbnz	r6, 800a5b0 <GUI__ExpandPixelIndicesEx+0xca>
 800a5a2:	2503      	movs	r5, #3
 800a5a4:	f898 a000 	ldrb.w	sl, [r8]
 800a5a8:	462e      	mov	r6, r5
 800a5aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a5ae:	e002      	b.n	800a5b6 <GUI__ExpandPixelIndicesEx+0xd0>
 800a5b0:	00ad      	lsls	r5, r5, #2
 800a5b2:	3e01      	subs	r6, #1
 800a5b4:	b2ed      	uxtb	r5, r5
 800a5b6:	3c01      	subs	r4, #1
 800a5b8:	d1e9      	bne.n	800a58e <GUI__ExpandPixelIndicesEx+0xa8>
 800a5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5be:	1e66      	subs	r6, r4, #1
 800a5c0:	1072      	asrs	r2, r6, #1
 800a5c2:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	f006 0601 	and.w	r6, r6, #1
 800a5cc:	eb05 0802 	add.w	r8, r5, r2
 800a5d0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800a5d4:	f815 a002 	ldrb.w	sl, [r5, r2]
 800a5d8:	00b3      	lsls	r3, r6, #2
 800a5da:	25f0      	movs	r5, #240	; 0xf0
 800a5dc:	411d      	asrs	r5, r3
 800a5de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a5e2:	b2ed      	uxtb	r5, r5
 800a5e4:	00b3      	lsls	r3, r6, #2
 800a5e6:	f1c3 0304 	rsb	r3, r3, #4
 800a5ea:	ea0a 0005 	and.w	r0, sl, r5
 800a5ee:	4118      	asrs	r0, r3
 800a5f0:	47b8      	blx	r7
 800a5f2:	f849 0904 	str.w	r0, [r9], #-4
 800a5f6:	b936      	cbnz	r6, 800a606 <GUI__ExpandPixelIndicesEx+0x120>
 800a5f8:	f898 a000 	ldrb.w	sl, [r8]
 800a5fc:	250f      	movs	r5, #15
 800a5fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a602:	2601      	movs	r6, #1
 800a604:	e002      	b.n	800a60c <GUI__ExpandPixelIndicesEx+0x126>
 800a606:	012d      	lsls	r5, r5, #4
 800a608:	b2ed      	uxtb	r5, r5
 800a60a:	2600      	movs	r6, #0
 800a60c:	3c01      	subs	r4, #1
 800a60e:	d1e9      	bne.n	800a5e4 <GUI__ExpandPixelIndicesEx+0xfe>
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	192e      	adds	r6, r5, r4
 800a616:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800a61a:	1b34      	subs	r4, r6, r4
 800a61c:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800a620:	47b8      	blx	r7
 800a622:	42a6      	cmp	r6, r4
 800a624:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a628:	d1f8      	bne.n	800a61c <GUI__ExpandPixelIndicesEx+0x136>
 800a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62e:	695e      	ldr	r6, [r3, #20]
 800a630:	b12e      	cbz	r6, 800a63e <GUI__ExpandPixelIndicesEx+0x158>
 800a632:	4629      	mov	r1, r5
 800a634:	4622      	mov	r2, r4
 800a636:	2302      	movs	r3, #2
 800a638:	47b0      	blx	r6
 800a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63e:	0064      	lsls	r4, r4, #1
 800a640:	4425      	add	r5, r4
 800a642:	192e      	adds	r6, r5, r4
 800a644:	1b2c      	subs	r4, r5, r4
 800a646:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 800a64a:	47b8      	blx	r7
 800a64c:	42a5      	cmp	r5, r4
 800a64e:	f846 0d04 	str.w	r0, [r6, #-4]!
 800a652:	d1f8      	bne.n	800a646 <GUI__ExpandPixelIndicesEx+0x160>
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a65c <GUI__ConvertColor2Index>:
 800a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a664:	681e      	ldr	r6, [r3, #0]
 800a666:	f1b8 0f00 	cmp.w	r8, #0
 800a66a:	bf08      	it	eq
 800a66c:	4680      	moveq	r8, r0
 800a66e:	2a08      	cmp	r2, #8
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	dd05      	ble.n	800a682 <GUI__ConvertColor2Index+0x26>
 800a676:	2a10      	cmp	r2, #16
 800a678:	f340 80b6 	ble.w	800a7e8 <GUI__ConvertColor2Index+0x18c>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a682:	3a01      	subs	r2, #1
 800a684:	2a07      	cmp	r2, #7
 800a686:	f200 80a4 	bhi.w	800a7d2 <GUI__ConvertColor2Index+0x176>
 800a68a:	e8df f002 	tbb	[pc, r2]
 800a68e:	6111      	.short	0x6111
 800a690:	a2a287a2 	.word	0xa2a287a2
 800a694:	92a2      	.short	0x92a2
 800a696:	69e0      	ldr	r0, [r4, #28]
 800a698:	47b0      	blx	r6
 800a69a:	4338      	orrs	r0, r7
 800a69c:	f104 0920 	add.w	r9, r4, #32
 800a6a0:	b2c7      	uxtb	r7, r0
 800a6a2:	3d08      	subs	r5, #8
 800a6a4:	f808 7b01 	strb.w	r7, [r8], #1
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	f000 8092 	beq.w	800a7d2 <GUI__ConvertColor2Index+0x176>
 800a6ae:	464c      	mov	r4, r9
 800a6b0:	6820      	ldr	r0, [r4, #0]
 800a6b2:	47b0      	blx	r6
 800a6b4:	2d01      	cmp	r5, #1
 800a6b6:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800a6ba:	b2c7      	uxtb	r7, r0
 800a6bc:	f000 808c 	beq.w	800a7d8 <GUI__ConvertColor2Index+0x17c>
 800a6c0:	6860      	ldr	r0, [r4, #4]
 800a6c2:	47b0      	blx	r6
 800a6c4:	2d02      	cmp	r5, #2
 800a6c6:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 800a6ca:	b2c7      	uxtb	r7, r0
 800a6cc:	d102      	bne.n	800a6d4 <GUI__ConvertColor2Index+0x78>
 800a6ce:	f104 0908 	add.w	r9, r4, #8
 800a6d2:	e083      	b.n	800a7dc <GUI__ConvertColor2Index+0x180>
 800a6d4:	68a0      	ldr	r0, [r4, #8]
 800a6d6:	47b0      	blx	r6
 800a6d8:	2d03      	cmp	r5, #3
 800a6da:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 800a6de:	b2c7      	uxtb	r7, r0
 800a6e0:	d102      	bne.n	800a6e8 <GUI__ConvertColor2Index+0x8c>
 800a6e2:	f104 090c 	add.w	r9, r4, #12
 800a6e6:	e079      	b.n	800a7dc <GUI__ConvertColor2Index+0x180>
 800a6e8:	68e0      	ldr	r0, [r4, #12]
 800a6ea:	47b0      	blx	r6
 800a6ec:	2d04      	cmp	r5, #4
 800a6ee:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800a6f2:	b2c7      	uxtb	r7, r0
 800a6f4:	d102      	bne.n	800a6fc <GUI__ConvertColor2Index+0xa0>
 800a6f6:	f104 0910 	add.w	r9, r4, #16
 800a6fa:	e06f      	b.n	800a7dc <GUI__ConvertColor2Index+0x180>
 800a6fc:	6920      	ldr	r0, [r4, #16]
 800a6fe:	47b0      	blx	r6
 800a700:	2d05      	cmp	r5, #5
 800a702:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 800a706:	b2c7      	uxtb	r7, r0
 800a708:	d102      	bne.n	800a710 <GUI__ConvertColor2Index+0xb4>
 800a70a:	f104 0914 	add.w	r9, r4, #20
 800a70e:	e065      	b.n	800a7dc <GUI__ConvertColor2Index+0x180>
 800a710:	6960      	ldr	r0, [r4, #20]
 800a712:	47b0      	blx	r6
 800a714:	2d06      	cmp	r5, #6
 800a716:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800a71a:	b2c7      	uxtb	r7, r0
 800a71c:	d102      	bne.n	800a724 <GUI__ConvertColor2Index+0xc8>
 800a71e:	f104 0918 	add.w	r9, r4, #24
 800a722:	e05b      	b.n	800a7dc <GUI__ConvertColor2Index+0x180>
 800a724:	69a0      	ldr	r0, [r4, #24]
 800a726:	47b0      	blx	r6
 800a728:	2d07      	cmp	r5, #7
 800a72a:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 800a72e:	b2c7      	uxtb	r7, r0
 800a730:	d1b1      	bne.n	800a696 <GUI__ConvertColor2Index+0x3a>
 800a732:	f104 091c 	add.w	r9, r4, #28
 800a736:	e051      	b.n	800a7dc <GUI__ConvertColor2Index+0x180>
 800a738:	68e0      	ldr	r0, [r4, #12]
 800a73a:	47b0      	blx	r6
 800a73c:	4338      	orrs	r0, r7
 800a73e:	f104 0910 	add.w	r9, r4, #16
 800a742:	b2c7      	uxtb	r7, r0
 800a744:	3d04      	subs	r5, #4
 800a746:	f808 7b01 	strb.w	r7, [r8], #1
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	d041      	beq.n	800a7d2 <GUI__ConvertColor2Index+0x176>
 800a74e:	464c      	mov	r4, r9
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	47b0      	blx	r6
 800a754:	2d01      	cmp	r5, #1
 800a756:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800a75a:	b2c7      	uxtb	r7, r0
 800a75c:	d040      	beq.n	800a7e0 <GUI__ConvertColor2Index+0x184>
 800a75e:	6860      	ldr	r0, [r4, #4]
 800a760:	47b0      	blx	r6
 800a762:	2d02      	cmp	r5, #2
 800a764:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800a768:	b2c7      	uxtb	r7, r0
 800a76a:	d102      	bne.n	800a772 <GUI__ConvertColor2Index+0x116>
 800a76c:	f104 0908 	add.w	r9, r4, #8
 800a770:	e038      	b.n	800a7e4 <GUI__ConvertColor2Index+0x188>
 800a772:	68a0      	ldr	r0, [r4, #8]
 800a774:	47b0      	blx	r6
 800a776:	2d03      	cmp	r5, #3
 800a778:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800a77c:	b2c7      	uxtb	r7, r0
 800a77e:	d1db      	bne.n	800a738 <GUI__ConvertColor2Index+0xdc>
 800a780:	f104 090c 	add.w	r9, r4, #12
 800a784:	e02e      	b.n	800a7e4 <GUI__ConvertColor2Index+0x188>
 800a786:	6860      	ldr	r0, [r4, #4]
 800a788:	47b0      	blx	r6
 800a78a:	4338      	orrs	r0, r7
 800a78c:	f104 0908 	add.w	r9, r4, #8
 800a790:	b2c7      	uxtb	r7, r0
 800a792:	3d02      	subs	r5, #2
 800a794:	f808 7b01 	strb.w	r7, [r8], #1
 800a798:	b1dd      	cbz	r5, 800a7d2 <GUI__ConvertColor2Index+0x176>
 800a79a:	464c      	mov	r4, r9
 800a79c:	6820      	ldr	r0, [r4, #0]
 800a79e:	47b0      	blx	r6
 800a7a0:	2d01      	cmp	r5, #1
 800a7a2:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800a7a6:	b2c7      	uxtb	r7, r0
 800a7a8:	d1ed      	bne.n	800a786 <GUI__ConvertColor2Index+0x12a>
 800a7aa:	f104 0904 	add.w	r9, r4, #4
 800a7ae:	2500      	movs	r5, #0
 800a7b0:	e7f0      	b.n	800a794 <GUI__ConvertColor2Index+0x138>
 800a7b2:	691f      	ldr	r7, [r3, #16]
 800a7b4:	b12f      	cbz	r7, 800a7c2 <GUI__ConvertColor2Index+0x166>
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4641      	mov	r1, r8
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	2301      	movs	r3, #1
 800a7be:	47b8      	blx	r7
 800a7c0:	e007      	b.n	800a7d2 <GUI__ConvertColor2Index+0x176>
 800a7c2:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 800a7c6:	47b0      	blx	r6
 800a7c8:	f808 0007 	strb.w	r0, [r8, r7]
 800a7cc:	3701      	adds	r7, #1
 800a7ce:	42bd      	cmp	r5, r7
 800a7d0:	d1f7      	bne.n	800a7c2 <GUI__ConvertColor2Index+0x166>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d8:	f104 0904 	add.w	r9, r4, #4
 800a7dc:	2500      	movs	r5, #0
 800a7de:	e761      	b.n	800a6a4 <GUI__ConvertColor2Index+0x48>
 800a7e0:	f104 0904 	add.w	r9, r4, #4
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	e7ae      	b.n	800a746 <GUI__ConvertColor2Index+0xea>
 800a7e8:	691f      	ldr	r7, [r3, #16]
 800a7ea:	b11f      	cbz	r7, 800a7f4 <GUI__ConvertColor2Index+0x198>
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e7e4      	b.n	800a7be <GUI__ConvertColor2Index+0x162>
 800a7f4:	f854 0b04 	ldr.w	r0, [r4], #4
 800a7f8:	47b0      	blx	r6
 800a7fa:	3d01      	subs	r5, #1
 800a7fc:	f828 0b02 	strh.w	r0, [r8], #2
 800a800:	d1f8      	bne.n	800a7f4 <GUI__ConvertColor2Index+0x198>
 800a802:	e7e6      	b.n	800a7d2 <GUI__ConvertColor2Index+0x176>

0800a804 <GUI__CompactPixelIndicesEx>:
 800a804:	b513      	push	{r0, r1, r4, lr}
 800a806:	2400      	movs	r4, #0
 800a808:	9400      	str	r4, [sp, #0]
 800a80a:	f7ff ff27 	bl	800a65c <GUI__ConvertColor2Index>
 800a80e:	b002      	add	sp, #8
 800a810:	bd10      	pop	{r4, pc}

0800a812 <GUI_CalcColorDist>:
 800a812:	b2cb      	uxtb	r3, r1
 800a814:	b2c2      	uxtb	r2, r0
 800a816:	1ad2      	subs	r2, r2, r3
 800a818:	b292      	uxth	r2, r2
 800a81a:	b293      	uxth	r3, r2
 800a81c:	b530      	push	{r4, r5, lr}
 800a81e:	041c      	lsls	r4, r3, #16
 800a820:	bf48      	it	mi
 800a822:	4253      	negmi	r3, r2
 800a824:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800a828:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800a82c:	ebc5 0202 	rsb	r2, r5, r2
 800a830:	bf48      	it	mi
 800a832:	b29b      	uxthmi	r3, r3
 800a834:	b292      	uxth	r2, r2
 800a836:	0c09      	lsrs	r1, r1, #16
 800a838:	fb13 f403 	smulbb	r4, r3, r3
 800a83c:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800a840:	b293      	uxth	r3, r2
 800a842:	041d      	lsls	r5, r3, #16
 800a844:	b289      	uxth	r1, r1
 800a846:	b288      	uxth	r0, r1
 800a848:	bf44      	itt	mi
 800a84a:	4253      	negmi	r3, r2
 800a84c:	b29b      	uxthmi	r3, r3
 800a84e:	0402      	lsls	r2, r0, #16
 800a850:	bf48      	it	mi
 800a852:	4248      	negmi	r0, r1
 800a854:	fb13 4303 	smlabb	r3, r3, r3, r4
 800a858:	bf48      	it	mi
 800a85a:	b280      	uxthmi	r0, r0
 800a85c:	fb00 3000 	mla	r0, r0, r0, r3
 800a860:	bd30      	pop	{r4, r5, pc}

0800a862 <WM__GetPrevSibling>:
 800a862:	b538      	push	{r3, r4, r5, lr}
 800a864:	4605      	mov	r5, r0
 800a866:	f000 f80f 	bl	800a888 <WM__GetFirstSibling>
 800a86a:	4604      	mov	r4, r0
 800a86c:	b154      	cbz	r4, 800a884 <WM__GetPrevSibling+0x22>
 800a86e:	42ac      	cmp	r4, r5
 800a870:	d007      	beq.n	800a882 <WM__GetPrevSibling+0x20>
 800a872:	4620      	mov	r0, r4
 800a874:	f7fd f9d8 	bl	8007c28 <GUI_ALLOC_h2p>
 800a878:	6a03      	ldr	r3, [r0, #32]
 800a87a:	42ab      	cmp	r3, r5
 800a87c:	d002      	beq.n	800a884 <WM__GetPrevSibling+0x22>
 800a87e:	461c      	mov	r4, r3
 800a880:	e7f4      	b.n	800a86c <WM__GetPrevSibling+0xa>
 800a882:	2400      	movs	r4, #0
 800a884:	4620      	mov	r0, r4
 800a886:	bd38      	pop	{r3, r4, r5, pc}

0800a888 <WM__GetFirstSibling>:
 800a888:	b508      	push	{r3, lr}
 800a88a:	f7ff fb99 	bl	8009fc0 <WM_GetParent>
 800a88e:	b118      	cbz	r0, 800a898 <WM__GetFirstSibling+0x10>
 800a890:	f7fd f9ca 	bl	8007c28 <GUI_ALLOC_h2p>
 800a894:	69c0      	ldr	r0, [r0, #28]
 800a896:	bd08      	pop	{r3, pc}
 800a898:	bd08      	pop	{r3, pc}
	...

0800a89c <__libc_init_array>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4e0d      	ldr	r6, [pc, #52]	; (800a8d4 <__libc_init_array+0x38>)
 800a8a0:	4c0d      	ldr	r4, [pc, #52]	; (800a8d8 <__libc_init_array+0x3c>)
 800a8a2:	1ba4      	subs	r4, r4, r6
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	2500      	movs	r5, #0
 800a8a8:	42a5      	cmp	r5, r4
 800a8aa:	d109      	bne.n	800a8c0 <__libc_init_array+0x24>
 800a8ac:	4e0b      	ldr	r6, [pc, #44]	; (800a8dc <__libc_init_array+0x40>)
 800a8ae:	4c0c      	ldr	r4, [pc, #48]	; (800a8e0 <__libc_init_array+0x44>)
 800a8b0:	f000 f846 	bl	800a940 <_init>
 800a8b4:	1ba4      	subs	r4, r4, r6
 800a8b6:	10a4      	asrs	r4, r4, #2
 800a8b8:	2500      	movs	r5, #0
 800a8ba:	42a5      	cmp	r5, r4
 800a8bc:	d105      	bne.n	800a8ca <__libc_init_array+0x2e>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8c4:	4798      	blx	r3
 800a8c6:	3501      	adds	r5, #1
 800a8c8:	e7ee      	b.n	800a8a8 <__libc_init_array+0xc>
 800a8ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8ce:	4798      	blx	r3
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	e7f2      	b.n	800a8ba <__libc_init_array+0x1e>
 800a8d4:	0800b298 	.word	0x0800b298
 800a8d8:	0800b298 	.word	0x0800b298
 800a8dc:	0800b298 	.word	0x0800b298
 800a8e0:	0800b29c 	.word	0x0800b29c

0800a8e4 <memcpy>:
 800a8e4:	b510      	push	{r4, lr}
 800a8e6:	1e43      	subs	r3, r0, #1
 800a8e8:	440a      	add	r2, r1
 800a8ea:	4291      	cmp	r1, r2
 800a8ec:	d100      	bne.n	800a8f0 <memcpy+0xc>
 800a8ee:	bd10      	pop	{r4, pc}
 800a8f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f8:	e7f7      	b.n	800a8ea <memcpy+0x6>

0800a8fa <memmove>:
 800a8fa:	4288      	cmp	r0, r1
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	eb01 0302 	add.w	r3, r1, r2
 800a902:	d803      	bhi.n	800a90c <memmove+0x12>
 800a904:	1e42      	subs	r2, r0, #1
 800a906:	4299      	cmp	r1, r3
 800a908:	d10c      	bne.n	800a924 <memmove+0x2a>
 800a90a:	bd10      	pop	{r4, pc}
 800a90c:	4298      	cmp	r0, r3
 800a90e:	d2f9      	bcs.n	800a904 <memmove+0xa>
 800a910:	1881      	adds	r1, r0, r2
 800a912:	1ad2      	subs	r2, r2, r3
 800a914:	42d3      	cmn	r3, r2
 800a916:	d100      	bne.n	800a91a <memmove+0x20>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a91e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a922:	e7f7      	b.n	800a914 <memmove+0x1a>
 800a924:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a928:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a92c:	e7eb      	b.n	800a906 <memmove+0xc>

0800a92e <memset>:
 800a92e:	4402      	add	r2, r0
 800a930:	4603      	mov	r3, r0
 800a932:	4293      	cmp	r3, r2
 800a934:	d100      	bne.n	800a938 <memset+0xa>
 800a936:	4770      	bx	lr
 800a938:	f803 1b01 	strb.w	r1, [r3], #1
 800a93c:	e7f9      	b.n	800a932 <memset+0x4>
	...

0800a940 <_init>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr

0800a94c <_fini>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	bf00      	nop
 800a950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a952:	bc08      	pop	{r3}
 800a954:	469e      	mov	lr, r3
 800a956:	4770      	bx	lr
