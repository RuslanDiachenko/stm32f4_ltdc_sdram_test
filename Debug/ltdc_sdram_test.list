
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cedc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  0800d08c  0800d08c  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da18  0800da18  0001da18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da20  0800da20  0001da20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da24  0800da24  0001da24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  20000000  0800da28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
  8 .bss          00027360  20000064  20000064  00020064  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200273c4  200273c4  00020064  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b0d5  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004653  00000000  00000000  0004b169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001558  00000000  00000000  0004f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001380  00000000  00000000  00050d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ada7  00000000  00000000  00052098  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008d2f  00000000  00000000  0005ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00065b6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057b4  00000000  00000000  00065c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d074 	.word	0x0800d074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800d074 	.word	0x0800d074

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f947 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	200f      	movs	r0, #15
 8000530:	f000 f808 	bl	8000544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f007 f8e2 	bl	80076fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x54>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x58>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f95f 	bl	8000826 <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
 8000570:	e00e      	b.n	8000590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d80a      	bhi.n	800058e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000580:	f000 f927 	bl	80007d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_InitTick+0x5c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	e000      	b.n	8000590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000060 	.word	0x20000060
 800059c:	20000054 	.word	0x20000054
 80005a0:	20000050 	.word	0x20000050

080005a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x20>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x24>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_IncTick+0x24>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000054 	.word	0x20000054
 80005c8:	20004034 	.word	0x20004034

080005cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <HAL_GetTick+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20004034 	.word	0x20004034

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff ffee 	bl	80005cc <HAL_GetTick>
 80005f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005fc:	d005      	beq.n	800060a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_Delay+0x40>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060a:	bf00      	nop
 800060c:	f7ff ffde 	bl	80005cc <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f7      	bcc.n	800060c <HAL_Delay+0x28>
  {
  }
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000054 	.word	0x20000054

08000628 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000696:	4909      	ldr	r1, [pc, #36]	; (80006bc <NVIC_EnableIRQ+0x30>)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	095b      	lsrs	r3, r3, #5
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	f002 021f 	and.w	r2, r2, #31
 80006a4:	2001      	movs	r0, #1
 80006a6:	fa00 f202 	lsl.w	r2, r0, r2
 80006aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da0b      	bge.n	80006ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	490d      	ldr	r1, [pc, #52]	; (800070c <NVIC_SetPriority+0x4c>)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	3b04      	subs	r3, #4
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ea:	e009      	b.n	8000700 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	4908      	ldr	r1, [pc, #32]	; (8000710 <NVIC_SetPriority+0x50>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	e000e100 	.word	0xe000e100

08000714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f1c3 0307 	rsb	r3, r3, #7
 800072e:	2b04      	cmp	r3, #4
 8000730:	bf28      	it	cs
 8000732:	2304      	movcs	r3, #4
 8000734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3304      	adds	r3, #4
 800073a:	2b06      	cmp	r3, #6
 800073c:	d902      	bls.n	8000744 <NVIC_EncodePriority+0x30>
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3b03      	subs	r3, #3
 8000742:	e000      	b.n	8000746 <NVIC_EncodePriority+0x32>
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	2201      	movs	r2, #1
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	401a      	ands	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800075a:	2101      	movs	r1, #1
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	1e59      	subs	r1, r3, #1
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	4313      	orrs	r3, r2
         );
}
 800076a:	4618      	mov	r0, r3
 800076c:	3724      	adds	r7, #36	; 0x24
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000788:	d301      	bcc.n	800078e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078a:	2301      	movs	r3, #1
 800078c:	e00f      	b.n	80007ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <SysTick_Config+0x40>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000796:	210f      	movs	r1, #15
 8000798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800079c:	f7ff ff90 	bl	80006c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x40>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Config+0x40>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff2f 	bl	8000628 <NVIC_SetPriorityGrouping>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e4:	f7ff ff44 	bl	8000670 <NVIC_GetPriorityGrouping>
 80007e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	6978      	ldr	r0, [r7, #20]
 80007f0:	f7ff ff90 	bl	8000714 <NVIC_EncodePriority>
 80007f4:	4602      	mov	r2, r0
 80007f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff5f 	bl	80006c0 <NVIC_SetPriority>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff37 	bl	800068c <NVIC_EnableIRQ>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffa2 	bl	8000778 <SysTick_Config>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d101      	bne.n	8000850 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e03b      	b.n	80008c8 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d106      	bne.n	800086a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f003 fa63 	bl	8003d30 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2202      	movs	r2, #2
 800086e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	6852      	ldr	r2, [r2, #4]
 8000884:	430a      	orrs	r2, r1
 8000886:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000892:	f022 0107 	bic.w	r1, r2, #7
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	6892      	ldr	r2, [r2, #8]
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	68c9      	ldr	r1, [r1, #12]
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2201      	movs	r2, #1
 80008c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d026      	beq.n	8000940 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d021      	beq.n	8000940 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800090a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000910:	f043 0201 	orr.w	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2201      	movs	r2, #1
 800091e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2204      	movs	r2, #4
 8000924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d003      	beq.n	8000940 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0320 	and.w	r3, r3, #32
 8000946:	2b00      	cmp	r3, #0
 8000948:	d026      	beq.n	8000998 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d021      	beq.n	8000998 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	6812      	ldr	r2, [r2, #0]
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000962:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2220      	movs	r2, #32
 800096a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000970:	f043 0202 	orr.w	r2, r3, #2
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2204      	movs	r2, #4
 800097c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d026      	beq.n	80009f0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d021      	beq.n	80009f0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2208      	movs	r2, #8
 80009c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c8:	f043 0204 	orr.w	r2, r3, #4
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2204      	movs	r2, #4
 80009d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d013      	beq.n	8000a22 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00e      	beq.n	8000a22 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f853 	bl	8000ac8 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d024      	beq.n	8000a76 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d01f      	beq.n	8000a76 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d01f      	beq.n	8000ac0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d01a      	beq.n	8000ac0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a98:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f80e 	bl	8000adc <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	e177      	b.n	8000dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 8166 	bne.w	8000df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x4a>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b12      	cmp	r3, #18
 8000b38:	d123      	bne.n	8000b82 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3208      	adds	r2, #8
 8000b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	08da      	lsrs	r2, r3, #3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3208      	adds	r2, #8
 8000b7c:	69b9      	ldr	r1, [r7, #24]
 8000b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4013      	ands	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0203 	and.w	r2, r3, #3
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_GPIO_Init+0xe6>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bca:	2b11      	cmp	r3, #17
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d130      	bne.n	8000c38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4013      	ands	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	f003 0201 	and.w	r2, r3, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80c0 	beq.w	8000df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4a65      	ldr	r2, [pc, #404]	; (8000e10 <HAL_GPIO_Init+0x320>)
 8000c7c:	4b64      	ldr	r3, [pc, #400]	; (8000e10 <HAL_GPIO_Init+0x320>)
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <HAL_GPIO_Init+0x320>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c92:	4a60      	ldr	r2, [pc, #384]	; (8000e14 <HAL_GPIO_Init+0x324>)
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <HAL_GPIO_Init+0x328>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <HAL_GPIO_Init+0x23e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a56      	ldr	r2, [pc, #344]	; (8000e1c <HAL_GPIO_Init+0x32c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d031      	beq.n	8000d2a <HAL_GPIO_Init+0x23a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a55      	ldr	r2, [pc, #340]	; (8000e20 <HAL_GPIO_Init+0x330>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02b      	beq.n	8000d26 <HAL_GPIO_Init+0x236>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a54      	ldr	r2, [pc, #336]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d025      	beq.n	8000d22 <HAL_GPIO_Init+0x232>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a53      	ldr	r2, [pc, #332]	; (8000e28 <HAL_GPIO_Init+0x338>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01f      	beq.n	8000d1e <HAL_GPIO_Init+0x22e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a52      	ldr	r2, [pc, #328]	; (8000e2c <HAL_GPIO_Init+0x33c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d019      	beq.n	8000d1a <HAL_GPIO_Init+0x22a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <HAL_GPIO_Init+0x340>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0x226>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a50      	ldr	r2, [pc, #320]	; (8000e34 <HAL_GPIO_Init+0x344>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <HAL_GPIO_Init+0x222>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4f      	ldr	r2, [pc, #316]	; (8000e38 <HAL_GPIO_Init+0x348>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0x21e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <HAL_GPIO_Init+0x34c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x21a>
 8000d06:	2309      	movs	r3, #9
 8000d08:	e012      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	e010      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d0e:	2308      	movs	r3, #8
 8000d10:	e00e      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d12:	2307      	movs	r3, #7
 8000d14:	e00c      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d16:	2306      	movs	r3, #6
 8000d18:	e00a      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	e008      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e006      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e004      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d26:	2302      	movs	r3, #2
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <HAL_GPIO_Init+0x240>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	f002 0203 	and.w	r2, r2, #3
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4093      	lsls	r3, r2
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d40:	4934      	ldr	r1, [pc, #208]	; (8000e14 <HAL_GPIO_Init+0x324>)
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3302      	adds	r3, #2
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d72:	4a33      	ldr	r2, [pc, #204]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <HAL_GPIO_Init+0x350>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	f67f ae84 	bls.w	8000b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e04:	bf00      	nop
 8000e06:	3724      	adds	r7, #36	; 0x24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40021400 	.word	0x40021400
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40021c00 	.word	0x40021c00
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	40022400 	.word	0x40022400
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0c8      	b.n	8001024 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f006 fc54 	bl	8007754 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2224      	movs	r2, #36	; 0x24
 8000eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ec4:	f002 f97a 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8000ec8:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	4a57      	ldr	r2, [pc, #348]	; (800102c <HAL_I2C_Init+0x1b4>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	4952      	ldr	r1, [pc, #328]	; (8001030 <HAL_I2C_Init+0x1b8>)
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d802      	bhi.n	8000ef2 <HAL_I2C_Init+0x7a>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	e009      	b.n	8000f06 <HAL_I2C_Init+0x8e>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	494d      	ldr	r1, [pc, #308]	; (8001034 <HAL_I2C_Init+0x1bc>)
 8000efe:	fba1 1303 	umull	r1, r3, r1, r3
 8000f02:	099b      	lsrs	r3, r3, #6
 8000f04:	3301      	adds	r3, #1
 8000f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a47      	ldr	r2, [pc, #284]	; (8001030 <HAL_I2C_Init+0x1b8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d812      	bhi.n	8000f3c <HAL_I2C_Init+0xc4>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d906      	bls.n	8000f38 <HAL_I2C_Init+0xc0>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	e045      	b.n	8000fc4 <HAL_I2C_Init+0x14c>
 8000f38:	2304      	movs	r3, #4
 8000f3a:	e043      	b.n	8000fc4 <HAL_I2C_Init+0x14c>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10f      	bne.n	8000f64 <HAL_I2C_Init+0xec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	e010      	b.n	8000f86 <HAL_I2C_Init+0x10e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009a      	lsls	r2, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_I2C_Init+0x116>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e01a      	b.n	8000fc4 <HAL_I2C_Init+0x14c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10a      	bne.n	8000fac <HAL_I2C_Init+0x134>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	e00b      	b.n	8000fc4 <HAL_I2C_Init+0x14c>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009a      	lsls	r2, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	69d1      	ldr	r1, [r2, #28]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6a12      	ldr	r2, [r2, #32]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6911      	ldr	r1, [r2, #16]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68d2      	ldr	r2, [r2, #12]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6951      	ldr	r1, [r2, #20]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6992      	ldr	r2, [r2, #24]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2220      	movs	r2, #32
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	431bde83 	.word	0x431bde83
 8001030:	000186a0 	.word	0x000186a0
 8001034:	10624dd3 	.word	0x10624dd3

08001038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	817b      	strh	r3, [r7, #10]
 8001048:	4613      	mov	r3, r2
 800104a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001050:	f7ff fabc 	bl	80005cc <HAL_GetTick>
 8001054:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b20      	cmp	r3, #32
 8001060:	f040 80ee 	bne.w	8001240 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2319      	movs	r3, #25
 800106a:	2201      	movs	r2, #1
 800106c:	4977      	ldr	r1, [pc, #476]	; (800124c <HAL_I2C_Master_Transmit+0x214>)
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 fc6c 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800107a:	2302      	movs	r3, #2
 800107c:	e0e1      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_I2C_Master_Transmit+0x54>
 8001088:	2302      	movs	r3, #2
 800108a:	e0da      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d007      	beq.n	80010b2 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	f042 0201 	orr.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2221      	movs	r2, #33	; 0x21
 80010c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2210      	movs	r2, #16
 80010ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	893a      	ldrh	r2, [r7, #8]
 80010e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4a5a      	ldr	r2, [pc, #360]	; (8001250 <HAL_I2C_Master_Transmit+0x218>)
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010f4:	8979      	ldrh	r1, [r7, #10]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	6a3a      	ldr	r2, [r7, #32]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 fadc 	bl	80016b8 <I2C_MasterRequestWrite>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00f      	beq.n	8001126 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b04      	cmp	r3, #4
 800110c:	d105      	bne.n	800111a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e093      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e08d      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800113c:	e066      	b.n	800120c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	6a39      	ldr	r1, [r7, #32]
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 fcc1 	bl	8001aca <I2C_WaitOnTXEFlagUntilTimeout>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00f      	beq.n	800116e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b04      	cmp	r3, #4
 8001154:	d109      	bne.n	800116a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001164:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06b      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e069      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	1c58      	adds	r0, r3, #1
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	6248      	str	r0, [r1, #36]	; 0x24
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d119      	bne.n	80011dc <HAL_I2C_Master_Transmit+0x1a4>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d015      	beq.n	80011dc <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	1c58      	adds	r0, r3, #1
 80011ba:	68f9      	ldr	r1, [r7, #12]
 80011bc:	6248      	str	r0, [r1, #36]	; 0x24
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	6a39      	ldr	r1, [r7, #32]
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 fcaf 	bl	8001b44 <I2C_WaitOnBTFFlagUntilTimeout>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00f      	beq.n	800120c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d109      	bne.n	8001208 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001202:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e01c      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e01a      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d194      	bne.n	800113e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2220      	movs	r2, #32
 8001228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001240:	2302      	movs	r3, #2
  }
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	00100002 	.word	0x00100002
 8001250:	ffff0000 	.word	0xffff0000

08001254 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	817b      	strh	r3, [r7, #10]
 8001264:	4613      	mov	r3, r2
 8001266:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800126c:	f7ff f9ae 	bl	80005cc <HAL_GetTick>
 8001270:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b20      	cmp	r3, #32
 800127c:	f040 8215 	bne.w	80016aa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2319      	movs	r3, #25
 8001286:	2201      	movs	r2, #1
 8001288:	4985      	ldr	r1, [pc, #532]	; (80014a0 <HAL_I2C_Master_Receive+0x24c>)
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 fb5e 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001296:	2302      	movs	r3, #2
 8001298:	e208      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_I2C_Master_Receive+0x54>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e201      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d007      	beq.n	80012ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2222      	movs	r2, #34	; 0x22
 80012e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2210      	movs	r2, #16
 80012ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	893a      	ldrh	r2, [r7, #8]
 80012fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a68      	ldr	r2, [pc, #416]	; (80014a4 <HAL_I2C_Master_Receive+0x250>)
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001310:	8979      	ldrh	r1, [r7, #10]
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 fa50 	bl	80017bc <I2C_MasterRequestRead>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00f      	beq.n	8001342 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b04      	cmp	r3, #4
 8001328:	d105      	bne.n	8001336 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1ba      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1b4      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001346:	2b00      	cmp	r3, #0
 8001348:	d113      	bne.n	8001372 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e188      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001376:	2b01      	cmp	r3, #1
 8001378:	d11b      	bne.n	80013b2 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e168      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d11b      	bne.n	80013f2 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	e148      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001400:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001418:	e134      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141e:	2b03      	cmp	r3, #3
 8001420:	f200 80eb 	bhi.w	80015fa <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	2b01      	cmp	r3, #1
 800142a:	d127      	bne.n	800147c <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 fbc4 	bl	8001bbe <I2C_WaitOnRXNEFlagUntilTimeout>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	2b20      	cmp	r3, #32
 8001442:	d101      	bne.n	8001448 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e131      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e12f      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	1c59      	adds	r1, r3, #1
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6251      	str	r1, [r2, #36]	; 0x24
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	6912      	ldr	r2, [r2, #16]
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001464:	3b01      	subs	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001470:	b29b      	uxth	r3, r3
 8001472:	3b01      	subs	r3, #1
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	855a      	strh	r2, [r3, #42]	; 0x2a
 800147a:	e103      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001480:	2b02      	cmp	r3, #2
 8001482:	d14a      	bne.n	800151a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148a:	2200      	movs	r2, #0
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <HAL_I2C_Master_Receive+0x254>)
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fa5c 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d008      	beq.n	80014ac <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e106      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
 800149e:	bf00      	nop
 80014a0:	00100002 	.word	0x00100002
 80014a4:	ffff0000 	.word	0xffff0000
 80014a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	1c59      	adds	r1, r3, #1
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	6251      	str	r1, [r2, #36]	; 0x24
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	6912      	ldr	r2, [r2, #16]
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	6251      	str	r1, [r2, #36]	; 0x24
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6912      	ldr	r2, [r2, #16]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001518:	e0b4      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001520:	2200      	movs	r2, #0
 8001522:	4964      	ldr	r1, [pc, #400]	; (80016b4 <HAL_I2C_Master_Receive+0x460>)
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fa11 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0bb      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c59      	adds	r1, r3, #1
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	6251      	str	r1, [r2, #36]	; 0x24
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	6912      	ldr	r2, [r2, #16]
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	3b01      	subs	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001578:	2200      	movs	r2, #0
 800157a:	494e      	ldr	r1, [pc, #312]	; (80016b4 <HAL_I2C_Master_Receive+0x460>)
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 f9e5 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e08f      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	1c59      	adds	r1, r3, #1
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6251      	str	r1, [r2, #36]	; 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	6912      	ldr	r2, [r2, #16]
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	1c59      	adds	r1, r3, #1
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6251      	str	r1, [r2, #36]	; 0x24
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	6912      	ldr	r2, [r2, #16]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015f8:	e044      	b.n	8001684 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fadd 	bl	8001bbe <I2C_WaitOnRXNEFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b20      	cmp	r3, #32
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e04a      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e048      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	6251      	str	r1, [r2, #36]	; 0x24
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	6912      	ldr	r2, [r2, #16]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b04      	cmp	r3, #4
 8001654:	d116      	bne.n	8001684 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	6251      	str	r1, [r2, #36]	; 0x24
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	6912      	ldr	r2, [r2, #16]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	2b00      	cmp	r3, #0
 800168a:	f47f aec6 	bne.w	800141a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	00010004 	.word	0x00010004

080016b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	460b      	mov	r3, r1
 80016c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d006      	beq.n	80016e2 <I2C_MasterRequestWrite+0x2a>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d003      	beq.n	80016e2 <I2C_MasterRequestWrite+0x2a>
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016e0:	d108      	bne.n	80016f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e00b      	b.n	800170c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d107      	bne.n	800170c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f917 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e040      	b.n	80017aa <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001730:	d107      	bne.n	8001742 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	897a      	ldrh	r2, [r7, #10]
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	e021      	b.n	8001786 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	897a      	ldrh	r2, [r7, #10]
 8001748:	11d2      	asrs	r2, r2, #7
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 0206 	and.w	r2, r2, #6
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f062 020f 	orn	r2, r2, #15
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4915      	ldr	r1, [pc, #84]	; (80017b4 <I2C_MasterRequestWrite+0xfc>)
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f944 	bl	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	2b04      	cmp	r3, #4
 8001772:	d101      	bne.n	8001778 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e018      	b.n	80017aa <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e016      	b.n	80017aa <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	897a      	ldrh	r2, [r7, #10]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	490b      	ldr	r1, [pc, #44]	; (80017b8 <I2C_MasterRequestWrite+0x100>)
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f92e 	bl	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2b04      	cmp	r3, #4
 800179e:	d101      	bne.n	80017a4 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e002      	b.n	80017aa <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e000      	b.n	80017aa <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	00010008 	.word	0x00010008
 80017b8:	00010002 	.word	0x00010002

080017bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	460b      	mov	r3, r1
 80017ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d006      	beq.n	80017f6 <I2C_MasterRequestRead+0x3a>
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d003      	beq.n	80017f6 <I2C_MasterRequestRead+0x3a>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017f4:	d108      	bne.n	8001808 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e00b      	b.n	8001820 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b11      	cmp	r3, #17
 800180e:	d107      	bne.n	8001820 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f88d 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e07f      	b.n	800193c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001844:	d108      	bne.n	8001858 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	897a      	ldrh	r2, [r7, #10]
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	e05f      	b.n	8001918 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	897a      	ldrh	r2, [r7, #10]
 800185e:	11d2      	asrs	r2, r2, #7
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f002 0206 	and.w	r2, r2, #6
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f062 020f 	orn	r2, r2, #15
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4933      	ldr	r1, [pc, #204]	; (8001944 <I2C_MasterRequestRead+0x188>)
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f8b9 	bl	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b04      	cmp	r3, #4
 8001888:	d101      	bne.n	800188e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e056      	b.n	800193c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e054      	b.n	800193c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	897a      	ldrh	r2, [r7, #10]
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4929      	ldr	r1, [pc, #164]	; (8001948 <I2C_MasterRequestRead+0x18c>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f8a3 	bl	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d101      	bne.n	80018ba <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e040      	b.n	800193c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e03e      	b.n	800193c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f82b 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e01d      	b.n	800193c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	897a      	ldrh	r2, [r7, #10]
 8001906:	11d2      	asrs	r2, r2, #7
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f002 0206 	and.w	r2, r2, #6
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f062 020e 	orn	r2, r2, #14
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	490a      	ldr	r1, [pc, #40]	; (8001948 <I2C_MasterRequestRead+0x18c>)
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f865 	bl	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b04      	cmp	r3, #4
 8001930:	d101      	bne.n	8001936 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e002      	b.n	800193c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e000      	b.n	800193c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	00010008 	.word	0x00010008
 8001948:	00010002 	.word	0x00010002

0800194c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800195c:	e01f      	b.n	800199e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001964:	d01b      	beq.n	800199e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <I2C_WaitOnFlagUntilTimeout+0x30>
 800196c:	f7fe fe2e 	bl	80005cc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d910      	bls.n	800199e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e023      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10d      	bne.n	80019c4 <I2C_WaitOnFlagUntilTimeout+0x78>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4013      	ands	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	e00c      	b.n	80019de <I2C_WaitOnFlagUntilTimeout+0x92>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4013      	ands	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d0bc      	beq.n	800195e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019fc:	e040      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0c:	d11c      	bne.n	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a26:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e03c      	b.n	8001ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4e:	d017      	beq.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001a56:	f7fe fdb9 	bl	80005cc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	1ad2      	subs	r2, r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d90c      	bls.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e020      	b.n	8001ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	0c1b      	lsrs	r3, r3, #16
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e00b      	b.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d19e      	bne.n	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ad6:	e029      	b.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8ba 	bl	8001c52 <I2C_IsAcknowledgeFailed>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e029      	b.n	8001b3c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aee:	d01d      	beq.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001af6:	f7fe fd69 	bl	80005cc <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d912      	bls.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e007      	b.n	8001b3c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b36:	2b80      	cmp	r3, #128	; 0x80
 8001b38:	d1ce      	bne.n	8001ad8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b50:	e029      	b.n	8001ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f87d 	bl	8001c52 <I2C_IsAcknowledgeFailed>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e029      	b.n	8001bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b68:	d01d      	beq.n	8001ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b70:	f7fe fd2c 	bl	80005cc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d912      	bls.n	8001ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e007      	b.n	8001bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d1ce      	bne.n	8001b52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bca:	e036      	b.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d114      	bne.n	8001c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0210 	mvn.w	r2, #16
 8001be2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e022      	b.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8001c0a:	f7fe fcdf 	bl	80005cc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1ad2      	subs	r2, r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90f      	bls.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e007      	b.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d1c1      	bne.n	8001bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d114      	bne.n	8001c94 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c72:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2204      	movs	r2, #4
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d129      	bne.n	8001d0c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	; 0x24
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cda:	f022 0210 	bic.w	r2, r2, #16
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d12a      	bne.n	8001d8a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	f023 030f 	bic.w	r3, r3, #15
 8001d5a:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	89fa      	ldrh	r2, [r7, #14]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 8001d8a:	2302      	movs	r3, #2
  }
}  
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0bf      	b.n	8001f32 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f001 ffcc 	bl	8003d64 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	6992      	ldr	r2, [r2, #24]
 8001dde:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001de2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	6991      	ldr	r1, [r2, #24]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6850      	ldr	r0, [r2, #4]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6892      	ldr	r2, [r2, #8]
 8001df6:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001dfc:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6912      	ldr	r2, [r2, #16]
 8001e02:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001e04:	430a      	orrs	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_LTDC_Init+0x1a4>)
 8001e14:	400b      	ands	r3, r1
 8001e16:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	6891      	ldr	r1, [r2, #8]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6990      	ldr	r0, [r2, #24]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4302      	orrs	r2, r0
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68d9      	ldr	r1, [r3, #12]
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_LTDC_Init+0x1a4>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	68d1      	ldr	r1, [r2, #12]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6a10      	ldr	r0, [r2, #32]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4302      	orrs	r2, r0
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_LTDC_Init+0x1a4>)
 8001e70:	400b      	ands	r3, r1
 8001e72:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	6911      	ldr	r1, [r2, #16]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4302      	orrs	r2, r0
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6959      	ldr	r1, [r3, #20]
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_LTDC_Init+0x1a4>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	6951      	ldr	r1, [r2, #20]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4302      	orrs	r2, r0
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ede:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4302      	orrs	r2, r0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001efa:	4302      	orrs	r2, r0
 8001efc:	430a      	orrs	r2, r1
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f0a:	f042 0206 	orr.w	r2, r2, #6
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	6992      	ldr	r2, [r2, #24]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	f000f800 	.word	0xf000f800

08001f40 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 ffdb 	bl	8003f04 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <HAL_LTDC_IRQHandler+0x6a>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01e      	beq.n	8001fda <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f86f 	bl	80020b8 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_LTDC_IRQHandler+0xbc>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01e      	beq.n	800202c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ff8:	f022 0202 	bic.w	r2, r2, #2
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2202      	movs	r2, #2
 8002004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800200c:	f043 0202 	orr.w	r2, r3, #2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f846 	bl	80020b8 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01b      	beq.n	800206e <HAL_LTDC_IRQHandler+0xfe>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d016      	beq.n	800206e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f001 ff63 	bl	8003f34 <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_LTDC_IRQHandler+0x140>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2208      	movs	r2, #8
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f80e 	bl	80020cc <HAL_LTDC_ReloadEventCallback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_LTDC_ConfigLayer+0x1a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e02c      	b.n	8002154 <HAL_LTDC_ConfigLayer+0x74>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2134      	movs	r1, #52	; 0x34
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fa63 	bl	8002600 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bdb0      	pop	{r4, r5, r7, pc}

0800215c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_LTDC_ConfigColorKeying+0x1a>
 8002172:	2302      	movs	r3, #2
 8002174:	e031      	b.n	80021da <HAL_LTDC_ConfigColorKeying+0x7e>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	4413      	add	r3, r2
 8002192:	3384      	adds	r3, #132	; 0x84
 8002194:	461a      	mov	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	440b      	add	r3, r1
 80021a2:	3384      	adds	r3, #132	; 0x84
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021aa:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	01db      	lsls	r3, r3, #7
 80021b6:	4413      	add	r3, r2
 80021b8:	3384      	adds	r3, #132	; 0x84
 80021ba:	461a      	mov	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b089      	sub	sp, #36	; 0x24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_LTDC_ConfigCLUT+0x28>
 800220a:	2302      	movs	r3, #2
 800220c:	e059      	b.n	80022c2 <HAL_LTDC_ConfigCLUT+0xdc>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e041      	b.n	80022a8 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2134      	movs	r1, #52	; 0x34
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3348      	adds	r3, #72	; 0x48
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b06      	cmp	r3, #6
 8002236:	d114      	bne.n	8002262 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	061a      	lsls	r2, r3, #24
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	431a      	orrs	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002252:	431a      	orrs	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800225c:	4313      	orrs	r3, r2
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	e010      	b.n	8002284 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	061a      	lsls	r2, r3, #24
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	431a      	orrs	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002276:	431a      	orrs	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002280:	4313      	orrs	r3, r2
 8002282:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3304      	adds	r3, #4
 8002288:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	4413      	add	r3, r2
 800229a:	3384      	adds	r3, #132	; 0x84
 800229c:	461a      	mov	r2, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3b9      	bcc.n	8002224 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_LTDC_EnableColorKeying+0x18>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e027      	b.n	8002336 <HAL_LTDC_EnableColorKeying+0x68>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	01db      	lsls	r3, r3, #7
 8002300:	4413      	add	r3, r2
 8002302:	3384      	adds	r3, #132	; 0x84
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	01db      	lsls	r3, r3, #7
 8002310:	440b      	add	r3, r1
 8002312:	3384      	adds	r3, #132	; 0x84
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_LTDC_DisableColorKeying+0x18>
 8002356:	2302      	movs	r3, #2
 8002358:	e027      	b.n	80023aa <HAL_LTDC_DisableColorKeying+0x68>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	01db      	lsls	r3, r3, #7
 8002374:	4413      	add	r3, r2
 8002376:	3384      	adds	r3, #132	; 0x84
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4619      	mov	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	01db      	lsls	r3, r3, #7
 8002384:	440b      	add	r3, r1
 8002386:	3384      	adds	r3, #132	; 0x84
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2201      	movs	r2, #1
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_LTDC_EnableCLUT+0x18>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e027      	b.n	800241e <HAL_LTDC_EnableCLUT+0x68>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	01db      	lsls	r3, r3, #7
 80023e8:	4413      	add	r3, r2
 80023ea:	3384      	adds	r3, #132	; 0x84
 80023ec:	461a      	mov	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	01db      	lsls	r3, r3, #7
 80023f8:	440b      	add	r3, r1
 80023fa:	3384      	adds	r3, #132	; 0x84
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_LTDC_SetWindowPosition+0x1c>
 8002442:	2302      	movs	r3, #2
 8002444:	e033      	b.n	80024ae <HAL_LTDC_SetWindowPosition+0x84>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2234      	movs	r2, #52	; 0x34
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	3338      	adds	r3, #56	; 0x38
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	441a      	add	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	441a      	add	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	6979      	ldr	r1, [r7, #20]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8b6 	bl	8002600 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_LTDC_SetAlpha+0x1a>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e024      	b.n	800251a <HAL_LTDC_SetAlpha+0x64>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2234      	movs	r2, #52	; 0x34
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	3338      	adds	r3, #56	; 0x38
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4413      	add	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6979      	ldr	r1, [r7, #20]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f880 	bl	8002600 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_LTDC_SetAddress+0x1a>
 8002538:	2302      	movs	r3, #2
 800253a:	e024      	b.n	8002586 <HAL_LTDC_SetAddress+0x64>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2234      	movs	r2, #52	; 0x34
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	3338      	adds	r3, #56	; 0x38
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f84a 	bl	8002600 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_LTDC_ProgramLineEvent+0x18>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e023      	b.n	80025f0 <HAL_LTDC_ProgramLineEvent+0x60>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_LTDC_ProgramLineEvent+0x6c>)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40016800 	.word	0x40016800

08002600 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	0c1b      	lsrs	r3, r3, #16
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	4413      	add	r3, r2
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	01db      	lsls	r3, r3, #7
 8002638:	4413      	add	r3, r2
 800263a:	3384      	adds	r3, #132	; 0x84
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	440b      	add	r3, r1
 800264a:	3384      	adds	r3, #132	; 0x84
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002652:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	01db      	lsls	r3, r3, #7
 800265e:	4413      	add	r3, r2
 8002660:	3384      	adds	r3, #132	; 0x84
 8002662:	4619      	mov	r1, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	4413      	add	r3, r2
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268c:	4413      	add	r3, r2
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	01db      	lsls	r3, r3, #7
 800269c:	4413      	add	r3, r2
 800269e:	3384      	adds	r3, #132	; 0x84
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	440b      	add	r3, r1
 80026ae:	3384      	adds	r3, #132	; 0x84
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80026b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	01db      	lsls	r3, r3, #7
 80026c2:	4413      	add	r3, r2
 80026c4:	3384      	adds	r3, #132	; 0x84
 80026c6:	4619      	mov	r1, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d6:	4413      	add	r3, r2
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	01db      	lsls	r3, r3, #7
 80026ea:	4413      	add	r3, r2
 80026ec:	3384      	adds	r3, #132	; 0x84
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	01db      	lsls	r3, r3, #7
 80026fa:	440b      	add	r3, r1
 80026fc:	3384      	adds	r3, #132	; 0x84
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f023 0307 	bic.w	r3, r3, #7
 8002704:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	01db      	lsls	r3, r3, #7
 8002710:	4413      	add	r3, r2
 8002712:	3384      	adds	r3, #132	; 0x84
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	01db      	lsls	r3, r3, #7
 8002742:	4413      	add	r3, r2
 8002744:	3384      	adds	r3, #132	; 0x84
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	01db      	lsls	r3, r3, #7
 8002752:	4413      	add	r3, r2
 8002754:	3384      	adds	r3, #132	; 0x84
 8002756:	461a      	mov	r2, r3
 8002758:	2300      	movs	r3, #0
 800275a:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	01db      	lsls	r3, r3, #7
 8002766:	4413      	add	r3, r2
 8002768:	3384      	adds	r3, #132	; 0x84
 800276a:	4619      	mov	r1, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002772:	461a      	mov	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	431a      	orrs	r2, r3
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	431a      	orrs	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	4413      	add	r3, r2
 800278e:	3384      	adds	r3, #132	; 0x84
 8002790:	461a      	mov	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	01db      	lsls	r3, r3, #7
 800279c:	440b      	add	r3, r1
 800279e:	3384      	adds	r3, #132	; 0x84
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	01db      	lsls	r3, r3, #7
 80027b2:	4413      	add	r3, r2
 80027b4:	3384      	adds	r3, #132	; 0x84
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	01db      	lsls	r3, r3, #7
 80027c8:	4413      	add	r3, r2
 80027ca:	3384      	adds	r3, #132	; 0x84
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	440b      	add	r3, r1
 80027da:	3384      	adds	r3, #132	; 0x84
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e2:	f023 0307 	bic.w	r3, r3, #7
 80027e6:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	01db      	lsls	r3, r3, #7
 80027f2:	4413      	add	r3, r2
 80027f4:	3384      	adds	r3, #132	; 0x84
 80027f6:	4619      	mov	r1, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4313      	orrs	r3, r2
 8002802:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	01db      	lsls	r3, r3, #7
 800280e:	4413      	add	r3, r2
 8002810:	3384      	adds	r3, #132	; 0x84
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	4413      	add	r3, r2
 8002820:	3384      	adds	r3, #132	; 0x84
 8002822:	461a      	mov	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	01db      	lsls	r3, r3, #7
 8002832:	4413      	add	r3, r2
 8002834:	3384      	adds	r3, #132	; 0x84
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 8002846:	2304      	movs	r3, #4
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e01b      	b.n	8002884 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d102      	bne.n	800285a <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 8002854:	2303      	movs	r3, #3
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e014      	b.n	8002884 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d00b      	beq.n	800287a <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d007      	beq.n	800287a <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800286e:	2b03      	cmp	r3, #3
 8002870:	d003      	beq.n	800287a <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002876:	2b07      	cmp	r3, #7
 8002878:	d102      	bne.n	8002880 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 800287a:	2302      	movs	r3, #2
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e001      	b.n	8002884 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002880:	2301      	movs	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	01db      	lsls	r3, r3, #7
 800288e:	4413      	add	r3, r2
 8002890:	3384      	adds	r3, #132	; 0x84
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	01db      	lsls	r3, r3, #7
 800289e:	440b      	add	r3, r1
 80028a0:	3384      	adds	r3, #132	; 0x84
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80028a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	01db      	lsls	r3, r3, #7
 80028b4:	4413      	add	r3, r2
 80028b6:	3384      	adds	r3, #132	; 0x84
 80028b8:	4618      	mov	r0, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1acb      	subs	r3, r1, r3
 80028d0:	69f9      	ldr	r1, [r7, #28]
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	3303      	adds	r3, #3
 80028d8:	4313      	orrs	r3, r2
 80028da:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	01db      	lsls	r3, r3, #7
 80028e6:	4413      	add	r3, r2
 80028e8:	3384      	adds	r3, #132	; 0x84
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	01db      	lsls	r3, r3, #7
 80028f6:	440b      	add	r3, r1
 80028f8:	3384      	adds	r3, #132	; 0x84
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002900:	f023 0307 	bic.w	r3, r3, #7
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	4413      	add	r3, r2
 8002912:	3384      	adds	r3, #132	; 0x84
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	01db      	lsls	r3, r3, #7
 8002926:	4413      	add	r3, r2
 8002928:	3384      	adds	r3, #132	; 0x84
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	01db      	lsls	r3, r3, #7
 8002936:	440b      	add	r3, r1
 8002938:	3384      	adds	r3, #132	; 0x84
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800297c:	f7fd fe26 	bl	80005cc <HAL_GetTick>
 8002980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002982:	e009      	b.n	8002998 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002984:	f7fd fe22 	bl	80005cc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002992:	d901      	bls.n	8002998 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e01f      	b.n	80029d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d1ee      	bne.n	8002984 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ac:	f7fd fe0e 	bl	80005cc <HAL_GetTick>
 80029b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029b2:	e009      	b.n	80029c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029b4:	f7fd fe0a 	bl	80005cc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c2:	d901      	bls.n	80029c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e007      	b.n	80029d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029d4:	d1ee      	bne.n	80029b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	420e0040 	.word	0x420e0040
 80029e8:	40007000 	.word	0x40007000
 80029ec:	420e0044 	.word	0x420e0044

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e22d      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d075      	beq.n	8002afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0e:	4ba3      	ldr	r3, [pc, #652]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4ba0      	ldr	r3, [pc, #640]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b9d      	ldr	r3, [pc, #628]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e208      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x74>
 8002a56:	4a91      	ldr	r2, [pc, #580]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	4b90      	ldr	r3, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4a8b      	ldr	r2, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	4b8a      	ldr	r3, [pc, #552]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4a88      	ldr	r2, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	4b87      	ldr	r3, [pc, #540]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a88:	4a84      	ldr	r2, [pc, #528]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4a81      	ldr	r2, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fd fd90 	bl	80005cc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fd fd8c 	bl	80005cc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1cd      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fd fd7c 	bl	80005cc <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fd fd78 	bl	80005cc <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1b9      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b06:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e18d      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4956      	ldr	r1, [pc, #344]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fd fd31 	bl	80005cc <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7fd fd2d 	bl	80005cc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e16e      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4943      	ldr	r1, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fd fd10 	bl	80005cc <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fd fd0c 	bl	80005cc <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e14d      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d030      	beq.n	8002c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fd fcf0 	bl	80005cc <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fd fcec 	bl	80005cc <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e12d      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x200>
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fd fcd9 	bl	80005cc <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fd fcd5 	bl	80005cc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e116      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a0 	beq.w	8002d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fd fc9b 	bl	80005cc <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e011      	b.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	42470000 	.word	0x42470000
 8002ca4:	42470e80 	.word	0x42470e80
 8002ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fd fc8e 	bl	80005cc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0cf      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002cd2:	4a66      	ldr	r2, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002cd4:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x312>
 8002ce8:	4a60      	ldr	r2, [pc, #384]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002cea:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002d02:	4a5a      	ldr	r2, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	4a57      	ldr	r2, [pc, #348]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d10:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fd fc53 	bl	80005cc <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd fc4f 	bl	80005cc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e08e      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x33a>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fd fc3d 	bl	80005cc <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fd fc39 	bl	80005cc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e078      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d80:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d064      	beq.n	8002e5c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d05c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d141      	bne.n	8002e2a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_RCC_OscConfig+0x480>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fd fc0e 	bl	80005cc <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fd fc0a 	bl	80005cc <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e04b      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd2:	4926      	ldr	r1, [pc, #152]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_RCC_OscConfig+0x480>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fd fbe3 	bl	80005cc <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fd fbdf 	bl	80005cc <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e020      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x41a>
 8002e28:	e018      	b.n	8002e5c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_RCC_OscConfig+0x480>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fd fbcc 	bl	80005cc <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fd fbc8 	bl	80005cc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_RCC_OscConfig+0x47c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x448>
 8002e56:	e001      	b.n	8002e5c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470060 	.word	0x42470060

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ca      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b64      	ldr	r3, [pc, #400]	; (8003028 <HAL_RCC_ClockConfig+0x1b4>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b6      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	4b58      	ldr	r3, [pc, #352]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee2:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	494f      	ldr	r1, [pc, #316]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d044      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d119      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07d      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b3e      	ldr	r3, [pc, #248]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06d      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e065      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4936      	ldr	r1, [pc, #216]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 0203 	bic.w	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fd fb32 	bl	80005cc <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fd fb2e 	bl	80005cc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e04d      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCC_ClockConfig+0x1b4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d90c      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <HAL_RCC_ClockConfig+0x1b4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e030      	b.n	800301e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4918      	ldr	r1, [pc, #96]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe6:	4911      	ldr	r1, [pc, #68]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f81d 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	fa21 f303 	lsr.w	r3, r1, r3
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003016:	200f      	movs	r0, #15
 8003018:	f7fd fa94 	bl	8000544 <HAL_InitTick>

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00
 800302c:	40023800 	.word	0x40023800
 8003030:	0800da00 	.word	0x0800da00
 8003034:	20000060 	.word	0x20000060

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003040:	2200      	movs	r2, #0
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	617a      	str	r2, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800304c:	2200      	movs	r2, #0
 800304e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003050:	4a51      	ldr	r2, [pc, #324]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 8003052:	6892      	ldr	r2, [r2, #8]
 8003054:	f002 020c 	and.w	r2, r2, #12
 8003058:	2a04      	cmp	r2, #4
 800305a:	d007      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 800305c:	2a08      	cmp	r2, #8
 800305e:	d008      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x3a>
 8003060:	2a00      	cmp	r2, #0
 8003062:	f040 8090 	bne.w	8003186 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003066:	4b4d      	ldr	r3, [pc, #308]	; (800319c <HAL_RCC_GetSysClockFreq+0x164>)
 8003068:	613b      	str	r3, [r7, #16]
       break;
 800306a:	e08f      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 800306e:	613b      	str	r3, [r7, #16]
      break;
 8003070:	e08c      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003072:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 8003074:	6852      	ldr	r2, [r2, #4]
 8003076:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800307a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307c:	4a46      	ldr	r2, [pc, #280]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 800307e:	6852      	ldr	r2, [r2, #4]
 8003080:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003084:	2a00      	cmp	r2, #0
 8003086:	d023      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	ea03 0301 	and.w	r3, r3, r1
 800309e:	ea04 0402 	and.w	r4, r4, r2
 80030a2:	4a3f      	ldr	r2, [pc, #252]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030a4:	fb02 f104 	mul.w	r1, r2, r4
 80030a8:	2200      	movs	r2, #0
 80030aa:	fb02 f203 	mul.w	r2, r2, r3
 80030ae:	440a      	add	r2, r1
 80030b0:	493b      	ldr	r1, [pc, #236]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030b2:	fba3 0101 	umull	r0, r1, r3, r1
 80030b6:	1853      	adds	r3, r2, r1
 80030b8:	4619      	mov	r1, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	f7fd f894 	bl	80001f0 <__aeabi_uldivmod>
 80030c8:	4603      	mov	r3, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	e04c      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4a31      	ldr	r2, [pc, #196]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 80030d2:	6852      	ldr	r2, [r2, #4]
 80030d4:	0992      	lsrs	r2, r2, #6
 80030d6:	4611      	mov	r1, r2
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f240 15ff 	movw	r5, #511	; 0x1ff
 80030e0:	f04f 0600 	mov.w	r6, #0
 80030e4:	ea05 0501 	and.w	r5, r5, r1
 80030e8:	ea06 0602 	and.w	r6, r6, r2
 80030ec:	4629      	mov	r1, r5
 80030ee:	4632      	mov	r2, r6
 80030f0:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80030f4:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80030f8:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80030fc:	4651      	mov	r1, sl
 80030fe:	465a      	mov	r2, fp
 8003100:	46aa      	mov	sl, r5
 8003102:	46b3      	mov	fp, r6
 8003104:	4655      	mov	r5, sl
 8003106:	465e      	mov	r6, fp
 8003108:	1b4d      	subs	r5, r1, r5
 800310a:	eb62 0606 	sbc.w	r6, r2, r6
 800310e:	4629      	mov	r1, r5
 8003110:	4632      	mov	r2, r6
 8003112:	0194      	lsls	r4, r2, #6
 8003114:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003118:	018b      	lsls	r3, r1, #6
 800311a:	1a5b      	subs	r3, r3, r1
 800311c:	eb64 0402 	sbc.w	r4, r4, r2
 8003120:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003124:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003128:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800312c:	4643      	mov	r3, r8
 800312e:	464c      	mov	r4, r9
 8003130:	4655      	mov	r5, sl
 8003132:	465e      	mov	r6, fp
 8003134:	18ed      	adds	r5, r5, r3
 8003136:	eb46 0604 	adc.w	r6, r6, r4
 800313a:	462b      	mov	r3, r5
 800313c:	4634      	mov	r4, r6
 800313e:	02a2      	lsls	r2, r4, #10
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003152:	4618      	mov	r0, r3
 8003154:	4621      	mov	r1, r4
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	461a      	mov	r2, r3
 800315e:	4623      	mov	r3, r4
 8003160:	f7fd f846 	bl	80001f0 <__aeabi_uldivmod>
 8003164:	4603      	mov	r3, r0
 8003166:	460c      	mov	r4, r1
 8003168:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	3301      	adds	r3, #1
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	e002      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetSysClockFreq+0x164>)
 8003188:	613b      	str	r3, [r7, #16]
      break;
 800318a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318c:	693b      	ldr	r3, [r7, #16]
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	017d7840 	.word	0x017d7840

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000060 	.word	0x20000060

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff0 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c4:	4601      	mov	r1, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	0800da10 	.word	0x0800da10

080031e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003208:	2b00      	cmp	r3, #0
 800320a:	d061      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800320c:	4ba3      	ldr	r3, [pc, #652]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003212:	f7fd f9db 	bl	80005cc <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003218:	e008      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800321a:	f7fd f9d7 	bl	80005cc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e177      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800322c:	4b9c      	ldr	r3, [pc, #624]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003244:	4996      	ldr	r1, [pc, #600]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	071b      	lsls	r3, r3, #28
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003264:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	0f1b      	lsrs	r3, r3, #28
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003272:	498b      	ldr	r1, [pc, #556]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	019a      	lsls	r2, r3, #6
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800328c:	4984      	ldr	r1, [pc, #528]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800328e:	4b84      	ldr	r3, [pc, #528]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f023 021f 	bic.w	r2, r3, #31
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	3b01      	subs	r3, #1
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032a4:	4b7d      	ldr	r3, [pc, #500]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032aa:	f7fd f98f 	bl	80005cc <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032b2:	f7fd f98b 	bl	80005cc <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e12b      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032c4:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d079      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032e8:	4b6e      	ldr	r3, [pc, #440]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032ee:	f7fd f96d 	bl	80005cc <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032f6:	f7fd f969 	bl	80005cc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e109      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003308:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003314:	d0ef      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003322:	4b5f      	ldr	r3, [pc, #380]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	0f1b      	lsrs	r3, r3, #28
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003330:	495b      	ldr	r1, [pc, #364]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	019a      	lsls	r2, r3, #6
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	431a      	orrs	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	071b      	lsls	r3, r3, #28
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800334a:	4955      	ldr	r1, [pc, #340]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800334c:	4b54      	ldr	r3, [pc, #336]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800334e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003352:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	3b01      	subs	r3, #1
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01e      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	0e1b      	lsrs	r3, r3, #24
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800337e:	4948      	ldr	r1, [pc, #288]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	019a      	lsls	r2, r3, #6
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003398:	4941      	ldr	r1, [pc, #260]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800339a:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800339c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fd f90a 	bl	80005cc <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033bc:	f7fd f906 	bl	80005cc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0a6      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033da:	d1ef      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 808d 	beq.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003406:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003412:	f7fd f8db 	bl	80005cc <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fd f8d7 	bl	80005cc <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e077      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003440:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d039      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	429a      	cmp	r2, r3
 8003454:	d032      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01e      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800347e:	f7fd f8a5 	bl	80005cc <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e014      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fd f8a1 	bl	80005cc <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d90b      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e03f      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x338>
 800349c:	42470068 	.word	0x42470068
 80034a0:	40023800 	.word	0x40023800
 80034a4:	42470070 	.word	0x42470070
 80034a8:	40007000 	.word	0x40007000
 80034ac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0e4      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c8:	d10d      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x302>
 80034ca:	4916      	ldr	r1, [pc, #88]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]
 80034e4:	e005      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034f0:	6093      	str	r3, [r2, #8]
 80034f2:	490c      	ldr	r1, [pc, #48]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	4313      	orrs	r3, r2
 8003502:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003518:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	424711e0 	.word	0x424711e0

0800352c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e025      	b.n	800358c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d106      	bne.n	800355a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f004 f9f3 	bl	8007940 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f000 fa81 	bl	8003a74 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	6839      	ldr	r1, [r7, #0]
 800357e:	f000 faec 	bl	8003b5a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d101      	bne.n	80035b0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e018      	b.n	80035e2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fb49 	bl	8003c58 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d104      	bne.n	80035d8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80035d6:	e003      	b.n	80035e0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d101      	bne.n	8003604 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	e00e      	b.n	8003622 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fb5c 	bl	8003cd0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e055      	b.n	80036e8 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 ff04 	bl	8004464 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6851      	ldr	r1, [r2, #4]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6892      	ldr	r2, [r2, #8]
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	4311      	orrs	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6912      	ldr	r2, [r2, #16]
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6952      	ldr	r2, [r2, #20]
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6992      	ldr	r2, [r2, #24]
 8003698:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	69d2      	ldr	r2, [r2, #28]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6a12      	ldr	r2, [r2, #32]
 80036a8:	4311      	orrs	r1, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6992      	ldr	r2, [r2, #24]
 80036ba:	0c12      	lsrs	r2, r2, #16
 80036bc:	f002 0104 	and.w	r1, r2, #4
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	69d2      	ldr	r2, [r2, #28]
 80036d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d6:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Transmit+0x26>
 8003712:	2302      	movs	r3, #2
 8003714:	e123      	b.n	800395e <HAL_SPI_Transmit+0x26e>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371e:	f7fc ff55 	bl	80005cc <HAL_GetTick>
 8003722:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d002      	beq.n	8003736 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003734:	e10a      	b.n	800394c <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_SPI_Transmit+0x52>
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003746:	e101      	b.n	800394c <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2203      	movs	r2, #3
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	d107      	bne.n	80037a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d007      	beq.n	80037be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c6:	d147      	bne.n	8003858 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_SPI_Transmit+0xea>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d138      	bne.n	800384c <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3302      	adds	r3, #2
 80037e8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037f8:	e028      	b.n	800384c <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d10f      	bne.n	8003828 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	8812      	ldrh	r2, [r2, #0]
 8003810:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3302      	adds	r3, #2
 8003816:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	86da      	strh	r2, [r3, #54]	; 0x36
 8003826:	e011      	b.n	800384c <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_SPI_Transmit+0x156>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003834:	d00a      	beq.n	800384c <HAL_SPI_Transmit+0x15c>
 8003836:	f7fc fec9 	bl	80005cc <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad2      	subs	r2, r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	77fb      	strb	r3, [r7, #31]
          goto error;
 800384a:	e07f      	b.n	800394c <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1d1      	bne.n	80037fa <HAL_SPI_Transmit+0x10a>
 8003856:	e048      	b.n	80038ea <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_SPI_Transmit+0x17a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d13a      	bne.n	80038e0 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3301      	adds	r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800388a:	e029      	b.n	80038e0 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d110      	bne.n	80038bc <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80038ba:	e011      	b.n	80038e0 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_SPI_Transmit+0x1ea>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c8:	d00a      	beq.n	80038e0 <HAL_SPI_Transmit+0x1f0>
 80038ca:	f7fc fe7f 	bl	80005cc <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1ad2      	subs	r2, r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038de:	e035      	b.n	800394c <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1d0      	bne.n	800388c <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	2102      	movs	r1, #2
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f836 	bl	8003966 <SPI_WaitFlagStateUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003904:	e022      	b.n	800394c <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f894 	bl	8003a38 <SPI_CheckFlag_BSY>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003920:	e014      	b.n	800394c <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800395c:	7ffb      	ldrb	r3, [r7, #31]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003974:	e04d      	b.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397c:	d049      	beq.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003984:	f7fc fe22 	bl	80005cc <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d33e      	bcc.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	6852      	ldr	r2, [r2, #4]
 800399e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039a2:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ac:	d111      	bne.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b6:	d004      	beq.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c0:	d107      	bne.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039da:	d110      	bne.n	80039fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80039ea:	400b      	ands	r3, r1
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e00e      	b.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d101      	bne.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003a22:	2201      	movs	r2, #1
 8003a24:	e000      	b.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003a26:	2200      	movs	r2, #0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d1a3      	bne.n	8003976 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff ff89 	bl	8003966 <SPI_WaitFlagStateUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e000      	b.n	8003a6c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d029      	beq.n	8003ae2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a9e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aa8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8003aae:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8003ab4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8003aba:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003ac0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8003ac6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8003acc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003ad2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e034      	b.n	8003b4c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003af8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003afe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b16:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003b20:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8003b26:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8003b2c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003b32:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8003b38:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d02e      	beq.n	8003bd2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b80:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003b90:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003b9a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003ba4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003bae:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003bb8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	e03b      	b.n	8003c4a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c08:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003c18:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003c22:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003c2c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003c36:	4313      	orrs	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c74:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8003c7e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c90:	f7fc fc9c 	bl	80005cc <HAL_GetTick>
 8003c94:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003c96:	e010      	b.n	8003cba <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9e:	d00c      	beq.n	8003cba <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <FMC_SDRAM_SendCommand+0x5e>
 8003ca6:	f7fc fc91 	bl	80005cc <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d901      	bls.n	8003cba <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e006      	b.n	8003cc8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e8      	bne.n	8003c98 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  //
  // Assign memory to STemWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8003cfc:	f44f 310c 	mov.w	r1, #143360	; 0x23000
 8003d00:	4803      	ldr	r0, [pc, #12]	; (8003d10 <GUI_X_Config+0x18>)
 8003d02:	f004 fbeb 	bl	80084dc <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8003d06:	4803      	ldr	r0, [pc, #12]	; (8003d14 <GUI_X_Config+0x1c>)
 8003d08:	f004 ff52 	bl	8008bb0 <GUI_SetDefaultFont>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20004038 	.word	0x20004038
 8003d14:	0800d15c 	.word	0x0800d15c

08003d18 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static inline U32 LCD_LL_GetPixelformat(U32 LayerIndex)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_DMA2D_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Enable peripheral */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <HAL_DMA2D_MspInit+0x30>)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_DMA2D_MspInit+0x30>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d46:	6313      	str	r3, [r2, #48]	; 0x30
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_DMA2D_MspInit+0x30>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	; 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable peripherals and GPIO Clocks */
  /* Enable the LTDC Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003d72:	4b5d      	ldr	r3, [pc, #372]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO Clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	4a56      	ldr	r2, [pc, #344]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003d8e:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6313      	str	r3, [r2, #48]	; 0x30
 8003d98:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	4a4f      	ldr	r2, [pc, #316]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003daa:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	6313      	str	r3, [r2, #48]	; 0x30
 8003db4:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	4a48      	ldr	r2, [pc, #288]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003dc6:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd0:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	6313      	str	r3, [r2, #48]	; 0x30
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f043 0320 	orr.w	r3, r3, #32
 8003e06:	6313      	str	r3, [r2, #48]	; 0x30
 8003e08:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	4a33      	ldr	r2, [pc, #204]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e22:	6313      	str	r3, [r2, #48]	; 0x30
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_LTDC_MspInit+0x184>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003e30:	f641 0358 	movw	r3, #6232	; 0x1858
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
 8003e42:	230e      	movs	r3, #14
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8003e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4827      	ldr	r0, [pc, #156]	; (8003eec <HAL_LTDC_MspInit+0x188>)
 8003e4e:	f7fc fe4f 	bl	8000af0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
 8003e52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8003e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4824      	ldr	r0, [pc, #144]	; (8003ef0 <HAL_LTDC_MspInit+0x18c>)
 8003e60:	f7fc fe46 	bl	8000af0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003e64:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8003e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4820      	ldr	r0, [pc, #128]	; (8003ef4 <HAL_LTDC_MspInit+0x190>)
 8003e72:	f7fc fe3d 	bl	8000af0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003e76:	2348      	movs	r3, #72	; 0x48
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8003e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7e:	4619      	mov	r1, r3
 8003e80:	481d      	ldr	r0, [pc, #116]	; (8003ef8 <HAL_LTDC_MspInit+0x194>)
 8003e82:	f7fc fe35 	bl	8000af0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 8003e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e90:	4619      	mov	r1, r3
 8003e92:	481a      	ldr	r0, [pc, #104]	; (8003efc <HAL_LTDC_MspInit+0x198>)
 8003e94:	f7fc fe2c 	bl	8000af0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003e98:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4816      	ldr	r0, [pc, #88]	; (8003f00 <HAL_LTDC_MspInit+0x19c>)
 8003ea6:	f7fc fe23 	bl	8000af0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Alternate= GPIO_AF9_LTDC;
 8003eae:	2309      	movs	r3, #9
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8003eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <HAL_LTDC_MspInit+0x18c>)
 8003eba:	f7fc fe19 	bl	8000af0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec8:	4619      	mov	r1, r3
 8003eca:	480d      	ldr	r0, [pc, #52]	; (8003f00 <HAL_LTDC_MspInit+0x19c>)
 8003ecc:	f7fc fe10 	bl	8000af0 <HAL_GPIO_Init>

  /* Set LTDC Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	210e      	movs	r1, #14
 8003ed4:	2058      	movs	r0, #88	; 0x58
 8003ed6:	f7fc fc7c 	bl	80007d2 <HAL_NVIC_SetPriority>

  /* Enable LTDC Interrupt */
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003eda:	2058      	movs	r0, #88	; 0x58
 8003edc:	f7fc fc95 	bl	800080a <HAL_NVIC_EnableIRQ>
}
 8003ee0:	bf00      	nop
 8003ee2:	3738      	adds	r7, #56	; 0x38
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	40020400 	.word	0x40020400
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	40020c00 	.word	0x40020c00
 8003efc:	40021400 	.word	0x40021400
 8003f00:	40021800 	.word	0x40021800

08003f04 <HAL_LTDC_MspDeInit>:
  *          - Disable the Peripheral's clock
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Reset peripherals */
  /* Enable LTDC reset state */
  __HAL_RCC_LTDC_FORCE_RESET();
 8003f0c:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_LTDC_MspDeInit+0x2c>)
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_LTDC_MspDeInit+0x2c>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f16:	6253      	str	r3, [r2, #36]	; 0x24

  /* Release LTDC from reset state */
  __HAL_RCC_LTDC_RELEASE_RESET();
 8003f18:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <HAL_LTDC_MspDeInit+0x2c>)
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_LTDC_MspDeInit+0x2c>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f22:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e06b      	b.n	800401a <HAL_LTDC_LineEventCallback+0xe6>
  {
    if (layer_prop[layer].pending_buffer >= 0)
 8003f42:	493b      	ldr	r1, [pc, #236]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3304      	adds	r3, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db5d      	blt.n	8004014 <HAL_LTDC_LineEventCallback+0xe0>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + \
 8003f58:	4935      	ldr	r1, [pc, #212]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	6819      	ldr	r1, [r3, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8003f68:	4831      	ldr	r0, [pc, #196]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4403      	add	r3, r0
 8003f76:	330c      	adds	r3, #12
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	4c2d      	ldr	r4, [pc, #180]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4423      	add	r3, r4
 8003f88:	3310      	adds	r3, #16
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fb03 f000 	mul.w	r0, r3, r0
 8003f90:	4c27      	ldr	r4, [pc, #156]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4423      	add	r3, r4
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	fb03 f000 	mul.w	r0, r3, r0
 8003fa6:	4c22      	ldr	r4, [pc, #136]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4423      	add	r3, r4
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fb03 f300 	mul.w	r3, r3, r0
      Addr = layer_prop[layer].address + \
 8003fbc:	440b      	add	r3, r1
 8003fbe:	60bb      	str	r3, [r7, #8]

      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	01db      	lsls	r3, r3, #7
 8003fca:	4413      	add	r3, r2
 8003fcc:	3384      	adds	r3, #132	; 0x84
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6293      	str	r3, [r2, #40]	; 0x28

      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	4912      	ldr	r1, [pc, #72]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f004 ffd7 	bl	8008fac <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8003ffe:	490c      	ldr	r1, [pc, #48]	; (8004030 <HAL_LTDC_LineEventCallback+0xfc>)
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3304      	adds	r3, #4
 800400e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004012:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d090      	beq.n	8003f42 <HAL_LTDC_LineEventCallback+0xe>
    }
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004020:	2100      	movs	r1, #0
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe fab4 	bl	8002590 <HAL_LTDC_ProgramLineEvent>
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	20000290 	.word	0x20000290

08004034 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
  U32 i;

  LCD_LL_Init ();
 800403a:	f000 fa5b 	bl	80044f4 <LCD_LL_Init>

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
    for (i = 0; i < GUI_NUM_LAYERS; i++)
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e007      	b.n	8004054 <LCD_X_Config+0x20>
    {
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2103      	movs	r1, #3
 8004048:	4618      	mov	r0, r3
 800404a:	f004 ffc3 	bl	8008fd4 <GUI_MULTIBUF_ConfigEx>
    for (i = 0; i < GUI_NUM_LAYERS; i++)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3301      	adds	r3, #1
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f4      	beq.n	8004044 <LCD_X_Config+0x10>
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800405a:	2300      	movs	r3, #0
 800405c:	2200      	movs	r2, #0
 800405e:	4942      	ldr	r1, [pc, #264]	; (8004168 <LCD_X_Config+0x134>)
 8004060:	4842      	ldr	r0, [pc, #264]	; (800416c <LCD_X_Config+0x138>)
 8004062:	f004 ff61 	bl	8008f28 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8004066:	2000      	movs	r0, #0
 8004068:	f005 fd16 	bl	8009a98 <LCD_GetSwapXYEx>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <LCD_X_Config+0x58>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004072:	22f0      	movs	r2, #240	; 0xf0
 8004074:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004078:	2000      	movs	r0, #0
 800407a:	f005 fe0a 	bl	8009c92 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800407e:	22f0      	movs	r2, #240	; 0xf0
 8004080:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004084:	2000      	movs	r0, #0
 8004086:	f005 fe32 	bl	8009cee <LCD_SetVSizeEx>
 800408a:	e00b      	b.n	80040a4 <LCD_X_Config+0x70>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800408c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004090:	21f0      	movs	r1, #240	; 0xf0
 8004092:	2000      	movs	r0, #0
 8004094:	f005 fdfd 	bl	8009c92 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004098:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800409c:	21f0      	movs	r1, #240	; 0xf0
 800409e:	2000      	movs	r0, #0
 80040a0:	f005 fe25 	bl	8009cee <LCD_SetVSizeEx>
    }
  #endif


    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80040a4:	4b32      	ldr	r3, [pc, #200]	; (8004170 <LCD_X_Config+0x13c>)
 80040a6:	4a33      	ldr	r2, [pc, #204]	; (8004174 <LCD_X_Config+0x140>)
 80040a8:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER;
#endif

   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	e053      	b.n	8004158 <LCD_X_Config+0x124>
  {

    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80040b0:	4a31      	ldr	r2, [pc, #196]	; (8004178 <LCD_X_Config+0x144>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040b8:	482d      	ldr	r0, [pc, #180]	; (8004170 <LCD_X_Config+0x13c>)
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4403      	add	r3, r0
 80040c6:	3318      	adds	r3, #24
 80040c8:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 80040ca:	4929      	ldr	r1, [pc, #164]	; (8004170 <LCD_X_Config+0x13c>)
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3304      	adds	r3, #4
 80040da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040de:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4923      	ldr	r1, [pc, #140]	; (8004170 <LCD_X_Config+0x13c>)
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	f005 fde5 	bl	8009cc2 <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f005 fcc0 	bl	8009a80 <LCD_GetBitsPerPixelEx>
 8004100:	4603      	mov	r3, r0
 8004102:	10d9      	asrs	r1, r3, #3
 8004104:	481a      	ldr	r0, [pc, #104]	; (8004170 <LCD_X_Config+0x13c>)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	3314      	adds	r3, #20
 8004114:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a18      	ldr	r2, [pc, #96]	; (800417c <LCD_X_Config+0x148>)
 800411a:	2121      	movs	r1, #33	; 0x21
 800411c:	4618      	mov	r0, r3
 800411e:	f005 fd88 	bl	8009c32 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a16      	ldr	r2, [pc, #88]	; (8004180 <LCD_X_Config+0x14c>)
 8004126:	2123      	movs	r1, #35	; 0x23
 8004128:	4618      	mov	r0, r3
 800412a:	f005 fd82 	bl	8009c32 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <LCD_X_Config+0x150>)
 8004132:	2119      	movs	r1, #25
 8004134:	4618      	mov	r0, r3
 8004136:	f005 fd7c 	bl	8009c32 <LCD_SetDevFunc>

    /* Set up drawing routine for 32bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888) {
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdec 	bl	8003d18 <LCD_LL_GetPixelformat>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <LCD_X_Config+0x11e>
     LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))CUSTOM_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a0f      	ldr	r2, [pc, #60]	; (8004188 <LCD_X_Config+0x154>)
 800414a:	2128      	movs	r1, #40	; 0x28
 800414c:	4618      	mov	r0, r3
 800414e:	f005 fd70 	bl	8009c32 <LCD_SetDevFunc>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3301      	adds	r3, #1
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0a8      	beq.n	80040b0 <LCD_X_Config+0x7c>
    }
  }
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800d0b8 	.word	0x0800d0b8
 800416c:	0800d104 	.word	0x0800d104
 8004170:	20000290 	.word	0x20000290
 8004174:	d0200000 	.word	0xd0200000
 8004178:	20000058 	.word	0x20000058
 800417c:	08004719 	.word	0x08004719
 8004180:	080047cd 	.word	0x080047cd
 8004184:	080048c1 	.word	0x080048c1
 8004188:	080049c1 	.word	0x080049c1

0800418c <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b08b      	sub	sp, #44	; 0x2c
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  int r = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  U32 addr;
  int xPos, yPos;
  U32 Color;

  switch (Cmd)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	3b01      	subs	r3, #1
 80041a0:	2b0d      	cmp	r3, #13
 80041a2:	f200 8102 	bhi.w	80043aa <LCD_X_DisplayDriver+0x21e>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <LCD_X_DisplayDriver+0x20>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080043ab 	.word	0x080043ab
 80041b4:	080041ed 	.word	0x080041ed
 80041b8:	08004255 	.word	0x08004255
 80041bc:	08004263 	.word	0x08004263
 80041c0:	08004275 	.word	0x08004275
 80041c4:	08004305 	.word	0x08004305
 80041c8:	080042ef 	.word	0x080042ef
 80041cc:	08004287 	.word	0x08004287
 80041d0:	08004353 	.word	0x08004353
 80041d4:	080043ab 	.word	0x080043ab
 80041d8:	08004363 	.word	0x08004363
 80041dc:	0800437f 	.word	0x0800437f
 80041e0:	0800423d 	.word	0x0800423d
  {
  case LCD_X_INITCONTROLLER:
    LCD_LL_LayerInit(LayerIndex);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8ed 	bl	80043c4 <LCD_LL_LayerInit>
    break;
 80041ea:	e0e1      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETORG:
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 80041ec:	4973      	ldr	r1, [pc, #460]	; (80043bc <LCD_X_DisplayDriver+0x230>)
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	6819      	ldr	r1, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6858      	ldr	r0, [r3, #4]
 8004200:	4c6e      	ldr	r4, [pc, #440]	; (80043bc <LCD_X_DisplayDriver+0x230>)
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4423      	add	r3, r4
 800420e:	330c      	adds	r3, #12
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	fb03 f000 	mul.w	r0, r3, r0
 8004216:	4c69      	ldr	r4, [pc, #420]	; (80043bc <LCD_X_DisplayDriver+0x230>)
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4423      	add	r3, r4
 8004224:	3314      	adds	r3, #20
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	fb03 f300 	mul.w	r3, r3, r0
 800422c:	440b      	add	r3, r1
 800422e:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	6a39      	ldr	r1, [r7, #32]
 8004234:	4862      	ldr	r0, [pc, #392]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 8004236:	f7fe f974 	bl	8002522 <HAL_LTDC_SetAddress>
    break;
 800423a:	e0b9      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SHOWBUFFER:
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	485e      	ldr	r0, [pc, #376]	; (80043bc <LCD_X_DisplayDriver+0x230>)
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4403      	add	r3, r0
 800424e:	3304      	adds	r3, #4
 8004250:	6019      	str	r1, [r3, #0]
    break;
 8004252:	e0ad      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETLUTENTRY:
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	4859      	ldr	r0, [pc, #356]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 800425c:	f7fd ffc3 	bl	80021e6 <HAL_LTDC_ConfigCLUT>
    break;
 8004260:	e0a6      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_ON:
    __HAL_LTDC_ENABLE(&hltdc);
 8004262:	4b57      	ldr	r3, [pc, #348]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a56      	ldr	r2, [pc, #344]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	6992      	ldr	r2, [r2, #24]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	619a      	str	r2, [r3, #24]
    break;
 8004272:	e09d      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_OFF:
    __HAL_LTDC_DISABLE(&hltdc);
 8004274:	4b52      	ldr	r3, [pc, #328]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a51      	ldr	r2, [pc, #324]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	6992      	ldr	r2, [r2, #24]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	619a      	str	r2, [r3, #24]
    break;
 8004284:	e094      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d113      	bne.n	80042b6 <LCD_X_DisplayDriver+0x12a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 800428e:	4b4c      	ldr	r3, [pc, #304]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	01db      	lsls	r3, r3, #7
 8004298:	4413      	add	r3, r2
 800429a:	3384      	adds	r3, #132	; 0x84
 800429c:	461a      	mov	r2, r3
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	440b      	add	r3, r1
 80042aa:	3384      	adds	r3, #132	; 0x84
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e012      	b.n	80042dc <LCD_X_DisplayDriver+0x150>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 80042b6:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	01db      	lsls	r3, r3, #7
 80042c0:	4413      	add	r3, r2
 80042c2:	3384      	adds	r3, #132	; 0x84
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4619      	mov	r1, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	01db      	lsls	r3, r3, #7
 80042d0:	440b      	add	r3, r1
 80042d2:	3384      	adds	r3, #132	; 0x84
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 80042dc:	4b38      	ldr	r3, [pc, #224]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a37      	ldr	r2, [pc, #220]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 80042ec:	e060      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETPOS:
    HAL_LTDC_SetWindowPosition(&hltdc,
                               ((LCD_X_SETPOS_INFO *)pData)->xPos,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,
 80042f2:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc,
 80042f8:	461a      	mov	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4830      	ldr	r0, [pc, #192]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80042fe:	f7fe f894 	bl	800242a <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8004302:	e055      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8004304:	f107 0214 	add.w	r2, r7, #20
 8004308:	f107 0318 	add.w	r3, r7, #24
 800430c:	4619      	mov	r1, r3
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f004 fe84 	bl	800901c <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	4828      	ldr	r0, [pc, #160]	; (80043bc <LCD_X_DisplayDriver+0x230>)
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4403      	add	r3, r0
 8004326:	330c      	adds	r3, #12
 8004328:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	4823      	ldr	r0, [pc, #140]	; (80043bc <LCD_X_DisplayDriver+0x230>)
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4403      	add	r3, r0
 800433c:	3310      	adds	r3, #16
 800433e:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4619      	mov	r1, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	481d      	ldr	r0, [pc, #116]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 800434c:	f7fe f86d 	bl	800242a <HAL_LTDC_SetWindowPosition>
    break;
 8004350:	e02e      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4619      	mov	r1, r3
 800435a:	4819      	ldr	r0, [pc, #100]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 800435c:	f7fe f8ab 	bl	80024b6 <HAL_LTDC_SetAlpha>
    break;
 8004360:	e026      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <LCD_X_DisplayDriver+0x1e8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	4814      	ldr	r0, [pc, #80]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 800436e:	f7fd ffae 	bl	80022ce <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
    }
    break;
 8004372:	e01d      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4812      	ldr	r0, [pc, #72]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 8004378:	f7fd ffe3 	bl	8002342 <HAL_LTDC_DisableColorKeying>
    break;
 800437c:	e018      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0c1b      	lsrs	r3, r3, #16
 8004384:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800438e:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800439a:	4313      	orrs	r3, r2
 800439c:	61fb      	str	r3, [r7, #28]

    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	69f9      	ldr	r1, [r7, #28]
 80043a2:	4807      	ldr	r0, [pc, #28]	; (80043c0 <LCD_X_DisplayDriver+0x234>)
 80043a4:	f7fd feda 	bl	800215c <HAL_LTDC_ConfigColorKeying>
    break;
 80043a8:	e002      	b.n	80043b0 <LCD_X_DisplayDriver+0x224>

  default:
    r = -1;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	372c      	adds	r7, #44	; 0x2c
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000290 	.word	0x20000290
 80043c0:	20027038 	.word	0x20027038

080043c4 <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(U32 LayerIndex)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b090      	sub	sp, #64	; 0x40
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d13f      	bne.n	8004452 <LCD_LL_LayerInit+0x8e>
  {
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 80043d6:	23f0      	movs	r3, #240	; 0xf0
 80043d8:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY0 = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
    layer_cfg.WindowY1 = YSIZE_PHYS;
 80043de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80043e2:	61bb      	str	r3, [r7, #24]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fc97 	bl	8003d18 <LCD_LL_GetPixelformat>
 80043ea:	4603      	mov	r3, r0
 80043ec:	61fb      	str	r3, [r7, #28]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 80043ee:	491b      	ldr	r1, [pc, #108]	; (800445c <LCD_LL_LayerInit+0x98>)
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.Alpha = 255;
 8004400:	23ff      	movs	r3, #255	; 0xff
 8004402:	623b      	str	r3, [r7, #32]
    layer_cfg.Alpha0 = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.Backcolor.Blue = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    layer_cfg.Backcolor.Green = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    layer_cfg.Backcolor.Red = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800441a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004420:	2307      	movs	r3, #7
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8004424:	23f0      	movs	r3, #240	; 0xf0
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8004428:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800442c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4619      	mov	r1, r3
 8004436:	480a      	ldr	r0, [pc, #40]	; (8004460 <LCD_LL_LayerInit+0x9c>)
 8004438:	f7fd fe52 	bl	80020e0 <HAL_LTDC_ConfigLayer>

    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f005 fb1e 	bl	8009a80 <LCD_GetBitsPerPixelEx>
 8004444:	4603      	mov	r3, r0
 8004446:	2b08      	cmp	r3, #8
 8004448:	dc03      	bgt.n	8004452 <LCD_LL_LayerInit+0x8e>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4804      	ldr	r0, [pc, #16]	; (8004460 <LCD_LL_LayerInit+0x9c>)
 800444e:	f7fd ffb2 	bl	80023b6 <HAL_LTDC_EnableCLUT>
    }
  }
}
 8004452:	bf00      	nop
 8004454:	3740      	adds	r7, #64	; 0x40
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000290 	.word	0x20000290
 8004460:	20027038 	.word	0x20027038

08004464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_SPI_MspInit+0x84>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d12c      	bne.n	80044e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_SPI_MspInit+0x88>)
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_SPI_MspInit+0x88>)
 800448e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004494:	6453      	str	r3, [r2, #68]	; 0x44
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_SPI_MspInit+0x88>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	4a11      	ldr	r2, [pc, #68]	; (80044ec <HAL_SPI_MspInit+0x88>)
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_SPI_MspInit+0x88>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f043 0320 	orr.w	r3, r3, #32
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <HAL_SPI_MspInit+0x88>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80044be:	f44f 7360 	mov.w	r3, #896	; 0x380
 80044c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2303      	movs	r3, #3
 80044ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80044d0:	2305      	movs	r3, #5
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4619      	mov	r1, r3
 80044da:	4805      	ldr	r0, [pc, #20]	; (80044f0 <HAL_SPI_MspInit+0x8c>)
 80044dc:	f7fc fb08 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80044e0:	bf00      	nop
 80044e2:	3728      	adds	r7, #40	; 0x28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40015000 	.word	0x40015000
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40021400 	.word	0x40021400

080044f4 <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  None
  * @retval None
  */
static void LCD_LL_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 80044f8:	4834      	ldr	r0, [pc, #208]	; (80045cc <LCD_LL_Init+0xd8>)
 80044fa:	f7fd fd21 	bl	8001f40 <HAL_LTDC_DeInit>

      /* Initializaton of ILI9341 component*/
      //ili9341_Init();
      //MX_GPIO_Init();
      //MX_SPI5_Init();
      MyLCD_PowerOn();
 80044fe:	f002 fc89 	bl	8006e14 <MyLCD_PowerOn>
      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 8004502:	4b32      	ldr	r3, [pc, #200]	; (80045cc <LCD_LL_Init+0xd8>)
 8004504:	2209      	movs	r2, #9
 8004506:	615a      	str	r2, [r3, #20]
      hltdc.Init.VerticalSync = 1;
 8004508:	4b30      	ldr	r3, [pc, #192]	; (80045cc <LCD_LL_Init+0xd8>)
 800450a:	2201      	movs	r2, #1
 800450c:	619a      	str	r2, [r3, #24]
      hltdc.Init.AccumulatedHBP = 29;
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <LCD_LL_Init+0xd8>)
 8004510:	221d      	movs	r2, #29
 8004512:	61da      	str	r2, [r3, #28]
      hltdc.Init.AccumulatedVBP = 3;
 8004514:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <LCD_LL_Init+0xd8>)
 8004516:	2203      	movs	r2, #3
 8004518:	621a      	str	r2, [r3, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <LCD_LL_Init+0xd8>)
 800451c:	f240 1243 	movw	r2, #323	; 0x143
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <LCD_LL_Init+0xd8>)
 8004524:	f240 120d 	movw	r2, #269	; 0x10d
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 800452a:	4b28      	ldr	r3, [pc, #160]	; (80045cc <LCD_LL_Init+0xd8>)
 800452c:	f240 1247 	movw	r2, #327	; 0x147
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <LCD_LL_Init+0xd8>)
 8004534:	f240 1217 	movw	r2, #279	; 0x117
 8004538:	62da      	str	r2, [r3, #44]	; 0x2c

      /* background value */
      hltdc.Init.Backcolor.Blue = 0;
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <LCD_LL_Init+0xd8>)
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <LCD_LL_Init+0xd8>)
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <LCD_LL_Init+0xd8>)
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <LCD_LL_Init+0xdc>)
 8004554:	2208      	movs	r2, #8
 8004556:	601a      	str	r2, [r3, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <LCD_LL_Init+0xdc>)
 800455a:	22c0      	movs	r2, #192	; 0xc0
 800455c:	611a      	str	r2, [r3, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <LCD_LL_Init+0xdc>)
 8004560:	2204      	movs	r2, #4
 8004562:	619a      	str	r2, [r3, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <LCD_LL_Init+0xdc>)
 8004566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800456c:	4818      	ldr	r0, [pc, #96]	; (80045d0 <LCD_LL_Init+0xdc>)
 800456e:	f7fe fe39 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>

      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004572:	4b16      	ldr	r3, [pc, #88]	; (80045cc <LCD_LL_Init+0xd8>)
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <LCD_LL_Init+0xd8>)
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <LCD_LL_Init+0xd8>)
 8004580:	2200      	movs	r2, #0
 8004582:	60da      	str	r2, [r3, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <LCD_LL_Init+0xd8>)
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]
      hltdc.Instance = LTDC;
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <LCD_LL_Init+0xd8>)
 800458c:	4a11      	ldr	r2, [pc, #68]	; (80045d4 <LCD_LL_Init+0xe0>)
 800458e:	601a      	str	r2, [r3, #0]

      HAL_LTDC_Init(&hltdc);
 8004590:	480e      	ldr	r0, [pc, #56]	; (80045cc <LCD_LL_Init+0xd8>)
 8004592:	f7fd fc01 	bl	8001d98 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8004596:	2100      	movs	r1, #0
 8004598:	480c      	ldr	r0, [pc, #48]	; (80045cc <LCD_LL_Init+0xd8>)
 800459a:	f7fd fff9 	bl	8002590 <HAL_LTDC_ProgramLineEvent>

	  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <LCD_LL_Init+0xe4>)
 80045a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045a4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <LCD_LL_Init+0xe4>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <LCD_LL_Init+0xe4>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D;
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <LCD_LL_Init+0xe4>)
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <LCD_LL_Init+0xe8>)
 80045b6:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80045b8:	4807      	ldr	r0, [pc, #28]	; (80045d8 <LCD_LL_Init+0xe4>)
 80045ba:	f7fc f940 	bl	800083e <HAL_DMA2D_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d000      	beq.n	80045c6 <LCD_LL_Init+0xd2>
  {
    while (1);
 80045c4:	e7fe      	b.n	80045c4 <LCD_LL_Init+0xd0>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20027038 	.word	0x20027038
 80045d0:	200002ac 	.word	0x200002ac
 80045d4:	40016800 	.word	0x40016800
 80045d8:	200270e0 	.word	0x200270e0
 80045dc:	4002b000 	.word	0x4002b000

080045e0 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff fb92 	bl	8003d18 <LCD_LL_GetPixelformat>
 80045f4:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 80045f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 800460a:	4a10      	ldr	r2, [pc, #64]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst;
 8004610:	4a0e      	ldr	r2, [pc, #56]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 8004616:	4a0d      	ldr	r2, [pc, #52]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800461c:	4a0b      	ldr	r2, [pc, #44]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	6a39      	ldr	r1, [r7, #32]
 8004624:	b289      	uxth	r1, r1
 8004626:	430b      	orrs	r3, r1
 8004628:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 800462c:	4b07      	ldr	r3, [pc, #28]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8004636:	bf00      	nop
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <DMA2D_CopyBuffer+0x6c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f9      	bne.n	8004638 <DMA2D_CopyBuffer+0x58>
  {
  }
}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	4002b000 	.word	0x4002b000

08004650 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.
  * @retval None
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]

  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff fb5a 	bl	8003d18 <LCD_LL_GetPixelformat>
 8004664:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 8004668:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <DMA2D_FillBuffer+0x68>)
 800466a:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 800466c:	4a11      	ldr	r2, [pc, #68]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8004678:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 800467e:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8004684:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	b289      	uxth	r1, r1
 800468e:	430b      	orrs	r3, r1
 8004690:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 8004692:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 800469e:	bf00      	nop
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <DMA2D_FillBuffer+0x64>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f9      	bne.n	80046a0 <DMA2D_FillBuffer+0x50>
  {
  }
}
 80046ac:	bf00      	nop
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	4002b000 	.word	0x4002b000
 80046b8:	00030200 	.word	0x00030200

080046bc <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index
  * @retval None
  */
static U32 GetBufferSize(U32 LayerIndex)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80046c4:	4913      	ldr	r1, [pc, #76]	; (8004714 <GetBufferSize+0x58>)
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	330c      	adds	r3, #12
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	480f      	ldr	r0, [pc, #60]	; (8004714 <GetBufferSize+0x58>)
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4403      	add	r3, r0
 80046e4:	3310      	adds	r3, #16
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	fb03 f101 	mul.w	r1, r3, r1
 80046ec:	4809      	ldr	r0, [pc, #36]	; (8004714 <GetBufferSize+0x58>)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4403      	add	r3, r0
 80046fa:	3314      	adds	r3, #20
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fb03 f301 	mul.w	r3, r3, r1
 8004702:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000290 	.word	0x20000290

08004718 <CUSTOM_CopyBuffer>:
  * @param  LayerIndex : Layer Index
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination
  * @retval None
  */
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b08d      	sub	sp, #52	; 0x34
 800471c:	af04      	add	r7, sp, #16
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ffc8 	bl	80046bc <GetBufferSize>
 800472c:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800472e:	4926      	ldr	r1, [pc, #152]	; (80047c8 <CUSTOM_CopyBuffer+0xb0>)
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	440b      	add	r3, r1
 800474a:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 800474c:	491e      	ldr	r1, [pc, #120]	; (80047c8 <CUSTOM_CopyBuffer+0xb0>)
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4619      	mov	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	440b      	add	r3, r1
 8004768:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	69bc      	ldr	r4, [r7, #24]
 800476e:	697d      	ldr	r5, [r7, #20]
 8004770:	4915      	ldr	r1, [pc, #84]	; (80047c8 <CUSTOM_CopyBuffer+0xb0>)
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	330c      	adds	r3, #12
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461e      	mov	r6, r3
 8004784:	4910      	ldr	r1, [pc, #64]	; (80047c8 <CUSTOM_CopyBuffer+0xb0>)
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3310      	adds	r3, #16
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	2300      	movs	r3, #0
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	9200      	str	r2, [sp, #0]
 80047a2:	4633      	mov	r3, r6
 80047a4:	462a      	mov	r2, r5
 80047a6:	4621      	mov	r1, r4
 80047a8:	f7ff ff1a 	bl	80045e0 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 80047ac:	4906      	ldr	r1, [pc, #24]	; (80047c8 <CUSTOM_CopyBuffer+0xb0>)
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	3308      	adds	r3, #8
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	601a      	str	r2, [r3, #0]
}
 80047c0:	bf00      	nop
 80047c2:	3724      	adds	r7, #36	; 0x24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c8:	20000290 	.word	0x20000290

080047cc <CUSTOM_CopyRect>:
  * @param  xSize:       X size.
  * @param  ySize:       Y size.
  * @retval None
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize)
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b08d      	sub	sp, #52	; 0x34
 80047d0:	af04      	add	r7, sp, #16
 80047d2:	6178      	str	r0, [r7, #20]
 80047d4:	6139      	str	r1, [r7, #16]
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
  U32 AddrSrc, AddrDst;

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80047da:	4938      	ldr	r1, [pc, #224]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	4834      	ldr	r0, [pc, #208]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4403      	add	r3, r0
 80047f8:	330c      	adds	r3, #12
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	fb02 f203 	mul.w	r2, r2, r3
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	18d0      	adds	r0, r2, r3
 8004806:	4c2d      	ldr	r4, [pc, #180]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4423      	add	r3, r4
 8004814:	3314      	adds	r3, #20
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	fb03 f300 	mul.w	r3, r3, r0
 800481c:	440b      	add	r3, r1
 800481e:	61fb      	str	r3, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8004820:	4926      	ldr	r1, [pc, #152]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	4822      	ldr	r0, [pc, #136]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4403      	add	r3, r0
 800483e:	330c      	adds	r3, #12
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004844:	fb02 f203 	mul.w	r2, r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	18d0      	adds	r0, r2, r3
 800484c:	4c1b      	ldr	r4, [pc, #108]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4423      	add	r3, r4
 800485a:	3314      	adds	r3, #20
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	fb03 f300 	mul.w	r3, r3, r0
 8004862:	440b      	add	r3, r1
 8004864:	61bb      	str	r3, [r7, #24]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8004866:	697c      	ldr	r4, [r7, #20]
 8004868:	69fd      	ldr	r5, [r7, #28]
 800486a:	69be      	ldr	r6, [r7, #24]
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004872:	4812      	ldr	r0, [pc, #72]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4403      	add	r3, r0
 8004880:	330c      	adds	r3, #12
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <CUSTOM_CopyRect+0xf0>)
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4403      	add	r3, r0
 8004898:	330c      	adds	r3, #12
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	9302      	str	r3, [sp, #8]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	9201      	str	r2, [sp, #4]
 80048a6:	9100      	str	r1, [sp, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4632      	mov	r2, r6
 80048ac:	4629      	mov	r1, r5
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff fe96 	bl	80045e0 <DMA2D_CopyBuffer>
}
 80048b4:	bf00      	nop
 80048b6:	3724      	adds	r7, #36	; 0x24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	20000290 	.word	0x20000290

080048c0 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.
  * @retval None
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex)
{
 80048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c2:	b08b      	sub	sp, #44	; 0x2c
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 80048ce:	f004 f845 	bl	800895c <GUI_GetDrawMode>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d110      	bne.n	80048fa <CUSTOM_FillRect+0x3a>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80048d8:	2200      	movs	r2, #0
 80048da:	2119      	movs	r1, #25
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f005 f9a8 	bl	8009c32 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68b8      	ldr	r0, [r7, #8]
 80048ea:	f004 fd8f 	bl	800940c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80048ee:	4a32      	ldr	r2, [pc, #200]	; (80049b8 <CUSTOM_FillRect+0xf8>)
 80048f0:	2119      	movs	r1, #25
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f005 f99d 	bl	8009c32 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 80048f8:	e059      	b.n	80049ae <CUSTOM_FillRect+0xee>
    xSize = x1 - x0 + 1;
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	3301      	adds	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8004904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	3301      	adds	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fed3 	bl	80046bc <GetBufferSize>
 8004916:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004918:	4928      	ldr	r1, [pc, #160]	; (80049bc <CUSTOM_FillRect+0xfc>)
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461c      	mov	r4, r3
 800492a:	4924      	ldr	r1, [pc, #144]	; (80049bc <CUSTOM_FillRect+0xfc>)
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	330c      	adds	r3, #12
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	fb02 f203 	mul.w	r2, r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	18d1      	adds	r1, r2, r3
 8004946:	481d      	ldr	r0, [pc, #116]	; (80049bc <CUSTOM_FillRect+0xfc>)
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4403      	add	r3, r0
 8004954:	3314      	adds	r3, #20
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fb03 f301 	mul.w	r3, r3, r1
 800495c:	4618      	mov	r0, r3
 800495e:	4917      	ldr	r1, [pc, #92]	; (80049bc <CUSTOM_FillRect+0xfc>)
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4613      	mov	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	3308      	adds	r3, #8
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	fb03 f302 	mul.w	r3, r3, r2
 8004978:	4403      	add	r3, r0
 800497a:	4423      	add	r3, r4
 800497c:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	693c      	ldr	r4, [r7, #16]
 8004982:	69fd      	ldr	r5, [r7, #28]
 8004984:	69be      	ldr	r6, [r7, #24]
 8004986:	490d      	ldr	r1, [pc, #52]	; (80049bc <CUSTOM_FillRect+0xfc>)
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	330c      	adds	r3, #12
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	9200      	str	r2, [sp, #0]
 80049a4:	4633      	mov	r3, r6
 80049a6:	462a      	mov	r2, r5
 80049a8:	4621      	mov	r1, r4
 80049aa:	f7ff fe51 	bl	8004650 <DMA2D_FillBuffer>
}
 80049ae:	bf00      	nop
 80049b0:	3724      	adds	r7, #36	; 0x24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b6:	bf00      	nop
 80049b8:	080048c1 	.word	0x080048c1
 80049bc:	20000290 	.word	0x20000290

080049c0 <CUSTOM_DrawBitmap32bpp>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b08c      	sub	sp, #48	; 0x30
 80049c4:	af04      	add	r7, sp, #16
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fe73 	bl	80046bc <GetBufferSize>
 80049d6:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80049d8:	492c      	ldr	r1, [pc, #176]	; (8004a8c <CUSTOM_DrawBitmap32bpp+0xcc>)
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461c      	mov	r4, r3
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <CUSTOM_DrawBitmap32bpp+0xcc>)
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	330c      	adds	r3, #12
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	fb02 f203 	mul.w	r2, r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	18d1      	adds	r1, r2, r3
 8004a06:	4821      	ldr	r0, [pc, #132]	; (8004a8c <CUSTOM_DrawBitmap32bpp+0xcc>)
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4403      	add	r3, r0
 8004a14:	3314      	adds	r3, #20
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	fb03 f301 	mul.w	r3, r3, r1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	491b      	ldr	r1, [pc, #108]	; (8004a8c <CUSTOM_DrawBitmap32bpp+0xcc>)
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fb03 f302 	mul.w	r3, r3, r2
 8004a38:	4403      	add	r3, r0
 8004a3a:	4423      	add	r3, r4
 8004a3c:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da00      	bge.n	8004a46 <CUSTOM_DrawBitmap32bpp+0x86>
 8004a44:	3303      	adds	r3, #3
 8004a46:	109b      	asrs	r3, r3, #2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004a50:	490e      	ldr	r1, [pc, #56]	; (8004a8c <CUSTOM_DrawBitmap32bpp+0xcc>)
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	330c      	adds	r3, #12
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	69bc      	ldr	r4, [r7, #24]
 8004a6c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	6939      	ldr	r1, [r7, #16]
 8004a74:	9102      	str	r1, [sp, #8]
 8004a76:	9201      	str	r2, [sp, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	f7ff fdae 	bl	80045e0 <DMA2D_CopyBuffer>
}
 8004a84:	bf00      	nop
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8c:	20000290 	.word	0x20000290

08004a90 <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]

  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f895 	bl	8004bdc <osMutexCreate>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <GUI_X_InitOS+0x34>)
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	603b      	str	r3, [r7, #0]

  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);
 8004abc:	463b      	mov	r3, r7
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f91d 	bl	8004d00 <osSemaphoreCreate>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <GUI_X_InitOS+0x38>)
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	200002dc 	.word	0x200002dc
 8004ad8:	200002e0 	.word	0x200002e0

08004adc <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  osMutexRelease(osMutex);
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <GUI_X_Unlock+0x14>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f8d5 	bl	8004c94 <osMutexRelease>
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200002dc 	.word	0x200002dc

08004af4 <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  osMutexWait(osMutex , osWaitForever) ;
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <GUI_X_Lock+0x18>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f877 	bl	8004bf4 <osMutexWait>
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200002dc 	.word	0x200002dc

08004b10 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  return ((U32) osThreadGetId());
 8004b14:	f000 f85b 	bl	8004bce <osThreadGetId>
 8004b18:	4603      	mov	r3, r0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b30:	2b84      	cmp	r3, #132	; 0x84
 8004b32:	d005      	beq.n	8004b40 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b54:	f3ef 8305 	mrs	r3, IPSR
 8004b58:	607b      	str	r3, [r7, #4]
  return(result);
 8004b5a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b76:	f001 fbc7 	bl	8006308 <vTaskStartScheduler>
  
  return osOK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685c      	ldr	r4, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b96:	b29e      	uxth	r6, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ffbd 	bl	8004b1e <makeFreeRtosPriority>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	9200      	str	r2, [sp, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f001 fa7e 	bl	80060b6 <xTaskCreate>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d001      	beq.n	8004bc4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bce <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8004bd2:	f001 ff7d 	bl	8006ad0 <xTaskGetCurrentTaskHandle>
 8004bd6:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8004be4:	2001      	movs	r0, #1
 8004be6:	f000 fe2b 	bl	8005840 <xQueueCreateMutex>
 8004bea:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <osMutexWait+0x18>
    return osErrorParameter;
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	e03c      	b.n	8004c86 <osMutexWait+0x92>
  }
  
  ticks = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c16:	d103      	bne.n	8004c20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e009      	b.n	8004c34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <osMutexWait+0x40>
      ticks = 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004c34:	f7ff ff8b 	bl	8004b4e <inHandlerMode>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d017      	beq.n	8004c6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	461a      	mov	r2, r3
 8004c44:	2100      	movs	r1, #0
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f001 f8a8 	bl	8005d9c <xQueueReceiveFromISR>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d001      	beq.n	8004c56 <osMutexWait+0x62>
      return osErrorOS;
 8004c52:	23ff      	movs	r3, #255	; 0xff
 8004c54:	e017      	b.n	8004c86 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d013      	beq.n	8004c84 <osMutexWait+0x90>
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <osMutexWait+0x9c>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	e00a      	b.n	8004c84 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004c6e:	2300      	movs	r3, #0
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	2100      	movs	r1, #0
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 ff7f 	bl	8005b78 <xQueueGenericReceive>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <osMutexWait+0x90>
    return osErrorOS;
 8004c80:	23ff      	movs	r3, #255	; 0xff
 8004c82:	e000      	b.n	8004c86 <osMutexWait+0x92>
  }
  
  return osOK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004ca4:	f7ff ff53 	bl	8004b4e <inHandlerMode>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fed5 	bl	8005a64 <xQueueGiveFromISR>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <osMutexRelease+0x30>
      return osErrorOS;
 8004cc0:	23ff      	movs	r3, #255	; 0xff
 8004cc2:	e017      	b.n	8004cf4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d013      	beq.n	8004cf2 <osMutexRelease+0x5e>
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <osMutexRelease+0x68>)
 8004ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	e00a      	b.n	8004cf2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fdc4 	bl	8005870 <xQueueGenericSend>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004cee:	23ff      	movs	r3, #255	; 0xff
 8004cf0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d110      	bne.n	8004d32 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8004d10:	2203      	movs	r2, #3
 8004d12:	2100      	movs	r1, #0
 8004d14:	2001      	movs	r0, #1
 8004d16:	f000 fd21 	bl	800575c <xQueueGenericCreate>
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <osSemaphoreCreate+0x2e>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2200      	movs	r2, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fda1 	bl	8005870 <xQueueGenericSend>
    return sema;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	e000      	b.n	8004d34 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8004d32:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004d40:	f001 fed6 	bl	8006af0 <xTaskGetSchedulerState>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8004d4a:	f000 fa45 	bl	80051d8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f103 0208 	add.w	r2, r3, #8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f103 0208 	add.w	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f103 0208 	add.w	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0a:	d103      	bne.n	8004e14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e00c      	b.n	8004e2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3308      	adds	r3, #8
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e002      	b.n	8004e22 <vListInsert+0x2e>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d9f6      	bls.n	8004e1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6852      	ldr	r2, [r2, #4]
 8004e86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d103      	bne.n	8004e9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3b04      	subs	r3, #4
 8004ecc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3b04      	subs	r3, #4
 8004eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004eec:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <pxPortInitialiseStack+0x64>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b14      	subs	r3, #20
 8004ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b04      	subs	r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f06f 0202 	mvn.w	r2, #2
 8004f0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b20      	subs	r3, #32
 8004f10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	08004f25 	.word	0x08004f25

08004f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <prvTaskExitError+0x38>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f32:	d009      	beq.n	8004f48 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	e7fe      	b.n	8004f46 <prvTaskExitError+0x22>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004f5a:	e7fe      	b.n	8004f5a <prvTaskExitError+0x36>
 8004f5c:	2000005c 	.word	0x2000005c

08004f60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <pxCurrentTCBConst2>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6a:	f380 8809 	msr	PSP, r0
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	4770      	bx	lr
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst2>:
 8004f80:	20003f04 	.word	0x20003f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f88:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <prvPortStartFirstTask+0x1c>)
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f380 8808 	msr	MSP, r0
 8004f92:	b662      	cpsie	i
 8004f94:	b661      	cpsie	f
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	df00      	svc	0
 8004fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed08 	.word	0xe000ed08

08004fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <xPortStartScheduler+0xf4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3b      	ldr	r2, [pc, #236]	; (80050a0 <xPortStartScheduler+0xf8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d109      	bne.n	8004fcc <xPortStartScheduler+0x24>
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e7fe      	b.n	8004fca <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fcc:	4b33      	ldr	r3, [pc, #204]	; (800509c <xPortStartScheduler+0xf4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <xPortStartScheduler+0xfc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d109      	bne.n	8004fea <xPortStartScheduler+0x42>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e7fe      	b.n	8004fe8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <xPortStartScheduler+0x100>)
 8004fec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	22ff      	movs	r2, #255	; 0xff
 8004ffa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <xPortStartScheduler+0x104>)
 8005010:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005012:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <xPortStartScheduler+0x108>)
 8005014:	2207      	movs	r2, #7
 8005016:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005018:	e009      	b.n	800502e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800501a:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <xPortStartScheduler+0x108>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3b01      	subs	r3, #1
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <xPortStartScheduler+0x108>)
 8005022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d0ef      	beq.n	800501a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800503a:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <xPortStartScheduler+0x108>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <xPortStartScheduler+0x108>)
 8005042:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <xPortStartScheduler+0x108>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <xPortStartScheduler+0x108>)
 800504e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <xPortStartScheduler+0x10c>)
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <xPortStartScheduler+0x10c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005062:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005064:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <xPortStartScheduler+0x10c>)
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <xPortStartScheduler+0x10c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800506e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005070:	f000 f8d2 	bl	8005218 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <xPortStartScheduler+0x110>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800507a:	f000 f8e9 	bl	8005250 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <xPortStartScheduler+0x114>)
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <xPortStartScheduler+0x114>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005088:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800508a:	f7ff ff7d 	bl	8004f88 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800508e:	f7ff ff49 	bl	8004f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	e000ed00 	.word	0xe000ed00
 80050a0:	410fc271 	.word	0x410fc271
 80050a4:	410fc270 	.word	0x410fc270
 80050a8:	e000e400 	.word	0xe000e400
 80050ac:	200002e4 	.word	0x200002e4
 80050b0:	200002e8 	.word	0x200002e8
 80050b4:	e000ed20 	.word	0xe000ed20
 80050b8:	2000005c 	.word	0x2000005c
 80050bc:	e000ef34 	.word	0xe000ef34

080050c0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <vPortEnterCritical+0x54>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3301      	adds	r3, #1
 80050de:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <vPortEnterCritical+0x54>)
 80050e0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <vPortEnterCritical+0x54>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d10e      	bne.n	8005108 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <vPortEnterCritical+0x58>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <vPortEnterCritical+0x48>
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	e7fe      	b.n	8005106 <vPortEnterCritical+0x46>
	}
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	2000005c 	.word	0x2000005c
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <vPortExitCritical+0x4c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <vPortExitCritical+0x22>
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e7fe      	b.n	800513c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <vPortExitCritical+0x4c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3b01      	subs	r3, #1
 8005144:	4a08      	ldr	r2, [pc, #32]	; (8005168 <vPortExitCritical+0x4c>)
 8005146:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <vPortExitCritical+0x4c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <vPortExitCritical+0x3e>
 8005150:	2300      	movs	r3, #0
 8005152:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	2000005c 	.word	0x2000005c
 800516c:	00000000 	.word	0x00000000

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f01e 0f10 	tst.w	lr, #16
 8005180:	bf08      	it	eq
 8005182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005194:	f380 8811 	msr	BASEPRI, r0
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f001 fa5e 	bl	8006660 <vTaskSwitchContext>
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f380 8811 	msr	BASEPRI, r0
 80051ac:	bc08      	pop	{r3}
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	6808      	ldr	r0, [r1, #0]
 80051b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	f01e 0f10 	tst.w	lr, #16
 80051ba:	bf08      	it	eq
 80051bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051c0:	f380 8809 	msr	PSP, r0
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst>:
 80051d0:	20003f04 	.word	0x20003f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051f0:	f001 f97a 	bl	80064e8 <xTaskIncrementTick>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <xPortSysTickHandler+0x3c>)
 80051fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <vPortSetupTimerInterrupt+0x28>)
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <vPortSetupTimerInterrupt+0x2c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4909      	ldr	r1, [pc, #36]	; (8005248 <vPortSetupTimerInterrupt+0x30>)
 8005224:	fba1 1303 	umull	r1, r3, r1, r3
 8005228:	099b      	lsrs	r3, r3, #6
 800522a:	3b01      	subs	r3, #1
 800522c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800522e:	4b07      	ldr	r3, [pc, #28]	; (800524c <vPortSetupTimerInterrupt+0x34>)
 8005230:	2207      	movs	r2, #7
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e000e014 	.word	0xe000e014
 8005244:	20000060 	.word	0x20000060
 8005248:	10624dd3 	.word	0x10624dd3
 800524c:	e000e010 	.word	0xe000e010

08005250 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005250:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005260 <vPortEnableVFP+0x10>
 8005254:	6801      	ldr	r1, [r0, #0]
 8005256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800525a:	6001      	str	r1, [r0, #0]
 800525c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800525e:	bf00      	nop
 8005260:	e000ed88 	.word	0xe000ed88

08005264 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800526a:	f3ef 8305 	mrs	r3, IPSR
 800526e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b0f      	cmp	r3, #15
 8005274:	d913      	bls.n	800529e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005276:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <vPortValidateInterruptPriority+0x6c>)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005280:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <vPortValidateInterruptPriority+0x70>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	7afa      	ldrb	r2, [r7, #11]
 8005286:	429a      	cmp	r2, r3
 8005288:	d209      	bcs.n	800529e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	e7fe      	b.n	800529c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800529e:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <vPortValidateInterruptPriority+0x74>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <vPortValidateInterruptPriority+0x78>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d909      	bls.n	80052c2 <vPortValidateInterruptPriority+0x5e>
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	e7fe      	b.n	80052c0 <vPortValidateInterruptPriority+0x5c>
	}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e3f0 	.word	0xe000e3f0
 80052d4:	200002e4 	.word	0x200002e4
 80052d8:	e000ed0c 	.word	0xe000ed0c
 80052dc:	200002e8 	.word	0x200002e8

080052e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052ec:	f001 f852 	bl	8006394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052f0:	4b57      	ldr	r3, [pc, #348]	; (8005450 <pvPortMalloc+0x170>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052f8:	f000 f90c 	bl	8005514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052fc:	4b55      	ldr	r3, [pc, #340]	; (8005454 <pvPortMalloc+0x174>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 808c 	bne.w	8005422 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01c      	beq.n	800534a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005310:	2208      	movs	r2, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b00      	cmp	r3, #0
 8005320:	d013      	beq.n	800534a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	3308      	adds	r3, #8
 800532a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <pvPortMalloc+0x6a>
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e7fe      	b.n	8005348 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d068      	beq.n	8005422 <pvPortMalloc+0x142>
 8005350:	4b41      	ldr	r3, [pc, #260]	; (8005458 <pvPortMalloc+0x178>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d863      	bhi.n	8005422 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800535a:	4b40      	ldr	r3, [pc, #256]	; (800545c <pvPortMalloc+0x17c>)
 800535c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800535e:	4b3f      	ldr	r3, [pc, #252]	; (800545c <pvPortMalloc+0x17c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005364:	e004      	b.n	8005370 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d203      	bcs.n	8005382 <pvPortMalloc+0xa2>
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f1      	bne.n	8005366 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005382:	4b33      	ldr	r3, [pc, #204]	; (8005450 <pvPortMalloc+0x170>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	429a      	cmp	r2, r3
 800538a:	d04a      	beq.n	8005422 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2208      	movs	r2, #8
 8005392:	4413      	add	r3, r2
 8005394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1ad2      	subs	r2, r2, r3
 80053a6:	2308      	movs	r3, #8
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d91e      	bls.n	80053ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <pvPortMalloc+0xf4>
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e7fe      	b.n	80053d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053e6:	69b8      	ldr	r0, [r7, #24]
 80053e8:	f000 f8f6 	bl	80055d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <pvPortMalloc+0x178>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <pvPortMalloc+0x178>)
 80053f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <pvPortMalloc+0x178>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <pvPortMalloc+0x180>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d203      	bcs.n	800540e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <pvPortMalloc+0x178>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a15      	ldr	r2, [pc, #84]	; (8005460 <pvPortMalloc+0x180>)
 800540c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <pvPortMalloc+0x174>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	431a      	orrs	r2, r3
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005422:	f000 ffc5 	bl	80063b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <pvPortMalloc+0x164>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e7fe      	b.n	8005442 <pvPortMalloc+0x162>
	return pvReturn;
 8005444:	69fb      	ldr	r3, [r7, #28]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3728      	adds	r7, #40	; 0x28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20003ef4 	.word	0x20003ef4
 8005454:	20003f00 	.word	0x20003f00
 8005458:	20003ef8 	.word	0x20003ef8
 800545c:	20003eec 	.word	0x20003eec
 8005460:	20003efc 	.word	0x20003efc

08005464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d046      	beq.n	8005504 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005476:	2308      	movs	r3, #8
 8005478:	425b      	negs	r3, r3
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <vPortFree+0xa8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <vPortFree+0x42>
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e7fe      	b.n	80054a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <vPortFree+0x5e>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	e7fe      	b.n	80054c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <vPortFree+0xa8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d019      	beq.n	8005504 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d115      	bne.n	8005504 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <vPortFree+0xa8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054e8:	f000 ff54 	bl	8006394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4b07      	ldr	r3, [pc, #28]	; (8005510 <vPortFree+0xac>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a06      	ldr	r2, [pc, #24]	; (8005510 <vPortFree+0xac>)
 80054f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f000 f86c 	bl	80055d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005500:	f000 ff56 	bl	80063b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005504:	bf00      	nop
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20003f00 	.word	0x20003f00
 8005510:	20003ef8 	.word	0x20003ef8

08005514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800551a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800551e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <prvHeapInit+0xac>)
 8005522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3307      	adds	r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <prvHeapInit+0xac>)
 8005544:	4413      	add	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800554c:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <prvHeapInit+0xb0>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005552:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <prvHeapInit+0xb0>)
 8005554:	2200      	movs	r2, #0
 8005556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005560:	2208      	movs	r2, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <prvHeapInit+0xb4>)
 8005574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <prvHeapInit+0xb4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <prvHeapInit+0xb4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <prvHeapInit+0xb4>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <prvHeapInit+0xb8>)
 80055a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <prvHeapInit+0xbc>)
 80055aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055ac:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <prvHeapInit+0xc0>)
 80055ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	200002ec 	.word	0x200002ec
 80055c4:	20003eec 	.word	0x20003eec
 80055c8:	20003ef4 	.word	0x20003ef4
 80055cc:	20003efc 	.word	0x20003efc
 80055d0:	20003ef8 	.word	0x20003ef8
 80055d4:	20003f00 	.word	0x20003f00

080055d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055e0:	4b28      	ldr	r3, [pc, #160]	; (8005684 <prvInsertBlockIntoFreeList+0xac>)
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e002      	b.n	80055ec <prvInsertBlockIntoFreeList+0x14>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d3f7      	bcc.n	80055e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d108      	bne.n	800561a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	441a      	add	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	441a      	add	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d118      	bne.n	8005660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b15      	ldr	r3, [pc, #84]	; (8005688 <prvInsertBlockIntoFreeList+0xb0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d00d      	beq.n	8005656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e008      	b.n	8005668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <prvInsertBlockIntoFreeList+0xb0>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e003      	b.n	8005668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d002      	beq.n	8005676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20003eec 	.word	0x20003eec
 8005688:	20003ef4 	.word	0x20003ef4

0800568c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <xQueueGenericReset+0x28>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	e7fe      	b.n	80056b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80056b4:	f7ff fd04 	bl	80050c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	68f9      	ldr	r1, [r7, #12]
 80056c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	3b01      	subs	r3, #1
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	441a      	add	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	22ff      	movs	r2, #255	; 0xff
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	22ff      	movs	r2, #255	; 0xff
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d114      	bne.n	8005734 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01a      	beq.n	8005748 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3310      	adds	r3, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f001 f820 	bl	800675c <xTaskRemoveFromEventList>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <xQueueGenericReset+0xcc>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	e009      	b.n	8005748 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3310      	adds	r3, #16
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fb0a 	bl	8004d52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fb05 	bl	8004d52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005748:	f7ff fce8 	bl	800511c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800574c:	2301      	movs	r3, #1
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <xQueueGenericCreate+0x28>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e7fe      	b.n	8005782 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e004      	b.n	800579a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3348      	adds	r3, #72	; 0x48
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fd9e 	bl	80052e0 <pvPortMalloc>
 80057a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	3348      	adds	r3, #72	; 0x48
 80057b0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057b2:	79fa      	ldrb	r2, [r7, #7]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f805 	bl	80057ce <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80057c4:	69bb      	ldr	r3, [r7, #24]
	}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e002      	b.n	80057f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057fc:	2101      	movs	r1, #1
 80057fe:	69b8      	ldr	r0, [r7, #24]
 8005800:	f7ff ff44 	bl	800568c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800582c:	2300      	movs	r3, #0
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f81c 	bl	8005870 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	461a      	mov	r2, r3
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	6978      	ldr	r0, [r7, #20]
 800585a:	f7ff ff7f 	bl	800575c <xQueueGenericCreate>
 800585e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ffd3 	bl	800580c <prvInitialiseMutex>

		return pxNewQueue;
 8005866:	68fb      	ldr	r3, [r7, #12]
	}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	; 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <xQueueGenericSend+0x30>
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
 800589e:	e7fe      	b.n	800589e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <xQueueGenericSend+0x3e>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <xQueueGenericSend+0x42>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <xQueueGenericSend+0x44>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <xQueueGenericSend+0x5c>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	e7fe      	b.n	80058ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d103      	bne.n	80058da <xQueueGenericSend+0x6a>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <xQueueGenericSend+0x6e>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueGenericSend+0x70>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <xQueueGenericSend+0x88>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	e7fe      	b.n	80058f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058f8:	f001 f8fa 	bl	8006af0 <xTaskGetSchedulerState>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <xQueueGenericSend+0x98>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <xQueueGenericSend+0x9c>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <xQueueGenericSend+0x9e>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <xQueueGenericSend+0xb6>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005926:	f7ff fbcb 	bl	80050c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <xQueueGenericSend+0xcc>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d129      	bne.n	8005990 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005942:	f000 faa8 	bl	8005e96 <prvCopyDataToQueue>
 8005946:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ff01 	bl	800675c <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <xQueueGenericSend+0x1f0>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e00a      	b.n	8005988 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <xQueueGenericSend+0x1f0>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005988:	f7ff fbc8 	bl	800511c <vPortExitCritical>
				return pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	e063      	b.n	8005a58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005996:	f7ff fbc1 	bl	800511c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800599a:	2300      	movs	r3, #0
 800599c:	e05c      	b.n	8005a58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ff39 	bl	8006820 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b2:	f7ff fbb3 	bl	800511c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b6:	f000 fced 	bl	8006394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ba:	f7ff fb81 	bl	80050c0 <vPortEnterCritical>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ca:	d103      	bne.n	80059d4 <xQueueGenericSend+0x164>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x17a>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ea:	f7ff fb97 	bl	800511c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 ff36 	bl	8006868 <xTaskCheckForTimeOut>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d124      	bne.n	8005a4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a04:	f000 fb3f 	bl	8006086 <prvIsQueueFull>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	3310      	adds	r3, #16
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fe7c 	bl	8006714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1e:	f000 faca 	bl	8005fb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a22:	f000 fcc5 	bl	80063b0 <xTaskResumeAll>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f af7c 	bne.w	8005926 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xQueueGenericSend+0x1f0>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e772      	b.n	8005926 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 fab8 	bl	8005fb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a46:	f000 fcb3 	bl	80063b0 <xTaskResumeAll>
 8005a4a:	e76c      	b.n	8005926 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4e:	f000 fab2 	bl	8005fb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a52:	f000 fcad 	bl	80063b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a56:	2300      	movs	r3, #0
		}
	}
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3738      	adds	r7, #56	; 0x38
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <xQueueGiveFromISR+0x28>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	e7fe      	b.n	8005a8a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d009      	beq.n	8005aa8 <xQueueGiveFromISR+0x44>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e7fe      	b.n	8005aa6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d103      	bne.n	8005ab8 <xQueueGiveFromISR+0x54>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <xQueueGiveFromISR+0x58>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <xQueueGiveFromISR+0x5a>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <xQueueGiveFromISR+0x72>
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ad6:	f7ff fbc5 	bl	8005264 <vPortValidateInterruptPriority>
	__asm volatile
 8005ada:	f3ef 8211 	mrs	r2, BASEPRI
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	617a      	str	r2, [r7, #20]
 8005af0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005af2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d92b      	bls.n	8005b5e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b20:	d112      	bne.n	8005b48 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d016      	beq.n	8005b58 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	3324      	adds	r3, #36	; 0x24
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fe14 	bl	800675c <xTaskRemoveFromEventList>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e007      	b.n	8005b58 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	b25a      	sxtb	r2, r3
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5c:	e001      	b.n	8005b62 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3738      	adds	r7, #56	; 0x38
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	; 0x38
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <xQueueGenericReceive+0x30>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba6:	e7fe      	b.n	8005ba6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d103      	bne.n	8005bb6 <xQueueGenericReceive+0x3e>
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xQueueGenericReceive+0x42>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueGenericReceive+0x44>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <xQueueGenericReceive+0x5c>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	e7fe      	b.n	8005bd2 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bd4:	f000 ff8c 	bl	8006af0 <xTaskGetSchedulerState>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <xQueueGenericReceive+0x6c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <xQueueGenericReceive+0x70>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <xQueueGenericReceive+0x72>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <xQueueGenericReceive+0x8a>
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e7fe      	b.n	8005c00 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c02:	f7ff fa5d 	bl	80050c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d046      	beq.n	8005ca0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1c:	f000 f9a5 	bl	8005f6a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d121      	bne.n	8005c6a <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	1e5a      	subs	r2, r3, #1
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005c36:	f001 f873 	bl	8006d20 <pvTaskIncrementMutexHeldCount>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d027      	beq.n	8005c98 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	3310      	adds	r3, #16
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fd85 	bl	800675c <xTaskRemoveFromEventList>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01f      	beq.n	8005c98 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8005c58:	4b4f      	ldr	r3, [pc, #316]	; (8005d98 <xQueueGenericReceive+0x220>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	e016      	b.n	8005c98 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00f      	beq.n	8005c98 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fd6d 	bl	800675c <xTaskRemoveFromEventList>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c88:	4b43      	ldr	r3, [pc, #268]	; (8005d98 <xQueueGenericReceive+0x220>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005c98:	f7ff fa40 	bl	800511c <vPortExitCritical>
				return pdPASS;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e077      	b.n	8005d90 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ca6:	f7ff fa39 	bl	800511c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e070      	b.n	8005d90 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fdb1 	bl	8006820 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cc2:	f7ff fa2b 	bl	800511c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cc6:	f000 fb65 	bl	8006394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cca:	f7ff f9f9 	bl	80050c0 <vPortEnterCritical>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd4:	b25b      	sxtb	r3, r3
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cda:	d103      	bne.n	8005ce4 <xQueueGenericReceive+0x16c>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	b25b      	sxtb	r3, r3
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf0:	d103      	bne.n	8005cfa <xQueueGenericReceive+0x182>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cfa:	f7ff fa0f 	bl	800511c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fdae 	bl	8006868 <xTaskCheckForTimeOut>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d131      	bne.n	8005d76 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d14:	f000 f9a1 	bl	800605a <prvIsQueueEmpty>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d025      	beq.n	8005d6a <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8005d26:	f7ff f9cb 	bl	80050c0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fefc 	bl	8006b2c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005d34:	f7ff f9f2 	bl	800511c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	3324      	adds	r3, #36	; 0x24
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fce7 	bl	8006714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d48:	f000 f935 	bl	8005fb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d4c:	f000 fb30 	bl	80063b0 <xTaskResumeAll>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f47f af55 	bne.w	8005c02 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <xQueueGenericReceive+0x220>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	e74b      	b.n	8005c02 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6c:	f000 f923 	bl	8005fb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d70:	f000 fb1e 	bl	80063b0 <xTaskResumeAll>
 8005d74:	e745      	b.n	8005c02 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d78:	f000 f91d 	bl	8005fb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d7c:	f000 fb18 	bl	80063b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d82:	f000 f96a 	bl	800605a <prvIsQueueEmpty>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f43f af3a 	beq.w	8005c02 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <xQueueReceiveFromISR+0x2a>
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <xQueueReceiveFromISR+0x38>
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <xQueueReceiveFromISR+0x3c>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <xQueueReceiveFromISR+0x3e>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <xQueueReceiveFromISR+0x56>
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e7fe      	b.n	8005df0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005df2:	f7ff fa37 	bl	8005264 <vPortValidateInterruptPriority>
	__asm volatile
 8005df6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	61ba      	str	r2, [r7, #24]
 8005e0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d02f      	beq.n	8005e7e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2c:	f000 f89d 	bl	8005f6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	1e5a      	subs	r2, r3, #1
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e40:	d112      	bne.n	8005e68 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d016      	beq.n	8005e78 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	3310      	adds	r3, #16
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc84 	bl	800675c <xTaskRemoveFromEventList>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00e      	beq.n	8005e78 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e007      	b.n	8005e78 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	b25a      	sxtb	r2, r3
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7c:	e001      	b.n	8005e82 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3738      	adds	r7, #56	; 0x38
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b086      	sub	sp, #24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10d      	bne.n	8005ed0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d14d      	bne.n	8005f58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fea9 	bl	8006c18 <xTaskPriorityDisinherit>
 8005ec6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	e043      	b.n	8005f58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d119      	bne.n	8005f0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6898      	ldr	r0, [r3, #8]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	f007 f899 	bl	800d018 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	441a      	add	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d32b      	bcc.n	8005f58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	e026      	b.n	8005f58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68d8      	ldr	r0, [r3, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	461a      	mov	r2, r3
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	f007 f87f 	bl	800d018 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	425b      	negs	r3, r3
 8005f24:	441a      	add	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d207      	bcs.n	8005f46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	425b      	negs	r3, r3
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d105      	bne.n	8005f58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f60:	697b      	ldr	r3, [r7, #20]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d018      	beq.n	8005fae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d303      	bcc.n	8005f9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68d9      	ldr	r1, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6838      	ldr	r0, [r7, #0]
 8005faa:	f007 f835 	bl	800d018 <memcpy>
	}
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fbe:	f7ff f87f 	bl	80050c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fca:	e011      	b.n	8005ff0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fbbf 	bl	800675c <xTaskRemoveFromEventList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fe4:	f000 fc9e 	bl	8006924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	dce9      	bgt.n	8005fcc <prvUnlockQueue+0x16>
 8005ff8:	e000      	b.n	8005ffc <prvUnlockQueue+0x46>
					break;
 8005ffa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	22ff      	movs	r2, #255	; 0xff
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006004:	f7ff f88a 	bl	800511c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006008:	f7ff f85a 	bl	80050c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006012:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006014:	e011      	b.n	800603a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d012      	beq.n	8006044 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3310      	adds	r3, #16
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb9a 	bl	800675c <xTaskRemoveFromEventList>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800602e:	f000 fc79 	bl	8006924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006032:	7bbb      	ldrb	r3, [r7, #14]
 8006034:	3b01      	subs	r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800603a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800603e:	2b00      	cmp	r3, #0
 8006040:	dce9      	bgt.n	8006016 <prvUnlockQueue+0x60>
 8006042:	e000      	b.n	8006046 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006044:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800604e:	f7ff f865 	bl	800511c <vPortExitCritical>
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006062:	f7ff f82d 	bl	80050c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800606e:	2301      	movs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e001      	b.n	8006078 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006078:	f7ff f850 	bl	800511c <vPortExitCritical>

	return xReturn;
 800607c:	68fb      	ldr	r3, [r7, #12]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800608e:	f7ff f817 	bl	80050c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	429a      	cmp	r2, r3
 800609c:	d102      	bne.n	80060a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800609e:	2301      	movs	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	e001      	b.n	80060a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060a8:	f7ff f838 	bl	800511c <vPortExitCritical>

	return xReturn;
 80060ac:	68fb      	ldr	r3, [r7, #12]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08c      	sub	sp, #48	; 0x30
 80060ba:	af04      	add	r7, sp, #16
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff f908 	bl	80052e0 <pvPortMalloc>
 80060d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80060d8:	2054      	movs	r0, #84	; 0x54
 80060da:	f7ff f901 	bl	80052e0 <pvPortMalloc>
 80060de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
 80060ec:	e005      	b.n	80060fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f7ff f9b8 	bl	8005464 <vPortFree>
 80060f4:	e001      	b.n	80060fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d013      	beq.n	8006128 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	2300      	movs	r3, #0
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f80e 	bl	8006138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800611c:	69f8      	ldr	r0, [r7, #28]
 800611e:	f000 f889 	bl	8006234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006122:	2301      	movs	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e002      	b.n	800612e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800612c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800612e:	69bb      	ldr	r3, [r7, #24]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006150:	3b01      	subs	r3, #1
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <prvInitialiseNewTask+0x46>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e7fe      	b.n	800617c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e012      	b.n	80061aa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	7819      	ldrb	r1, [r3, #0]
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	3334      	adds	r3, #52	; 0x34
 8006194:	460a      	mov	r2, r1
 8006196:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d006      	beq.n	80061b2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d9e9      	bls.n	8006184 <prvInitialiseNewTask+0x4c>
 80061b0:	e000      	b.n	80061b4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80061b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d901      	bls.n	80061c6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061c2:	2306      	movs	r3, #6
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2200      	movs	r2, #0
 80061d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fdd8 	bl	8004d92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	3318      	adds	r3, #24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fdd3 	bl	8004d92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	f1c3 0207 	rsb	r2, r3, #7
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006200:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2200      	movs	r2, #0
 8006206:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	69b8      	ldr	r0, [r7, #24]
 8006216:	f7fe fe51 	bl	8004ebc <pxPortInitialiseStack>
 800621a:	4602      	mov	r2, r0
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800622c:	bf00      	nop
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800623c:	f7fe ff40 	bl	80050c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006240:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <prvAddNewTaskToReadyList+0xb8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4a29      	ldr	r2, [pc, #164]	; (80062ec <prvAddNewTaskToReadyList+0xb8>)
 8006248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800624a:	4b29      	ldr	r3, [pc, #164]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006252:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006258:	4b24      	ldr	r3, [pc, #144]	; (80062ec <prvAddNewTaskToReadyList+0xb8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d110      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006260:	f000 fb84 	bl	800696c <prvInitialiseTaskLists>
 8006264:	e00d      	b.n	8006282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006266:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <prvAddNewTaskToReadyList+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800626e:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	429a      	cmp	r2, r3
 800627a:	d802      	bhi.n	8006282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800627c:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006282:	4b1d      	ldr	r3, [pc, #116]	; (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 800628a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	4b19      	ldr	r3, [pc, #100]	; (80062fc <prvAddNewTaskToReadyList+0xc8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4313      	orrs	r3, r2
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <prvAddNewTaskToReadyList+0xc8>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a15      	ldr	r2, [pc, #84]	; (8006300 <prvAddNewTaskToReadyList+0xcc>)
 80062ac:	441a      	add	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7fe fd79 	bl	8004dac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062ba:	f7fe ff2f 	bl	800511c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062be:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <prvAddNewTaskToReadyList+0xc0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00e      	beq.n	80062e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d207      	bcs.n	80062e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <prvAddNewTaskToReadyList+0xd0>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20004004 	.word	0x20004004
 80062f0:	20003f04 	.word	0x20003f04
 80062f4:	20004010 	.word	0x20004010
 80062f8:	20004020 	.word	0x20004020
 80062fc:	2000400c 	.word	0x2000400c
 8006300:	20003f08 	.word	0x20003f08
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <vTaskStartScheduler+0x74>)
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	2300      	movs	r3, #0
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	2300      	movs	r3, #0
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	4919      	ldr	r1, [pc, #100]	; (8006380 <vTaskStartScheduler+0x78>)
 800631c:	4819      	ldr	r0, [pc, #100]	; (8006384 <vTaskStartScheduler+0x7c>)
 800631e:	f7ff feca 	bl	80060b6 <xTaskCreate>
 8006322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d115      	bne.n	8006356 <vTaskStartScheduler+0x4e>
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800633c:	4b12      	ldr	r3, [pc, #72]	; (8006388 <vTaskStartScheduler+0x80>)
 800633e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006342:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006344:	4b11      	ldr	r3, [pc, #68]	; (800638c <vTaskStartScheduler+0x84>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <vTaskStartScheduler+0x88>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006350:	f7fe fe2a 	bl	8004fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006354:	e00d      	b.n	8006372 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635c:	d109      	bne.n	8006372 <vTaskStartScheduler+0x6a>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
 8006370:	e7fe      	b.n	8006370 <vTaskStartScheduler+0x68>
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20004028 	.word	0x20004028
 8006380:	0800d08c 	.word	0x0800d08c
 8006384:	0800693d 	.word	0x0800693d
 8006388:	20004024 	.word	0x20004024
 800638c:	20004010 	.word	0x20004010
 8006390:	20004008 	.word	0x20004008

08006394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <vTaskSuspendAll+0x18>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a03      	ldr	r2, [pc, #12]	; (80063ac <vTaskSuspendAll+0x18>)
 80063a0:	6013      	str	r3, [r2, #0]
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	2000402c 	.word	0x2000402c

080063b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063be:	4b41      	ldr	r3, [pc, #260]	; (80064c4 <xTaskResumeAll+0x114>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <xTaskResumeAll+0x2a>
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	e7fe      	b.n	80063d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063da:	f7fe fe71 	bl	80050c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063de:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <xTaskResumeAll+0x114>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	4a37      	ldr	r2, [pc, #220]	; (80064c4 <xTaskResumeAll+0x114>)
 80063e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e8:	4b36      	ldr	r3, [pc, #216]	; (80064c4 <xTaskResumeAll+0x114>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d161      	bne.n	80064b4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063f0:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <xTaskResumeAll+0x118>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d05d      	beq.n	80064b4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063f8:	e02e      	b.n	8006458 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063fa:	4b34      	ldr	r3, [pc, #208]	; (80064cc <xTaskResumeAll+0x11c>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3318      	adds	r3, #24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fd2d 	bl	8004e66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fd28 	bl	8004e66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	2201      	movs	r2, #1
 800641c:	409a      	lsls	r2, r3
 800641e:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <xTaskResumeAll+0x120>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4313      	orrs	r3, r2
 8006424:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <xTaskResumeAll+0x120>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <xTaskResumeAll+0x124>)
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe fcb4 	bl	8004dac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <xTaskResumeAll+0x128>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006452:	4b22      	ldr	r3, [pc, #136]	; (80064dc <xTaskResumeAll+0x12c>)
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006458:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <xTaskResumeAll+0x11c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1cc      	bne.n	80063fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006466:	f000 fb0d 	bl	8006a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800646a:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <xTaskResumeAll+0x130>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d010      	beq.n	8006498 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006476:	f000 f837 	bl	80064e8 <xTaskIncrementTick>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006480:	4b16      	ldr	r3, [pc, #88]	; (80064dc <xTaskResumeAll+0x12c>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3b01      	subs	r3, #1
 800648a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f1      	bne.n	8006476 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <xTaskResumeAll+0x130>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006498:	4b10      	ldr	r3, [pc, #64]	; (80064dc <xTaskResumeAll+0x12c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <xTaskResumeAll+0x134>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064b4:	f7fe fe32 	bl	800511c <vPortExitCritical>

	return xAlreadyYielded;
 80064b8:	68bb      	ldr	r3, [r7, #8]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	2000402c 	.word	0x2000402c
 80064c8:	20004004 	.word	0x20004004
 80064cc:	20003fc4 	.word	0x20003fc4
 80064d0:	2000400c 	.word	0x2000400c
 80064d4:	20003f08 	.word	0x20003f08
 80064d8:	20003f04 	.word	0x20003f04
 80064dc:	20004018 	.word	0x20004018
 80064e0:	20004014 	.word	0x20004014
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f2:	4b50      	ldr	r3, [pc, #320]	; (8006634 <xTaskIncrementTick+0x14c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 808c 	bne.w	8006614 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80064fc:	4b4e      	ldr	r3, [pc, #312]	; (8006638 <xTaskIncrementTick+0x150>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006504:	4a4c      	ldr	r2, [pc, #304]	; (8006638 <xTaskIncrementTick+0x150>)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11f      	bne.n	8006550 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006510:	4b4a      	ldr	r3, [pc, #296]	; (800663c <xTaskIncrementTick+0x154>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <xTaskIncrementTick+0x46>
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	e7fe      	b.n	800652c <xTaskIncrementTick+0x44>
 800652e:	4b43      	ldr	r3, [pc, #268]	; (800663c <xTaskIncrementTick+0x154>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	4b42      	ldr	r3, [pc, #264]	; (8006640 <xTaskIncrementTick+0x158>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a40      	ldr	r2, [pc, #256]	; (800663c <xTaskIncrementTick+0x154>)
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	4a40      	ldr	r2, [pc, #256]	; (8006640 <xTaskIncrementTick+0x158>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b40      	ldr	r3, [pc, #256]	; (8006644 <xTaskIncrementTick+0x15c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	4a3e      	ldr	r2, [pc, #248]	; (8006644 <xTaskIncrementTick+0x15c>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	f000 fa9a 	bl	8006a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006550:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <xTaskIncrementTick+0x160>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d34d      	bcc.n	80065f6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800655a:	4b38      	ldr	r3, [pc, #224]	; (800663c <xTaskIncrementTick+0x154>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <xTaskIncrementTick+0x80>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <xTaskIncrementTick+0x82>
 8006568:	2300      	movs	r3, #0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656e:	4b36      	ldr	r3, [pc, #216]	; (8006648 <xTaskIncrementTick+0x160>)
 8006570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006574:	601a      	str	r2, [r3, #0]
					break;
 8006576:	e03e      	b.n	80065f6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006578:	4b30      	ldr	r3, [pc, #192]	; (800663c <xTaskIncrementTick+0x154>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d203      	bcs.n	8006598 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006590:	4a2d      	ldr	r2, [pc, #180]	; (8006648 <xTaskIncrementTick+0x160>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6013      	str	r3, [r2, #0]
						break;
 8006596:	e02e      	b.n	80065f6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	3304      	adds	r3, #4
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fc62 	bl	8004e66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3318      	adds	r3, #24
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fc59 	bl	8004e66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	2201      	movs	r2, #1
 80065ba:	409a      	lsls	r2, r3
 80065bc:	4b23      	ldr	r3, [pc, #140]	; (800664c <xTaskIncrementTick+0x164>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	4a22      	ldr	r2, [pc, #136]	; (800664c <xTaskIncrementTick+0x164>)
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <xTaskIncrementTick+0x168>)
 80065d4:	441a      	add	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7fe fbe5 	bl	8004dac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e6:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <xTaskIncrementTick+0x16c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3b4      	bcc.n	800655a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f4:	e7b1      	b.n	800655a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065f6:	4b17      	ldr	r3, [pc, #92]	; (8006654 <xTaskIncrementTick+0x16c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	4914      	ldr	r1, [pc, #80]	; (8006650 <xTaskIncrementTick+0x168>)
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d907      	bls.n	800661e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800660e:	2301      	movs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e004      	b.n	800661e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006614:	4b10      	ldr	r3, [pc, #64]	; (8006658 <xTaskIncrementTick+0x170>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	4a0f      	ldr	r2, [pc, #60]	; (8006658 <xTaskIncrementTick+0x170>)
 800661c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <xTaskIncrementTick+0x174>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006626:	2301      	movs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800662a:	697b      	ldr	r3, [r7, #20]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000402c 	.word	0x2000402c
 8006638:	20004008 	.word	0x20004008
 800663c:	20003fbc 	.word	0x20003fbc
 8006640:	20003fc0 	.word	0x20003fc0
 8006644:	2000401c 	.word	0x2000401c
 8006648:	20004024 	.word	0x20004024
 800664c:	2000400c 	.word	0x2000400c
 8006650:	20003f08 	.word	0x20003f08
 8006654:	20003f04 	.word	0x20003f04
 8006658:	20004014 	.word	0x20004014
 800665c:	20004018 	.word	0x20004018

08006660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006666:	4b26      	ldr	r3, [pc, #152]	; (8006700 <vTaskSwitchContext+0xa0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800666e:	4b25      	ldr	r3, [pc, #148]	; (8006704 <vTaskSwitchContext+0xa4>)
 8006670:	2201      	movs	r2, #1
 8006672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006674:	e03e      	b.n	80066f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <vTaskSwitchContext+0xa4>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800667c:	4b22      	ldr	r3, [pc, #136]	; (8006708 <vTaskSwitchContext+0xa8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	fab3 f383 	clz	r3, r3
 8006688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f1c3 031f 	rsb	r3, r3, #31
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	491e      	ldr	r1, [pc, #120]	; (800670c <vTaskSwitchContext+0xac>)
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	e7fe      	b.n	80066b8 <vTaskSwitchContext+0x58>
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4a11      	ldr	r2, [pc, #68]	; (800670c <vTaskSwitchContext+0xac>)
 80066c6:	4413      	add	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	605a      	str	r2, [r3, #4]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	3308      	adds	r3, #8
 80066dc:	429a      	cmp	r2, r3
 80066de:	d104      	bne.n	80066ea <vTaskSwitchContext+0x8a>
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a07      	ldr	r2, [pc, #28]	; (8006710 <vTaskSwitchContext+0xb0>)
 80066f2:	6013      	str	r3, [r2, #0]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	2000402c 	.word	0x2000402c
 8006704:	20004018 	.word	0x20004018
 8006708:	2000400c 	.word	0x2000400c
 800670c:	20003f08 	.word	0x20003f08
 8006710:	20003f04 	.word	0x20003f04

08006714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <vTaskPlaceOnEventList+0x24>
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e7fe      	b.n	8006736 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <vTaskPlaceOnEventList+0x44>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3318      	adds	r3, #24
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fe fb57 	bl	8004df4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006746:	2101      	movs	r1, #1
 8006748:	6838      	ldr	r0, [r7, #0]
 800674a:	f000 fafd 	bl	8006d48 <prvAddCurrentTaskToDelayedList>
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20003f04 	.word	0x20003f04

0800675c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <xTaskRemoveFromEventList+0x2a>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e7fe      	b.n	8006784 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3318      	adds	r3, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fb6b 	bl	8004e66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <xTaskRemoveFromEventList+0xac>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11c      	bne.n	80067d2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fb62 	bl	8004e66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	2201      	movs	r2, #1
 80067a8:	409a      	lsls	r2, r3
 80067aa:	4b18      	ldr	r3, [pc, #96]	; (800680c <xTaskRemoveFromEventList+0xb0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	4a16      	ldr	r2, [pc, #88]	; (800680c <xTaskRemoveFromEventList+0xb0>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4a13      	ldr	r2, [pc, #76]	; (8006810 <xTaskRemoveFromEventList+0xb4>)
 80067c2:	441a      	add	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7fe faee 	bl	8004dac <vListInsertEnd>
 80067d0:	e005      	b.n	80067de <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3318      	adds	r3, #24
 80067d6:	4619      	mov	r1, r3
 80067d8:	480e      	ldr	r0, [pc, #56]	; (8006814 <xTaskRemoveFromEventList+0xb8>)
 80067da:	f7fe fae7 	bl	8004dac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e2:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <xTaskRemoveFromEventList+0xbc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d905      	bls.n	80067f8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <xTaskRemoveFromEventList+0xc0>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e001      	b.n	80067fc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80067fc:	697b      	ldr	r3, [r7, #20]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000402c 	.word	0x2000402c
 800680c:	2000400c 	.word	0x2000400c
 8006810:	20003f08 	.word	0x20003f08
 8006814:	20003fc4 	.word	0x20003fc4
 8006818:	20003f04 	.word	0x20003f04
 800681c:	20004018 	.word	0x20004018

08006820 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <vTaskSetTimeOutState+0x22>
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e7fe      	b.n	8006840 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006842:	4b07      	ldr	r3, [pc, #28]	; (8006860 <vTaskSetTimeOutState+0x40>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <vTaskSetTimeOutState+0x44>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	605a      	str	r2, [r3, #4]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	2000401c 	.word	0x2000401c
 8006864:	20004008 	.word	0x20004008

08006868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <xTaskCheckForTimeOut+0x24>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e7fe      	b.n	800688a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <xTaskCheckForTimeOut+0x3e>
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	e7fe      	b.n	80068a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80068a6:	f7fe fc0b 	bl	80050c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068aa:	4b1c      	ldr	r3, [pc, #112]	; (800691c <xTaskCheckForTimeOut+0xb4>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b8:	d102      	bne.n	80068c0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e026      	b.n	800690e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <xTaskCheckForTimeOut+0xb8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d007      	beq.n	80068dc <xTaskCheckForTimeOut+0x74>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d802      	bhi.n	80068dc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e018      	b.n	800690e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d20e      	bcs.n	800690a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1acb      	subs	r3, r1, r3
 80068f8:	441a      	add	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff ff8e 	bl	8006820 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e001      	b.n	800690e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800690a:	2301      	movs	r3, #1
 800690c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800690e:	f7fe fc05 	bl	800511c <vPortExitCritical>

	return xReturn;
 8006912:	697b      	ldr	r3, [r7, #20]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20004008 	.word	0x20004008
 8006920:	2000401c 	.word	0x2000401c

08006924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <vTaskMissedYield+0x14>)
 800692a:	2201      	movs	r2, #1
 800692c:	601a      	str	r2, [r3, #0]
}
 800692e:	bf00      	nop
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20004018 	.word	0x20004018

0800693c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006944:	f000 f852 	bl	80069ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <prvIdleTask+0x28>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d9f9      	bls.n	8006944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <prvIdleTask+0x2c>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006960:	e7f0      	b.n	8006944 <prvIdleTask+0x8>
 8006962:	bf00      	nop
 8006964:	20003f08 	.word	0x20003f08
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	e00c      	b.n	8006992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4a12      	ldr	r2, [pc, #72]	; (80069cc <prvInitialiseTaskLists+0x60>)
 8006984:	4413      	add	r3, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe f9e3 	bl	8004d52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3301      	adds	r3, #1
 8006990:	607b      	str	r3, [r7, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b06      	cmp	r3, #6
 8006996:	d9ef      	bls.n	8006978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006998:	480d      	ldr	r0, [pc, #52]	; (80069d0 <prvInitialiseTaskLists+0x64>)
 800699a:	f7fe f9da 	bl	8004d52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800699e:	480d      	ldr	r0, [pc, #52]	; (80069d4 <prvInitialiseTaskLists+0x68>)
 80069a0:	f7fe f9d7 	bl	8004d52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069a4:	480c      	ldr	r0, [pc, #48]	; (80069d8 <prvInitialiseTaskLists+0x6c>)
 80069a6:	f7fe f9d4 	bl	8004d52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069aa:	480c      	ldr	r0, [pc, #48]	; (80069dc <prvInitialiseTaskLists+0x70>)
 80069ac:	f7fe f9d1 	bl	8004d52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069b0:	480b      	ldr	r0, [pc, #44]	; (80069e0 <prvInitialiseTaskLists+0x74>)
 80069b2:	f7fe f9ce 	bl	8004d52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <prvInitialiseTaskLists+0x78>)
 80069b8:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <prvInitialiseTaskLists+0x64>)
 80069ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <prvInitialiseTaskLists+0x7c>)
 80069be:	4a05      	ldr	r2, [pc, #20]	; (80069d4 <prvInitialiseTaskLists+0x68>)
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20003f08 	.word	0x20003f08
 80069d0:	20003f94 	.word	0x20003f94
 80069d4:	20003fa8 	.word	0x20003fa8
 80069d8:	20003fc4 	.word	0x20003fc4
 80069dc:	20003fd8 	.word	0x20003fd8
 80069e0:	20003ff0 	.word	0x20003ff0
 80069e4:	20003fbc 	.word	0x20003fbc
 80069e8:	20003fc0 	.word	0x20003fc0

080069ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069f2:	e028      	b.n	8006a46 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80069f4:	f7ff fcce 	bl	8006394 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80069f8:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <prvCheckTasksWaitingTermination+0x6c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006a08:	f7ff fcd2 	bl	80063b0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d119      	bne.n	8006a46 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006a12:	f7fe fb55 	bl	80050c0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <prvCheckTasksWaitingTermination+0x6c>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fa1f 	bl	8004e66 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <prvCheckTasksWaitingTermination+0x70>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <prvCheckTasksWaitingTermination+0x70>)
 8006a30:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <prvCheckTasksWaitingTermination+0x74>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <prvCheckTasksWaitingTermination+0x74>)
 8006a3a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8006a3c:	f7fe fb6e 	bl	800511c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006a40:	6838      	ldr	r0, [r7, #0]
 8006a42:	f000 f80f 	bl	8006a64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <prvCheckTasksWaitingTermination+0x74>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1d2      	bne.n	80069f4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20003fd8 	.word	0x20003fd8
 8006a5c:	20004004 	.word	0x20004004
 8006a60:	20003fec 	.word	0x20003fec

08006a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fcf7 	bl	8005464 <vPortFree>
			vPortFree( pxTCB );
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fe fcf4 	bl	8005464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <prvResetNextTaskUnblockTime+0x44>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <prvResetNextTaskUnblockTime+0x14>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <prvResetNextTaskUnblockTime+0x16>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <prvResetNextTaskUnblockTime+0x48>)
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aa4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006aa6:	e008      	b.n	8006aba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <prvResetNextTaskUnblockTime+0x44>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4a05      	ldr	r2, [pc, #20]	; (8006acc <prvResetNextTaskUnblockTime+0x48>)
 8006ab8:	6013      	str	r3, [r2, #0]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20003fbc 	.word	0x20003fbc
 8006acc:	20004024 	.word	0x20004024

08006ad0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <xTaskGetCurrentTaskHandle+0x1c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006adc:	687b      	ldr	r3, [r7, #4]
	}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20003f04 	.word	0x20003f04

08006af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <xTaskGetSchedulerState+0x34>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006afe:	2301      	movs	r3, #1
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	e008      	b.n	8006b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <xTaskGetSchedulerState+0x38>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	607b      	str	r3, [r7, #4]
 8006b10:	e001      	b.n	8006b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b12:	2300      	movs	r3, #0
 8006b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b16:	687b      	ldr	r3, [r7, #4]
	}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	20004010 	.word	0x20004010
 8006b28:	2000402c 	.word	0x2000402c

08006b2c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d062      	beq.n	8006c04 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <vTaskPriorityInherit+0xe0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d25b      	bcs.n	8006c04 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	db06      	blt.n	8006b62 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b54:	4b2d      	ldr	r3, [pc, #180]	; (8006c0c <vTaskPriorityInherit+0xe0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	f1c3 0207 	rsb	r2, r3, #7
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6959      	ldr	r1, [r3, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <vTaskPriorityInherit+0xe4>)
 8006b74:	4413      	add	r3, r2
 8006b76:	4299      	cmp	r1, r3
 8006b78:	d101      	bne.n	8006b7e <vTaskPriorityInherit+0x52>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <vTaskPriorityInherit+0x54>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d03a      	beq.n	8006bfa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe f96c 	bl	8004e66 <uxListRemove>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d115      	bne.n	8006bc0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	491d      	ldr	r1, [pc, #116]	; (8006c10 <vTaskPriorityInherit+0xe4>)
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <vTaskPriorityInherit+0x94>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	2201      	movs	r2, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43da      	mvns	r2, r3
 8006bb6:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <vTaskPriorityInherit+0xe8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <vTaskPriorityInherit+0xe8>)
 8006bbe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bc0:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <vTaskPriorityInherit+0xe0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	2201      	movs	r2, #1
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <vTaskPriorityInherit+0xe8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	4a0e      	ldr	r2, [pc, #56]	; (8006c14 <vTaskPriorityInherit+0xe8>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <vTaskPriorityInherit+0xe4>)
 8006bea:	441a      	add	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe f8da 	bl	8004dac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bf8:	e004      	b.n	8006c04 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <vTaskPriorityInherit+0xe0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20003f04 	.word	0x20003f04
 8006c10:	20003f08 	.word	0x20003f08
 8006c14:	2000400c 	.word	0x2000400c

08006c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d06c      	beq.n	8006d08 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c2e:	4b39      	ldr	r3, [pc, #228]	; (8006d14 <xTaskPriorityDisinherit+0xfc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d009      	beq.n	8006c4c <xTaskPriorityDisinherit+0x34>
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e7fe      	b.n	8006c4a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <xTaskPriorityDisinherit+0x50>
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	e7fe      	b.n	8006c66 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	1e5a      	subs	r2, r3, #1
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d044      	beq.n	8006d08 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d140      	bne.n	8006d08 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe f8eb 	bl	8004e66 <uxListRemove>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d115      	bne.n	8006cc2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9a:	491f      	ldr	r1, [pc, #124]	; (8006d18 <xTaskPriorityDisinherit+0x100>)
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xTaskPriorityDisinherit+0xaa>
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <xTaskPriorityDisinherit+0x104>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <xTaskPriorityDisinherit+0x104>)
 8006cc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	f1c3 0207 	rsb	r2, r3, #7
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	2201      	movs	r2, #1
 8006cdc:	409a      	lsls	r2, r3
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <xTaskPriorityDisinherit+0x104>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	4a0d      	ldr	r2, [pc, #52]	; (8006d1c <xTaskPriorityDisinherit+0x104>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4a08      	ldr	r2, [pc, #32]	; (8006d18 <xTaskPriorityDisinherit+0x100>)
 8006cf6:	441a      	add	r2, r3
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4610      	mov	r0, r2
 8006d00:	f7fe f854 	bl	8004dac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d08:	697b      	ldr	r3, [r7, #20]
	}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20003f04 	.word	0x20003f04
 8006d18:	20003f08 	.word	0x20003f08
 8006d1c:	2000400c 	.word	0x2000400c

08006d20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d24:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d32:	3201      	adds	r2, #1
 8006d34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d38:	681b      	ldr	r3, [r3, #0]
	}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20003f04 	.word	0x20003f04

08006d48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d52:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d58:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe f881 	bl	8004e66 <uxListRemove>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	2201      	movs	r2, #1
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43da      	mvns	r2, r3
 8006d78:	4b21      	ldr	r3, [pc, #132]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d88:	d10a      	bne.n	8006da0 <prvAddCurrentTaskToDelayedList+0x58>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	481a      	ldr	r0, [pc, #104]	; (8006e04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d9a:	f7fe f807 	bl	8004dac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d9e:	e026      	b.n	8006dee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d209      	bcs.n	8006dcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fe f815 	bl	8004df4 <vListInsert>
}
 8006dca:	e010      	b.n	8006dee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fe f80b 	bl	8004df4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d202      	bcs.n	8006dee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6013      	str	r3, [r2, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20004008 	.word	0x20004008
 8006dfc:	20003f04 	.word	0x20003f04
 8006e00:	2000400c 	.word	0x2000400c
 8006e04:	20003ff0 	.word	0x20003ff0
 8006e08:	20003fc0 	.word	0x20003fc0
 8006e0c:	20003fbc 	.word	0x20003fbc
 8006e10:	20004024 	.word	0x20004024

08006e14 <MyLCD_PowerOn>:
MyLCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void MyLCD_PowerOn(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
	MyLCD_WriteCommand(0xCA);
 8006e18:	20ca      	movs	r0, #202	; 0xca
 8006e1a:	f000 f943 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC3);
 8006e1e:	20c3      	movs	r0, #195	; 0xc3
 8006e20:	f000 f96a 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x08);
 8006e24:	2008      	movs	r0, #8
 8006e26:	f000 f967 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x50);
 8006e2a:	2050      	movs	r0, #80	; 0x50
 8006e2c:	f000 f964 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWERB);
 8006e30:	20cf      	movs	r0, #207	; 0xcf
 8006e32:	f000 f937 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006e36:	2000      	movs	r0, #0
 8006e38:	f000 f95e 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0xC1);
 8006e3c:	20c1      	movs	r0, #193	; 0xc1
 8006e3e:	f000 f95b 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x30);
 8006e42:	2030      	movs	r0, #48	; 0x30
 8006e44:	f000 f958 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER_SEQ);
 8006e48:	20ed      	movs	r0, #237	; 0xed
 8006e4a:	f000 f92b 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x64);
 8006e4e:	2064      	movs	r0, #100	; 0x64
 8006e50:	f000 f952 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x03);
 8006e54:	2003      	movs	r0, #3
 8006e56:	f000 f94f 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x12);
 8006e5a:	2012      	movs	r0, #18
 8006e5c:	f000 f94c 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x81);
 8006e60:	2081      	movs	r0, #129	; 0x81
 8006e62:	f000 f949 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DTCA);
 8006e66:	20e8      	movs	r0, #232	; 0xe8
 8006e68:	f000 f91c 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x85);
 8006e6c:	2085      	movs	r0, #133	; 0x85
 8006e6e:	f000 f943 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006e72:	2000      	movs	r0, #0
 8006e74:	f000 f940 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x78);
 8006e78:	2078      	movs	r0, #120	; 0x78
 8006e7a:	f000 f93d 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWERA);
 8006e7e:	20cb      	movs	r0, #203	; 0xcb
 8006e80:	f000 f910 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x39);
 8006e84:	2039      	movs	r0, #57	; 0x39
 8006e86:	f000 f937 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x2C);
 8006e8a:	202c      	movs	r0, #44	; 0x2c
 8006e8c:	f000 f934 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006e90:	2000      	movs	r0, #0
 8006e92:	f000 f931 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x34);
 8006e96:	2034      	movs	r0, #52	; 0x34
 8006e98:	f000 f92e 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x02);
 8006e9c:	2002      	movs	r0, #2
 8006e9e:	f000 f92b 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_PRC);
 8006ea2:	20f7      	movs	r0, #247	; 0xf7
 8006ea4:	f000 f8fe 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x20);
 8006ea8:	2020      	movs	r0, #32
 8006eaa:	f000 f925 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DTCB);
 8006eae:	20ea      	movs	r0, #234	; 0xea
 8006eb0:	f000 f8f8 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f000 f91f 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f000 f91c 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_FRC);
 8006ec0:	20b1      	movs	r0, #177	; 0xb1
 8006ec2:	f000 f8ef 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f000 f916 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x1B);
 8006ecc:	201b      	movs	r0, #27
 8006ece:	f000 f913 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DFC);
 8006ed2:	20b6      	movs	r0, #182	; 0xb6
 8006ed4:	f000 f8e6 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0A);
 8006ed8:	200a      	movs	r0, #10
 8006eda:	f000 f90d 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0xA2);
 8006ede:	20a2      	movs	r0, #162	; 0xa2
 8006ee0:	f000 f90a 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER1);
 8006ee4:	20c0      	movs	r0, #192	; 0xc0
 8006ee6:	f000 f8dd 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x10);
 8006eea:	2010      	movs	r0, #16
 8006eec:	f000 f904 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER2);
 8006ef0:	20c1      	movs	r0, #193	; 0xc1
 8006ef2:	f000 f8d7 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x10);
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f000 f8fe 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_VCOM1);
 8006efc:	20c5      	movs	r0, #197	; 0xc5
 8006efe:	f000 f8d1 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x45);
 8006f02:	2045      	movs	r0, #69	; 0x45
 8006f04:	f000 f8f8 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x15);
 8006f08:	2015      	movs	r0, #21
 8006f0a:	f000 f8f5 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_VCOM2);
 8006f0e:	20c7      	movs	r0, #199	; 0xc7
 8006f10:	f000 f8c8 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x90);
 8006f14:	2090      	movs	r0, #144	; 0x90
 8006f16:	f000 f8ef 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_MAC);
 8006f1a:	2036      	movs	r0, #54	; 0x36
 8006f1c:	f000 f8c2 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC8);
 8006f20:	20c8      	movs	r0, #200	; 0xc8
 8006f22:	f000 f8e9 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_3GAMMA_EN);
 8006f26:	20f2      	movs	r0, #242	; 0xf2
 8006f28:	f000 f8bc 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f000 f8e3 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_RGB_INTERFACE);
 8006f32:	20b0      	movs	r0, #176	; 0xb0
 8006f34:	f000 f8b6 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC2);
 8006f38:	20c2      	movs	r0, #194	; 0xc2
 8006f3a:	f000 f8dd 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DFC);
 8006f3e:	20b6      	movs	r0, #182	; 0xb6
 8006f40:	f000 f8b0 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0A);
 8006f44:	200a      	movs	r0, #10
 8006f46:	f000 f8d7 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0xA7);
 8006f4a:	20a7      	movs	r0, #167	; 0xa7
 8006f4c:	f000 f8d4 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x27);
 8006f50:	2027      	movs	r0, #39	; 0x27
 8006f52:	f000 f8d1 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x04);
 8006f56:	2004      	movs	r0, #4
 8006f58:	f000 f8ce 	bl	80070f8 <MyLCD_WriteData>

	/* colomn address set */
	MyLCD_WriteCommand(MyLCD_COLUMN_ADDR);
 8006f5c:	202a      	movs	r0, #42	; 0x2a
 8006f5e:	f000 f8a1 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006f62:	2000      	movs	r0, #0
 8006f64:	f000 f8c8 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006f68:	2000      	movs	r0, #0
 8006f6a:	f000 f8c5 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006f6e:	2000      	movs	r0, #0
 8006f70:	f000 f8c2 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0xEF);
 8006f74:	20ef      	movs	r0, #239	; 0xef
 8006f76:	f000 f8bf 	bl	80070f8 <MyLCD_WriteData>
	/* Page Address Set */
	MyLCD_WriteCommand(MyLCD_PAGE_ADDR);
 8006f7a:	202b      	movs	r0, #43	; 0x2b
 8006f7c:	f000 f892 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006f80:	2000      	movs	r0, #0
 8006f82:	f000 f8b9 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006f86:	2000      	movs	r0, #0
 8006f88:	f000 f8b6 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x01);
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	f000 f8b3 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x3F);
 8006f92:	203f      	movs	r0, #63	; 0x3f
 8006f94:	f000 f8b0 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_INTERFACE);
 8006f98:	20f6      	movs	r0, #246	; 0xf6
 8006f9a:	f000 f883 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x01);
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	f000 f8aa 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f000 f8a7 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x06);
 8006faa:	2006      	movs	r0, #6
 8006fac:	f000 f8a4 	bl	80070f8 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_GRAM);
 8006fb0:	202c      	movs	r0, #44	; 0x2c
 8006fb2:	f000 f877 	bl	80070a4 <MyLCD_WriteCommand>
	HAL_Delay(100);
 8006fb6:	2064      	movs	r0, #100	; 0x64
 8006fb8:	f7f9 fb14 	bl	80005e4 <HAL_Delay>

	MyLCD_WriteCommand(MyLCD_GAMMA);
 8006fbc:	2026      	movs	r0, #38	; 0x26
 8006fbe:	f000 f871 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x01);
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	f000 f898 	bl	80070f8 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_PGAMMA);
 8006fc8:	20e0      	movs	r0, #224	; 0xe0
 8006fca:	f000 f86b 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0F);
 8006fce:	200f      	movs	r0, #15
 8006fd0:	f000 f892 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x29);
 8006fd4:	2029      	movs	r0, #41	; 0x29
 8006fd6:	f000 f88f 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x24);
 8006fda:	2024      	movs	r0, #36	; 0x24
 8006fdc:	f000 f88c 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x0C);
 8006fe0:	200c      	movs	r0, #12
 8006fe2:	f000 f889 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x0E);
 8006fe6:	200e      	movs	r0, #14
 8006fe8:	f000 f886 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x09);
 8006fec:	2009      	movs	r0, #9
 8006fee:	f000 f883 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x4E);
 8006ff2:	204e      	movs	r0, #78	; 0x4e
 8006ff4:	f000 f880 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x78);
 8006ff8:	2078      	movs	r0, #120	; 0x78
 8006ffa:	f000 f87d 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x3C);
 8006ffe:	203c      	movs	r0, #60	; 0x3c
 8007000:	f000 f87a 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x09);
 8007004:	2009      	movs	r0, #9
 8007006:	f000 f877 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x13);
 800700a:	2013      	movs	r0, #19
 800700c:	f000 f874 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x05);
 8007010:	2005      	movs	r0, #5
 8007012:	f000 f871 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x17);
 8007016:	2017      	movs	r0, #23
 8007018:	f000 f86e 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x11);
 800701c:	2011      	movs	r0, #17
 800701e:	f000 f86b 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8007022:	2000      	movs	r0, #0
 8007024:	f000 f868 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_NGAMMA);
 8007028:	20e1      	movs	r0, #225	; 0xe1
 800702a:	f000 f83b 	bl	80070a4 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 800702e:	2000      	movs	r0, #0
 8007030:	f000 f862 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x16);
 8007034:	2016      	movs	r0, #22
 8007036:	f000 f85f 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x1B);
 800703a:	201b      	movs	r0, #27
 800703c:	f000 f85c 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x04);
 8007040:	2004      	movs	r0, #4
 8007042:	f000 f859 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x11);
 8007046:	2011      	movs	r0, #17
 8007048:	f000 f856 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x07);
 800704c:	2007      	movs	r0, #7
 800704e:	f000 f853 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x31);
 8007052:	2031      	movs	r0, #49	; 0x31
 8007054:	f000 f850 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x33);
 8007058:	2033      	movs	r0, #51	; 0x33
 800705a:	f000 f84d 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x42);
 800705e:	2042      	movs	r0, #66	; 0x42
 8007060:	f000 f84a 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x05);
 8007064:	2005      	movs	r0, #5
 8007066:	f000 f847 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x0C);
 800706a:	200c      	movs	r0, #12
 800706c:	f000 f844 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x0A);
 8007070:	200a      	movs	r0, #10
 8007072:	f000 f841 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x28);
 8007076:	2028      	movs	r0, #40	; 0x28
 8007078:	f000 f83e 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x2F);
 800707c:	202f      	movs	r0, #47	; 0x2f
 800707e:	f000 f83b 	bl	80070f8 <MyLCD_WriteData>
	MyLCD_WriteData(0x0F);
 8007082:	200f      	movs	r0, #15
 8007084:	f000 f838 	bl	80070f8 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_SLEEP_OUT);
 8007088:	2011      	movs	r0, #17
 800708a:	f000 f80b 	bl	80070a4 <MyLCD_WriteCommand>
	HAL_Delay(100);
 800708e:	2064      	movs	r0, #100	; 0x64
 8007090:	f7f9 faa8 	bl	80005e4 <HAL_Delay>
	MyLCD_WriteCommand(MyLCD_DISPLAY_ON);
 8007094:	2029      	movs	r0, #41	; 0x29
 8007096:	f000 f805 	bl	80070a4 <MyLCD_WriteCommand>
	/* GRAM start writing */
	MyLCD_WriteCommand(MyLCD_GRAM);
 800709a:	202c      	movs	r0, #44	; 0x2c
 800709c:	f000 f802 	bl	80070a4 <MyLCD_WriteCommand>
}
 80070a0:	bf00      	nop
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <MyLCD_WriteCommand>:

void MyLCD_WriteCommand(uint8_t com)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	733b      	strb	r3, [r7, #12]
 80070b2:	2300      	movs	r3, #0
 80070b4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80070b6:	2200      	movs	r2, #0
 80070b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070bc:	480b      	ldr	r0, [pc, #44]	; (80070ec <MyLCD_WriteCommand+0x48>)
 80070be:	f7f9 fec1 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 80070c2:	2200      	movs	r2, #0
 80070c4:	2104      	movs	r1, #4
 80070c6:	480a      	ldr	r0, [pc, #40]	; (80070f0 <MyLCD_WriteCommand+0x4c>)
 80070c8:	f7f9 febc 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 80070cc:	f107 010c 	add.w	r1, r7, #12
 80070d0:	2364      	movs	r3, #100	; 0x64
 80070d2:	2201      	movs	r2, #1
 80070d4:	4807      	ldr	r0, [pc, #28]	; (80070f4 <MyLCD_WriteCommand+0x50>)
 80070d6:	f7fc fb0b 	bl	80036f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80070da:	2201      	movs	r2, #1
 80070dc:	2104      	movs	r1, #4
 80070de:	4804      	ldr	r0, [pc, #16]	; (80070f0 <MyLCD_WriteCommand+0x4c>)
 80070e0:	f7f9 feb0 	bl	8000e44 <HAL_GPIO_WritePin>
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40020c00 	.word	0x40020c00
 80070f0:	40020800 	.word	0x40020800
 80070f4:	20027178 	.word	0x20027178

080070f8 <MyLCD_WriteData>:

void MyLCD_WriteData(uint8_t data)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	733b      	strb	r3, [r7, #12]
 8007106:	2300      	movs	r3, #0
 8007108:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 800710a:	2201      	movs	r2, #1
 800710c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007110:	480b      	ldr	r0, [pc, #44]	; (8007140 <MyLCD_WriteData+0x48>)
 8007112:	f7f9 fe97 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8007116:	2200      	movs	r2, #0
 8007118:	2104      	movs	r1, #4
 800711a:	480a      	ldr	r0, [pc, #40]	; (8007144 <MyLCD_WriteData+0x4c>)
 800711c:	f7f9 fe92 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8007120:	f107 010c 	add.w	r1, r7, #12
 8007124:	2364      	movs	r3, #100	; 0x64
 8007126:	2201      	movs	r2, #1
 8007128:	4807      	ldr	r0, [pc, #28]	; (8007148 <MyLCD_WriteData+0x50>)
 800712a:	f7fc fae1 	bl	80036f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800712e:	2201      	movs	r2, #1
 8007130:	2104      	movs	r1, #4
 8007132:	4804      	ldr	r0, [pc, #16]	; (8007144 <MyLCD_WriteData+0x4c>)
 8007134:	f7f9 fe86 	bl	8000e44 <HAL_GPIO_WritePin>
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40020c00 	.word	0x40020c00
 8007144:	40020800 	.word	0x40020800
 8007148:	20027178 	.word	0x20027178

0800714c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007152:	f7f9 f9d5 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007156:	f000 f86b 	bl	8007230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800715a:	f000 f9b1 	bl	80074c0 <MX_GPIO_Init>
  //MX_LTDC_Init();
  MX_SPI5_Init();
 800715e:	f000 f931 	bl	80073c4 <MX_SPI5_Init>
  MX_FMC_Init();
 8007162:	f000 f965 	bl	8007430 <MX_FMC_Init>
  //MX_DMA2D_Init();
  MX_I2C3_Init();
 8007166:	f000 f8ed 	bl	8007344 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 800716a:	481c      	ldr	r0, [pc, #112]	; (80071dc <main+0x90>)
 800716c:	f000 fa5e 	bl	800762c <SDRAM_init>
  MyLCD_PowerOn();
 8007170:	f7ff fe50 	bl	8006e14 <MyLCD_PowerOn>
  //HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
  TP_Config();
 8007174:	f000 fd0e 	bl	8007b94 <TP_Config>

  /* Enable CRC to Unlock GUI */
  __HAL_RCC_CRC_CLK_ENABLE();
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
 800717c:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <main+0x94>)
 800717e:	4b18      	ldr	r3, [pc, #96]	; (80071e0 <main+0x94>)
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007186:	6313      	str	r3, [r2, #48]	; 0x30
 8007188:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <main+0x94>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	68bb      	ldr	r3, [r7, #8]

  /* Enable Back up SRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8007194:	2300      	movs	r3, #0
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	4a11      	ldr	r2, [pc, #68]	; (80071e0 <main+0x94>)
 800719a:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <main+0x94>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071a2:	6313      	str	r3, [r2, #48]	; 0x30
 80071a4:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <main+0x94>)
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <main+0x98>)
 80071b2:	f107 040c 	add.w	r4, r7, #12
 80071b6:	461d      	mov	r5, r3
 80071b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80071c0:	f107 030c 	add.w	r3, r7, #12
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fd fcda 	bl	8004b80 <osThreadCreate>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <main+0x9c>)
 80071d0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 
  GUI_X_InitOS();
 80071d2:	f7fd fc65 	bl	8004aa0 <GUI_X_InitOS>

  /* Start scheduler */
  osKernelStart();
 80071d6:	f7fd fccc 	bl	8004b72 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80071da:	e7fe      	b.n	80071da <main+0x8e>
 80071dc:	200271d0 	.word	0x200271d0
 80071e0:	40023800 	.word	0x40023800
 80071e4:	0800d0a0 	.word	0x0800d0a0
 80071e8:	20027120 	.word	0x20027120

080071ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
//			  LCD_DrawPixel(tp_state.x, tp_state.y, LCD_COLOR_LIGHTRED);
//		  }
//	  }
//	}

	  GUI_Init();
 80071f4:	f001 fd74 	bl	8008ce0 <GUI_Init>
	  GUI_SelectLayer(0);
 80071f8:	2000      	movs	r0, #0
 80071fa:	f001 ff23 	bl	8009044 <GUI_SelectLayer>
	  GUI_SetBkColor(GUI_BLUE);
 80071fe:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8007202:	f001 fc39 	bl	8008a78 <GUI_SetBkColor>
	  GUI_Clear();
 8007206:	f001 fd0f 	bl	8008c28 <GUI_Clear>
	  GUI_SetColor(GUI_YELLOW);
 800720a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800720e:	f001 fc3e 	bl	8008a8e <GUI_SetColor>
	  GUI_AA_FillCircle(100, 150, 40);
 8007212:	2228      	movs	r2, #40	; 0x28
 8007214:	2196      	movs	r1, #150	; 0x96
 8007216:	2064      	movs	r0, #100	; 0x64
 8007218:	f000 fde6 	bl	8007de8 <GUI_AA_FillCircle>
	  GUI_SetColor(GUI_ORANGE);
 800721c:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 8007220:	f001 fc35 	bl	8008a8e <GUI_SetColor>
	  GUI_FillCircle(150, 100, 40);
 8007224:	2228      	movs	r2, #40	; 0x28
 8007226:	2164      	movs	r1, #100	; 0x64
 8007228:	2096      	movs	r0, #150	; 0x96
 800722a:	f001 fb4f 	bl	80088cc <GUI_FillCircle>

	while (1)
 800722e:	e7fe      	b.n	800722e <StartDefaultTask+0x42>

08007230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b0a0      	sub	sp, #128	; 0x80
 8007234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007236:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800723a:	2230      	movs	r2, #48	; 0x30
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f005 ff0f 	bl	800d062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007244:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007254:	f107 030c 	add.w	r3, r7, #12
 8007258:	2230      	movs	r2, #48	; 0x30
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f005 ff00 	bl	800d062 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	4a35      	ldr	r2, [pc, #212]	; (800733c <SystemClock_Config+0x10c>)
 8007268:	4b34      	ldr	r3, [pc, #208]	; (800733c <SystemClock_Config+0x10c>)
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007270:	6413      	str	r3, [r2, #64]	; 0x40
 8007272:	4b32      	ldr	r3, [pc, #200]	; (800733c <SystemClock_Config+0x10c>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727a:	60bb      	str	r3, [r7, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800727e:	2300      	movs	r3, #0
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	4a2f      	ldr	r2, [pc, #188]	; (8007340 <SystemClock_Config+0x110>)
 8007284:	4b2e      	ldr	r3, [pc, #184]	; (8007340 <SystemClock_Config+0x110>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	4b2c      	ldr	r3, [pc, #176]	; (8007340 <SystemClock_Config+0x110>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800729a:	2302      	movs	r3, #2
 800729c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800729e:	2301      	movs	r3, #1
 80072a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072a2:	2310      	movs	r3, #16
 80072a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072a6:	2302      	movs	r3, #2
 80072a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80072aa:	2300      	movs	r3, #0
 80072ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80072ae:	2308      	movs	r3, #8
 80072b0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80072b2:	23b4      	movs	r3, #180	; 0xb4
 80072b4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80072b6:	2302      	movs	r3, #2
 80072b8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80072ba:	2304      	movs	r3, #4
 80072bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fb fb94 	bl	80029f0 <HAL_RCC_OscConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80072ce:	f000 f9a5 	bl	800761c <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80072d2:	f7fb fb3d 	bl	8002950 <HAL_PWREx_EnableOverDrive>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80072dc:	f000 f99e 	bl	800761c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072e0:	230f      	movs	r3, #15
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072e4:	2302      	movs	r3, #2
 80072e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072e8:	2300      	movs	r3, #0
 80072ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80072ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80072f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80072f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80072fc:	2105      	movs	r1, #5
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fb fdb8 	bl	8002e74 <HAL_RCC_ClockConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800730a:	f000 f987 	bl	800761c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800730e:	2308      	movs	r3, #8
 8007310:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8007312:	233c      	movs	r3, #60	; 0x3c
 8007314:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007316:	2302      	movs	r3, #2
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800731a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800731e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f7fb ff5d 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8007330:	f000 f974 	bl	800761c <Error_Handler>
  }
}
 8007334:	bf00      	nop
 8007336:	3780      	adds	r7, #128	; 0x80
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40023800 	.word	0x40023800
 8007340:	40007000 	.word	0x40007000

08007344 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8007348:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <MX_I2C3_Init+0x74>)
 800734a:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <MX_I2C3_Init+0x78>)
 800734c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800734e:	4b1a      	ldr	r3, [pc, #104]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007350:	4a1b      	ldr	r2, [pc, #108]	; (80073c0 <MX_I2C3_Init+0x7c>)
 8007352:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007354:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 800735a:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <MX_I2C3_Init+0x74>)
 800735c:	2282      	movs	r2, #130	; 0x82
 800735e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007360:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007366:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007368:	4b13      	ldr	r3, [pc, #76]	; (80073b8 <MX_I2C3_Init+0x74>)
 800736a:	2200      	movs	r2, #0
 800736c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007370:	2200      	movs	r2, #0
 8007372:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007374:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007376:	2200      	movs	r2, #0
 8007378:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800737a:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <MX_I2C3_Init+0x74>)
 800737c:	2200      	movs	r2, #0
 800737e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007380:	480d      	ldr	r0, [pc, #52]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007382:	f7f9 fd79 	bl	8000e78 <HAL_I2C_Init>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800738c:	f000 f946 	bl	800761c <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007390:	2100      	movs	r1, #0
 8007392:	4809      	ldr	r0, [pc, #36]	; (80073b8 <MX_I2C3_Init+0x74>)
 8007394:	f7fa fc85 	bl	8001ca2 <HAL_I2CEx_ConfigAnalogFilter>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800739e:	f000 f93d 	bl	800761c <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80073a2:	2100      	movs	r1, #0
 80073a4:	4804      	ldr	r0, [pc, #16]	; (80073b8 <MX_I2C3_Init+0x74>)
 80073a6:	f7fa fcb8 	bl	8001d1a <HAL_I2CEx_ConfigDigitalFilter>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80073b0:	f000 f934 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20027124 	.word	0x20027124
 80073bc:	40005c00 	.word	0x40005c00
 80073c0:	000186a0 	.word	0x000186a0

080073c4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80073c8:	4b17      	ldr	r3, [pc, #92]	; (8007428 <MX_SPI5_Init+0x64>)
 80073ca:	4a18      	ldr	r2, [pc, #96]	; (800742c <MX_SPI5_Init+0x68>)
 80073cc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80073ce:	4b16      	ldr	r3, [pc, #88]	; (8007428 <MX_SPI5_Init+0x64>)
 80073d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80073d4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <MX_SPI5_Init+0x64>)
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80073dc:	4b12      	ldr	r3, [pc, #72]	; (8007428 <MX_SPI5_Init+0x64>)
 80073de:	2200      	movs	r2, #0
 80073e0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073e2:	4b11      	ldr	r3, [pc, #68]	; (8007428 <MX_SPI5_Init+0x64>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073e8:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <MX_SPI5_Init+0x64>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80073ee:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <MX_SPI5_Init+0x64>)
 80073f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073f4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <MX_SPI5_Init+0x64>)
 80073f8:	2218      	movs	r2, #24
 80073fa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <MX_SPI5_Init+0x64>)
 80073fe:	2200      	movs	r2, #0
 8007400:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <MX_SPI5_Init+0x64>)
 8007404:	2200      	movs	r2, #0
 8007406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <MX_SPI5_Init+0x64>)
 800740a:	2200      	movs	r2, #0
 800740c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <MX_SPI5_Init+0x64>)
 8007410:	220a      	movs	r2, #10
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8007414:	4804      	ldr	r0, [pc, #16]	; (8007428 <MX_SPI5_Init+0x64>)
 8007416:	f7fc f908 	bl	800362a <HAL_SPI_Init>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8007420:	f000 f8fc 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8007424:	bf00      	nop
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20027178 	.word	0x20027178
 800742c:	40015000 	.word	0x40015000

08007430 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007436:	4b20      	ldr	r3, [pc, #128]	; (80074b8 <MX_FMC_Init+0x88>)
 8007438:	4a20      	ldr	r2, [pc, #128]	; (80074bc <MX_FMC_Init+0x8c>)
 800743a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800743c:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <MX_FMC_Init+0x88>)
 800743e:	2201      	movs	r2, #1
 8007440:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007442:	4b1d      	ldr	r3, [pc, #116]	; (80074b8 <MX_FMC_Init+0x88>)
 8007444:	2200      	movs	r2, #0
 8007446:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007448:	4b1b      	ldr	r3, [pc, #108]	; (80074b8 <MX_FMC_Init+0x88>)
 800744a:	2204      	movs	r2, #4
 800744c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800744e:	4b1a      	ldr	r3, [pc, #104]	; (80074b8 <MX_FMC_Init+0x88>)
 8007450:	2210      	movs	r2, #16
 8007452:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007454:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <MX_FMC_Init+0x88>)
 8007456:	2240      	movs	r2, #64	; 0x40
 8007458:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800745a:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <MX_FMC_Init+0x88>)
 800745c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007460:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <MX_FMC_Init+0x88>)
 8007464:	2200      	movs	r2, #0
 8007466:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007468:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <MX_FMC_Init+0x88>)
 800746a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800746e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <MX_FMC_Init+0x88>)
 8007472:	2200      	movs	r2, #0
 8007474:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <MX_FMC_Init+0x88>)
 8007478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800747e:	2302      	movs	r3, #2
 8007480:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8007482:	2307      	movs	r3, #7
 8007484:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8007486:	2304      	movs	r3, #4
 8007488:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800748a:	2307      	movs	r3, #7
 800748c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800748e:	2303      	movs	r3, #3
 8007490:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8007492:	2302      	movs	r3, #2
 8007494:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8007496:	2302      	movs	r3, #2
 8007498:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4806      	ldr	r0, [pc, #24]	; (80074b8 <MX_FMC_Init+0x88>)
 80074a0:	f7fc f844 	bl	800352c <HAL_SDRAM_Init>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 80074aa:	f000 f8b7 	bl	800761c <Error_Handler>
  }

}
 80074ae:	bf00      	nop
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	200271d0 	.word	0x200271d0
 80074bc:	a0000140 	.word	0xa0000140

080074c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	; 0x30
 80074c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c6:	f107 031c 	add.w	r3, r7, #28
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	605a      	str	r2, [r3, #4]
 80074d0:	609a      	str	r2, [r3, #8]
 80074d2:	60da      	str	r2, [r3, #12]
 80074d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	4a4c      	ldr	r2, [pc, #304]	; (800760c <MX_GPIO_Init+0x14c>)
 80074dc:	4b4b      	ldr	r3, [pc, #300]	; (800760c <MX_GPIO_Init+0x14c>)
 80074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e0:	f043 0320 	orr.w	r3, r3, #32
 80074e4:	6313      	str	r3, [r2, #48]	; 0x30
 80074e6:	4b49      	ldr	r3, [pc, #292]	; (800760c <MX_GPIO_Init+0x14c>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	4a45      	ldr	r2, [pc, #276]	; (800760c <MX_GPIO_Init+0x14c>)
 80074f8:	4b44      	ldr	r3, [pc, #272]	; (800760c <MX_GPIO_Init+0x14c>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	f043 0304 	orr.w	r3, r3, #4
 8007500:	6313      	str	r3, [r2, #48]	; 0x30
 8007502:	4b42      	ldr	r3, [pc, #264]	; (800760c <MX_GPIO_Init+0x14c>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	4a3e      	ldr	r2, [pc, #248]	; (800760c <MX_GPIO_Init+0x14c>)
 8007514:	4b3d      	ldr	r3, [pc, #244]	; (800760c <MX_GPIO_Init+0x14c>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6313      	str	r3, [r2, #48]	; 0x30
 800751e:	4b3b      	ldr	r3, [pc, #236]	; (800760c <MX_GPIO_Init+0x14c>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	4a37      	ldr	r2, [pc, #220]	; (800760c <MX_GPIO_Init+0x14c>)
 8007530:	4b36      	ldr	r3, [pc, #216]	; (800760c <MX_GPIO_Init+0x14c>)
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	f043 0302 	orr.w	r3, r3, #2
 8007538:	6313      	str	r3, [r2, #48]	; 0x30
 800753a:	4b34      	ldr	r3, [pc, #208]	; (800760c <MX_GPIO_Init+0x14c>)
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	4a30      	ldr	r2, [pc, #192]	; (800760c <MX_GPIO_Init+0x14c>)
 800754c:	4b2f      	ldr	r3, [pc, #188]	; (800760c <MX_GPIO_Init+0x14c>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b2d      	ldr	r3, [pc, #180]	; (800760c <MX_GPIO_Init+0x14c>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	4a29      	ldr	r2, [pc, #164]	; (800760c <MX_GPIO_Init+0x14c>)
 8007568:	4b28      	ldr	r3, [pc, #160]	; (800760c <MX_GPIO_Init+0x14c>)
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	f043 0310 	orr.w	r3, r3, #16
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b26      	ldr	r3, [pc, #152]	; (800760c <MX_GPIO_Init+0x14c>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	4a22      	ldr	r2, [pc, #136]	; (800760c <MX_GPIO_Init+0x14c>)
 8007584:	4b21      	ldr	r3, [pc, #132]	; (800760c <MX_GPIO_Init+0x14c>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f043 0308 	orr.w	r3, r3, #8
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b1f      	ldr	r3, [pc, #124]	; (800760c <MX_GPIO_Init+0x14c>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800759a:	2201      	movs	r2, #1
 800759c:	2104      	movs	r1, #4
 800759e:	481c      	ldr	r0, [pc, #112]	; (8007610 <MX_GPIO_Init+0x150>)
 80075a0:	f7f9 fc50 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80075a4:	2200      	movs	r2, #0
 80075a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075aa:	481a      	ldr	r0, [pc, #104]	; (8007614 <MX_GPIO_Init+0x154>)
 80075ac:	f7f9 fc4a 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 80075b0:	2304      	movs	r3, #4
 80075b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075b4:	2301      	movs	r3, #1
 80075b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075bc:	2302      	movs	r3, #2
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 80075c0:	f107 031c 	add.w	r3, r7, #28
 80075c4:	4619      	mov	r1, r3
 80075c6:	4812      	ldr	r0, [pc, #72]	; (8007610 <MX_GPIO_Init+0x150>)
 80075c8:	f7f9 fa92 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 80075cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075d2:	2301      	movs	r3, #1
 80075d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075da:	2302      	movs	r3, #2
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 80075de:	f107 031c 	add.w	r3, r7, #28
 80075e2:	4619      	mov	r1, r3
 80075e4:	480b      	ldr	r0, [pc, #44]	; (8007614 <MX_GPIO_Init+0x154>)
 80075e6:	f7f9 fa83 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80075ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075f0:	2300      	movs	r3, #0
 80075f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80075f8:	f107 031c 	add.w	r3, r7, #28
 80075fc:	4619      	mov	r1, r3
 80075fe:	4806      	ldr	r0, [pc, #24]	; (8007618 <MX_GPIO_Init+0x158>)
 8007600:	f7f9 fa76 	bl	8000af0 <HAL_GPIO_Init>

}
 8007604:	bf00      	nop
 8007606:	3730      	adds	r7, #48	; 0x30
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40023800 	.word	0x40023800
 8007610:	40020800 	.word	0x40020800
 8007614:	40020c00 	.word	0x40020c00
 8007618:	40020000 	.word	0x40020000

0800761c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007620:	bf00      	nop
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8007638:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <SDRAM_init+0xcc>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800763e:	4b2e      	ldr	r3, [pc, #184]	; (80076f8 <SDRAM_init+0xcc>)
 8007640:	2208      	movs	r2, #8
 8007642:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8007644:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <SDRAM_init+0xcc>)
 8007646:	2201      	movs	r2, #1
 8007648:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800764a:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <SDRAM_init+0xcc>)
 800764c:	2200      	movs	r2, #0
 800764e:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8007650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007654:	4928      	ldr	r1, [pc, #160]	; (80076f8 <SDRAM_init+0xcc>)
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fb ff9c 	bl	8003594 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 800765c:	200a      	movs	r0, #10
 800765e:	f7f8 ffc1 	bl	80005e4 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8007662:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <SDRAM_init+0xcc>)
 8007664:	2202      	movs	r2, #2
 8007666:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8007668:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <SDRAM_init+0xcc>)
 800766a:	2208      	movs	r2, #8
 800766c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800766e:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <SDRAM_init+0xcc>)
 8007670:	2201      	movs	r2, #1
 8007672:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8007674:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <SDRAM_init+0xcc>)
 8007676:	2200      	movs	r2, #0
 8007678:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800767a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800767e:	491e      	ldr	r1, [pc, #120]	; (80076f8 <SDRAM_init+0xcc>)
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7fb ff87 	bl	8003594 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8007686:	200a      	movs	r0, #10
 8007688:	f7f8 ffac 	bl	80005e4 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <SDRAM_init+0xcc>)
 800768e:	2203      	movs	r2, #3
 8007690:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8007692:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <SDRAM_init+0xcc>)
 8007694:	2208      	movs	r2, #8
 8007696:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8007698:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <SDRAM_init+0xcc>)
 800769a:	2204      	movs	r2, #4
 800769c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <SDRAM_init+0xcc>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80076a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076a8:	4913      	ldr	r1, [pc, #76]	; (80076f8 <SDRAM_init+0xcc>)
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fb ff72 	bl	8003594 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80076b0:	200a      	movs	r0, #10
 80076b2:	f7f8 ff97 	bl	80005e4 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 80076b6:	f240 2331 	movw	r3, #561	; 0x231
 80076ba:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <SDRAM_init+0xcc>)
 80076be:	2204      	movs	r2, #4
 80076c0:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <SDRAM_init+0xcc>)
 80076c4:	2208      	movs	r2, #8
 80076c6:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <SDRAM_init+0xcc>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <SDRAM_init+0xcc>)
 80076d2:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80076d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076d8:	4907      	ldr	r1, [pc, #28]	; (80076f8 <SDRAM_init+0xcc>)
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fb ff5a 	bl	8003594 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80076e0:	200a      	movs	r0, #10
 80076e2:	f7f8 ff7f 	bl	80005e4 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 80076e6:	f240 516a 	movw	r1, #1386	; 0x56a
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fb ff7d 	bl	80035ea <HAL_SDRAM_ProgramRefreshRate>
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20027204 	.word	0x20027204

080076fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
 8007706:	4a12      	ldr	r2, [pc, #72]	; (8007750 <HAL_MspInit+0x54>)
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <HAL_MspInit+0x54>)
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007710:	6453      	str	r3, [r2, #68]	; 0x44
 8007712:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <HAL_MspInit+0x54>)
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800771e:	2300      	movs	r3, #0
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <HAL_MspInit+0x54>)
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <HAL_MspInit+0x54>)
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772c:	6413      	str	r3, [r2, #64]	; 0x40
 800772e:	4b08      	ldr	r3, [pc, #32]	; (8007750 <HAL_MspInit+0x54>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800773a:	2200      	movs	r2, #0
 800773c:	210f      	movs	r1, #15
 800773e:	f06f 0001 	mvn.w	r0, #1
 8007742:	f7f9 f846 	bl	80007d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40023800 	.word	0x40023800

08007754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a29      	ldr	r2, [pc, #164]	; (8007818 <HAL_I2C_MspInit+0xc4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d14b      	bne.n	800780e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	4a28      	ldr	r2, [pc, #160]	; (800781c <HAL_I2C_MspInit+0xc8>)
 800777c:	4b27      	ldr	r3, [pc, #156]	; (800781c <HAL_I2C_MspInit+0xc8>)
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	f043 0304 	orr.w	r3, r3, #4
 8007784:	6313      	str	r3, [r2, #48]	; 0x30
 8007786:	4b25      	ldr	r3, [pc, #148]	; (800781c <HAL_I2C_MspInit+0xc8>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	4a21      	ldr	r2, [pc, #132]	; (800781c <HAL_I2C_MspInit+0xc8>)
 8007798:	4b20      	ldr	r3, [pc, #128]	; (800781c <HAL_I2C_MspInit+0xc8>)
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	6313      	str	r3, [r2, #48]	; 0x30
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <HAL_I2C_MspInit+0xc8>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80077ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077b4:	2312      	movs	r3, #18
 80077b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077b8:	2301      	movs	r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077bc:	2303      	movs	r3, #3
 80077be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80077c0:	2304      	movs	r3, #4
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077c4:	f107 0314 	add.w	r3, r7, #20
 80077c8:	4619      	mov	r1, r3
 80077ca:	4815      	ldr	r0, [pc, #84]	; (8007820 <HAL_I2C_MspInit+0xcc>)
 80077cc:	f7f9 f990 	bl	8000af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80077d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077d6:	2312      	movs	r3, #18
 80077d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077da:	2301      	movs	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077de:	2303      	movs	r3, #3
 80077e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80077e2:	2304      	movs	r3, #4
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e6:	f107 0314 	add.w	r3, r7, #20
 80077ea:	4619      	mov	r1, r3
 80077ec:	480d      	ldr	r0, [pc, #52]	; (8007824 <HAL_I2C_MspInit+0xd0>)
 80077ee:	f7f9 f97f 	bl	8000af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <HAL_I2C_MspInit+0xc8>)
 80077f8:	4b08      	ldr	r3, [pc, #32]	; (800781c <HAL_I2C_MspInit+0xc8>)
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007800:	6413      	str	r3, [r2, #64]	; 0x40
 8007802:	4b06      	ldr	r3, [pc, #24]	; (800781c <HAL_I2C_MspInit+0xc8>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800780a:	60bb      	str	r3, [r7, #8]
 800780c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800780e:	bf00      	nop
 8007810:	3728      	adds	r7, #40	; 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40005c00 	.word	0x40005c00
 800781c:	40023800 	.word	0x40023800
 8007820:	40020800 	.word	0x40020800
 8007824:	40020000 	.word	0x40020000

08007828 <HAL_FMC_MspInit>:
}


static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800782e:	4b3c      	ldr	r3, [pc, #240]	; (8007920 <HAL_FMC_MspInit+0xf8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d16f      	bne.n	8007916 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8007836:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <HAL_FMC_MspInit+0xf8>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800783c:	2300      	movs	r3, #0
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4a38      	ldr	r2, [pc, #224]	; (8007924 <HAL_FMC_MspInit+0xfc>)
 8007842:	4b38      	ldr	r3, [pc, #224]	; (8007924 <HAL_FMC_MspInit+0xfc>)
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	6393      	str	r3, [r2, #56]	; 0x38
 800784c:	4b35      	ldr	r3, [pc, #212]	; (8007924 <HAL_FMC_MspInit+0xfc>)
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007858:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800785c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800785e:	2302      	movs	r3, #2
 8007860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007866:	2303      	movs	r3, #3
 8007868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800786a:	230c      	movs	r3, #12
 800786c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	4619      	mov	r1, r3
 8007872:	482d      	ldr	r0, [pc, #180]	; (8007928 <HAL_FMC_MspInit+0x100>)
 8007874:	f7f9 f93c 	bl	8000af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007878:	2301      	movs	r3, #1
 800787a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787c:	2302      	movs	r3, #2
 800787e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007884:	2303      	movs	r3, #3
 8007886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007888:	230c      	movs	r3, #12
 800788a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	4619      	mov	r1, r3
 8007890:	4826      	ldr	r0, [pc, #152]	; (800792c <HAL_FMC_MspInit+0x104>)
 8007892:	f7f9 f92d 	bl	8000af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8007896:	f248 1333 	movw	r3, #33075	; 0x8133
 800789a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789c:	2302      	movs	r3, #2
 800789e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a4:	2303      	movs	r3, #3
 80078a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80078a8:	230c      	movs	r3, #12
 80078aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80078ac:	1d3b      	adds	r3, r7, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	481f      	ldr	r0, [pc, #124]	; (8007930 <HAL_FMC_MspInit+0x108>)
 80078b2:	f7f9 f91d 	bl	8000af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80078b6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80078ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078bc:	2302      	movs	r3, #2
 80078be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c4:	2303      	movs	r3, #3
 80078c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80078c8:	230c      	movs	r3, #12
 80078ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078cc:	1d3b      	adds	r3, r7, #4
 80078ce:	4619      	mov	r1, r3
 80078d0:	4818      	ldr	r0, [pc, #96]	; (8007934 <HAL_FMC_MspInit+0x10c>)
 80078d2:	f7f9 f90d 	bl	8000af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80078d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80078da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078dc:	2302      	movs	r3, #2
 80078de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078e4:	2303      	movs	r3, #3
 80078e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80078e8:	230c      	movs	r3, #12
 80078ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078ec:	1d3b      	adds	r3, r7, #4
 80078ee:	4619      	mov	r1, r3
 80078f0:	4811      	ldr	r0, [pc, #68]	; (8007938 <HAL_FMC_MspInit+0x110>)
 80078f2:	f7f9 f8fd 	bl	8000af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80078f6:	2360      	movs	r3, #96	; 0x60
 80078f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078fa:	2302      	movs	r3, #2
 80078fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007902:	2303      	movs	r3, #3
 8007904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007906:	230c      	movs	r3, #12
 8007908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800790a:	1d3b      	adds	r3, r7, #4
 800790c:	4619      	mov	r1, r3
 800790e:	480b      	ldr	r0, [pc, #44]	; (800793c <HAL_FMC_MspInit+0x114>)
 8007910:	f7f9 f8ee 	bl	8000af0 <HAL_GPIO_Init>
 8007914:	e000      	b.n	8007918 <HAL_FMC_MspInit+0xf0>
    return;
 8007916:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20004030 	.word	0x20004030
 8007924:	40023800 	.word	0x40023800
 8007928:	40021400 	.word	0x40021400
 800792c:	40020800 	.word	0x40020800
 8007930:	40021800 	.word	0x40021800
 8007934:	40021000 	.word	0x40021000
 8007938:	40020c00 	.word	0x40020c00
 800793c:	40020400 	.word	0x40020400

08007940 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007948:	f7ff ff6e 	bl	8007828 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007958:	bf00      	nop
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007962:	b480      	push	{r7}
 8007964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007966:	e7fe      	b.n	8007966 <HardFault_Handler+0x4>

08007968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800796c:	e7fe      	b.n	800796c <MemManage_Handler+0x4>

0800796e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800796e:	b480      	push	{r7}
 8007970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007972:	e7fe      	b.n	8007972 <BusFault_Handler+0x4>

08007974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007978:	e7fe      	b.n	8007978 <UsageFault_Handler+0x4>

0800797a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800797a:	b480      	push	{r7}
 800797c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800797e:	bf00      	nop
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800798c:	f7f8 fe0a 	bl	80005a4 <HAL_IncTick>
  osSystickHandler();
 8007990:	f7fd f9d4 	bl	8004d3c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007994:	bf00      	nop
 8007996:	bd80      	pop	{r7, pc}

08007998 <LTDC_IRQHandler>:
  * @brief  This function handles LTDC global interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hltdc);
 800799c:	4802      	ldr	r0, [pc, #8]	; (80079a8 <LTDC_IRQHandler+0x10>)
 800799e:	f7fa fae7 	bl	8001f70 <HAL_LTDC_IRQHandler>
}
 80079a2:	bf00      	nop
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20027038 	.word	0x20027038

080079ac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80079b0:	4802      	ldr	r0, [pc, #8]	; (80079bc <DMA2D_IRQHandler+0x10>)
 80079b2:	f7f8 ff8d 	bl	80008d0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80079b6:	bf00      	nop
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	200270e0 	.word	0x200270e0

080079c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80079c4:	4a16      	ldr	r2, [pc, #88]	; (8007a20 <SystemInit+0x60>)
 80079c6:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <SystemInit+0x60>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80079d4:	4a13      	ldr	r2, [pc, #76]	; (8007a24 <SystemInit+0x64>)
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <SystemInit+0x64>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80079e0:	4b10      	ldr	r3, [pc, #64]	; (8007a24 <SystemInit+0x64>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80079e6:	4a0f      	ldr	r2, [pc, #60]	; (8007a24 <SystemInit+0x64>)
 80079e8:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <SystemInit+0x64>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80079f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <SystemInit+0x64>)
 80079f8:	4a0b      	ldr	r2, [pc, #44]	; (8007a28 <SystemInit+0x68>)
 80079fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80079fc:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <SystemInit+0x64>)
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <SystemInit+0x64>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <SystemInit+0x64>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a0e:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <SystemInit+0x60>)
 8007a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a14:	609a      	str	r2, [r3, #8]
#endif
}
 8007a16:	bf00      	nop
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	e000ed00 	.word	0xe000ed00
 8007a24:	40023800 	.word	0x40023800
 8007a28:	24003010 	.word	0x24003010

08007a2c <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 8007a32:	2300      	movs	r3, #0
 8007a34:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8007a36:	2303      	movs	r3, #3
 8007a38:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007a3e:	1d3a      	adds	r2, r7, #4
 8007a40:	2364      	movs	r3, #100	; 0x64
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2302      	movs	r3, #2
 8007a46:	2182      	movs	r1, #130	; 0x82
 8007a48:	480b      	ldr	r0, [pc, #44]	; (8007a78 <touchReset+0x4c>)
 8007a4a:	f7f9 faf5 	bl	8001038 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007a4e:	2014      	movs	r0, #20
 8007a50:	f7f8 fdc8 	bl	80005e4 <HAL_Delay>
	sendBuf[1] = 0x00;
 8007a54:	2300      	movs	r3, #0
 8007a56:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007a58:	1d3a      	adds	r2, r7, #4
 8007a5a:	2364      	movs	r3, #100	; 0x64
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	2302      	movs	r3, #2
 8007a60:	2182      	movs	r1, #130	; 0x82
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <touchReset+0x4c>)
 8007a64:	f7f9 fae8 	bl	8001038 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007a68:	2014      	movs	r0, #20
 8007a6a:	f7f8 fdbb 	bl	80005e4 <HAL_Delay>
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20027124 	.word	0x20027124

08007a7c <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	4603      	mov	r3, r0
 8007a84:	460a      	mov	r2, r1
 8007a86:	71fb      	strb	r3, [r7, #7]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8007a90:	2300      	movs	r3, #0
 8007a92:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8007a94:	2304      	movs	r3, #4
 8007a96:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007a98:	f107 020c 	add.w	r2, r7, #12
 8007a9c:	2364      	movs	r3, #100	; 0x64
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	2182      	movs	r1, #130	; 0x82
 8007aa4:	4817      	ldr	r0, [pc, #92]	; (8007b04 <fnctCmd+0x88>)
 8007aa6:	f7f9 fac7 	bl	8001038 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007aaa:	f107 020c 	add.w	r2, r7, #12
 8007aae:	2364      	movs	r3, #100	; 0x64
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	2182      	movs	r1, #130	; 0x82
 8007ab6:	4813      	ldr	r0, [pc, #76]	; (8007b04 <fnctCmd+0x88>)
 8007ab8:	f7f9 fbcc 	bl	8001254 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8007abc:	7b3b      	ldrb	r3, [r7, #12]
 8007abe:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8007ac0:	79bb      	ldrb	r3, [r7, #6]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8007ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aca:	43db      	mvns	r3, r3
 8007acc:	b25a      	sxtb	r2, r3
 8007ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	73fb      	strb	r3, [r7, #15]
 8007ad8:	e003      	b.n	8007ae2 <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8007ada:	7bfa      	ldrb	r2, [r7, #15]
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8007ae2:	2304      	movs	r3, #4
 8007ae4:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007aea:	f107 020c 	add.w	r2, r7, #12
 8007aee:	2364      	movs	r3, #100	; 0x64
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2302      	movs	r3, #2
 8007af4:	2182      	movs	r1, #130	; 0x82
 8007af6:	4803      	ldr	r0, [pc, #12]	; (8007b04 <fnctCmd+0x88>)
 8007af8:	f7f9 fa9e 	bl	8001038 <HAL_I2C_Master_Transmit>
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20027124 	.word	0x20027124

08007b08 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	4603      	mov	r3, r0
 8007b10:	460a      	mov	r2, r1
 8007b12:	71fb      	strb	r3, [r7, #7]
 8007b14:	4613      	mov	r3, r2
 8007b16:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 8007b20:	2317      	movs	r3, #23
 8007b22:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007b24:	f107 020c 	add.w	r2, r7, #12
 8007b28:	2364      	movs	r3, #100	; 0x64
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	2182      	movs	r1, #130	; 0x82
 8007b30:	4817      	ldr	r0, [pc, #92]	; (8007b90 <ioAFConfig+0x88>)
 8007b32:	f7f9 fa81 	bl	8001038 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007b36:	f107 020c 	add.w	r2, r7, #12
 8007b3a:	2364      	movs	r3, #100	; 0x64
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	2182      	movs	r1, #130	; 0x82
 8007b42:	4813      	ldr	r0, [pc, #76]	; (8007b90 <ioAFConfig+0x88>)
 8007b44:	f7f9 fb86 	bl	8001254 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8007b48:	7b3b      	ldrb	r3, [r7, #12]
 8007b4a:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8007b4c:	79bb      	ldrb	r3, [r7, #6]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 8007b52:	7bfa      	ldrb	r2, [r7, #15]
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	73fb      	strb	r3, [r7, #15]
 8007b5a:	e008      	b.n	8007b6e <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8007b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b60:	43db      	mvns	r3, r3
 8007b62:	b25a      	sxtb	r2, r3
 8007b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 8007b6e:	2317      	movs	r3, #23
 8007b70:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b76:	f107 020c 	add.w	r2, r7, #12
 8007b7a:	2364      	movs	r3, #100	; 0x64
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	2302      	movs	r3, #2
 8007b80:	2182      	movs	r1, #130	; 0x82
 8007b82:	4803      	ldr	r0, [pc, #12]	; (8007b90 <ioAFConfig+0x88>)
 8007b84:	f7f9 fa58 	bl	8001038 <HAL_I2C_Master_Transmit>
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20027124 	.word	0x20027124

08007b94 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af02      	add	r7, sp, #8
	touchReset();
 8007b9a:	f7ff ff47 	bl	8007a2c <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	f7ff ff6b 	bl	8007a7c <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	2002      	movs	r0, #2
 8007baa:	f7ff ff67 	bl	8007a7c <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 8007bae:	4b41      	ldr	r3, [pc, #260]	; (8007cb4 <TP_Config+0x120>)
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007bb4:	1d3a      	adds	r2, r7, #4
 8007bb6:	2364      	movs	r3, #100	; 0x64
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	2302      	movs	r3, #2
 8007bbc:	2182      	movs	r1, #130	; 0x82
 8007bbe:	483e      	ldr	r0, [pc, #248]	; (8007cb8 <TP_Config+0x124>)
 8007bc0:	f7f9 fa3a 	bl	8001038 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007bc4:	2014      	movs	r0, #20
 8007bc6:	f7f8 fd0d 	bl	80005e4 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 8007bca:	2321      	movs	r3, #33	; 0x21
 8007bcc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007bd2:	1d3a      	adds	r2, r7, #4
 8007bd4:	2364      	movs	r3, #100	; 0x64
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2302      	movs	r3, #2
 8007bda:	2182      	movs	r1, #130	; 0x82
 8007bdc:	4836      	ldr	r0, [pc, #216]	; (8007cb8 <TP_Config+0x124>)
 8007bde:	f7f9 fa2b 	bl	8001038 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8007be2:	2100      	movs	r1, #0
 8007be4:	201e      	movs	r0, #30
 8007be6:	f7ff ff8f 	bl	8007b08 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8007bea:	2341      	movs	r3, #65	; 0x41
 8007bec:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 8007bee:	239a      	movs	r3, #154	; 0x9a
 8007bf0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007bf2:	1d3a      	adds	r2, r7, #4
 8007bf4:	2364      	movs	r3, #100	; 0x64
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	2182      	movs	r1, #130	; 0x82
 8007bfc:	482e      	ldr	r0, [pc, #184]	; (8007cb8 <TP_Config+0x124>)
 8007bfe:	f7f9 fa1b 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 8007c02:	234a      	movs	r3, #74	; 0x4a
 8007c04:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007c06:	2301      	movs	r3, #1
 8007c08:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c0a:	1d3a      	adds	r2, r7, #4
 8007c0c:	2364      	movs	r3, #100	; 0x64
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2302      	movs	r3, #2
 8007c12:	2182      	movs	r1, #130	; 0x82
 8007c14:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <TP_Config+0x124>)
 8007c16:	f7f9 fa0f 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8007c1a:	234b      	movs	r3, #75	; 0x4b
 8007c1c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c22:	1d3a      	adds	r2, r7, #4
 8007c24:	2364      	movs	r3, #100	; 0x64
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2302      	movs	r3, #2
 8007c2a:	2182      	movs	r1, #130	; 0x82
 8007c2c:	4822      	ldr	r0, [pc, #136]	; (8007cb8 <TP_Config+0x124>)
 8007c2e:	f7f9 fa03 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8007c32:	234b      	movs	r3, #75	; 0x4b
 8007c34:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 8007c36:	2300      	movs	r3, #0
 8007c38:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c3a:	1d3a      	adds	r2, r7, #4
 8007c3c:	2364      	movs	r3, #100	; 0x64
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	2302      	movs	r3, #2
 8007c42:	2182      	movs	r1, #130	; 0x82
 8007c44:	481c      	ldr	r0, [pc, #112]	; (8007cb8 <TP_Config+0x124>)
 8007c46:	f7f9 f9f7 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 8007c4a:	2356      	movs	r3, #86	; 0x56
 8007c4c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c52:	1d3a      	adds	r2, r7, #4
 8007c54:	2364      	movs	r3, #100	; 0x64
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	2182      	movs	r1, #130	; 0x82
 8007c5c:	4816      	ldr	r0, [pc, #88]	; (8007cb8 <TP_Config+0x124>)
 8007c5e:	f7f9 f9eb 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8007c62:	2358      	movs	r3, #88	; 0x58
 8007c64:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007c66:	2301      	movs	r3, #1
 8007c68:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c6a:	1d3a      	adds	r2, r7, #4
 8007c6c:	2364      	movs	r3, #100	; 0x64
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2302      	movs	r3, #2
 8007c72:	2182      	movs	r1, #130	; 0x82
 8007c74:	4810      	ldr	r0, [pc, #64]	; (8007cb8 <TP_Config+0x124>)
 8007c76:	f7f9 f9df 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 8007c7a:	2340      	movs	r3, #64	; 0x40
 8007c7c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c82:	1d3a      	adds	r2, r7, #4
 8007c84:	2364      	movs	r3, #100	; 0x64
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	2302      	movs	r3, #2
 8007c8a:	2182      	movs	r1, #130	; 0x82
 8007c8c:	480a      	ldr	r0, [pc, #40]	; (8007cb8 <TP_Config+0x124>)
 8007c8e:	f7f9 f9d3 	bl	8001038 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8007c92:	230b      	movs	r3, #11
 8007c94:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8007c96:	23ff      	movs	r3, #255	; 0xff
 8007c98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007c9a:	1d3a      	adds	r2, r7, #4
 8007c9c:	2364      	movs	r3, #100	; 0x64
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2182      	movs	r1, #130	; 0x82
 8007ca4:	4804      	ldr	r0, [pc, #16]	; (8007cb8 <TP_Config+0x124>)
 8007ca6:	f7f9 f9c7 	bl	8001038 <HAL_I2C_Master_Transmit>

}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	0800d0b4 	.word	0x0800d0b4
 8007cb8:	20027124 	.word	0x20027124

08007cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007cf4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007cc2:	e003      	b.n	8007ccc <LoopCopyDataInit>

08007cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007cca:	3104      	adds	r1, #4

08007ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ccc:	480b      	ldr	r0, [pc, #44]	; (8007cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007cd4:	d3f6      	bcc.n	8007cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8007cd6:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007cd8:	e002      	b.n	8007ce0 <LoopFillZerobss>

08007cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007cdc:	f842 3b04 	str.w	r3, [r2], #4

08007ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ce4:	d3f9      	bcc.n	8007cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007ce6:	f7ff fe6b 	bl	80079c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007cea:	f005 f971 	bl	800cfd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007cee:	f7ff fa2d 	bl	800714c <main>
  bx  lr    
 8007cf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007cf4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007cf8:	0800da28 	.word	0x0800da28
  ldr  r0, =_sdata
 8007cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007d00:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8007d04:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8007d08:	200273c4 	.word	0x200273c4

08007d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d0c:	e7fe      	b.n	8007d0c <ADC_IRQHandler>
	...

08007d10 <GL_FillCircleAA_HiRes>:
 8007d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4614      	mov	r4, r2
 8007d16:	460d      	mov	r5, r1
 8007d18:	4606      	mov	r6, r0
 8007d1a:	1881      	adds	r1, r0, r2
 8007d1c:	1a80      	subs	r0, r0, r2
 8007d1e:	f000 fa3d 	bl	800819c <GUI_AA_Init_HiRes>
 8007d22:	4a30      	ldr	r2, [pc, #192]	; (8007de4 <GL_FillCircleAA_HiRes+0xd4>)
 8007d24:	2302      	movs	r3, #2
 8007d26:	fb94 f3f3 	sdiv	r3, r4, r3
 8007d2a:	fb04 3304 	mla	r3, r4, r4, r3
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	1b2b      	subs	r3, r5, r4
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	6813      	ldr	r3, [r2, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	eb04 0b05 	add.w	fp, r4, r5
 8007d3c:	4690      	mov	r8, r2
 8007d3e:	b15b      	cbz	r3, 8007d58 <GL_FillCircleAA_HiRes+0x48>
 8007d40:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007d44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007d48:	4593      	cmp	fp, r2
 8007d4a:	bfa8      	it	ge
 8007d4c:	4693      	movge	fp, r2
 8007d4e:	1b2a      	subs	r2, r5, r4
 8007d50:	429a      	cmp	r2, r3
 8007d52:	bfb8      	it	lt
 8007d54:	461a      	movlt	r2, r3
 8007d56:	9200      	str	r2, [sp, #0]
 8007d58:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8007d5c:	4627      	mov	r7, r4
 8007d5e:	f04f 0901 	mov.w	r9, #1
 8007d62:	454c      	cmp	r4, r9
 8007d64:	dd1a      	ble.n	8007d9c <GL_FillCircleAA_HiRes+0x8c>
 8007d66:	9b00      	ldr	r3, [sp, #0]
 8007d68:	459a      	cmp	sl, r3
 8007d6a:	db12      	blt.n	8007d92 <GL_FillCircleAA_HiRes+0x82>
 8007d6c:	45da      	cmp	sl, fp
 8007d6e:	dc10      	bgt.n	8007d92 <GL_FillCircleAA_HiRes+0x82>
 8007d70:	fb09 f209 	mul.w	r2, r9, r9
 8007d74:	9901      	ldr	r1, [sp, #4]
 8007d76:	fb07 2307 	mla	r3, r7, r7, r2
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	da01      	bge.n	8007d82 <GL_FillCircleAA_HiRes+0x72>
 8007d7e:	3f01      	subs	r7, #1
 8007d80:	e7f8      	b.n	8007d74 <GL_FillCircleAA_HiRes+0x64>
 8007d82:	f8d8 3000 	ldr.w	r3, [r8]
 8007d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d88:	19f2      	adds	r2, r6, r7
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4651      	mov	r1, sl
 8007d8e:	1bf0      	subs	r0, r6, r7
 8007d90:	4798      	blx	r3
 8007d92:	f109 0901 	add.w	r9, r9, #1
 8007d96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d9a:	e7e2      	b.n	8007d62 <GL_FillCircleAA_HiRes+0x52>
 8007d9c:	4627      	mov	r7, r4
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	454c      	cmp	r4, r9
 8007da4:	dd19      	ble.n	8007dda <GL_FillCircleAA_HiRes+0xca>
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	dc12      	bgt.n	8007dd2 <GL_FillCircleAA_HiRes+0xc2>
 8007dac:	45ab      	cmp	fp, r5
 8007dae:	db10      	blt.n	8007dd2 <GL_FillCircleAA_HiRes+0xc2>
 8007db0:	fb09 f209 	mul.w	r2, r9, r9
 8007db4:	9901      	ldr	r1, [sp, #4]
 8007db6:	fb07 2307 	mla	r3, r7, r7, r2
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	da01      	bge.n	8007dc2 <GL_FillCircleAA_HiRes+0xb2>
 8007dbe:	3f01      	subs	r7, #1
 8007dc0:	e7f8      	b.n	8007db4 <GL_FillCircleAA_HiRes+0xa4>
 8007dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc8:	19f2      	adds	r2, r6, r7
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4629      	mov	r1, r5
 8007dce:	1bf0      	subs	r0, r6, r7
 8007dd0:	4798      	blx	r3
 8007dd2:	f109 0901 	add.w	r9, r9, #1
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	e7e3      	b.n	8007da2 <GL_FillCircleAA_HiRes+0x92>
 8007dda:	b003      	add	sp, #12
 8007ddc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	f000 b9f4 	b.w	80081cc <GUI_AA_Exit>
 8007de4:	20000014 	.word	0x20000014

08007de8 <GUI_AA_FillCircle>:
 8007de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4616      	mov	r6, r2
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	f001 f975 	bl	80090e0 <GUI_Lock>
 8007df6:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <GUI_AA_FillCircle+0xb4>)
 8007df8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8007ea0 <GUI_AA_FillCircle+0xb8>
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	461f      	mov	r7, r3
 8007e00:	b1da      	cbz	r2, 8007e3a <GUI_AA_FillCircle+0x52>
 8007e02:	f8d8 3000 	ldr.w	r3, [r8]
 8007e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	4414      	add	r4, r2
 8007e0e:	441d      	add	r5, r3
 8007e10:	f004 f8b0 	bl	800bf74 <WM__InitIVRSearch>
 8007e14:	b188      	cbz	r0, 8007e3a <GUI_AA_FillCircle+0x52>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	4632      	mov	r2, r6
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4798      	blx	r3
 8007e20:	4681      	mov	r9, r0
 8007e22:	f003 ffe5 	bl	800bdf0 <WM__GetNextIVR>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d1f5      	bne.n	8007e16 <GUI_AA_FillCircle+0x2e>
 8007e2a:	f1b9 0f00 	cmp.w	r9, #0
 8007e2e:	d104      	bne.n	8007e3a <GUI_AA_FillCircle+0x52>
 8007e30:	f001 f94c 	bl	80090cc <GUI_Unlock>
 8007e34:	b003      	add	sp, #12
 8007e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	f004 fa7d 	bl	800c338 <WM__GetOrgX_AA>
 8007e3e:	4404      	add	r4, r0
 8007e40:	f004 fa86 	bl	800c350 <WM__GetOrgY_AA>
 8007e44:	f8d8 3000 	ldr.w	r3, [r8]
 8007e48:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8007e4c:	4405      	add	r5, r0
 8007e4e:	b922      	cbnz	r2, 8007e5a <GUI_AA_FillCircle+0x72>
 8007e50:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007e54:	435c      	muls	r4, r3
 8007e56:	435d      	muls	r5, r3
 8007e58:	435e      	muls	r6, r3
 8007e5a:	1ba0      	subs	r0, r4, r6
 8007e5c:	f000 f9aa 	bl	80081b4 <GUI_AA_HiRes2Pixel>
 8007e60:	f8ad 0000 	strh.w	r0, [sp]
 8007e64:	19a0      	adds	r0, r4, r6
 8007e66:	f000 f9a5 	bl	80081b4 <GUI_AA_HiRes2Pixel>
 8007e6a:	f8ad 0004 	strh.w	r0, [sp, #4]
 8007e6e:	1ba8      	subs	r0, r5, r6
 8007e70:	f000 f9a0 	bl	80081b4 <GUI_AA_HiRes2Pixel>
 8007e74:	f8ad 0002 	strh.w	r0, [sp, #2]
 8007e78:	19a8      	adds	r0, r5, r6
 8007e7a:	f000 f99b 	bl	80081b4 <GUI_AA_HiRes2Pixel>
 8007e7e:	f8ad 0006 	strh.w	r0, [sp, #6]
 8007e82:	4668      	mov	r0, sp
 8007e84:	f004 f876 	bl	800bf74 <WM__InitIVRSearch>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d0d1      	beq.n	8007e30 <GUI_AA_FillCircle+0x48>
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7ff ff3d 	bl	8007d10 <GL_FillCircleAA_HiRes>
 8007e96:	f003 ffab 	bl	800bdf0 <WM__GetNextIVR>
 8007e9a:	e7f5      	b.n	8007e88 <GUI_AA_FillCircle+0xa0>
 8007e9c:	20000080 	.word	0x20000080
 8007ea0:	20000014 	.word	0x20000014

08007ea4 <_CleanLine>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4c08      	ldr	r4, [pc, #32]	; (8007ec8 <_CleanLine+0x24>)
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	6862      	ldr	r2, [r4, #4]
 8007eac:	68a0      	ldr	r0, [r4, #8]
 8007eae:	1a9a      	subs	r2, r3, r2
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <_CleanLine+0x28>)
 8007eb2:	3201      	adds	r2, #1
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4798      	blx	r3
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <_CleanLine+0x2c>)
 8007ebc:	60e3      	str	r3, [r4, #12]
 8007ebe:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007ec2:	6122      	str	r2, [r4, #16]
 8007ec4:	6163      	str	r3, [r4, #20]
 8007ec6:	bd10      	pop	{r4, pc}
 8007ec8:	20000088 	.word	0x20000088
 8007ecc:	20000024 	.word	0x20000024
 8007ed0:	ffffc001 	.word	0xffffc001

08007ed4 <_CalcClipRectHL>:
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <_CalcClipRectHL+0x38>)
 8007ed6:	480e      	ldr	r0, [pc, #56]	; (8007f10 <_CalcClipRectHL+0x3c>)
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 8007ede:	890a      	ldrh	r2, [r1, #8]
 8007ee0:	fb12 f203 	smulbb	r2, r2, r3
 8007ee4:	8302      	strh	r2, [r0, #24]
 8007ee6:	894a      	ldrh	r2, [r1, #10]
 8007ee8:	fb12 f203 	smulbb	r2, r2, r3
 8007eec:	8342      	strh	r2, [r0, #26]
 8007eee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	fb12 f203 	smulbb	r2, r2, r3
 8007ef8:	3a01      	subs	r2, #1
 8007efa:	8382      	strh	r2, [r0, #28]
 8007efc:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
 8007f00:	3201      	adds	r2, #1
 8007f02:	fb12 f303 	smulbb	r3, r2, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	83c3      	strh	r3, [r0, #30]
 8007f0a:	4770      	bx	lr
 8007f0c:	20000014 	.word	0x20000014
 8007f10:	20000088 	.word	0x20000088

08007f14 <_FlushLine>:
 8007f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	4d2b      	ldr	r5, [pc, #172]	; (8007fc8 <_FlushLine+0xb4>)
 8007f1a:	482c      	ldr	r0, [pc, #176]	; (8007fcc <_FlushLine+0xb8>)
 8007f1c:	686a      	ldr	r2, [r5, #4]
 8007f1e:	696f      	ldr	r7, [r5, #20]
 8007f20:	6a29      	ldr	r1, [r5, #32]
 8007f22:	6803      	ldr	r3, [r0, #0]
 8007f24:	1abf      	subs	r7, r7, r2
 8007f26:	428f      	cmp	r7, r1
 8007f28:	f893 6068 	ldrb.w	r6, [r3, #104]	; 0x68
 8007f2c:	bfa8      	it	ge
 8007f2e:	f101 37ff 	addge.w	r7, r1, #4294967295	; 0xffffffff
 8007f32:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007f34:	fb16 f606 	smulbb	r6, r6, r6
 8007f38:	4681      	mov	r9, r0
 8007f3a:	b909      	cbnz	r1, 8007f40 <_FlushLine+0x2c>
 8007f3c:	4924      	ldr	r1, [pc, #144]	; (8007fd0 <_FlushLine+0xbc>)
 8007f3e:	66d9      	str	r1, [r3, #108]	; 0x6c
 8007f40:	692c      	ldr	r4, [r5, #16]
 8007f42:	f8df a084 	ldr.w	sl, [pc, #132]	; 8007fc8 <_FlushLine+0xb4>
 8007f46:	1073      	asrs	r3, r6, #1
 8007f48:	1aa4      	subs	r4, r4, r2
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	f04f 0b0f 	mov.w	fp, #15
 8007f50:	42bc      	cmp	r4, r7
 8007f52:	dc33      	bgt.n	8007fbc <_FlushLine+0xa8>
 8007f54:	68aa      	ldr	r2, [r5, #8]
 8007f56:	1913      	adds	r3, r2, r4
 8007f58:	5d12      	ldrb	r2, [r2, r4]
 8007f5a:	b36a      	cbz	r2, 8007fb8 <_FlushLine+0xa4>
 8007f5c:	4296      	cmp	r6, r2
 8007f5e:	d11e      	bne.n	8007f9e <_FlushLine+0x8a>
 8007f60:	46a0      	mov	r8, r4
 8007f62:	45b8      	cmp	r8, r7
 8007f64:	d003      	beq.n	8007f6e <_FlushLine+0x5a>
 8007f66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007f6a:	4296      	cmp	r6, r2
 8007f6c:	d00b      	beq.n	8007f86 <_FlushLine+0x72>
 8007f6e:	4544      	cmp	r4, r8
 8007f70:	d00c      	beq.n	8007f8c <_FlushLine+0x78>
 8007f72:	6868      	ldr	r0, [r5, #4]
 8007f74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f76:	68e9      	ldr	r1, [r5, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	eb00 0208 	add.w	r2, r0, r8
 8007f7e:	4420      	add	r0, r4
 8007f80:	4798      	blx	r3
 8007f82:	4644      	mov	r4, r8
 8007f84:	e018      	b.n	8007fb8 <_FlushLine+0xa4>
 8007f86:	f108 0801 	add.w	r8, r8, #1
 8007f8a:	e7ea      	b.n	8007f62 <_FlushLine+0x4e>
 8007f8c:	f8d9 3000 	ldr.w	r3, [r9]
 8007f90:	6868      	ldr	r0, [r5, #4]
 8007f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f94:	68e9      	ldr	r1, [r5, #12]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4420      	add	r0, r4
 8007f9a:	4798      	blx	r3
 8007f9c:	e00c      	b.n	8007fb8 <_FlushLine+0xa4>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	f8da 0004 	ldr.w	r0, [sl, #4]
 8007fa4:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007fa8:	fb1b 3202 	smlabb	r2, fp, r2, r3
 8007fac:	4420      	add	r0, r4
 8007fae:	fb92 f2f6 	sdiv	r2, r2, r6
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	f001 fc4c 	bl	8009850 <LCD_SetPixelAA4_Trans>
 8007fb8:	3401      	adds	r4, #1
 8007fba:	e7c9      	b.n	8007f50 <_FlushLine+0x3c>
 8007fbc:	b003      	add	sp, #12
 8007fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc2:	f7ff bf6f 	b.w	8007ea4 <_CleanLine>
 8007fc6:	bf00      	nop
 8007fc8:	20000088 	.word	0x20000088
 8007fcc:	20000014 	.word	0x20000014
 8007fd0:	08009851 	.word	0x08009851

08007fd4 <_OnExit>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	4c03      	ldr	r4, [pc, #12]	; (8007fe4 <_OnExit+0x10>)
 8007fd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007fda:	f000 fa45 	bl	8008468 <GUI_ALLOC_FreeFixedBlock>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fe2:	bd10      	pop	{r4, pc}
 8007fe4:	20000088 	.word	0x20000088

08007fe8 <_DrawHLine>:
 8007fe8:	4282      	cmp	r2, r0
 8007fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fee:	4605      	mov	r5, r0
 8007ff0:	4688      	mov	r8, r1
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	db6f      	blt.n	80080d6 <_DrawHLine+0xee>
 8007ff6:	4f39      	ldr	r7, [pc, #228]	; (80080dc <_DrawHLine+0xf4>)
 8007ff8:	4e39      	ldr	r6, [pc, #228]	; (80080e0 <_DrawHLine+0xf8>)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68f2      	ldr	r2, [r6, #12]
 8007ffe:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008002:	fb91 f3f3 	sdiv	r3, r1, r3
 8008006:	4293      	cmp	r3, r2
 8008008:	d007      	beq.n	800801a <_DrawHLine+0x32>
 800800a:	f7ff ff83 	bl	8007f14 <_FlushLine>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8008014:	fb98 f1f1 	sdiv	r1, r8, r1
 8008018:	60f1      	str	r1, [r6, #12]
 800801a:	6932      	ldr	r2, [r6, #16]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008022:	fb95 f1f3 	sdiv	r1, r5, r3
 8008026:	4291      	cmp	r1, r2
 8008028:	bfb8      	it	lt
 800802a:	4a2d      	ldrlt	r2, [pc, #180]	; (80080e0 <_DrawHLine+0xf8>)
 800802c:	fb94 f0f3 	sdiv	r0, r4, r3
 8008030:	bfb8      	it	lt
 8008032:	6111      	strlt	r1, [r2, #16]
 8008034:	6972      	ldr	r2, [r6, #20]
 8008036:	4290      	cmp	r0, r2
 8008038:	bfc4      	itt	gt
 800803a:	4a29      	ldrgt	r2, [pc, #164]	; (80080e0 <_DrawHLine+0xf8>)
 800803c:	6150      	strgt	r0, [r2, #20]
 800803e:	6872      	ldr	r2, [r6, #4]
 8008040:	4291      	cmp	r1, r2
 8008042:	6831      	ldr	r1, [r6, #0]
 8008044:	bfb8      	it	lt
 8008046:	fb02 f503 	mullt.w	r5, r2, r3
 800804a:	4288      	cmp	r0, r1
 800804c:	bfc4      	itt	gt
 800804e:	fb01 3403 	mlagt	r4, r1, r3, r3
 8008052:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8008056:	42a5      	cmp	r5, r4
 8008058:	dc3d      	bgt.n	80080d6 <_DrawHLine+0xee>
 800805a:	fb95 faf3 	sdiv	sl, r5, r3
 800805e:	fb94 f1f3 	sdiv	r1, r4, r3
 8008062:	ebc2 0e0a 	rsb	lr, r2, sl
 8008066:	68b0      	ldr	r0, [r6, #8]
 8008068:	ebb1 080a 	subs.w	r8, r1, sl
 800806c:	eb00 090e 	add.w	r9, r0, lr
 8008070:	f810 c00e 	ldrb.w	ip, [r0, lr]
 8008074:	d107      	bne.n	8008086 <_DrawHLine+0x9e>
 8008076:	f1c5 0501 	rsb	r5, r5, #1
 800807a:	44ac      	add	ip, r5
 800807c:	4464      	add	r4, ip
 800807e:	f800 400e 	strb.w	r4, [r0, lr]
 8008082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008086:	f10a 0a01 	add.w	sl, sl, #1
 800808a:	fb1a f303 	smulbb	r3, sl, r3
 800808e:	1b5d      	subs	r5, r3, r5
 8008090:	4465      	add	r5, ip
 8008092:	f800 500e 	strb.w	r5, [r0, lr]
 8008096:	f109 0601 	add.w	r6, r9, #1
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	ebc6 0308 	rsb	r3, r6, r8
 80080a2:	444b      	add	r3, r9
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	dd08      	ble.n	80080ba <_DrawHLine+0xd2>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 80080ae:	f816 3b01 	ldrb.w	r3, [r6], #1
 80080b2:	4403      	add	r3, r0
 80080b4:	f806 3c01 	strb.w	r3, [r6, #-1]
 80080b8:	e7f1      	b.n	800809e <_DrawHLine+0xb6>
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	7833      	ldrb	r3, [r6, #0]
 80080c0:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80080c4:	bfb8      	it	lt
 80080c6:	f101 31ff 	addlt.w	r1, r1, #4294967295	; 0xffffffff
 80080ca:	3401      	adds	r4, #1
 80080cc:	fb12 f101 	smulbb	r1, r2, r1
 80080d0:	1a64      	subs	r4, r4, r1
 80080d2:	441c      	add	r4, r3
 80080d4:	7034      	strb	r4, [r6, #0]
 80080d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080da:	bf00      	nop
 80080dc:	20000014 	.word	0x20000014
 80080e0:	20000088 	.word	0x20000088

080080e4 <GUI_AA_Init>:
 80080e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	4c25      	ldr	r4, [pc, #148]	; (8008180 <GUI_AA_Init+0x9c>)
 80080ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080ec:	4605      	mov	r5, r0
 80080ee:	460e      	mov	r6, r1
 80080f0:	b98b      	cbnz	r3, 8008116 <GUI_AA_Init+0x32>
 80080f2:	4b24      	ldr	r3, [pc, #144]	; (8008184 <GUI_AA_Init+0xa0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6223      	str	r3, [r4, #32]
 80080f8:	b913      	cbnz	r3, 8008100 <GUI_AA_Init+0x1c>
 80080fa:	f001 fd05 	bl	8009b08 <LCD_GetVXSizeMax>
 80080fe:	6220      	str	r0, [r4, #32]
 8008100:	6a20      	ldr	r0, [r4, #32]
 8008102:	f000 fa8d 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 8008106:	62a0      	str	r0, [r4, #40]	; 0x28
 8008108:	b138      	cbz	r0, 800811a <GUI_AA_Init+0x36>
 800810a:	481d      	ldr	r0, [pc, #116]	; (8008180 <GUI_AA_Init+0x9c>)
 800810c:	4b1e      	ldr	r3, [pc, #120]	; (8008188 <GUI_AA_Init+0xa4>)
 800810e:	f840 3f2c 	str.w	r3, [r0, #44]!
 8008112:	f000 fe63 	bl	8008ddc <GUI__RegisterExit>
 8008116:	2700      	movs	r7, #0
 8008118:	e000      	b.n	800811c <GUI_AA_Init+0x38>
 800811a:	2701      	movs	r7, #1
 800811c:	4b1b      	ldr	r3, [pc, #108]	; (800818c <GUI_AA_Init+0xa8>)
 800811e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008198 <GUI_AA_Init+0xb4>
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6a22      	ldr	r2, [r4, #32]
 8008126:	f8d8 e000 	ldr.w	lr, [r8]
 800812a:	42ab      	cmp	r3, r5
 800812c:	bfb8      	it	lt
 800812e:	462b      	movlt	r3, r5
 8008130:	1af1      	subs	r1, r6, r3
 8008132:	4291      	cmp	r1, r2
 8008134:	bfa8      	it	ge
 8008136:	18d6      	addge	r6, r2, r3
 8008138:	f8de 2064 	ldr.w	r2, [lr, #100]	; 0x64
 800813c:	4d14      	ldr	r5, [pc, #80]	; (8008190 <GUI_AA_Init+0xac>)
 800813e:	6262      	str	r2, [r4, #36]	; 0x24
 8008140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008144:	bfa8      	it	ge
 8008146:	f106 36ff 	addge.w	r6, r6, #4294967295	; 0xffffffff
 800814a:	429e      	cmp	r6, r3
 800814c:	4a11      	ldr	r2, [pc, #68]	; (8008194 <GUI_AA_Init+0xb0>)
 800814e:	f8ce 5064 	str.w	r5, [lr, #100]	; 0x64
 8008152:	e885 0003 	stmia.w	r5, {r0, r1}
 8008156:	bfb8      	it	lt
 8008158:	461e      	movlt	r6, r3
 800815a:	6362      	str	r2, [r4, #52]	; 0x34
 800815c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	bfb8      	it	lt
 8008162:	2701      	movlt	r7, #1
 8008164:	60a2      	str	r2, [r4, #8]
 8008166:	6026      	str	r6, [r4, #0]
 8008168:	f7ff fe9c 	bl	8007ea4 <_CleanLine>
 800816c:	f7ff feb2 	bl	8007ed4 <_CalcClipRectHL>
 8008170:	f8d8 3000 	ldr.w	r3, [r8]
 8008174:	3d1c      	subs	r5, #28
 8008176:	615d      	str	r5, [r3, #20]
 8008178:	4638      	mov	r0, r7
 800817a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817e:	bf00      	nop
 8008180:	20000088 	.word	0x20000088
 8008184:	2002732c 	.word	0x2002732c
 8008188:	08007fd5 	.word	0x08007fd5
 800818c:	200272e4 	.word	0x200272e4
 8008190:	200000bc 	.word	0x200000bc
 8008194:	08007fe9 	.word	0x08007fe9
 8008198:	20000014 	.word	0x20000014

0800819c <GUI_AA_Init_HiRes>:
 800819c:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <GUI_AA_Init_HiRes+0x14>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80081a4:	fb91 f1f3 	sdiv	r1, r1, r3
 80081a8:	fb90 f0f3 	sdiv	r0, r0, r3
 80081ac:	f7ff bf9a 	b.w	80080e4 <GUI_AA_Init>
 80081b0:	20000014 	.word	0x20000014

080081b4 <GUI_AA_HiRes2Pixel>:
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <GUI_AA_HiRes2Pixel+0x14>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80081bc:	b10b      	cbz	r3, 80081c2 <GUI_AA_HiRes2Pixel+0xe>
 80081be:	fb90 f0f3 	sdiv	r0, r0, r3
 80081c2:	b200      	sxth	r0, r0
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20000014 	.word	0x20000014

080081cc <GUI_AA_Exit>:
 80081cc:	b508      	push	{r3, lr}
 80081ce:	f7ff fea1 	bl	8007f14 <_FlushLine>
 80081d2:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <GUI_AA_Exit+0x18>)
 80081d4:	4a04      	ldr	r2, [pc, #16]	; (80081e8 <GUI_AA_Exit+0x1c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081da:	665a      	str	r2, [r3, #100]	; 0x64
 80081dc:	f103 0208 	add.w	r2, r3, #8
 80081e0:	615a      	str	r2, [r3, #20]
 80081e2:	bd08      	pop	{r3, pc}
 80081e4:	20000014 	.word	0x20000014
 80081e8:	20000088 	.word	0x20000088

080081ec <_Color2Index_M8888I>:
 80081ec:	43c3      	mvns	r3, r0
 80081ee:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80081f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80081f6:	431a      	orrs	r2, r3
 80081f8:	0403      	lsls	r3, r0, #16
 80081fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081fe:	4313      	orrs	r3, r2
 8008200:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8008204:	4318      	orrs	r0, r3
 8008206:	4770      	bx	lr

08008208 <_GetIndexMask_M8888I>:
 8008208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800820c:	4770      	bx	lr
	...

08008210 <_Color2IndexBulk_M8888I>:
 8008210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008212:	f8df e044 	ldr.w	lr, [pc, #68]	; 8008258 <_Color2IndexBulk_M8888I+0x48>
 8008216:	f8de e000 	ldr.w	lr, [lr]
 800821a:	4606      	mov	r6, r0
 800821c:	460d      	mov	r5, r1
 800821e:	4614      	mov	r4, r2
 8008220:	461f      	mov	r7, r3
 8008222:	f1be 0f00 	cmp.w	lr, #0
 8008226:	d003      	beq.n	8008230 <_Color2IndexBulk_M8888I+0x20>
 8008228:	46f4      	mov	ip, lr
 800822a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800822e:	4760      	bx	ip
 8008230:	f856 3b04 	ldr.w	r3, [r6], #4
 8008234:	43da      	mvns	r2, r3
 8008236:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800823a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800823e:	4311      	orrs	r1, r2
 8008240:	041a      	lsls	r2, r3, #16
 8008242:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8008246:	430a      	orrs	r2, r1
 8008248:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800824c:	4313      	orrs	r3, r2
 800824e:	3c01      	subs	r4, #1
 8008250:	602b      	str	r3, [r5, #0]
 8008252:	443d      	add	r5, r7
 8008254:	d1ec      	bne.n	8008230 <_Color2IndexBulk_M8888I+0x20>
 8008256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008258:	200000c4 	.word	0x200000c4

0800825c <_Index2ColorBulk_M8888I>:
 800825c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800825e:	f8df e044 	ldr.w	lr, [pc, #68]	; 80082a4 <_Index2ColorBulk_M8888I+0x48>
 8008262:	f8de e004 	ldr.w	lr, [lr, #4]
 8008266:	4605      	mov	r5, r0
 8008268:	460e      	mov	r6, r1
 800826a:	4614      	mov	r4, r2
 800826c:	461f      	mov	r7, r3
 800826e:	f1be 0f00 	cmp.w	lr, #0
 8008272:	d003      	beq.n	800827c <_Index2ColorBulk_M8888I+0x20>
 8008274:	46f4      	mov	ip, lr
 8008276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800827a:	4760      	bx	ip
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	43da      	mvns	r2, r3
 8008280:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008284:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008288:	4311      	orrs	r1, r2
 800828a:	041a      	lsls	r2, r3, #16
 800828c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8008290:	430a      	orrs	r2, r1
 8008292:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008296:	4313      	orrs	r3, r2
 8008298:	3c01      	subs	r4, #1
 800829a:	f846 3b04 	str.w	r3, [r6], #4
 800829e:	443d      	add	r5, r7
 80082a0:	d1ec      	bne.n	800827c <_Index2ColorBulk_M8888I+0x20>
 80082a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a4:	200000c4 	.word	0x200000c4

080082a8 <LCD_Index2Color_M8888I>:
 80082a8:	43c3      	mvns	r3, r0
 80082aa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80082ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082b2:	431a      	orrs	r2, r3
 80082b4:	0403      	lsls	r3, r0, #16
 80082b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80082c0:	4318      	orrs	r0, r3
 80082c2:	4770      	bx	lr

080082c4 <_PushFreeBlock>:
 80082c4:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <_PushFreeBlock+0x20>)
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	3201      	adds	r2, #1
 80082ca:	b510      	push	{r4, lr}
 80082cc:	605a      	str	r2, [r3, #4]
 80082ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80082d2:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 80082d6:	604c      	str	r4, [r1, #4]
 80082d8:	2100      	movs	r1, #0
 80082da:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 80082de:	6258      	str	r0, [r3, #36]	; 0x24
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	20027214 	.word	0x20027214

080082e8 <_RemoveFreeBlock>:
 80082e8:	b510      	push	{r4, lr}
 80082ea:	490e      	ldr	r1, [pc, #56]	; (8008324 <_RemoveFreeBlock+0x3c>)
 80082ec:	6844      	ldr	r4, [r0, #4]
 80082ee:	230f      	movs	r3, #15
 80082f0:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80082f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80082f6:	4294      	cmp	r4, r2
 80082f8:	4a0a      	ldr	r2, [pc, #40]	; (8008324 <_RemoveFreeBlock+0x3c>)
 80082fa:	d203      	bcs.n	8008304 <_RemoveFreeBlock+0x1c>
 80082fc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8008300:	d2f6      	bcs.n	80082f0 <_RemoveFreeBlock+0x8>
 8008302:	bd10      	pop	{r4, pc}
 8008304:	2b0f      	cmp	r3, #15
 8008306:	d80c      	bhi.n	8008322 <_RemoveFreeBlock+0x3a>
 8008308:	6811      	ldr	r1, [r2, #0]
 800830a:	1b09      	subs	r1, r1, r4
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	6881      	ldr	r1, [r0, #8]
 8008310:	68c0      	ldr	r0, [r0, #12]
 8008312:	b101      	cbz	r1, 8008316 <_RemoveFreeBlock+0x2e>
 8008314:	6048      	str	r0, [r1, #4]
 8008316:	b108      	cbz	r0, 800831c <_RemoveFreeBlock+0x34>
 8008318:	6001      	str	r1, [r0, #0]
 800831a:	bd10      	pop	{r4, pc}
 800831c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008320:	6459      	str	r1, [r3, #68]	; 0x44
 8008322:	bd10      	pop	{r4, pc}
 8008324:	20027214 	.word	0x20027214

08008328 <_AddFreeMemory>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	4e27      	ldr	r6, [pc, #156]	; (80083c8 <_AddFreeMemory+0xa0>)
 800832c:	68f3      	ldr	r3, [r6, #12]
 800832e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8008330:	3b01      	subs	r3, #1
 8008332:	4605      	mov	r5, r0
 8008334:	4413      	add	r3, r2
 8008336:	1808      	adds	r0, r1, r0
 8008338:	4283      	cmp	r3, r0
 800833a:	460c      	mov	r4, r1
 800833c:	d305      	bcc.n	800834a <_AddFreeMemory+0x22>
 800833e:	594b      	ldr	r3, [r1, r5]
 8008340:	b91b      	cbnz	r3, 800834a <_AddFreeMemory+0x22>
 8008342:	6843      	ldr	r3, [r0, #4]
 8008344:	441d      	add	r5, r3
 8008346:	f7ff ffcf 	bl	80082e8 <_RemoveFreeBlock>
 800834a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800834c:	429c      	cmp	r4, r3
 800834e:	d90a      	bls.n	8008366 <_AddFreeMemory+0x3e>
 8008350:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8008354:	1be7      	subs	r7, r4, r7
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	b92b      	cbnz	r3, 8008366 <_AddFreeMemory+0x3e>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4638      	mov	r0, r7
 800835e:	441d      	add	r5, r3
 8008360:	f7ff ffc2 	bl	80082e8 <_RemoveFreeBlock>
 8008364:	463c      	mov	r4, r7
 8008366:	230f      	movs	r3, #15
 8008368:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800836c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800836e:	4295      	cmp	r5, r2
 8008370:	d203      	bcs.n	800837a <_AddFreeMemory+0x52>
 8008372:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8008376:	d2f7      	bcs.n	8008368 <_AddFreeMemory+0x40>
 8008378:	e023      	b.n	80083c2 <_AddFreeMemory+0x9a>
 800837a:	2b0f      	cmp	r3, #15
 800837c:	d821      	bhi.n	80083c2 <_AddFreeMemory+0x9a>
 800837e:	3308      	adds	r3, #8
 8008380:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008384:	1960      	adds	r0, r4, r5
 8008386:	6851      	ldr	r1, [r2, #4]
 8008388:	60a1      	str	r1, [r4, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	e884 0024 	stmia.w	r4, {r2, r5}
 8008390:	6124      	str	r4, [r4, #16]
 8008392:	f840 5c04 	str.w	r5, [r0, #-4]
 8008396:	f104 0008 	add.w	r0, r4, #8
 800839a:	b101      	cbz	r1, 800839e <_AddFreeMemory+0x76>
 800839c:	6048      	str	r0, [r1, #4]
 800839e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80083a2:	60a1      	str	r1, [r4, #8]
 80083a4:	60e2      	str	r2, [r4, #12]
 80083a6:	6058      	str	r0, [r3, #4]
 80083a8:	6833      	ldr	r3, [r6, #0]
 80083aa:	4907      	ldr	r1, [pc, #28]	; (80083c8 <_AddFreeMemory+0xa0>)
 80083ac:	18ea      	adds	r2, r5, r3
 80083ae:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80083b2:	6032      	str	r2, [r6, #0]
 80083b4:	b92b      	cbnz	r3, 80083c2 <_AddFreeMemory+0x9a>
 80083b6:	68cb      	ldr	r3, [r1, #12]
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	688a      	ldr	r2, [r1, #8]
 80083bc:	4293      	cmp	r3, r2
 80083be:	bf88      	it	hi
 80083c0:	608b      	strhi	r3, [r1, #8]
 80083c2:	4628      	mov	r0, r5
 80083c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20027214 	.word	0x20027214

080083cc <_RemoveHoles>:
 80083cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	4f24      	ldr	r7, [pc, #144]	; (8008464 <_RemoveHoles+0x98>)
 80083d2:	68fe      	ldr	r6, [r7, #12]
 80083d4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80083d6:	3e01      	subs	r6, #1
 80083d8:	4683      	mov	fp, r0
 80083da:	4426      	add	r6, r4
 80083dc:	46b8      	mov	r8, r7
 80083de:	e894 0028 	ldmia.w	r4, {r3, r5}
 80083e2:	bbab      	cbnz	r3, 8008450 <_RemoveHoles+0x84>
 80083e4:	1961      	adds	r1, r4, r5
 80083e6:	428e      	cmp	r6, r1
 80083e8:	d932      	bls.n	8008450 <_RemoveHoles+0x84>
 80083ea:	f854 a005 	ldr.w	sl, [r4, r5]
 80083ee:	f1ba 0f00 	cmp.w	sl, #0
 80083f2:	d02d      	beq.n	8008450 <_RemoveHoles+0x84>
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d128      	bne.n	8008450 <_RemoveHoles+0x84>
 80083fe:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8008402:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	4620      	mov	r0, r4
 800840a:	9101      	str	r1, [sp, #4]
 800840c:	f7ff ff6c 	bl	80082e8 <_RemoveFreeBlock>
 8008410:	9901      	ldr	r1, [sp, #4]
 8008412:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8008416:	6808      	ldr	r0, [r1, #0]
 8008418:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800841c:	4620      	mov	r0, r4
 800841e:	6054      	str	r4, [r2, #4]
 8008420:	464a      	mov	r2, r9
 8008422:	f004 fe04 	bl	800d02e <memmove>
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	459a      	cmp	sl, r3
 800842a:	bf08      	it	eq
 800842c:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 8008430:	eb04 0109 	add.w	r1, r4, r9
 8008434:	bf08      	it	eq
 8008436:	1b5b      	subeq	r3, r3, r5
 8008438:	4628      	mov	r0, r5
 800843a:	bf08      	it	eq
 800843c:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 8008440:	f7ff ff72 	bl	8008328 <_AddFreeMemory>
 8008444:	f1bb 0f00 	cmp.w	fp, #0
 8008448:	d001      	beq.n	800844e <_RemoveHoles+0x82>
 800844a:	4558      	cmp	r0, fp
 800844c:	d205      	bcs.n	800845a <_RemoveHoles+0x8e>
 800844e:	464d      	mov	r5, r9
 8008450:	442c      	add	r4, r5
 8008452:	42a6      	cmp	r6, r4
 8008454:	d8c3      	bhi.n	80083de <_RemoveHoles+0x12>
 8008456:	2001      	movs	r0, #1
 8008458:	e000      	b.n	800845c <_RemoveHoles+0x90>
 800845a:	2000      	movs	r0, #0
 800845c:	b003      	add	sp, #12
 800845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008462:	bf00      	nop
 8008464:	20027214 	.word	0x20027214

08008468 <GUI_ALLOC_FreeFixedBlock>:
 8008468:	b128      	cbz	r0, 8008476 <GUI_ALLOC_FreeFixedBlock+0xe>
 800846a:	4b03      	ldr	r3, [pc, #12]	; (8008478 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800846c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800846e:	6002      	str	r2, [r0, #0]
 8008470:	b102      	cbz	r2, 8008474 <GUI_ALLOC_FreeFixedBlock+0xc>
 8008472:	6050      	str	r0, [r2, #4]
 8008474:	63d8      	str	r0, [r3, #60]	; 0x3c
 8008476:	4770      	bx	lr
 8008478:	20027214 	.word	0x20027214

0800847c <GUI_ALLOC_h2p>:
 800847c:	4b03      	ldr	r3, [pc, #12]	; (800848c <GUI_ALLOC_h2p+0x10>)
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008484:	6840      	ldr	r0, [r0, #4]
 8008486:	3008      	adds	r0, #8
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20027214 	.word	0x20027214

08008490 <GUI_ALLOC_LockH>:
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <GUI_ALLOC_LockH+0x18>)
 8008492:	69da      	ldr	r2, [r3, #28]
 8008494:	3201      	adds	r2, #1
 8008496:	61da      	str	r2, [r3, #28]
 8008498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800849a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 800849e:	3301      	adds	r3, #1
 80084a0:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 80084a4:	f7ff bfea 	b.w	800847c <GUI_ALLOC_h2p>
 80084a8:	20027214 	.word	0x20027214

080084ac <GUI_ALLOC_UnlockH>:
 80084ac:	b530      	push	{r4, r5, lr}
 80084ae:	6803      	ldr	r3, [r0, #0]
 80084b0:	4909      	ldr	r1, [pc, #36]	; (80084d8 <GUI_ALLOC_UnlockH+0x2c>)
 80084b2:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80084b6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80084b8:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d903      	bls.n	80084c8 <GUI_ALLOC_UnlockH+0x1c>
 80084c0:	69ca      	ldr	r2, [r1, #28]
 80084c2:	b10a      	cbz	r2, 80084c8 <GUI_ALLOC_UnlockH+0x1c>
 80084c4:	3a01      	subs	r2, #1
 80084c6:	61ca      	str	r2, [r1, #28]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 80084ce:	2300      	movs	r3, #0
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	bd30      	pop	{r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	20027214 	.word	0x20027214

080084dc <GUI_ALLOC_AssignMemory>:
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <GUI_ALLOC_AssignMemory+0xc>)
 80084de:	f021 0103 	bic.w	r1, r1, #3
 80084e2:	6018      	str	r0, [r3, #0]
 80084e4:	6059      	str	r1, [r3, #4]
 80084e6:	4770      	bx	lr
 80084e8:	200000cc 	.word	0x200000cc

080084ec <GUI_ALLOC_Free>:
 80084ec:	b510      	push	{r4, lr}
 80084ee:	4604      	mov	r4, r0
 80084f0:	b180      	cbz	r0, 8008514 <GUI_ALLOC_Free+0x28>
 80084f2:	f000 fdf5 	bl	80090e0 <GUI_Lock>
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <GUI_ALLOC_Free+0x2c>)
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084fe:	6859      	ldr	r1, [r3, #4]
 8008500:	6848      	ldr	r0, [r1, #4]
 8008502:	f7ff ff11 	bl	8008328 <_AddFreeMemory>
 8008506:	4620      	mov	r0, r4
 8008508:	f7ff fedc 	bl	80082c4 <_PushFreeBlock>
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008510:	f000 bddc 	b.w	80090cc <GUI_Unlock>
 8008514:	bd10      	pop	{r4, pc}
 8008516:	bf00      	nop
 8008518:	20027214 	.word	0x20027214

0800851c <_EnlargeBlocks>:
 800851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008520:	4c22      	ldr	r4, [pc, #136]	; (80085ac <_EnlargeBlocks+0x90>)
 8008522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008524:	b93b      	cbnz	r3, 8008536 <_EnlargeBlocks+0x1a>
 8008526:	4b22      	ldr	r3, [pc, #136]	; (80085b0 <_EnlargeBlocks+0x94>)
 8008528:	689d      	ldr	r5, [r3, #8]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	3508      	adds	r5, #8
 800852e:	fbb3 f5f5 	udiv	r5, r3, r5
 8008532:	3502      	adds	r5, #2
 8008534:	e003      	b.n	800853e <_EnlargeBlocks+0x22>
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	1d1d      	adds	r5, r3, #4
 800853a:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800853e:	00e8      	lsls	r0, r5, #3
 8008540:	f000 f8c0 	bl	80086c4 <_Alloc>
 8008544:	4680      	mov	r8, r0
 8008546:	b360      	cbz	r0, 80085a2 <_EnlargeBlocks+0x86>
 8008548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800854a:	6922      	ldr	r2, [r4, #16]
 800854c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800854e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	685e      	ldr	r6, [r3, #4]
 8008556:	4b17      	ldr	r3, [pc, #92]	; (80085b4 <_EnlargeBlocks+0x98>)
 8008558:	3608      	adds	r6, #8
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4630      	mov	r0, r6
 800855e:	4798      	blx	r3
 8008560:	6922      	ldr	r2, [r4, #16]
 8008562:	6366      	str	r6, [r4, #52]	; 0x34
 8008564:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	1e69      	subs	r1, r5, #1
 800856c:	428b      	cmp	r3, r1
 800856e:	d205      	bcs.n	800857c <_EnlargeBlocks+0x60>
 8008570:	3301      	adds	r3, #1
 8008572:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 8008576:	f840 3c04 	str.w	r3, [r0, #-4]
 800857a:	e7f7      	b.n	800856c <_EnlargeBlocks+0x50>
 800857c:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8008580:	f04f 0800 	mov.w	r8, #0
 8008584:	f8c6 8004 	str.w	r8, [r6, #4]
 8008588:	6863      	ldr	r3, [r4, #4]
 800858a:	6262      	str	r2, [r4, #36]	; 0x24
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	442b      	add	r3, r5
 8008590:	6063      	str	r3, [r4, #4]
 8008592:	6125      	str	r5, [r4, #16]
 8008594:	4638      	mov	r0, r7
 8008596:	b13f      	cbz	r7, 80085a8 <_EnlargeBlocks+0x8c>
 8008598:	f7ff ffa8 	bl	80084ec <GUI_ALLOC_Free>
 800859c:	4640      	mov	r0, r8
 800859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a2:	2001      	movs	r0, #1
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ac:	20027214 	.word	0x20027214
 80085b0:	200000cc 	.word	0x200000cc
 80085b4:	20000020 	.word	0x20000020

080085b8 <_InitOnce>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	4a17      	ldr	r2, [pc, #92]	; (8008618 <_InitOnce+0x60>)
 80085bc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80085c0:	bb43      	cbnz	r3, 8008614 <_InitOnce+0x5c>
 80085c2:	2301      	movs	r3, #1
 80085c4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80085c8:	4b14      	ldr	r3, [pc, #80]	; (800861c <_InitOnce+0x64>)
 80085ca:	6899      	ldr	r1, [r3, #8]
 80085cc:	b911      	cbnz	r1, 80085d4 <_InitOnce+0x1c>
 80085ce:	6859      	ldr	r1, [r3, #4]
 80085d0:	0889      	lsrs	r1, r1, #2
 80085d2:	6099      	str	r1, [r3, #8]
 80085d4:	215a      	movs	r1, #90	; 0x5a
 80085d6:	6211      	str	r1, [r2, #32]
 80085d8:	2610      	movs	r6, #16
 80085da:	2100      	movs	r1, #0
 80085dc:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 80085e0:	fa06 f501 	lsl.w	r5, r6, r1
 80085e4:	3101      	adds	r1, #1
 80085e6:	2910      	cmp	r1, #16
 80085e8:	4c0b      	ldr	r4, [pc, #44]	; (8008618 <_InitOnce+0x60>)
 80085ea:	6405      	str	r5, [r0, #64]	; 0x40
 80085ec:	d1f6      	bne.n	80085dc <_InitOnce+0x24>
 80085ee:	6858      	ldr	r0, [r3, #4]
 80085f0:	6819      	ldr	r1, [r3, #0]
 80085f2:	63a1      	str	r1, [r4, #56]	; 0x38
 80085f4:	2302      	movs	r3, #2
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	f1a0 0314 	sub.w	r3, r0, #20
 80085fc:	440b      	add	r3, r1
 80085fe:	2501      	movs	r5, #1
 8008600:	6363      	str	r3, [r4, #52]	; 0x34
 8008602:	60e0      	str	r0, [r4, #12]
 8008604:	605d      	str	r5, [r3, #4]
 8008606:	6265      	str	r5, [r4, #36]	; 0x24
 8008608:	6065      	str	r5, [r4, #4]
 800860a:	f7ff fe8d 	bl	8008328 <_AddFreeMemory>
 800860e:	f7ff ff85 	bl	800851c <_EnlargeBlocks>
 8008612:	6325      	str	r5, [r4, #48]	; 0x30
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	bf00      	nop
 8008618:	20027214 	.word	0x20027214
 800861c:	200000cc 	.word	0x200000cc

08008620 <GUI_ALLOC_GetFixedBlock>:
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	4607      	mov	r7, r0
 8008626:	4e26      	ldr	r6, [pc, #152]	; (80086c0 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8008628:	3703      	adds	r7, #3
 800862a:	f7ff ffc5 	bl	80085b8 <_InitOnce>
 800862e:	f027 0703 	bic.w	r7, r7, #3
 8008632:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8008634:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008636:	3704      	adds	r7, #4
 8008638:	4287      	cmp	r7, r0
 800863a:	bf38      	it	cc
 800863c:	4607      	movcc	r7, r0
 800863e:	4614      	mov	r4, r2
 8008640:	b134      	cbz	r4, 8008650 <GUI_ALLOC_GetFixedBlock+0x30>
 8008642:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008646:	429f      	cmp	r7, r3
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	d02c      	beq.n	80086a6 <GUI_ALLOC_GetFixedBlock+0x86>
 800864c:	461c      	mov	r4, r3
 800864e:	e7f7      	b.n	8008640 <GUI_ALLOC_GetFixedBlock+0x20>
 8008650:	68f3      	ldr	r3, [r6, #12]
 8008652:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8008654:	eb02 0803 	add.w	r8, r2, r3
 8008658:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800865c:	ebc5 0508 	rsb	r5, r5, r8
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b133      	cbz	r3, 8008672 <GUI_ALLOC_GetFixedBlock+0x52>
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff feb1 	bl	80083cc <_RemoveHoles>
 800866a:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800866e:	ebc5 0508 	rsb	r5, r5, r8
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	bb0b      	cbnz	r3, 80086ba <GUI_ALLOC_GetFixedBlock+0x9a>
 8008676:	686b      	ldr	r3, [r5, #4]
 8008678:	429f      	cmp	r7, r3
 800867a:	dc1e      	bgt.n	80086ba <GUI_ALLOC_GetFixedBlock+0x9a>
 800867c:	4628      	mov	r0, r5
 800867e:	1d1c      	adds	r4, r3, #4
 8008680:	f7ff fe32 	bl	80082e8 <_RemoveFreeBlock>
 8008684:	68f3      	ldr	r3, [r6, #12]
 8008686:	6868      	ldr	r0, [r5, #4]
 8008688:	1bdb      	subs	r3, r3, r7
 800868a:	60f3      	str	r3, [r6, #12]
 800868c:	6973      	ldr	r3, [r6, #20]
 800868e:	1be4      	subs	r4, r4, r7
 8008690:	443b      	add	r3, r7
 8008692:	1bc0      	subs	r0, r0, r7
 8008694:	442c      	add	r4, r5
 8008696:	6173      	str	r3, [r6, #20]
 8008698:	d002      	beq.n	80086a0 <GUI_ALLOC_GetFixedBlock+0x80>
 800869a:	4629      	mov	r1, r5
 800869c:	f7ff fe44 	bl	8008328 <_AddFreeMemory>
 80086a0:	f844 7c04 	str.w	r7, [r4, #-4]
 80086a4:	e009      	b.n	80086ba <GUI_ALLOC_GetFixedBlock+0x9a>
 80086a6:	b10b      	cbz	r3, 80086ac <GUI_ALLOC_GetFixedBlock+0x8c>
 80086a8:	6861      	ldr	r1, [r4, #4]
 80086aa:	6059      	str	r1, [r3, #4]
 80086ac:	6861      	ldr	r1, [r4, #4]
 80086ae:	b101      	cbz	r1, 80086b2 <GUI_ALLOC_GetFixedBlock+0x92>
 80086b0:	600b      	str	r3, [r1, #0]
 80086b2:	42a2      	cmp	r2, r4
 80086b4:	d101      	bne.n	80086ba <GUI_ALLOC_GetFixedBlock+0x9a>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	63f3      	str	r3, [r6, #60]	; 0x3c
 80086ba:	4620      	mov	r0, r4
 80086bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c0:	20027214 	.word	0x20027214

080086c4 <_Alloc>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	4e39      	ldr	r6, [pc, #228]	; (80087b0 <_Alloc+0xec>)
 80086ca:	4604      	mov	r4, r0
 80086cc:	f7ff ff74 	bl	80085b8 <_InitOnce>
 80086d0:	6c35      	ldr	r5, [r6, #64]	; 0x40
 80086d2:	6833      	ldr	r3, [r6, #0]
 80086d4:	42ac      	cmp	r4, r5
 80086d6:	bf24      	itt	cs
 80086d8:	3403      	addcs	r4, #3
 80086da:	f024 0503 	biccs.w	r5, r4, #3
 80086de:	350c      	adds	r5, #12
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	4c33      	ldr	r4, [pc, #204]	; (80087b0 <_Alloc+0xec>)
 80086e4:	d33e      	bcc.n	8008764 <_Alloc+0xa0>
 80086e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086e8:	6862      	ldr	r2, [r4, #4]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d90f      	bls.n	800870e <_Alloc+0x4a>
 80086ee:	6873      	ldr	r3, [r6, #4]
 80086f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80086f2:	3b01      	subs	r3, #1
 80086f4:	6073      	str	r3, [r6, #4]
 80086f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80086f8:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80086fc:	eb03 0208 	add.w	r2, r3, r8
 8008700:	6852      	ldr	r2, [r2, #4]
 8008702:	6272      	str	r2, [r6, #36]	; 0x24
 8008704:	2201      	movs	r2, #1
 8008706:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 800870a:	b957      	cbnz	r7, 8008722 <_Alloc+0x5e>
 800870c:	e02a      	b.n	8008764 <_Alloc+0xa0>
 800870e:	3b01      	subs	r3, #1
 8008710:	6323      	str	r3, [r4, #48]	; 0x30
 8008712:	f7ff ff03 	bl	800851c <_EnlargeBlocks>
 8008716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008718:	3301      	adds	r3, #1
 800871a:	6323      	str	r3, [r4, #48]	; 0x30
 800871c:	2800      	cmp	r0, #0
 800871e:	d0e6      	beq.n	80086ee <_Alloc+0x2a>
 8008720:	e020      	b.n	8008764 <_Alloc+0xa0>
 8008722:	230f      	movs	r3, #15
 8008724:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008728:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800872a:	4295      	cmp	r5, r2
 800872c:	d20c      	bcs.n	8008748 <_Alloc+0x84>
 800872e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8008732:	d2f7      	bcs.n	8008724 <_Alloc+0x60>
 8008734:	e008      	b.n	8008748 <_Alloc+0x84>
 8008736:	6894      	ldr	r4, [r2, #8]
 8008738:	b12c      	cbz	r4, 8008746 <_Alloc+0x82>
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	4295      	cmp	r5, r2
 800873e:	d914      	bls.n	800876a <_Alloc+0xa6>
 8008740:	68a2      	ldr	r2, [r4, #8]
 8008742:	2a00      	cmp	r2, #0
 8008744:	d1f7      	bne.n	8008736 <_Alloc+0x72>
 8008746:	3301      	adds	r3, #1
 8008748:	2b0f      	cmp	r3, #15
 800874a:	d803      	bhi.n	8008754 <_Alloc+0x90>
 800874c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008750:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008752:	e7f6      	b.n	8008742 <_Alloc+0x7e>
 8008754:	4628      	mov	r0, r5
 8008756:	f7ff fe39 	bl	80083cc <_RemoveHoles>
 800875a:	2800      	cmp	r0, #0
 800875c:	d0e1      	beq.n	8008722 <_Alloc+0x5e>
 800875e:	4638      	mov	r0, r7
 8008760:	f7ff fdb0 	bl	80082c4 <_PushFreeBlock>
 8008764:	2000      	movs	r0, #0
 8008766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800876e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8008770:	ebc5 0209 	rsb	r2, r5, r9
 8008774:	330c      	adds	r3, #12
 8008776:	4620      	mov	r0, r4
 8008778:	429a      	cmp	r2, r3
 800877a:	bf38      	it	cc
 800877c:	464d      	movcc	r5, r9
 800877e:	f7ff fdb3 	bl	80082e8 <_RemoveFreeBlock>
 8008782:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008784:	1961      	adds	r1, r4, r5
 8008786:	4498      	add	r8, r3
 8008788:	454d      	cmp	r5, r9
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	f8c8 4004 	str.w	r4, [r8, #4]
 8008792:	6027      	str	r7, [r4, #0]
 8008794:	6065      	str	r5, [r4, #4]
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	6124      	str	r4, [r4, #16]
 800879a:	f841 5c04 	str.w	r5, [r1, #-4]
 800879e:	da03      	bge.n	80087a8 <_Alloc+0xe4>
 80087a0:	ebc5 0009 	rsb	r0, r5, r9
 80087a4:	f7ff fdc0 	bl	8008328 <_AddFreeMemory>
 80087a8:	4638      	mov	r0, r7
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	bf00      	nop
 80087b0:	20027214 	.word	0x20027214

080087b4 <GUI_ALLOC_AllocNoInit>:
 80087b4:	b510      	push	{r4, lr}
 80087b6:	4604      	mov	r4, r0
 80087b8:	b138      	cbz	r0, 80087ca <GUI_ALLOC_AllocNoInit+0x16>
 80087ba:	f000 fc91 	bl	80090e0 <GUI_Lock>
 80087be:	4620      	mov	r0, r4
 80087c0:	f7ff ff80 	bl	80086c4 <_Alloc>
 80087c4:	4604      	mov	r4, r0
 80087c6:	f000 fc81 	bl	80090cc <GUI_Unlock>
 80087ca:	4620      	mov	r0, r4
 80087cc:	bd10      	pop	{r4, pc}
	...

080087d0 <GUI_ALLOC_AllocZero>:
 80087d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087d2:	4605      	mov	r5, r0
 80087d4:	f000 fc84 	bl	80090e0 <GUI_Lock>
 80087d8:	4628      	mov	r0, r5
 80087da:	f7ff ffeb 	bl	80087b4 <GUI_ALLOC_AllocNoInit>
 80087de:	4606      	mov	r6, r0
 80087e0:	b160      	cbz	r0, 80087fc <GUI_ALLOC_AllocZero+0x2c>
 80087e2:	f7ff fe55 	bl	8008490 <GUI_ALLOC_LockH>
 80087e6:	ac02      	add	r4, sp, #8
 80087e8:	4b07      	ldr	r3, [pc, #28]	; (8008808 <GUI_ALLOC_AllocZero+0x38>)
 80087ea:	f844 0d04 	str.w	r0, [r4, #-4]!
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	462a      	mov	r2, r5
 80087f2:	2100      	movs	r1, #0
 80087f4:	4798      	blx	r3
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff fe58 	bl	80084ac <GUI_ALLOC_UnlockH>
 80087fc:	f000 fc66 	bl	80090cc <GUI_Unlock>
 8008800:	4630      	mov	r0, r6
 8008802:	b002      	add	sp, #8
 8008804:	bd70      	pop	{r4, r5, r6, pc}
 8008806:	bf00      	nop
 8008808:	20000024 	.word	0x20000024

0800880c <GL_FillCircle>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	f240 26c3 	movw	r6, #707	; 0x2c3
 8008814:	b085      	sub	sp, #20
 8008816:	4f2c      	ldr	r7, [pc, #176]	; (80088c8 <GL_FillCircle+0xbc>)
 8008818:	4356      	muls	r6, r2
 800881a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800881e:	fb96 f6f3 	sdiv	r6, r6, r3
 8008822:	2302      	movs	r3, #2
 8008824:	fb92 f3f3 	sdiv	r3, r2, r3
 8008828:	fb02 3302 	mla	r3, r2, r2, r3
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008832:	4614      	mov	r4, r2
 8008834:	4680      	mov	r8, r0
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4402      	add	r2, r0
 800883a:	2501      	movs	r5, #1
 800883c:	1b00      	subs	r0, r0, r4
 800883e:	4689      	mov	r9, r1
 8008840:	4798      	blx	r3
 8008842:	eb08 0305 	add.w	r3, r8, r5
 8008846:	9302      	str	r3, [sp, #8]
 8008848:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800884c:	3601      	adds	r6, #1
 800884e:	9303      	str	r3, [sp, #12]
 8008850:	42b5      	cmp	r5, r6
 8008852:	dc35      	bgt.n	80088c0 <GL_FillCircle+0xb4>
 8008854:	fb04 f304 	mul.w	r3, r4, r4
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	fb05 3305 	mla	r3, r5, r5, r3
 800885e:	429a      	cmp	r2, r3
 8008860:	da18      	bge.n	8008894 <GL_FillCircle+0x88>
 8008862:	42b4      	cmp	r4, r6
 8008864:	dd15      	ble.n	8008892 <GL_FillCircle+0x86>
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	ebc5 0a03 	rsb	sl, r5, r3
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	eb03 0b05 	add.w	fp, r3, r5
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008876:	465a      	mov	r2, fp
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	eb04 0109 	add.w	r1, r4, r9
 800887e:	4650      	mov	r0, sl
 8008880:	4798      	blx	r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008886:	465a      	mov	r2, fp
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	ebc4 0109 	rsb	r1, r4, r9
 800888e:	4650      	mov	r0, sl
 8008890:	4798      	blx	r3
 8008892:	3c01      	subs	r4, #1
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008898:	ebc4 0a08 	rsb	sl, r4, r8
 800889c:	eb04 0b08 	add.w	fp, r4, r8
 80088a0:	eb09 0105 	add.w	r1, r9, r5
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	465a      	mov	r2, fp
 80088a8:	4650      	mov	r0, sl
 80088aa:	4798      	blx	r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b0:	ebc5 0109 	rsb	r1, r5, r9
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	465a      	mov	r2, fp
 80088b8:	4650      	mov	r0, sl
 80088ba:	4798      	blx	r3
 80088bc:	3501      	adds	r5, #1
 80088be:	e7c7      	b.n	8008850 <GL_FillCircle+0x44>
 80088c0:	b005      	add	sp, #20
 80088c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c6:	bf00      	nop
 80088c8:	20000014 	.word	0x20000014

080088cc <GUI_FillCircle>:
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	4604      	mov	r4, r0
 80088d2:	460d      	mov	r5, r1
 80088d4:	4616      	mov	r6, r2
 80088d6:	f000 fc03 	bl	80090e0 <GUI_Lock>
 80088da:	4b0c      	ldr	r3, [pc, #48]	; (800890c <GUI_FillCircle+0x40>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2000      	movs	r0, #0
 80088e0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80088e2:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 80088e6:	f003 fb45 	bl	800bf74 <WM__InitIVRSearch>
 80088ea:	b918      	cbnz	r0, 80088f4 <GUI_FillCircle+0x28>
 80088ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	f000 bbec 	b.w	80090cc <GUI_Unlock>
 80088f4:	4445      	add	r5, r8
 80088f6:	443c      	add	r4, r7
 80088f8:	4632      	mov	r2, r6
 80088fa:	4629      	mov	r1, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	f7ff ff85 	bl	800880c <GL_FillCircle>
 8008902:	f003 fa75 	bl	800bdf0 <WM__GetNextIVR>
 8008906:	2800      	cmp	r0, #0
 8008908:	d1f6      	bne.n	80088f8 <GUI_FillCircle+0x2c>
 800890a:	e7ef      	b.n	80088ec <GUI_FillCircle+0x20>
 800890c:	20000014 	.word	0x20000014

08008910 <GUI_CalcColorDist>:
 8008910:	b2c3      	uxtb	r3, r0
 8008912:	b2ca      	uxtb	r2, r1
 8008914:	1a9a      	subs	r2, r3, r2
 8008916:	b292      	uxth	r2, r2
 8008918:	b510      	push	{r4, lr}
 800891a:	b214      	sxth	r4, r2
 800891c:	2c00      	cmp	r4, #0
 800891e:	bfbc      	itt	lt
 8008920:	4252      	neglt	r2, r2
 8008922:	b214      	sxthlt	r4, r2
 8008924:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008928:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	b29b      	uxth	r3, r3
 8008930:	0c09      	lsrs	r1, r1, #16
 8008932:	b21a      	sxth	r2, r3
 8008934:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8008938:	2a00      	cmp	r2, #0
 800893a:	b289      	uxth	r1, r1
 800893c:	b208      	sxth	r0, r1
 800893e:	bfbc      	itt	lt
 8008940:	425b      	neglt	r3, r3
 8008942:	b21a      	sxthlt	r2, r3
 8008944:	2800      	cmp	r0, #0
 8008946:	bfbc      	itt	lt
 8008948:	4249      	neglt	r1, r1
 800894a:	b208      	sxthlt	r0, r1
 800894c:	4352      	muls	r2, r2
 800894e:	fb04 2204 	mla	r2, r4, r4, r2
 8008952:	b280      	uxth	r0, r0
 8008954:	fb00 2000 	mla	r0, r0, r0, r2
 8008958:	bd10      	pop	{r4, pc}
	...

0800895c <GUI_GetDrawMode>:
 800895c:	b510      	push	{r4, lr}
 800895e:	f000 fbbf 	bl	80090e0 <GUI_Lock>
 8008962:	4b03      	ldr	r3, [pc, #12]	; (8008970 <GUI_GetDrawMode+0x14>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	7c1c      	ldrb	r4, [r3, #16]
 8008968:	f000 fbb0 	bl	80090cc <GUI_Unlock>
 800896c:	4620      	mov	r0, r4
 800896e:	bd10      	pop	{r4, pc}
 8008970:	20000014 	.word	0x20000014

08008974 <GUI_GetVersionString>:
 8008974:	4804      	ldr	r0, [pc, #16]	; (8008988 <GUI_GetVersionString+0x14>)
 8008976:	2335      	movs	r3, #53	; 0x35
 8008978:	7003      	strb	r3, [r0, #0]
 800897a:	2334      	movs	r3, #52	; 0x34
 800897c:	7083      	strb	r3, [r0, #2]
 800897e:	70c3      	strb	r3, [r0, #3]
 8008980:	2361      	movs	r3, #97	; 0x61
 8008982:	7103      	strb	r3, [r0, #4]
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20000000 	.word	0x20000000

0800898c <GUI_MergeRect>:
 800898c:	b510      	push	{r4, lr}
 800898e:	b338      	cbz	r0, 80089e0 <GUI_MergeRect+0x54>
 8008990:	b309      	cbz	r1, 80089d6 <GUI_MergeRect+0x4a>
 8008992:	b30a      	cbz	r2, 80089d8 <GUI_MergeRect+0x4c>
 8008994:	f9b2 4000 	ldrsh.w	r4, [r2]
 8008998:	f9b1 3000 	ldrsh.w	r3, [r1]
 800899c:	42a3      	cmp	r3, r4
 800899e:	bfa8      	it	ge
 80089a0:	4623      	movge	r3, r4
 80089a2:	8003      	strh	r3, [r0, #0]
 80089a4:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80089a8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	bfa8      	it	ge
 80089b0:	4623      	movge	r3, r4
 80089b2:	8043      	strh	r3, [r0, #2]
 80089b4:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80089b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80089bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	bfb8      	it	lt
 80089c4:	4623      	movlt	r3, r4
 80089c6:	8083      	strh	r3, [r0, #4]
 80089c8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	bfb8      	it	lt
 80089d0:	4613      	movlt	r3, r2
 80089d2:	80c3      	strh	r3, [r0, #6]
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	4611      	mov	r1, r2
 80089d8:	680b      	ldr	r3, [r1, #0]
 80089da:	6003      	str	r3, [r0, #0]
 80089dc:	684b      	ldr	r3, [r1, #4]
 80089de:	6043      	str	r3, [r0, #4]
 80089e0:	bd10      	pop	{r4, pc}

080089e2 <GUI_MoveRect>:
 80089e2:	b168      	cbz	r0, 8008a00 <GUI_MoveRect+0x1e>
 80089e4:	8803      	ldrh	r3, [r0, #0]
 80089e6:	b289      	uxth	r1, r1
 80089e8:	440b      	add	r3, r1
 80089ea:	8003      	strh	r3, [r0, #0]
 80089ec:	8883      	ldrh	r3, [r0, #4]
 80089ee:	4419      	add	r1, r3
 80089f0:	8843      	ldrh	r3, [r0, #2]
 80089f2:	8081      	strh	r1, [r0, #4]
 80089f4:	b292      	uxth	r2, r2
 80089f6:	4413      	add	r3, r2
 80089f8:	8043      	strh	r3, [r0, #2]
 80089fa:	88c3      	ldrh	r3, [r0, #6]
 80089fc:	441a      	add	r2, r3
 80089fe:	80c2      	strh	r2, [r0, #6]
 8008a00:	4770      	bx	lr
	...

08008a04 <GUI_GotoXY>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4605      	mov	r5, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	f000 fb69 	bl	80090e0 <GUI_Lock>
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <GUI_GotoXY+0x1c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	845d      	strh	r5, [r3, #34]	; 0x22
 8008a14:	849c      	strh	r4, [r3, #36]	; 0x24
 8008a16:	f000 fb59 	bl	80090cc <GUI_Unlock>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	bd38      	pop	{r3, r4, r5, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000014 	.word	0x20000014

08008a24 <GUI_RectsIntersect>:
 8008a24:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008a28:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	dc14      	bgt.n	8008a5a <GUI_RectsIntersect+0x36>
 8008a30:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8008a34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	dc0e      	bgt.n	8008a5a <GUI_RectsIntersect+0x36>
 8008a3c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008a40:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	dc08      	bgt.n	8008a5a <GUI_RectsIntersect+0x36>
 8008a48:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008a4c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8008a50:	4283      	cmp	r3, r0
 8008a52:	bfcc      	ite	gt
 8008a54:	2000      	movgt	r0, #0
 8008a56:	2001      	movle	r0, #1
 8008a58:	4770      	bx	lr
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	4770      	bx	lr

08008a5e <GUI_SelectLCD>:
 8008a5e:	b508      	push	{r3, lr}
 8008a60:	f000 fb3e 	bl	80090e0 <GUI_Lock>
 8008a64:	f001 f8ac 	bl	8009bc0 <LCD_SelectLCD>
 8008a68:	f001 f95a 	bl	8009d20 <LCD_UpdateColorIndices>
 8008a6c:	f003 fb02 	bl	800c074 <WM_Activate>
 8008a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a74:	f000 bb2a 	b.w	80090cc <GUI_Unlock>

08008a78 <GUI_SetBkColor>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	f000 fb30 	bl	80090e0 <GUI_Lock>
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 feb5 	bl	80097f0 <LCD_SetBkColor>
 8008a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a8a:	f000 bb1f 	b.w	80090cc <GUI_Unlock>

08008a8e <GUI_SetColor>:
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	4604      	mov	r4, r0
 8008a92:	f000 fb25 	bl	80090e0 <GUI_Lock>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 feb0 	bl	80097fc <LCD_SetColor>
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	f000 bb14 	b.w	80090cc <GUI_Unlock>

08008aa4 <GUI_SetOrg>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	f000 fb19 	bl	80090e0 <GUI_Lock>
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <GUI_SetOrg+0x30>)
 8008ab0:	801c      	strh	r4, [r3, #0]
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <GUI_SetOrg+0x34>)
 8008ab4:	801d      	strh	r5, [r3, #0]
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <GUI_SetOrg+0x38>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	7c5a      	ldrb	r2, [r3, #17]
 8008abc:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <GUI_SetOrg+0x3c>)
 8008abe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008ac2:	68c2      	ldr	r2, [r0, #12]
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	6a16      	ldr	r6, [r2, #32]
 8008ac8:	462a      	mov	r2, r5
 8008aca:	47b0      	blx	r6
 8008acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ad0:	f000 bafc 	b.w	80090cc <GUI_Unlock>
 8008ad4:	200272fc 	.word	0x200272fc
 8008ad8:	200272ec 	.word	0x200272ec
 8008adc:	20000014 	.word	0x20000014
 8008ae0:	20027324 	.word	0x20027324

08008ae4 <_InitContext>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4e1a      	ldr	r6, [pc, #104]	; (8008b50 <_InitContext+0x6c>)
 8008ae8:	4d1a      	ldr	r5, [pc, #104]	; (8008b54 <_InitContext+0x70>)
 8008aea:	f106 0384 	add.w	r3, r6, #132	; 0x84
 8008aee:	6703      	str	r3, [r0, #112]	; 0x70
 8008af0:	68eb      	ldr	r3, [r5, #12]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	63da      	str	r2, [r3, #60]	; 0x3c
 8008af6:	f103 0208 	add.w	r2, r3, #8
 8008afa:	639b      	str	r3, [r3, #56]	; 0x38
 8008afc:	641b      	str	r3, [r3, #64]	; 0x40
 8008afe:	6142      	str	r2, [r0, #20]
 8008b00:	7c5a      	ldrb	r2, [r3, #17]
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <_InitContext+0x74>)
 8008b04:	4604      	mov	r4, r0
 8008b06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b0a:	68c3      	ldr	r3, [r0, #12]
 8008b0c:	f104 0108 	add.w	r1, r4, #8
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	4798      	blx	r3
 8008b14:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <_InitContext+0x78>)
 8008b16:	6663      	str	r3, [r4, #100]	; 0x64
 8008b18:	686b      	ldr	r3, [r5, #4]
 8008b1a:	61e3      	str	r3, [r4, #28]
 8008b1c:	68eb      	ldr	r3, [r5, #12]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	6163      	str	r3, [r4, #20]
 8008b22:	2301      	movs	r3, #1
 8008b24:	7623      	strb	r3, [r4, #24]
 8008b26:	76e3      	strb	r3, [r4, #27]
 8008b28:	f003 fb7c 	bl	800c224 <WM_GetDesktopWindow>
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8008b32:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008b36:	6323      	str	r3, [r4, #48]	; 0x30
 8008b38:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3a:	64a0      	str	r0, [r4, #72]	; 0x48
 8008b3c:	6830      	ldr	r0, [r6, #0]
 8008b3e:	f000 fe57 	bl	80097f0 <LCD_SetBkColor>
 8008b42:	68a8      	ldr	r0, [r5, #8]
 8008b44:	f000 fe5a 	bl	80097fc <LCD_SetColor>
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <_InitContext+0x7c>)
 8008b4a:	4a06      	ldr	r2, [pc, #24]	; (8008b64 <_InitContext+0x80>)
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	200000e0 	.word	0x200000e0
 8008b54:	20000008 	.word	0x20000008
 8008b58:	20027324 	.word	0x20027324
 8008b5c:	0800d0d0 	.word	0x0800d0d0
 8008b60:	2002731c 	.word	0x2002731c
 8008b64:	0800d0e8 	.word	0x0800d0e8

08008b68 <_OnExit>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	4d0b      	ldr	r5, [pc, #44]	; (8008b98 <_OnExit+0x30>)
 8008b6c:	4e0b      	ldr	r6, [pc, #44]	; (8008b9c <_OnExit+0x34>)
 8008b6e:	2400      	movs	r4, #0
 8008b70:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8008b74:	3504      	adds	r5, #4
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	2274      	movs	r2, #116	; 0x74
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	4798      	blx	r3
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	4807      	ldr	r0, [pc, #28]	; (8008ba0 <_OnExit+0x38>)
 8008b84:	2208      	movs	r2, #8
 8008b86:	4621      	mov	r1, r4
 8008b88:	4798      	blx	r3
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <_OnExit+0x3c>)
 8008b8c:	60dd      	str	r5, [r3, #12]
 8008b8e:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <_OnExit+0x40>)
 8008b90:	701c      	strb	r4, [r3, #0]
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <_OnExit+0x44>)
 8008b94:	601c      	str	r4, [r3, #0]
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	200000e0 	.word	0x200000e0
 8008b9c:	20000024 	.word	0x20000024
 8008ba0:	20027324 	.word	0x20027324
 8008ba4:	20000008 	.word	0x20000008
 8008ba8:	2002730c 	.word	0x2002730c
 8008bac:	200272e8 	.word	0x200272e8

08008bb0 <GUI_SetDefaultFont>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	; (8008bb8 <GUI_SetDefaultFont+0x8>)
 8008bb2:	6058      	str	r0, [r3, #4]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	20000008 	.word	0x20000008

08008bbc <GUI_ClearRect>:
 8008bbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	461f      	mov	r7, r3
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	f000 fa8a 	bl	80090e0 <GUI_Lock>
 8008bcc:	2004      	movs	r0, #4
 8008bce:	f000 fbbf 	bl	8009350 <LCD_SetDrawMode>
 8008bd2:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <GUI_ClearRect+0x68>)
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bda:	4680      	mov	r8, r0
 8008bdc:	4414      	add	r4, r2
 8008bde:	441d      	add	r5, r3
 8008be0:	4416      	add	r6, r2
 8008be2:	441f      	add	r7, r3
 8008be4:	4668      	mov	r0, sp
 8008be6:	f8ad 4000 	strh.w	r4, [sp]
 8008bea:	f8ad 6004 	strh.w	r6, [sp, #4]
 8008bee:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008bf2:	f8ad 7006 	strh.w	r7, [sp, #6]
 8008bf6:	f003 f9bd 	bl	800bf74 <WM__InitIVRSearch>
 8008bfa:	b938      	cbnz	r0, 8008c0c <GUI_ClearRect+0x50>
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	f000 fba7 	bl	8009350 <LCD_SetDrawMode>
 8008c02:	f000 fa63 	bl	80090cc <GUI_Unlock>
 8008c06:	b002      	add	sp, #8
 8008c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	4632      	mov	r2, r6
 8008c10:	4629      	mov	r1, r5
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 fbfa 	bl	800940c <LCD_FillRect>
 8008c18:	f003 f8ea 	bl	800bdf0 <WM__GetNextIVR>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d1f5      	bne.n	8008c0c <GUI_ClearRect+0x50>
 8008c20:	e7ec      	b.n	8008bfc <GUI_ClearRect+0x40>
 8008c22:	bf00      	nop
 8008c24:	20000008 	.word	0x20000008

08008c28 <GUI_Clear>:
 8008c28:	b510      	push	{r4, lr}
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	f7ff fee9 	bl	8008a04 <GUI_GotoXY>
 8008c32:	4904      	ldr	r1, [pc, #16]	; (8008c44 <GUI_Clear+0x1c>)
 8008c34:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c40:	f7ff bfbc 	b.w	8008bbc <GUI_ClearRect>
 8008c44:	ffffc001 	.word	0xffffc001

08008c48 <GUI__Config>:
 8008c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c4a:	4d20      	ldr	r5, [pc, #128]	; (8008ccc <GUI__Config+0x84>)
 8008c4c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8008c50:	b085      	sub	sp, #20
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d138      	bne.n	8008cc8 <GUI__Config+0x80>
 8008c56:	2301      	movs	r3, #1
 8008c58:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8008c5c:	4b1c      	ldr	r3, [pc, #112]	; (8008cd0 <GUI__Config+0x88>)
 8008c5e:	466a      	mov	r2, sp
 8008c60:	f103 0708 	add.w	r7, r3, #8
 8008c64:	466e      	mov	r6, sp
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	c403      	stmia	r4!, {r0, r1}
 8008c6e:	3308      	adds	r3, #8
 8008c70:	42bb      	cmp	r3, r7
 8008c72:	4622      	mov	r2, r4
 8008c74:	d1f7      	bne.n	8008c66 <GUI__Config+0x1e>
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	8899      	ldrh	r1, [r3, #4]
 8008c7a:	799b      	ldrb	r3, [r3, #6]
 8008c7c:	71a3      	strb	r3, [r4, #6]
 8008c7e:	6020      	str	r0, [r4, #0]
 8008c80:	80a1      	strh	r1, [r4, #4]
 8008c82:	4c14      	ldr	r4, [pc, #80]	; (8008cd4 <GUI__Config+0x8c>)
 8008c84:	4633      	mov	r3, r6
 8008c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c8a:	f804 2b01 	strb.w	r2, [r4], #1
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	d1f8      	bne.n	8008c86 <GUI__Config+0x3e>
 8008c94:	f7ff fe6e 	bl	8008974 <GUI_GetVersionString>
 8008c98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	f804 3b01 	strb.w	r3, [r4], #1
 8008ca2:	7803      	ldrb	r3, [r0, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1f7      	bne.n	8008c98 <GUI__Config+0x50>
 8008ca8:	7053      	strb	r3, [r2, #1]
 8008caa:	f7fb f825 	bl	8003cf8 <GUI_X_Config>
 8008cae:	f000 fa53 	bl	8009158 <GUITASK_Init>
 8008cb2:	f7fb f9bf 	bl	8004034 <LCD_X_Config>
 8008cb6:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <GUI__Config+0x90>)
 8008cb8:	4808      	ldr	r0, [pc, #32]	; (8008cdc <GUI__Config+0x94>)
 8008cba:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8008cbe:	b005      	add	sp, #20
 8008cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008cc4:	f000 b88a 	b.w	8008ddc <GUI__RegisterExit>
 8008cc8:	b005      	add	sp, #20
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ccc:	200000e0 	.word	0x200000e0
 8008cd0:	0800d0d8 	.word	0x0800d0d8
 8008cd4:	20000164 	.word	0x20000164
 8008cd8:	08008b69 	.word	0x08008b69
 8008cdc:	20000178 	.word	0x20000178

08008ce0 <GUI_Init>:
 8008ce0:	b590      	push	{r4, r7, lr}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4a34      	ldr	r2, [pc, #208]	; (8008db8 <GUI_Init+0xd8>)
 8008ce8:	4b33      	ldr	r3, [pc, #204]	; (8008db8 <GUI_Init+0xd8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	4b32      	ldr	r3, [pc, #200]	; (8008dbc <GUI_Init+0xdc>)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	bf00      	nop
 8008cfa:	4b30      	ldr	r3, [pc, #192]	; (8008dbc <GUI_Init+0xdc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1fb      	bne.n	8008cfa <GUI_Init+0x1a>
 8008d02:	4b2f      	ldr	r3, [pc, #188]	; (8008dc0 <GUI_Init+0xe0>)
 8008d04:	4a2f      	ldr	r2, [pc, #188]	; (8008dc4 <GUI_Init+0xe4>)
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	4b2d      	ldr	r3, [pc, #180]	; (8008dc0 <GUI_Init+0xe0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a2e      	ldr	r2, [pc, #184]	; (8008dc8 <GUI_Init+0xe8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d000      	beq.n	8008d14 <GUI_Init+0x34>
 8008d12:	e7fe      	b.n	8008d12 <GUI_Init+0x32>
 8008d14:	f7ff ff98 	bl	8008c48 <GUI__Config>
 8008d18:	4b2c      	ldr	r3, [pc, #176]	; (8008dcc <GUI_Init+0xec>)
 8008d1a:	222e      	movs	r2, #46	; 0x2e
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	f7fb feb7 	bl	8004a90 <GUI_X_Init>
 8008d22:	482b      	ldr	r0, [pc, #172]	; (8008dd0 <GUI_Init+0xf0>)
 8008d24:	f7ff fede 	bl	8008ae4 <_InitContext>
 8008d28:	f000 fcbc 	bl	80096a4 <emWin_LCD_Init>
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	f000 fef5 	bl	8009b1c <LCD_GetXSizeDisplay>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bf0c      	ite	eq
 8008d38:	2301      	moveq	r3, #1
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	b2dc      	uxtb	r4, r3
 8008d3e:	f000 fef3 	bl	8009b28 <LCD_GetYSizeDisplay>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	4323      	orrs	r3, r4
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <GUI_Init+0x8a>
 8008d56:	f000 fed1 	bl	8009afc <LCD_GetXSizeMax>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	f000 fed1 	bl	8009b02 <LCD_GetYSizeMax>
 8008d60:	4603      	mov	r3, r0
 8008d62:	4619      	mov	r1, r3
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 fed3 	bl	8009b10 <LCD_SetDisplaySize>
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f7ff fe99 	bl	8008aa4 <GUI_SetOrg>
 8008d72:	f003 f9df 	bl	800c134 <WM_Init>
 8008d76:	f000 fa15 	bl	80091a4 <GUITASK_CopyContext>
 8008d7a:	4b16      	ldr	r3, [pc, #88]	; (8008dd4 <GUI_Init+0xf4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d012      	beq.n	8008da8 <GUI_Init+0xc8>
 8008d82:	e00d      	b.n	8008da0 <GUI_Init+0xc0>
 8008d84:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <GUI_Init+0xf4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <GUI_Init+0xb6>
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <GUI_Init+0xf4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4798      	blx	r3
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <GUI_Init+0xf4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4a0d      	ldr	r2, [pc, #52]	; (8008dd4 <GUI_Init+0xf4>)
 8008d9e:	6013      	str	r3, [r2, #0]
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <GUI_Init+0xf4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1ed      	bne.n	8008d84 <GUI_Init+0xa4>
 8008da8:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <GUI_Init+0xf8>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	e0002000 	.word	0xe0002000
 8008dbc:	40023008 	.word	0x40023008
 8008dc0:	40023000 	.word	0x40023000
 8008dc4:	f407a5c2 	.word	0xf407a5c2
 8008dc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8008dcc:	200272dc 	.word	0x200272dc
 8008dd0:	200000e4 	.word	0x200000e4
 8008dd4:	2000015c 	.word	0x2000015c
 8008dd8:	20027304 	.word	0x20027304

08008ddc <GUI__RegisterExit>:
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <GUI__RegisterExit+0x24>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	605a      	str	r2, [r3, #4]
 8008dec:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <GUI__RegisterExit+0x24>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20000158 	.word	0x20000158

08008e04 <GUI_DEVICE__GetpDriver>:
 8008e04:	2801      	cmp	r0, #1
 8008e06:	dc09      	bgt.n	8008e1c <GUI_DEVICE__GetpDriver+0x18>
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <GUI_DEVICE__GetpDriver+0x1c>)
 8008e0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008e0e:	b120      	cbz	r0, 8008e1a <GUI_DEVICE__GetpDriver+0x16>
 8008e10:	68c3      	ldr	r3, [r0, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	b11b      	cbz	r3, 8008e1e <GUI_DEVICE__GetpDriver+0x1a>
 8008e16:	6800      	ldr	r0, [r0, #0]
 8008e18:	e7f9      	b.n	8008e0e <GUI_DEVICE__GetpDriver+0xa>
 8008e1a:	4770      	bx	lr
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	4770      	bx	lr
 8008e20:	20027324 	.word	0x20027324

08008e24 <GUI_DEVICE_Delete>:
 8008e24:	f7ff bb20 	b.w	8008468 <GUI_ALLOC_FreeFixedBlock>

08008e28 <GUI_DEVICE_Create>:
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460d      	mov	r5, r1
 8008e30:	4617      	mov	r7, r2
 8008e32:	461c      	mov	r4, r3
 8008e34:	dd01      	ble.n	8008e3a <GUI_DEVICE_Create+0x12>
 8008e36:	2000      	movs	r0, #0
 8008e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3a:	201c      	movs	r0, #28
 8008e3c:	f7ff fbf0 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0f8      	beq.n	8008e36 <GUI_DEVICE_Create+0xe>
 8008e44:	b10d      	cbz	r5, 8008e4a <GUI_DEVICE_Create+0x22>
 8008e46:	6105      	str	r5, [r0, #16]
 8008e48:	e009      	b.n	8008e5e <GUI_DEVICE_Create+0x36>
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <GUI_DEVICE_Create+0x48>)
 8008e4c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008e50:	b129      	cbz	r1, 8008e5e <GUI_DEVICE_Create+0x36>
 8008e52:	680b      	ldr	r3, [r1, #0]
 8008e54:	b10b      	cbz	r3, 8008e5a <GUI_DEVICE_Create+0x32>
 8008e56:	4619      	mov	r1, r3
 8008e58:	e7fb      	b.n	8008e52 <GUI_DEVICE_Create+0x2a>
 8008e5a:	690b      	ldr	r3, [r1, #16]
 8008e5c:	6103      	str	r3, [r0, #16]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6083      	str	r3, [r0, #8]
 8008e62:	6184      	str	r4, [r0, #24]
 8008e64:	8287      	strh	r7, [r0, #20]
 8008e66:	60c6      	str	r6, [r0, #12]
 8008e68:	6003      	str	r3, [r0, #0]
 8008e6a:	6043      	str	r3, [r0, #4]
 8008e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20027324 	.word	0x20027324

08008e74 <GUI_DEVICE_Unlink>:
 8008e74:	6981      	ldr	r1, [r0, #24]
 8008e76:	4a0a      	ldr	r2, [pc, #40]	; (8008ea0 <GUI_DEVICE_Unlink+0x2c>)
 8008e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e7c:	4298      	cmp	r0, r3
 8008e7e:	6803      	ldr	r3, [r0, #0]
 8008e80:	d104      	bne.n	8008e8c <GUI_DEVICE_Unlink+0x18>
 8008e82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e86:	b10b      	cbz	r3, 8008e8c <GUI_DEVICE_Unlink+0x18>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	6842      	ldr	r2, [r0, #4]
 8008e8e:	b102      	cbz	r2, 8008e92 <GUI_DEVICE_Unlink+0x1e>
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	6803      	ldr	r3, [r0, #0]
 8008e94:	b103      	cbz	r3, 8008e98 <GUI_DEVICE_Unlink+0x24>
 8008e96:	605a      	str	r2, [r3, #4]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6003      	str	r3, [r0, #0]
 8008e9c:	6043      	str	r3, [r0, #4]
 8008e9e:	4770      	bx	lr
 8008ea0:	20027324 	.word	0x20027324

08008ea4 <GUI_DEVICE_Link>:
 8008ea4:	b530      	push	{r4, r5, lr}
 8008ea6:	b908      	cbnz	r0, 8008eac <GUI_DEVICE_Link+0x8>
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	bd30      	pop	{r4, r5, pc}
 8008eac:	6984      	ldr	r4, [r0, #24]
 8008eae:	2c01      	cmp	r4, #1
 8008eb0:	dcfa      	bgt.n	8008ea8 <GUI_DEVICE_Link+0x4>
 8008eb2:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <GUI_DEVICE_Link+0x7c>)
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	4294      	cmp	r4, r2
 8008eb8:	bfa4      	itt	ge
 8008eba:	1c62      	addge	r2, r4, #1
 8008ebc:	701a      	strbge	r2, [r3, #0]
 8008ebe:	4a19      	ldr	r2, [pc, #100]	; (8008f24 <GUI_DEVICE_Link+0x80>)
 8008ec0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	b91b      	cbnz	r3, 8008ed0 <GUI_DEVICE_Link+0x2c>
 8008ec8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	bd30      	pop	{r4, r5, pc}
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	b10a      	cbz	r2, 8008ed8 <GUI_DEVICE_Link+0x34>
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	e7fb      	b.n	8008ed0 <GUI_DEVICE_Link+0x2c>
 8008ed8:	68c2      	ldr	r2, [r0, #12]
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	68d9      	ldr	r1, [r3, #12]
 8008ede:	6809      	ldr	r1, [r1, #0]
 8008ee0:	4291      	cmp	r1, r2
 8008ee2:	dd03      	ble.n	8008eec <GUI_DEVICE_Link+0x48>
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f8      	bne.n	8008edc <GUI_DEVICE_Link+0x38>
 8008eea:	e7dd      	b.n	8008ea8 <GUI_DEVICE_Link+0x4>
 8008eec:	d109      	bne.n	8008f02 <GUI_DEVICE_Link+0x5e>
 8008eee:	8a81      	ldrh	r1, [r0, #20]
 8008ef0:	2901      	cmp	r1, #1
 8008ef2:	d106      	bne.n	8008f02 <GUI_DEVICE_Link+0x5e>
 8008ef4:	6819      	ldr	r1, [r3, #0]
 8008ef6:	b121      	cbz	r1, 8008f02 <GUI_DEVICE_Link+0x5e>
 8008ef8:	460b      	mov	r3, r1
 8008efa:	68c9      	ldr	r1, [r1, #12]
 8008efc:	6809      	ldr	r1, [r1, #0]
 8008efe:	428a      	cmp	r2, r1
 8008f00:	ddf8      	ble.n	8008ef4 <GUI_DEVICE_Link+0x50>
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	b112      	cbz	r2, 8008f0c <GUI_DEVICE_Link+0x68>
 8008f06:	6010      	str	r0, [r2, #0]
 8008f08:	6042      	str	r2, [r0, #4]
 8008f0a:	e001      	b.n	8008f10 <GUI_DEVICE_Link+0x6c>
 8008f0c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8008f10:	6058      	str	r0, [r3, #4]
 8008f12:	4298      	cmp	r0, r3
 8008f14:	bf08      	it	eq
 8008f16:	2300      	moveq	r3, #0
 8008f18:	6003      	str	r3, [r0, #0]
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	bd30      	pop	{r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	200272d6 	.word	0x200272d6
 8008f24:	20027324 	.word	0x20027324

08008f28 <GUI_DEVICE_CreateAndLink>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	461d      	mov	r5, r3
 8008f2c:	f7ff ff7c 	bl	8008e28 <GUI_DEVICE_Create>
 8008f30:	4604      	mov	r4, r0
 8008f32:	b148      	cbz	r0, 8008f48 <GUI_DEVICE_CreateAndLink+0x20>
 8008f34:	f7ff ffb6 	bl	8008ea4 <GUI_DEVICE_Link>
 8008f38:	68e3      	ldr	r3, [r4, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	b923      	cbnz	r3, 8008f48 <GUI_DEVICE_CreateAndLink+0x20>
 8008f3e:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <GUI_DEVICE_CreateAndLink+0x24>)
 8008f40:	3516      	adds	r5, #22
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20000014 	.word	0x20000014

08008f50 <GUI_DEVICE_UnlinkTaskDevices>:
 8008f50:	2000      	movs	r0, #0
 8008f52:	4770      	bx	lr

08008f54 <GUI_DEVICE_LinkDevices>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	b120      	cbz	r0, 8008f62 <GUI_DEVICE_LinkDevices+0xe>
 8008f58:	6804      	ldr	r4, [r0, #0]
 8008f5a:	f7ff ffa3 	bl	8008ea4 <GUI_DEVICE_Link>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	e7f9      	b.n	8008f56 <GUI_DEVICE_LinkDevices+0x2>
 8008f62:	bd10      	pop	{r4, pc}

08008f64 <_OnExit>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4c0e      	ldr	r4, [pc, #56]	; (8008fa0 <_OnExit+0x3c>)
 8008f68:	4d0e      	ldr	r5, [pc, #56]	; (8008fa4 <_OnExit+0x40>)
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4620      	mov	r0, r4
 8008f72:	4798      	blx	r3
 8008f74:	2208      	movs	r2, #8
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	18a0      	adds	r0, r4, r2
 8008f7c:	4798      	blx	r3
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	2208      	movs	r2, #8
 8008f82:	2100      	movs	r1, #0
 8008f84:	f104 0010 	add.w	r0, r4, #16
 8008f88:	4798      	blx	r3
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	2100      	movs	r1, #0
 8008f90:	f104 0018 	add.w	r0, r4, #24
 8008f94:	4798      	blx	r3
 8008f96:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <_OnExit+0x44>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000180 	.word	0x20000180
 8008fa4:	20000024 	.word	0x20000024
 8008fa8:	200272d8 	.word	0x200272d8

08008fac <GUI_MULTIBUF_ConfirmEx>:
 8008fac:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <GUI_MULTIBUF_ConfirmEx+0x24>)
 8008fae:	6a1a      	ldr	r2, [r3, #32]
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	bf18      	it	ne
 8008fb4:	2000      	movne	r0, #0
 8008fb6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	6994      	ldr	r4, [r2, #24]
 8008fbe:	2c00      	cmp	r4, #0
 8008fc0:	bfa2      	ittt	ge
 8008fc2:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 8008fc6:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8008fca:	6193      	strge	r3, [r2, #24]
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000180 	.word	0x20000180

08008fd4 <GUI_MULTIBUF_ConfigEx>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4c0a      	ldr	r4, [pc, #40]	; (8009000 <GUI_MULTIBUF_ConfigEx+0x2c>)
 8008fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fda:	4605      	mov	r5, r0
 8008fdc:	460e      	mov	r6, r1
 8008fde:	b92b      	cbnz	r3, 8008fec <GUI_MULTIBUF_ConfigEx+0x18>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <GUI_MULTIBUF_ConfigEx+0x30>)
 8008fe4:	f840 3f24 	str.w	r3, [r0, #36]!
 8008fe8:	f7ff fef8 	bl	8008ddc <GUI__RegisterExit>
 8008fec:	6a23      	ldr	r3, [r4, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bf18      	it	ne
 8008ff2:	2500      	movne	r5, #0
 8008ff4:	4b04      	ldr	r3, [pc, #16]	; (8009008 <GUI_MULTIBUF_ConfigEx+0x34>)
 8008ff6:	2e01      	cmp	r6, #1
 8008ff8:	bfb8      	it	lt
 8008ffa:	2601      	movlt	r6, #1
 8008ffc:	555e      	strb	r6, [r3, r5]
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	20000180 	.word	0x20000180
 8009004:	08008f65 	.word	0x08008f65
 8009008:	200272d4 	.word	0x200272d4

0800900c <GUI_StoreKey>:
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <GUI_StoreKey+0xc>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	b902      	cbnz	r2, 8009014 <GUI_StoreKey+0x8>
 8009012:	6018      	str	r0, [r3, #0]
 8009014:	f000 b908 	b.w	8009228 <GUI_SignalEvent>
 8009018:	200001ac 	.word	0x200001ac

0800901c <GUI_GetLayerPosEx>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	4604      	mov	r4, r0
 8009020:	460e      	mov	r6, r1
 8009022:	4615      	mov	r5, r2
 8009024:	f000 f85c 	bl	80090e0 <GUI_Lock>
 8009028:	4620      	mov	r0, r4
 800902a:	462a      	mov	r2, r5
 800902c:	4631      	mov	r1, r6
 800902e:	f000 fde7 	bl	8009c00 <LCD_GetPosEx>
 8009032:	4604      	mov	r4, r0
 8009034:	b110      	cbz	r0, 800903c <GUI_GetLayerPosEx+0x20>
 8009036:	2300      	movs	r3, #0
 8009038:	6033      	str	r3, [r6, #0]
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f000 f846 	bl	80090cc <GUI_Unlock>
 8009040:	4620      	mov	r0, r4
 8009042:	bd70      	pop	{r4, r5, r6, pc}

08009044 <GUI_SelectLayer>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	4d0b      	ldr	r5, [pc, #44]	; (8009074 <GUI_SelectLayer+0x30>)
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	4604      	mov	r4, r0
 800904c:	7c5e      	ldrb	r6, [r3, #17]
 800904e:	f000 f847 	bl	80090e0 <GUI_Lock>
 8009052:	2c01      	cmp	r4, #1
 8009054:	d809      	bhi.n	800906a <GUI_SelectLayer+0x26>
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff fed4 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 800905c:	b128      	cbz	r0, 800906a <GUI_SelectLayer+0x26>
 800905e:	682b      	ldr	r3, [r5, #0]
 8009060:	745c      	strb	r4, [r3, #17]
 8009062:	f7ff fcfc 	bl	8008a5e <GUI_SelectLCD>
 8009066:	4b04      	ldr	r3, [pc, #16]	; (8009078 <GUI_SelectLayer+0x34>)
 8009068:	601c      	str	r4, [r3, #0]
 800906a:	f000 f82f 	bl	80090cc <GUI_Unlock>
 800906e:	4630      	mov	r0, r6
 8009070:	bd70      	pop	{r4, r5, r6, pc}
 8009072:	bf00      	nop
 8009074:	20000014 	.word	0x20000014
 8009078:	20027360 	.word	0x20027360

0800907c <_GetTaskNo>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	4d0c      	ldr	r5, [pc, #48]	; (80090b0 <_GetTaskNo+0x34>)
 8009080:	4e0c      	ldr	r6, [pc, #48]	; (80090b4 <_GetTaskNo+0x38>)
 8009082:	2400      	movs	r4, #0
 8009084:	277c      	movs	r7, #124	; 0x7c
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	429c      	cmp	r4, r3
 800908a:	da0d      	bge.n	80090a8 <_GetTaskNo+0x2c>
 800908c:	f7fb fd40 	bl	8004b10 <GUI_X_GetTaskId>
 8009090:	fb07 f304 	mul.w	r3, r7, r4
 8009094:	6832      	ldr	r2, [r6, #0]
 8009096:	18d1      	adds	r1, r2, r3
 8009098:	58d3      	ldr	r3, [r2, r3]
 800909a:	4298      	cmp	r0, r3
 800909c:	d006      	beq.n	80090ac <_GetTaskNo+0x30>
 800909e:	b90b      	cbnz	r3, 80090a4 <_GetTaskNo+0x28>
 80090a0:	6008      	str	r0, [r1, #0]
 80090a2:	e003      	b.n	80090ac <_GetTaskNo+0x30>
 80090a4:	3401      	adds	r4, #1
 80090a6:	e7ee      	b.n	8009086 <_GetTaskNo+0xa>
 80090a8:	2000      	movs	r0, #0
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ac:	4620      	mov	r0, r4
 80090ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b0:	20000018 	.word	0x20000018
 80090b4:	2000020c 	.word	0x2000020c

080090b8 <_OnExit>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4c03      	ldr	r4, [pc, #12]	; (80090c8 <_OnExit+0x10>)
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	f7ff f9d3 	bl	8008468 <GUI_ALLOC_FreeFixedBlock>
 80090c2:	2300      	movs	r3, #0
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd10      	pop	{r4, pc}
 80090c8:	2000020c 	.word	0x2000020c

080090cc <GUI_Unlock>:
 80090cc:	4a03      	ldr	r2, [pc, #12]	; (80090dc <GUI_Unlock+0x10>)
 80090ce:	6853      	ldr	r3, [r2, #4]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	6053      	str	r3, [r2, #4]
 80090d4:	b90b      	cbnz	r3, 80090da <GUI_Unlock+0xe>
 80090d6:	f7fb bd01 	b.w	8004adc <GUI_X_Unlock>
 80090da:	4770      	bx	lr
 80090dc:	2000020c 	.word	0x2000020c

080090e0 <GUI_Lock>:
 80090e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	4c19      	ldr	r4, [pc, #100]	; (800914c <GUI_Lock+0x6c>)
 80090e6:	6863      	ldr	r3, [r4, #4]
 80090e8:	b123      	cbz	r3, 80090f4 <GUI_Lock+0x14>
 80090ea:	f7fb fd11 	bl	8004b10 <GUI_X_GetTaskId>
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	4298      	cmp	r0, r3
 80090f2:	d004      	beq.n	80090fe <GUI_Lock+0x1e>
 80090f4:	f7fb fcfe 	bl	8004af4 <GUI_X_Lock>
 80090f8:	f7fb fd0a 	bl	8004b10 <GUI_X_GetTaskId>
 80090fc:	60a0      	str	r0, [r4, #8]
 80090fe:	6863      	ldr	r3, [r4, #4]
 8009100:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800914c <GUI_Lock+0x6c>
 8009104:	3301      	adds	r3, #1
 8009106:	2b01      	cmp	r3, #1
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	d11c      	bne.n	8009146 <GUI_Lock+0x66>
 800910c:	f7ff ffb6 	bl	800907c <_GetTaskNo>
 8009110:	4a0f      	ldr	r2, [pc, #60]	; (8009150 <GUI_Lock+0x70>)
 8009112:	6853      	ldr	r3, [r2, #4]
 8009114:	4298      	cmp	r0, r3
 8009116:	4607      	mov	r7, r0
 8009118:	4616      	mov	r6, r2
 800911a:	d014      	beq.n	8009146 <GUI_Lock+0x66>
 800911c:	2b00      	cmp	r3, #0
 800911e:	db11      	blt.n	8009144 <GUI_Lock+0x64>
 8009120:	f8d8 5000 	ldr.w	r5, [r8]
 8009124:	247c      	movs	r4, #124	; 0x7c
 8009126:	fb04 5503 	mla	r5, r4, r3, r5
 800912a:	f7ff ff11 	bl	8008f50 <GUI_DEVICE_UnlinkTaskDevices>
 800912e:	f8d8 3000 	ldr.w	r3, [r8]
 8009132:	67a8      	str	r0, [r5, #120]	; 0x78
 8009134:	fb04 3407 	mla	r4, r4, r7, r3
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <GUI_Lock+0x74>)
 800913a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800913c:	1d22      	adds	r2, r4, #4
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f7ff ff08 	bl	8008f54 <GUI_DEVICE_LinkDevices>
 8009144:	6077      	str	r7, [r6, #4]
 8009146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914a:	bf00      	nop
 800914c:	2000020c 	.word	0x2000020c
 8009150:	20000018 	.word	0x20000018
 8009154:	20000014 	.word	0x20000014

08009158 <GUITASK_Init>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	4e0e      	ldr	r6, [pc, #56]	; (8009194 <GUITASK_Init+0x3c>)
 800915c:	4b0e      	ldr	r3, [pc, #56]	; (8009198 <GUITASK_Init+0x40>)
 800915e:	4d0f      	ldr	r5, [pc, #60]	; (800919c <GUITASK_Init+0x44>)
 8009160:	4630      	mov	r0, r6
 8009162:	f840 3f0c 	str.w	r3, [r0, #12]!
 8009166:	f7ff fe39 	bl	8008ddc <GUI__RegisterExit>
 800916a:	682c      	ldr	r4, [r5, #0]
 800916c:	237c      	movs	r3, #124	; 0x7c
 800916e:	435c      	muls	r4, r3
 8009170:	4620      	mov	r0, r4
 8009172:	f7ff fa55 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 8009176:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <GUITASK_Init+0x48>)
 8009178:	6030      	str	r0, [r6, #0]
 800917a:	4622      	mov	r2, r4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2100      	movs	r1, #0
 8009180:	4798      	blx	r3
 8009182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009186:	606b      	str	r3, [r5, #4]
 8009188:	f7fb fc8a 	bl	8004aa0 <GUI_X_InitOS>
 800918c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009190:	f7ff bf74 	b.w	800907c <_GetTaskNo>
 8009194:	2000020c 	.word	0x2000020c
 8009198:	080090b9 	.word	0x080090b9
 800919c:	20000018 	.word	0x20000018
 80091a0:	20000024 	.word	0x20000024

080091a4 <GUITASK_CopyContext>:
 80091a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009210 <GUITASK_CopyContext+0x6c>
 80091ac:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009208 <GUITASK_CopyContext+0x64>
 80091b0:	f8df a058 	ldr.w	sl, [pc, #88]	; 800920c <GUITASK_CopyContext+0x68>
 80091b4:	2500      	movs	r5, #0
 80091b6:	f8d8 3000 	ldr.w	r3, [r8]
 80091ba:	429d      	cmp	r5, r3
 80091bc:	da17      	bge.n	80091ee <GUITASK_CopyContext+0x4a>
 80091be:	f8d9 7000 	ldr.w	r7, [r9]
 80091c2:	f8da 1000 	ldr.w	r1, [sl]
 80091c6:	267c      	movs	r6, #124	; 0x7c
 80091c8:	436e      	muls	r6, r5
 80091ca:	19bc      	adds	r4, r7, r6
 80091cc:	1d23      	adds	r3, r4, #4
 80091ce:	2274      	movs	r2, #116	; 0x74
 80091d0:	4618      	mov	r0, r3
 80091d2:	f003 ff21 	bl	800d018 <memcpy>
 80091d6:	2200      	movs	r2, #0
 80091d8:	51ba      	str	r2, [r7, r6]
 80091da:	f104 020c 	add.w	r2, r4, #12
 80091de:	61a2      	str	r2, [r4, #24]
 80091e0:	f104 0208 	add.w	r2, r4, #8
 80091e4:	63e0      	str	r0, [r4, #60]	; 0x3c
 80091e6:	6422      	str	r2, [r4, #64]	; 0x40
 80091e8:	6460      	str	r0, [r4, #68]	; 0x44
 80091ea:	3501      	adds	r5, #1
 80091ec:	e7e3      	b.n	80091b6 <GUITASK_CopyContext+0x12>
 80091ee:	f7ff ff45 	bl	800907c <_GetTaskNo>
 80091f2:	4b05      	ldr	r3, [pc, #20]	; (8009208 <GUITASK_CopyContext+0x64>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	237c      	movs	r3, #124	; 0x7c
 80091f8:	fb03 2000 	mla	r0, r3, r0, r2
 80091fc:	4b03      	ldr	r3, [pc, #12]	; (800920c <GUITASK_CopyContext+0x68>)
 80091fe:	3004      	adds	r0, #4
 8009200:	6018      	str	r0, [r3, #0]
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	bf00      	nop
 8009208:	2000020c 	.word	0x2000020c
 800920c:	20000014 	.word	0x20000014
 8009210:	20000018 	.word	0x20000018

08009214 <_GetCharCode>:
 8009214:	7800      	ldrb	r0, [r0, #0]
 8009216:	4770      	bx	lr

08009218 <_GetCharSize>:
 8009218:	2001      	movs	r0, #1
 800921a:	4770      	bx	lr

0800921c <_CalcSizeOfChar>:
 800921c:	2001      	movs	r0, #1
 800921e:	4770      	bx	lr

08009220 <_Encode>:
 8009220:	7001      	strb	r1, [r0, #0]
 8009222:	2001      	movs	r0, #1
 8009224:	4770      	bx	lr
	...

08009228 <GUI_SignalEvent>:
 8009228:	4b02      	ldr	r3, [pc, #8]	; (8009234 <GUI_SignalEvent+0xc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	b103      	cbz	r3, 8009230 <GUI_SignalEvent+0x8>
 800922e:	4718      	bx	r3
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20000220 	.word	0x20000220

08009238 <GUI__IntersectRect>:
 8009238:	f9b1 3000 	ldrsh.w	r3, [r1]
 800923c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009240:	429a      	cmp	r2, r3
 8009242:	bfb8      	it	lt
 8009244:	8003      	strhlt	r3, [r0, #0]
 8009246:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800924a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800924e:	429a      	cmp	r2, r3
 8009250:	bfb8      	it	lt
 8009252:	8043      	strhlt	r3, [r0, #2]
 8009254:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8009258:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	bfc8      	it	gt
 8009260:	8083      	strhgt	r3, [r0, #4]
 8009262:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8009266:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800926a:	429a      	cmp	r2, r3
 800926c:	bfc8      	it	gt
 800926e:	80c3      	strhgt	r3, [r0, #6]
 8009270:	4770      	bx	lr

08009272 <GUI__IntersectRects>:
 8009272:	b570      	push	{r4, r5, r6, lr}
 8009274:	f9b1 3000 	ldrsh.w	r3, [r1]
 8009278:	f9b2 5000 	ldrsh.w	r5, [r2]
 800927c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8009280:	429d      	cmp	r5, r3
 8009282:	bfb8      	it	lt
 8009284:	461d      	movlt	r5, r3
 8009286:	4606      	mov	r6, r0
 8009288:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800928c:	8005      	strh	r5, [r0, #0]
 800928e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8009292:	4283      	cmp	r3, r0
 8009294:	bfb8      	it	lt
 8009296:	4603      	movlt	r3, r0
 8009298:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 800929c:	8073      	strh	r3, [r6, #2]
 800929e:	4284      	cmp	r4, r0
 80092a0:	bfa8      	it	ge
 80092a2:	4604      	movge	r4, r0
 80092a4:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 80092a8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80092ac:	80b4      	strh	r4, [r6, #4]
 80092ae:	4282      	cmp	r2, r0
 80092b0:	bfa8      	it	ge
 80092b2:	4602      	movge	r2, r0
 80092b4:	42a5      	cmp	r5, r4
 80092b6:	80f2      	strh	r2, [r6, #6]
 80092b8:	dc04      	bgt.n	80092c4 <GUI__IntersectRects+0x52>
 80092ba:	4293      	cmp	r3, r2
 80092bc:	bfcc      	ite	gt
 80092be:	2000      	movgt	r0, #0
 80092c0:	2001      	movle	r0, #1
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	2000      	movs	r0, #0
 80092c6:	bd70      	pop	{r4, r5, r6, pc}

080092c8 <GUI__memset>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	b2c9      	uxtb	r1, r1
 80092cc:	4603      	mov	r3, r0
 80092ce:	b12a      	cbz	r2, 80092dc <GUI__memset+0x14>
 80092d0:	079c      	lsls	r4, r3, #30
 80092d2:	d003      	beq.n	80092dc <GUI__memset+0x14>
 80092d4:	f803 1b01 	strb.w	r1, [r3], #1
 80092d8:	3a01      	subs	r2, #1
 80092da:	e7f8      	b.n	80092ce <GUI__memset+0x6>
 80092dc:	0895      	lsrs	r5, r2, #2
 80092de:	d101      	bne.n	80092e4 <GUI__memset+0x1c>
 80092e0:	441a      	add	r2, r3
 80092e2:	e01a      	b.n	800931a <GUI__memset+0x52>
 80092e4:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 80092e8:	f002 0203 	and.w	r2, r2, #3
 80092ec:	434c      	muls	r4, r1
 80092ee:	2d03      	cmp	r5, #3
 80092f0:	461e      	mov	r6, r3
 80092f2:	f103 0310 	add.w	r3, r3, #16
 80092f6:	dd09      	ble.n	800930c <GUI__memset+0x44>
 80092f8:	f843 4c10 	str.w	r4, [r3, #-16]
 80092fc:	f843 4c0c 	str.w	r4, [r3, #-12]
 8009300:	f843 4c08 	str.w	r4, [r3, #-8]
 8009304:	f843 4c04 	str.w	r4, [r3, #-4]
 8009308:	3d04      	subs	r5, #4
 800930a:	e7f0      	b.n	80092ee <GUI__memset+0x26>
 800930c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8009310:	429e      	cmp	r6, r3
 8009312:	d0e5      	beq.n	80092e0 <GUI__memset+0x18>
 8009314:	f846 4b04 	str.w	r4, [r6], #4
 8009318:	e7fa      	b.n	8009310 <GUI__memset+0x48>
 800931a:	4293      	cmp	r3, r2
 800931c:	d002      	beq.n	8009324 <GUI__memset+0x5c>
 800931e:	f803 1b01 	strb.w	r1, [r3], #1
 8009322:	e7fa      	b.n	800931a <GUI__memset+0x52>
 8009324:	bd70      	pop	{r4, r5, r6, pc}
	...

08009328 <_SetDrawMode>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4b08      	ldr	r3, [pc, #32]	; (800934c <_SetDrawMode+0x24>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	7c1a      	ldrb	r2, [r3, #16]
 8009330:	ea82 0100 	eor.w	r1, r2, r0
 8009334:	0749      	lsls	r1, r1, #29
 8009336:	d505      	bpl.n	8009344 <_SetDrawMode+0x1c>
 8009338:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800933a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	680e      	ldr	r6, [r1, #0]
 8009340:	6026      	str	r6, [r4, #0]
 8009342:	600d      	str	r5, [r1, #0]
 8009344:	7418      	strb	r0, [r3, #16]
 8009346:	4610      	mov	r0, r2
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	bf00      	nop
 800934c:	20000014 	.word	0x20000014

08009350 <LCD_SetDrawMode>:
 8009350:	4b01      	ldr	r3, [pc, #4]	; (8009358 <LCD_SetDrawMode+0x8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	4718      	bx	r3
 8009358:	20000028 	.word	0x20000028

0800935c <LCD_DrawPixel>:
 800935c:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <LCD_DrawPixel+0x58>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	460a      	mov	r2, r1
 8009362:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8009366:	4291      	cmp	r1, r2
 8009368:	b430      	push	{r4, r5}
 800936a:	4604      	mov	r4, r0
 800936c:	dc20      	bgt.n	80093b0 <LCD_DrawPixel+0x54>
 800936e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8009372:	428a      	cmp	r2, r1
 8009374:	dc1c      	bgt.n	80093b0 <LCD_DrawPixel+0x54>
 8009376:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800937a:	4281      	cmp	r1, r0
 800937c:	dc18      	bgt.n	80093b0 <LCD_DrawPixel+0x54>
 800937e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8009382:	4288      	cmp	r0, r1
 8009384:	dc14      	bgt.n	80093b0 <LCD_DrawPixel+0x54>
 8009386:	7c19      	ldrb	r1, [r3, #16]
 8009388:	7c58      	ldrb	r0, [r3, #17]
 800938a:	f011 0f01 	tst.w	r1, #1
 800938e:	490a      	ldr	r1, [pc, #40]	; (80093b8 <LCD_DrawPixel+0x5c>)
 8009390:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009394:	d004      	beq.n	80093a0 <LCD_DrawPixel+0x44>
 8009396:	68c3      	ldr	r3, [r0, #12]
 8009398:	4621      	mov	r1, r4
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	bc30      	pop	{r4, r5}
 800939e:	4718      	bx	r3
 80093a0:	68c1      	ldr	r1, [r0, #12]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	698d      	ldr	r5, [r1, #24]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4621      	mov	r1, r4
 80093aa:	46ac      	mov	ip, r5
 80093ac:	bc30      	pop	{r4, r5}
 80093ae:	4760      	bx	ip
 80093b0:	bc30      	pop	{r4, r5}
 80093b2:	4770      	bx	lr
 80093b4:	20000014 	.word	0x20000014
 80093b8:	20027324 	.word	0x20027324

080093bc <LCD_DrawHLine>:
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <LCD_DrawHLine+0x48>)
 80093be:	b430      	push	{r4, r5}
 80093c0:	681c      	ldr	r4, [r3, #0]
 80093c2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80093c6:	428b      	cmp	r3, r1
 80093c8:	460d      	mov	r5, r1
 80093ca:	dc19      	bgt.n	8009400 <LCD_DrawHLine+0x44>
 80093cc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80093d0:	4299      	cmp	r1, r3
 80093d2:	dc15      	bgt.n	8009400 <LCD_DrawHLine+0x44>
 80093d4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80093d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093dc:	4281      	cmp	r1, r0
 80093de:	bfb8      	it	lt
 80093e0:	4601      	movlt	r1, r0
 80093e2:	4293      	cmp	r3, r2
 80093e4:	bfa8      	it	ge
 80093e6:	4613      	movge	r3, r2
 80093e8:	4299      	cmp	r1, r3
 80093ea:	dc09      	bgt.n	8009400 <LCD_DrawHLine+0x44>
 80093ec:	7c60      	ldrb	r0, [r4, #17]
 80093ee:	4a06      	ldr	r2, [pc, #24]	; (8009408 <LCD_DrawHLine+0x4c>)
 80093f0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80093f4:	68c2      	ldr	r2, [r0, #12]
 80093f6:	6894      	ldr	r4, [r2, #8]
 80093f8:	462a      	mov	r2, r5
 80093fa:	46a4      	mov	ip, r4
 80093fc:	bc30      	pop	{r4, r5}
 80093fe:	4760      	bx	ip
 8009400:	bc30      	pop	{r4, r5}
 8009402:	4770      	bx	lr
 8009404:	20000014 	.word	0x20000014
 8009408:	20027324 	.word	0x20027324

0800940c <LCD_FillRect>:
 800940c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800940e:	4c13      	ldr	r4, [pc, #76]	; (800945c <LCD_FillRect+0x50>)
 8009410:	6824      	ldr	r4, [r4, #0]
 8009412:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8009416:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800941a:	4285      	cmp	r5, r0
 800941c:	bfb8      	it	lt
 800941e:	4605      	movlt	r5, r0
 8009420:	4296      	cmp	r6, r2
 8009422:	bfa8      	it	ge
 8009424:	4616      	movge	r6, r2
 8009426:	42ae      	cmp	r6, r5
 8009428:	db15      	blt.n	8009456 <LCD_FillRect+0x4a>
 800942a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800942e:	428a      	cmp	r2, r1
 8009430:	bfb8      	it	lt
 8009432:	460a      	movlt	r2, r1
 8009434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009438:	428b      	cmp	r3, r1
 800943a:	bfa8      	it	ge
 800943c:	460b      	movge	r3, r1
 800943e:	429a      	cmp	r2, r3
 8009440:	dc09      	bgt.n	8009456 <LCD_FillRect+0x4a>
 8009442:	7c60      	ldrb	r0, [r4, #17]
 8009444:	4906      	ldr	r1, [pc, #24]	; (8009460 <LCD_FillRect+0x54>)
 8009446:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800944a:	68c1      	ldr	r1, [r0, #12]
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	690c      	ldr	r4, [r1, #16]
 8009450:	4633      	mov	r3, r6
 8009452:	4629      	mov	r1, r5
 8009454:	47a0      	blx	r4
 8009456:	b002      	add	sp, #8
 8009458:	bd70      	pop	{r4, r5, r6, pc}
 800945a:	bf00      	nop
 800945c:	20000014 	.word	0x20000014
 8009460:	20027324 	.word	0x20027324

08009464 <LCD_DrawBitmap>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	b08f      	sub	sp, #60	; 0x3c
 800946a:	f8df e218 	ldr.w	lr, [pc, #536]	; 8009684 <LCD_DrawBitmap+0x220>
 800946e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009470:	9402      	str	r4, [sp, #8]
 8009472:	f8de e000 	ldr.w	lr, [lr]
 8009476:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8009478:	9408      	str	r4, [sp, #32]
 800947a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800947c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800947e:	9403      	str	r4, [sp, #12]
 8009480:	4605      	mov	r5, r0
 8009482:	9100      	str	r1, [sp, #0]
 8009484:	4690      	mov	r8, r2
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800948a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800948c:	9604      	str	r6, [sp, #16]
 800948e:	f1be 0f00 	cmp.w	lr, #0
 8009492:	d002      	beq.n	800949a <LCD_DrawBitmap+0x36>
 8009494:	f8de 4000 	ldr.w	r4, [lr]
 8009498:	e07a      	b.n	8009590 <LCD_DrawBitmap+0x12c>
 800949a:	9b02      	ldr	r3, [sp, #8]
 800949c:	9a08      	ldr	r2, [sp, #32]
 800949e:	4313      	orrs	r3, r2
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d17a      	bne.n	800959a <LCD_DrawBitmap+0x136>
 80094a4:	4b75      	ldr	r3, [pc, #468]	; (800967c <LCD_DrawBitmap+0x218>)
 80094a6:	9901      	ldr	r1, [sp, #4]
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	9b00      	ldr	r3, [sp, #0]
 80094ac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dd07      	ble.n	80094c6 <LCD_DrawBitmap+0x62>
 80094b6:	1ac9      	subs	r1, r1, r3
 80094b8:	2900      	cmp	r1, #0
 80094ba:	f340 80db 	ble.w	8009674 <LCD_DrawBitmap+0x210>
 80094be:	9e03      	ldr	r6, [sp, #12]
 80094c0:	fb06 4403 	mla	r4, r6, r3, r4
 80094c4:	e000      	b.n	80094c8 <LCD_DrawBitmap+0x64>
 80094c6:	9a00      	ldr	r2, [sp, #0]
 80094c8:	e89d 0048 	ldmia.w	sp, {r3, r6}
 80094cc:	441e      	add	r6, r3
 80094ce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80094d2:	3e01      	subs	r6, #1
 80094d4:	1af6      	subs	r6, r6, r3
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	dd03      	ble.n	80094e2 <LCD_DrawBitmap+0x7e>
 80094da:	1b89      	subs	r1, r1, r6
 80094dc:	2900      	cmp	r1, #0
 80094de:	f340 80c9 	ble.w	8009674 <LCD_DrawBitmap+0x210>
 80094e2:	eb05 0308 	add.w	r3, r5, r8
 80094e6:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	1b9b      	subs	r3, r3, r6
 80094ee:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bfc8      	it	gt
 80094f6:	ebc3 0808 	rsbgt	r8, r3, r8
 80094fa:	42b5      	cmp	r5, r6
 80094fc:	da31      	bge.n	8009562 <LCD_DrawBitmap+0xfe>
 80094fe:	1b73      	subs	r3, r6, r5
 8009500:	2f08      	cmp	r7, #8
 8009502:	ebc3 0808 	rsb	r8, r3, r8
 8009506:	d027      	beq.n	8009558 <LCD_DrawBitmap+0xf4>
 8009508:	dc0d      	bgt.n	8009526 <LCD_DrawBitmap+0xc2>
 800950a:	2f02      	cmp	r7, #2
 800950c:	d014      	beq.n	8009538 <LCD_DrawBitmap+0xd4>
 800950e:	2f04      	cmp	r7, #4
 8009510:	d01a      	beq.n	8009548 <LCD_DrawBitmap+0xe4>
 8009512:	2f01      	cmp	r7, #1
 8009514:	d126      	bne.n	8009564 <LCD_DrawBitmap+0x100>
 8009516:	f023 0607 	bic.w	r6, r3, #7
 800951a:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800951e:	4435      	add	r5, r6
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	e01e      	b.n	8009564 <LCD_DrawBitmap+0x100>
 8009526:	2f18      	cmp	r7, #24
 8009528:	d018      	beq.n	800955c <LCD_DrawBitmap+0xf8>
 800952a:	2f20      	cmp	r7, #32
 800952c:	d016      	beq.n	800955c <LCD_DrawBitmap+0xf8>
 800952e:	2f10      	cmp	r7, #16
 8009530:	d118      	bne.n	8009564 <LCD_DrawBitmap+0x100>
 8009532:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009536:	e013      	b.n	8009560 <LCD_DrawBitmap+0xfc>
 8009538:	f023 0603 	bic.w	r6, r3, #3
 800953c:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8009540:	4435      	add	r5, r6
 8009542:	f003 0303 	and.w	r3, r3, #3
 8009546:	e00d      	b.n	8009564 <LCD_DrawBitmap+0x100>
 8009548:	f023 0601 	bic.w	r6, r3, #1
 800954c:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8009550:	4435      	add	r5, r6
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	e005      	b.n	8009564 <LCD_DrawBitmap+0x100>
 8009558:	441c      	add	r4, r3
 800955a:	e001      	b.n	8009560 <LCD_DrawBitmap+0xfc>
 800955c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009560:	4635      	mov	r5, r6
 8009562:	2300      	movs	r3, #0
 8009564:	f1b8 0f00 	cmp.w	r8, #0
 8009568:	f340 8084 	ble.w	8009674 <LCD_DrawBitmap+0x210>
 800956c:	7c46      	ldrb	r6, [r0, #17]
 800956e:	4844      	ldr	r0, [pc, #272]	; (8009680 <LCD_DrawBitmap+0x21c>)
 8009570:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8009574:	9e04      	ldr	r6, [sp, #16]
 8009576:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800957a:	931c      	str	r3, [sp, #112]	; 0x70
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	931a      	str	r3, [sp, #104]	; 0x68
 8009580:	9118      	str	r1, [sp, #96]	; 0x60
 8009582:	961d      	str	r6, [sp, #116]	; 0x74
 8009584:	941b      	str	r4, [sp, #108]	; 0x6c
 8009586:	9719      	str	r7, [sp, #100]	; 0x64
 8009588:	f8de 4004 	ldr.w	r4, [lr, #4]
 800958c:	4643      	mov	r3, r8
 800958e:	4629      	mov	r1, r5
 8009590:	46a4      	mov	ip, r4
 8009592:	b00f      	add	sp, #60	; 0x3c
 8009594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4760      	bx	ip
 800959a:	f1c7 0308 	rsb	r3, r7, #8
 800959e:	930b      	str	r3, [sp, #44]	; 0x2c
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800967c <LCD_DrawBitmap+0x218>
 80095a6:	f8cd e018 	str.w	lr, [sp, #24]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	46f3      	mov	fp, lr
 80095ae:	930d      	str	r3, [sp, #52]	; 0x34
 80095b0:	9b06      	ldr	r3, [sp, #24]
 80095b2:	9a01      	ldr	r2, [sp, #4]
 80095b4:	4293      	cmp	r3, r2
 80095b6:	da5d      	bge.n	8009674 <LCD_DrawBitmap+0x210>
 80095b8:	9a00      	ldr	r2, [sp, #0]
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	4413      	add	r3, r2
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	3b01      	subs	r3, #1
 80095c2:	930a      	str	r3, [sp, #40]	; 0x28
 80095c4:	f8da 3000 	ldr.w	r3, [sl]
 80095c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095ca:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80095ce:	428a      	cmp	r2, r1
 80095d0:	dc48      	bgt.n	8009664 <LCD_DrawBitmap+0x200>
 80095d2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80095d6:	9a00      	ldr	r2, [sp, #0]
 80095d8:	429a      	cmp	r2, r3
 80095da:	dc43      	bgt.n	8009664 <LCD_DrawBitmap+0x200>
 80095dc:	f04f 0900 	mov.w	r9, #0
 80095e0:	9407      	str	r4, [sp, #28]
 80095e2:	462e      	mov	r6, r5
 80095e4:	f8cd 9014 	str.w	r9, [sp, #20]
 80095e8:	9b05      	ldr	r3, [sp, #20]
 80095ea:	4543      	cmp	r3, r8
 80095ec:	da3a      	bge.n	8009664 <LCD_DrawBitmap+0x200>
 80095ee:	f1b9 0f00 	cmp.w	r9, #0
 80095f2:	d106      	bne.n	8009602 <LCD_DrawBitmap+0x19e>
 80095f4:	9b07      	ldr	r3, [sp, #28]
 80095f6:	f893 b000 	ldrb.w	fp, [r3]
 80095fa:	3301      	adds	r3, #1
 80095fc:	9307      	str	r3, [sp, #28]
 80095fe:	f04f 0908 	mov.w	r9, #8
 8009602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009604:	fa4b f303 	asr.w	r3, fp, r3
 8009608:	fa0b f207 	lsl.w	r2, fp, r7
 800960c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8009610:	fa5f fb82 	uxtb.w	fp, r2
 8009614:	ebc7 0909 	rsb	r9, r7, r9
 8009618:	d104      	bne.n	8009624 <LCD_DrawBitmap+0x1c0>
 800961a:	f8da 2000 	ldr.w	r2, [sl]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	0792      	lsls	r2, r2, #30
 8009622:	d417      	bmi.n	8009654 <LCD_DrawBitmap+0x1f0>
 8009624:	f8da 2000 	ldr.w	r2, [sl]
 8009628:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800962a:	6810      	ldr	r0, [r2, #0]
 800962c:	900c      	str	r0, [sp, #48]	; 0x30
 800962e:	9804      	ldr	r0, [sp, #16]
 8009630:	b110      	cbz	r0, 8009638 <LCD_DrawBitmap+0x1d4>
 8009632:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8009636:	e000      	b.n	800963a <LCD_DrawBitmap+0x1d6>
 8009638:	b2db      	uxtb	r3, r3
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800963e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009640:	9900      	ldr	r1, [sp, #0]
 8009642:	4432      	add	r2, r6
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff fee1 	bl	800940c <LCD_FillRect>
 800964a:	f8da 3000 	ldr.w	r3, [sl]
 800964e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	9b05      	ldr	r3, [sp, #20]
 8009656:	9a02      	ldr	r2, [sp, #8]
 8009658:	3301      	adds	r3, #1
 800965a:	9305      	str	r3, [sp, #20]
 800965c:	4633      	mov	r3, r6
 800965e:	4413      	add	r3, r2
 8009660:	461e      	mov	r6, r3
 8009662:	e7c1      	b.n	80095e8 <LCD_DrawBitmap+0x184>
 8009664:	9b06      	ldr	r3, [sp, #24]
 8009666:	3301      	adds	r3, #1
 8009668:	9306      	str	r3, [sp, #24]
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	441c      	add	r4, r3
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	e79d      	b.n	80095b0 <LCD_DrawBitmap+0x14c>
 8009674:	b00f      	add	sp, #60	; 0x3c
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	bf00      	nop
 800967c:	20000014 	.word	0x20000014
 8009680:	20027324 	.word	0x20027324
 8009684:	200272e0 	.word	0x200272e0

08009688 <LCD_SetClipRectMax>:
 8009688:	4b04      	ldr	r3, [pc, #16]	; (800969c <LCD_SetClipRectMax+0x14>)
 800968a:	6819      	ldr	r1, [r3, #0]
 800968c:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <LCD_SetClipRectMax+0x18>)
 800968e:	7c4a      	ldrb	r2, [r1, #17]
 8009690:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009694:	68c3      	ldr	r3, [r0, #12]
 8009696:	3108      	adds	r1, #8
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	4718      	bx	r3
 800969c:	20000014 	.word	0x20000014
 80096a0:	20027324 	.word	0x20027324

080096a4 <emWin_LCD_Init>:
 80096a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096a6:	f7ff ffef 	bl	8009688 <LCD_SetClipRectMax>
 80096aa:	f000 f92f 	bl	800990c <LCD_InitColors>
 80096ae:	4604      	mov	r4, r0
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d144      	bne.n	800973e <emWin_LCD_Init+0x9a>
 80096b4:	4605      	mov	r5, r0
 80096b6:	4628      	mov	r0, r5
 80096b8:	f7ff fba4 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 80096bc:	9001      	str	r0, [sp, #4]
 80096be:	b150      	cbz	r0, 80096d6 <emWin_LCD_Init+0x32>
 80096c0:	68c3      	ldr	r3, [r0, #12]
 80096c2:	210c      	movs	r1, #12
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	a801      	add	r0, sp, #4
 80096c8:	4798      	blx	r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d034      	beq.n	800973a <emWin_LCD_Init+0x96>
 80096d0:	9801      	ldr	r0, [sp, #4]
 80096d2:	4798      	blx	r3
 80096d4:	4304      	orrs	r4, r0
 80096d6:	3501      	adds	r5, #1
 80096d8:	2d02      	cmp	r5, #2
 80096da:	d1ec      	bne.n	80096b6 <emWin_LCD_Init+0x12>
 80096dc:	bb7c      	cbnz	r4, 800973e <emWin_LCD_Init+0x9a>
 80096de:	f000 f96b 	bl	80099b8 <LCD_InitLUT>
 80096e2:	4b18      	ldr	r3, [pc, #96]	; (8009744 <emWin_LCD_Init+0xa0>)
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d101      	bne.n	80096f2 <emWin_LCD_Init+0x4e>
 80096ee:	2000      	movs	r0, #0
 80096f0:	e026      	b.n	8009740 <emWin_LCD_Init+0x9c>
 80096f2:	2401      	movs	r4, #1
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7ff fb85 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 80096fa:	9001      	str	r0, [sp, #4]
 80096fc:	b1c8      	cbz	r0, 8009732 <emWin_LCD_Init+0x8e>
 80096fe:	4620      	mov	r0, r4
 8009700:	f7ff fca0 	bl	8009044 <GUI_SelectLayer>
 8009704:	2004      	movs	r0, #4
 8009706:	f7ff fe23 	bl	8009350 <LCD_SetDrawMode>
 800970a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800970e:	2100      	movs	r1, #0
 8009710:	461a      	mov	r2, r3
 8009712:	4608      	mov	r0, r1
 8009714:	f7ff fe7a 	bl	800940c <LCD_FillRect>
 8009718:	2000      	movs	r0, #0
 800971a:	f7ff fe19 	bl	8009350 <LCD_SetDrawMode>
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	210e      	movs	r1, #14
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	a801      	add	r0, sp, #4
 8009728:	4798      	blx	r3
 800972a:	4603      	mov	r3, r0
 800972c:	b108      	cbz	r0, 8009732 <emWin_LCD_Init+0x8e>
 800972e:	9801      	ldr	r0, [sp, #4]
 8009730:	4798      	blx	r3
 8009732:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8009736:	d2dd      	bcs.n	80096f4 <emWin_LCD_Init+0x50>
 8009738:	e7d9      	b.n	80096ee <emWin_LCD_Init+0x4a>
 800973a:	2001      	movs	r0, #1
 800973c:	e000      	b.n	8009740 <emWin_LCD_Init+0x9c>
 800973e:	4620      	mov	r0, r4
 8009740:	b003      	add	sp, #12
 8009742:	bd30      	pop	{r4, r5, pc}
 8009744:	200000e0 	.word	0x200000e0

08009748 <LCD_Color2Index>:
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <LCD_Color2Index+0x14>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	7c5a      	ldrb	r2, [r3, #17]
 800974e:	4b04      	ldr	r3, [pc, #16]	; (8009760 <LCD_Color2Index+0x18>)
 8009750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4718      	bx	r3
 800975a:	bf00      	nop
 800975c:	20000014 	.word	0x20000014
 8009760:	20027324 	.word	0x20027324

08009764 <LCD_Index2Color>:
 8009764:	4b04      	ldr	r3, [pc, #16]	; (8009778 <LCD_Index2Color+0x14>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	7c5a      	ldrb	r2, [r3, #17]
 800976a:	4b04      	ldr	r3, [pc, #16]	; (800977c <LCD_Index2Color+0x18>)
 800976c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	4718      	bx	r3
 8009776:	bf00      	nop
 8009778:	20000014 	.word	0x20000014
 800977c:	20027324 	.word	0x20027324

08009780 <LCD_SetColorIndex>:
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <LCD_SetColorIndex+0x14>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	7c1a      	ldrb	r2, [r3, #16]
 8009786:	0752      	lsls	r2, r2, #29
 8009788:	bf4c      	ite	mi
 800978a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800978c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800978e:	6018      	str	r0, [r3, #0]
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000014 	.word	0x20000014

08009798 <_SetColor>:
 8009798:	b508      	push	{r3, lr}
 800979a:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <_SetColor+0x1c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80097a0:	4281      	cmp	r1, r0
 80097a2:	d006      	beq.n	80097b2 <_SetColor+0x1a>
 80097a4:	6318      	str	r0, [r3, #48]	; 0x30
 80097a6:	f7ff ffcf 	bl	8009748 <LCD_Color2Index>
 80097aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097ae:	f7ff bfe7 	b.w	8009780 <LCD_SetColorIndex>
 80097b2:	bd08      	pop	{r3, pc}
 80097b4:	20000014 	.word	0x20000014

080097b8 <LCD_SetBkColorIndex>:
 80097b8:	4b04      	ldr	r3, [pc, #16]	; (80097cc <LCD_SetBkColorIndex+0x14>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	7c1a      	ldrb	r2, [r3, #16]
 80097be:	0752      	lsls	r2, r2, #29
 80097c0:	bf4c      	ite	mi
 80097c2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80097c4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80097c6:	6018      	str	r0, [r3, #0]
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20000014 	.word	0x20000014

080097d0 <_SetBkColor>:
 80097d0:	b508      	push	{r3, lr}
 80097d2:	4b06      	ldr	r3, [pc, #24]	; (80097ec <_SetBkColor+0x1c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80097d8:	4281      	cmp	r1, r0
 80097da:	d006      	beq.n	80097ea <_SetBkColor+0x1a>
 80097dc:	6358      	str	r0, [r3, #52]	; 0x34
 80097de:	f7ff ffb3 	bl	8009748 <LCD_Color2Index>
 80097e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097e6:	f7ff bfe7 	b.w	80097b8 <LCD_SetBkColorIndex>
 80097ea:	bd08      	pop	{r3, pc}
 80097ec:	20000014 	.word	0x20000014

080097f0 <LCD_SetBkColor>:
 80097f0:	4b01      	ldr	r3, [pc, #4]	; (80097f8 <LCD_SetBkColor+0x8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	4718      	bx	r3
 80097f8:	20000028 	.word	0x20000028

080097fc <LCD_SetColor>:
 80097fc:	4b01      	ldr	r3, [pc, #4]	; (8009804 <LCD_SetColor+0x8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4718      	bx	r3
 8009804:	20000028 	.word	0x20000028

08009808 <LCD_AA_MixColors16>:
 8009808:	0e0b      	lsrs	r3, r1, #24
 800980a:	2bff      	cmp	r3, #255	; 0xff
 800980c:	b510      	push	{r4, lr}
 800980e:	4c0e      	ldr	r4, [pc, #56]	; (8009848 <LCD_AA_MixColors16+0x40>)
 8009810:	d110      	bne.n	8009834 <LCD_AA_MixColors16+0x2c>
 8009812:	0e03      	lsrs	r3, r0, #24
 8009814:	d108      	bne.n	8009828 <LCD_AA_MixColors16+0x20>
 8009816:	f06f 0310 	mvn.w	r3, #16
 800981a:	435a      	muls	r2, r3
 800981c:	32ff      	adds	r2, #255	; 0xff
 800981e:	6963      	ldr	r3, [r4, #20]
 8009820:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8009824:	4018      	ands	r0, r3
 8009826:	bd10      	pop	{r4, pc}
 8009828:	2bff      	cmp	r3, #255	; 0xff
 800982a:	d103      	bne.n	8009834 <LCD_AA_MixColors16+0x2c>
 800982c:	6963      	ldr	r3, [r4, #20]
 800982e:	ea01 0003 	and.w	r0, r1, r3
 8009832:	bd10      	pop	{r4, pc}
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <LCD_AA_MixColors16+0x44>)
 8009836:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	4798      	blx	r3
 8009840:	6961      	ldr	r1, [r4, #20]
 8009842:	4008      	ands	r0, r1
 8009844:	bd10      	pop	{r4, pc}
 8009846:	bf00      	nop
 8009848:	2000002c 	.word	0x2000002c
 800984c:	20000048 	.word	0x20000048

08009850 <LCD_SetPixelAA4_Trans>:
 8009850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	4616      	mov	r6, r2
 800985a:	2a00      	cmp	r2, #0
 800985c:	d040      	beq.n	80098e0 <LCD_SetPixelAA4_Trans+0x90>
 800985e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80098ec <LCD_SetPixelAA4_Trans+0x9c>
 8009862:	f8d8 3000 	ldr.w	r3, [r8]
 8009866:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800986a:	4291      	cmp	r1, r2
 800986c:	db38      	blt.n	80098e0 <LCD_SetPixelAA4_Trans+0x90>
 800986e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8009872:	4291      	cmp	r1, r2
 8009874:	dc34      	bgt.n	80098e0 <LCD_SetPixelAA4_Trans+0x90>
 8009876:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800987a:	4290      	cmp	r0, r2
 800987c:	db30      	blt.n	80098e0 <LCD_SetPixelAA4_Trans+0x90>
 800987e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009882:	4290      	cmp	r0, r2
 8009884:	dc2c      	bgt.n	80098e0 <LCD_SetPixelAA4_Trans+0x90>
 8009886:	2e0e      	cmp	r6, #14
 8009888:	4f16      	ldr	r7, [pc, #88]	; (80098e4 <LCD_SetPixelAA4_Trans+0x94>)
 800988a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800988c:	d909      	bls.n	80098a2 <LCD_SetPixelAA4_Trans+0x52>
 800988e:	7c5b      	ldrb	r3, [r3, #17]
 8009890:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8009894:	68c3      	ldr	r3, [r0, #12]
 8009896:	699e      	ldr	r6, [r3, #24]
 8009898:	6813      	ldr	r3, [r2, #0]
 800989a:	46b4      	mov	ip, r6
 800989c:	460a      	mov	r2, r1
 800989e:	4621      	mov	r1, r4
 80098a0:	e01b      	b.n	80098da <LCD_SetPixelAA4_Trans+0x8a>
 80098a2:	6810      	ldr	r0, [r2, #0]
 80098a4:	f7ff ff5e 	bl	8009764 <LCD_Index2Color>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4681      	mov	r9, r0
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 f97f 	bl	8009bb0 <LCD_GetPixelColor>
 80098b2:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <LCD_SetPixelAA4_Trans+0x98>)
 80098b4:	4632      	mov	r2, r6
 80098b6:	4601      	mov	r1, r0
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4648      	mov	r0, r9
 80098bc:	4798      	blx	r3
 80098be:	f7ff ff43 	bl	8009748 <LCD_Color2Index>
 80098c2:	f8d8 3000 	ldr.w	r3, [r8]
 80098c6:	7c5b      	ldrb	r3, [r3, #17]
 80098c8:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 80098cc:	68f3      	ldr	r3, [r6, #12]
 80098ce:	699f      	ldr	r7, [r3, #24]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4603      	mov	r3, r0
 80098d4:	4621      	mov	r1, r4
 80098d6:	4630      	mov	r0, r6
 80098d8:	46bc      	mov	ip, r7
 80098da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098de:	4760      	bx	ip
 80098e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e4:	20027324 	.word	0x20027324
 80098e8:	2000002c 	.word	0x2000002c
 80098ec:	20000014 	.word	0x20000014

080098f0 <_OnExit>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4c04      	ldr	r4, [pc, #16]	; (8009904 <_OnExit+0x14>)
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	f7fe fdb7 	bl	8008468 <GUI_ALLOC_FreeFixedBlock>
 80098fa:	4a03      	ldr	r2, [pc, #12]	; (8009908 <_OnExit+0x18>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	bd10      	pop	{r4, pc}
 8009904:	20027334 	.word	0x20027334
 8009908:	20000228 	.word	0x20000228

0800990c <LCD_InitColors>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d0a      	ldr	r5, [pc, #40]	; (8009938 <LCD_InitColors+0x2c>)
 8009910:	682c      	ldr	r4, [r5, #0]
 8009912:	b964      	cbnz	r4, 800992e <LCD_InitColors+0x22>
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <LCD_InitColors+0x30>)
 8009916:	6818      	ldr	r0, [r3, #0]
 8009918:	0080      	lsls	r0, r0, #2
 800991a:	f7fe fe81 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 800991e:	6028      	str	r0, [r5, #0]
 8009920:	b138      	cbz	r0, 8009932 <LCD_InitColors+0x26>
 8009922:	4807      	ldr	r0, [pc, #28]	; (8009940 <LCD_InitColors+0x34>)
 8009924:	4b07      	ldr	r3, [pc, #28]	; (8009944 <LCD_InitColors+0x38>)
 8009926:	f840 3f04 	str.w	r3, [r0, #4]!
 800992a:	f7ff fa57 	bl	8008ddc <GUI__RegisterExit>
 800992e:	2000      	movs	r0, #0
 8009930:	bd38      	pop	{r3, r4, r5, pc}
 8009932:	2001      	movs	r0, #1
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	20027334 	.word	0x20027334
 800993c:	20000044 	.word	0x20000044
 8009940:	20000228 	.word	0x20000228
 8009944:	080098f1 	.word	0x080098f1

08009948 <LCD_GetpPalConvTableUncached>:
 8009948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800994c:	4604      	mov	r4, r0
 800994e:	b318      	cbz	r0, 8009998 <LCD_GetpPalConvTableUncached+0x50>
 8009950:	6887      	ldr	r7, [r0, #8]
 8009952:	b31f      	cbz	r7, 800999c <LCD_GetpPalConvTableUncached+0x54>
 8009954:	4d14      	ldr	r5, [pc, #80]	; (80099a8 <LCD_GetpPalConvTableUncached+0x60>)
 8009956:	6828      	ldr	r0, [r5, #0]
 8009958:	b320      	cbz	r0, 80099a4 <LCD_GetpPalConvTableUncached+0x5c>
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009960:	dc1f      	bgt.n	80099a2 <LCD_GetpPalConvTableUncached+0x5a>
 8009962:	4b12      	ldr	r3, [pc, #72]	; (80099ac <LCD_GetpPalConvTableUncached+0x64>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	bfa8      	it	ge
 800996a:	461a      	movge	r2, r3
 800996c:	4690      	mov	r8, r2
 800996e:	2600      	movs	r6, #0
 8009970:	4546      	cmp	r6, r8
 8009972:	da09      	bge.n	8009988 <LCD_GetpPalConvTableUncached+0x40>
 8009974:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8009978:	f8d5 9000 	ldr.w	r9, [r5]
 800997c:	f7ff fee4 	bl	8009748 <LCD_Color2Index>
 8009980:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 8009984:	3601      	adds	r6, #1
 8009986:	e7f3      	b.n	8009970 <LCD_GetpPalConvTableUncached+0x28>
 8009988:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <LCD_GetpPalConvTableUncached+0x68>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	b10b      	cbz	r3, 8009992 <LCD_GetpPalConvTableUncached+0x4a>
 800998e:	4620      	mov	r0, r4
 8009990:	4798      	blx	r3
 8009992:	6828      	ldr	r0, [r5, #0]
 8009994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800999c:	4638      	mov	r0, r7
 800999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a2:	2000      	movs	r0, #0
 80099a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a8:	20027334 	.word	0x20027334
 80099ac:	20000044 	.word	0x20000044
 80099b0:	20000228 	.word	0x20000228

080099b4 <LCD_GetpPalConvTableBM>:
 80099b4:	f7ff bfc8 	b.w	8009948 <LCD_GetpPalConvTableUncached>

080099b8 <LCD_InitLUT>:
 80099b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	f000 f8ba 	bl	8009b34 <LCD_GetNumLayers>
 80099c0:	4e1c      	ldr	r6, [pc, #112]	; (8009a34 <LCD_InitLUT+0x7c>)
 80099c2:	f8df a078 	ldr.w	sl, [pc, #120]	; 8009a3c <LCD_InitLUT+0x84>
 80099c6:	4680      	mov	r8, r0
 80099c8:	2400      	movs	r4, #0
 80099ca:	46b1      	mov	r9, r6
 80099cc:	4544      	cmp	r4, r8
 80099ce:	da2d      	bge.n	8009a2c <LCD_InitLUT+0x74>
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7ff fa17 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 80099d6:	b338      	cbz	r0, 8009a28 <LCD_InitLUT+0x70>
 80099d8:	6833      	ldr	r3, [r6, #0]
 80099da:	4620      	mov	r0, r4
 80099dc:	f893 b011 	ldrb.w	fp, [r3, #17]
 80099e0:	745c      	strb	r4, [r3, #17]
 80099e2:	f000 f84d 	bl	8009a80 <LCD_GetBitsPerPixelEx>
 80099e6:	2808      	cmp	r0, #8
 80099e8:	dd04      	ble.n	80099f4 <LCD_InitLUT+0x3c>
 80099ea:	f8d9 3000 	ldr.w	r3, [r9]
 80099ee:	f883 b011 	strb.w	fp, [r3, #17]
 80099f2:	e019      	b.n	8009a28 <LCD_InitLUT+0x70>
 80099f4:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80099f8:	691a      	ldr	r2, [r3, #16]
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <LCD_InitLUT+0x80>)
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d0f4      	beq.n	80099ea <LCD_InitLUT+0x32>
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 f840 	bl	8009a86 <LCD_GetNumColorsEx>
 8009a06:	2500      	movs	r5, #0
 8009a08:	4603      	mov	r3, r0
 8009a0a:	429d      	cmp	r5, r3
 8009a0c:	daed      	bge.n	80099ea <LCD_InitLUT+0x32>
 8009a0e:	b2ef      	uxtb	r7, r5
 8009a10:	4638      	mov	r0, r7
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	f7ff fea6 	bl	8009764 <LCD_Index2Color>
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 f920 	bl	8009c62 <LCD_SetLUTEntryEx>
 8009a22:	3501      	adds	r5, #1
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	e7f0      	b.n	8009a0a <LCD_InitLUT+0x52>
 8009a28:	3401      	adds	r4, #1
 8009a2a:	e7cf      	b.n	80099cc <LCD_InitLUT+0x14>
 8009a2c:	b003      	add	sp, #12
 8009a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a32:	bf00      	nop
 8009a34:	20000014 	.word	0x20000014
 8009a38:	0800d8e8 	.word	0x0800d8e8
 8009a3c:	20027324 	.word	0x20027324

08009a40 <_GetDevProp>:
 8009a40:	2801      	cmp	r0, #1
 8009a42:	b510      	push	{r4, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	dc08      	bgt.n	8009a5a <_GetDevProp+0x1a>
 8009a48:	f7ff f9dc 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009a4c:	b128      	cbz	r0, 8009a5a <_GetDevProp+0x1a>
 8009a4e:	68c3      	ldr	r3, [r0, #12]
 8009a50:	4621      	mov	r1, r4
 8009a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	4718      	bx	r3
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	bd10      	pop	{r4, pc}

08009a5e <_GetMaxValue>:
 8009a5e:	b538      	push	{r3, r4, r5, lr}
 8009a60:	4601      	mov	r1, r0
 8009a62:	4605      	mov	r5, r0
 8009a64:	2001      	movs	r0, #1
 8009a66:	f7ff ffeb 	bl	8009a40 <_GetDevProp>
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	2000      	movs	r0, #0
 8009a70:	f7ff ffe6 	bl	8009a40 <_GetDevProp>
 8009a74:	42a0      	cmp	r0, r4
 8009a76:	bfb8      	it	lt
 8009a78:	4620      	movlt	r0, r4
 8009a7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}

08009a80 <LCD_GetBitsPerPixelEx>:
 8009a80:	2108      	movs	r1, #8
 8009a82:	f7ff bfdd 	b.w	8009a40 <_GetDevProp>

08009a86 <LCD_GetNumColorsEx>:
 8009a86:	2109      	movs	r1, #9
 8009a88:	f7ff bfda 	b.w	8009a40 <_GetDevProp>

08009a8c <LCD_GetMirrorXEx>:
 8009a8c:	210c      	movs	r1, #12
 8009a8e:	f7ff bfd7 	b.w	8009a40 <_GetDevProp>

08009a92 <LCD_GetMirrorYEx>:
 8009a92:	210d      	movs	r1, #13
 8009a94:	f7ff bfd4 	b.w	8009a40 <_GetDevProp>

08009a98 <LCD_GetSwapXYEx>:
 8009a98:	210e      	movs	r1, #14
 8009a9a:	f7ff bfd1 	b.w	8009a40 <_GetDevProp>
	...

08009aa0 <LCD_GetNumColors>:
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <LCD_GetNumColors+0xc>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	7c58      	ldrb	r0, [r3, #17]
 8009aa6:	f7ff bfee 	b.w	8009a86 <LCD_GetNumColorsEx>
 8009aaa:	bf00      	nop
 8009aac:	20000014 	.word	0x20000014

08009ab0 <GUI_GetBitsPerPixelEx>:
 8009ab0:	4b03      	ldr	r3, [pc, #12]	; (8009ac0 <GUI_GetBitsPerPixelEx+0x10>)
 8009ab2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009ab6:	68c3      	ldr	r3, [r0, #12]
 8009ab8:	2108      	movs	r1, #8
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	4718      	bx	r3
 8009abe:	bf00      	nop
 8009ac0:	20027324 	.word	0x20027324

08009ac4 <LCD_GetPaletteEx>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	f7ff f99d 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009aca:	b128      	cbz	r0, 8009ad8 <LCD_GetPaletteEx+0x14>
 8009acc:	68c3      	ldr	r3, [r0, #12]
 8009ace:	2102      	movs	r1, #2
 8009ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad6:	4718      	bx	r3
 8009ad8:	bd10      	pop	{r4, pc}
	...

08009adc <LCD_GetPalette>:
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <LCD_GetPalette+0xc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	7c58      	ldrb	r0, [r3, #17]
 8009ae2:	f7ff bfef 	b.w	8009ac4 <LCD_GetPaletteEx>
 8009ae6:	bf00      	nop
 8009ae8:	20000014 	.word	0x20000014

08009aec <GUI_GetpfIndex2ColorEx>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <GUI_GetpfIndex2ColorEx+0xc>)
 8009aee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	6858      	ldr	r0, [r3, #4]
 8009af6:	4770      	bx	lr
 8009af8:	20027324 	.word	0x20027324

08009afc <LCD_GetXSizeMax>:
 8009afc:	2001      	movs	r0, #1
 8009afe:	f7ff bfae 	b.w	8009a5e <_GetMaxValue>

08009b02 <LCD_GetYSizeMax>:
 8009b02:	2002      	movs	r0, #2
 8009b04:	f7ff bfab 	b.w	8009a5e <_GetMaxValue>

08009b08 <LCD_GetVXSizeMax>:
 8009b08:	2003      	movs	r0, #3
 8009b0a:	f7ff bfa8 	b.w	8009a5e <_GetMaxValue>
	...

08009b10 <LCD_SetDisplaySize>:
 8009b10:	4b01      	ldr	r3, [pc, #4]	; (8009b18 <LCD_SetDisplaySize+0x8>)
 8009b12:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b16:	4770      	bx	lr
 8009b18:	20000234 	.word	0x20000234

08009b1c <LCD_GetXSizeDisplay>:
 8009b1c:	4b01      	ldr	r3, [pc, #4]	; (8009b24 <LCD_GetXSizeDisplay+0x8>)
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000234 	.word	0x20000234

08009b28 <LCD_GetYSizeDisplay>:
 8009b28:	4b01      	ldr	r3, [pc, #4]	; (8009b30 <LCD_GetYSizeDisplay+0x8>)
 8009b2a:	6858      	ldr	r0, [r3, #4]
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	20000234 	.word	0x20000234

08009b34 <LCD_GetNumLayers>:
 8009b34:	b510      	push	{r4, lr}
 8009b36:	2000      	movs	r0, #0
 8009b38:	f7ff f964 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009b3c:	1c04      	adds	r4, r0, #0
 8009b3e:	f04f 0001 	mov.w	r0, #1
 8009b42:	bf18      	it	ne
 8009b44:	2401      	movne	r4, #1
 8009b46:	f7ff f95d 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009b4a:	b100      	cbz	r0, 8009b4e <LCD_GetNumLayers+0x1a>
 8009b4c:	3401      	adds	r4, #1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	bd10      	pop	{r4, pc}
	...

08009b54 <LCD_GetPixelIndex>:
 8009b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b56:	4f14      	ldr	r7, [pc, #80]	; (8009ba8 <LCD_GetPixelIndex+0x54>)
 8009b58:	4e14      	ldr	r6, [pc, #80]	; (8009bac <LCD_GetPixelIndex+0x58>)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	7c5b      	ldrb	r3, [r3, #17]
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8009b64:	68c3      	ldr	r3, [r0, #12]
 8009b66:	460d      	mov	r5, r1
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	4669      	mov	r1, sp
 8009b6c:	4798      	blx	r3
 8009b6e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	dc15      	bgt.n	8009ba2 <LCD_GetPixelIndex+0x4e>
 8009b76:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	dc11      	bgt.n	8009ba2 <LCD_GetPixelIndex+0x4e>
 8009b7e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8009b82:	42ab      	cmp	r3, r5
 8009b84:	dc0d      	bgt.n	8009ba2 <LCD_GetPixelIndex+0x4e>
 8009b86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8009b8a:	429d      	cmp	r5, r3
 8009b8c:	dc09      	bgt.n	8009ba2 <LCD_GetPixelIndex+0x4e>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	7c5b      	ldrb	r3, [r3, #17]
 8009b92:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8009b96:	68c3      	ldr	r3, [r0, #12]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4798      	blx	r3
 8009ba0:	e000      	b.n	8009ba4 <LCD_GetPixelIndex+0x50>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	b003      	add	sp, #12
 8009ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba8:	20000014 	.word	0x20000014
 8009bac:	20027324 	.word	0x20027324

08009bb0 <LCD_GetPixelColor>:
 8009bb0:	b508      	push	{r3, lr}
 8009bb2:	f7ff ffcf 	bl	8009b54 <LCD_GetPixelIndex>
 8009bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009bba:	f7ff bdd3 	b.w	8009764 <LCD_Index2Color>
	...

08009bc0 <LCD_SelectLCD>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <LCD_SelectLCD+0x38>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	7c51      	ldrb	r1, [r2, #17]
 8009bc8:	4a0c      	ldr	r2, [pc, #48]	; (8009bfc <LCD_SelectLCD+0x3c>)
 8009bca:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009bce:	461c      	mov	r4, r3
 8009bd0:	b140      	cbz	r0, 8009be4 <LCD_SelectLCD+0x24>
 8009bd2:	68c3      	ldr	r3, [r0, #12]
 8009bd4:	b113      	cbz	r3, 8009bdc <LCD_SelectLCD+0x1c>
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d001      	beq.n	8009be0 <LCD_SelectLCD+0x20>
 8009bdc:	6800      	ldr	r0, [r0, #0]
 8009bde:	e7f7      	b.n	8009bd0 <LCD_SelectLCD+0x10>
 8009be0:	f7ff f948 	bl	8008e74 <GUI_DEVICE_Unlink>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	2200      	movs	r2, #0
 8009be8:	661a      	str	r2, [r3, #96]	; 0x60
 8009bea:	f103 0208 	add.w	r2, r3, #8
 8009bee:	615a      	str	r2, [r3, #20]
 8009bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf4:	f7ff bd48 	b.w	8009688 <LCD_SetClipRectMax>
 8009bf8:	20000014 	.word	0x20000014
 8009bfc:	20027324 	.word	0x20027324

08009c00 <LCD_GetPosEx>:
 8009c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c02:	460c      	mov	r4, r1
 8009c04:	4615      	mov	r5, r2
 8009c06:	f7ff f8fd 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009c0a:	9001      	str	r0, [sp, #4]
 8009c0c:	b908      	cbnz	r0, 8009c12 <LCD_GetPosEx+0x12>
 8009c0e:	2001      	movs	r0, #1
 8009c10:	e00d      	b.n	8009c2e <LCD_GetPosEx+0x2e>
 8009c12:	68c3      	ldr	r3, [r0, #12]
 8009c14:	2104      	movs	r1, #4
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	eb0d 0001 	add.w	r0, sp, r1
 8009c1c:	4798      	blx	r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d0f4      	beq.n	8009c0e <LCD_GetPosEx+0xe>
 8009c24:	9801      	ldr	r0, [sp, #4]
 8009c26:	462a      	mov	r2, r5
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4798      	blx	r3
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	b003      	add	sp, #12
 8009c30:	bd30      	pop	{r4, r5, pc}

08009c32 <LCD_SetDevFunc>:
 8009c32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	4615      	mov	r5, r2
 8009c38:	f7ff f8e4 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009c3c:	9001      	str	r0, [sp, #4]
 8009c3e:	b908      	cbnz	r0, 8009c44 <LCD_SetDevFunc+0x12>
 8009c40:	2001      	movs	r0, #1
 8009c42:	e00c      	b.n	8009c5e <LCD_SetDevFunc+0x2c>
 8009c44:	68c3      	ldr	r3, [r0, #12]
 8009c46:	2116      	movs	r1, #22
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	a801      	add	r0, sp, #4
 8009c4c:	4798      	blx	r3
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d0f5      	beq.n	8009c40 <LCD_SetDevFunc+0xe>
 8009c54:	9801      	ldr	r0, [sp, #4]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4798      	blx	r3
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	b003      	add	sp, #12
 8009c60:	bd30      	pop	{r4, r5, pc}

08009c62 <LCD_SetLUTEntryEx>:
 8009c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c64:	460c      	mov	r4, r1
 8009c66:	4615      	mov	r5, r2
 8009c68:	f7ff f8cc 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009c6c:	9001      	str	r0, [sp, #4]
 8009c6e:	b908      	cbnz	r0, 8009c74 <LCD_SetLUTEntryEx+0x12>
 8009c70:	2001      	movs	r0, #1
 8009c72:	e00c      	b.n	8009c8e <LCD_SetLUTEntryEx+0x2c>
 8009c74:	68c3      	ldr	r3, [r0, #12]
 8009c76:	2110      	movs	r1, #16
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	a801      	add	r0, sp, #4
 8009c7c:	4798      	blx	r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d0f5      	beq.n	8009c70 <LCD_SetLUTEntryEx+0xe>
 8009c84:	9801      	ldr	r0, [sp, #4]
 8009c86:	462a      	mov	r2, r5
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4798      	blx	r3
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	b003      	add	sp, #12
 8009c90:	bd30      	pop	{r4, r5, pc}

08009c92 <LCD_SetSizeEx>:
 8009c92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	4615      	mov	r5, r2
 8009c98:	f7ff f8b4 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009c9c:	9001      	str	r0, [sp, #4]
 8009c9e:	b908      	cbnz	r0, 8009ca4 <LCD_SetSizeEx+0x12>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	e00c      	b.n	8009cbe <LCD_SetSizeEx+0x2c>
 8009ca4:	68c3      	ldr	r3, [r0, #12]
 8009ca6:	210b      	movs	r1, #11
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	a801      	add	r0, sp, #4
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d0f5      	beq.n	8009ca0 <LCD_SetSizeEx+0xe>
 8009cb4:	9801      	ldr	r0, [sp, #4]
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4798      	blx	r3
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	b003      	add	sp, #12
 8009cc0:	bd30      	pop	{r4, r5, pc}

08009cc2 <LCD_SetVRAMAddrEx>:
 8009cc2:	b513      	push	{r0, r1, r4, lr}
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	f7ff f89d 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009cca:	9001      	str	r0, [sp, #4]
 8009ccc:	b908      	cbnz	r0, 8009cd2 <LCD_SetVRAMAddrEx+0x10>
 8009cce:	2001      	movs	r0, #1
 8009cd0:	e00b      	b.n	8009cea <LCD_SetVRAMAddrEx+0x28>
 8009cd2:	68c3      	ldr	r3, [r0, #12]
 8009cd4:	2109      	movs	r1, #9
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	a801      	add	r0, sp, #4
 8009cda:	4798      	blx	r3
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0f5      	beq.n	8009cce <LCD_SetVRAMAddrEx+0xc>
 8009ce2:	9801      	ldr	r0, [sp, #4]
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4798      	blx	r3
 8009ce8:	2000      	movs	r0, #0
 8009cea:	b002      	add	sp, #8
 8009cec:	bd10      	pop	{r4, pc}

08009cee <LCD_SetVSizeEx>:
 8009cee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	4615      	mov	r5, r2
 8009cf4:	f7ff f886 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 8009cf8:	9001      	str	r0, [sp, #4]
 8009cfa:	b908      	cbnz	r0, 8009d00 <LCD_SetVSizeEx+0x12>
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	e00c      	b.n	8009d1a <LCD_SetVSizeEx+0x2c>
 8009d00:	68c3      	ldr	r3, [r0, #12]
 8009d02:	210a      	movs	r1, #10
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	a801      	add	r0, sp, #4
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0f5      	beq.n	8009cfc <LCD_SetVSizeEx+0xe>
 8009d10:	9801      	ldr	r0, [sp, #4]
 8009d12:	462a      	mov	r2, r5
 8009d14:	4621      	mov	r1, r4
 8009d16:	4798      	blx	r3
 8009d18:	2000      	movs	r0, #0
 8009d1a:	b003      	add	sp, #12
 8009d1c:	bd30      	pop	{r4, r5, pc}
	...

08009d20 <LCD_UpdateColorIndices>:
 8009d20:	b510      	push	{r4, lr}
 8009d22:	4c07      	ldr	r4, [pc, #28]	; (8009d40 <LCD_UpdateColorIndices+0x20>)
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d28:	f7ff fd0e 	bl	8009748 <LCD_Color2Index>
 8009d2c:	f7ff fd28 	bl	8009780 <LCD_SetColorIndex>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009d34:	f7ff fd08 	bl	8009748 <LCD_Color2Index>
 8009d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3c:	f7ff bd3c 	b.w	80097b8 <LCD_SetBkColorIndex>
 8009d40:	20000014 	.word	0x20000014

08009d44 <_GetRect>:
 8009d44:	6882      	ldr	r2, [r0, #8]
 8009d46:	2300      	movs	r3, #0
 8009d48:	800b      	strh	r3, [r1, #0]
 8009d4a:	804b      	strh	r3, [r1, #2]
 8009d4c:	6993      	ldr	r3, [r2, #24]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	808b      	strh	r3, [r1, #4]
 8009d52:	69d3      	ldr	r3, [r2, #28]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	80cb      	strh	r3, [r1, #6]
 8009d58:	4770      	bx	lr

08009d5a <_SetPixelIndex>:
 8009d5a:	b510      	push	{r4, lr}
 8009d5c:	6884      	ldr	r4, [r0, #8]
 8009d5e:	6a20      	ldr	r0, [r4, #32]
 8009d60:	fb00 1202 	mla	r2, r0, r2, r1
 8009d64:	6821      	ldr	r1, [r4, #0]
 8009d66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d6a:	bd10      	pop	{r4, pc}

08009d6c <_GetPixelIndex>:
 8009d6c:	6880      	ldr	r0, [r0, #8]
 8009d6e:	6a03      	ldr	r3, [r0, #32]
 8009d70:	fb03 1202 	mla	r2, r3, r2, r1
 8009d74:	6803      	ldr	r3, [r0, #0]
 8009d76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009d7a:	4770      	bx	lr

08009d7c <_XorPixel>:
 8009d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4616      	mov	r6, r2
 8009d86:	f7ff fff1 	bl	8009d6c <_GetPixelIndex>
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	4607      	mov	r7, r0
 8009d90:	4798      	blx	r3
 8009d92:	4632      	mov	r2, r6
 8009d94:	ea87 0300 	eor.w	r3, r7, r0
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	f7ff bfdb 	b.w	8009d5a <_SetPixelIndex>

08009da4 <_FillRect>:
 8009da4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009da8:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8009dac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009dae:	f8d9 6034 	ldr.w	r6, [r9, #52]	; 0x34
 8009db2:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009ef4 <_FillRect+0x150>
 8009db6:	468a      	mov	sl, r1
 8009db8:	4615      	mov	r5, r2
 8009dba:	b146      	cbz	r6, 8009dce <_FillRect+0x2a>
 8009dbc:	f8de 5000 	ldr.w	r5, [lr]
 8009dc0:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8009dc2:	682d      	ldr	r5, [r5, #0]
 8009dc4:	e88d 0030 	stmia.w	sp, {r4, r5}
 8009dc8:	6980      	ldr	r0, [r0, #24]
 8009dca:	47b0      	blx	r6
 8009dcc:	e08e      	b.n	8009eec <_FillRect+0x148>
 8009dce:	1a5b      	subs	r3, r3, r1
 8009dd0:	f8de 1000 	ldr.w	r1, [lr]
 8009dd4:	f8d9 8020 	ldr.w	r8, [r9, #32]
 8009dd8:	1aa4      	subs	r4, r4, r2
 8009dda:	7c0a      	ldrb	r2, [r1, #16]
 8009ddc:	f012 0201 	ands.w	r2, r2, #1
 8009de0:	f103 0701 	add.w	r7, r3, #1
 8009de4:	f104 0601 	add.w	r6, r4, #1
 8009de8:	d022      	beq.n	8009e30 <_FillRect+0x8c>
 8009dea:	6903      	ldr	r3, [r0, #16]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	4798      	blx	r3
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	d07b      	beq.n	8009eec <_FillRect+0x148>
 8009df4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009df8:	fb03 a505 	mla	r5, r3, r5, sl
 8009dfc:	f06f 0203 	mvn.w	r2, #3
 8009e00:	fb08 5404 	mla	r4, r8, r4, r5
 8009e04:	fb02 f208 	mul.w	r2, r2, r8
 8009e08:	00a4      	lsls	r4, r4, #2
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	d06e      	beq.n	8009eec <_FillRect+0x148>
 8009e0e:	3e01      	subs	r6, #1
 8009e10:	4623      	mov	r3, r4
 8009e12:	463d      	mov	r5, r7
 8009e14:	f8d9 e000 	ldr.w	lr, [r9]
 8009e18:	f853 100e 	ldr.w	r1, [r3, lr]
 8009e1c:	3d01      	subs	r5, #1
 8009e1e:	ea81 0100 	eor.w	r1, r1, r0
 8009e22:	f843 100e 	str.w	r1, [r3, lr]
 8009e26:	f103 0304 	add.w	r3, r3, #4
 8009e2a:	d1f3      	bne.n	8009e14 <_FillRect+0x70>
 8009e2c:	4414      	add	r4, r2
 8009e2e:	e7ec      	b.n	8009e0a <_FillRect+0x66>
 8009e30:	f8d9 0000 	ldr.w	r0, [r9]
 8009e34:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8009e36:	fb08 a505 	mla	r5, r8, r5, sl
 8009e3a:	2f0f      	cmp	r7, #15
 8009e3c:	eb00 0a85 	add.w	sl, r0, r5, lsl #2
 8009e40:	6808      	ldr	r0, [r1, #0]
 8009e42:	d940      	bls.n	8009ec6 <_FillRect+0x122>
 8009e44:	f1a3 050f 	sub.w	r5, r3, #15
 8009e48:	092d      	lsrs	r5, r5, #4
 8009e4a:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 8009e4e:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8009e52:	3501      	adds	r5, #1
 8009e54:	fb0e a101 	mla	r1, lr, r1, sl
 8009e58:	01ad      	lsls	r5, r5, #6
 8009e5a:	46b4      	mov	ip, r6
 8009e5c:	4692      	mov	sl, r2
 8009e5e:	f1bc 0f00 	cmp.w	ip, #0
 8009e62:	d02e      	beq.n	8009ec2 <_FillRect+0x11e>
 8009e64:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8009e68:	463a      	mov	r2, r7
 8009e6a:	3a10      	subs	r2, #16
 8009e6c:	2a0f      	cmp	r2, #15
 8009e6e:	f843 0c40 	str.w	r0, [r3, #-64]
 8009e72:	f843 0c3c 	str.w	r0, [r3, #-60]
 8009e76:	f843 0c38 	str.w	r0, [r3, #-56]
 8009e7a:	f843 0c34 	str.w	r0, [r3, #-52]
 8009e7e:	f843 0c30 	str.w	r0, [r3, #-48]
 8009e82:	f843 0c2c 	str.w	r0, [r3, #-44]
 8009e86:	f843 0c28 	str.w	r0, [r3, #-40]
 8009e8a:	f843 0c24 	str.w	r0, [r3, #-36]
 8009e8e:	f843 0c20 	str.w	r0, [r3, #-32]
 8009e92:	f843 0c1c 	str.w	r0, [r3, #-28]
 8009e96:	f843 0c18 	str.w	r0, [r3, #-24]
 8009e9a:	f843 0c14 	str.w	r0, [r3, #-20]
 8009e9e:	f843 0c10 	str.w	r0, [r3, #-16]
 8009ea2:	f843 0c0c 	str.w	r0, [r3, #-12]
 8009ea6:	f843 0c08 	str.w	r0, [r3, #-8]
 8009eaa:	f843 0c04 	str.w	r0, [r3, #-4]
 8009eae:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009eb2:	d8da      	bhi.n	8009e6a <_FillRect+0xc6>
 8009eb4:	eb01 0a05 	add.w	sl, r1, r5
 8009eb8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009ebc:	ebce 0101 	rsb	r1, lr, r1
 8009ec0:	e7cd      	b.n	8009e5e <_FillRect+0xba>
 8009ec2:	f007 070f 	and.w	r7, r7, #15
 8009ec6:	b18f      	cbz	r7, 8009eec <_FillRect+0x148>
 8009ec8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009ecc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009ed0:	fb08 a404 	mla	r4, r8, r4, sl
 8009ed4:	00bb      	lsls	r3, r7, #2
 8009ed6:	b14e      	cbz	r6, 8009eec <_FillRect+0x148>
 8009ed8:	4622      	mov	r2, r4
 8009eda:	1919      	adds	r1, r3, r4
 8009edc:	f842 0b04 	str.w	r0, [r2], #4
 8009ee0:	428a      	cmp	r2, r1
 8009ee2:	d1fb      	bne.n	8009edc <_FillRect+0x138>
 8009ee4:	3e01      	subs	r6, #1
 8009ee6:	ebc8 0404 	rsb	r4, r8, r4
 8009eea:	e7f4      	b.n	8009ed6 <_FillRect+0x132>
 8009eec:	b002      	add	sp, #8
 8009eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20000014 	.word	0x20000014

08009ef8 <_DrawHLine>:
 8009ef8:	b507      	push	{r0, r1, r2, lr}
 8009efa:	9200      	str	r2, [sp, #0]
 8009efc:	f7ff ff52 	bl	8009da4 <_FillRect>
 8009f00:	b003      	add	sp, #12
 8009f02:	f85d fb04 	ldr.w	pc, [sp], #4

08009f06 <_DrawVLine>:
 8009f06:	b507      	push	{r0, r1, r2, lr}
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	f7ff ff4a 	bl	8009da4 <_FillRect>
 8009f10:	b003      	add	sp, #12
 8009f12:	f85d fb04 	ldr.w	pc, [sp], #4

08009f16 <_GetDevProp>:
 8009f16:	3901      	subs	r1, #1
 8009f18:	6883      	ldr	r3, [r0, #8]
 8009f1a:	290d      	cmp	r1, #13
 8009f1c:	d814      	bhi.n	8009f48 <_GetDevProp+0x32>
 8009f1e:	e8df f001 	tbb	[pc, r1]
 8009f22:	0b09      	.short	0x0b09
 8009f24:	13130f0d 	.word	0x13130f0d
 8009f28:	11071613 	.word	0x11071613
 8009f2c:	07070711 	.word	0x07070711
 8009f30:	2000      	movs	r0, #0
 8009f32:	4770      	bx	lr
 8009f34:	6918      	ldr	r0, [r3, #16]
 8009f36:	4770      	bx	lr
 8009f38:	6958      	ldr	r0, [r3, #20]
 8009f3a:	4770      	bx	lr
 8009f3c:	6998      	ldr	r0, [r3, #24]
 8009f3e:	4770      	bx	lr
 8009f40:	69d8      	ldr	r0, [r3, #28]
 8009f42:	4770      	bx	lr
 8009f44:	2001      	movs	r0, #1
 8009f46:	4770      	bx	lr
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f4c:	4770      	bx	lr
 8009f4e:	2020      	movs	r0, #32
 8009f50:	4770      	bx	lr
	...

08009f54 <_GetDevData>:
 8009f54:	2901      	cmp	r1, #1
 8009f56:	4802      	ldr	r0, [pc, #8]	; (8009f60 <_GetDevData+0xc>)
 8009f58:	bf18      	it	ne
 8009f5a:	2000      	movne	r0, #0
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	0800d874 	.word	0x0800d874

08009f64 <_ReadRect>:
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	6887      	ldr	r7, [r0, #8]
 8009f6a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009f6c:	6a3d      	ldr	r5, [r7, #32]
 8009f6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009f70:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8009f74:	ebc1 0e03 	rsb	lr, r1, r3
 8009f78:	3801      	subs	r0, #1
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	fb05 1502 	mla	r5, r5, r2, r1
 8009f80:	ebce 0000 	rsb	r0, lr, r0
 8009f84:	1a59      	subs	r1, r3, r1
 8009f86:	0080      	lsls	r0, r0, #2
 8009f88:	ebc6 0585 	rsb	r5, r6, r5, lsl #2
 8009f8c:	0089      	lsls	r1, r1, #2
 8009f8e:	f04f 0c00 	mov.w	ip, #0
 8009f92:	f10e 0801 	add.w	r8, lr, #1
 8009f96:	46b1      	mov	r9, r6
 8009f98:	eb0c 0a05 	add.w	sl, ip, r5
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	eb09 0b0a 	add.w	fp, r9, sl
 8009fa2:	f1b8 0801 	subs.w	r8, r8, #1
 8009fa6:	f85b 3003 	ldr.w	r3, [fp, r3]
 8009faa:	f849 3b04 	str.w	r3, [r9], #4
 8009fae:	d1f5      	bne.n	8009f9c <_ReadRect+0x38>
 8009fb0:	3201      	adds	r2, #1
 8009fb2:	1e53      	subs	r3, r2, #1
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	440e      	add	r6, r1
 8009fb8:	4484      	add	ip, r0
 8009fba:	dcea      	bgt.n	8009f92 <_ReadRect+0x2e>
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fc0 <_GetDevFunc>:
 8009fc0:	3901      	subs	r1, #1
 8009fc2:	2928      	cmp	r1, #40	; 0x28
 8009fc4:	d848      	bhi.n	800a058 <_GetDevFunc+0x98>
 8009fc6:	e8df f001 	tbb	[pc, r1]
 8009fca:	1f45      	.short	0x1f45
 8009fcc:	21471d1b 	.word	0x21471d1b
 8009fd0:	17494747 	.word	0x17494747
 8009fd4:	25472319 	.word	0x25472319
 8009fd8:	47474727 	.word	0x47474727
 8009fdc:	332d2b29 	.word	0x332d2b29
 8009fe0:	47354747 	.word	0x47354747
 8009fe4:	47474747 	.word	0x47474747
 8009fe8:	312f3947 	.word	0x312f3947
 8009fec:	473d4741 	.word	0x473d4741
 8009ff0:	4747      	.short	0x4747
 8009ff2:	15          	.byte	0x15
 8009ff3:	00          	.byte	0x00
 8009ff4:	481a      	ldr	r0, [pc, #104]	; (800a060 <_GetDevFunc+0xa0>)
 8009ff6:	4770      	bx	lr
 8009ff8:	481a      	ldr	r0, [pc, #104]	; (800a064 <_GetDevFunc+0xa4>)
 8009ffa:	4770      	bx	lr
 8009ffc:	481a      	ldr	r0, [pc, #104]	; (800a068 <_GetDevFunc+0xa8>)
 8009ffe:	4770      	bx	lr
 800a000:	481a      	ldr	r0, [pc, #104]	; (800a06c <_GetDevFunc+0xac>)
 800a002:	4770      	bx	lr
 800a004:	481a      	ldr	r0, [pc, #104]	; (800a070 <_GetDevFunc+0xb0>)
 800a006:	4770      	bx	lr
 800a008:	481a      	ldr	r0, [pc, #104]	; (800a074 <_GetDevFunc+0xb4>)
 800a00a:	4770      	bx	lr
 800a00c:	481a      	ldr	r0, [pc, #104]	; (800a078 <_GetDevFunc+0xb8>)
 800a00e:	4770      	bx	lr
 800a010:	481a      	ldr	r0, [pc, #104]	; (800a07c <_GetDevFunc+0xbc>)
 800a012:	4770      	bx	lr
 800a014:	481a      	ldr	r0, [pc, #104]	; (800a080 <_GetDevFunc+0xc0>)
 800a016:	4770      	bx	lr
 800a018:	481a      	ldr	r0, [pc, #104]	; (800a084 <_GetDevFunc+0xc4>)
 800a01a:	4770      	bx	lr
 800a01c:	481a      	ldr	r0, [pc, #104]	; (800a088 <_GetDevFunc+0xc8>)
 800a01e:	4770      	bx	lr
 800a020:	481a      	ldr	r0, [pc, #104]	; (800a08c <_GetDevFunc+0xcc>)
 800a022:	4770      	bx	lr
 800a024:	481a      	ldr	r0, [pc, #104]	; (800a090 <_GetDevFunc+0xd0>)
 800a026:	4770      	bx	lr
 800a028:	481a      	ldr	r0, [pc, #104]	; (800a094 <_GetDevFunc+0xd4>)
 800a02a:	4770      	bx	lr
 800a02c:	481a      	ldr	r0, [pc, #104]	; (800a098 <_GetDevFunc+0xd8>)
 800a02e:	4770      	bx	lr
 800a030:	481a      	ldr	r0, [pc, #104]	; (800a09c <_GetDevFunc+0xdc>)
 800a032:	4770      	bx	lr
 800a034:	6803      	ldr	r3, [r0, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a03a:	4770      	bx	lr
 800a03c:	6803      	ldr	r3, [r0, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a042:	4770      	bx	lr
 800a044:	6803      	ldr	r3, [r0, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a04a:	4770      	bx	lr
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800a052:	4770      	bx	lr
 800a054:	4812      	ldr	r0, [pc, #72]	; (800a0a0 <_GetDevFunc+0xe0>)
 800a056:	4770      	bx	lr
 800a058:	2000      	movs	r0, #0
 800a05a:	4770      	bx	lr
 800a05c:	4811      	ldr	r0, [pc, #68]	; (800a0a4 <_GetDevFunc+0xe4>)
 800a05e:	4770      	bx	lr
 800a060:	0800a769 	.word	0x0800a769
 800a064:	0800a97b 	.word	0x0800a97b
 800a068:	0800a939 	.word	0x0800a939
 800a06c:	0800a83b 	.word	0x0800a83b
 800a070:	0800a74d 	.word	0x0800a74d
 800a074:	0800a7e9 	.word	0x0800a7e9
 800a078:	0800a7c1 	.word	0x0800a7c1
 800a07c:	0800a7a7 	.word	0x0800a7a7
 800a080:	0800a0f5 	.word	0x0800a0f5
 800a084:	0800a0eb 	.word	0x0800a0eb
 800a088:	0800a0d5 	.word	0x0800a0d5
 800a08c:	0800a0bf 	.word	0x0800a0bf
 800a090:	0800a0a9 	.word	0x0800a0a9
 800a094:	0800a6e9 	.word	0x0800a6e9
 800a098:	0800a781 	.word	0x0800a781
 800a09c:	0800a69b 	.word	0x0800a69b
 800a0a0:	08009f65 	.word	0x08009f65
 800a0a4:	0800a811 	.word	0x0800a811

0800a0a8 <_SetChroma>:
 800a0a8:	b507      	push	{r0, r1, r2, lr}
 800a0aa:	6980      	ldr	r0, [r0, #24]
 800a0ac:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a0b0:	466a      	mov	r2, sp
 800a0b2:	210d      	movs	r1, #13
 800a0b4:	f7fa f86a 	bl	800418c <LCD_X_DisplayDriver>
 800a0b8:	b003      	add	sp, #12
 800a0ba:	f85d fb04 	ldr.w	pc, [sp], #4

0800a0be <_SetChromaMode>:
 800a0be:	b507      	push	{r0, r1, r2, lr}
 800a0c0:	aa02      	add	r2, sp, #8
 800a0c2:	6980      	ldr	r0, [r0, #24]
 800a0c4:	f842 1d04 	str.w	r1, [r2, #-4]!
 800a0c8:	210c      	movs	r1, #12
 800a0ca:	f7fa f85f 	bl	800418c <LCD_X_DisplayDriver>
 800a0ce:	b003      	add	sp, #12
 800a0d0:	f85d fb04 	ldr.w	pc, [sp], #4

0800a0d4 <_SetAlphaMode>:
 800a0d4:	b507      	push	{r0, r1, r2, lr}
 800a0d6:	aa02      	add	r2, sp, #8
 800a0d8:	6980      	ldr	r0, [r0, #24]
 800a0da:	f842 1d04 	str.w	r1, [r2, #-4]!
 800a0de:	210b      	movs	r1, #11
 800a0e0:	f7fa f854 	bl	800418c <LCD_X_DisplayDriver>
 800a0e4:	b003      	add	sp, #12
 800a0e6:	f85d fb04 	ldr.w	pc, [sp], #4

0800a0ea <_Off>:
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2106      	movs	r1, #6
 800a0ee:	6980      	ldr	r0, [r0, #24]
 800a0f0:	f7fa b84c 	b.w	800418c <LCD_X_DisplayDriver>

0800a0f4 <_On>:
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2105      	movs	r1, #5
 800a0f8:	6980      	ldr	r0, [r0, #24]
 800a0fa:	f7fa b847 	b.w	800418c <LCD_X_DisplayDriver>

0800a0fe <_SetOrg>:
 800a0fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a102:	2300      	movs	r3, #0
 800a104:	4607      	mov	r7, r0
 800a106:	6884      	ldr	r4, [r0, #8]
 800a108:	6980      	ldr	r0, [r0, #24]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	460d      	mov	r5, r1
 800a10e:	4616      	mov	r6, r2
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	f7ff fcbb 	bl	8009a8c <LCD_GetMirrorXEx>
 800a116:	4680      	mov	r8, r0
 800a118:	69b8      	ldr	r0, [r7, #24]
 800a11a:	f7ff fcba 	bl	8009a92 <LCD_GetMirrorYEx>
 800a11e:	4681      	mov	r9, r0
 800a120:	69b8      	ldr	r0, [r7, #24]
 800a122:	f7ff fcb9 	bl	8009a98 <LCD_GetSwapXYEx>
 800a126:	0080      	lsls	r0, r0, #2
 800a128:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800a12c:	ea40 0008 	orr.w	r0, r0, r8
 800a130:	2807      	cmp	r0, #7
 800a132:	d826      	bhi.n	800a182 <_SetOrg+0x84>
 800a134:	e8df f000 	tbb	[pc, r0]
 800a138:	0b0f0408 	.word	0x0b0f0408
 800a13c:	1b1f1519 	.word	0x1b1f1519
 800a140:	69a3      	ldr	r3, [r4, #24]
 800a142:	6921      	ldr	r1, [r4, #16]
 800a144:	1a59      	subs	r1, r3, r1
 800a146:	1b4d      	subs	r5, r1, r5
 800a148:	9500      	str	r5, [sp, #0]
 800a14a:	9601      	str	r6, [sp, #4]
 800a14c:	e019      	b.n	800a182 <_SetOrg+0x84>
 800a14e:	69a3      	ldr	r3, [r4, #24]
 800a150:	6921      	ldr	r1, [r4, #16]
 800a152:	1a5b      	subs	r3, r3, r1
 800a154:	1b5d      	subs	r5, r3, r5
 800a156:	69e3      	ldr	r3, [r4, #28]
 800a158:	6962      	ldr	r2, [r4, #20]
 800a15a:	9500      	str	r5, [sp, #0]
 800a15c:	1a9a      	subs	r2, r3, r2
 800a15e:	1b96      	subs	r6, r2, r6
 800a160:	e7f3      	b.n	800a14a <_SetOrg+0x4c>
 800a162:	69e3      	ldr	r3, [r4, #28]
 800a164:	6962      	ldr	r2, [r4, #20]
 800a166:	1a9a      	subs	r2, r3, r2
 800a168:	1b96      	subs	r6, r2, r6
 800a16a:	9600      	str	r6, [sp, #0]
 800a16c:	e008      	b.n	800a180 <_SetOrg+0x82>
 800a16e:	69e3      	ldr	r3, [r4, #28]
 800a170:	6962      	ldr	r2, [r4, #20]
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	1b9e      	subs	r6, r3, r6
 800a176:	69a3      	ldr	r3, [r4, #24]
 800a178:	6921      	ldr	r1, [r4, #16]
 800a17a:	9600      	str	r6, [sp, #0]
 800a17c:	1a59      	subs	r1, r3, r1
 800a17e:	1b4d      	subs	r5, r1, r5
 800a180:	9501      	str	r5, [sp, #4]
 800a182:	466a      	mov	r2, sp
 800a184:	2103      	movs	r1, #3
 800a186:	69b8      	ldr	r0, [r7, #24]
 800a188:	f7fa f800 	bl	800418c <LCD_X_DisplayDriver>
 800a18c:	b003      	add	sp, #12
 800a18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a194 <_DrawBitmap>:
 800a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	b089      	sub	sp, #36	; 0x24
 800a19a:	4680      	mov	r8, r0
 800a19c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a19e:	9103      	str	r1, [sp, #12]
 800a1a0:	469b      	mov	fp, r3
 800a1a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	2804      	cmp	r0, #4
 800a1a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	9202      	str	r2, [sp, #8]
 800a1ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a1b0:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 800a1b4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1ba:	d016      	beq.n	800a1ea <_DrawBitmap+0x56>
 800a1bc:	dc0e      	bgt.n	800a1dc <_DrawBitmap+0x48>
 800a1be:	2801      	cmp	r0, #1
 800a1c0:	d01d      	beq.n	800a1fe <_DrawBitmap+0x6a>
 800a1c2:	2802      	cmp	r0, #2
 800a1c4:	f040 8253 	bne.w	800a66e <_DrawBitmap+0x4da>
 800a1c8:	4aac      	ldr	r2, [pc, #688]	; (800a47c <_DrawBitmap+0x2e8>)
 800a1ca:	6812      	ldr	r2, [r2, #0]
 800a1cc:	9204      	str	r2, [sp, #16]
 800a1ce:	9a03      	ldr	r2, [sp, #12]
 800a1d0:	4452      	add	r2, sl
 800a1d2:	2700      	movs	r7, #0
 800a1d4:	9203      	str	r2, [sp, #12]
 800a1d6:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800a1da:	e0bd      	b.n	800a358 <_DrawBitmap+0x1c4>
 800a1dc:	2808      	cmp	r0, #8
 800a1de:	f000 816e 	beq.w	800a4be <_DrawBitmap+0x32a>
 800a1e2:	2820      	cmp	r0, #32
 800a1e4:	f000 8219 	beq.w	800a61a <_DrawBitmap+0x486>
 800a1e8:	e241      	b.n	800a66e <_DrawBitmap+0x4da>
 800a1ea:	4aa4      	ldr	r2, [pc, #656]	; (800a47c <_DrawBitmap+0x2e8>)
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	9204      	str	r2, [sp, #16]
 800a1f0:	9a03      	ldr	r2, [sp, #12]
 800a1f2:	4452      	add	r2, sl
 800a1f4:	2700      	movs	r7, #0
 800a1f6:	9203      	str	r2, [sp, #12]
 800a1f8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800a1fc:	e105      	b.n	800a40a <_DrawBitmap+0x276>
 800a1fe:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800a200:	b916      	cbnz	r6, 800a208 <_DrawBitmap+0x74>
 800a202:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a206:	e04d      	b.n	800a2a4 <_DrawBitmap+0x110>
 800a208:	4b9c      	ldr	r3, [pc, #624]	; (800a47c <_DrawBitmap+0x2e8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	7c1b      	ldrb	r3, [r3, #16]
 800a20e:	07df      	lsls	r7, r3, #31
 800a210:	d4f7      	bmi.n	800a202 <_DrawBitmap+0x6e>
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	9315      	str	r3, [sp, #84]	; 0x54
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	9314      	str	r3, [sp, #80]	; 0x50
 800a21a:	9516      	str	r5, [sp, #88]	; 0x58
 800a21c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800a220:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800a224:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800a228:	4623      	mov	r3, r4
 800a22a:	46b4      	mov	ip, r6
 800a22c:	b009      	add	sp, #36	; 0x24
 800a22e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a232:	4760      	bx	ip
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800a23a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800a23e:	eb03 070a 	add.w	r7, r3, sl
 800a242:	4b8e      	ldr	r3, [pc, #568]	; (800a47c <_DrawBitmap+0x2e8>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	7c1b      	ldrb	r3, [r3, #16]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d030      	beq.n	800a2b2 <_DrawBitmap+0x11e>
 800a250:	2b03      	cmp	r3, #3
 800a252:	d04f      	beq.n	800a2f4 <_DrawBitmap+0x160>
 800a254:	2b01      	cmp	r3, #1
 800a256:	d04d      	beq.n	800a2f4 <_DrawBitmap+0x160>
 800a258:	4989      	ldr	r1, [pc, #548]	; (800a480 <_DrawBitmap+0x2ec>)
 800a25a:	7823      	ldrb	r3, [r4, #0]
 800a25c:	6828      	ldr	r0, [r5, #0]
 800a25e:	5ccb      	ldrb	r3, [r1, r3]
 800a260:	6a31      	ldr	r1, [r6, #32]
 800a262:	fb01 7709 	mla	r7, r1, r9, r7
 800a266:	6831      	ldr	r1, [r6, #0]
 800a268:	f1ca 0208 	rsb	r2, sl, #8
 800a26c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a270:	fa43 f30a 	asr.w	r3, r3, sl
 800a274:	4659      	mov	r1, fp
 800a276:	4626      	mov	r6, r4
 800a278:	f013 0f01 	tst.w	r3, #1
 800a27c:	bf0c      	ite	eq
 800a27e:	4686      	moveq	lr, r0
 800a280:	46e6      	movne	lr, ip
 800a282:	3a01      	subs	r2, #1
 800a284:	bf04      	itt	eq
 800a286:	7873      	ldrbeq	r3, [r6, #1]
 800a288:	4a7d      	ldreq	r2, [pc, #500]	; (800a480 <_DrawBitmap+0x2ec>)
 800a28a:	f847 eb04 	str.w	lr, [r7], #4
 800a28e:	bf09      	itett	eq
 800a290:	5cd3      	ldrbeq	r3, [r2, r3]
 800a292:	085b      	lsrne	r3, r3, #1
 800a294:	3601      	addeq	r6, #1
 800a296:	2208      	moveq	r2, #8
 800a298:	3901      	subs	r1, #1
 800a29a:	d1ed      	bne.n	800a278 <_DrawBitmap+0xe4>
 800a29c:	9b01      	ldr	r3, [sp, #4]
 800a29e:	f109 0901 	add.w	r9, r9, #1
 800a2a2:	441c      	add	r4, r3
 800a2a4:	9b02      	ldr	r3, [sp, #8]
 800a2a6:	9a00      	ldr	r2, [sp, #0]
 800a2a8:	ebc3 0309 	rsb	r3, r3, r9
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	dcc1      	bgt.n	800a234 <_DrawBitmap+0xa0>
 800a2b0:	e1dd      	b.n	800a66e <_DrawBitmap+0x4da>
 800a2b2:	7823      	ldrb	r3, [r4, #0]
 800a2b4:	4a72      	ldr	r2, [pc, #456]	; (800a480 <_DrawBitmap+0x2ec>)
 800a2b6:	5cd2      	ldrb	r2, [r2, r3]
 800a2b8:	6a33      	ldr	r3, [r6, #32]
 800a2ba:	fb03 7709 	mla	r7, r3, r9, r7
 800a2be:	6833      	ldr	r3, [r6, #0]
 800a2c0:	f1ca 0108 	rsb	r1, sl, #8
 800a2c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2c8:	fa42 f20a 	asr.w	r2, r2, sl
 800a2cc:	4623      	mov	r3, r4
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	07d6      	lsls	r6, r2, #31
 800a2d2:	bf48      	it	mi
 800a2d4:	f847 c020 	strmi.w	ip, [r7, r0, lsl #2]
 800a2d8:	3901      	subs	r1, #1
 800a2da:	bf04      	itt	eq
 800a2dc:	785a      	ldrbeq	r2, [r3, #1]
 800a2de:	4968      	ldreq	r1, [pc, #416]	; (800a480 <_DrawBitmap+0x2ec>)
 800a2e0:	f100 0001 	add.w	r0, r0, #1
 800a2e4:	bf09      	itett	eq
 800a2e6:	5c8a      	ldrbeq	r2, [r1, r2]
 800a2e8:	0852      	lsrne	r2, r2, #1
 800a2ea:	3301      	addeq	r3, #1
 800a2ec:	2108      	moveq	r1, #8
 800a2ee:	4583      	cmp	fp, r0
 800a2f0:	d1ee      	bne.n	800a2d0 <_DrawBitmap+0x13c>
 800a2f2:	e7d3      	b.n	800a29c <_DrawBitmap+0x108>
 800a2f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	4798      	blx	r3
 800a2fc:	eb07 030b 	add.w	r3, r7, fp
 800a300:	9006      	str	r0, [sp, #24]
 800a302:	f8cd b014 	str.w	fp, [sp, #20]
 800a306:	4656      	mov	r6, sl
 800a308:	9404      	str	r4, [sp, #16]
 800a30a:	9307      	str	r3, [sp, #28]
 800a30c:	9b07      	ldr	r3, [sp, #28]
 800a30e:	9a05      	ldr	r2, [sp, #20]
 800a310:	1a9f      	subs	r7, r3, r2
 800a312:	9b04      	ldr	r3, [sp, #16]
 800a314:	781a      	ldrb	r2, [r3, #0]
 800a316:	2380      	movs	r3, #128	; 0x80
 800a318:	4133      	asrs	r3, r6
 800a31a:	421a      	tst	r2, r3
 800a31c:	d00b      	beq.n	800a336 <_DrawBitmap+0x1a2>
 800a31e:	464a      	mov	r2, r9
 800a320:	4639      	mov	r1, r7
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fd22 	bl	8009d6c <_GetPixelIndex>
 800a328:	9b06      	ldr	r3, [sp, #24]
 800a32a:	464a      	mov	r2, r9
 800a32c:	4043      	eors	r3, r0
 800a32e:	4639      	mov	r1, r7
 800a330:	4640      	mov	r0, r8
 800a332:	f7ff fd12 	bl	8009d5a <_SetPixelIndex>
 800a336:	3601      	adds	r6, #1
 800a338:	2e08      	cmp	r6, #8
 800a33a:	bf02      	ittt	eq
 800a33c:	9b04      	ldreq	r3, [sp, #16]
 800a33e:	3301      	addeq	r3, #1
 800a340:	9304      	streq	r3, [sp, #16]
 800a342:	9b05      	ldr	r3, [sp, #20]
 800a344:	bf08      	it	eq
 800a346:	2600      	moveq	r6, #0
 800a348:	3b01      	subs	r3, #1
 800a34a:	9305      	str	r3, [sp, #20]
 800a34c:	d1de      	bne.n	800a30c <_DrawBitmap+0x178>
 800a34e:	e7a5      	b.n	800a29c <_DrawBitmap+0x108>
 800a350:	b935      	cbnz	r5, 800a360 <_DrawBitmap+0x1cc>
 800a352:	9a01      	ldr	r2, [sp, #4]
 800a354:	3701      	adds	r7, #1
 800a356:	4414      	add	r4, r2
 800a358:	9a00      	ldr	r2, [sp, #0]
 800a35a:	4297      	cmp	r7, r2
 800a35c:	dbf8      	blt.n	800a350 <_DrawBitmap+0x1bc>
 800a35e:	e186      	b.n	800a66e <_DrawBitmap+0x4da>
 800a360:	9a02      	ldr	r2, [sp, #8]
 800a362:	6a19      	ldr	r1, [r3, #32]
 800a364:	9803      	ldr	r0, [sp, #12]
 800a366:	f894 e000 	ldrb.w	lr, [r4]
 800a36a:	443a      	add	r2, r7
 800a36c:	fb01 0102 	mla	r1, r1, r2, r0
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a376:	9904      	ldr	r1, [sp, #16]
 800a378:	7c09      	ldrb	r1, [r1, #16]
 800a37a:	f011 0103 	ands.w	r1, r1, #3
 800a37e:	4690      	mov	r8, r2
 800a380:	d006      	beq.n	800a390 <_DrawBitmap+0x1fc>
 800a382:	2902      	cmp	r1, #2
 800a384:	d1e5      	bne.n	800a352 <_DrawBitmap+0x1be>
 800a386:	4650      	mov	r0, sl
 800a388:	46a1      	mov	r9, r4
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	e01b      	b.n	800a3c8 <_DrawBitmap+0x234>
 800a390:	4651      	mov	r1, sl
 800a392:	465e      	mov	r6, fp
 800a394:	46a1      	mov	r9, r4
 800a396:	f1c1 0003 	rsb	r0, r1, #3
 800a39a:	0040      	lsls	r0, r0, #1
 800a39c:	f1c0 0206 	rsb	r2, r0, #6
 800a3a0:	fa4c f202 	asr.w	r2, ip, r2
 800a3a4:	ea02 020e 	and.w	r2, r2, lr
 800a3a8:	40c2      	lsrs	r2, r0
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a3b0:	f848 2b04 	str.w	r2, [r8], #4
 800a3b4:	2904      	cmp	r1, #4
 800a3b6:	bf02      	ittt	eq
 800a3b8:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800a3bc:	2100      	moveq	r1, #0
 800a3be:	f109 0901 	addeq.w	r9, r9, #1
 800a3c2:	3e01      	subs	r6, #1
 800a3c4:	d1e7      	bne.n	800a396 <_DrawBitmap+0x202>
 800a3c6:	e7c4      	b.n	800a352 <_DrawBitmap+0x1be>
 800a3c8:	f1c0 0603 	rsb	r6, r0, #3
 800a3cc:	0076      	lsls	r6, r6, #1
 800a3ce:	f1c6 0106 	rsb	r1, r6, #6
 800a3d2:	fa4c f101 	asr.w	r1, ip, r1
 800a3d6:	ea01 010e 	and.w	r1, r1, lr
 800a3da:	40f1      	lsrs	r1, r6
 800a3dc:	f100 0001 	add.w	r0, r0, #1
 800a3e0:	bf1c      	itt	ne
 800a3e2:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 800a3e6:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 800a3ea:	2804      	cmp	r0, #4
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	bf02      	ittt	eq
 800a3f2:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800a3f6:	2000      	moveq	r0, #0
 800a3f8:	f109 0901 	addeq.w	r9, r9, #1
 800a3fc:	45d8      	cmp	r8, fp
 800a3fe:	d1e3      	bne.n	800a3c8 <_DrawBitmap+0x234>
 800a400:	e7a7      	b.n	800a352 <_DrawBitmap+0x1be>
 800a402:	b935      	cbnz	r5, 800a412 <_DrawBitmap+0x27e>
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	3701      	adds	r7, #1
 800a408:	4414      	add	r4, r2
 800a40a:	9a00      	ldr	r2, [sp, #0]
 800a40c:	4297      	cmp	r7, r2
 800a40e:	dbf8      	blt.n	800a402 <_DrawBitmap+0x26e>
 800a410:	e12d      	b.n	800a66e <_DrawBitmap+0x4da>
 800a412:	9a02      	ldr	r2, [sp, #8]
 800a414:	6a19      	ldr	r1, [r3, #32]
 800a416:	9803      	ldr	r0, [sp, #12]
 800a418:	f894 e000 	ldrb.w	lr, [r4]
 800a41c:	443a      	add	r2, r7
 800a41e:	fb01 0102 	mla	r1, r1, r2, r0
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a428:	9904      	ldr	r1, [sp, #16]
 800a42a:	7c09      	ldrb	r1, [r1, #16]
 800a42c:	f011 0103 	ands.w	r1, r1, #3
 800a430:	4690      	mov	r8, r2
 800a432:	d006      	beq.n	800a442 <_DrawBitmap+0x2ae>
 800a434:	2902      	cmp	r1, #2
 800a436:	d1e5      	bne.n	800a404 <_DrawBitmap+0x270>
 800a438:	4650      	mov	r0, sl
 800a43a:	46a1      	mov	r9, r4
 800a43c:	f04f 0800 	mov.w	r8, #0
 800a440:	e020      	b.n	800a484 <_DrawBitmap+0x2f0>
 800a442:	4651      	mov	r1, sl
 800a444:	465e      	mov	r6, fp
 800a446:	46a1      	mov	r9, r4
 800a448:	f1c1 0001 	rsb	r0, r1, #1
 800a44c:	0080      	lsls	r0, r0, #2
 800a44e:	f1c0 0204 	rsb	r2, r0, #4
 800a452:	fa4c f202 	asr.w	r2, ip, r2
 800a456:	ea02 020e 	and.w	r2, r2, lr
 800a45a:	40c2      	lsrs	r2, r0
 800a45c:	3101      	adds	r1, #1
 800a45e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a462:	f848 2b04 	str.w	r2, [r8], #4
 800a466:	2902      	cmp	r1, #2
 800a468:	bf02      	ittt	eq
 800a46a:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800a46e:	2100      	moveq	r1, #0
 800a470:	f109 0901 	addeq.w	r9, r9, #1
 800a474:	3e01      	subs	r6, #1
 800a476:	d1e7      	bne.n	800a448 <_DrawBitmap+0x2b4>
 800a478:	e7c4      	b.n	800a404 <_DrawBitmap+0x270>
 800a47a:	bf00      	nop
 800a47c:	20000014 	.word	0x20000014
 800a480:	0800d900 	.word	0x0800d900
 800a484:	f1c0 0601 	rsb	r6, r0, #1
 800a488:	00b6      	lsls	r6, r6, #2
 800a48a:	f1c6 0104 	rsb	r1, r6, #4
 800a48e:	fa4c f101 	asr.w	r1, ip, r1
 800a492:	ea01 010e 	and.w	r1, r1, lr
 800a496:	40f1      	lsrs	r1, r6
 800a498:	f100 0001 	add.w	r0, r0, #1
 800a49c:	bf1c      	itt	ne
 800a49e:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 800a4a2:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 800a4a6:	2802      	cmp	r0, #2
 800a4a8:	f108 0801 	add.w	r8, r8, #1
 800a4ac:	bf02      	ittt	eq
 800a4ae:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800a4b2:	2000      	moveq	r0, #0
 800a4b4:	f109 0901 	addeq.w	r9, r9, #1
 800a4b8:	45c3      	cmp	fp, r8
 800a4ba:	d1e3      	bne.n	800a484 <_DrawBitmap+0x2f0>
 800a4bc:	e7a2      	b.n	800a404 <_DrawBitmap+0x270>
 800a4be:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 800a4c0:	4f6c      	ldr	r7, [pc, #432]	; (800a674 <_DrawBitmap+0x4e0>)
 800a4c2:	b926      	cbnz	r6, 800a4ce <_DrawBitmap+0x33a>
 800a4c4:	f8d7 c000 	ldr.w	ip, [r7]
 800a4c8:	f04f 0e00 	mov.w	lr, #0
 800a4cc:	e019      	b.n	800a502 <_DrawBitmap+0x36e>
 800a4ce:	6838      	ldr	r0, [r7, #0]
 800a4d0:	7c00      	ldrb	r0, [r0, #16]
 800a4d2:	0780      	lsls	r0, r0, #30
 800a4d4:	d4f6      	bmi.n	800a4c4 <_DrawBitmap+0x330>
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	d0f4      	beq.n	800a4c4 <_DrawBitmap+0x330>
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	9314      	str	r3, [sp, #80]	; 0x50
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4e2:	9515      	str	r5, [sp, #84]	; 0x54
 800a4e4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800a4e8:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	46b4      	mov	ip, r6
 800a4f0:	b009      	add	sp, #36	; 0x24
 800a4f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	4760      	bx	ip
 800a4f8:	b93d      	cbnz	r5, 800a50a <_DrawBitmap+0x376>
 800a4fa:	9a01      	ldr	r2, [sp, #4]
 800a4fc:	f10e 0e01 	add.w	lr, lr, #1
 800a500:	4414      	add	r4, r2
 800a502:	9a00      	ldr	r2, [sp, #0]
 800a504:	4596      	cmp	lr, r2
 800a506:	dbf7      	blt.n	800a4f8 <_DrawBitmap+0x364>
 800a508:	e0b1      	b.n	800a66e <_DrawBitmap+0x4da>
 800a50a:	9a02      	ldr	r2, [sp, #8]
 800a50c:	6a19      	ldr	r1, [r3, #32]
 800a50e:	9803      	ldr	r0, [sp, #12]
 800a510:	4472      	add	r2, lr
 800a512:	fb01 0202 	mla	r2, r1, r2, r0
 800a516:	6819      	ldr	r1, [r3, #0]
 800a518:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a51c:	f89c 1010 	ldrb.w	r1, [ip, #16]
 800a520:	f011 0103 	ands.w	r1, r1, #3
 800a524:	d003      	beq.n	800a52e <_DrawBitmap+0x39a>
 800a526:	2902      	cmp	r1, #2
 800a528:	d1e7      	bne.n	800a4fa <_DrawBitmap+0x366>
 800a52a:	2000      	movs	r0, #0
 800a52c:	e070      	b.n	800a610 <_DrawBitmap+0x47c>
 800a52e:	4620      	mov	r0, r4
 800a530:	4659      	mov	r1, fp
 800a532:	2907      	cmp	r1, #7
 800a534:	f100 0708 	add.w	r7, r0, #8
 800a538:	f102 0620 	add.w	r6, r2, #32
 800a53c:	dd33      	ble.n	800a5a6 <_DrawBitmap+0x412>
 800a53e:	f817 2c08 	ldrb.w	r2, [r7, #-8]
 800a542:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a546:	f846 2c20 	str.w	r2, [r6, #-32]
 800a54a:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800a54e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a552:	f846 2c1c 	str.w	r2, [r6, #-28]
 800a556:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800a55a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a55e:	f846 2c18 	str.w	r2, [r6, #-24]
 800a562:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800a566:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a56a:	f846 2c14 	str.w	r2, [r6, #-20]
 800a56e:	f817 2c04 	ldrb.w	r2, [r7, #-4]
 800a572:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a576:	f846 2c10 	str.w	r2, [r6, #-16]
 800a57a:	f817 2c03 	ldrb.w	r2, [r7, #-3]
 800a57e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a582:	f846 2c0c 	str.w	r2, [r6, #-12]
 800a586:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 800a58a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a58e:	f846 2c08 	str.w	r2, [r6, #-8]
 800a592:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a596:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a59a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a59e:	3908      	subs	r1, #8
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	e7c5      	b.n	800a532 <_DrawBitmap+0x39e>
 800a5a6:	2903      	cmp	r1, #3
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	f102 0210 	add.w	r2, r2, #16
 800a5b0:	f100 0004 	add.w	r0, r0, #4
 800a5b4:	dd19      	ble.n	800a5ea <_DrawBitmap+0x456>
 800a5b6:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800a5ba:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a5be:	f842 6c10 	str.w	r6, [r2, #-16]
 800a5c2:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 800a5c6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a5ca:	f842 6c0c 	str.w	r6, [r2, #-12]
 800a5ce:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800a5d2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a5d6:	f842 6c08 	str.w	r6, [r2, #-8]
 800a5da:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800a5de:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a5e2:	f842 6c04 	str.w	r6, [r2, #-4]
 800a5e6:	3904      	subs	r1, #4
 800a5e8:	e7dd      	b.n	800a5a6 <_DrawBitmap+0x412>
 800a5ea:	3f01      	subs	r7, #1
 800a5ec:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800a5f0:	42b1      	cmp	r1, r6
 800a5f2:	d082      	beq.n	800a4fa <_DrawBitmap+0x366>
 800a5f4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800a5f8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a5fc:	f846 2b04 	str.w	r2, [r6], #4
 800a600:	e7f6      	b.n	800a5f0 <_DrawBitmap+0x45c>
 800a602:	5c21      	ldrb	r1, [r4, r0]
 800a604:	b119      	cbz	r1, 800a60e <_DrawBitmap+0x47a>
 800a606:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a60a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800a60e:	3001      	adds	r0, #1
 800a610:	ebc0 010b 	rsb	r1, r0, fp
 800a614:	2900      	cmp	r1, #0
 800a616:	dcf4      	bgt.n	800a602 <_DrawBitmap+0x46e>
 800a618:	e76f      	b.n	800a4fa <_DrawBitmap+0x366>
 800a61a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800a61c:	b90d      	cbnz	r5, 800a622 <_DrawBitmap+0x48e>
 800a61e:	462a      	mov	r2, r5
 800a620:	e017      	b.n	800a652 <_DrawBitmap+0x4be>
 800a622:	9b01      	ldr	r3, [sp, #4]
 800a624:	9314      	str	r3, [sp, #80]	; 0x50
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	9313      	str	r3, [sp, #76]	; 0x4c
 800a62a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800a62e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800a632:	4623      	mov	r3, r4
 800a634:	46ac      	mov	ip, r5
 800a636:	b009      	add	sp, #36	; 0x24
 800a638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	4760      	bx	ip
 800a63e:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 800a642:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
 800a646:	3101      	adds	r1, #1
 800a648:	4559      	cmp	r1, fp
 800a64a:	d1f8      	bne.n	800a63e <_DrawBitmap+0x4aa>
 800a64c:	9901      	ldr	r1, [sp, #4]
 800a64e:	3201      	adds	r2, #1
 800a650:	440c      	add	r4, r1
 800a652:	9900      	ldr	r1, [sp, #0]
 800a654:	428a      	cmp	r2, r1
 800a656:	da0a      	bge.n	800a66e <_DrawBitmap+0x4da>
 800a658:	9902      	ldr	r1, [sp, #8]
 800a65a:	6a18      	ldr	r0, [r3, #32]
 800a65c:	9d03      	ldr	r5, [sp, #12]
 800a65e:	4411      	add	r1, r2
 800a660:	fb00 5101 	mla	r1, r0, r1, r5
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a66a:	2100      	movs	r1, #0
 800a66c:	e7e7      	b.n	800a63e <_DrawBitmap+0x4aa>
 800a66e:	b009      	add	sp, #36	; 0x24
 800a670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a674:	20000014 	.word	0x20000014

0800a678 <_InitOnce.isra.4>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	6805      	ldr	r5, [r0, #0]
 800a67c:	4604      	mov	r4, r0
 800a67e:	b93d      	cbnz	r5, 800a690 <_InitOnce.isra.4+0x18>
 800a680:	2050      	movs	r0, #80	; 0x50
 800a682:	f7fd ffcd 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 800a686:	2250      	movs	r2, #80	; 0x50
 800a688:	6020      	str	r0, [r4, #0]
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7fe fe1c 	bl	80092c8 <GUI__memset>
 800a690:	6820      	ldr	r0, [r4, #0]
 800a692:	fab0 f080 	clz	r0, r0
 800a696:	0940      	lsrs	r0, r0, #5
 800a698:	bd38      	pop	{r3, r4, r5, pc}

0800a69a <_SetDevFunc>:
 800a69a:	b570      	push	{r4, r5, r6, lr}
 800a69c:	4606      	mov	r6, r0
 800a69e:	3008      	adds	r0, #8
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	4614      	mov	r4, r2
 800a6a4:	f7ff ffe8 	bl	800a678 <_InitOnce.isra.4>
 800a6a8:	68b3      	ldr	r3, [r6, #8]
 800a6aa:	b1db      	cbz	r3, 800a6e4 <_SetDevFunc+0x4a>
 800a6ac:	2d21      	cmp	r5, #33	; 0x21
 800a6ae:	d012      	beq.n	800a6d6 <_SetDevFunc+0x3c>
 800a6b0:	dc07      	bgt.n	800a6c2 <_SetDevFunc+0x28>
 800a6b2:	2d19      	cmp	r5, #25
 800a6b4:	d00d      	beq.n	800a6d2 <_SetDevFunc+0x38>
 800a6b6:	2d20      	cmp	r5, #32
 800a6b8:	d00f      	beq.n	800a6da <_SetDevFunc+0x40>
 800a6ba:	2d03      	cmp	r5, #3
 800a6bc:	d112      	bne.n	800a6e4 <_SetDevFunc+0x4a>
 800a6be:	649c      	str	r4, [r3, #72]	; 0x48
 800a6c0:	bd70      	pop	{r4, r5, r6, pc}
 800a6c2:	2d25      	cmp	r5, #37	; 0x25
 800a6c4:	d00b      	beq.n	800a6de <_SetDevFunc+0x44>
 800a6c6:	2d28      	cmp	r5, #40	; 0x28
 800a6c8:	d00b      	beq.n	800a6e2 <_SetDevFunc+0x48>
 800a6ca:	2d23      	cmp	r5, #35	; 0x23
 800a6cc:	d10a      	bne.n	800a6e4 <_SetDevFunc+0x4a>
 800a6ce:	645c      	str	r4, [r3, #68]	; 0x44
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
 800a6d2:	635c      	str	r4, [r3, #52]	; 0x34
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	639c      	str	r4, [r3, #56]	; 0x38
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	63dc      	str	r4, [r3, #60]	; 0x3c
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	641c      	str	r4, [r3, #64]	; 0x40
 800a6e0:	bd70      	pop	{r4, r5, r6, pc}
 800a6e2:	64dc      	str	r4, [r3, #76]	; 0x4c
 800a6e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6e8 <_CopyBuffer>:
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	3008      	adds	r0, #8
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	4690      	mov	r8, r2
 800a6f4:	f7ff ffc0 	bl	800a678 <_InitOnce.isra.4>
 800a6f8:	68b4      	ldr	r4, [r6, #8]
 800a6fa:	b31c      	cbz	r4, 800a744 <_CopyBuffer+0x5c>
 800a6fc:	4547      	cmp	r7, r8
 800a6fe:	d021      	beq.n	800a744 <_CopyBuffer+0x5c>
 800a700:	68f3      	ldr	r3, [r6, #12]
 800a702:	2108      	movs	r1, #8
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	4630      	mov	r0, r6
 800a708:	4798      	blx	r3
 800a70a:	69a2      	ldr	r2, [r4, #24]
 800a70c:	6963      	ldr	r3, [r4, #20]
 800a70e:	4353      	muls	r3, r2
 800a710:	4358      	muls	r0, r3
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	08c2      	lsrs	r2, r0, #3
 800a716:	b123      	cbz	r3, 800a722 <_CopyBuffer+0x3a>
 800a718:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800a71c:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 800a720:	e004      	b.n	800a72c <_CopyBuffer+0x44>
 800a722:	6865      	ldr	r5, [r4, #4]
 800a724:	fb02 5107 	mla	r1, r2, r7, r5
 800a728:	fb02 5508 	mla	r5, r2, r8, r5
 800a72c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a72e:	b123      	cbz	r3, 800a73a <_CopyBuffer+0x52>
 800a730:	4642      	mov	r2, r8
 800a732:	4639      	mov	r1, r7
 800a734:	69b0      	ldr	r0, [r6, #24]
 800a736:	4798      	blx	r3
 800a738:	e003      	b.n	800a742 <_CopyBuffer+0x5a>
 800a73a:	4b03      	ldr	r3, [pc, #12]	; (800a748 <_CopyBuffer+0x60>)
 800a73c:	4628      	mov	r0, r5
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4798      	blx	r3
 800a742:	6025      	str	r5, [r4, #0]
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	20000020 	.word	0x20000020

0800a74c <_GetPos>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	4604      	mov	r4, r0
 800a750:	3008      	adds	r0, #8
 800a752:	460e      	mov	r6, r1
 800a754:	4615      	mov	r5, r2
 800a756:	f7ff ff8f 	bl	800a678 <_InitOnce.isra.4>
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	b11b      	cbz	r3, 800a766 <_GetPos+0x1a>
 800a75e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a760:	6032      	str	r2, [r6, #0]
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	bd70      	pop	{r4, r5, r6, pc}

0800a768 <_SetVRAM_BufferPTR>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4605      	mov	r5, r0
 800a76c:	3008      	adds	r0, #8
 800a76e:	460c      	mov	r4, r1
 800a770:	f7ff ff82 	bl	800a678 <_InitOnce.isra.4>
 800a774:	68ab      	ldr	r3, [r5, #8]
 800a776:	b113      	cbz	r3, 800a77e <_SetVRAM_BufferPTR+0x16>
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	609c      	str	r4, [r3, #8]
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}

0800a780 <_ShowBuffer>:
 800a780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a782:	4604      	mov	r4, r0
 800a784:	2300      	movs	r3, #0
 800a786:	3008      	adds	r0, #8
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	460d      	mov	r5, r1
 800a78c:	f7ff ff74 	bl	800a678 <_InitOnce.isra.4>
 800a790:	68a3      	ldr	r3, [r4, #8]
 800a792:	b133      	cbz	r3, 800a7a2 <_ShowBuffer+0x22>
 800a794:	aa02      	add	r2, sp, #8
 800a796:	210e      	movs	r1, #14
 800a798:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a79c:	69a0      	ldr	r0, [r4, #24]
 800a79e:	f7f9 fcf5 	bl	800418c <LCD_X_DisplayDriver>
 800a7a2:	b003      	add	sp, #12
 800a7a4:	bd30      	pop	{r4, r5, pc}

0800a7a6 <_Init>:
 800a7a6:	b538      	push	{r3, r4, r5, lr}
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	3008      	adds	r0, #8
 800a7ac:	f7ff ff64 	bl	800a678 <_InitOnce.isra.4>
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	69a0      	ldr	r0, [r4, #24]
 800a7b8:	f7f9 fce8 	bl	800418c <LCD_X_DisplayDriver>
 800a7bc:	4328      	orrs	r0, r5
 800a7be:	bd38      	pop	{r3, r4, r5, pc}

0800a7c0 <_SetVis>:
 800a7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	3008      	adds	r0, #8
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	f7ff ff54 	bl	800a678 <_InitOnce.isra.4>
 800a7d0:	68a3      	ldr	r3, [r4, #8]
 800a7d2:	b13b      	cbz	r3, 800a7e4 <_SetVis+0x24>
 800a7d4:	aa02      	add	r2, sp, #8
 800a7d6:	631d      	str	r5, [r3, #48]	; 0x30
 800a7d8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a7dc:	2109      	movs	r1, #9
 800a7de:	69a0      	ldr	r0, [r4, #24]
 800a7e0:	f7f9 fcd4 	bl	800418c <LCD_X_DisplayDriver>
 800a7e4:	b003      	add	sp, #12
 800a7e6:	bd30      	pop	{r4, r5, pc}

0800a7e8 <_SetAlpha>:
 800a7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	3008      	adds	r0, #8
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	f7ff ff40 	bl	800a678 <_InitOnce.isra.4>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	b13b      	cbz	r3, 800a80c <_SetAlpha+0x24>
 800a7fc:	aa02      	add	r2, sp, #8
 800a7fe:	62dd      	str	r5, [r3, #44]	; 0x2c
 800a800:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a804:	210a      	movs	r1, #10
 800a806:	69a0      	ldr	r0, [r4, #24]
 800a808:	f7f9 fcc0 	bl	800418c <LCD_X_DisplayDriver>
 800a80c:	b003      	add	sp, #12
 800a80e:	bd30      	pop	{r4, r5, pc}

0800a810 <_SetVRAMAddr>:
 800a810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a812:	4604      	mov	r4, r0
 800a814:	2300      	movs	r3, #0
 800a816:	3008      	adds	r0, #8
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	460d      	mov	r5, r1
 800a81c:	f7ff ff2c 	bl	800a678 <_InitOnce.isra.4>
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	b143      	cbz	r3, 800a836 <_SetVRAMAddr+0x26>
 800a824:	aa02      	add	r2, sp, #8
 800a826:	601d      	str	r5, [r3, #0]
 800a828:	605d      	str	r5, [r3, #4]
 800a82a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a82e:	2102      	movs	r1, #2
 800a830:	69a0      	ldr	r0, [r4, #24]
 800a832:	f7f9 fcab 	bl	800418c <LCD_X_DisplayDriver>
 800a836:	b003      	add	sp, #12
 800a838:	bd30      	pop	{r4, r5, pc}

0800a83a <_SetPos>:
 800a83a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83e:	b089      	sub	sp, #36	; 0x24
 800a840:	4606      	mov	r6, r0
 800a842:	460d      	mov	r5, r1
 800a844:	4614      	mov	r4, r2
 800a846:	2100      	movs	r1, #0
 800a848:	2218      	movs	r2, #24
 800a84a:	a802      	add	r0, sp, #8
 800a84c:	f002 fc09 	bl	800d062 <memset>
 800a850:	f106 0008 	add.w	r0, r6, #8
 800a854:	f7ff ff10 	bl	800a678 <_InitOnce.isra.4>
 800a858:	68b7      	ldr	r7, [r6, #8]
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	d069      	beq.n	800a932 <_SetPos+0xf8>
 800a85e:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 800a862:	f1bb 0f00 	cmp.w	fp, #0
 800a866:	d004      	beq.n	800a872 <_SetPos+0x38>
 800a868:	4622      	mov	r2, r4
 800a86a:	4629      	mov	r1, r5
 800a86c:	69b0      	ldr	r0, [r6, #24]
 800a86e:	47d8      	blx	fp
 800a870:	e05f      	b.n	800a932 <_SetPos+0xf8>
 800a872:	627d      	str	r5, [r7, #36]	; 0x24
 800a874:	62bc      	str	r4, [r7, #40]	; 0x28
 800a876:	f7ff f951 	bl	8009b1c <LCD_GetXSizeDisplay>
 800a87a:	4681      	mov	r9, r0
 800a87c:	f7ff f954 	bl	8009b28 <LCD_GetYSizeDisplay>
 800a880:	68f2      	ldr	r2, [r6, #12]
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a886:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800a88a:	9301      	str	r3, [sp, #4]
 800a88c:	2108      	movs	r1, #8
 800a88e:	4680      	mov	r8, r0
 800a890:	4630      	mov	r0, r6
 800a892:	4790      	blx	r2
 800a894:	2d00      	cmp	r5, #0
 800a896:	f100 0007 	add.w	r0, r0, #7
 800a89a:	f04f 0208 	mov.w	r2, #8
 800a89e:	eb05 010a 	add.w	r1, r5, sl
 800a8a2:	fb90 f0f2 	sdiv	r0, r0, r2
 800a8a6:	9b01      	ldr	r3, [sp, #4]
 800a8a8:	9006      	str	r0, [sp, #24]
 800a8aa:	da07      	bge.n	800a8bc <_SetPos+0x82>
 800a8ac:	9a07      	ldr	r2, [sp, #28]
 800a8ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a8b2:	fb00 2015 	mls	r0, r0, r5, r2
 800a8b6:	9007      	str	r0, [sp, #28]
 800a8b8:	9104      	str	r1, [sp, #16]
 800a8ba:	e007      	b.n	800a8cc <_SetPos+0x92>
 800a8bc:	4589      	cmp	r9, r1
 800a8be:	9502      	str	r5, [sp, #8]
 800a8c0:	bfb6      	itet	lt
 800a8c2:	ebc5 0509 	rsblt	r5, r5, r9
 800a8c6:	f8cd a010 	strge.w	sl, [sp, #16]
 800a8ca:	9504      	strlt	r5, [sp, #16]
 800a8cc:	2c00      	cmp	r4, #0
 800a8ce:	eb04 0203 	add.w	r2, r4, r3
 800a8d2:	da09      	bge.n	800a8e8 <_SetPos+0xae>
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	9205      	str	r2, [sp, #20]
 800a8d8:	435c      	muls	r4, r3
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	fb0a 3414 	mls	r4, sl, r4, r3
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9407      	str	r4, [sp, #28]
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	e006      	b.n	800a8f6 <_SetPos+0xbc>
 800a8e8:	4590      	cmp	r8, r2
 800a8ea:	9403      	str	r4, [sp, #12]
 800a8ec:	bfb6      	itet	lt
 800a8ee:	ebc4 0408 	rsblt	r4, r4, r8
 800a8f2:	9305      	strge	r3, [sp, #20]
 800a8f4:	9405      	strlt	r4, [sp, #20]
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	dd08      	ble.n	800a910 <_SetPos+0xd6>
 800a8fe:	9a05      	ldr	r2, [sp, #20]
 800a900:	2a00      	cmp	r2, #0
 800a902:	dd05      	ble.n	800a910 <_SetPos+0xd6>
 800a904:	9a02      	ldr	r2, [sp, #8]
 800a906:	4591      	cmp	r9, r2
 800a908:	dd02      	ble.n	800a910 <_SetPos+0xd6>
 800a90a:	9a03      	ldr	r2, [sp, #12]
 800a90c:	4590      	cmp	r8, r2
 800a90e:	dc06      	bgt.n	800a91e <_SetPos+0xe4>
 800a910:	2b01      	cmp	r3, #1
 800a912:	d10e      	bne.n	800a932 <_SetPos+0xf8>
 800a914:	2100      	movs	r1, #0
 800a916:	4630      	mov	r0, r6
 800a918:	f7ff ff52 	bl	800a7c0 <_SetVis>
 800a91c:	e009      	b.n	800a932 <_SetPos+0xf8>
 800a91e:	b91b      	cbnz	r3, 800a928 <_SetPos+0xee>
 800a920:	2101      	movs	r1, #1
 800a922:	4630      	mov	r0, r6
 800a924:	f7ff ff4c 	bl	800a7c0 <_SetVis>
 800a928:	aa02      	add	r2, sp, #8
 800a92a:	2108      	movs	r1, #8
 800a92c:	69b0      	ldr	r0, [r6, #24]
 800a92e:	f7f9 fc2d 	bl	800418c <LCD_X_DisplayDriver>
 800a932:	b009      	add	sp, #36	; 0x24
 800a934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a938 <_SetSize>:
 800a938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93a:	4605      	mov	r5, r0
 800a93c:	2300      	movs	r3, #0
 800a93e:	3008      	adds	r0, #8
 800a940:	460f      	mov	r7, r1
 800a942:	4616      	mov	r6, r2
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	f7ff fe96 	bl	800a678 <_InitOnce.isra.4>
 800a94c:	68ac      	ldr	r4, [r5, #8]
 800a94e:	b194      	cbz	r4, 800a976 <_SetSize+0x3e>
 800a950:	6a23      	ldr	r3, [r4, #32]
 800a952:	b93b      	cbnz	r3, 800a964 <_SetSize+0x2c>
 800a954:	69a8      	ldr	r0, [r5, #24]
 800a956:	f7ff f89f 	bl	8009a98 <LCD_GetSwapXYEx>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	bf0c      	ite	eq
 800a95e:	4638      	moveq	r0, r7
 800a960:	4630      	movne	r0, r6
 800a962:	6220      	str	r0, [r4, #32]
 800a964:	6127      	str	r7, [r4, #16]
 800a966:	6166      	str	r6, [r4, #20]
 800a968:	466a      	mov	r2, sp
 800a96a:	2107      	movs	r1, #7
 800a96c:	69a8      	ldr	r0, [r5, #24]
 800a96e:	9700      	str	r7, [sp, #0]
 800a970:	9601      	str	r6, [sp, #4]
 800a972:	f7f9 fc0b 	bl	800418c <LCD_X_DisplayDriver>
 800a976:	b003      	add	sp, #12
 800a978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a97a <_SetVSize>:
 800a97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97c:	4607      	mov	r7, r0
 800a97e:	3008      	adds	r0, #8
 800a980:	460d      	mov	r5, r1
 800a982:	4616      	mov	r6, r2
 800a984:	f7ff fe78 	bl	800a678 <_InitOnce.isra.4>
 800a988:	68bc      	ldr	r4, [r7, #8]
 800a98a:	b144      	cbz	r4, 800a99e <_SetVSize+0x24>
 800a98c:	69b8      	ldr	r0, [r7, #24]
 800a98e:	f7ff f883 	bl	8009a98 <LCD_GetSwapXYEx>
 800a992:	61a5      	str	r5, [r4, #24]
 800a994:	61e6      	str	r6, [r4, #28]
 800a996:	b108      	cbz	r0, 800a99c <_SetVSize+0x22>
 800a998:	6226      	str	r6, [r4, #32]
 800a99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99c:	6225      	str	r5, [r4, #32]
 800a99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9a0 <_GetDevData>:
 800a9a0:	2901      	cmp	r1, #1
 800a9a2:	4802      	ldr	r0, [pc, #8]	; (800a9ac <_GetDevData+0xc>)
 800a9a4:	bf18      	it	ne
 800a9a6:	2000      	movne	r0, #0
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	0800d874 	.word	0x0800d874

0800a9b0 <_GetDevFunc>:
 800a9b0:	2916      	cmp	r1, #22
 800a9b2:	4802      	ldr	r0, [pc, #8]	; (800a9bc <_GetDevFunc+0xc>)
 800a9b4:	bf18      	it	ne
 800a9b6:	2000      	movne	r0, #0
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	0800b3e9 	.word	0x0800b3e9

0800a9c0 <_GetDevProp>:
 800a9c0:	2908      	cmp	r1, #8
 800a9c2:	bf0c      	ite	eq
 800a9c4:	2020      	moveq	r0, #32
 800a9c6:	2000      	movne	r0, #0
 800a9c8:	4770      	bx	lr

0800a9ca <_SetOrg>:
 800a9ca:	6800      	ldr	r0, [r0, #0]
 800a9cc:	68c3      	ldr	r3, [r0, #12]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	4718      	bx	r3

0800a9d2 <_GetRect>:
 800a9d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9d4:	6880      	ldr	r0, [r0, #8]
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	f7fd fd5a 	bl	8008490 <GUI_ALLOC_LockH>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	a802      	add	r0, sp, #8
 800a9e0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800a9e4:	8914      	ldrh	r4, [r2, #8]
 800a9e6:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800a9ea:	802b      	strh	r3, [r5, #0]
 800a9ec:	441c      	add	r4, r3
 800a9ee:	8953      	ldrh	r3, [r2, #10]
 800a9f0:	f840 2d04 	str.w	r2, [r0, #-4]!
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	3c01      	subs	r4, #1
 800a9fa:	8069      	strh	r1, [r5, #2]
 800a9fc:	80ac      	strh	r4, [r5, #4]
 800a9fe:	80eb      	strh	r3, [r5, #6]
 800aa00:	f7fd fd54 	bl	80084ac <GUI_ALLOC_UnlockH>
 800aa04:	b003      	add	sp, #12
 800aa06:	bd30      	pop	{r4, r5, pc}

0800aa08 <_XY2PTR>:
 800aa08:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <_XY2PTR+0x3c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa0e:	4606      	mov	r6, r0
 800aa10:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800aa12:	460d      	mov	r5, r1
 800aa14:	f7fd fd3c 	bl	8008490 <GUI_ALLOC_LockH>
 800aa18:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800aa1c:	68c4      	ldr	r4, [r0, #12]
 800aa1e:	1a69      	subs	r1, r5, r1
 800aa20:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800aa24:	ab02      	add	r3, sp, #8
 800aa26:	1b76      	subs	r6, r6, r5
 800aa28:	00b6      	lsls	r6, r6, #2
 800aa2a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800aa2e:	3618      	adds	r6, #24
 800aa30:	fb04 6501 	mla	r5, r4, r1, r6
 800aa34:	1944      	adds	r4, r0, r5
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fd fd38 	bl	80084ac <GUI_ALLOC_UnlockH>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	b002      	add	sp, #8
 800aa40:	bd70      	pop	{r4, r5, r6, pc}
 800aa42:	bf00      	nop
 800aa44:	20000014 	.word	0x20000014

0800aa48 <_GetPixelIndex>:
 800aa48:	b508      	push	{r3, lr}
 800aa4a:	4608      	mov	r0, r1
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	f7ff ffdb 	bl	800aa08 <_XY2PTR>
 800aa52:	6800      	ldr	r0, [r0, #0]
 800aa54:	bd08      	pop	{r3, pc}
	...

0800aa58 <_XorPixel>:
 800aa58:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <_XorPixel+0x58>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa5e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800aa60:	4616      	mov	r6, r2
 800aa62:	460d      	mov	r5, r1
 800aa64:	f7fd fd14 	bl	8008490 <GUI_ALLOC_LockH>
 800aa68:	4631      	mov	r1, r6
 800aa6a:	9000      	str	r0, [sp, #0]
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f7ff ffcb 	bl	800aa08 <_XY2PTR>
 800aa72:	9b00      	ldr	r3, [sp, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	4604      	mov	r4, r0
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	4798      	blx	r3
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	4058      	eors	r0, r3
 800aa82:	9b00      	ldr	r3, [sp, #0]
 800aa84:	6020      	str	r0, [r4, #0]
 800aa86:	6958      	ldr	r0, [r3, #20]
 800aa88:	b160      	cbz	r0, 800aaa4 <_XorPixel+0x4c>
 800aa8a:	f7fd fd01 	bl	8008490 <GUI_ALLOC_LockH>
 800aa8e:	ac02      	add	r4, sp, #8
 800aa90:	6883      	ldr	r3, [r0, #8]
 800aa92:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4632      	mov	r2, r6
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4798      	blx	r3
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7fd fd04 	bl	80084ac <GUI_ALLOC_UnlockH>
 800aaa4:	4668      	mov	r0, sp
 800aaa6:	f7fd fd01 	bl	80084ac <GUI_ALLOC_UnlockH>
 800aaaa:	b002      	add	sp, #8
 800aaac:	bd70      	pop	{r4, r5, r6, pc}
 800aaae:	bf00      	nop
 800aab0:	20000014 	.word	0x20000014

0800aab4 <_SetPixelIndex>:
 800aab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aab6:	461c      	mov	r4, r3
 800aab8:	4b10      	ldr	r3, [pc, #64]	; (800aafc <_SetPixelIndex+0x48>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800aabe:	460d      	mov	r5, r1
 800aac0:	4616      	mov	r6, r2
 800aac2:	f7fd fce5 	bl	8008490 <GUI_ALLOC_LockH>
 800aac6:	4631      	mov	r1, r6
 800aac8:	9000      	str	r0, [sp, #0]
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7ff ff9c 	bl	800aa08 <_XY2PTR>
 800aad0:	9b00      	ldr	r3, [sp, #0]
 800aad2:	6004      	str	r4, [r0, #0]
 800aad4:	6958      	ldr	r0, [r3, #20]
 800aad6:	b160      	cbz	r0, 800aaf2 <_SetPixelIndex+0x3e>
 800aad8:	f7fd fcda 	bl	8008490 <GUI_ALLOC_LockH>
 800aadc:	ac02      	add	r4, sp, #8
 800aade:	6883      	ldr	r3, [r0, #8]
 800aae0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4632      	mov	r2, r6
 800aae8:	4629      	mov	r1, r5
 800aaea:	4798      	blx	r3
 800aaec:	4620      	mov	r0, r4
 800aaee:	f7fd fcdd 	bl	80084ac <GUI_ALLOC_UnlockH>
 800aaf2:	4668      	mov	r0, sp
 800aaf4:	f7fd fcda 	bl	80084ac <GUI_ALLOC_UnlockH>
 800aaf8:	b002      	add	sp, #8
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	20000014 	.word	0x20000014

0800ab00 <_DrawVLine>:
 800ab00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	4c2a      	ldr	r4, [pc, #168]	; (800abb0 <_DrawVLine+0xb0>)
 800ab06:	461e      	mov	r6, r3
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ab0c:	4688      	mov	r8, r1
 800ab0e:	4615      	mov	r5, r2
 800ab10:	f7fd fcbe 	bl	8008490 <GUI_ALLOC_LockH>
 800ab14:	9000      	str	r0, [sp, #0]
 800ab16:	6940      	ldr	r0, [r0, #20]
 800ab18:	4627      	mov	r7, r4
 800ab1a:	b108      	cbz	r0, 800ab20 <_DrawVLine+0x20>
 800ab1c:	f7fd fcb8 	bl	8008490 <GUI_ALLOC_LockH>
 800ab20:	9001      	str	r0, [sp, #4]
 800ab22:	4629      	mov	r1, r5
 800ab24:	4640      	mov	r0, r8
 800ab26:	f7ff ff6f 	bl	800aa08 <_XY2PTR>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	9a00      	ldr	r2, [sp, #0]
 800ab2e:	7c19      	ldrb	r1, [r3, #16]
 800ab30:	07c9      	lsls	r1, r1, #31
 800ab32:	4604      	mov	r4, r0
 800ab34:	d51d      	bpl.n	800ab72 <_DrawVLine+0x72>
 800ab36:	6813      	ldr	r3, [r2, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	4798      	blx	r3
 800ab3e:	4607      	mov	r7, r0
 800ab40:	9801      	ldr	r0, [sp, #4]
 800ab42:	b120      	cbz	r0, 800ab4e <_DrawVLine+0x4e>
 800ab44:	6883      	ldr	r3, [r0, #8]
 800ab46:	462a      	mov	r2, r5
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4641      	mov	r1, r8
 800ab4c:	4798      	blx	r3
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	407b      	eors	r3, r7
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	9b00      	ldr	r3, [sp, #0]
 800ab56:	3501      	adds	r5, #1
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	42b5      	cmp	r5, r6
 800ab5c:	441c      	add	r4, r3
 800ab5e:	ddef      	ble.n	800ab40 <_DrawVLine+0x40>
 800ab60:	4668      	mov	r0, sp
 800ab62:	f7fd fca3 	bl	80084ac <GUI_ALLOC_UnlockH>
 800ab66:	9b01      	ldr	r3, [sp, #4]
 800ab68:	b1f3      	cbz	r3, 800aba8 <_DrawVLine+0xa8>
 800ab6a:	a801      	add	r0, sp, #4
 800ab6c:	f7fd fc9e 	bl	80084ac <GUI_ALLOC_UnlockH>
 800ab70:	e01a      	b.n	800aba8 <_DrawVLine+0xa8>
 800ab72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab74:	68d7      	ldr	r7, [r2, #12]
 800ab76:	f8d3 9000 	ldr.w	r9, [r3]
 800ab7a:	9b01      	ldr	r3, [sp, #4]
 800ab7c:	b163      	cbz	r3, 800ab98 <_DrawVLine+0x98>
 800ab7e:	9801      	ldr	r0, [sp, #4]
 800ab80:	6883      	ldr	r3, [r0, #8]
 800ab82:	462a      	mov	r2, r5
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4641      	mov	r1, r8
 800ab88:	3501      	adds	r5, #1
 800ab8a:	4798      	blx	r3
 800ab8c:	42ae      	cmp	r6, r5
 800ab8e:	f8c4 9000 	str.w	r9, [r4]
 800ab92:	443c      	add	r4, r7
 800ab94:	daf3      	bge.n	800ab7e <_DrawVLine+0x7e>
 800ab96:	e7e3      	b.n	800ab60 <_DrawVLine+0x60>
 800ab98:	1b75      	subs	r5, r6, r5
 800ab9a:	3501      	adds	r5, #1
 800ab9c:	3d01      	subs	r5, #1
 800ab9e:	f8c4 9000 	str.w	r9, [r4]
 800aba2:	443c      	add	r4, r7
 800aba4:	d1fa      	bne.n	800ab9c <_DrawVLine+0x9c>
 800aba6:	e7db      	b.n	800ab60 <_DrawVLine+0x60>
 800aba8:	b003      	add	sp, #12
 800abaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abae:	bf00      	nop
 800abb0:	20000014 	.word	0x20000014

0800abb4 <_FillRect>:
 800abb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb8:	4e2a      	ldr	r6, [pc, #168]	; (800ac64 <_FillRect+0xb0>)
 800abba:	461c      	mov	r4, r3
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	b085      	sub	sp, #20
 800abc0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800abc2:	4689      	mov	r9, r1
 800abc4:	4615      	mov	r5, r2
 800abc6:	f7fd fc63 	bl	8008490 <GUI_ALLOC_LockH>
 800abca:	4629      	mov	r1, r5
 800abcc:	9002      	str	r0, [sp, #8]
 800abce:	4648      	mov	r0, r9
 800abd0:	f7ff ff1a 	bl	800aa08 <_XY2PTR>
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	6832      	ldr	r2, [r6, #0]
 800abd8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800abdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abde:	4607      	mov	r7, r0
 800abe0:	6958      	ldr	r0, [r3, #20]
 800abe2:	f8d2 b000 	ldr.w	fp, [r2]
 800abe6:	ebc9 0404 	rsb	r4, r9, r4
 800abea:	3401      	adds	r4, #1
 800abec:	b330      	cbz	r0, 800ac3c <_FillRect+0x88>
 800abee:	f7fd fc4f 	bl	8008490 <GUI_ALLOC_LockH>
 800abf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf4:	f10d 0810 	add.w	r8, sp, #16
 800abf8:	1b5b      	subs	r3, r3, r5
 800abfa:	f848 0d04 	str.w	r0, [r8, #-4]!
 800abfe:	3301      	adds	r3, #1
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	462a      	mov	r2, r5
 800ac04:	4623      	mov	r3, r4
 800ac06:	4649      	mov	r1, r9
 800ac08:	f000 fbdb 	bl	800b3c2 <GUI_USAGE_AddRect>
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	f7fd fc4d 	bl	80084ac <GUI_ALLOC_UnlockH>
 800ac12:	e013      	b.n	800ac3c <_FillRect+0x88>
 800ac14:	6833      	ldr	r3, [r6, #0]
 800ac16:	7c1b      	ldrb	r3, [r3, #16]
 800ac18:	07db      	lsls	r3, r3, #31
 800ac1a:	d513      	bpl.n	800ac44 <_FillRect+0x90>
 800ac1c:	9b02      	ldr	r3, [sp, #8]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	4798      	blx	r3
 800ac26:	463a      	mov	r2, r7
 800ac28:	4623      	mov	r3, r4
 800ac2a:	6811      	ldr	r1, [r2, #0]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	ea81 0100 	eor.w	r1, r1, r0
 800ac32:	f842 1b04 	str.w	r1, [r2], #4
 800ac36:	d1f8      	bne.n	800ac2a <_FillRect+0x76>
 800ac38:	4457      	add	r7, sl
 800ac3a:	3501      	adds	r5, #1
 800ac3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	dde8      	ble.n	800ac14 <_FillRect+0x60>
 800ac42:	e008      	b.n	800ac56 <_FillRect+0xa2>
 800ac44:	2c00      	cmp	r4, #0
 800ac46:	ddf7      	ble.n	800ac38 <_FillRect+0x84>
 800ac48:	4623      	mov	r3, r4
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	f842 bb04 	str.w	fp, [r2], #4
 800ac52:	d1fb      	bne.n	800ac4c <_FillRect+0x98>
 800ac54:	e7f0      	b.n	800ac38 <_FillRect+0x84>
 800ac56:	a802      	add	r0, sp, #8
 800ac58:	f7fd fc28 	bl	80084ac <GUI_ALLOC_UnlockH>
 800ac5c:	b005      	add	sp, #20
 800ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac62:	bf00      	nop
 800ac64:	20000014 	.word	0x20000014

0800ac68 <_DrawHLine>:
 800ac68:	b507      	push	{r0, r1, r2, lr}
 800ac6a:	9200      	str	r2, [sp, #0]
 800ac6c:	f7ff ffa2 	bl	800abb4 <_FillRect>
 800ac70:	b003      	add	sp, #12
 800ac72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ac78 <_DrawBitmap>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	4da8      	ldr	r5, [pc, #672]	; (800af20 <_DrawBitmap+0x2a8>)
 800ac7e:	b091      	sub	sp, #68	; 0x44
 800ac80:	460e      	mov	r6, r1
 800ac82:	9302      	str	r3, [sp, #8]
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	9005      	str	r0, [sp, #20]
 800ac88:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ac8a:	9206      	str	r2, [sp, #24]
 800ac8c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800ac8e:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800ac92:	2800      	cmp	r0, #0
 800ac94:	f000 8379 	beq.w	800b38a <_DrawBitmap+0x712>
 800ac98:	f7fd fbfa 	bl	8008490 <GUI_ALLOC_LockH>
 800ac9c:	900e      	str	r0, [sp, #56]	; 0x38
 800ac9e:	6940      	ldr	r0, [r0, #20]
 800aca0:	b108      	cbz	r0, 800aca6 <_DrawBitmap+0x2e>
 800aca2:	f7fd fbf5 	bl	8008490 <GUI_ALLOC_LockH>
 800aca6:	900f      	str	r0, [sp, #60]	; 0x3c
 800aca8:	a810      	add	r0, sp, #64	; 0x40
 800acaa:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	9308      	str	r3, [sp, #32]
 800acb2:	f7fd fbfb 	bl	80084ac <GUI_ALLOC_UnlockH>
 800acb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800acb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800acba:	18f3      	adds	r3, r6, r3
 800acbc:	9303      	str	r3, [sp, #12]
 800acbe:	b150      	cbz	r0, 800acd6 <_DrawBitmap+0x5e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	7c1b      	ldrb	r3, [r3, #16]
 800acc4:	079d      	lsls	r5, r3, #30
 800acc6:	d406      	bmi.n	800acd6 <_DrawBitmap+0x5e>
 800acc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	9a06      	ldr	r2, [sp, #24]
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	9903      	ldr	r1, [sp, #12]
 800acd2:	f000 fb76 	bl	800b3c2 <GUI_USAGE_AddRect>
 800acd6:	9906      	ldr	r1, [sp, #24]
 800acd8:	9803      	ldr	r0, [sp, #12]
 800acda:	f7ff fe95 	bl	800aa08 <_XY2PTR>
 800acde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ace0:	2b17      	cmp	r3, #23
 800ace2:	4605      	mov	r5, r0
 800ace4:	dd68      	ble.n	800adb8 <_DrawBitmap+0x140>
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800af28 <_DrawBitmap+0x2b0>
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	9307      	str	r3, [sp, #28]
 800acf0:	f04f 0b00 	mov.w	fp, #0
 800acf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800acf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800acf8:	459b      	cmp	fp, r3
 800acfa:	da59      	bge.n	800adb0 <_DrawBitmap+0x138>
 800acfc:	b130      	cbz	r0, 800ad0c <_DrawBitmap+0x94>
 800acfe:	6883      	ldr	r3, [r0, #8]
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	685e      	ldr	r6, [r3, #4]
 800ad04:	9903      	ldr	r1, [sp, #12]
 800ad06:	9b02      	ldr	r3, [sp, #8]
 800ad08:	445a      	add	r2, fp
 800ad0a:	47b0      	blx	r6
 800ad0c:	9b05      	ldr	r3, [sp, #20]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	68d8      	ldr	r0, [r3, #12]
 800ad12:	b130      	cbz	r0, 800ad22 <_DrawBitmap+0xaa>
 800ad14:	f8d9 3000 	ldr.w	r3, [r9]
 800ad18:	9a07      	ldr	r2, [sp, #28]
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	4798      	blx	r3
 800ad20:	e03f      	b.n	800ada2 <_DrawBitmap+0x12a>
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4798      	blx	r3
 800ad26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ad2a:	0e03      	lsrs	r3, r0, #24
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	462f      	mov	r7, r5
 800ad30:	4626      	mov	r6, r4
 800ad32:	4642      	mov	r2, r8
 800ad34:	4631      	mov	r1, r6
 800ad36:	f04f 0a00 	mov.w	sl, #0
 800ad3a:	f851 3b04 	ldr.w	r3, [r1], #4
 800ad3e:	9804      	ldr	r0, [sp, #16]
 800ad40:	0e1b      	lsrs	r3, r3, #24
 800ad42:	4298      	cmp	r0, r3
 800ad44:	9804      	ldr	r0, [sp, #16]
 800ad46:	bf08      	it	eq
 800ad48:	f10a 0a01 	addeq.w	sl, sl, #1
 800ad4c:	4298      	cmp	r0, r3
 800ad4e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ad52:	d011      	beq.n	800ad78 <_DrawBitmap+0x100>
 800ad54:	f1ba 0f00 	cmp.w	sl, #0
 800ad58:	d011      	beq.n	800ad7e <_DrawBitmap+0x106>
 800ad5a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800ad5e:	461a      	mov	r2, r3
 800ad60:	9309      	str	r3, [sp, #36]	; 0x24
 800ad62:	4631      	mov	r1, r6
 800ad64:	4638      	mov	r0, r7
 800ad66:	f8d9 3000 	ldr.w	r3, [r9]
 800ad6a:	4798      	blx	r3
 800ad6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6e:	ebca 0808 	rsb	r8, sl, r8
 800ad72:	441f      	add	r7, r3
 800ad74:	441e      	add	r6, r3
 800ad76:	e011      	b.n	800ad9c <_DrawBitmap+0x124>
 800ad78:	2a00      	cmp	r2, #0
 800ad7a:	d1de      	bne.n	800ad3a <_DrawBitmap+0xc2>
 800ad7c:	e7ea      	b.n	800ad54 <_DrawBitmap+0xdc>
 800ad7e:	6830      	ldr	r0, [r6, #0]
 800ad80:	0e02      	lsrs	r2, r0, #24
 800ad82:	2aff      	cmp	r2, #255	; 0xff
 800ad84:	d006      	beq.n	800ad94 <_DrawBitmap+0x11c>
 800ad86:	4b67      	ldr	r3, [pc, #412]	; (800af24 <_DrawBitmap+0x2ac>)
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	43d2      	mvns	r2, r2
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	4798      	blx	r3
 800ad92:	6038      	str	r0, [r7, #0]
 800ad94:	3704      	adds	r7, #4
 800ad96:	3604      	adds	r6, #4
 800ad98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ad9c:	f1b8 0f00 	cmp.w	r8, #0
 800ada0:	d1c7      	bne.n	800ad32 <_DrawBitmap+0xba>
 800ada2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ada4:	441c      	add	r4, r3
 800ada6:	9b08      	ldr	r3, [sp, #32]
 800ada8:	f10b 0b01 	add.w	fp, fp, #1
 800adac:	441d      	add	r5, r3
 800adae:	e7a1      	b.n	800acf4 <_DrawBitmap+0x7c>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	f040 82e7 	bne.w	800b384 <_DrawBitmap+0x70c>
 800adb6:	e2e8      	b.n	800b38a <_DrawBitmap+0x712>
 800adb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adba:	2b10      	cmp	r3, #16
 800adbc:	d137      	bne.n	800ae2e <_DrawBitmap+0x1b6>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	9a03      	ldr	r2, [sp, #12]
 800adc2:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 800adc6:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	f04f 0800 	mov.w	r8, #0
 800add0:	eb03 0a02 	add.w	sl, r3, r2
 800add4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800add6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800add8:	4598      	cmp	r8, r3
 800adda:	da24      	bge.n	800ae26 <_DrawBitmap+0x1ae>
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	eb03 0908 	add.w	r9, r3, r8
 800ade2:	b136      	cbz	r6, 800adf2 <_DrawBitmap+0x17a>
 800ade4:	68b3      	ldr	r3, [r6, #8]
 800ade6:	9903      	ldr	r1, [sp, #12]
 800ade8:	685f      	ldr	r7, [r3, #4]
 800adea:	9b02      	ldr	r3, [sp, #8]
 800adec:	464a      	mov	r2, r9
 800adee:	4630      	mov	r0, r6
 800adf0:	47b8      	blx	r7
 800adf2:	9f03      	ldr	r7, [sp, #12]
 800adf4:	9b05      	ldr	r3, [sp, #20]
 800adf6:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4798      	blx	r3
 800ae00:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 800ae04:	b12e      	cbz	r6, 800ae12 <_DrawBitmap+0x19a>
 800ae06:	68b3      	ldr	r3, [r6, #8]
 800ae08:	464a      	mov	r2, r9
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	4630      	mov	r0, r6
 800ae10:	4798      	blx	r3
 800ae12:	3701      	adds	r7, #1
 800ae14:	4557      	cmp	r7, sl
 800ae16:	d1ed      	bne.n	800adf4 <_DrawBitmap+0x17c>
 800ae18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae1a:	441c      	add	r4, r3
 800ae1c:	9b08      	ldr	r3, [sp, #32]
 800ae1e:	f108 0801 	add.w	r8, r8, #1
 800ae22:	441d      	add	r5, r3
 800ae24:	e7d6      	b.n	800add4 <_DrawBitmap+0x15c>
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	f040 82ac 	bne.w	800b384 <_DrawBitmap+0x70c>
 800ae2c:	e2ad      	b.n	800b38a <_DrawBitmap+0x712>
 800ae2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	f040 8081 	bne.w	800af38 <_DrawBitmap+0x2c0>
 800ae36:	9a03      	ldr	r2, [sp, #12]
 800ae38:	9e06      	ldr	r6, [sp, #24]
 800ae3a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800af20 <_DrawBitmap+0x2a8>
 800ae3e:	f06f 0303 	mvn.w	r3, #3
 800ae42:	4353      	muls	r3, r2
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	9b02      	ldr	r3, [sp, #8]
 800ae48:	4413      	add	r3, r2
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	9b06      	ldr	r3, [sp, #24]
 800ae4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae50:	1af3      	subs	r3, r6, r3
 800ae52:	429a      	cmp	r2, r3
 800ae54:	f340 8294 	ble.w	800b380 <_DrawBitmap+0x708>
 800ae58:	f8d9 3000 	ldr.w	r3, [r9]
 800ae5c:	7c1b      	ldrb	r3, [r3, #16]
 800ae5e:	f1bb 0f00 	cmp.w	fp, #0
 800ae62:	d032      	beq.n	800aeca <_DrawBitmap+0x252>
 800ae64:	f013 0303 	ands.w	r3, r3, #3
 800ae68:	d00a      	beq.n	800ae80 <_DrawBitmap+0x208>
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d15e      	bne.n	800af2c <_DrawBitmap+0x2b4>
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800ae74:	9f03      	ldr	r7, [sp, #12]
 800ae76:	18eb      	adds	r3, r5, r3
 800ae78:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800ae7c:	9307      	str	r3, [sp, #28]
 800ae7e:	e01f      	b.n	800aec0 <_DrawBitmap+0x248>
 800ae80:	9a02      	ldr	r2, [sp, #8]
 800ae82:	4623      	mov	r3, r4
 800ae84:	18a1      	adds	r1, r4, r2
 800ae86:	462a      	mov	r2, r5
 800ae88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae8c:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800ae90:	f842 0b04 	str.w	r0, [r2], #4
 800ae94:	428b      	cmp	r3, r1
 800ae96:	d1f7      	bne.n	800ae88 <_DrawBitmap+0x210>
 800ae98:	e048      	b.n	800af2c <_DrawBitmap+0x2b4>
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800aea0:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800aea4:	f1b8 0f00 	cmp.w	r8, #0
 800aea8:	d006      	beq.n	800aeb8 <_DrawBitmap+0x240>
 800aeaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeae:	4632      	mov	r2, r6
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	4798      	blx	r3
 800aeb8:	9b05      	ldr	r3, [sp, #20]
 800aeba:	3701      	adds	r7, #1
 800aebc:	42bb      	cmp	r3, r7
 800aebe:	d035      	beq.n	800af2c <_DrawBitmap+0x2b4>
 800aec0:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0f7      	beq.n	800aeb8 <_DrawBitmap+0x240>
 800aec8:	e7e7      	b.n	800ae9a <_DrawBitmap+0x222>
 800aeca:	f013 0303 	ands.w	r3, r3, #3
 800aece:	d00a      	beq.n	800aee6 <_DrawBitmap+0x26e>
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d12b      	bne.n	800af2c <_DrawBitmap+0x2b4>
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800aeda:	9f03      	ldr	r7, [sp, #12]
 800aedc:	18eb      	adds	r3, r5, r3
 800aede:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800aee2:	9307      	str	r3, [sp, #28]
 800aee4:	e017      	b.n	800af16 <_DrawBitmap+0x29e>
 800aee6:	4b10      	ldr	r3, [pc, #64]	; (800af28 <_DrawBitmap+0x2b0>)
 800aee8:	9a02      	ldr	r2, [sp, #8]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4621      	mov	r1, r4
 800aeee:	4628      	mov	r0, r5
 800aef0:	4798      	blx	r3
 800aef2:	e01b      	b.n	800af2c <_DrawBitmap+0x2b4>
 800aef4:	9a07      	ldr	r2, [sp, #28]
 800aef6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800aefa:	f1b8 0f00 	cmp.w	r8, #0
 800aefe:	d006      	beq.n	800af0e <_DrawBitmap+0x296>
 800af00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af04:	4632      	mov	r2, r6
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4639      	mov	r1, r7
 800af0a:	4640      	mov	r0, r8
 800af0c:	4798      	blx	r3
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	3701      	adds	r7, #1
 800af12:	42bb      	cmp	r3, r7
 800af14:	d00a      	beq.n	800af2c <_DrawBitmap+0x2b4>
 800af16:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d0f7      	beq.n	800af0e <_DrawBitmap+0x296>
 800af1e:	e7e9      	b.n	800aef4 <_DrawBitmap+0x27c>
 800af20:	20000014 	.word	0x20000014
 800af24:	20000048 	.word	0x20000048
 800af28:	20000020 	.word	0x20000020
 800af2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800af2e:	441c      	add	r4, r3
 800af30:	9b08      	ldr	r3, [sp, #32]
 800af32:	3601      	adds	r6, #1
 800af34:	441d      	add	r5, r3
 800af36:	e789      	b.n	800ae4c <_DrawBitmap+0x1d4>
 800af38:	4bb0      	ldr	r3, [pc, #704]	; (800b1fc <_DrawBitmap+0x584>)
 800af3a:	f1bb 0f00 	cmp.w	fp, #0
 800af3e:	bf08      	it	eq
 800af40:	469b      	moveq	fp, r3
 800af42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	930a      	str	r3, [sp, #40]	; 0x28
 800af48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800af4e:	1c63      	adds	r3, r4, #1
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	1d03      	adds	r3, r0, #4
 800af54:	9307      	str	r3, [sp, #28]
 800af56:	9b06      	ldr	r3, [sp, #24]
 800af58:	9305      	str	r3, [sp, #20]
 800af5a:	9b07      	ldr	r3, [sp, #28]
 800af5c:	9a06      	ldr	r2, [sp, #24]
 800af5e:	1f1c      	subs	r4, r3, #4
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	1a9b      	subs	r3, r3, r2
 800af6a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af6c:	429a      	cmp	r2, r3
 800af6e:	f340 8207 	ble.w	800b380 <_DrawBitmap+0x708>
 800af72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af74:	2b02      	cmp	r3, #2
 800af76:	f000 8098 	beq.w	800b0aa <_DrawBitmap+0x432>
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	f000 812b 	beq.w	800b1d6 <_DrawBitmap+0x55e>
 800af80:	2b01      	cmp	r3, #1
 800af82:	f040 81f1 	bne.w	800b368 <_DrawBitmap+0x6f0>
 800af86:	4b9e      	ldr	r3, [pc, #632]	; (800b200 <_DrawBitmap+0x588>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800af8c:	f7fd fa80 	bl	8008490 <GUI_ALLOC_LockH>
 800af90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af92:	4a9c      	ldr	r2, [pc, #624]	; (800b204 <_DrawBitmap+0x58c>)
 800af94:	900e      	str	r0, [sp, #56]	; 0x38
 800af96:	f1c3 0508 	rsb	r5, r3, #8
 800af9a:	9b04      	ldr	r3, [sp, #16]
 800af9c:	9f02      	ldr	r7, [sp, #8]
 800af9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800afa2:	5cd6      	ldrb	r6, [r2, r3]
 800afa4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afa6:	411e      	asrs	r6, r3
 800afa8:	4b95      	ldr	r3, [pc, #596]	; (800b200 <_DrawBitmap+0x588>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	7c1b      	ldrb	r3, [r3, #16]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d01d      	beq.n	800aff2 <_DrawBitmap+0x37a>
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d055      	beq.n	800b066 <_DrawBitmap+0x3ee>
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d053      	beq.n	800b066 <_DrawBitmap+0x3ee>
 800afbe:	42bd      	cmp	r5, r7
 800afc0:	bf28      	it	cs
 800afc2:	463d      	movcs	r5, r7
 800afc4:	1b7f      	subs	r7, r7, r5
 800afc6:	462b      	mov	r3, r5
 800afc8:	4622      	mov	r2, r4
 800afca:	f006 0101 	and.w	r1, r6, #1
 800afce:	3b01      	subs	r3, #1
 800afd0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800afd4:	f842 1b04 	str.w	r1, [r2], #4
 800afd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800afdc:	d1f5      	bne.n	800afca <_DrawBitmap+0x352>
 800afde:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	d05d      	beq.n	800b0a2 <_DrawBitmap+0x42a>
 800afe6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800afea:	4a86      	ldr	r2, [pc, #536]	; (800b204 <_DrawBitmap+0x58c>)
 800afec:	2508      	movs	r5, #8
 800afee:	5cd6      	ldrb	r6, [r2, r3]
 800aff0:	e7e5      	b.n	800afbe <_DrawBitmap+0x346>
 800aff2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800aff6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800affa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800affe:	9309      	str	r3, [sp, #36]	; 0x24
 800b000:	42bd      	cmp	r5, r7
 800b002:	bf28      	it	cs
 800b004:	463d      	movcs	r5, r7
 800b006:	1b7f      	subs	r7, r7, r5
 800b008:	f1b9 0f00 	cmp.w	r9, #0
 800b00c:	d020      	beq.n	800b050 <_DrawBitmap+0x3d8>
 800b00e:	b91e      	cbnz	r6, 800b018 <_DrawBitmap+0x3a0>
 800b010:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b014:	44a8      	add	r8, r5
 800b016:	e01f      	b.n	800b058 <_DrawBitmap+0x3e0>
 800b018:	07f0      	lsls	r0, r6, #31
 800b01a:	d508      	bpl.n	800b02e <_DrawBitmap+0x3b6>
 800b01c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b020:	9a05      	ldr	r2, [sp, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4641      	mov	r1, r8
 800b026:	4648      	mov	r0, r9
 800b028:	4798      	blx	r3
 800b02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	3d01      	subs	r5, #1
 800b030:	f108 0801 	add.w	r8, r8, #1
 800b034:	f104 0404 	add.w	r4, r4, #4
 800b038:	d00e      	beq.n	800b058 <_DrawBitmap+0x3e0>
 800b03a:	0876      	lsrs	r6, r6, #1
 800b03c:	e7e7      	b.n	800b00e <_DrawBitmap+0x396>
 800b03e:	07f1      	lsls	r1, r6, #31
 800b040:	bf44      	itt	mi
 800b042:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 800b044:	6023      	strmi	r3, [r4, #0]
 800b046:	3d01      	subs	r5, #1
 800b048:	f104 0404 	add.w	r4, r4, #4
 800b04c:	d004      	beq.n	800b058 <_DrawBitmap+0x3e0>
 800b04e:	0876      	lsrs	r6, r6, #1
 800b050:	2e00      	cmp	r6, #0
 800b052:	d1f4      	bne.n	800b03e <_DrawBitmap+0x3c6>
 800b054:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b058:	b31f      	cbz	r7, 800b0a2 <_DrawBitmap+0x42a>
 800b05a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800b05e:	4a69      	ldr	r2, [pc, #420]	; (800b204 <_DrawBitmap+0x58c>)
 800b060:	2508      	movs	r5, #8
 800b062:	5cd6      	ldrb	r6, [r2, r3]
 800b064:	e7cc      	b.n	800b000 <_DrawBitmap+0x388>
 800b066:	6803      	ldr	r3, [r0, #0]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	4798      	blx	r3
 800b06e:	42bd      	cmp	r5, r7
 800b070:	bf28      	it	cs
 800b072:	463d      	movcs	r5, r7
 800b074:	1b7f      	subs	r7, r7, r5
 800b076:	4629      	mov	r1, r5
 800b078:	4623      	mov	r3, r4
 800b07a:	07f2      	lsls	r2, r6, #31
 800b07c:	bf42      	ittt	mi
 800b07e:	681a      	ldrmi	r2, [r3, #0]
 800b080:	4042      	eormi	r2, r0
 800b082:	601a      	strmi	r2, [r3, #0]
 800b084:	3901      	subs	r1, #1
 800b086:	f103 0304 	add.w	r3, r3, #4
 800b08a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b08e:	d1f4      	bne.n	800b07a <_DrawBitmap+0x402>
 800b090:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b094:	b12f      	cbz	r7, 800b0a2 <_DrawBitmap+0x42a>
 800b096:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800b09a:	4a5a      	ldr	r2, [pc, #360]	; (800b204 <_DrawBitmap+0x58c>)
 800b09c:	2508      	movs	r5, #8
 800b09e:	5cd6      	ldrb	r6, [r2, r3]
 800b0a0:	e7e5      	b.n	800b06e <_DrawBitmap+0x3f6>
 800b0a2:	a80e      	add	r0, sp, #56	; 0x38
 800b0a4:	f7fd fa02 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b0a8:	e15e      	b.n	800b368 <_DrawBitmap+0x6f0>
 800b0aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b0ac:	f1c3 0504 	rsb	r5, r3, #4
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800b0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b8:	409e      	lsls	r6, r3
 800b0ba:	4b51      	ldr	r3, [pc, #324]	; (800b200 <_DrawBitmap+0x588>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	7c1b      	ldrb	r3, [r3, #16]
 800b0c0:	f003 0303 	and.w	r3, r3, #3
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	b2ed      	uxtb	r5, r5
 800b0c8:	b2f6      	uxtb	r6, r6
 800b0ca:	d009      	beq.n	800b0e0 <_DrawBitmap+0x468>
 800b0cc:	d30a      	bcc.n	800b0e4 <_DrawBitmap+0x46c>
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	f040 814a 	bne.w	800b368 <_DrawBitmap+0x6f0>
 800b0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b0dc:	9f03      	ldr	r7, [sp, #12]
 800b0de:	e035      	b.n	800b14c <_DrawBitmap+0x4d4>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	e071      	b.n	800b1c8 <_DrawBitmap+0x550>
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	429d      	cmp	r5, r3
 800b0e8:	bfc8      	it	gt
 800b0ea:	b2dd      	uxtbgt	r5, r3
 800b0ec:	1b5b      	subs	r3, r3, r5
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	09b0      	lsrs	r0, r6, #6
 800b0f4:	3a01      	subs	r2, #1
 800b0f6:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800b0fa:	f841 0b04 	str.w	r0, [r1], #4
 800b0fe:	00b6      	lsls	r6, r6, #2
 800b100:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800b104:	b2f6      	uxtb	r6, r6
 800b106:	d1f4      	bne.n	800b0f2 <_DrawBitmap+0x47a>
 800b108:	3d01      	subs	r5, #1
 800b10a:	b2ed      	uxtb	r5, r5
 800b10c:	3501      	adds	r5, #1
 800b10e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 8128 	beq.w	800b368 <_DrawBitmap+0x6f0>
 800b118:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800b11c:	2504      	movs	r5, #4
 800b11e:	e7e2      	b.n	800b0e6 <_DrawBitmap+0x46e>
 800b120:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800b124:	d124      	bne.n	800b170 <_DrawBitmap+0x4f8>
 800b126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b128:	f109 0901 	add.w	r9, r9, #1
 800b12c:	00b6      	lsls	r6, r6, #2
 800b12e:	4599      	cmp	r9, r3
 800b130:	b2f6      	uxtb	r6, r6
 800b132:	d1f5      	bne.n	800b120 <_DrawBitmap+0x4a8>
 800b134:	1c6b      	adds	r3, r5, #1
 800b136:	3701      	adds	r7, #1
 800b138:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b13c:	442f      	add	r7, r5
 800b13e:	f1b8 0f00 	cmp.w	r8, #0
 800b142:	f000 8111 	beq.w	800b368 <_DrawBitmap+0x6f0>
 800b146:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800b14a:	2504      	movs	r5, #4
 800b14c:	4545      	cmp	r5, r8
 800b14e:	bfc8      	it	gt
 800b150:	fa5f f588 	uxtbgt.w	r5, r8
 800b154:	ebc5 0808 	rsb	r8, r5, r8
 800b158:	3d01      	subs	r5, #1
 800b15a:	b2ed      	uxtb	r5, r5
 800b15c:	1c7b      	adds	r3, r7, #1
 800b15e:	442b      	add	r3, r5
 800b160:	930d      	str	r3, [sp, #52]	; 0x34
 800b162:	f06f 0303 	mvn.w	r3, #3
 800b166:	fb03 4307 	mla	r3, r3, r7, r4
 800b16a:	930c      	str	r3, [sp, #48]	; 0x30
 800b16c:	46b9      	mov	r9, r7
 800b16e:	e7d7      	b.n	800b120 <_DrawBitmap+0x4a8>
 800b170:	09b3      	lsrs	r3, r6, #6
 800b172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b174:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b178:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 800b17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0d1      	beq.n	800b126 <_DrawBitmap+0x4ae>
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	9a05      	ldr	r2, [sp, #20]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	4649      	mov	r1, r9
 800b18c:	4798      	blx	r3
 800b18e:	e7ca      	b.n	800b126 <_DrawBitmap+0x4ae>
 800b190:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800b194:	bf18      	it	ne
 800b196:	6801      	ldrne	r1, [r0, #0]
 800b198:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b19c:	bf1c      	itt	ne
 800b19e:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 800b1a2:	6001      	strne	r1, [r0, #0]
 800b1a4:	00b6      	lsls	r6, r6, #2
 800b1a6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800b1aa:	f100 0004 	add.w	r0, r0, #4
 800b1ae:	b2f6      	uxtb	r6, r6
 800b1b0:	d1ee      	bne.n	800b190 <_DrawBitmap+0x518>
 800b1b2:	3d01      	subs	r5, #1
 800b1b4:	b2ed      	uxtb	r5, r5
 800b1b6:	3501      	adds	r5, #1
 800b1b8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 80d3 	beq.w	800b368 <_DrawBitmap+0x6f0>
 800b1c2:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800b1c6:	2504      	movs	r5, #4
 800b1c8:	429d      	cmp	r5, r3
 800b1ca:	bfc8      	it	gt
 800b1cc:	b2dd      	uxtbgt	r5, r3
 800b1ce:	1b5b      	subs	r3, r3, r5
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	e7dc      	b.n	800b190 <_DrawBitmap+0x518>
 800b1d6:	9b04      	ldr	r3, [sp, #16]
 800b1d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1de:	4093      	lsls	r3, r2
 800b1e0:	4a07      	ldr	r2, [pc, #28]	; (800b200 <_DrawBitmap+0x588>)
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	7c12      	ldrb	r2, [r2, #16]
 800b1e6:	f002 0203 	and.w	r2, r2, #3
 800b1ea:	2a01      	cmp	r2, #1
 800b1ec:	b2dd      	uxtb	r5, r3
 800b1ee:	f000 8095 	beq.w	800b31c <_DrawBitmap+0x6a4>
 800b1f2:	d309      	bcc.n	800b208 <_DrawBitmap+0x590>
 800b1f4:	2a02      	cmp	r2, #2
 800b1f6:	d039      	beq.n	800b26c <_DrawBitmap+0x5f4>
 800b1f8:	e0b6      	b.n	800b368 <_DrawBitmap+0x6f0>
 800b1fa:	bf00      	nop
 800b1fc:	0800d8a8 	.word	0x0800d8a8
 800b200:	20000014 	.word	0x20000014
 800b204:	0800d900 	.word	0x0800d900
 800b208:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b20a:	b153      	cbz	r3, 800b222 <_DrawBitmap+0x5aa>
 800b20c:	092d      	lsrs	r5, r5, #4
 800b20e:	9a04      	ldr	r2, [sp, #16]
 800b210:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	9b02      	ldr	r3, [sp, #8]
 800b218:	9c07      	ldr	r4, [sp, #28]
 800b21a:	7815      	ldrb	r5, [r2, #0]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	4692      	mov	sl, r2
 800b220:	e000      	b.n	800b224 <_DrawBitmap+0x5ac>
 800b222:	9b02      	ldr	r3, [sp, #8]
 800b224:	2b01      	cmp	r3, #1
 800b226:	dd19      	ble.n	800b25c <_DrawBitmap+0x5e4>
 800b228:	1058      	asrs	r0, r3, #1
 800b22a:	f104 0208 	add.w	r2, r4, #8
 800b22e:	f003 0301 	and.w	r3, r3, #1
 800b232:	eb0a 0600 	add.w	r6, sl, r0
 800b236:	0929      	lsrs	r1, r5, #4
 800b238:	f005 050f 	and.w	r5, r5, #15
 800b23c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800b240:	f842 1c08 	str.w	r1, [r2, #-8]
 800b244:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800b248:	f842 1c04 	str.w	r1, [r2, #-4]
 800b24c:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800b250:	45b2      	cmp	sl, r6
 800b252:	f102 0208 	add.w	r2, r2, #8
 800b256:	d1ee      	bne.n	800b236 <_DrawBitmap+0x5be>
 800b258:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8083 	beq.w	800b368 <_DrawBitmap+0x6f0>
 800b262:	092d      	lsrs	r5, r5, #4
 800b264:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	e07d      	b.n	800b368 <_DrawBitmap+0x6f0>
 800b26c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b26e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800b270:	b1ba      	cbz	r2, 800b2a2 <_DrawBitmap+0x62a>
 800b272:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800b276:	d00a      	beq.n	800b28e <_DrawBitmap+0x616>
 800b278:	092d      	lsrs	r5, r5, #4
 800b27a:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	b12e      	cbz	r6, 800b28e <_DrawBitmap+0x616>
 800b282:	68b3      	ldr	r3, [r6, #8]
 800b284:	9a05      	ldr	r2, [sp, #20]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	9903      	ldr	r1, [sp, #12]
 800b28a:	4630      	mov	r0, r6
 800b28c:	4798      	blx	r3
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	9c07      	ldr	r4, [sp, #28]
 800b292:	1c5f      	adds	r7, r3, #1
 800b294:	9b02      	ldr	r3, [sp, #8]
 800b296:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800b29a:	9b04      	ldr	r3, [sp, #16]
 800b29c:	781d      	ldrb	r5, [r3, #0]
 800b29e:	469a      	mov	sl, r3
 800b2a0:	e00f      	b.n	800b2c2 <_DrawBitmap+0x64a>
 800b2a2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b2a6:	9f03      	ldr	r7, [sp, #12]
 800b2a8:	e00b      	b.n	800b2c2 <_DrawBitmap+0x64a>
 800b2aa:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800b2ae:	d10c      	bne.n	800b2ca <_DrawBitmap+0x652>
 800b2b0:	f015 050f 	ands.w	r5, r5, #15
 800b2b4:	d116      	bne.n	800b2e4 <_DrawBitmap+0x66c>
 800b2b6:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800b2ba:	3408      	adds	r4, #8
 800b2bc:	3702      	adds	r7, #2
 800b2be:	f1a8 0802 	sub.w	r8, r8, #2
 800b2c2:	f1b8 0f01 	cmp.w	r8, #1
 800b2c6:	dcf0      	bgt.n	800b2aa <_DrawBitmap+0x632>
 800b2c8:	e018      	b.n	800b2fc <_DrawBitmap+0x684>
 800b2ca:	092b      	lsrs	r3, r5, #4
 800b2cc:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	d0ec      	beq.n	800b2b0 <_DrawBitmap+0x638>
 800b2d6:	68b3      	ldr	r3, [r6, #8]
 800b2d8:	9a05      	ldr	r2, [sp, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4639      	mov	r1, r7
 800b2de:	4630      	mov	r0, r6
 800b2e0:	4798      	blx	r3
 800b2e2:	e7e5      	b.n	800b2b0 <_DrawBitmap+0x638>
 800b2e4:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800b2e8:	6063      	str	r3, [r4, #4]
 800b2ea:	2e00      	cmp	r6, #0
 800b2ec:	d0e3      	beq.n	800b2b6 <_DrawBitmap+0x63e>
 800b2ee:	68b3      	ldr	r3, [r6, #8]
 800b2f0:	9a05      	ldr	r2, [sp, #20]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	1c79      	adds	r1, r7, #1
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	4798      	blx	r3
 800b2fa:	e7dc      	b.n	800b2b6 <_DrawBitmap+0x63e>
 800b2fc:	f1b8 0f00 	cmp.w	r8, #0
 800b300:	d032      	beq.n	800b368 <_DrawBitmap+0x6f0>
 800b302:	092d      	lsrs	r5, r5, #4
 800b304:	d030      	beq.n	800b368 <_DrawBitmap+0x6f0>
 800b306:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	b366      	cbz	r6, 800b368 <_DrawBitmap+0x6f0>
 800b30e:	68b3      	ldr	r3, [r6, #8]
 800b310:	9a05      	ldr	r2, [sp, #20]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4639      	mov	r1, r7
 800b316:	4630      	mov	r0, r6
 800b318:	4798      	blx	r3
 800b31a:	e025      	b.n	800b368 <_DrawBitmap+0x6f0>
 800b31c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b31e:	9a02      	ldr	r2, [sp, #8]
 800b320:	f1c3 0302 	rsb	r3, r3, #2
 800b324:	b2db      	uxtb	r3, r3
 800b326:	4293      	cmp	r3, r2
 800b328:	bfc8      	it	gt
 800b32a:	b2d3      	uxtbgt	r3, r2
 800b32c:	1ad2      	subs	r2, r2, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	4626      	mov	r6, r4
 800b332:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800b336:	bf18      	it	ne
 800b338:	6830      	ldrne	r0, [r6, #0]
 800b33a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800b33e:	bf1c      	itt	ne
 800b340:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 800b344:	6030      	strne	r0, [r6, #0]
 800b346:	012d      	lsls	r5, r5, #4
 800b348:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800b34c:	f106 0604 	add.w	r6, r6, #4
 800b350:	b2ed      	uxtb	r5, r5
 800b352:	d1ee      	bne.n	800b332 <_DrawBitmap+0x6ba>
 800b354:	3b01      	subs	r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	3301      	adds	r3, #1
 800b35a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b35e:	b11a      	cbz	r2, 800b368 <_DrawBitmap+0x6f0>
 800b360:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800b364:	2302      	movs	r3, #2
 800b366:	e7de      	b.n	800b326 <_DrawBitmap+0x6ae>
 800b368:	9b05      	ldr	r3, [sp, #20]
 800b36a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b36c:	3301      	adds	r3, #1
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	9b04      	ldr	r3, [sp, #16]
 800b372:	4413      	add	r3, r2
 800b374:	9304      	str	r3, [sp, #16]
 800b376:	9a08      	ldr	r2, [sp, #32]
 800b378:	9b07      	ldr	r3, [sp, #28]
 800b37a:	4413      	add	r3, r2
 800b37c:	9307      	str	r3, [sp, #28]
 800b37e:	e5ec      	b.n	800af5a <_DrawBitmap+0x2e2>
 800b380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b382:	b113      	cbz	r3, 800b38a <_DrawBitmap+0x712>
 800b384:	a80f      	add	r0, sp, #60	; 0x3c
 800b386:	f7fd f891 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b38a:	b011      	add	sp, #68	; 0x44
 800b38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b390 <GUI_USAGE_DecUseCnt>:
 800b390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b392:	4605      	mov	r5, r0
 800b394:	f7fd fea4 	bl	80090e0 <GUI_Lock>
 800b398:	4628      	mov	r0, r5
 800b39a:	f7fd f879 	bl	8008490 <GUI_ALLOC_LockH>
 800b39e:	ab02      	add	r3, sp, #8
 800b3a0:	8984      	ldrh	r4, [r0, #12]
 800b3a2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b3a6:	3c01      	subs	r4, #1
 800b3a8:	b224      	sxth	r4, r4
 800b3aa:	8184      	strh	r4, [r0, #12]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fd f87d 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b3b2:	b914      	cbnz	r4, 800b3ba <GUI_USAGE_DecUseCnt+0x2a>
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f7fd f899 	bl	80084ec <GUI_ALLOC_Free>
 800b3ba:	f7fd fe87 	bl	80090cc <GUI_Unlock>
 800b3be:	b003      	add	sp, #12
 800b3c0:	bd30      	pop	{r4, r5, pc}

0800b3c2 <GUI_USAGE_AddRect>:
 800b3c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c6:	9c08      	ldr	r4, [sp, #32]
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	4688      	mov	r8, r1
 800b3cc:	4699      	mov	r9, r3
 800b3ce:	4414      	add	r4, r2
 800b3d0:	68ab      	ldr	r3, [r5, #8]
 800b3d2:	1c56      	adds	r6, r2, #1
 800b3d4:	685f      	ldr	r7, [r3, #4]
 800b3d6:	4641      	mov	r1, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	42b4      	cmp	r4, r6
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	d1f5      	bne.n	800b3d0 <GUI_USAGE_AddRect+0xe>
 800b3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b3e8 <GUI_MEMDEV__WriteToActiveAlpha>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	4c5c      	ldr	r4, [pc, #368]	; (800b560 <GUI_MEMDEV__WriteToActiveAlpha+0x178>)
 800b3ee:	4f5d      	ldr	r7, [pc, #372]	; (800b564 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>)
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	7c5b      	ldrb	r3, [r3, #17]
 800b3f4:	b091      	sub	sp, #68	; 0x44
 800b3f6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b3fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b3fc:	4688      	mov	r8, r1
 800b3fe:	4615      	mov	r5, r2
 800b400:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b404:	f7fd f844 	bl	8008490 <GUI_ALLOC_LockH>
 800b408:	4603      	mov	r3, r0
 800b40a:	a810      	add	r0, sp, #64	; 0x40
 800b40c:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 800b410:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b414:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	9308      	str	r3, [sp, #32]
 800b420:	f7fd f844 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	7c5b      	ldrb	r3, [r3, #17]
 800b428:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800b42c:	68c3      	ldr	r3, [r0, #12]
 800b42e:	2108      	movs	r1, #8
 800b430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b432:	4798      	blx	r3
 800b434:	2817      	cmp	r0, #23
 800b436:	4607      	mov	r7, r0
 800b438:	d804      	bhi.n	800b444 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 800b43a:	2803      	cmp	r0, #3
 800b43c:	bf14      	ite	ne
 800b43e:	4607      	movne	r7, r0
 800b440:	2708      	moveq	r7, #8
 800b442:	e000      	b.n	800b446 <GUI_MEMDEV__WriteToActiveAlpha+0x5e>
 800b444:	2720      	movs	r7, #32
 800b446:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b44a:	9309      	str	r3, [sp, #36]	; 0x24
 800b44c:	2000      	movs	r0, #0
 800b44e:	f8da 3000 	ldr.w	r3, [sl]
 800b452:	930a      	str	r3, [sp, #40]	; 0x28
 800b454:	f001 fac8 	bl	800c9e8 <GUI__AllocAlphaBuffer>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d17e      	bne.n	800b55a <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800b45c:	6822      	ldr	r2, [r4, #0]
 800b45e:	eb08 0406 	add.w	r4, r8, r6
 800b462:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800b466:	3c01      	subs	r4, #1
 800b468:	1ae4      	subs	r4, r4, r3
 800b46a:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800b46e:	2c00      	cmp	r4, #0
 800b470:	bfcc      	ite	gt
 800b472:	1b34      	subgt	r4, r6, r4
 800b474:	4634      	movle	r4, r6
 800b476:	4598      	cmp	r8, r3
 800b478:	bfbd      	ittte	lt
 800b47a:	ebc8 0103 	rsblt	r1, r8, r3
 800b47e:	1a64      	sublt	r4, r4, r1
 800b480:	4698      	movlt	r8, r3
 800b482:	2100      	movge	r1, #0
 800b484:	2c00      	cmp	r4, #0
 800b486:	dd68      	ble.n	800b55a <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800b488:	eb05 0309 	add.w	r3, r5, r9
 800b48c:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 800b490:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800b494:	3b01      	subs	r3, #1
 800b496:	1a1b      	subs	r3, r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bfc8      	it	gt
 800b49c:	ebc3 0909 	rsbgt	r9, r3, r9
 800b4a0:	4295      	cmp	r5, r2
 800b4a2:	bfbd      	ittte	lt
 800b4a4:	1b53      	sublt	r3, r2, r5
 800b4a6:	ebc3 0909 	rsblt	r9, r3, r9
 800b4aa:	4615      	movlt	r5, r2
 800b4ac:	2300      	movge	r3, #0
 800b4ae:	f1b9 0f00 	cmp.w	r9, #0
 800b4b2:	dd52      	ble.n	800b55a <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800b4b4:	fb03 1106 	mla	r1, r3, r6, r1
 800b4b8:	008b      	lsls	r3, r1, #2
 800b4ba:	9307      	str	r3, [sp, #28]
 800b4bc:	eb05 0309 	add.w	r3, r5, r9
 800b4c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b4c4:	f001 fd6e 	bl	800cfa4 <GUI_MEMDEV_GetDataPtr>
 800b4c8:	ab0f      	add	r3, sp, #60	; 0x3c
 800b4ca:	9a07      	ldr	r2, [sp, #28]
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	9b08      	ldr	r3, [sp, #32]
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	1882      	adds	r2, r0, r2
 800b4d4:	4623      	mov	r3, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4640      	mov	r0, r8
 800b4da:	f001 f99b 	bl	800c814 <GUI__DoAlphaBlending>
 800b4de:	4681      	mov	r9, r0
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d03a      	beq.n	800b55a <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800b4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	4b1f      	ldr	r3, [pc, #124]	; (800b568 <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d01c      	beq.n	800b528 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800b4ee:	4653      	mov	r3, sl
 800b4f0:	463a      	mov	r2, r7
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	f001 fb50 	bl	800cb98 <GUI__CompactPixelIndicesEx>
 800b4f8:	b9b0      	cbnz	r0, 800b528 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800b4fa:	f8da b010 	ldr.w	fp, [sl, #16]
 800b4fe:	f1bb 0f00 	cmp.w	fp, #0
 800b502:	d005      	beq.n	800b510 <GUI_MEMDEV__WriteToActiveAlpha+0x128>
 800b504:	2304      	movs	r3, #4
 800b506:	4632      	mov	r2, r6
 800b508:	4649      	mov	r1, r9
 800b50a:	4648      	mov	r0, r9
 800b50c:	47d8      	blx	fp
 800b50e:	e00b      	b.n	800b528 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800b510:	464b      	mov	r3, r9
 800b512:	46b3      	mov	fp, r6
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	930d      	str	r3, [sp, #52]	; 0x34
 800b518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51a:	4798      	blx	r3
 800b51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51e:	f1bb 0b01 	subs.w	fp, fp, #1
 800b522:	f843 0b04 	str.w	r0, [r3], #4
 800b526:	d1f5      	bne.n	800b514 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>
 800b528:	2300      	movs	r3, #0
 800b52a:	9305      	str	r3, [sp, #20]
 800b52c:	9303      	str	r3, [sp, #12]
 800b52e:	2301      	movs	r3, #1
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	f8cd 9010 	str.w	r9, [sp, #16]
 800b538:	9702      	str	r7, [sp, #8]
 800b53a:	4622      	mov	r2, r4
 800b53c:	4629      	mov	r1, r5
 800b53e:	4640      	mov	r0, r8
 800b540:	f7fd ff90 	bl	8009464 <LCD_DrawBitmap>
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b54e:	f105 0b01 	add.w	fp, r5, #1
 800b552:	459b      	cmp	fp, r3
 800b554:	d001      	beq.n	800b55a <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800b556:	465d      	mov	r5, fp
 800b558:	e7b3      	b.n	800b4c2 <GUI_MEMDEV__WriteToActiveAlpha+0xda>
 800b55a:	b011      	add	sp, #68	; 0x44
 800b55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b560:	20000014 	.word	0x20000014
 800b564:	20027324 	.word	0x20027324
 800b568:	0800c4c1 	.word	0x0800c4c1

0800b56c <_OnExit>:
 800b56c:	4b18      	ldr	r3, [pc, #96]	; (800b5d0 <_OnExit+0x64>)
 800b56e:	4819      	ldr	r0, [pc, #100]	; (800b5d4 <_OnExit+0x68>)
 800b570:	4a19      	ldr	r2, [pc, #100]	; (800b5d8 <_OnExit+0x6c>)
 800b572:	b570      	push	{r4, r5, r6, lr}
 800b574:	2400      	movs	r4, #0
 800b576:	601c      	str	r4, [r3, #0]
 800b578:	4b18      	ldr	r3, [pc, #96]	; (800b5dc <_OnExit+0x70>)
 800b57a:	4d19      	ldr	r5, [pc, #100]	; (800b5e0 <_OnExit+0x74>)
 800b57c:	601c      	str	r4, [r3, #0]
 800b57e:	605c      	str	r4, [r3, #4]
 800b580:	4b18      	ldr	r3, [pc, #96]	; (800b5e4 <_OnExit+0x78>)
 800b582:	7004      	strb	r4, [r0, #0]
 800b584:	601c      	str	r4, [r3, #0]
 800b586:	4b18      	ldr	r3, [pc, #96]	; (800b5e8 <_OnExit+0x7c>)
 800b588:	6044      	str	r4, [r0, #4]
 800b58a:	601c      	str	r4, [r3, #0]
 800b58c:	4b17      	ldr	r3, [pc, #92]	; (800b5ec <_OnExit+0x80>)
 800b58e:	6014      	str	r4, [r2, #0]
 800b590:	601c      	str	r4, [r3, #0]
 800b592:	4b17      	ldr	r3, [pc, #92]	; (800b5f0 <_OnExit+0x84>)
 800b594:	6054      	str	r4, [r2, #4]
 800b596:	601c      	str	r4, [r3, #0]
 800b598:	6084      	str	r4, [r0, #8]
 800b59a:	682b      	ldr	r3, [r5, #0]
 800b59c:	4621      	mov	r1, r4
 800b59e:	2218      	movs	r2, #24
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	4798      	blx	r3
 800b5a4:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <_OnExit+0x88>)
 800b5a6:	4814      	ldr	r0, [pc, #80]	; (800b5f8 <_OnExit+0x8c>)
 800b5a8:	601c      	str	r4, [r3, #0]
 800b5aa:	4b14      	ldr	r3, [pc, #80]	; (800b5fc <_OnExit+0x90>)
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	601c      	str	r4, [r3, #0]
 800b5b0:	605c      	str	r4, [r3, #4]
 800b5b2:	2210      	movs	r2, #16
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	4798      	blx	r3
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	4811      	ldr	r0, [pc, #68]	; (800b600 <_OnExit+0x94>)
 800b5bc:	4621      	mov	r1, r4
 800b5be:	2210      	movs	r2, #16
 800b5c0:	4798      	blx	r3
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	480f      	ldr	r0, [pc, #60]	; (800b604 <_OnExit+0x98>)
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	2210      	movs	r2, #16
 800b5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5ce:	4718      	bx	r3
 800b5d0:	2002737c 	.word	0x2002737c
 800b5d4:	2000023c 	.word	0x2000023c
 800b5d8:	20027350 	.word	0x20027350
 800b5dc:	20027384 	.word	0x20027384
 800b5e0:	20000024 	.word	0x20000024
 800b5e4:	20027390 	.word	0x20027390
 800b5e8:	2002733c 	.word	0x2002733c
 800b5ec:	20027370 	.word	0x20027370
 800b5f0:	20027380 	.word	0x20027380
 800b5f4:	2002734c 	.word	0x2002734c
 800b5f8:	200273b4 	.word	0x200273b4
 800b5fc:	20027340 	.word	0x20027340
 800b600:	200273a4 	.word	0x200273a4
 800b604:	20027394 	.word	0x20027394

0800b608 <_Findy1>:
 800b608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60a:	b085      	sub	sp, #20
 800b60c:	4607      	mov	r7, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	4616      	mov	r6, r2
 800b612:	ad02      	add	r5, sp, #8
 800b614:	2f00      	cmp	r7, #0
 800b616:	d048      	beq.n	800b6aa <_Findy1+0xa2>
 800b618:	4638      	mov	r0, r7
 800b61a:	f7fc ff39 	bl	8008490 <GUI_ALLOC_LockH>
 800b61e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800b620:	9001      	str	r0, [sp, #4]
 800b622:	07bb      	lsls	r3, r7, #30
 800b624:	4601      	mov	r1, r0
 800b626:	d53a      	bpl.n	800b69e <_Findy1+0x96>
 800b628:	b126      	cbz	r6, 800b634 <_Findy1+0x2c>
 800b62a:	4632      	mov	r2, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	f7fd fe20 	bl	8009272 <GUI__IntersectRects>
 800b632:	e002      	b.n	800b63a <_Findy1+0x32>
 800b634:	c803      	ldmia	r0, {r0, r1}
 800b636:	e885 0003 	stmia.w	r5, {r0, r1}
 800b63a:	4629      	mov	r1, r5
 800b63c:	4620      	mov	r0, r4
 800b63e:	f7fd f9f1 	bl	8008a24 <GUI_RectsIntersect>
 800b642:	b360      	cbz	r0, 800b69e <_Findy1+0x96>
 800b644:	f017 0f01 	tst.w	r7, #1
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	d11c      	bne.n	800b686 <_Findy1+0x7e>
 800b64c:	b13e      	cbz	r6, 800b65e <_Findy1+0x56>
 800b64e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b652:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800b656:	4293      	cmp	r3, r2
 800b658:	bfb8      	it	lt
 800b65a:	4613      	movlt	r3, r2
 800b65c:	e001      	b.n	800b662 <_Findy1+0x5a>
 800b65e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b662:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800b666:	4293      	cmp	r3, r2
 800b668:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b66c:	dd05      	ble.n	800b67a <_Findy1+0x72>
 800b66e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800b672:	429a      	cmp	r2, r3
 800b674:	db13      	blt.n	800b69e <_Findy1+0x96>
 800b676:	3b01      	subs	r3, #1
 800b678:	e003      	b.n	800b682 <_Findy1+0x7a>
 800b67a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800b67e:	429a      	cmp	r2, r3
 800b680:	dd0d      	ble.n	800b69e <_Findy1+0x96>
 800b682:	80e3      	strh	r3, [r4, #6]
 800b684:	e00b      	b.n	800b69e <_Findy1+0x96>
 800b686:	69df      	ldr	r7, [r3, #28]
 800b688:	b14f      	cbz	r7, 800b69e <_Findy1+0x96>
 800b68a:	4638      	mov	r0, r7
 800b68c:	462a      	mov	r2, r5
 800b68e:	4621      	mov	r1, r4
 800b690:	f7ff ffba 	bl	800b608 <_Findy1>
 800b694:	4638      	mov	r0, r7
 800b696:	f7fc fef1 	bl	800847c <GUI_ALLOC_h2p>
 800b69a:	6a07      	ldr	r7, [r0, #32]
 800b69c:	e7f4      	b.n	800b688 <_Findy1+0x80>
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	a801      	add	r0, sp, #4
 800b6a2:	6a1f      	ldr	r7, [r3, #32]
 800b6a4:	f7fc ff02 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b6a8:	e7b4      	b.n	800b614 <_Findy1+0xc>
 800b6aa:	b005      	add	sp, #20
 800b6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6ae <_Findx0>:
 800b6ae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	4690      	mov	r8, r2
 800b6b8:	2500      	movs	r5, #0
 800b6ba:	ac02      	add	r4, sp, #8
 800b6bc:	2e00      	cmp	r6, #0
 800b6be:	d035      	beq.n	800b72c <_Findx0+0x7e>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7fc fee5 	bl	8008490 <GUI_ALLOC_LockH>
 800b6c6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800b6c8:	9001      	str	r0, [sp, #4]
 800b6ca:	07b2      	lsls	r2, r6, #30
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	d527      	bpl.n	800b720 <_Findx0+0x72>
 800b6d0:	f1b8 0f00 	cmp.w	r8, #0
 800b6d4:	d004      	beq.n	800b6e0 <_Findx0+0x32>
 800b6d6:	4642      	mov	r2, r8
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f7fd fdca 	bl	8009272 <GUI__IntersectRects>
 800b6de:	e002      	b.n	800b6e6 <_Findx0+0x38>
 800b6e0:	c803      	ldmia	r0, {r0, r1}
 800b6e2:	e884 0003 	stmia.w	r4, {r0, r1}
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f7fd f99b 	bl	8008a24 <GUI_RectsIntersect>
 800b6ee:	b1b8      	cbz	r0, 800b720 <_Findx0+0x72>
 800b6f0:	07f3      	lsls	r3, r6, #31
 800b6f2:	d405      	bmi.n	800b700 <_Findx0+0x52>
 800b6f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	803b      	strh	r3, [r7, #0]
 800b6fc:	2501      	movs	r5, #1
 800b6fe:	e00f      	b.n	800b720 <_Findx0+0x72>
 800b700:	9b01      	ldr	r3, [sp, #4]
 800b702:	69de      	ldr	r6, [r3, #28]
 800b704:	b166      	cbz	r6, 800b720 <_Findx0+0x72>
 800b706:	4622      	mov	r2, r4
 800b708:	4639      	mov	r1, r7
 800b70a:	4630      	mov	r0, r6
 800b70c:	f7ff ffcf 	bl	800b6ae <_Findx0>
 800b710:	2800      	cmp	r0, #0
 800b712:	4630      	mov	r0, r6
 800b714:	bf18      	it	ne
 800b716:	2501      	movne	r5, #1
 800b718:	f7fc feb0 	bl	800847c <GUI_ALLOC_h2p>
 800b71c:	6a06      	ldr	r6, [r0, #32]
 800b71e:	e7f1      	b.n	800b704 <_Findx0+0x56>
 800b720:	9b01      	ldr	r3, [sp, #4]
 800b722:	a801      	add	r0, sp, #4
 800b724:	6a1e      	ldr	r6, [r3, #32]
 800b726:	f7fc fec1 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b72a:	e7c7      	b.n	800b6bc <_Findx0+0xe>
 800b72c:	4628      	mov	r0, r5
 800b72e:	b004      	add	sp, #16
 800b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b734 <_Findx1>:
 800b734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b736:	b085      	sub	sp, #20
 800b738:	4605      	mov	r5, r0
 800b73a:	460e      	mov	r6, r1
 800b73c:	4617      	mov	r7, r2
 800b73e:	ac02      	add	r4, sp, #8
 800b740:	b37d      	cbz	r5, 800b7a2 <_Findx1+0x6e>
 800b742:	4628      	mov	r0, r5
 800b744:	f7fc fea4 	bl	8008490 <GUI_ALLOC_LockH>
 800b748:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800b74a:	9001      	str	r0, [sp, #4]
 800b74c:	07aa      	lsls	r2, r5, #30
 800b74e:	4601      	mov	r1, r0
 800b750:	d521      	bpl.n	800b796 <_Findx1+0x62>
 800b752:	b127      	cbz	r7, 800b75e <_Findx1+0x2a>
 800b754:	463a      	mov	r2, r7
 800b756:	4620      	mov	r0, r4
 800b758:	f7fd fd8b 	bl	8009272 <GUI__IntersectRects>
 800b75c:	e002      	b.n	800b764 <_Findx1+0x30>
 800b75e:	c803      	ldmia	r0, {r0, r1}
 800b760:	e884 0003 	stmia.w	r4, {r0, r1}
 800b764:	4621      	mov	r1, r4
 800b766:	4630      	mov	r0, r6
 800b768:	f7fd f95c 	bl	8008a24 <GUI_RectsIntersect>
 800b76c:	b198      	cbz	r0, 800b796 <_Findx1+0x62>
 800b76e:	07eb      	lsls	r3, r5, #31
 800b770:	d404      	bmi.n	800b77c <_Findx1+0x48>
 800b772:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b776:	3b01      	subs	r3, #1
 800b778:	80b3      	strh	r3, [r6, #4]
 800b77a:	e00c      	b.n	800b796 <_Findx1+0x62>
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	69dd      	ldr	r5, [r3, #28]
 800b780:	b14d      	cbz	r5, 800b796 <_Findx1+0x62>
 800b782:	4628      	mov	r0, r5
 800b784:	4622      	mov	r2, r4
 800b786:	4631      	mov	r1, r6
 800b788:	f7ff ffd4 	bl	800b734 <_Findx1>
 800b78c:	4628      	mov	r0, r5
 800b78e:	f7fc fe75 	bl	800847c <GUI_ALLOC_h2p>
 800b792:	6a05      	ldr	r5, [r0, #32]
 800b794:	e7f4      	b.n	800b780 <_Findx1+0x4c>
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	a801      	add	r0, sp, #4
 800b79a:	6a1d      	ldr	r5, [r3, #32]
 800b79c:	f7fc fe86 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b7a0:	e7ce      	b.n	800b740 <_Findx1+0xc>
 800b7a2:	b005      	add	sp, #20
 800b7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b7a8 <WM__ClipAtParentBorders>:
 800b7a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f7fc fe6e 	bl	8008490 <GUI_ALLOC_LockH>
 800b7b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b7b6:	9001      	str	r0, [sp, #4]
 800b7b8:	f013 0402 	ands.w	r4, r3, #2
 800b7bc:	4601      	mov	r1, r0
 800b7be:	d104      	bne.n	800b7ca <WM__ClipAtParentBorders+0x22>
 800b7c0:	a801      	add	r0, sp, #4
 800b7c2:	f7fc fe73 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e016      	b.n	800b7f8 <WM__ClipAtParentBorders+0x50>
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7fd fd34 	bl	8009238 <GUI__IntersectRect>
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	699c      	ldr	r4, [r3, #24]
 800b7d4:	a801      	add	r0, sp, #4
 800b7d6:	b954      	cbnz	r4, 800b7ee <WM__ClipAtParentBorders+0x46>
 800b7d8:	f7fc fe68 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b7dc:	4b07      	ldr	r3, [pc, #28]	; (800b7fc <WM__ClipAtParentBorders+0x54>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4295      	cmp	r5, r2
 800b7e2:	d008      	beq.n	800b7f6 <WM__ClipAtParentBorders+0x4e>
 800b7e4:	6858      	ldr	r0, [r3, #4]
 800b7e6:	1b43      	subs	r3, r0, r5
 800b7e8:	4258      	negs	r0, r3
 800b7ea:	4158      	adcs	r0, r3
 800b7ec:	e004      	b.n	800b7f8 <WM__ClipAtParentBorders+0x50>
 800b7ee:	f7fc fe5d 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b7f2:	4625      	mov	r5, r4
 800b7f4:	e7db      	b.n	800b7ae <WM__ClipAtParentBorders+0x6>
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	b002      	add	sp, #8
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	20027340 	.word	0x20027340

0800b800 <WM__InsertWindowIntoList>:
 800b800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b804:	4606      	mov	r6, r0
 800b806:	460c      	mov	r4, r1
 800b808:	2900      	cmp	r1, #0
 800b80a:	d04c      	beq.n	800b8a6 <WM__InsertWindowIntoList+0xa6>
 800b80c:	f7fc fe40 	bl	8008490 <GUI_ALLOC_LockH>
 800b810:	2300      	movs	r3, #0
 800b812:	6184      	str	r4, [r0, #24]
 800b814:	9001      	str	r0, [sp, #4]
 800b816:	6203      	str	r3, [r0, #32]
 800b818:	4620      	mov	r0, r4
 800b81a:	f7fc fe39 	bl	8008490 <GUI_ALLOC_LockH>
 800b81e:	ac04      	add	r4, sp, #16
 800b820:	69c7      	ldr	r7, [r0, #28]
 800b822:	f844 0d08 	str.w	r0, [r4, #-8]!
 800b826:	b92f      	cbnz	r7, 800b834 <WM__InsertWindowIntoList+0x34>
 800b828:	61c6      	str	r6, [r0, #28]
 800b82a:	a801      	add	r0, sp, #4
 800b82c:	f7fc fe3e 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b830:	4620      	mov	r0, r4
 800b832:	e036      	b.n	800b8a2 <WM__InsertWindowIntoList+0xa2>
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	4638      	mov	r0, r7
 800b838:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800b83a:	f7fc fe29 	bl	8008490 <GUI_ALLOC_LockH>
 800b83e:	f10d 0810 	add.w	r8, sp, #16
 800b842:	f005 0508 	and.w	r5, r5, #8
 800b846:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b84a:	b975      	cbnz	r5, 800b86a <WM__InsertWindowIntoList+0x6a>
 800b84c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b84e:	071a      	lsls	r2, r3, #28
 800b850:	d50b      	bpl.n	800b86a <WM__InsertWindowIntoList+0x6a>
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	621f      	str	r7, [r3, #32]
 800b856:	9b02      	ldr	r3, [sp, #8]
 800b858:	a801      	add	r0, sp, #4
 800b85a:	61de      	str	r6, [r3, #28]
 800b85c:	f7fc fe26 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b860:	4620      	mov	r0, r4
 800b862:	f7fc fe23 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b866:	4640      	mov	r0, r8
 800b868:	e01b      	b.n	800b8a2 <WM__InsertWindowIntoList+0xa2>
 800b86a:	4620      	mov	r0, r4
 800b86c:	f7fc fe1e 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b870:	4640      	mov	r0, r8
 800b872:	f7fc fe1b 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b876:	4638      	mov	r0, r7
 800b878:	f7fc fe00 	bl	800847c <GUI_ALLOC_h2p>
 800b87c:	9003      	str	r0, [sp, #12]
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	6a1c      	ldr	r4, [r3, #32]
 800b882:	b90c      	cbnz	r4, 800b888 <WM__InsertWindowIntoList+0x88>
 800b884:	621e      	str	r6, [r3, #32]
 800b886:	e00b      	b.n	800b8a0 <WM__InsertWindowIntoList+0xa0>
 800b888:	4620      	mov	r0, r4
 800b88a:	f7fc fdf7 	bl	800847c <GUI_ALLOC_h2p>
 800b88e:	2d00      	cmp	r5, #0
 800b890:	d1f4      	bne.n	800b87c <WM__InsertWindowIntoList+0x7c>
 800b892:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b894:	071b      	lsls	r3, r3, #28
 800b896:	d5f1      	bpl.n	800b87c <WM__InsertWindowIntoList+0x7c>
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	621e      	str	r6, [r3, #32]
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	621c      	str	r4, [r3, #32]
 800b8a0:	a801      	add	r0, sp, #4
 800b8a2:	f7fc fe03 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b8a6:	b004      	add	sp, #16
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8ac <WM__Client2Screen>:
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b8b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b8b8:	f7fd b893 	b.w	80089e2 <GUI_MoveRect>

0800b8bc <_SetClipRectUserIntersect>:
 800b8bc:	4b11      	ldr	r3, [pc, #68]	; (800b904 <_SetClipRectUserIntersect+0x48>)
 800b8be:	b530      	push	{r4, r5, lr}
 800b8c0:	681c      	ldr	r4, [r3, #0]
 800b8c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b8c4:	b085      	sub	sp, #20
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	b1ba      	cbz	r2, 800b8fa <_SetClipRectUserIntersect+0x3e>
 800b8ca:	6810      	ldr	r0, [r2, #0]
 800b8cc:	6851      	ldr	r1, [r2, #4]
 800b8ce:	ab02      	add	r3, sp, #8
 800b8d0:	c303      	stmia	r3!, {r0, r1}
 800b8d2:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <_SetClipRectUserIntersect+0x4c>)
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	b900      	cbnz	r0, 800b8da <_SetClipRectUserIntersect+0x1e>
 800b8d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b8da:	f7fc fdd9 	bl	8008490 <GUI_ALLOC_LockH>
 800b8de:	ac04      	add	r4, sp, #16
 800b8e0:	a902      	add	r1, sp, #8
 800b8e2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800b8e6:	f7ff ffe1 	bl	800b8ac <WM__Client2Screen>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f7fc fdde 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b8f0:	a802      	add	r0, sp, #8
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	f7fd fca0 	bl	8009238 <GUI__IntersectRect>
 800b8f8:	a802      	add	r0, sp, #8
 800b8fa:	f001 fb15 	bl	800cf28 <LCD_SetClipRectEx>
 800b8fe:	b005      	add	sp, #20
 800b900:	bd30      	pop	{r4, r5, pc}
 800b902:	bf00      	nop
 800b904:	20000014 	.word	0x20000014
 800b908:	2002733c 	.word	0x2002733c

0800b90c <WM__ActivateClipRect>:
 800b90c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b90e:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <WM__ActivateClipRect+0x3c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800b916:	b10a      	cbz	r2, 800b91c <WM__ActivateClipRect+0x10>
 800b918:	480c      	ldr	r0, [pc, #48]	; (800b94c <WM__ActivateClipRect+0x40>)
 800b91a:	e011      	b.n	800b940 <WM__ActivateClipRect+0x34>
 800b91c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b91e:	f7fc fdb7 	bl	8008490 <GUI_ALLOC_LockH>
 800b922:	9001      	str	r0, [sp, #4]
 800b924:	c803      	ldmia	r0, {r0, r1}
 800b926:	ac02      	add	r4, sp, #8
 800b928:	e884 0003 	stmia.w	r4, {r0, r1}
 800b92c:	a801      	add	r0, sp, #4
 800b92e:	f7fc fdbd 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b932:	4b07      	ldr	r3, [pc, #28]	; (800b950 <WM__ActivateClipRect+0x44>)
 800b934:	6819      	ldr	r1, [r3, #0]
 800b936:	b111      	cbz	r1, 800b93e <WM__ActivateClipRect+0x32>
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ff35 	bl	800b7a8 <WM__ClipAtParentBorders>
 800b93e:	4620      	mov	r0, r4
 800b940:	f7ff ffbc 	bl	800b8bc <_SetClipRectUserIntersect>
 800b944:	b004      	add	sp, #16
 800b946:	bd10      	pop	{r4, pc}
 800b948:	20000014 	.word	0x20000014
 800b94c:	20000250 	.word	0x20000250
 800b950:	2002733c 	.word	0x2002733c

0800b954 <WM__InvalidateDrawAndDescs>:
 800b954:	b513      	push	{r0, r1, r4, lr}
 800b956:	4604      	mov	r4, r0
 800b958:	b300      	cbz	r0, 800b99c <WM__InvalidateDrawAndDescs+0x48>
 800b95a:	f7fc fd99 	bl	8008490 <GUI_ALLOC_LockH>
 800b95e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b960:	9001      	str	r0, [sp, #4]
 800b962:	079b      	lsls	r3, r3, #30
 800b964:	d517      	bpl.n	800b996 <WM__InvalidateDrawAndDescs+0x42>
 800b966:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b968:	b140      	cbz	r0, 800b97c <WM__InvalidateDrawAndDescs+0x28>
 800b96a:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <WM__InvalidateDrawAndDescs+0x4c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429c      	cmp	r4, r3
 800b970:	d004      	beq.n	800b97c <WM__InvalidateDrawAndDescs+0x28>
 800b972:	f001 faf1 	bl	800cf58 <GUI_MEMDEV_Delete>
 800b976:	9b01      	ldr	r3, [sp, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	625a      	str	r2, [r3, #36]	; 0x24
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fc5d 	bl	800c23c <WM_GetFirstChild>
 800b982:	4604      	mov	r4, r0
 800b984:	b13c      	cbz	r4, 800b996 <WM__InvalidateDrawAndDescs+0x42>
 800b986:	4620      	mov	r0, r4
 800b988:	f7ff ffe4 	bl	800b954 <WM__InvalidateDrawAndDescs>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f7fc fd75 	bl	800847c <GUI_ALLOC_h2p>
 800b992:	6a04      	ldr	r4, [r0, #32]
 800b994:	e7f6      	b.n	800b984 <WM__InvalidateDrawAndDescs+0x30>
 800b996:	a801      	add	r0, sp, #4
 800b998:	f7fc fd88 	bl	80084ac <GUI_ALLOC_UnlockH>
 800b99c:	b002      	add	sp, #8
 800b99e:	bd10      	pop	{r4, pc}
 800b9a0:	2002738c 	.word	0x2002738c

0800b9a4 <WM__RectIsNZ>:
 800b9a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b9a8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	dc08      	bgt.n	800b9c2 <WM__RectIsNZ+0x1e>
 800b9b0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b9b4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b9b8:	4283      	cmp	r3, r0
 800b9ba:	bfcc      	ite	gt
 800b9bc:	2000      	movgt	r0, #0
 800b9be:	2001      	movle	r0, #1
 800b9c0:	4770      	bx	lr
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	4770      	bx	lr

0800b9c6 <WM__SendMsgNoData>:
 800b9c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9c8:	ab04      	add	r3, sp, #16
 800b9ca:	9001      	str	r0, [sp, #4]
 800b9cc:	f843 1d10 	str.w	r1, [r3, #-16]!
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f000 fcdd 	bl	800c390 <WM__SendMessage>
 800b9d6:	b005      	add	sp, #20
 800b9d8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b9dc <WM__GetClientRectWin>:
 800b9dc:	2300      	movs	r3, #0
 800b9de:	800b      	strh	r3, [r1, #0]
 800b9e0:	8802      	ldrh	r2, [r0, #0]
 800b9e2:	804b      	strh	r3, [r1, #2]
 800b9e4:	8883      	ldrh	r3, [r0, #4]
 800b9e6:	1a9b      	subs	r3, r3, r2
 800b9e8:	808b      	strh	r3, [r1, #4]
 800b9ea:	8842      	ldrh	r2, [r0, #2]
 800b9ec:	88c3      	ldrh	r3, [r0, #6]
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	80cb      	strh	r3, [r1, #6]
 800b9f2:	4770      	bx	lr

0800b9f4 <WM__GetTopLevelLayer>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	f7fc fd40 	bl	800847c <GUI_ALLOC_h2p>
 800b9fc:	6980      	ldr	r0, [r0, #24]
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d1f9      	bne.n	800b9f6 <WM__GetTopLevelLayer+0x2>
 800ba02:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <WM__GetTopLevelLayer+0x24>)
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	4294      	cmp	r4, r2
 800ba08:	d005      	beq.n	800ba16 <WM__GetTopLevelLayer+0x22>
 800ba0a:	6858      	ldr	r0, [r3, #4]
 800ba0c:	4284      	cmp	r4, r0
 800ba0e:	bf0c      	ite	eq
 800ba10:	2001      	moveq	r0, #1
 800ba12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ba16:	bd10      	pop	{r4, pc}
 800ba18:	20027340 	.word	0x20027340

0800ba1c <_Invalidate1Abs>:
 800ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	460d      	mov	r5, r1
 800ba22:	4606      	mov	r6, r0
 800ba24:	4617      	mov	r7, r2
 800ba26:	f7fc fd29 	bl	800847c <GUI_ALLOC_h2p>
 800ba2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ba2c:	9001      	str	r0, [sp, #4]
 800ba2e:	078b      	lsls	r3, r1, #30
 800ba30:	d53e      	bpl.n	800bab0 <_Invalidate1Abs+0x94>
 800ba32:	4628      	mov	r0, r5
 800ba34:	f7ff ffb6 	bl	800b9a4 <WM__RectIsNZ>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d039      	beq.n	800bab0 <_Invalidate1Abs+0x94>
 800ba3c:	f640 0301 	movw	r3, #2049	; 0x801
 800ba40:	400b      	ands	r3, r1
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d034      	beq.n	800bab0 <_Invalidate1Abs+0x94>
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7fc fd22 	bl	8008490 <GUI_ALLOC_LockH>
 800ba4c:	ac02      	add	r4, sp, #8
 800ba4e:	4602      	mov	r2, r0
 800ba50:	9001      	str	r0, [sp, #4]
 800ba52:	4629      	mov	r1, r5
 800ba54:	4620      	mov	r0, r4
 800ba56:	f7fd fc0c 	bl	8009272 <GUI__IntersectRects>
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff ffa2 	bl	800b9a4 <WM__RectIsNZ>
 800ba60:	b318      	cbz	r0, 800baaa <_Invalidate1Abs+0x8e>
 800ba62:	9b01      	ldr	r3, [sp, #4]
 800ba64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba66:	f244 0120 	movw	r1, #16416	; 0x4020
 800ba6a:	4011      	ands	r1, r2
 800ba6c:	f103 0508 	add.w	r5, r3, #8
 800ba70:	b129      	cbz	r1, 800ba7e <_Invalidate1Abs+0x62>
 800ba72:	4622      	mov	r2, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	4628      	mov	r0, r5
 800ba78:	f7fc ff88 	bl	800898c <GUI_MergeRect>
 800ba7c:	e015      	b.n	800baaa <_Invalidate1Abs+0x8e>
 800ba7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ba82:	433a      	orrs	r2, r7
 800ba84:	e885 0003 	stmia.w	r5, {r0, r1}
 800ba88:	629a      	str	r2, [r3, #40]	; 0x28
 800ba8a:	4a0a      	ldr	r2, [pc, #40]	; (800bab4 <_Invalidate1Abs+0x98>)
 800ba8c:	8813      	ldrh	r3, [r2, #0]
 800ba8e:	4630      	mov	r0, r6
 800ba90:	3301      	adds	r3, #1
 800ba92:	8013      	strh	r3, [r2, #0]
 800ba94:	f7ff ffae 	bl	800b9f4 <WM__GetTopLevelLayer>
 800ba98:	4a07      	ldr	r2, [pc, #28]	; (800bab8 <_Invalidate1Abs+0x9c>)
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	fa03 f000 	lsl.w	r0, r3, r0
 800baa0:	6813      	ldr	r3, [r2, #0]
 800baa2:	4303      	orrs	r3, r0
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	f7fd fbbf 	bl	8009228 <GUI_SignalEvent>
 800baaa:	a801      	add	r0, sp, #4
 800baac:	f7fc fcfe 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bab0:	b005      	add	sp, #20
 800bab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab4:	20027358 	.word	0x20027358
 800bab8:	20027368 	.word	0x20027368

0800babc <WM__Invalidate1Abs>:
 800babc:	2220      	movs	r2, #32
 800babe:	f7ff bfad 	b.w	800ba1c <_Invalidate1Abs>

0800bac2 <WM_InvalidateWindowAndDescsEx>:
 800bac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac4:	460f      	mov	r7, r1
 800bac6:	b085      	sub	sp, #20
 800bac8:	4615      	mov	r5, r2
 800baca:	4606      	mov	r6, r0
 800bacc:	b348      	cbz	r0, 800bb22 <WM_InvalidateWindowAndDescsEx+0x60>
 800bace:	f7fc fcdf 	bl	8008490 <GUI_ALLOC_LockH>
 800bad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bad4:	ac04      	add	r4, sp, #16
 800bad6:	079b      	lsls	r3, r3, #30
 800bad8:	4602      	mov	r2, r0
 800bada:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800bade:	d403      	bmi.n	800bae8 <WM_InvalidateWindowAndDescsEx+0x26>
 800bae0:	4620      	mov	r0, r4
 800bae2:	f7fc fce3 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bae6:	e01c      	b.n	800bb22 <WM_InvalidateWindowAndDescsEx+0x60>
 800bae8:	4639      	mov	r1, r7
 800baea:	a802      	add	r0, sp, #8
 800baec:	f7fd fbc1 	bl	8009272 <GUI__IntersectRects>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d0f5      	beq.n	800bae0 <WM_InvalidateWindowAndDescsEx+0x1e>
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7fc fcd9 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bafa:	462a      	mov	r2, r5
 800bafc:	a902      	add	r1, sp, #8
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7ff ff8c 	bl	800ba1c <_Invalidate1Abs>
 800bb04:	4630      	mov	r0, r6
 800bb06:	f000 fb99 	bl	800c23c <WM_GetFirstChild>
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	b14c      	cbz	r4, 800bb22 <WM_InvalidateWindowAndDescsEx+0x60>
 800bb0e:	4620      	mov	r0, r4
 800bb10:	462a      	mov	r2, r5
 800bb12:	a902      	add	r1, sp, #8
 800bb14:	f7ff ffd5 	bl	800bac2 <WM_InvalidateWindowAndDescsEx>
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f7fc fcaf 	bl	800847c <GUI_ALLOC_h2p>
 800bb1e:	6a04      	ldr	r4, [r0, #32]
 800bb20:	e7f4      	b.n	800bb0c <WM_InvalidateWindowAndDescsEx+0x4a>
 800bb22:	b005      	add	sp, #20
 800bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb26 <WM__InvalidateRect>:
 800bb26:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	4617      	mov	r7, r2
 800bb2e:	461d      	mov	r5, r3
 800bb30:	460c      	mov	r4, r1
 800bb32:	b381      	cbz	r1, 800bb96 <WM__InvalidateRect+0x70>
 800bb34:	4608      	mov	r0, r1
 800bb36:	f7fc fcab 	bl	8008490 <GUI_ALLOC_LockH>
 800bb3a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800bb3c:	9001      	str	r0, [sp, #4]
 800bb3e:	07b3      	lsls	r3, r6, #30
 800bb40:	4602      	mov	r2, r0
 800bb42:	d525      	bpl.n	800bb90 <WM__InvalidateRect+0x6a>
 800bb44:	4641      	mov	r1, r8
 800bb46:	a802      	add	r0, sp, #8
 800bb48:	f7fd fb93 	bl	8009272 <GUI__IntersectRects>
 800bb4c:	b300      	cbz	r0, 800bb90 <WM__InvalidateRect+0x6a>
 800bb4e:	f640 0301 	movw	r3, #2049	; 0x801
 800bb52:	4033      	ands	r3, r6
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d107      	bne.n	800bb68 <WM__InvalidateRect+0x42>
 800bb58:	9901      	ldr	r1, [sp, #4]
 800bb5a:	462b      	mov	r3, r5
 800bb5c:	6a0a      	ldr	r2, [r1, #32]
 800bb5e:	6989      	ldr	r1, [r1, #24]
 800bb60:	a802      	add	r0, sp, #8
 800bb62:	f7ff ffe0 	bl	800bb26 <WM__InvalidateRect>
 800bb66:	e004      	b.n	800bb72 <WM__InvalidateRect+0x4c>
 800bb68:	462a      	mov	r2, r5
 800bb6a:	a902      	add	r1, sp, #8
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f7ff ff55 	bl	800ba1c <_Invalidate1Abs>
 800bb72:	9b01      	ldr	r3, [sp, #4]
 800bb74:	69dc      	ldr	r4, [r3, #28]
 800bb76:	b15c      	cbz	r4, 800bb90 <WM__InvalidateRect+0x6a>
 800bb78:	42bc      	cmp	r4, r7
 800bb7a:	d009      	beq.n	800bb90 <WM__InvalidateRect+0x6a>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	462a      	mov	r2, r5
 800bb80:	a902      	add	r1, sp, #8
 800bb82:	f7ff ff9e 	bl	800bac2 <WM_InvalidateWindowAndDescsEx>
 800bb86:	4620      	mov	r0, r4
 800bb88:	f7fc fc78 	bl	800847c <GUI_ALLOC_h2p>
 800bb8c:	6a04      	ldr	r4, [r0, #32]
 800bb8e:	e7f2      	b.n	800bb76 <WM__InvalidateRect+0x50>
 800bb90:	a801      	add	r0, sp, #4
 800bb92:	f7fc fc8b 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bb96:	b004      	add	sp, #16
 800bb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb9c <WM__InvalidateRectEx>:
 800bb9c:	2320      	movs	r3, #32
 800bb9e:	f7ff bfc2 	b.w	800bb26 <WM__InvalidateRect>

0800bba2 <WM_InvalidateRect>:
 800bba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba4:	460f      	mov	r7, r1
 800bba6:	b087      	sub	sp, #28
 800bba8:	4605      	mov	r5, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d038      	beq.n	800bc20 <WM_InvalidateRect+0x7e>
 800bbae:	f7fd fa97 	bl	80090e0 <GUI_Lock>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7fc fc6c 	bl	8008490 <GUI_ALLOC_LockH>
 800bbb8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800bbba:	9001      	str	r0, [sp, #4]
 800bbbc:	07b2      	lsls	r2, r6, #30
 800bbbe:	d52a      	bpl.n	800bc16 <WM_InvalidateRect+0x74>
 800bbc0:	c803      	ldmia	r0, {r0, r1}
 800bbc2:	ac04      	add	r4, sp, #16
 800bbc4:	03f3      	lsls	r3, r6, #15
 800bbc6:	e884 0003 	stmia.w	r4, {r0, r1}
 800bbca:	d502      	bpl.n	800bbd2 <WM_InvalidateRect+0x30>
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f7ff fec1 	bl	800b954 <WM__InvalidateDrawAndDescs>
 800bbd2:	b15f      	cbz	r7, 800bbec <WM_InvalidateRect+0x4a>
 800bbd4:	6838      	ldr	r0, [r7, #0]
 800bbd6:	6879      	ldr	r1, [r7, #4]
 800bbd8:	ab02      	add	r3, sp, #8
 800bbda:	c303      	stmia	r3!, {r0, r1}
 800bbdc:	a902      	add	r1, sp, #8
 800bbde:	9801      	ldr	r0, [sp, #4]
 800bbe0:	f7ff fe64 	bl	800b8ac <WM__Client2Screen>
 800bbe4:	a902      	add	r1, sp, #8
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f7fd fb26 	bl	8009238 <GUI__IntersectRect>
 800bbec:	4629      	mov	r1, r5
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f7ff fdda 	bl	800b7a8 <WM__ClipAtParentBorders>
 800bbf4:	b178      	cbz	r0, 800bc16 <WM_InvalidateRect+0x74>
 800bbf6:	f640 0301 	movw	r3, #2049	; 0x801
 800bbfa:	4033      	ands	r3, r6
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d106      	bne.n	800bc0e <WM_InvalidateRect+0x6c>
 800bc00:	9b01      	ldr	r3, [sp, #4]
 800bc02:	4620      	mov	r0, r4
 800bc04:	6a1a      	ldr	r2, [r3, #32]
 800bc06:	6999      	ldr	r1, [r3, #24]
 800bc08:	f7ff ffc8 	bl	800bb9c <WM__InvalidateRectEx>
 800bc0c:	e003      	b.n	800bc16 <WM_InvalidateRect+0x74>
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4628      	mov	r0, r5
 800bc12:	f7ff ff53 	bl	800babc <WM__Invalidate1Abs>
 800bc16:	a801      	add	r0, sp, #4
 800bc18:	f7fc fc48 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bc1c:	f7fd fa56 	bl	80090cc <GUI_Unlock>
 800bc20:	b007      	add	sp, #28
 800bc22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc24 <WM_InvalidateWindow>:
 800bc24:	2100      	movs	r1, #0
 800bc26:	f7ff bfbc 	b.w	800bba2 <WM_InvalidateRect>

0800bc2a <WM__SelectTopLevelLayer>:
 800bc2a:	b508      	push	{r3, lr}
 800bc2c:	f7ff fee2 	bl	800b9f4 <WM__GetTopLevelLayer>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	db03      	blt.n	800bc3c <WM__SelectTopLevelLayer+0x12>
 800bc34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bc38:	f7fd ba04 	b.w	8009044 <GUI_SelectLayer>
 800bc3c:	bd08      	pop	{r3, pc}
	...

0800bc40 <WM_SelectWindow>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	4604      	mov	r4, r0
 800bc44:	f7fd fa4c 	bl	80090e0 <GUI_Lock>
 800bc48:	4b0d      	ldr	r3, [pc, #52]	; (800bc80 <WM_SelectWindow+0x40>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	461d      	mov	r5, r3
 800bc4e:	6c96      	ldr	r6, [r2, #72]	; 0x48
 800bc50:	b90c      	cbnz	r4, 800bc56 <WM_SelectWindow+0x16>
 800bc52:	4b0c      	ldr	r3, [pc, #48]	; (800bc84 <WM_SelectWindow+0x44>)
 800bc54:	681c      	ldr	r4, [r3, #0]
 800bc56:	6494      	str	r4, [r2, #72]	; 0x48
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f7ff ffe6 	bl	800bc2a <WM__SelectTopLevelLayer>
 800bc5e:	f7fd fd13 	bl	8009688 <LCD_SetClipRectMax>
 800bc62:	4620      	mov	r0, r4
 800bc64:	f7fc fc0a 	bl	800847c <GUI_ALLOC_h2p>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800bc6e:	64da      	str	r2, [r3, #76]	; 0x4c
 800bc70:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bc74:	651a      	str	r2, [r3, #80]	; 0x50
 800bc76:	f7fd fa29 	bl	80090cc <GUI_Unlock>
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	bd70      	pop	{r4, r5, r6, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000014 	.word	0x20000014
 800bc84:	2002735c 	.word	0x2002735c

0800bc88 <WM_CreateWindowAsChild>:
 800bc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc90:	4698      	mov	r8, r3
 800bc92:	4605      	mov	r5, r0
 800bc94:	460e      	mov	r6, r1
 800bc96:	4617      	mov	r7, r2
 800bc98:	f7fd fa22 	bl	80090e0 <GUI_Lock>
 800bc9c:	4b4d      	ldr	r3, [pc, #308]	; (800bdd4 <WM_CreateWindowAsChild+0x14c>)
 800bc9e:	f8d3 9000 	ldr.w	r9, [r3]
 800bca2:	f1ba 0f00 	cmp.w	sl, #0
 800bca6:	d128      	bne.n	800bcfa <WM_CreateWindowAsChild+0x72>
 800bca8:	4b4b      	ldr	r3, [pc, #300]	; (800bdd8 <WM_CreateWindowAsChild+0x150>)
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	b353      	cbz	r3, 800bd04 <WM_CreateWindowAsChild+0x7c>
 800bcae:	4b4b      	ldr	r3, [pc, #300]	; (800bddc <WM_CreateWindowAsChild+0x154>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	7c5a      	ldrb	r2, [r3, #17]
 800bcb4:	4b4a      	ldr	r3, [pc, #296]	; (800bde0 <WM_CreateWindowAsChild+0x158>)
 800bcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	2a01      	cmp	r2, #1
 800bcbe:	d921      	bls.n	800bd04 <WM_CreateWindowAsChild+0x7c>
 800bcc0:	469a      	mov	sl, r3
 800bcc2:	4650      	mov	r0, sl
 800bcc4:	f7fc fbe4 	bl	8008490 <GUI_ALLOC_LockH>
 800bcc8:	f9b0 1000 	ldrsh.w	r1, [r0]
 800bccc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bcd0:	9001      	str	r0, [sp, #4]
 800bcd2:	440d      	add	r5, r1
 800bcd4:	4416      	add	r6, r2
 800bcd6:	b91f      	cbnz	r7, 800bce0 <WM_CreateWindowAsChild+0x58>
 800bcd8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bcdc:	1a5f      	subs	r7, r3, r1
 800bcde:	3701      	adds	r7, #1
 800bce0:	f1b8 0f00 	cmp.w	r8, #0
 800bce4:	d105      	bne.n	800bcf2 <WM_CreateWindowAsChild+0x6a>
 800bce6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800bcea:	ebc2 0803 	rsb	r8, r2, r3
 800bcee:	f108 0801 	add.w	r8, r8, #1
 800bcf2:	a801      	add	r0, sp, #4
 800bcf4:	f7fc fbda 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bcf8:	e004      	b.n	800bd04 <WM_CreateWindowAsChild+0x7c>
 800bcfa:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bcfe:	d1e0      	bne.n	800bcc2 <WM_CreateWindowAsChild+0x3a>
 800bd00:	f04f 0a00 	mov.w	sl, #0
 800bd04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bd06:	302c      	adds	r0, #44	; 0x2c
 800bd08:	f7fc fd62 	bl	80087d0 <GUI_ALLOC_AllocZero>
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d059      	beq.n	800bdc6 <WM_CreateWindowAsChild+0x13e>
 800bd12:	4a31      	ldr	r2, [pc, #196]	; (800bdd8 <WM_CreateWindowAsChild+0x150>)
 800bd14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd16:	ea49 0903 	orr.w	r9, r9, r3
 800bd1a:	8813      	ldrh	r3, [r2, #0]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	8013      	strh	r3, [r2, #0]
 800bd20:	f7fc fbb6 	bl	8008490 <GUI_ALLOC_LockH>
 800bd24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd26:	6103      	str	r3, [r0, #16]
 800bd28:	f10d 0b08 	add.w	fp, sp, #8
 800bd2c:	4b2d      	ldr	r3, [pc, #180]	; (800bde4 <WM_CreateWindowAsChild+0x15c>)
 800bd2e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bd30:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800bd34:	ea09 0303 	and.w	r3, r9, r3
 800bd38:	8005      	strh	r5, [r0, #0]
 800bd3a:	8046      	strh	r6, [r0, #2]
 800bd3c:	443d      	add	r5, r7
 800bd3e:	4446      	add	r6, r8
 800bd40:	4313      	orrs	r3, r2
 800bd42:	3d01      	subs	r5, #1
 800bd44:	3e01      	subs	r6, #1
 800bd46:	6283      	str	r3, [r0, #40]	; 0x28
 800bd48:	8085      	strh	r5, [r0, #4]
 800bd4a:	80c6      	strh	r6, [r0, #6]
 800bd4c:	4658      	mov	r0, fp
 800bd4e:	f7fc fbad 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bd52:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <WM_CreateWindowAsChild+0x160>)
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	b148      	cbz	r0, 800bd6c <WM_CreateWindowAsChild+0xe4>
 800bd58:	f7fc fb90 	bl	800847c <GUI_ALLOC_h2p>
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f7fc fb8c 	bl	800847c <GUI_ALLOC_h2p>
 800bd64:	696b      	ldr	r3, [r5, #20]
 800bd66:	6143      	str	r3, [r0, #20]
 800bd68:	616c      	str	r4, [r5, #20]
 800bd6a:	e000      	b.n	800bd6e <WM_CreateWindowAsChild+0xe6>
 800bd6c:	601c      	str	r4, [r3, #0]
 800bd6e:	4651      	mov	r1, sl
 800bd70:	4620      	mov	r0, r4
 800bd72:	f7ff fd45 	bl	800b800 <WM__InsertWindowIntoList>
 800bd76:	f019 0f20 	tst.w	r9, #32
 800bd7a:	d002      	beq.n	800bd82 <WM_CreateWindowAsChild+0xfa>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f7ff ff5f 	bl	800bc40 <WM_SelectWindow>
 800bd82:	f019 0f01 	tst.w	r9, #1
 800bd86:	bf1f      	itttt	ne
 800bd88:	4a18      	ldrne	r2, [pc, #96]	; (800bdec <WM_CreateWindowAsChild+0x164>)
 800bd8a:	6813      	ldrne	r3, [r2, #0]
 800bd8c:	3301      	addne	r3, #1
 800bd8e:	6013      	strne	r3, [r2, #0]
 800bd90:	f019 0f40 	tst.w	r9, #64	; 0x40
 800bd94:	d002      	beq.n	800bd9c <WM_CreateWindowAsChild+0x114>
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fa6a 	bl	800c270 <WM_BringToBottom>
 800bd9c:	f019 0f02 	tst.w	r9, #2
 800bda0:	d00d      	beq.n	800bdbe <WM_CreateWindowAsChild+0x136>
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7fc fb74 	bl	8008490 <GUI_ALLOC_LockH>
 800bda8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bdaa:	9000      	str	r0, [sp, #0]
 800bdac:	f043 0302 	orr.w	r3, r3, #2
 800bdb0:	6283      	str	r3, [r0, #40]	; 0x28
 800bdb2:	4658      	mov	r0, fp
 800bdb4:	f7fc fb7a 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff ff33 	bl	800bc24 <WM_InvalidateWindow>
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f7ff fe00 	bl	800b9c6 <WM__SendMsgNoData>
 800bdc6:	f7fd f981 	bl	80090cc <GUI_Unlock>
 800bdca:	4620      	mov	r0, r4
 800bdcc:	b003      	add	sp, #12
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20027370 	.word	0x20027370
 800bdd8:	20027338 	.word	0x20027338
 800bddc:	20000014 	.word	0x20000014
 800bde0:	20027340 	.word	0x20027340
 800bde4:	003f3f9f 	.word	0x003f3f9f
 800bde8:	2002735c 	.word	0x2002735c
 800bdec:	20027390 	.word	0x20027390

0800bdf0 <WM__GetNextIVR>:
 800bdf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bdf4:	4f5d      	ldr	r7, [pc, #372]	; (800bf6c <WM__GetNextIVR+0x17c>)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f000 80b1 	beq.w	800bf64 <WM__GetNextIVR+0x174>
 800be02:	4a5b      	ldr	r2, [pc, #364]	; (800bf70 <WM__GetNextIVR+0x180>)
 800be04:	6a13      	ldr	r3, [r2, #32]
 800be06:	2b01      	cmp	r3, #1
 800be08:	4614      	mov	r4, r2
 800be0a:	dd03      	ble.n	800be14 <WM__GetNextIVR+0x24>
 800be0c:	3b01      	subs	r3, #1
 800be0e:	6213      	str	r3, [r2, #32]
 800be10:	2000      	movs	r0, #0
 800be12:	e0a7      	b.n	800bf64 <WM__GetNextIVR+0x174>
 800be14:	f102 0614 	add.w	r6, r2, #20
 800be18:	69d3      	ldr	r3, [r2, #28]
 800be1a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800be1e:	3301      	adds	r3, #1
 800be20:	ad02      	add	r5, sp, #8
 800be22:	61d3      	str	r3, [r2, #28]
 800be24:	e885 0003 	stmia.w	r5, {r0, r1}
 800be28:	b923      	cbnz	r3, 800be34 <WM__GetNextIVR+0x44>
 800be2a:	8993      	ldrh	r3, [r2, #12]
 800be2c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800be30:	89d3      	ldrh	r3, [r2, #14]
 800be32:	e010      	b.n	800be56 <WM__GetNextIVR+0x66>
 800be34:	8b13      	ldrh	r3, [r2, #24]
 800be36:	8ad2      	ldrh	r2, [r2, #22]
 800be38:	f8ad 200a 	strh.w	r2, [sp, #10]
 800be3c:	3301      	adds	r3, #1
 800be3e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800be42:	b21b      	sxth	r3, r3
 800be44:	429a      	cmp	r2, r3
 800be46:	f8ad 3008 	strh.w	r3, [sp, #8]
 800be4a:	da06      	bge.n	800be5a <WM__GetNextIVR+0x6a>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800be52:	8b63      	ldrh	r3, [r4, #26]
 800be54:	3301      	adds	r3, #1
 800be56:	f8ad 300a 	strh.w	r3, [sp, #10]
 800be5a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800be5e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800be62:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800bf70 <WM__GetNextIVR+0x180>
 800be66:	429a      	cmp	r2, r3
 800be68:	dd04      	ble.n	800be74 <WM__GetNextIVR+0x84>
 800be6a:	6a23      	ldr	r3, [r4, #32]
 800be6c:	3b01      	subs	r3, #1
 800be6e:	2000      	movs	r0, #0
 800be70:	6223      	str	r3, [r4, #32]
 800be72:	e077      	b.n	800bf64 <WM__GetNextIVR+0x174>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800be78:	f7fc fb0a 	bl	8008490 <GUI_ALLOC_LockH>
 800be7c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800be80:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800be84:	9001      	str	r0, [sp, #4]
 800be86:	429a      	cmp	r2, r3
 800be88:	d11c      	bne.n	800bec4 <WM__GetNextIVR+0xd4>
 800be8a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800be8e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800be92:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800be96:	f8ad 300c 	strh.w	r3, [sp, #12]
 800be9a:	4b34      	ldr	r3, [pc, #208]	; (800bf6c <WM__GetNextIVR+0x17c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bea0:	b15a      	cbz	r2, 800beba <WM__GetNextIVR+0xca>
 800bea2:	4610      	mov	r0, r2
 800bea4:	f7fc faea 	bl	800847c <GUI_ALLOC_h2p>
 800bea8:	4680      	mov	r8, r0
 800beaa:	2200      	movs	r2, #0
 800beac:	4629      	mov	r1, r5
 800beae:	6a00      	ldr	r0, [r0, #32]
 800beb0:	f7ff fbaa 	bl	800b608 <_Findy1>
 800beb4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800beb8:	e7f2      	b.n	800bea0 <WM__GetNextIVR+0xb0>
 800beba:	9b01      	ldr	r3, [sp, #4]
 800bebc:	4629      	mov	r1, r5
 800bebe:	69d8      	ldr	r0, [r3, #28]
 800bec0:	f7ff fba2 	bl	800b608 <_Findy1>
 800bec4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800bec8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bed0:	b16a      	cbz	r2, 800beee <WM__GetNextIVR+0xfe>
 800bed2:	4610      	mov	r0, r2
 800bed4:	f7fc fad2 	bl	800847c <GUI_ALLOC_h2p>
 800bed8:	2200      	movs	r2, #0
 800beda:	4680      	mov	r8, r0
 800bedc:	4629      	mov	r1, r5
 800bede:	6a00      	ldr	r0, [r0, #32]
 800bee0:	f7ff fbe5 	bl	800b6ae <_Findx0>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d1ed      	bne.n	800bec4 <WM__GetNextIVR+0xd4>
 800bee8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800beec:	e7f0      	b.n	800bed0 <WM__GetNextIVR+0xe0>
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	4629      	mov	r1, r5
 800bef2:	69d8      	ldr	r0, [r3, #28]
 800bef4:	f7ff fbdb 	bl	800b6ae <_Findx0>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d1e3      	bne.n	800bec4 <WM__GetNextIVR+0xd4>
 800befc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800bf00:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800bf04:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	dd07      	ble.n	800bf1c <WM__GetNextIVR+0x12c>
 800bf0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf10:	e886 0003 	stmia.w	r6, {r0, r1}
 800bf14:	a801      	add	r0, sp, #4
 800bf16:	f7fc fac9 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bf1a:	e797      	b.n	800be4c <WM__GetNextIVR+0x5c>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf20:	b152      	cbz	r2, 800bf38 <WM__GetNextIVR+0x148>
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7fc faaa 	bl	800847c <GUI_ALLOC_h2p>
 800bf28:	4607      	mov	r7, r0
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	6a00      	ldr	r0, [r0, #32]
 800bf30:	f7ff fc00 	bl	800b734 <_Findx1>
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	e7f3      	b.n	800bf20 <WM__GetNextIVR+0x130>
 800bf38:	af04      	add	r7, sp, #16
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800bf40:	69d8      	ldr	r0, [r3, #28]
 800bf42:	f7ff fbf7 	bl	800b734 <_Findx1>
 800bf46:	4638      	mov	r0, r7
 800bf48:	f7fc fab0 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bf4c:	69e2      	ldr	r2, [r4, #28]
 800bf4e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bf52:	429a      	cmp	r2, r3
 800bf54:	dc89      	bgt.n	800be6a <WM__GetNextIVR+0x7a>
 800bf56:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf5a:	e886 0003 	stmia.w	r6, {r0, r1}
 800bf5e:	f7ff fcd5 	bl	800b90c <WM__ActivateClipRect>
 800bf62:	2001      	movs	r0, #1
 800bf64:	b004      	add	sp, #16
 800bf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000014 	.word	0x20000014
 800bf70:	2000023c 	.word	0x2000023c

0800bf74 <WM__InitIVRSearch>:
 800bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf78:	4e39      	ldr	r6, [pc, #228]	; (800c060 <WM__InitIVRSearch+0xec>)
 800bf7a:	6832      	ldr	r2, [r6, #0]
 800bf7c:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800bf80:	b086      	sub	sp, #24
 800bf82:	4680      	mov	r8, r0
 800bf84:	b913      	cbnz	r3, 800bf8c <WM__InitIVRSearch+0x18>
 800bf86:	f7ff fcc1 	bl	800b90c <WM__ActivateClipRect>
 800bf8a:	e064      	b.n	800c056 <WM__InitIVRSearch+0xe2>
 800bf8c:	4f35      	ldr	r7, [pc, #212]	; (800c064 <WM__InitIVRSearch+0xf0>)
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	3301      	adds	r3, #1
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	623b      	str	r3, [r7, #32]
 800bf96:	463d      	mov	r5, r7
 800bf98:	dc5d      	bgt.n	800c056 <WM__InitIVRSearch+0xe2>
 800bf9a:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800bf9c:	f7fc fa78 	bl	8008490 <GUI_ALLOC_LockH>
 800bfa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfa4:	61fb      	str	r3, [r7, #28]
 800bfa6:	4b30      	ldr	r3, [pc, #192]	; (800c068 <WM__InitIVRSearch+0xf4>)
 800bfa8:	9000      	str	r0, [sp, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	b113      	cbz	r3, 800bfb4 <WM__InitIVRSearch+0x40>
 800bfae:	ab02      	add	r3, sp, #8
 800bfb0:	3008      	adds	r0, #8
 800bfb2:	e004      	b.n	800bfbe <WM__InitIVRSearch+0x4a>
 800bfb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bfb6:	f013 0402 	ands.w	r4, r3, #2
 800bfba:	d00c      	beq.n	800bfd6 <WM__InitIVRSearch+0x62>
 800bfbc:	ab02      	add	r3, sp, #8
 800bfbe:	c803      	ldmia	r0, {r0, r1}
 800bfc0:	ac02      	add	r4, sp, #8
 800bfc2:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfc6:	f1b8 0f00 	cmp.w	r8, #0
 800bfca:	d00c      	beq.n	800bfe6 <WM__InitIVRSearch+0x72>
 800bfcc:	4641      	mov	r1, r8
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7fd f932 	bl	8009238 <GUI__IntersectRect>
 800bfd4:	e007      	b.n	800bfe6 <WM__InitIVRSearch+0x72>
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	4668      	mov	r0, sp
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	f7fc fa65 	bl	80084ac <GUI_ALLOC_UnlockH>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	e038      	b.n	800c058 <WM__InitIVRSearch+0xe4>
 800bfe6:	6833      	ldr	r3, [r6, #0]
 800bfe8:	4f20      	ldr	r7, [pc, #128]	; (800c06c <WM__InitIVRSearch+0xf8>)
 800bfea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfec:	b1c2      	cbz	r2, 800c020 <WM__InitIVRSearch+0xac>
 800bfee:	9b00      	ldr	r3, [sp, #0]
 800bff0:	6810      	ldr	r0, [r2, #0]
 800bff2:	6851      	ldr	r1, [r2, #4]
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	ab04      	add	r3, sp, #16
 800bff8:	c303      	stmia	r3!, {r0, r1}
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	b133      	cbz	r3, 800c00c <WM__InitIVRSearch+0x98>
 800bffe:	a801      	add	r0, sp, #4
 800c000:	f7fc fa54 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c004:	6838      	ldr	r0, [r7, #0]
 800c006:	f7fc fa43 	bl	8008490 <GUI_ALLOC_LockH>
 800c00a:	9001      	str	r0, [sp, #4]
 800c00c:	a904      	add	r1, sp, #16
 800c00e:	9801      	ldr	r0, [sp, #4]
 800c010:	f7ff fc4c 	bl	800b8ac <WM__Client2Screen>
 800c014:	4620      	mov	r0, r4
 800c016:	a904      	add	r1, sp, #16
 800c018:	f7fd f90e 	bl	8009238 <GUI__IntersectRect>
 800c01c:	a801      	add	r0, sp, #4
 800c01e:	e000      	b.n	800c022 <WM__InitIVRSearch+0xae>
 800c020:	4668      	mov	r0, sp
 800c022:	f7fc fa43 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	b119      	cbz	r1, 800c032 <WM__InitIVRSearch+0xbe>
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff fbbc 	bl	800b7a8 <WM__ClipAtParentBorders>
 800c030:	b128      	cbz	r0, 800c03e <WM__InitIVRSearch+0xca>
 800c032:	6833      	ldr	r3, [r6, #0]
 800c034:	4620      	mov	r0, r4
 800c036:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c038:	f7ff fbb6 	bl	800b7a8 <WM__ClipAtParentBorders>
 800c03c:	b918      	cbnz	r0, 800c046 <WM__InitIVRSearch+0xd2>
 800c03e:	6a2b      	ldr	r3, [r5, #32]
 800c040:	3b01      	subs	r3, #1
 800c042:	622b      	str	r3, [r5, #32]
 800c044:	e008      	b.n	800c058 <WM__InitIVRSearch+0xe4>
 800c046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c04a:	4b09      	ldr	r3, [pc, #36]	; (800c070 <WM__InitIVRSearch+0xfc>)
 800c04c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c050:	f7ff fece 	bl	800bdf0 <WM__GetNextIVR>
 800c054:	e000      	b.n	800c058 <WM__InitIVRSearch+0xe4>
 800c056:	2001      	movs	r0, #1
 800c058:	b006      	add	sp, #24
 800c05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c05e:	bf00      	nop
 800c060:	20000014 	.word	0x20000014
 800c064:	2000023c 	.word	0x2000023c
 800c068:	2002736c 	.word	0x2002736c
 800c06c:	2002733c 	.word	0x2002733c
 800c070:	20000248 	.word	0x20000248

0800c074 <WM_Activate>:
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <WM_Activate+0xc>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800c07e:	4770      	bx	lr
 800c080:	20000014 	.word	0x20000014

0800c084 <WM_DefaultProc>:
 800c084:	b510      	push	{r4, lr}
 800c086:	4604      	mov	r4, r0
 800c088:	6840      	ldr	r0, [r0, #4]
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	2b17      	cmp	r3, #23
 800c08e:	d010      	beq.n	800c0b2 <WM_DefaultProc+0x2e>
 800c090:	dc07      	bgt.n	800c0a2 <WM_DefaultProc+0x1e>
 800c092:	2b0e      	cmp	r3, #14
 800c094:	d00f      	beq.n	800c0b6 <WM_DefaultProc+0x32>
 800c096:	2b14      	cmp	r3, #20
 800c098:	d115      	bne.n	800c0c6 <WM_DefaultProc+0x42>
 800c09a:	68e1      	ldr	r1, [r4, #12]
 800c09c:	f000 f99e 	bl	800c3dc <WM__GetClientRectEx>
 800c0a0:	e011      	b.n	800c0c6 <WM_DefaultProc+0x42>
 800c0a2:	2b22      	cmp	r3, #34	; 0x22
 800c0a4:	d00c      	beq.n	800c0c0 <WM_DefaultProc+0x3c>
 800c0a6:	2b28      	cmp	r3, #40	; 0x28
 800c0a8:	d10d      	bne.n	800c0c6 <WM_DefaultProc+0x42>
 800c0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ae:	f7ff bdb9 	b.w	800bc24 <WM_InvalidateWindow>
 800c0b2:	60e0      	str	r0, [r4, #12]
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0bc:	f000 b920 	b.w	800c300 <WM_SendToParent>
 800c0c0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c0c4:	e000      	b.n	800c0c8 <WM_DefaultProc+0x44>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60e3      	str	r3, [r4, #12]
 800c0ca:	bd10      	pop	{r4, pc}

0800c0cc <_cbBackWin>:
 800c0cc:	6803      	ldr	r3, [r0, #0]
 800c0ce:	2b0e      	cmp	r3, #14
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	d002      	beq.n	800c0dc <_cbBackWin+0x10>
 800c0d6:	2b0f      	cmp	r3, #15
 800c0d8:	d009      	beq.n	800c0ee <_cbBackWin+0x22>
 800c0da:	e020      	b.n	800c11e <_cbBackWin+0x52>
 800c0dc:	68c3      	ldr	r3, [r0, #12]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	2a01      	cmp	r2, #1
 800c0e2:	d121      	bne.n	800c128 <_cbBackWin+0x5c>
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ea:	f7fc bf8f 	b.w	800900c <GUI_StoreKey>
 800c0ee:	4a0f      	ldr	r2, [pc, #60]	; (800c12c <_cbBackWin+0x60>)
 800c0f0:	6843      	ldr	r3, [r0, #4]
 800c0f2:	6811      	ldr	r1, [r2, #0]
 800c0f4:	428b      	cmp	r3, r1
 800c0f6:	d006      	beq.n	800c106 <_cbBackWin+0x3a>
 800c0f8:	6852      	ldr	r2, [r2, #4]
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	bf0c      	ite	eq
 800c0fe:	2301      	moveq	r3, #1
 800c100:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800c104:	e000      	b.n	800c108 <_cbBackWin+0x3c>
 800c106:	2300      	movs	r3, #0
 800c108:	4a09      	ldr	r2, [pc, #36]	; (800c130 <_cbBackWin+0x64>)
 800c10a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c10e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c112:	4298      	cmp	r0, r3
 800c114:	d003      	beq.n	800c11e <_cbBackWin+0x52>
 800c116:	f7fc fcaf 	bl	8008a78 <GUI_SetBkColor>
 800c11a:	f7fc fd85 	bl	8008c28 <GUI_Clear>
 800c11e:	4620      	mov	r0, r4
 800c120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c124:	f7ff bfae 	b.w	800c084 <WM_DefaultProc>
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	bf00      	nop
 800c12c:	20027340 	.word	0x20027340
 800c130:	20027374 	.word	0x20027374

0800c134 <WM_Init>:
 800c134:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c138:	4d2a      	ldr	r5, [pc, #168]	; (800c1e4 <WM_Init+0xb0>)
 800c13a:	7828      	ldrb	r0, [r5, #0]
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d14d      	bne.n	800c1dc <WM_Init+0xa8>
 800c140:	4b29      	ldr	r3, [pc, #164]	; (800c1e8 <WM_Init+0xb4>)
 800c142:	4e2a      	ldr	r6, [pc, #168]	; (800c1ec <WM_Init+0xb8>)
 800c144:	6018      	str	r0, [r3, #0]
 800c146:	4b2a      	ldr	r3, [pc, #168]	; (800c1f0 <WM_Init+0xbc>)
 800c148:	4f2a      	ldr	r7, [pc, #168]	; (800c1f4 <WM_Init+0xc0>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c220 <WM_Init+0xec>
 800c150:	6458      	str	r0, [r3, #68]	; 0x44
 800c152:	4b29      	ldr	r3, [pc, #164]	; (800c1f8 <WM_Init+0xc4>)
 800c154:	60a8      	str	r0, [r5, #8]
 800c156:	8018      	strh	r0, [r3, #0]
 800c158:	4b28      	ldr	r3, [pc, #160]	; (800c1fc <WM_Init+0xc8>)
 800c15a:	4604      	mov	r4, r0
 800c15c:	8018      	strh	r0, [r3, #0]
 800c15e:	4620      	mov	r0, r4
 800c160:	f7fc fe50 	bl	8008e04 <GUI_DEVICE__GetpDriver>
 800c164:	b1a8      	cbz	r0, 800c192 <WM_Init+0x5e>
 800c166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c16a:	2302      	movs	r3, #2
 800c16c:	2100      	movs	r1, #0
 800c16e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c172:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800c176:	461a      	mov	r2, r3
 800c178:	9103      	str	r1, [sp, #12]
 800c17a:	9602      	str	r6, [sp, #8]
 800c17c:	4608      	mov	r0, r1
 800c17e:	f7ff fd83 	bl	800bc88 <WM_CreateWindowAsChild>
 800c182:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c186:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800c18a:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800c18e:	f7ff fd49 	bl	800bc24 <WM_InvalidateWindow>
 800c192:	3401      	adds	r4, #1
 800c194:	2c02      	cmp	r4, #2
 800c196:	d1e2      	bne.n	800c15e <WM_Init+0x2a>
 800c198:	4819      	ldr	r0, [pc, #100]	; (800c200 <WM_Init+0xcc>)
 800c19a:	f000 f917 	bl	800c3cc <WM__AddCriticalHandle>
 800c19e:	4819      	ldr	r0, [pc, #100]	; (800c204 <WM_Init+0xd0>)
 800c1a0:	f000 f914 	bl	800c3cc <WM__AddCriticalHandle>
 800c1a4:	4818      	ldr	r0, [pc, #96]	; (800c208 <WM_Init+0xd4>)
 800c1a6:	f000 f911 	bl	800c3cc <WM__AddCriticalHandle>
 800c1aa:	4818      	ldr	r0, [pc, #96]	; (800c20c <WM_Init+0xd8>)
 800c1ac:	f000 f90e 	bl	800c3cc <WM__AddCriticalHandle>
 800c1b0:	4817      	ldr	r0, [pc, #92]	; (800c210 <WM_Init+0xdc>)
 800c1b2:	f000 f90b 	bl	800c3cc <WM__AddCriticalHandle>
 800c1b6:	4817      	ldr	r0, [pc, #92]	; (800c214 <WM_Init+0xe0>)
 800c1b8:	f000 f908 	bl	800c3cc <WM__AddCriticalHandle>
 800c1bc:	4b0d      	ldr	r3, [pc, #52]	; (800c1f4 <WM_Init+0xc0>)
 800c1be:	6818      	ldr	r0, [r3, #0]
 800c1c0:	f7ff fd3e 	bl	800bc40 <WM_SelectWindow>
 800c1c4:	f7ff ff56 	bl	800c074 <WM_Activate>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	702b      	strb	r3, [r5, #0]
 800c1cc:	4812      	ldr	r0, [pc, #72]	; (800c218 <WM_Init+0xe4>)
 800c1ce:	4b13      	ldr	r3, [pc, #76]	; (800c21c <WM_Init+0xe8>)
 800c1d0:	626b      	str	r3, [r5, #36]	; 0x24
 800c1d2:	b004      	add	sp, #16
 800c1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	f7fc be00 	b.w	8008ddc <GUI__RegisterExit>
 800c1dc:	b004      	add	sp, #16
 800c1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e2:	bf00      	nop
 800c1e4:	2000023c 	.word	0x2000023c
 800c1e8:	2002735c 	.word	0x2002735c
 800c1ec:	0800c0cd 	.word	0x0800c0cd
 800c1f0:	20000014 	.word	0x20000014
 800c1f4:	20027340 	.word	0x20027340
 800c1f8:	20027358 	.word	0x20027358
 800c1fc:	20027338 	.word	0x20027338
 800c200:	200273b4 	.word	0x200273b4
 800c204:	200273a4 	.word	0x200273a4
 800c208:	20027394 	.word	0x20027394
 800c20c:	200273bc 	.word	0x200273bc
 800c210:	200273ac 	.word	0x200273ac
 800c214:	2002739c 	.word	0x2002739c
 800c218:	20000260 	.word	0x20000260
 800c21c:	0800b56d 	.word	0x0800b56d
 800c220:	20027374 	.word	0x20027374

0800c224 <WM_GetDesktopWindow>:
 800c224:	4b03      	ldr	r3, [pc, #12]	; (800c234 <WM_GetDesktopWindow+0x10>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	7c5a      	ldrb	r2, [r3, #17]
 800c22a:	4b03      	ldr	r3, [pc, #12]	; (800c238 <WM_GetDesktopWindow+0x14>)
 800c22c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	20000014 	.word	0x20000014
 800c238:	20027340 	.word	0x20027340

0800c23c <WM_GetFirstChild>:
 800c23c:	b510      	push	{r4, lr}
 800c23e:	4604      	mov	r4, r0
 800c240:	b138      	cbz	r0, 800c252 <WM_GetFirstChild+0x16>
 800c242:	f7fc ff4d 	bl	80090e0 <GUI_Lock>
 800c246:	4620      	mov	r0, r4
 800c248:	f7fc f918 	bl	800847c <GUI_ALLOC_h2p>
 800c24c:	69c4      	ldr	r4, [r0, #28]
 800c24e:	f7fc ff3d 	bl	80090cc <GUI_Unlock>
 800c252:	4620      	mov	r0, r4
 800c254:	bd10      	pop	{r4, pc}

0800c256 <WM_GetParent>:
 800c256:	b510      	push	{r4, lr}
 800c258:	4604      	mov	r4, r0
 800c25a:	b138      	cbz	r0, 800c26c <WM_GetParent+0x16>
 800c25c:	f7fc ff40 	bl	80090e0 <GUI_Lock>
 800c260:	4620      	mov	r0, r4
 800c262:	f7fc f90b 	bl	800847c <GUI_ALLOC_h2p>
 800c266:	6984      	ldr	r4, [r0, #24]
 800c268:	f7fc ff30 	bl	80090cc <GUI_Unlock>
 800c26c:	4620      	mov	r0, r4
 800c26e:	bd10      	pop	{r4, pc}

0800c270 <WM_BringToBottom>:
 800c270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c274:	4604      	mov	r4, r0
 800c276:	b087      	sub	sp, #28
 800c278:	f7fc ff32 	bl	80090e0 <GUI_Lock>
 800c27c:	2c00      	cmp	r4, #0
 800c27e:	d03a      	beq.n	800c2f6 <WM_BringToBottom+0x86>
 800c280:	4620      	mov	r0, r4
 800c282:	f7fc f905 	bl	8008490 <GUI_ALLOC_LockH>
 800c286:	4603      	mov	r3, r0
 800c288:	9001      	str	r0, [sp, #4]
 800c28a:	c803      	ldmia	r0, {r0, r1}
 800c28c:	ad04      	add	r5, sp, #16
 800c28e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c292:	a801      	add	r0, sp, #4
 800c294:	6a1e      	ldr	r6, [r3, #32]
 800c296:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800c29a:	f7fc f907 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 f862 	bl	800c368 <WM__GetPrevSibling>
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	b330      	cbz	r0, 800c2f6 <WM_BringToBottom+0x86>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7ff ffd4 	bl	800c256 <WM_GetParent>
 800c2ae:	f019 0f02 	tst.w	r9, #2
 800c2b2:	4680      	mov	r8, r0
 800c2b4:	d004      	beq.n	800c2c0 <WM_BringToBottom+0x50>
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	4632      	mov	r2, r6
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f7ff fc6e 	bl	800bb9c <WM__InvalidateRectEx>
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f7fc f8e5 	bl	8008490 <GUI_ALLOC_LockH>
 800c2c6:	9001      	str	r0, [sp, #4]
 800c2c8:	4640      	mov	r0, r8
 800c2ca:	f7fc f8e1 	bl	8008490 <GUI_ALLOC_LockH>
 800c2ce:	9003      	str	r0, [sp, #12]
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7fc f8dd 	bl	8008490 <GUI_ALLOC_LockH>
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	9a01      	ldr	r2, [sp, #4]
 800c2da:	69d9      	ldr	r1, [r3, #28]
 800c2dc:	6206      	str	r6, [r0, #32]
 800c2de:	9002      	str	r0, [sp, #8]
 800c2e0:	6211      	str	r1, [r2, #32]
 800c2e2:	a801      	add	r0, sp, #4
 800c2e4:	61dc      	str	r4, [r3, #28]
 800c2e6:	f7fc f8e1 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c2ea:	a803      	add	r0, sp, #12
 800c2ec:	f7fc f8de 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c2f0:	a802      	add	r0, sp, #8
 800c2f2:	f7fc f8db 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c2f6:	f7fc fee9 	bl	80090cc <GUI_Unlock>
 800c2fa:	b007      	add	sp, #28
 800c2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c300 <WM_SendToParent>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4605      	mov	r5, r0
 800c304:	460c      	mov	r4, r1
 800c306:	b169      	cbz	r1, 800c324 <WM_SendToParent+0x24>
 800c308:	f7fc feea 	bl	80090e0 <GUI_Lock>
 800c30c:	4628      	mov	r0, r5
 800c30e:	f7ff ffa2 	bl	800c256 <WM_GetParent>
 800c312:	b118      	cbz	r0, 800c31c <WM_SendToParent+0x1c>
 800c314:	60a5      	str	r5, [r4, #8]
 800c316:	4621      	mov	r1, r4
 800c318:	f000 f83a 	bl	800c390 <WM__SendMessage>
 800c31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c320:	f7fc bed4 	b.w	80090cc <GUI_Unlock>
 800c324:	bd38      	pop	{r3, r4, r5, pc}

0800c326 <WM__GetFirstSibling>:
 800c326:	b508      	push	{r3, lr}
 800c328:	f7ff ff95 	bl	800c256 <WM_GetParent>
 800c32c:	b118      	cbz	r0, 800c336 <WM__GetFirstSibling+0x10>
 800c32e:	f7fc f8a5 	bl	800847c <GUI_ALLOC_h2p>
 800c332:	69c0      	ldr	r0, [r0, #28]
 800c334:	bd08      	pop	{r3, pc}
 800c336:	bd08      	pop	{r3, pc}

0800c338 <WM__GetOrgX_AA>:
 800c338:	4b04      	ldr	r3, [pc, #16]	; (800c34c <WM__GetOrgX_AA+0x14>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800c340:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c342:	b112      	cbz	r2, 800c34a <WM__GetOrgX_AA+0x12>
 800c344:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c348:	4358      	muls	r0, r3
 800c34a:	4770      	bx	lr
 800c34c:	20000014 	.word	0x20000014

0800c350 <WM__GetOrgY_AA>:
 800c350:	4b04      	ldr	r3, [pc, #16]	; (800c364 <WM__GetOrgY_AA+0x14>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800c358:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c35a:	b112      	cbz	r2, 800c362 <WM__GetOrgY_AA+0x12>
 800c35c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c360:	4358      	muls	r0, r3
 800c362:	4770      	bx	lr
 800c364:	20000014 	.word	0x20000014

0800c368 <WM__GetPrevSibling>:
 800c368:	b538      	push	{r3, r4, r5, lr}
 800c36a:	4605      	mov	r5, r0
 800c36c:	f7ff ffdb 	bl	800c326 <WM__GetFirstSibling>
 800c370:	4604      	mov	r4, r0
 800c372:	b154      	cbz	r4, 800c38a <WM__GetPrevSibling+0x22>
 800c374:	42ac      	cmp	r4, r5
 800c376:	d007      	beq.n	800c388 <WM__GetPrevSibling+0x20>
 800c378:	4620      	mov	r0, r4
 800c37a:	f7fc f87f 	bl	800847c <GUI_ALLOC_h2p>
 800c37e:	6a03      	ldr	r3, [r0, #32]
 800c380:	429d      	cmp	r5, r3
 800c382:	d002      	beq.n	800c38a <WM__GetPrevSibling+0x22>
 800c384:	461c      	mov	r4, r3
 800c386:	e7f4      	b.n	800c372 <WM__GetPrevSibling+0xa>
 800c388:	2400      	movs	r4, #0
 800c38a:	4620      	mov	r0, r4
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c390 <WM__SendMessage>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	4c0d      	ldr	r4, [pc, #52]	; (800c3c8 <WM__SendMessage+0x38>)
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	2b13      	cmp	r3, #19
 800c398:	4606      	mov	r6, r0
 800c39a:	460d      	mov	r5, r1
 800c39c:	dc12      	bgt.n	800c3c4 <WM__SendMessage+0x34>
 800c39e:	f7fc f86d 	bl	800847c <GUI_ALLOC_h2p>
 800c3a2:	6902      	ldr	r2, [r0, #16]
 800c3a4:	606e      	str	r6, [r5, #4]
 800c3a6:	b142      	cbz	r2, 800c3ba <WM__SendMessage+0x2a>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	6023      	str	r3, [r4, #0]
 800c3b0:	4790      	blx	r2
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3c0:	f7ff be60 	b.w	800c084 <WM_DefaultProc>
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
 800c3c6:	bf00      	nop
 800c3c8:	2000026c 	.word	0x2000026c

0800c3cc <WM__AddCriticalHandle>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	; (800c3d8 <WM__AddCriticalHandle+0xc>)
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	6002      	str	r2, [r0, #0]
 800c3d2:	6018      	str	r0, [r3, #0]
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	2002737c 	.word	0x2002737c

0800c3dc <WM__GetClientRectEx>:
 800c3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3de:	460d      	mov	r5, r1
 800c3e0:	b158      	cbz	r0, 800c3fa <WM__GetClientRectEx+0x1e>
 800c3e2:	b151      	cbz	r1, 800c3fa <WM__GetClientRectEx+0x1e>
 800c3e4:	f7fc f854 	bl	8008490 <GUI_ALLOC_LockH>
 800c3e8:	ac02      	add	r4, sp, #8
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c3f0:	f7ff faf4 	bl	800b9dc <WM__GetClientRectWin>
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f7fc f859 	bl	80084ac <GUI_ALLOC_UnlockH>
 800c3fa:	b003      	add	sp, #12
 800c3fc:	bd30      	pop	{r4, r5, pc}

0800c3fe <_GetIndexMask_0>:
 800c3fe:	b508      	push	{r3, lr}
 800c400:	f7fd fb4e 	bl	8009aa0 <LCD_GetNumColors>
 800c404:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c408:	d010      	beq.n	800c42c <_GetIndexMask_0+0x2e>
 800c40a:	287f      	cmp	r0, #127	; 0x7f
 800c40c:	d810      	bhi.n	800c430 <_GetIndexMask_0+0x32>
 800c40e:	283f      	cmp	r0, #63	; 0x3f
 800c410:	d810      	bhi.n	800c434 <_GetIndexMask_0+0x36>
 800c412:	281f      	cmp	r0, #31
 800c414:	d810      	bhi.n	800c438 <_GetIndexMask_0+0x3a>
 800c416:	280f      	cmp	r0, #15
 800c418:	d810      	bhi.n	800c43c <_GetIndexMask_0+0x3e>
 800c41a:	2807      	cmp	r0, #7
 800c41c:	d810      	bhi.n	800c440 <_GetIndexMask_0+0x42>
 800c41e:	2803      	cmp	r0, #3
 800c420:	d810      	bhi.n	800c444 <_GetIndexMask_0+0x46>
 800c422:	2801      	cmp	r0, #1
 800c424:	bf94      	ite	ls
 800c426:	2000      	movls	r0, #0
 800c428:	2001      	movhi	r0, #1
 800c42a:	e00c      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c42c:	2008      	movs	r0, #8
 800c42e:	e00a      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c430:	2007      	movs	r0, #7
 800c432:	e008      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c434:	2006      	movs	r0, #6
 800c436:	e006      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c438:	2005      	movs	r0, #5
 800c43a:	e004      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c43c:	2004      	movs	r0, #4
 800c43e:	e002      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c440:	2003      	movs	r0, #3
 800c442:	e000      	b.n	800c446 <_GetIndexMask_0+0x48>
 800c444:	2002      	movs	r0, #2
 800c446:	2301      	movs	r3, #1
 800c448:	fa03 f000 	lsl.w	r0, r3, r0
 800c44c:	3801      	subs	r0, #1
 800c44e:	bd08      	pop	{r3, pc}

0800c450 <_Index2Color_0>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4604      	mov	r4, r0
 800c454:	f7fd fb24 	bl	8009aa0 <LCD_GetNumColors>
 800c458:	4605      	mov	r5, r0
 800c45a:	f7fd fb3f 	bl	8009adc <LCD_GetPalette>
 800c45e:	42a5      	cmp	r5, r4
 800c460:	d903      	bls.n	800c46a <_Index2Color_0+0x1a>
 800c462:	b118      	cbz	r0, 800c46c <_Index2Color_0+0x1c>
 800c464:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c468:	bd38      	pop	{r3, r4, r5, pc}
 800c46a:	2000      	movs	r0, #0
 800c46c:	bd38      	pop	{r3, r4, r5, pc}

0800c46e <_Color2Index_0>:
 800c46e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c472:	4681      	mov	r9, r0
 800c474:	f7fd fb14 	bl	8009aa0 <LCD_GetNumColors>
 800c478:	4607      	mov	r7, r0
 800c47a:	f7fd fb2f 	bl	8009adc <LCD_GetPalette>
 800c47e:	4606      	mov	r6, r0
 800c480:	b1e0      	cbz	r0, 800c4bc <_Color2Index_0+0x4e>
 800c482:	2000      	movs	r0, #0
 800c484:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 800c488:	454b      	cmp	r3, r9
 800c48a:	d017      	beq.n	800c4bc <_Color2Index_0+0x4e>
 800c48c:	3001      	adds	r0, #1
 800c48e:	4287      	cmp	r7, r0
 800c490:	dcf8      	bgt.n	800c484 <_Color2Index_0+0x16>
 800c492:	2400      	movs	r4, #0
 800c494:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800c498:	4625      	mov	r5, r4
 800c49a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800c49e:	4648      	mov	r0, r9
 800c4a0:	f7fc fa36 	bl	8008910 <GUI_CalcColorDist>
 800c4a4:	4580      	cmp	r8, r0
 800c4a6:	bf88      	it	hi
 800c4a8:	462c      	movhi	r4, r5
 800c4aa:	f105 0501 	add.w	r5, r5, #1
 800c4ae:	bf88      	it	hi
 800c4b0:	4680      	movhi	r8, r0
 800c4b2:	42af      	cmp	r7, r5
 800c4b4:	dcf1      	bgt.n	800c49a <_Color2Index_0+0x2c>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c4c0 <LCD_Index2Color_8888>:
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <GUIMONO_DispChar>:
 800c4c4:	4b4d      	ldr	r3, [pc, #308]	; (800c5fc <GUIMONO_DispChar+0x138>)
 800c4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	69d1      	ldr	r1, [r2, #28]
 800c4ce:	69cc      	ldr	r4, [r1, #28]
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	4283      	cmp	r3, r0
 800c4d4:	b08b      	sub	sp, #44	; 0x2c
 800c4d6:	d808      	bhi.n	800c4ea <GUIMONO_DispChar+0x26>
 800c4d8:	89e5      	ldrh	r5, [r4, #14]
 800c4da:	4285      	cmp	r5, r0
 800c4dc:	d305      	bcc.n	800c4ea <GUIMONO_DispChar+0x26>
 800c4de:	6825      	ldr	r5, [r4, #0]
 800c4e0:	9506      	str	r5, [sp, #24]
 800c4e2:	1ac3      	subs	r3, r0, r3
 800c4e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c4e8:	e013      	b.n	800c512 <GUIMONO_DispChar+0x4e>
 800c4ea:	68a3      	ldr	r3, [r4, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d07c      	beq.n	800c5ea <GUIMONO_DispChar+0x126>
 800c4f0:	881d      	ldrh	r5, [r3, #0]
 800c4f2:	42a8      	cmp	r0, r5
 800c4f4:	d379      	bcc.n	800c5ea <GUIMONO_DispChar+0x126>
 800c4f6:	885e      	ldrh	r6, [r3, #2]
 800c4f8:	4286      	cmp	r6, r0
 800c4fa:	d376      	bcc.n	800c5ea <GUIMONO_DispChar+0x126>
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	6866      	ldr	r6, [r4, #4]
 800c500:	9606      	str	r6, [sp, #24]
 800c502:	1b40      	subs	r0, r0, r5
 800c504:	b280      	uxth	r0, r0
 800c506:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800c50a:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 800c50e:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800c512:	9309      	str	r3, [sp, #36]	; 0x24
 800c514:	1c58      	adds	r0, r3, #1
 800c516:	d068      	beq.n	800c5ea <GUIMONO_DispChar+0x126>
 800c518:	f891 b018 	ldrb.w	fp, [r1, #24]
 800c51c:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 800c520:	7ca1      	ldrb	r1, [r4, #18]
 800c522:	4d36      	ldr	r5, [pc, #216]	; (800c5fc <GUIMONO_DispChar+0x138>)
 800c524:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 800c528:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 800c52c:	f894 a010 	ldrb.w	sl, [r4, #16]
 800c530:	fb1b f301 	smulbb	r3, fp, r1
 800c534:	4648      	mov	r0, r9
 800c536:	9307      	str	r3, [sp, #28]
 800c538:	f7fc ff0a 	bl	8009350 <LCD_SetDrawMode>
 800c53c:	6829      	ldr	r1, [r5, #0]
 800c53e:	9b07      	ldr	r3, [sp, #28]
 800c540:	69ca      	ldr	r2, [r1, #28]
 800c542:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c544:	9105      	str	r1, [sp, #20]
 800c546:	9008      	str	r0, [sp, #32]
 800c548:	9906      	ldr	r1, [sp, #24]
 800c54a:	4618      	mov	r0, r3
 800c54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54e:	fb00 1003 	mla	r0, r0, r3, r1
 800c552:	9004      	str	r0, [sp, #16]
 800c554:	7ca3      	ldrb	r3, [r4, #18]
 800c556:	9303      	str	r3, [sp, #12]
 800c558:	2301      	movs	r3, #1
 800c55a:	9302      	str	r3, [sp, #8]
 800c55c:	7ed3      	ldrb	r3, [r2, #27]
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	7e93      	ldrb	r3, [r2, #26]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4652      	mov	r2, sl
 800c566:	465b      	mov	r3, fp
 800c568:	4641      	mov	r1, r8
 800c56a:	4638      	mov	r0, r7
 800c56c:	f7fc ff7a 	bl	8009464 <LCD_DrawBitmap>
 800c570:	1c73      	adds	r3, r6, #1
 800c572:	d01a      	beq.n	800c5aa <GUIMONO_DispChar+0xe6>
 800c574:	f049 0002 	orr.w	r0, r9, #2
 800c578:	f7fc feea 	bl	8009350 <LCD_SetDrawMode>
 800c57c:	682a      	ldr	r2, [r5, #0]
 800c57e:	9906      	ldr	r1, [sp, #24]
 800c580:	69d3      	ldr	r3, [r2, #28]
 800c582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c584:	9205      	str	r2, [sp, #20]
 800c586:	9a07      	ldr	r2, [sp, #28]
 800c588:	fb02 1606 	mla	r6, r2, r6, r1
 800c58c:	9604      	str	r6, [sp, #16]
 800c58e:	7ca2      	ldrb	r2, [r4, #18]
 800c590:	9203      	str	r2, [sp, #12]
 800c592:	2201      	movs	r2, #1
 800c594:	9202      	str	r2, [sp, #8]
 800c596:	7eda      	ldrb	r2, [r3, #27]
 800c598:	9201      	str	r2, [sp, #4]
 800c59a:	7e9b      	ldrb	r3, [r3, #26]
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	4652      	mov	r2, sl
 800c5a0:	465b      	mov	r3, fp
 800c5a2:	4641      	mov	r1, r8
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7fc ff5d 	bl	8009464 <LCD_DrawBitmap>
 800c5aa:	682b      	ldr	r3, [r5, #0]
 800c5ac:	69db      	ldr	r3, [r3, #28]
 800c5ae:	7e5a      	ldrb	r2, [r3, #25]
 800c5b0:	7e1b      	ldrb	r3, [r3, #24]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d915      	bls.n	800c5e2 <GUIMONO_DispChar+0x11e>
 800c5b6:	f1b9 0f02 	cmp.w	r9, #2
 800c5ba:	d012      	beq.n	800c5e2 <GUIMONO_DispChar+0x11e>
 800c5bc:	f089 0004 	eor.w	r0, r9, #4
 800c5c0:	f7fc fec6 	bl	8009350 <LCD_SetDrawMode>
 800c5c4:	4b0d      	ldr	r3, [pc, #52]	; (800c5fc <GUIMONO_DispChar+0x138>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	7e18      	ldrb	r0, [r3, #24]
 800c5cc:	7ed9      	ldrb	r1, [r3, #27]
 800c5ce:	7e9a      	ldrb	r2, [r3, #26]
 800c5d0:	7e5b      	ldrb	r3, [r3, #25]
 800c5d2:	fb00 8101 	mla	r1, r0, r1, r8
 800c5d6:	4443      	add	r3, r8
 800c5d8:	fb0a 7202 	mla	r2, sl, r2, r7
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f7fc ff15 	bl	800940c <LCD_FillRect>
 800c5e2:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800c5e6:	f7fc feb3 	bl	8009350 <LCD_SetDrawMode>
 800c5ea:	4b04      	ldr	r3, [pc, #16]	; (800c5fc <GUIMONO_DispChar+0x138>)
 800c5ec:	7c61      	ldrb	r1, [r4, #17]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c5f2:	440b      	add	r3, r1
 800c5f4:	8453      	strh	r3, [r2, #34]	; 0x22
 800c5f6:	b00b      	add	sp, #44	; 0x2c
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	20000014 	.word	0x20000014

0800c600 <GUIMONO_GetCharDistX>:
 800c600:	4b04      	ldr	r3, [pc, #16]	; (800c614 <GUIMONO_GetCharDistX+0x14>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	b109      	cbz	r1, 800c60e <GUIMONO_GetCharDistX+0xe>
 800c60a:	7c1a      	ldrb	r2, [r3, #16]
 800c60c:	600a      	str	r2, [r1, #0]
 800c60e:	7c58      	ldrb	r0, [r3, #17]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20000014 	.word	0x20000014

0800c618 <GUIMONO_GetFontInfo>:
 800c618:	2302      	movs	r3, #2
 800c61a:	800b      	strh	r3, [r1, #0]
 800c61c:	4770      	bx	lr

0800c61e <GUIMONO_IsInFont>:
 800c61e:	69c3      	ldr	r3, [r0, #28]
 800c620:	899a      	ldrh	r2, [r3, #12]
 800c622:	428a      	cmp	r2, r1
 800c624:	d802      	bhi.n	800c62c <GUIMONO_IsInFont+0xe>
 800c626:	89da      	ldrh	r2, [r3, #14]
 800c628:	428a      	cmp	r2, r1
 800c62a:	d20f      	bcs.n	800c64c <GUIMONO_IsInFont+0x2e>
 800c62c:	6898      	ldr	r0, [r3, #8]
 800c62e:	b180      	cbz	r0, 800c652 <GUIMONO_IsInFont+0x34>
 800c630:	8803      	ldrh	r3, [r0, #0]
 800c632:	4299      	cmp	r1, r3
 800c634:	d30c      	bcc.n	800c650 <GUIMONO_IsInFont+0x32>
 800c636:	8842      	ldrh	r2, [r0, #2]
 800c638:	428a      	cmp	r2, r1
 800c63a:	d309      	bcc.n	800c650 <GUIMONO_IsInFont+0x32>
 800c63c:	1ac9      	subs	r1, r1, r3
 800c63e:	6843      	ldr	r3, [r0, #4]
 800c640:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 800c644:	43c0      	mvns	r0, r0
 800c646:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800c64a:	4770      	bx	lr
 800c64c:	2001      	movs	r0, #1
 800c64e:	4770      	bx	lr
 800c650:	2000      	movs	r0, #0
 800c652:	4770      	bx	lr

0800c654 <GUI__MixColorsBulk>:
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	b087      	sub	sp, #28
 800c65a:	4606      	mov	r6, r0
 800c65c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c664:	009d      	lsls	r5, r3, #2
 800c666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c668:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c66c:	9303      	str	r3, [sp, #12]
 800c66e:	2300      	movs	r3, #0
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	4b19      	ldr	r3, [pc, #100]	; (800c6d8 <GUI__MixColorsBulk+0x84>)
 800c674:	460f      	mov	r7, r1
 800c676:	4690      	mov	r8, r2
 800c678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c67a:	9901      	ldr	r1, [sp, #4]
 800c67c:	4291      	cmp	r1, r2
 800c67e:	d028      	beq.n	800c6d2 <GUI__MixColorsBulk+0x7e>
 800c680:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800c684:	9702      	str	r7, [sp, #8]
 800c686:	46c2      	mov	sl, r8
 800c688:	46b3      	mov	fp, r6
 800c68a:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c68e:	9c02      	ldr	r4, [sp, #8]
 800c690:	9904      	ldr	r1, [sp, #16]
 800c692:	9305      	str	r3, [sp, #20]
 800c694:	0e02      	lsrs	r2, r0, #24
 800c696:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c69a:	434a      	muls	r2, r1
 800c69c:	21ff      	movs	r1, #255	; 0xff
 800c69e:	fbb2 f2f1 	udiv	r2, r2, r1
 800c6a2:	f854 1b04 	ldr.w	r1, [r4], #4
 800c6a6:	9402      	str	r4, [sp, #8]
 800c6a8:	b2d2      	uxtb	r2, r2
 800c6aa:	681c      	ldr	r4, [r3, #0]
 800c6ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c6b0:	47a0      	blx	r4
 800c6b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c6b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c6ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c6be:	9b05      	ldr	r3, [sp, #20]
 800c6c0:	d1e3      	bne.n	800c68a <GUI__MixColorsBulk+0x36>
 800c6c2:	9a03      	ldr	r2, [sp, #12]
 800c6c4:	4417      	add	r7, r2
 800c6c6:	9a01      	ldr	r2, [sp, #4]
 800c6c8:	3201      	adds	r2, #1
 800c6ca:	442e      	add	r6, r5
 800c6cc:	44a8      	add	r8, r5
 800c6ce:	9201      	str	r2, [sp, #4]
 800c6d0:	e7d2      	b.n	800c678 <GUI__MixColorsBulk+0x24>
 800c6d2:	b007      	add	sp, #28
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	20000048 	.word	0x20000048

0800c6dc <GUI__MixColors>:
 800c6dc:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800c6e0:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800c6e4:	0e0b      	lsrs	r3, r1, #24
 800c6e6:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800c6ea:	bf08      	it	eq
 800c6ec:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800c6f0:	b530      	push	{r4, r5, lr}
 800c6f2:	435a      	muls	r2, r3
 800c6f4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c6f8:	23ff      	movs	r3, #255	; 0xff
 800c6fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6fe:	1a9d      	subs	r5, r3, r2
 800c700:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 800c704:	0a0c      	lsrs	r4, r1, #8
 800c706:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 800c70a:	436c      	muls	r4, r5
 800c70c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800c710:	fb02 4403 	mla	r4, r2, r3, r4
 800c714:	4342      	muls	r2, r0
 800c716:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800c71a:	fb05 2103 	mla	r1, r5, r3, r2
 800c71e:	0a09      	lsrs	r1, r1, #8
 800c720:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800c724:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800c728:	ea44 0001 	orr.w	r0, r4, r1
 800c72c:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800c730:	bd30      	pop	{r4, r5, pc}
	...

0800c734 <_OnExit>:
 800c734:	b510      	push	{r4, lr}
 800c736:	4c08      	ldr	r4, [pc, #32]	; (800c758 <_OnExit+0x24>)
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	f7fb fe95 	bl	8008468 <GUI_ALLOC_FreeFixedBlock>
 800c73e:	6860      	ldr	r0, [r4, #4]
 800c740:	f7fb fe92 	bl	8008468 <GUI_ALLOC_FreeFixedBlock>
 800c744:	68a0      	ldr	r0, [r4, #8]
 800c746:	f7fb fe8f 	bl	8008468 <GUI_ALLOC_FreeFixedBlock>
 800c74a:	2300      	movs	r3, #0
 800c74c:	60a3      	str	r3, [r4, #8]
 800c74e:	6063      	str	r3, [r4, #4]
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	60e3      	str	r3, [r4, #12]
 800c754:	6123      	str	r3, [r4, #16]
 800c756:	bd10      	pop	{r4, pc}
 800c758:	20000270 	.word	0x20000270

0800c75c <GUI__GetAlphaBuffer>:
 800c75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c760:	4c29      	ldr	r4, [pc, #164]	; (800c808 <GUI__GetAlphaBuffer+0xac>)
 800c762:	461d      	mov	r5, r3
 800c764:	6923      	ldr	r3, [r4, #16]
 800c766:	4606      	mov	r6, r0
 800c768:	4688      	mov	r8, r1
 800c76a:	4617      	mov	r7, r2
 800c76c:	b93b      	cbnz	r3, 800c77e <GUI__GetAlphaBuffer+0x22>
 800c76e:	2301      	movs	r3, #1
 800c770:	4620      	mov	r0, r4
 800c772:	6123      	str	r3, [r4, #16]
 800c774:	4b25      	ldr	r3, [pc, #148]	; (800c80c <GUI__GetAlphaBuffer+0xb0>)
 800c776:	f840 3f14 	str.w	r3, [r0, #20]!
 800c77a:	f7fc fb2f 	bl	8008ddc <GUI__RegisterExit>
 800c77e:	68e3      	ldr	r3, [r4, #12]
 800c780:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800c808 <GUI__GetAlphaBuffer+0xac>
 800c784:	b943      	cbnz	r3, 800c798 <GUI__GetAlphaBuffer+0x3c>
 800c786:	4b22      	ldr	r3, [pc, #136]	; (800c810 <GUI__GetAlphaBuffer+0xb4>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f8c9 300c 	str.w	r3, [r9, #12]
 800c78e:	b91b      	cbnz	r3, 800c798 <GUI__GetAlphaBuffer+0x3c>
 800c790:	f7fd f9ba 	bl	8009b08 <LCD_GetVXSizeMax>
 800c794:	f8c9 000c 	str.w	r0, [r9, #12]
 800c798:	b10d      	cbz	r5, 800c79e <GUI__GetAlphaBuffer+0x42>
 800c79a:	68e3      	ldr	r3, [r4, #12]
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	b17e      	cbz	r6, 800c7c0 <GUI__GetAlphaBuffer+0x64>
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	4d19      	ldr	r5, [pc, #100]	; (800c808 <GUI__GetAlphaBuffer+0xac>)
 800c7a4:	b943      	cbnz	r3, 800c7b8 <GUI__GetAlphaBuffer+0x5c>
 800c7a6:	68e8      	ldr	r0, [r5, #12]
 800c7a8:	0080      	lsls	r0, r0, #2
 800c7aa:	f7fb ff39 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 800c7ae:	6028      	str	r0, [r5, #0]
 800c7b0:	fab0 f580 	clz	r5, r0
 800c7b4:	096d      	lsrs	r5, r5, #5
 800c7b6:	e000      	b.n	800c7ba <GUI__GetAlphaBuffer+0x5e>
 800c7b8:	2500      	movs	r5, #0
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	6033      	str	r3, [r6, #0]
 800c7be:	e000      	b.n	800c7c2 <GUI__GetAlphaBuffer+0x66>
 800c7c0:	4635      	mov	r5, r6
 800c7c2:	f1b8 0f00 	cmp.w	r8, #0
 800c7c6:	d00d      	beq.n	800c7e4 <GUI__GetAlphaBuffer+0x88>
 800c7c8:	6863      	ldr	r3, [r4, #4]
 800c7ca:	4e0f      	ldr	r6, [pc, #60]	; (800c808 <GUI__GetAlphaBuffer+0xac>)
 800c7cc:	b93b      	cbnz	r3, 800c7de <GUI__GetAlphaBuffer+0x82>
 800c7ce:	68f0      	ldr	r0, [r6, #12]
 800c7d0:	0080      	lsls	r0, r0, #2
 800c7d2:	f7fb ff25 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	6070      	str	r0, [r6, #4]
 800c7da:	bf08      	it	eq
 800c7dc:	2501      	moveq	r5, #1
 800c7de:	6863      	ldr	r3, [r4, #4]
 800c7e0:	f8c8 3000 	str.w	r3, [r8]
 800c7e4:	b167      	cbz	r7, 800c800 <GUI__GetAlphaBuffer+0xa4>
 800c7e6:	68a3      	ldr	r3, [r4, #8]
 800c7e8:	4e07      	ldr	r6, [pc, #28]	; (800c808 <GUI__GetAlphaBuffer+0xac>)
 800c7ea:	b93b      	cbnz	r3, 800c7fc <GUI__GetAlphaBuffer+0xa0>
 800c7ec:	68f0      	ldr	r0, [r6, #12]
 800c7ee:	0080      	lsls	r0, r0, #2
 800c7f0:	f7fb ff16 	bl	8008620 <GUI_ALLOC_GetFixedBlock>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	60b0      	str	r0, [r6, #8]
 800c7f8:	bf08      	it	eq
 800c7fa:	2501      	moveq	r5, #1
 800c7fc:	68a3      	ldr	r3, [r4, #8]
 800c7fe:	603b      	str	r3, [r7, #0]
 800c800:	4628      	mov	r0, r5
 800c802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c806:	bf00      	nop
 800c808:	20000270 	.word	0x20000270
 800c80c:	0800c735 	.word	0x0800c735
 800c810:	2002732c 	.word	0x2002732c

0800c814 <GUI__DoAlphaBlending>:
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	b093      	sub	sp, #76	; 0x4c
 800c81a:	2400      	movs	r4, #0
 800c81c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c81e:	900a      	str	r0, [sp, #40]	; 0x28
 800c820:	910b      	str	r1, [sp, #44]	; 0x2c
 800c822:	4692      	mov	sl, r2
 800c824:	461e      	mov	r6, r3
 800c826:	603c      	str	r4, [r7, #0]
 800c828:	ab11      	add	r3, sp, #68	; 0x44
 800c82a:	4622      	mov	r2, r4
 800c82c:	a910      	add	r1, sp, #64	; 0x40
 800c82e:	a80f      	add	r0, sp, #60	; 0x3c
 800c830:	f7ff ff94 	bl	800c75c <GUI__GetAlphaBuffer>
 800c834:	4605      	mov	r5, r0
 800c836:	2800      	cmp	r0, #0
 800c838:	f040 80c5 	bne.w	800c9c6 <GUI__DoAlphaBlending+0x1b2>
 800c83c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c83e:	4c64      	ldr	r4, [pc, #400]	; (800c9d0 <GUI__DoAlphaBlending+0x1bc>)
 800c840:	42b3      	cmp	r3, r6
 800c842:	bfa8      	it	ge
 800c844:	4633      	movge	r3, r6
 800c846:	9309      	str	r3, [sp, #36]	; 0x24
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	7c58      	ldrb	r0, [r3, #17]
 800c84c:	4b61      	ldr	r3, [pc, #388]	; (800c9d4 <GUI__DoAlphaBlending+0x1c0>)
 800c84e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c852:	9306      	str	r3, [sp, #24]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	930c      	str	r3, [sp, #48]	; 0x30
 800c858:	f7fd f92a 	bl	8009ab0 <GUI_GetBitsPerPixelEx>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	9007      	str	r0, [sp, #28]
 800c860:	7c58      	ldrb	r0, [r3, #17]
 800c862:	f7fd f943 	bl	8009aec <GUI_GetpfIndex2ColorEx>
 800c866:	4b5c      	ldr	r3, [pc, #368]	; (800c9d8 <GUI__DoAlphaBlending+0x1c4>)
 800c868:	9003      	str	r0, [sp, #12]
 800c86a:	4298      	cmp	r0, r3
 800c86c:	d005      	beq.n	800c87a <GUI__DoAlphaBlending+0x66>
 800c86e:	4b5b      	ldr	r3, [pc, #364]	; (800c9dc <GUI__DoAlphaBlending+0x1c8>)
 800c870:	1ac3      	subs	r3, r0, r3
 800c872:	bf18      	it	ne
 800c874:	2301      	movne	r3, #1
 800c876:	9305      	str	r3, [sp, #20]
 800c878:	e000      	b.n	800c87c <GUI__DoAlphaBlending+0x68>
 800c87a:	9505      	str	r5, [sp, #20]
 800c87c:	2600      	movs	r6, #0
 800c87e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800c882:	4635      	mov	r5, r6
 800c884:	4653      	mov	r3, sl
 800c886:	f853 0b04 	ldr.w	r0, [r3], #4
 800c88a:	930d      	str	r3, [sp, #52]	; 0x34
 800c88c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c88e:	4798      	blx	r3
 800c890:	0e03      	lsrs	r3, r0, #24
 800c892:	9004      	str	r0, [sp, #16]
 800c894:	9308      	str	r3, [sp, #32]
 800c896:	f000 8084 	beq.w	800c9a2 <GUI__DoAlphaBlending+0x18e>
 800c89a:	2d00      	cmp	r5, #0
 800c89c:	d139      	bne.n	800c912 <GUI__DoAlphaBlending+0xfe>
 800c89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8a2:	eb03 0906 	add.w	r9, r3, r6
 800c8a6:	4b4a      	ldr	r3, [pc, #296]	; (800c9d0 <GUI__DoAlphaBlending+0x1bc>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8ae:	454b      	cmp	r3, r9
 800c8b0:	bfc4      	itt	gt
 800c8b2:	ebc9 0503 	rsbgt	r5, r9, r3
 800c8b6:	4699      	movgt	r9, r3
 800c8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ba:	eb03 0802 	add.w	r8, r3, r2
 800c8be:	9b06      	ldr	r3, [sp, #24]
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	19ac      	adds	r4, r5, r6
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8c6:	00a4      	lsls	r4, r4, #2
 800c8c8:	4423      	add	r3, r4
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800c8d6:	f000 faf7 	bl	800cec8 <GUI_ReadRectEx>
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c8de:	2b17      	cmp	r3, #23
 800c8e0:	dc07      	bgt.n	800c8f2 <GUI__DoAlphaBlending+0xde>
 800c8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8e4:	9a07      	ldr	r2, [sp, #28]
 800c8e6:	ebc5 010b 	rsb	r1, r5, fp
 800c8ea:	4420      	add	r0, r4
 800c8ec:	f000 f95b 	bl	800cba6 <GUI__ExpandPixelIndicesEx>
 800c8f0:	e001      	b.n	800c8f6 <GUI__DoAlphaBlending+0xe2>
 800c8f2:	9b05      	ldr	r3, [sp, #20]
 800c8f4:	b90b      	cbnz	r3, 800c8fa <GUI__DoAlphaBlending+0xe6>
 800c8f6:	2501      	movs	r5, #1
 800c8f8:	e00b      	b.n	800c912 <GUI__DoAlphaBlending+0xfe>
 800c8fa:	4404      	add	r4, r0
 800c8fc:	ebc9 0808 	rsb	r8, r9, r8
 800c900:	6820      	ldr	r0, [r4, #0]
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	4798      	blx	r3
 800c906:	f1b8 0801 	subs.w	r8, r8, #1
 800c90a:	f844 0b04 	str.w	r0, [r4], #4
 800c90e:	d1f7      	bne.n	800c900 <GUI__DoAlphaBlending+0xec>
 800c910:	e7f1      	b.n	800c8f6 <GUI__DoAlphaBlending+0xe2>
 800c912:	4b33      	ldr	r3, [pc, #204]	; (800c9e0 <GUI__DoAlphaBlending+0x1cc>)
 800c914:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800c918:	00b4      	lsls	r4, r6, #2
 800c91a:	f1b8 0f00 	cmp.w	r8, #0
 800c91e:	d027      	beq.n	800c970 <GUI__DoAlphaBlending+0x15c>
 800c920:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c922:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c924:	192a      	adds	r2, r5, r4
 800c926:	4421      	add	r1, r4
 800c928:	910f      	str	r1, [sp, #60]	; 0x3c
 800c92a:	465b      	mov	r3, fp
 800c92c:	9210      	str	r2, [sp, #64]	; 0x40
 800c92e:	4650      	mov	r0, sl
 800c930:	47c0      	blx	r8
 800c932:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c934:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800c936:	2300      	movs	r3, #0
 800c938:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800c93c:	f000 427f 	and.w	r2, r0, #4278190080	; 0xff000000
 800c940:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c944:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800c948:	d102      	bne.n	800c950 <GUI__DoAlphaBlending+0x13c>
 800c94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c94e:	e006      	b.n	800c95e <GUI__DoAlphaBlending+0x14a>
 800c950:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c954:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c958:	bf08      	it	eq
 800c95a:	f841 0023 	streq.w	r0, [r1, r3, lsl #2]
 800c95e:	3301      	adds	r3, #1
 800c960:	459b      	cmp	fp, r3
 800c962:	d1e9      	bne.n	800c938 <GUI__DoAlphaBlending+0x124>
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	9510      	str	r5, [sp, #64]	; 0x40
 800c968:	f043 0301 	orr.w	r3, r3, #1
 800c96c:	603b      	str	r3, [r7, #0]
 800c96e:	e028      	b.n	800c9c2 <GUI__DoAlphaBlending+0x1ae>
 800c970:	9b08      	ldr	r3, [sp, #32]
 800c972:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c976:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c97a:	2bff      	cmp	r3, #255	; 0xff
 800c97c:	d104      	bne.n	800c988 <GUI__DoAlphaBlending+0x174>
 800c97e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c980:	591b      	ldr	r3, [r3, r4]
 800c982:	f848 3004 	str.w	r3, [r8, r4]
 800c986:	e014      	b.n	800c9b2 <GUI__DoAlphaBlending+0x19e>
 800c988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c98a:	5919      	ldr	r1, [r3, r4]
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800c992:	4b14      	ldr	r3, [pc, #80]	; (800c9e4 <GUI__DoAlphaBlending+0x1d0>)
 800c994:	43d2      	mvns	r2, r2
 800c996:	b2d2      	uxtb	r2, r2
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4798      	blx	r3
 800c99c:	f848 0004 	str.w	r0, [r8, r4]
 800c9a0:	e003      	b.n	800c9aa <GUI__DoAlphaBlending+0x196>
 800c9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a4:	9a04      	ldr	r2, [sp, #16]
 800c9a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	f043 0301 	orr.w	r3, r3, #1
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	f1bb 0b01 	subs.w	fp, fp, #1
 800c9b6:	f106 0601 	add.w	r6, r6, #1
 800c9ba:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800c9be:	f47f af61 	bne.w	800c884 <GUI__DoAlphaBlending+0x70>
 800c9c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c9c4:	e000      	b.n	800c9c8 <GUI__DoAlphaBlending+0x1b4>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	b013      	add	sp, #76	; 0x4c
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000014 	.word	0x20000014
 800c9d4:	20027324 	.word	0x20027324
 800c9d8:	0800c4c1 	.word	0x0800c4c1
 800c9dc:	0800cfcf 	.word	0x0800cfcf
 800c9e0:	20000270 	.word	0x20000270
 800c9e4:	20000048 	.word	0x20000048

0800c9e8 <GUI__AllocAlphaBuffer>:
 800c9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ea:	b908      	cbnz	r0, 800c9f0 <GUI__AllocAlphaBuffer+0x8>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	e000      	b.n	800c9f2 <GUI__AllocAlphaBuffer+0xa>
 800c9f0:	aa03      	add	r2, sp, #12
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	a902      	add	r1, sp, #8
 800c9f6:	a801      	add	r0, sp, #4
 800c9f8:	f7ff feb0 	bl	800c75c <GUI__GetAlphaBuffer>
 800c9fc:	b005      	add	sp, #20
 800c9fe:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca02 <GUI__ConvertColor2Index>:
 800ca02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca06:	9f08      	ldr	r7, [sp, #32]
 800ca08:	f8d3 8000 	ldr.w	r8, [r3]
 800ca0c:	2f00      	cmp	r7, #0
 800ca0e:	bf08      	it	eq
 800ca10:	4607      	moveq	r7, r0
 800ca12:	2a08      	cmp	r2, #8
 800ca14:	4604      	mov	r4, r0
 800ca16:	460d      	mov	r5, r1
 800ca18:	dd05      	ble.n	800ca26 <GUI__ConvertColor2Index+0x24>
 800ca1a:	2a10      	cmp	r2, #16
 800ca1c:	f340 80ad 	ble.w	800cb7a <GUI__ConvertColor2Index+0x178>
 800ca20:	2000      	movs	r0, #0
 800ca22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca26:	3a01      	subs	r2, #1
 800ca28:	2a07      	cmp	r2, #7
 800ca2a:	f200 809d 	bhi.w	800cb68 <GUI__ConvertColor2Index+0x166>
 800ca2e:	e8df f002 	tbb	[pc, r2]
 800ca32:	5b11      	.short	0x5b11
 800ca34:	9b9b7f9b 	.word	0x9b9b7f9b
 800ca38:	899b      	.short	0x899b
 800ca3a:	69e0      	ldr	r0, [r4, #28]
 800ca3c:	47c0      	blx	r8
 800ca3e:	f104 0920 	add.w	r9, r4, #32
 800ca42:	4330      	orrs	r0, r6
 800ca44:	b2c6      	uxtb	r6, r0
 800ca46:	3d08      	subs	r5, #8
 800ca48:	464c      	mov	r4, r9
 800ca4a:	f807 6b01 	strb.w	r6, [r7], #1
 800ca4e:	2d00      	cmp	r5, #0
 800ca50:	f000 808a 	beq.w	800cb68 <GUI__ConvertColor2Index+0x166>
 800ca54:	6820      	ldr	r0, [r4, #0]
 800ca56:	47c0      	blx	r8
 800ca58:	2d01      	cmp	r5, #1
 800ca5a:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800ca5e:	b2c6      	uxtb	r6, r0
 800ca60:	f000 8085 	beq.w	800cb6e <GUI__ConvertColor2Index+0x16c>
 800ca64:	6860      	ldr	r0, [r4, #4]
 800ca66:	47c0      	blx	r8
 800ca68:	2d02      	cmp	r5, #2
 800ca6a:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 800ca6e:	b2c6      	uxtb	r6, r0
 800ca70:	d101      	bne.n	800ca76 <GUI__ConvertColor2Index+0x74>
 800ca72:	3408      	adds	r4, #8
 800ca74:	e07c      	b.n	800cb70 <GUI__ConvertColor2Index+0x16e>
 800ca76:	68a0      	ldr	r0, [r4, #8]
 800ca78:	47c0      	blx	r8
 800ca7a:	2d03      	cmp	r5, #3
 800ca7c:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 800ca80:	b2c6      	uxtb	r6, r0
 800ca82:	d101      	bne.n	800ca88 <GUI__ConvertColor2Index+0x86>
 800ca84:	340c      	adds	r4, #12
 800ca86:	e073      	b.n	800cb70 <GUI__ConvertColor2Index+0x16e>
 800ca88:	68e0      	ldr	r0, [r4, #12]
 800ca8a:	47c0      	blx	r8
 800ca8c:	2d04      	cmp	r5, #4
 800ca8e:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 800ca92:	b2c6      	uxtb	r6, r0
 800ca94:	d101      	bne.n	800ca9a <GUI__ConvertColor2Index+0x98>
 800ca96:	3410      	adds	r4, #16
 800ca98:	e06a      	b.n	800cb70 <GUI__ConvertColor2Index+0x16e>
 800ca9a:	6920      	ldr	r0, [r4, #16]
 800ca9c:	47c0      	blx	r8
 800ca9e:	2d05      	cmp	r5, #5
 800caa0:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 800caa4:	b2c6      	uxtb	r6, r0
 800caa6:	d101      	bne.n	800caac <GUI__ConvertColor2Index+0xaa>
 800caa8:	3414      	adds	r4, #20
 800caaa:	e061      	b.n	800cb70 <GUI__ConvertColor2Index+0x16e>
 800caac:	6960      	ldr	r0, [r4, #20]
 800caae:	47c0      	blx	r8
 800cab0:	2d06      	cmp	r5, #6
 800cab2:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 800cab6:	b2c6      	uxtb	r6, r0
 800cab8:	d101      	bne.n	800cabe <GUI__ConvertColor2Index+0xbc>
 800caba:	3418      	adds	r4, #24
 800cabc:	e058      	b.n	800cb70 <GUI__ConvertColor2Index+0x16e>
 800cabe:	69a0      	ldr	r0, [r4, #24]
 800cac0:	47c0      	blx	r8
 800cac2:	2d07      	cmp	r5, #7
 800cac4:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 800cac8:	b2c6      	uxtb	r6, r0
 800caca:	d1b6      	bne.n	800ca3a <GUI__ConvertColor2Index+0x38>
 800cacc:	341c      	adds	r4, #28
 800cace:	e04f      	b.n	800cb70 <GUI__ConvertColor2Index+0x16e>
 800cad0:	68e0      	ldr	r0, [r4, #12]
 800cad2:	47c0      	blx	r8
 800cad4:	f104 0910 	add.w	r9, r4, #16
 800cad8:	4330      	orrs	r0, r6
 800cada:	b2c6      	uxtb	r6, r0
 800cadc:	3d04      	subs	r5, #4
 800cade:	464c      	mov	r4, r9
 800cae0:	f807 6b01 	strb.w	r6, [r7], #1
 800cae4:	2d00      	cmp	r5, #0
 800cae6:	d03f      	beq.n	800cb68 <GUI__ConvertColor2Index+0x166>
 800cae8:	6820      	ldr	r0, [r4, #0]
 800caea:	47c0      	blx	r8
 800caec:	2d01      	cmp	r5, #1
 800caee:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800caf2:	b2c6      	uxtb	r6, r0
 800caf4:	d03e      	beq.n	800cb74 <GUI__ConvertColor2Index+0x172>
 800caf6:	6860      	ldr	r0, [r4, #4]
 800caf8:	47c0      	blx	r8
 800cafa:	2d02      	cmp	r5, #2
 800cafc:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 800cb00:	b2c6      	uxtb	r6, r0
 800cb02:	d101      	bne.n	800cb08 <GUI__ConvertColor2Index+0x106>
 800cb04:	3408      	adds	r4, #8
 800cb06:	e036      	b.n	800cb76 <GUI__ConvertColor2Index+0x174>
 800cb08:	68a0      	ldr	r0, [r4, #8]
 800cb0a:	47c0      	blx	r8
 800cb0c:	2d03      	cmp	r5, #3
 800cb0e:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 800cb12:	b2c6      	uxtb	r6, r0
 800cb14:	d1dc      	bne.n	800cad0 <GUI__ConvertColor2Index+0xce>
 800cb16:	340c      	adds	r4, #12
 800cb18:	e02d      	b.n	800cb76 <GUI__ConvertColor2Index+0x174>
 800cb1a:	6860      	ldr	r0, [r4, #4]
 800cb1c:	47c0      	blx	r8
 800cb1e:	f104 0908 	add.w	r9, r4, #8
 800cb22:	4330      	orrs	r0, r6
 800cb24:	b2c6      	uxtb	r6, r0
 800cb26:	3d02      	subs	r5, #2
 800cb28:	464c      	mov	r4, r9
 800cb2a:	f807 6b01 	strb.w	r6, [r7], #1
 800cb2e:	b1dd      	cbz	r5, 800cb68 <GUI__ConvertColor2Index+0x166>
 800cb30:	6820      	ldr	r0, [r4, #0]
 800cb32:	47c0      	blx	r8
 800cb34:	2d01      	cmp	r5, #1
 800cb36:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800cb3a:	b2c6      	uxtb	r6, r0
 800cb3c:	d1ed      	bne.n	800cb1a <GUI__ConvertColor2Index+0x118>
 800cb3e:	3404      	adds	r4, #4
 800cb40:	2500      	movs	r5, #0
 800cb42:	e7f2      	b.n	800cb2a <GUI__ConvertColor2Index+0x128>
 800cb44:	691e      	ldr	r6, [r3, #16]
 800cb46:	b12e      	cbz	r6, 800cb54 <GUI__ConvertColor2Index+0x152>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	4620      	mov	r0, r4
 800cb50:	47b0      	blx	r6
 800cb52:	e009      	b.n	800cb68 <GUI__ConvertColor2Index+0x166>
 800cb54:	1e7e      	subs	r6, r7, #1
 800cb56:	f854 0b04 	ldr.w	r0, [r4], #4
 800cb5a:	47c0      	blx	r8
 800cb5c:	f806 0f01 	strb.w	r0, [r6, #1]!
 800cb60:	43f3      	mvns	r3, r6
 800cb62:	442b      	add	r3, r5
 800cb64:	42df      	cmn	r7, r3
 800cb66:	d1f6      	bne.n	800cb56 <GUI__ConvertColor2Index+0x154>
 800cb68:	2001      	movs	r0, #1
 800cb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6e:	3404      	adds	r4, #4
 800cb70:	2500      	movs	r5, #0
 800cb72:	e76a      	b.n	800ca4a <GUI__ConvertColor2Index+0x48>
 800cb74:	3404      	adds	r4, #4
 800cb76:	2500      	movs	r5, #0
 800cb78:	e7b2      	b.n	800cae0 <GUI__ConvertColor2Index+0xde>
 800cb7a:	691e      	ldr	r6, [r3, #16]
 800cb7c:	b11e      	cbz	r6, 800cb86 <GUI__ConvertColor2Index+0x184>
 800cb7e:	2302      	movs	r3, #2
 800cb80:	462a      	mov	r2, r5
 800cb82:	4639      	mov	r1, r7
 800cb84:	e7e4      	b.n	800cb50 <GUI__ConvertColor2Index+0x14e>
 800cb86:	3f02      	subs	r7, #2
 800cb88:	f854 0b04 	ldr.w	r0, [r4], #4
 800cb8c:	47c0      	blx	r8
 800cb8e:	3d01      	subs	r5, #1
 800cb90:	f827 0f02 	strh.w	r0, [r7, #2]!
 800cb94:	d1f8      	bne.n	800cb88 <GUI__ConvertColor2Index+0x186>
 800cb96:	e7e7      	b.n	800cb68 <GUI__ConvertColor2Index+0x166>

0800cb98 <GUI__CompactPixelIndicesEx>:
 800cb98:	b513      	push	{r0, r1, r4, lr}
 800cb9a:	2400      	movs	r4, #0
 800cb9c:	9400      	str	r4, [sp, #0]
 800cb9e:	f7ff ff30 	bl	800ca02 <GUI__ConvertColor2Index>
 800cba2:	b002      	add	sp, #8
 800cba4:	bd10      	pop	{r4, pc}

0800cba6 <GUI__ExpandPixelIndicesEx>:
 800cba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbaa:	1e0c      	subs	r4, r1, #0
 800cbac:	4605      	mov	r5, r0
 800cbae:	f340 80b6 	ble.w	800cd1e <GUI__ExpandPixelIndicesEx+0x178>
 800cbb2:	2a08      	cmp	r2, #8
 800cbb4:	685e      	ldr	r6, [r3, #4]
 800cbb6:	dd04      	ble.n	800cbc2 <GUI__ExpandPixelIndicesEx+0x1c>
 800cbb8:	2a10      	cmp	r2, #16
 800cbba:	f340 809a 	ble.w	800ccf2 <GUI__ExpandPixelIndicesEx+0x14c>
 800cbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc2:	3a01      	subs	r2, #1
 800cbc4:	2a07      	cmp	r2, #7
 800cbc6:	f200 80aa 	bhi.w	800cd1e <GUI__ExpandPixelIndicesEx+0x178>
 800cbca:	e8df f002 	tbb	[pc, r2]
 800cbce:	2d04      	.short	0x2d04
 800cbd0:	a8a859a8 	.word	0xa8a859a8
 800cbd4:	85a8      	.short	0x85a8
 800cbd6:	1e67      	subs	r7, r4, #1
 800cbd8:	10fb      	asrs	r3, r7, #3
 800cbda:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800cbde:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cbe2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800cbe6:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800cbea:	f007 0707 	and.w	r7, r7, #7
 800cbee:	44a9      	add	r9, r5
 800cbf0:	f815 a003 	ldrb.w	sl, [r5, r3]
 800cbf4:	2580      	movs	r5, #128	; 0x80
 800cbf6:	413d      	asrs	r5, r7
 800cbf8:	b2ed      	uxtb	r5, r5
 800cbfa:	f1c7 0307 	rsb	r3, r7, #7
 800cbfe:	ea05 000a 	and.w	r0, r5, sl
 800cc02:	4118      	asrs	r0, r3
 800cc04:	47b0      	blx	r6
 800cc06:	f848 0904 	str.w	r0, [r8], #-4
 800cc0a:	b937      	cbnz	r7, 800cc1a <GUI__ExpandPixelIndicesEx+0x74>
 800cc0c:	f899 a000 	ldrb.w	sl, [r9]
 800cc10:	2501      	movs	r5, #1
 800cc12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cc16:	2707      	movs	r7, #7
 800cc18:	e002      	b.n	800cc20 <GUI__ExpandPixelIndicesEx+0x7a>
 800cc1a:	006d      	lsls	r5, r5, #1
 800cc1c:	3f01      	subs	r7, #1
 800cc1e:	b2ed      	uxtb	r5, r5
 800cc20:	3c01      	subs	r4, #1
 800cc22:	d1ea      	bne.n	800cbfa <GUI__ExpandPixelIndicesEx+0x54>
 800cc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc28:	1e67      	subs	r7, r4, #1
 800cc2a:	10bb      	asrs	r3, r7, #2
 800cc2c:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800cc30:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800cc34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cc38:	f007 0703 	and.w	r7, r7, #3
 800cc3c:	f815 a003 	ldrb.w	sl, [r5, r3]
 800cc40:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800cc44:	44a9      	add	r9, r5
 800cc46:	23c0      	movs	r3, #192	; 0xc0
 800cc48:	007d      	lsls	r5, r7, #1
 800cc4a:	fa43 f505 	asr.w	r5, r3, r5
 800cc4e:	b2ed      	uxtb	r5, r5
 800cc50:	007b      	lsls	r3, r7, #1
 800cc52:	f1c3 0306 	rsb	r3, r3, #6
 800cc56:	ea05 000a 	and.w	r0, r5, sl
 800cc5a:	4118      	asrs	r0, r3
 800cc5c:	47b0      	blx	r6
 800cc5e:	f848 0904 	str.w	r0, [r8], #-4
 800cc62:	b937      	cbnz	r7, 800cc72 <GUI__ExpandPixelIndicesEx+0xcc>
 800cc64:	2503      	movs	r5, #3
 800cc66:	f899 a000 	ldrb.w	sl, [r9]
 800cc6a:	462f      	mov	r7, r5
 800cc6c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cc70:	e002      	b.n	800cc78 <GUI__ExpandPixelIndicesEx+0xd2>
 800cc72:	00ad      	lsls	r5, r5, #2
 800cc74:	3f01      	subs	r7, #1
 800cc76:	b2ed      	uxtb	r5, r5
 800cc78:	3c01      	subs	r4, #1
 800cc7a:	d1e9      	bne.n	800cc50 <GUI__ExpandPixelIndicesEx+0xaa>
 800cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc80:	1e67      	subs	r7, r4, #1
 800cc82:	107b      	asrs	r3, r7, #1
 800cc84:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800cc88:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800cc8c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cc90:	f007 0701 	and.w	r7, r7, #1
 800cc94:	f815 a003 	ldrb.w	sl, [r5, r3]
 800cc98:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800cc9c:	44a9      	add	r9, r5
 800cc9e:	23f0      	movs	r3, #240	; 0xf0
 800cca0:	00bd      	lsls	r5, r7, #2
 800cca2:	fa43 f505 	asr.w	r5, r3, r5
 800cca6:	b2ed      	uxtb	r5, r5
 800cca8:	00bb      	lsls	r3, r7, #2
 800ccaa:	f1c3 0304 	rsb	r3, r3, #4
 800ccae:	ea05 000a 	and.w	r0, r5, sl
 800ccb2:	4118      	asrs	r0, r3
 800ccb4:	47b0      	blx	r6
 800ccb6:	f848 0904 	str.w	r0, [r8], #-4
 800ccba:	b937      	cbnz	r7, 800ccca <GUI__ExpandPixelIndicesEx+0x124>
 800ccbc:	f899 a000 	ldrb.w	sl, [r9]
 800ccc0:	250f      	movs	r5, #15
 800ccc2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ccc6:	2701      	movs	r7, #1
 800ccc8:	e002      	b.n	800ccd0 <GUI__ExpandPixelIndicesEx+0x12a>
 800ccca:	012d      	lsls	r5, r5, #4
 800cccc:	b2ed      	uxtb	r5, r5
 800ccce:	2700      	movs	r7, #0
 800ccd0:	3c01      	subs	r4, #1
 800ccd2:	d1e9      	bne.n	800cca8 <GUI__ExpandPixelIndicesEx+0x102>
 800ccd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800ccdc:	4425      	add	r5, r4
 800ccde:	1b64      	subs	r4, r4, r5
 800cce0:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 800cce4:	47b0      	blx	r6
 800cce6:	42e5      	cmn	r5, r4
 800cce8:	f847 0d04 	str.w	r0, [r7, #-4]!
 800ccec:	d1f8      	bne.n	800cce0 <GUI__ExpandPixelIndicesEx+0x13a>
 800ccee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf2:	695f      	ldr	r7, [r3, #20]
 800ccf4:	b137      	cbz	r7, 800cd04 <GUI__ExpandPixelIndicesEx+0x15e>
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	46bc      	mov	ip, r7
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd02:	4760      	bx	ip
 800cd04:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800cd08:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800cd0c:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 800cd10:	47b0      	blx	r6
 800cd12:	3c01      	subs	r4, #1
 800cd14:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cd18:	d1f8      	bne.n	800cd0c <GUI__ExpandPixelIndicesEx+0x166>
 800cd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800cd24 <LCD_ReadRectEx>:
 800cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	b087      	sub	sp, #28
 800cd2a:	4690      	mov	r8, r2
 800cd2c:	9303      	str	r3, [sp, #12]
 800cd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd30:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800cd32:	68da      	ldr	r2, [r3, #12]
 800cd34:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cd36:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	460e      	mov	r6, r1
 800cd3e:	b96b      	cbnz	r3, 800cd5c <LCD_ReadRectEx+0x38>
 800cd40:	4b60      	ldr	r3, [pc, #384]	; (800cec4 <LCD_ReadRectEx+0x1a0>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	7c58      	ldrb	r0, [r3, #17]
 800cd46:	f7fc feb3 	bl	8009ab0 <GUI_GetBitsPerPixelEx>
 800cd4a:	2808      	cmp	r0, #8
 800cd4c:	dd15      	ble.n	800cd7a <LCD_ReadRectEx+0x56>
 800cd4e:	2811      	cmp	r0, #17
 800cd50:	bfb4      	ite	lt
 800cd52:	f04f 0a02 	movlt.w	sl, #2
 800cd56:	f04f 0a04 	movge.w	sl, #4
 800cd5a:	e010      	b.n	800cd7e <LCD_ReadRectEx+0x5a>
 800cd5c:	2101      	movs	r1, #1
 800cd5e:	a811      	add	r0, sp, #68	; 0x44
 800cd60:	4798      	blx	r3
 800cd62:	4605      	mov	r5, r0
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d0eb      	beq.n	800cd40 <LCD_ReadRectEx+0x1c>
 800cd68:	9b03      	ldr	r3, [sp, #12]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	9401      	str	r4, [sp, #4]
 800cd6e:	4643      	mov	r3, r8
 800cd70:	4632      	mov	r2, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cd76:	47a8      	blx	r5
 800cd78:	e0a0      	b.n	800cebc <LCD_ReadRectEx+0x198>
 800cd7a:	f04f 0a01 	mov.w	sl, #1
 800cd7e:	1e43      	subs	r3, r0, #1
 800cd80:	2500      	movs	r5, #0
 800cd82:	9304      	str	r3, [sp, #16]
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	429e      	cmp	r6, r3
 800cd88:	f300 8098 	bgt.w	800cebc <LCD_ReadRectEx+0x198>
 800cd8c:	f1ba 0f02 	cmp.w	sl, #2
 800cd90:	d009      	beq.n	800cda6 <LCD_ReadRectEx+0x82>
 800cd92:	f1ba 0f04 	cmp.w	sl, #4
 800cd96:	d004      	beq.n	800cda2 <LCD_ReadRectEx+0x7e>
 800cd98:	f1ba 0f01 	cmp.w	sl, #1
 800cd9c:	f040 808c 	bne.w	800ceb8 <LCD_ReadRectEx+0x194>
 800cda0:	e003      	b.n	800cdaa <LCD_ReadRectEx+0x86>
 800cda2:	46bb      	mov	fp, r7
 800cda4:	e07d      	b.n	800cea2 <LCD_ReadRectEx+0x17e>
 800cda6:	46bb      	mov	fp, r7
 800cda8:	e070      	b.n	800ce8c <LCD_ReadRectEx+0x168>
 800cdaa:	9b04      	ldr	r3, [sp, #16]
 800cdac:	2b07      	cmp	r3, #7
 800cdae:	f200 8083 	bhi.w	800ceb8 <LCD_ReadRectEx+0x194>
 800cdb2:	e8df f003 	tbb	[pc, r3]
 800cdb6:	0a0e      	.short	0x0a0e
 800cdb8:	04040707 	.word	0x04040707
 800cdbc:	0404      	.short	0x0404
 800cdbe:	ebc4 0b07 	rsb	fp, r4, r7
 800cdc2:	e059      	b.n	800ce78 <LCD_ReadRectEx+0x154>
 800cdc4:	46bb      	mov	fp, r7
 800cdc6:	230f      	movs	r3, #15
 800cdc8:	e03b      	b.n	800ce42 <LCD_ReadRectEx+0x11e>
 800cdca:	46bb      	mov	fp, r7
 800cdcc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cdd0:	e019      	b.n	800ce06 <LCD_ReadRectEx+0xe2>
 800cdd2:	46bb      	mov	fp, r7
 800cdd4:	45c3      	cmp	fp, r8
 800cdd6:	dc6f      	bgt.n	800ceb8 <LCD_ReadRectEx+0x194>
 800cdd8:	4632      	mov	r2, r6
 800cdda:	4659      	mov	r1, fp
 800cddc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cdde:	47c8      	blx	r9
 800cde0:	7822      	ldrb	r2, [r4, #0]
 800cde2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800cde6:	412b      	asrs	r3, r5
 800cde8:	401a      	ands	r2, r3
 800cdea:	f1c5 0307 	rsb	r3, r5, #7
 800cdee:	4098      	lsls	r0, r3
 800cdf0:	3501      	adds	r5, #1
 800cdf2:	4310      	orrs	r0, r2
 800cdf4:	f025 0307 	bic.w	r3, r5, #7
 800cdf8:	7020      	strb	r0, [r4, #0]
 800cdfa:	f10b 0b01 	add.w	fp, fp, #1
 800cdfe:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 800ce02:	411d      	asrs	r5, r3
 800ce04:	e7e6      	b.n	800cdd4 <LCD_ReadRectEx+0xb0>
 800ce06:	45c3      	cmp	fp, r8
 800ce08:	dc56      	bgt.n	800ceb8 <LCD_ReadRectEx+0x194>
 800ce0a:	4659      	mov	r1, fp
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce10:	9305      	str	r3, [sp, #20]
 800ce12:	47c8      	blx	r9
 800ce14:	9b05      	ldr	r3, [sp, #20]
 800ce16:	f894 e000 	ldrb.w	lr, [r4]
 800ce1a:	006a      	lsls	r2, r5, #1
 800ce1c:	fa43 f102 	asr.w	r1, r3, r2
 800ce20:	f1c2 0206 	rsb	r2, r2, #6
 800ce24:	ea0e 0101 	and.w	r1, lr, r1
 800ce28:	4090      	lsls	r0, r2
 800ce2a:	3501      	adds	r5, #1
 800ce2c:	ea41 0200 	orr.w	r2, r1, r0
 800ce30:	7022      	strb	r2, [r4, #0]
 800ce32:	f025 0203 	bic.w	r2, r5, #3
 800ce36:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 800ce3a:	f10b 0b01 	add.w	fp, fp, #1
 800ce3e:	4115      	asrs	r5, r2
 800ce40:	e7e1      	b.n	800ce06 <LCD_ReadRectEx+0xe2>
 800ce42:	45c3      	cmp	fp, r8
 800ce44:	dc38      	bgt.n	800ceb8 <LCD_ReadRectEx+0x194>
 800ce46:	4659      	mov	r1, fp
 800ce48:	4632      	mov	r2, r6
 800ce4a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce4c:	9305      	str	r3, [sp, #20]
 800ce4e:	47c8      	blx	r9
 800ce50:	9b05      	ldr	r3, [sp, #20]
 800ce52:	f894 e000 	ldrb.w	lr, [r4]
 800ce56:	00aa      	lsls	r2, r5, #2
 800ce58:	fa03 f102 	lsl.w	r1, r3, r2
 800ce5c:	f1c2 0204 	rsb	r2, r2, #4
 800ce60:	ea0e 0101 	and.w	r1, lr, r1
 800ce64:	4090      	lsls	r0, r2
 800ce66:	ea41 0200 	orr.w	r2, r1, r0
 800ce6a:	7022      	strb	r2, [r4, #0]
 800ce6c:	f10b 0b01 	add.w	fp, fp, #1
 800ce70:	442c      	add	r4, r5
 800ce72:	f085 0501 	eor.w	r5, r5, #1
 800ce76:	e7e4      	b.n	800ce42 <LCD_ReadRectEx+0x11e>
 800ce78:	eb04 010b 	add.w	r1, r4, fp
 800ce7c:	4588      	cmp	r8, r1
 800ce7e:	db1b      	blt.n	800ceb8 <LCD_ReadRectEx+0x194>
 800ce80:	4632      	mov	r2, r6
 800ce82:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce84:	47c8      	blx	r9
 800ce86:	f804 0b01 	strb.w	r0, [r4], #1
 800ce8a:	e7f5      	b.n	800ce78 <LCD_ReadRectEx+0x154>
 800ce8c:	45c3      	cmp	fp, r8
 800ce8e:	dc13      	bgt.n	800ceb8 <LCD_ReadRectEx+0x194>
 800ce90:	4659      	mov	r1, fp
 800ce92:	4632      	mov	r2, r6
 800ce94:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce96:	47c8      	blx	r9
 800ce98:	f10b 0b01 	add.w	fp, fp, #1
 800ce9c:	f824 0b02 	strh.w	r0, [r4], #2
 800cea0:	e7f4      	b.n	800ce8c <LCD_ReadRectEx+0x168>
 800cea2:	45c3      	cmp	fp, r8
 800cea4:	dc08      	bgt.n	800ceb8 <LCD_ReadRectEx+0x194>
 800cea6:	4659      	mov	r1, fp
 800cea8:	4632      	mov	r2, r6
 800ceaa:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ceac:	47c8      	blx	r9
 800ceae:	f10b 0b01 	add.w	fp, fp, #1
 800ceb2:	f844 0b04 	str.w	r0, [r4], #4
 800ceb6:	e7f4      	b.n	800cea2 <LCD_ReadRectEx+0x17e>
 800ceb8:	3601      	adds	r6, #1
 800ceba:	e763      	b.n	800cd84 <LCD_ReadRectEx+0x60>
 800cebc:	b007      	add	sp, #28
 800cebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec2:	bf00      	nop
 800cec4:	20000014 	.word	0x20000014

0800cec8 <GUI_ReadRectEx>:
 800cec8:	b4f0      	push	{r4, r5, r6, r7}
 800ceca:	4d16      	ldr	r5, [pc, #88]	; (800cf24 <GUI_ReadRectEx+0x5c>)
 800cecc:	9e04      	ldr	r6, [sp, #16]
 800cece:	682d      	ldr	r5, [r5, #0]
 800ced0:	9c05      	ldr	r4, [sp, #20]
 800ced2:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800ced6:	42b8      	cmp	r0, r7
 800ced8:	bfb8      	it	lt
 800ceda:	4638      	movlt	r0, r7
 800cedc:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800cee0:	42ba      	cmp	r2, r7
 800cee2:	bfa8      	it	ge
 800cee4:	463a      	movge	r2, r7
 800cee6:	4290      	cmp	r0, r2
 800cee8:	dc1a      	bgt.n	800cf20 <GUI_ReadRectEx+0x58>
 800ceea:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800ceee:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800cef2:	42b9      	cmp	r1, r7
 800cef4:	bfb8      	it	lt
 800cef6:	4639      	movlt	r1, r7
 800cef8:	42ab      	cmp	r3, r5
 800cefa:	bfa8      	it	ge
 800cefc:	462b      	movge	r3, r5
 800cefe:	428b      	cmp	r3, r1
 800cf00:	db0e      	blt.n	800cf20 <GUI_ReadRectEx+0x58>
 800cf02:	68e5      	ldr	r5, [r4, #12]
 800cf04:	682d      	ldr	r5, [r5, #0]
 800cf06:	f035 0504 	bics.w	r5, r5, #4
 800cf0a:	d104      	bne.n	800cf16 <GUI_ReadRectEx+0x4e>
 800cf0c:	9405      	str	r4, [sp, #20]
 800cf0e:	9604      	str	r6, [sp, #16]
 800cf10:	bcf0      	pop	{r4, r5, r6, r7}
 800cf12:	f7ff bf07 	b.w	800cd24 <LCD_ReadRectEx>
 800cf16:	6825      	ldr	r5, [r4, #0]
 800cf18:	2d00      	cmp	r5, #0
 800cf1a:	d0f7      	beq.n	800cf0c <GUI_ReadRectEx+0x44>
 800cf1c:	462c      	mov	r4, r5
 800cf1e:	e7f0      	b.n	800cf02 <GUI_ReadRectEx+0x3a>
 800cf20:	bcf0      	pop	{r4, r5, r6, r7}
 800cf22:	4770      	bx	lr
 800cf24:	20000014 	.word	0x20000014

0800cf28 <LCD_SetClipRectEx>:
 800cf28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf2a:	4c09      	ldr	r4, [pc, #36]	; (800cf50 <LCD_SetClipRectEx+0x28>)
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	7c5a      	ldrb	r2, [r3, #17]
 800cf30:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <LCD_SetClipRectEx+0x2c>)
 800cf32:	4605      	mov	r5, r0
 800cf34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cf38:	68c3      	ldr	r3, [r0, #12]
 800cf3a:	4669      	mov	r1, sp
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3e:	4798      	blx	r3
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	466a      	mov	r2, sp
 800cf44:	4629      	mov	r1, r5
 800cf46:	3008      	adds	r0, #8
 800cf48:	f7fc f993 	bl	8009272 <GUI__IntersectRects>
 800cf4c:	b003      	add	sp, #12
 800cf4e:	bd30      	pop	{r4, r5, pc}
 800cf50:	20000014 	.word	0x20000014
 800cf54:	20027324 	.word	0x20027324

0800cf58 <GUI_MEMDEV_Delete>:
 800cf58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	b1f0      	cbz	r0, 800cf9c <GUI_MEMDEV_Delete+0x44>
 800cf5e:	f7fc f8bf 	bl	80090e0 <GUI_Lock>
 800cf62:	4b0f      	ldr	r3, [pc, #60]	; (800cfa0 <GUI_MEMDEV_Delete+0x48>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf68:	429c      	cmp	r4, r3
 800cf6a:	d101      	bne.n	800cf70 <GUI_MEMDEV_Delete+0x18>
 800cf6c:	f7fb fd77 	bl	8008a5e <GUI_SelectLCD>
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7fb fa8d 	bl	8008490 <GUI_ALLOC_LockH>
 800cf76:	9001      	str	r0, [sp, #4]
 800cf78:	6940      	ldr	r0, [r0, #20]
 800cf7a:	b108      	cbz	r0, 800cf80 <GUI_MEMDEV_Delete+0x28>
 800cf7c:	f7fe fa08 	bl	800b390 <GUI_USAGE_DecUseCnt>
 800cf80:	ad02      	add	r5, sp, #8
 800cf82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	f7fb ff4c 	bl	8008e24 <GUI_DEVICE_Delete>
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f7fb fa8d 	bl	80084ac <GUI_ALLOC_UnlockH>
 800cf92:	4620      	mov	r0, r4
 800cf94:	f7fb faaa 	bl	80084ec <GUI_ALLOC_Free>
 800cf98:	f7fc f898 	bl	80090cc <GUI_Unlock>
 800cf9c:	b003      	add	sp, #12
 800cf9e:	bd30      	pop	{r4, r5, pc}
 800cfa0:	20000014 	.word	0x20000014

0800cfa4 <GUI_MEMDEV_GetDataPtr>:
 800cfa4:	b513      	push	{r0, r1, r4, lr}
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	b170      	cbz	r0, 800cfc8 <GUI_MEMDEV_GetDataPtr+0x24>
 800cfaa:	f7fc f899 	bl	80090e0 <GUI_Lock>
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7fb fa6e 	bl	8008490 <GUI_ALLOC_LockH>
 800cfb4:	ab02      	add	r3, sp, #8
 800cfb6:	f100 0418 	add.w	r4, r0, #24
 800cfba:	f843 0d04 	str.w	r0, [r3, #-4]!
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fb fa74 	bl	80084ac <GUI_ALLOC_UnlockH>
 800cfc4:	f7fc f882 	bl	80090cc <GUI_Unlock>
 800cfc8:	4620      	mov	r0, r4
 800cfca:	b002      	add	sp, #8
 800cfcc:	bd10      	pop	{r4, pc}

0800cfce <LCD_Index2Color_888>:
 800cfce:	4770      	bx	lr

0800cfd0 <__libc_init_array>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	4e0d      	ldr	r6, [pc, #52]	; (800d008 <__libc_init_array+0x38>)
 800cfd4:	4c0d      	ldr	r4, [pc, #52]	; (800d00c <__libc_init_array+0x3c>)
 800cfd6:	1ba4      	subs	r4, r4, r6
 800cfd8:	10a4      	asrs	r4, r4, #2
 800cfda:	2500      	movs	r5, #0
 800cfdc:	42a5      	cmp	r5, r4
 800cfde:	d109      	bne.n	800cff4 <__libc_init_array+0x24>
 800cfe0:	4e0b      	ldr	r6, [pc, #44]	; (800d010 <__libc_init_array+0x40>)
 800cfe2:	4c0c      	ldr	r4, [pc, #48]	; (800d014 <__libc_init_array+0x44>)
 800cfe4:	f000 f846 	bl	800d074 <_init>
 800cfe8:	1ba4      	subs	r4, r4, r6
 800cfea:	10a4      	asrs	r4, r4, #2
 800cfec:	2500      	movs	r5, #0
 800cfee:	42a5      	cmp	r5, r4
 800cff0:	d105      	bne.n	800cffe <__libc_init_array+0x2e>
 800cff2:	bd70      	pop	{r4, r5, r6, pc}
 800cff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cff8:	4798      	blx	r3
 800cffa:	3501      	adds	r5, #1
 800cffc:	e7ee      	b.n	800cfdc <__libc_init_array+0xc>
 800cffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d002:	4798      	blx	r3
 800d004:	3501      	adds	r5, #1
 800d006:	e7f2      	b.n	800cfee <__libc_init_array+0x1e>
 800d008:	0800da20 	.word	0x0800da20
 800d00c:	0800da20 	.word	0x0800da20
 800d010:	0800da20 	.word	0x0800da20
 800d014:	0800da24 	.word	0x0800da24

0800d018 <memcpy>:
 800d018:	b510      	push	{r4, lr}
 800d01a:	1e43      	subs	r3, r0, #1
 800d01c:	440a      	add	r2, r1
 800d01e:	4291      	cmp	r1, r2
 800d020:	d100      	bne.n	800d024 <memcpy+0xc>
 800d022:	bd10      	pop	{r4, pc}
 800d024:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d02c:	e7f7      	b.n	800d01e <memcpy+0x6>

0800d02e <memmove>:
 800d02e:	4288      	cmp	r0, r1
 800d030:	b510      	push	{r4, lr}
 800d032:	eb01 0302 	add.w	r3, r1, r2
 800d036:	d803      	bhi.n	800d040 <memmove+0x12>
 800d038:	1e42      	subs	r2, r0, #1
 800d03a:	4299      	cmp	r1, r3
 800d03c:	d10c      	bne.n	800d058 <memmove+0x2a>
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	4298      	cmp	r0, r3
 800d042:	d2f9      	bcs.n	800d038 <memmove+0xa>
 800d044:	1881      	adds	r1, r0, r2
 800d046:	1ad2      	subs	r2, r2, r3
 800d048:	42d3      	cmn	r3, r2
 800d04a:	d100      	bne.n	800d04e <memmove+0x20>
 800d04c:	bd10      	pop	{r4, pc}
 800d04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d052:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d056:	e7f7      	b.n	800d048 <memmove+0x1a>
 800d058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d05c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d060:	e7eb      	b.n	800d03a <memmove+0xc>

0800d062 <memset>:
 800d062:	4402      	add	r2, r0
 800d064:	4603      	mov	r3, r0
 800d066:	4293      	cmp	r3, r2
 800d068:	d100      	bne.n	800d06c <memset+0xa>
 800d06a:	4770      	bx	lr
 800d06c:	f803 1b01 	strb.w	r1, [r3], #1
 800d070:	e7f9      	b.n	800d066 <memset+0x4>
	...

0800d074 <_init>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	bf00      	nop
 800d078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07a:	bc08      	pop	{r3}
 800d07c:	469e      	mov	lr, r3
 800d07e:	4770      	bx	lr

0800d080 <_fini>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	bf00      	nop
 800d084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d086:	bc08      	pop	{r3}
 800d088:	469e      	mov	lr, r3
 800d08a:	4770      	bx	lr
