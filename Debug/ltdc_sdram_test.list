
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116f8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ab4  080118a4  080118a4  000218a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013358  08013358  00023358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013360  08013360  00023360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013364  08013364  00023364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20000000  08013368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030040  2**0
                  CONTENTS
  8 .bss          0002308c  20000040  20000040  00030040  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200230cc  200230cc  00030040  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 11 .debug_info   00032158  00000000  00000000  0003006e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004236  00000000  00000000  000621c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001678  00000000  00000000  00066400  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014c0  00000000  00000000  00067a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000afa2  00000000  00000000  00068f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008c69  00000000  00000000  00073eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fe  00000000  00000000  0007cb43  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005eec  00000000  00000000  0007cc44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000040 	.word	0x20000040
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0801188c 	.word	0x0801188c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000044 	.word	0x20000044
 80001e8:	0801188c 	.word	0x0801188c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f961 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f007 ff76 	bl	8008420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f987 	bl	8000872 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f941 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20022c68 	.word	0x20022c68

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20022c68 	.word	0x20022c68

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <NVIC_EnableIRQ+0x30>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <NVIC_DisableIRQ+0x30>)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	095b      	lsrs	r3, r3, #5
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	f002 021f 	and.w	r2, r2, #31
 80006d4:	2001      	movs	r0, #1
 80006d6:	fa00 f202 	lsl.w	r2, r0, r2
 80006da:	3320      	adds	r3, #32
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da0b      	bge.n	800071c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <NVIC_SetPriority+0x4c>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	3b04      	subs	r3, #4
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071a:	e009      	b.n	8000730 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <NVIC_SetPriority+0x50>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	e000e100 	.word	0xe000e100

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	2201      	movs	r2, #1
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	401a      	ands	r2, r3
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078a:	2101      	movs	r1, #1
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	1e59      	subs	r1, r3, #1
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff15 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff2a 	bl	800066c <NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff1d 	bl	8000688 <NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff29 	bl	80006bc <NVIC_DisableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff94 	bl	80007a8 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fe96 	bl	80005c8 <HAL_GetTick>
 800089c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e099      	b.n	80009dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2202      	movs	r2, #2
 80008b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	f022 0201 	bic.w	r2, r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c8:	e00f      	b.n	80008ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008ca:	f7ff fe7d 	bl	80005c8 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d908      	bls.n	80008ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2220      	movs	r2, #32
 80008dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2203      	movs	r2, #3
 80008e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e078      	b.n	80009dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1e8      	bne.n	80008ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <HAL_DMA_Init+0x158>)
 8000904:	4013      	ands	r3, r2
 8000906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4313      	orrs	r3, r2
 800093a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	2b04      	cmp	r3, #4
 8000942:	d107      	bne.n	8000954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4313      	orrs	r3, r2
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4313      	orrs	r3, r2
 8000952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f023 0307 	bic.w	r3, r3, #7
 800096a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	4313      	orrs	r3, r2
 8000974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	2b04      	cmp	r3, #4
 800097c:	d117      	bne.n	80009ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4313      	orrs	r3, r2
 8000986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00e      	beq.n	80009ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f9e9 	bl	8000d68 <DMA_CheckFifoParam>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009aa:	2301      	movs	r3, #1
 80009ac:	e016      	b.n	80009dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f9a0 	bl	8000cfc <DMA_CalcBaseAndBitshift>
 80009bc:	4603      	mov	r3, r0
 80009be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c4:	223f      	movs	r2, #63	; 0x3f
 80009c6:	409a      	lsls	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	f010803f 	.word	0xf010803f

080009e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f4:	4b92      	ldr	r3, [pc, #584]	; (8000c40 <HAL_DMA_IRQHandler+0x258>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_DMA_IRQHandler+0x25c>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0a9b      	lsrs	r3, r3, #10
 8000a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a12:	2208      	movs	r2, #8
 8000a14:	409a      	lsls	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d013      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	f022 0204 	bic.w	r2, r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a40:	2208      	movs	r2, #8
 8000a42:	409a      	lsls	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d012      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	2201      	movs	r2, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a82:	f043 0202 	orr.w	r2, r3, #2
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d012      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2204      	movs	r2, #4
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d043      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03c      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d018      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d108      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d024      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
 8000b16:	e01f      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
 8000b28:	e016      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d107      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	f022 0208 	bic.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 808e 	beq.w	8000c86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8086 	beq.w	8000c86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7e:	2220      	movs	r2, #32
 8000b80:	409a      	lsls	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d136      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	f022 0216 	bic.w	r2, r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	6952      	ldr	r2, [r2, #20]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x1da>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd6:	223f      	movs	r2, #63	; 0x3f
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d07d      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
        }
        return;
 8000bfe:	e078      	b.n	8000cf2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01c      	beq.n	8000c48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d030      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
 8000c2c:	e02b      	b.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d027      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	4798      	blx	r3
 8000c3e:	e022      	b.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10f      	bne.n	8000c76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	f022 0210 	bic.w	r2, r2, #16
 8000c64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d032      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d022      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d807      	bhi.n	8000cce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f2      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x2ca>
 8000ccc:	e000      	b.n	8000cd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
 8000cf0:	e000      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cf2:	bf00      	nop
    }
  }
}
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop

08000cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3b10      	subs	r3, #16
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <DMA_CalcBaseAndBitshift+0x64>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <DMA_CalcBaseAndBitshift+0x68>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d909      	bls.n	8000d3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	1d1a      	adds	r2, r3, #4
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8000d3c:	e007      	b.n	8000d4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	aaaaaaab 	.word	0xaaaaaaab
 8000d64:	080118dc 	.word	0x080118dc

08000d68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11f      	bne.n	8000dc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d855      	bhi.n	8000e34 <DMA_CheckFifoParam+0xcc>
 8000d88:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <DMA_CheckFifoParam+0x28>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db3 	.word	0x08000db3
 8000d98:	08000da1 	.word	0x08000da1
 8000d9c:	08000e35 	.word	0x08000e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d045      	beq.n	8000e38 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000db0:	e042      	b.n	8000e38 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dba:	d13f      	bne.n	8000e3c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dc0:	e03c      	b.n	8000e3c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dca:	d121      	bne.n	8000e10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d836      	bhi.n	8000e40 <DMA_CheckFifoParam+0xd8>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <DMA_CheckFifoParam+0x70>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000def 	.word	0x08000def
 8000de0:	08000de9 	.word	0x08000de9
 8000de4:	08000e01 	.word	0x08000e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
      break;
 8000dec:	e02f      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d024      	beq.n	8000e44 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dfe:	e021      	b.n	8000e44 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e08:	d11e      	bne.n	8000e48 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e0e:	e01b      	b.n	8000e48 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d902      	bls.n	8000e1c <DMA_CheckFifoParam+0xb4>
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d003      	beq.n	8000e22 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e1a:	e018      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e20:	e015      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00e      	beq.n	8000e4c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
      break;
 8000e32:	e00b      	b.n	8000e4c <DMA_CheckFifoParam+0xe4>
      break;
 8000e34:	bf00      	nop
 8000e36:	e00a      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e38:	bf00      	nop
 8000e3a:	e008      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e3c:	bf00      	nop
 8000e3e:	e006      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;   
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e4c:	bf00      	nop
    }
  } 
  
  return status; 
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e03b      	b.n	8000ee6 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d106      	bne.n	8000e88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f007 faf4 	bl	8008470 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6852      	ldr	r2, [r2, #4]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000eb0:	f022 0107 	bic.w	r1, r2, #7
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6892      	ldr	r2, [r2, #8]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	68c9      	ldr	r1, [r1, #12]
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d026      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d021      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f28:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d026      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d021      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f80:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2220      	movs	r2, #32
 8000f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8e:	f043 0202 	orr.w	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d026      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d021      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2208      	movs	r2, #8
 8000fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe6:	f043 0204 	orr.w	r2, r3, #4
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001030:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2204      	movs	r2, #4
 8001038:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f853 	bl	80010e6 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d024      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01f      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001062:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2202      	movs	r2, #2
 800106a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01f      	beq.n	80010de <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01a      	beq.n	80010de <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010b6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f80e 	bl	80010fa <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3318      	adds	r3, #24
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_DMA2D_ConfigLayer+0x30>
 800113c:	2302      	movs	r3, #2
 800113e:	e070      	b.n	8001222 <HAL_DMA2D_ConfigLayer+0x112>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d003      	beq.n	8001160 <HAL_DMA2D_ConfigLayer+0x50>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d10c      	bne.n	800117a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	431a      	orrs	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001174:	4313      	orrs	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e00a      	b.n	8001190 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	041b      	lsls	r3, r3, #16
 8001184:	431a      	orrs	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	061b      	lsls	r3, r3, #24
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11e      	bne.n	80011d4 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_DMA2D_ConfigLayer+0x120>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA2D_ConfigLayer+0xb4>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d125      	bne.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	68d2      	ldr	r2, [r2, #12]
 80011cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
 80011d2:	e01d      	b.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69d9      	ldr	r1, [r3, #28]
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_DMA2D_ConfigLayer+0x120>)
 80011e0:	400b      	ands	r3, r1
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b0a      	cmp	r3, #10
 80011f8:	d003      	beq.n	8001202 <HAL_DMA2D_ConfigLayer+0xf2>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d106      	bne.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	68d2      	ldr	r2, [r2, #12]
 800120a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800120e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	00fcfff0 	.word	0x00fcfff0

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e177      	b.n	8001540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8166 	bne.w	800153a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x4a>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	69b9      	ldr	r1, [r7, #24]
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0203 	and.w	r2, r3, #3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d00b      	beq.n	800131a <HAL_GPIO_Init+0xe6>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	2b11      	cmp	r3, #17
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80c0 	beq.w	800153a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a60      	ldr	r2, [pc, #384]	; (8001558 <HAL_GPIO_Init+0x324>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d031      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x334>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a53      	ldr	r2, [pc, #332]	; (800156c <HAL_GPIO_Init+0x338>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_GPIO_Init+0x33c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x22a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a51      	ldr	r2, [pc, #324]	; (8001574 <HAL_GPIO_Init+0x340>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x226>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a50      	ldr	r2, [pc, #320]	; (8001578 <HAL_GPIO_Init+0x344>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4f      	ldr	r2, [pc, #316]	; (800157c <HAL_GPIO_Init+0x348>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_GPIO_Init+0x34c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x21a>
 800144a:	2309      	movs	r3, #9
 800144c:	e012      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800144e:	230a      	movs	r3, #10
 8001450:	e010      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001452:	2308      	movs	r3, #8
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001456:	2307      	movs	r3, #7
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x324>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_GPIO_Init+0x350>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae84 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40022000 	.word	0x40022000
 8001580:	40022400 	.word	0x40022400
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e0da      	b.n	800175a <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f040 80ca 	bne.w	8001754 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2103      	movs	r1, #3
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08d9      	lsrs	r1, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3108      	adds	r1, #8
 80015e2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	200f      	movs	r0, #15
 80015f0:	fa00 f303 	lsl.w	r3, r0, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4019      	ands	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2103      	movs	r1, #3
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2101      	movs	r1, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2103      	movs	r1, #3
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4013      	ands	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_GPIO_DeInit+0x1ec>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d037      	beq.n	80016da <HAL_GPIO_DeInit+0x152>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a42      	ldr	r2, [pc, #264]	; (8001778 <HAL_GPIO_DeInit+0x1f0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d031      	beq.n	80016d6 <HAL_GPIO_DeInit+0x14e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a41      	ldr	r2, [pc, #260]	; (800177c <HAL_GPIO_DeInit+0x1f4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02b      	beq.n	80016d2 <HAL_GPIO_DeInit+0x14a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a40      	ldr	r2, [pc, #256]	; (8001780 <HAL_GPIO_DeInit+0x1f8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_DeInit+0x146>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <HAL_GPIO_DeInit+0x1fc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_DeInit+0x142>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a3e      	ldr	r2, [pc, #248]	; (8001788 <HAL_GPIO_DeInit+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_DeInit+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_GPIO_DeInit+0x204>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_DeInit+0x13a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <HAL_GPIO_DeInit+0x208>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_DeInit+0x136>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_GPIO_DeInit+0x20c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_DeInit+0x132>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a3a      	ldr	r2, [pc, #232]	; (8001798 <HAL_GPIO_DeInit+0x210>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_DeInit+0x12e>
 80016b2:	2309      	movs	r3, #9
 80016b4:	e012      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016b6:	230a      	movs	r3, #10
 80016b8:	e010      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00e      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016da:	2300      	movs	r3, #0
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	fa03 f202 	lsl.w	r2, r3, r2
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d132      	bne.n	8001754 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	491a      	ldr	r1, [pc, #104]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	0892      	lsrs	r2, r2, #2
 800170a:	3202      	adds	r2, #2
 800170c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	43d2      	mvns	r2, r2
 8001714:	400a      	ands	r2, r1
 8001716:	3302      	adds	r3, #2
 8001718:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800171c:	491f      	ldr	r1, [pc, #124]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_GPIO_DeInit+0x214>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43db      	mvns	r3, r3
 8001726:	4013      	ands	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800172a:	491c      	ldr	r1, [pc, #112]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001738:	4918      	ldr	r1, [pc, #96]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001746:	4915      	ldr	r1, [pc, #84]	; (800179c <HAL_GPIO_DeInit+0x214>)
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43db      	mvns	r3, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	f67f af21 	bls.w	80015a4 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40022400 	.word	0x40022400
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0c8      	b.n	8001980 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f006 fe5c 	bl	80084c0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2224      	movs	r2, #36	; 0x24
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001820:	f002 f97a 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8001824:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_I2C_Init+0x1b4>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4952      	ldr	r1, [pc, #328]	; (800198c <HAL_I2C_Init+0x1b8>)
 8001844:	428b      	cmp	r3, r1
 8001846:	d802      	bhi.n	800184e <HAL_I2C_Init+0x7a>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	e009      	b.n	8001862 <HAL_I2C_Init+0x8e>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_I2C_Init+0x1bc>)
 800185a:	fba1 1303 	umull	r1, r3, r1, r3
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	3301      	adds	r3, #1
 8001862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_I2C_Init+0x1b8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d812      	bhi.n	8001898 <HAL_I2C_Init+0xc4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001882:	2b03      	cmp	r3, #3
 8001884:	d906      	bls.n	8001894 <HAL_I2C_Init+0xc0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	e045      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001894:	2304      	movs	r3, #4
 8001896:	e043      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_I2C_Init+0xec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e010      	b.n	80018e2 <HAL_I2C_Init+0x10e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009a      	lsls	r2, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Init+0x116>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e01a      	b.n	8001920 <HAL_I2C_Init+0x14c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <HAL_I2C_Init+0x134>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	e00b      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009a      	lsls	r2, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001920:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	69d1      	ldr	r1, [r2, #28]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6a12      	ldr	r2, [r2, #32]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6911      	ldr	r1, [r2, #16]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68d2      	ldr	r2, [r2, #12]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6951      	ldr	r1, [r2, #20]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6992      	ldr	r2, [r2, #24]
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	431bde83 	.word	0x431bde83
 800198c:	000186a0 	.word	0x000186a0
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	460b      	mov	r3, r1
 80019a2:	817b      	strh	r3, [r7, #10]
 80019a4:	4613      	mov	r3, r2
 80019a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ac:	f7fe fe0c 	bl	80005c8 <HAL_GetTick>
 80019b0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	f040 80ee 	bne.w	8001b9c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2319      	movs	r3, #25
 80019c6:	2201      	movs	r2, #1
 80019c8:	4977      	ldr	r1, [pc, #476]	; (8001ba8 <HAL_I2C_Master_Transmit+0x214>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fc6c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0e1      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_Master_Transmit+0x54>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0da      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d007      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2221      	movs	r2, #33	; 0x21
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	893a      	ldrh	r2, [r7, #8]
 8001a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_I2C_Master_Transmit+0x218>)
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	6a3a      	ldr	r2, [r7, #32]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fadc 	bl	8002014 <I2C_MasterRequestWrite>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00f      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d105      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e093      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e08d      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001a98:	e066      	b.n	8001b68 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fcc1 	bl	8002426 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00f      	beq.n	8001aca <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d109      	bne.n	8001ac6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e069      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c58      	adds	r0, r3, #1
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	6248      	str	r0, [r1, #36]	; 0x24
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d119      	bne.n	8001b38 <HAL_I2C_Master_Transmit+0x1a4>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	1c58      	adds	r0, r3, #1
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	6248      	str	r0, [r1, #36]	; 0x24
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fcaf 	bl	80024a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d109      	bne.n	8001b64 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01c      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e01a      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d194      	bne.n	8001a9a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000

08001bb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	817b      	strh	r3, [r7, #10]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc8:	f7fe fcfe 	bl	80005c8 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	f040 8215 	bne.w	8002006 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2319      	movs	r3, #25
 8001be2:	2201      	movs	r2, #1
 8001be4:	4985      	ldr	r1, [pc, #532]	; (8001dfc <HAL_I2C_Master_Receive+0x24c>)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fb5e 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e208      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2C_Master_Receive+0x54>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e201      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d007      	beq.n	8001c2a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2222      	movs	r2, #34	; 0x22
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2210      	movs	r2, #16
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	893a      	ldrh	r2, [r7, #8]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a68      	ldr	r2, [pc, #416]	; (8001e00 <HAL_I2C_Master_Receive+0x250>)
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa50 	bl	8002118 <I2C_MasterRequestRead>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00f      	beq.n	8001c9e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d105      	bne.n	8001c92 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1ba      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1b4      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d113      	bne.n	8001cce <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e188      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d11b      	bne.n	8001d0e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e168      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d11b      	bne.n	8001d4e <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	e148      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001d74:	e134      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f200 80eb 	bhi.w	8001f56 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d127      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fbc4 	bl	800251a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e131      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e12f      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	6251      	str	r1, [r2, #36]	; 0x24
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6912      	ldr	r2, [r2, #16]
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd6:	e103      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d14a      	bne.n	8001e76 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	2200      	movs	r2, #0
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_I2C_Master_Receive+0x254>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa5c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e106      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6251      	str	r1, [r2, #36]	; 0x24
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	6912      	ldr	r2, [r2, #16]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6251      	str	r1, [r2, #36]	; 0x24
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	6912      	ldr	r2, [r2, #16]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e74:	e0b4      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4964      	ldr	r1, [pc, #400]	; (8002010 <HAL_I2C_Master_Receive+0x460>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa11 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0bb      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	6912      	ldr	r2, [r2, #16]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	494e      	ldr	r1, [pc, #312]	; (8002010 <HAL_I2C_Master_Receive+0x460>)
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9e5 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e08f      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6251      	str	r1, [r2, #36]	; 0x24
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	6912      	ldr	r2, [r2, #16]
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6912      	ldr	r2, [r2, #16]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f54:	e044      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fadd 	bl	800251a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e04a      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e048      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d116      	bne.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	6251      	str	r1, [r2, #36]	; 0x24
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	6912      	ldr	r2, [r2, #16]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f aec6 	bne.w	8001d76 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	00010004 	.word	0x00010004

08002014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d006      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d003      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00b      	b.n	8002068 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b12      	cmp	r3, #18
 8002056:	d107      	bne.n	8002068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f917 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e040      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800208c:	d107      	bne.n	800209e <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	897a      	ldrh	r2, [r7, #10]
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	e021      	b.n	80020e2 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	897a      	ldrh	r2, [r7, #10]
 80020a4:	11d2      	asrs	r2, r2, #7
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 0206 	and.w	r2, r2, #6
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f062 020f 	orn	r2, r2, #15
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4915      	ldr	r1, [pc, #84]	; (8002110 <I2C_MasterRequestWrite+0xfc>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f944 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d101      	bne.n	80020d4 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e018      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e016      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	897a      	ldrh	r2, [r7, #10]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	490b      	ldr	r1, [pc, #44]	; (8002114 <I2C_MasterRequestWrite+0x100>)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f92e 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d101      	bne.n	8002100 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e002      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e000      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00010008 	.word	0x00010008
 8002114:	00010002 	.word	0x00010002

08002118 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d006      	beq.n	8002152 <I2C_MasterRequestRead+0x3a>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <I2C_MasterRequestRead+0x3a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	2b11      	cmp	r3, #17
 800216a:	d107      	bne.n	800217c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f88d 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e07f      	b.n	8002298 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a0:	d108      	bne.n	80021b4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	897a      	ldrh	r2, [r7, #10]
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	e05f      	b.n	8002274 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	897a      	ldrh	r2, [r7, #10]
 80021ba:	11d2      	asrs	r2, r2, #7
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 0206 	and.w	r2, r2, #6
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f062 020f 	orn	r2, r2, #15
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4933      	ldr	r1, [pc, #204]	; (80022a0 <I2C_MasterRequestRead+0x188>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f8b9 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d101      	bne.n	80021ea <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e056      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e054      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	897a      	ldrh	r2, [r7, #10]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <I2C_MasterRequestRead+0x18c>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8a3 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b04      	cmp	r3, #4
 8002210:	d101      	bne.n	8002216 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e040      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e03e      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f82b 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e01d      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	897a      	ldrh	r2, [r7, #10]
 8002262:	11d2      	asrs	r2, r2, #7
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 0206 	and.w	r2, r2, #6
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f062 020e 	orn	r2, r2, #14
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	490a      	ldr	r1, [pc, #40]	; (80022a4 <I2C_MasterRequestRead+0x18c>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f865 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d101      	bne.n	8002292 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e002      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e000      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010008 	.word	0x00010008
 80022a4:	00010002 	.word	0x00010002

080022a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022b8:	e01f      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c0:	d01b      	beq.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022c8:	f7fe f97e 	bl	80005c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d910      	bls.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e023      	b.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	e00c      	b.n	800233a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	429a      	cmp	r2, r3
 800233e:	d0bc      	beq.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002358:	e040      	b.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d11c      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002382:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2204      	movs	r2, #4
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e03c      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023aa:	d017      	beq.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80023b2:	f7fe f909 	bl	80005c8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e020      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10c      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e00b      	b.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d19e      	bne.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002432:	e029      	b.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f8ba 	bl	80025ae <I2C_IsAcknowledgeFailed>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e029      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244a:	d01d      	beq.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002452:	f7fe f8b9 	bl	80005c8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d912      	bls.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e007      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d1ce      	bne.n	8002434 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ac:	e029      	b.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f87d 	bl	80025ae <I2C_IsAcknowledgeFailed>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e029      	b.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c4:	d01d      	beq.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024cc:	f7fe f87c 	bl	80005c8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d912      	bls.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e007      	b.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d1ce      	bne.n	80024ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	e036      	b.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b10      	cmp	r3, #16
 8002534:	d114      	bne.n	8002560 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0210 	mvn.w	r2, #16
 800253e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e022      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002566:	f7fe f82f 	bl	80005c8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d90f      	bls.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d1c1      	bne.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d114      	bne.n	80025f0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ce:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	d129      	bne.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	f022 0210 	bic.w	r2, r2, #16
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	d12a      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	4313      	orrs	r3, r2
 80026c0:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	89fa      	ldrh	r2, [r7, #14]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 80026e6:	2302      	movs	r3, #2
  }
}  
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0bf      	b.n	800288e <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 ff9a 	bl	800865c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	6992      	ldr	r2, [r2, #24]
 800273a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800273e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	6991      	ldr	r1, [r2, #24]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6850      	ldr	r0, [r2, #4]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002758:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6912      	ldr	r2, [r2, #16]
 800275e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002760:	430a      	orrs	r2, r1
 8002762:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 8002770:	400b      	ands	r3, r1
 8002772:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	6891      	ldr	r1, [r2, #8]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6990      	ldr	r0, [r2, #24]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4302      	orrs	r2, r0
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 800279e:	400b      	ands	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68d1      	ldr	r1, [r2, #12]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6a10      	ldr	r0, [r2, #32]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4302      	orrs	r2, r0
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 80027cc:	400b      	ands	r3, r1
 80027ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	6911      	ldr	r1, [r2, #16]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4302      	orrs	r2, r0
 80027ea:	430a      	orrs	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6959      	ldr	r1, [r3, #20]
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 80027fa:	400b      	ands	r3, r1
 80027fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	6951      	ldr	r1, [r2, #20]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4302      	orrs	r2, r0
 8002818:	430a      	orrs	r2, r1
 800281a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800283a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4302      	orrs	r2, r0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002856:	4302      	orrs	r2, r0
 8002858:	430a      	orrs	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	f042 0206 	orr.w	r2, r2, #6
 800286a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6992      	ldr	r2, [r2, #24]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	f000f800 	.word	0xf000f800

0800289c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f005 ffef 	bl	8008888 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d023      	beq.n	8002936 <HAL_LTDC_IRQHandler+0x6a>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01e      	beq.n	8002936 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2204      	movs	r2, #4
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f86f 	bl	8002a14 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d023      	beq.n	8002988 <HAL_LTDC_IRQHandler+0xbc>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01e      	beq.n	8002988 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002954:	f022 0202 	bic.w	r2, r2, #2
 8002958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002968:	f043 0202 	orr.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f846 	bl	8002a14 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01b      	beq.n	80029ca <HAL_LTDC_IRQHandler+0xfe>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f002 f98d 	bl	8004ce4 <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_LTDC_IRQHandler+0x140>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2208      	movs	r2, #8
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f80e 	bl	8002a28 <HAL_LTDC_ReloadEventCallback>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_LTDC_ConfigLayer+0x1a>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e02c      	b.n	8002ab0 <HAL_LTDC_ConfigLayer+0x74>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2134      	movs	r1, #52	; 0x34
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa63 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}

08002ab8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_LTDC_ConfigColorKeying+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e031      	b.n	8002b36 <HAL_LTDC_ConfigColorKeying+0x7e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	4413      	add	r3, r2
 8002aee:	3384      	adds	r3, #132	; 0x84
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	440b      	add	r3, r1
 8002afe:	3384      	adds	r3, #132	; 0x84
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b06:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	01db      	lsls	r3, r3, #7
 8002b12:	4413      	add	r3, r2
 8002b14:	3384      	adds	r3, #132	; 0x84
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b089      	sub	sp, #36	; 0x24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_LTDC_ConfigCLUT+0x28>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e059      	b.n	8002c1e <HAL_LTDC_ConfigCLUT+0xdc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e041      	b.n	8002c04 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2134      	movs	r1, #52	; 0x34
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d114      	bne.n	8002bbe <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	e010      	b.n	8002be0 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	061a      	lsls	r2, r3, #24
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3384      	adds	r3, #132	; 0x84
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3b9      	bcc.n	8002b80 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_LTDC_EnableColorKeying+0x18>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e027      	b.n	8002c92 <HAL_LTDC_EnableColorKeying+0x68>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	01db      	lsls	r3, r3, #7
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3384      	adds	r3, #132	; 0x84
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	01db      	lsls	r3, r3, #7
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3384      	adds	r3, #132	; 0x84
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_LTDC_DisableColorKeying+0x18>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e027      	b.n	8002d06 <HAL_LTDC_DisableColorKeying+0x68>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3384      	adds	r3, #132	; 0x84
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3384      	adds	r3, #132	; 0x84
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0302 	bic.w	r3, r3, #2
 8002cea:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_LTDC_EnableCLUT+0x18>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e027      	b.n	8002d7a <HAL_LTDC_EnableCLUT+0x68>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	4413      	add	r3, r2
 8002d46:	3384      	adds	r3, #132	; 0x84
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	01db      	lsls	r3, r3, #7
 8002d54:	440b      	add	r3, r1
 8002d56:	3384      	adds	r3, #132	; 0x84
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_LTDC_SetWindowPosition+0x1c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e033      	b.n	8002e0a <HAL_LTDC_SetWindowPosition+0x84>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2234      	movs	r2, #52	; 0x34
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	3338      	adds	r3, #56	; 0x38
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	441a      	add	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	441a      	add	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8b6 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_LTDC_SetAlpha+0x1a>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e024      	b.n	8002e76 <HAL_LTDC_SetAlpha+0x64>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2234      	movs	r2, #52	; 0x34
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	3338      	adds	r3, #56	; 0x38
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f880 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_LTDC_SetAddress+0x1a>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e024      	b.n	8002ee2 <HAL_LTDC_SetAddress+0x64>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2234      	movs	r2, #52	; 0x34
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f84a 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_LTDC_ProgramLineEvent+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e023      	b.n	8002f4c <HAL_LTDC_ProgramLineEvent+0x60>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40016800 	.word	0x40016800

08002f5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	4413      	add	r3, r2
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	01db      	lsls	r3, r3, #7
 8002f94:	4413      	add	r3, r2
 8002f96:	3384      	adds	r3, #132	; 0x84
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3384      	adds	r3, #132	; 0x84
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fae:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	4413      	add	r3, r2
 8002fbc:	3384      	adds	r3, #132	; 0x84
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	4413      	add	r3, r2
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe8:	4413      	add	r3, r2
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3384      	adds	r3, #132	; 0x84
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	01db      	lsls	r3, r3, #7
 8003008:	440b      	add	r3, r1
 800300a:	3384      	adds	r3, #132	; 0x84
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003012:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	4413      	add	r3, r2
 8003020:	3384      	adds	r3, #132	; 0x84
 8003022:	4619      	mov	r1, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003032:	4413      	add	r3, r2
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	4413      	add	r3, r2
 8003048:	3384      	adds	r3, #132	; 0x84
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	440b      	add	r3, r1
 8003058:	3384      	adds	r3, #132	; 0x84
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4413      	add	r3, r2
 800306e:	3384      	adds	r3, #132	; 0x84
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	4413      	add	r3, r2
 80030a0:	3384      	adds	r3, #132	; 0x84
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	01db      	lsls	r3, r3, #7
 80030ae:	4413      	add	r3, r2
 80030b0:	3384      	adds	r3, #132	; 0x84
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	4413      	add	r3, r2
 80030c4:	3384      	adds	r3, #132	; 0x84
 80030c6:	4619      	mov	r1, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ce:	461a      	mov	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4413      	add	r3, r2
 80030ea:	3384      	adds	r3, #132	; 0x84
 80030ec:	461a      	mov	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	440b      	add	r3, r1
 80030fa:	3384      	adds	r3, #132	; 0x84
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003102:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4413      	add	r3, r2
 8003110:	3384      	adds	r3, #132	; 0x84
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	01db      	lsls	r3, r3, #7
 8003124:	4413      	add	r3, r2
 8003126:	3384      	adds	r3, #132	; 0x84
 8003128:	461a      	mov	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	440b      	add	r3, r1
 8003136:	3384      	adds	r3, #132	; 0x84
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	01db      	lsls	r3, r3, #7
 800314e:	4413      	add	r3, r2
 8003150:	3384      	adds	r3, #132	; 0x84
 8003152:	4619      	mov	r1, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	01db      	lsls	r3, r3, #7
 800316a:	4413      	add	r3, r2
 800316c:	3384      	adds	r3, #132	; 0x84
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	4413      	add	r3, r2
 800317c:	3384      	adds	r3, #132	; 0x84
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	01db      	lsls	r3, r3, #7
 800318e:	4413      	add	r3, r2
 8003190:	3384      	adds	r3, #132	; 0x84
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 80031a2:	2304      	movs	r3, #4
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e01b      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 80031b0:	2303      	movs	r3, #3
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e014      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00b      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d007      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d003      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d102      	bne.n	80031dc <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e001      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	3384      	adds	r3, #132	; 0x84
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	440b      	add	r3, r1
 80031fc:	3384      	adds	r3, #132	; 0x84
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	01db      	lsls	r3, r3, #7
 8003210:	4413      	add	r3, r2
 8003212:	3384      	adds	r3, #132	; 0x84
 8003214:	4618      	mov	r0, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1acb      	subs	r3, r1, r3
 800322c:	69f9      	ldr	r1, [r7, #28]
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	3303      	adds	r3, #3
 8003234:	4313      	orrs	r3, r2
 8003236:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	01db      	lsls	r3, r3, #7
 8003242:	4413      	add	r3, r2
 8003244:	3384      	adds	r3, #132	; 0x84
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	01db      	lsls	r3, r3, #7
 8003252:	440b      	add	r3, r1
 8003254:	3384      	adds	r3, #132	; 0x84
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800325c:	f023 0307 	bic.w	r3, r3, #7
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	4413      	add	r3, r2
 800326e:	3384      	adds	r3, #132	; 0x84
 8003270:	461a      	mov	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	01db      	lsls	r3, r3, #7
 8003282:	4413      	add	r3, r2
 8003284:	3384      	adds	r3, #132	; 0x84
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	01db      	lsls	r3, r3, #7
 8003292:	440b      	add	r3, r1
 8003294:	3384      	adds	r3, #132	; 0x84
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6013      	str	r3, [r2, #0]
}
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_PWREx_EnableOverDrive+0x94>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fd f976 	bl	80005c8 <HAL_GetTick>
 80032dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032de:	e009      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e0:	f7fd f972 	bl	80005c8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e01f      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d1ee      	bne.n	80032e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003308:	f7fd f95e 	bl	80005c8 <HAL_GetTick>
 800330c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800330e:	e009      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003310:	f7fd f95a 	bl	80005c8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331e:	d901      	bls.n	8003324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e007      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_PWREx_EnableOverDrive+0x98>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003330:	d1ee      	bne.n	8003310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	420e0040 	.word	0x420e0040
 8003344:	40007000 	.word	0x40007000
 8003348:	420e0044 	.word	0x420e0044

0800334c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e22d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d075      	beq.n	8003456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336a:	4ba3      	ldr	r3, [pc, #652]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00c      	beq.n	8003390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	2b08      	cmp	r3, #8
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b9d      	ldr	r3, [pc, #628]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b99      	ldr	r3, [pc, #612]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e208      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x74>
 80033b2:	4a91      	ldr	r2, [pc, #580]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	4b90      	ldr	r3, [pc, #576]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4a8b      	ldr	r2, [pc, #556]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4a88      	ldr	r2, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	4b87      	ldr	r3, [pc, #540]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033e4:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4a81      	ldr	r2, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033f2:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd f8e0 	bl	80005c8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd f8dc 	bl	80005c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1cd      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd f8cc 	bl	80005c8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd f8c8 	bl	80005c8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1b9      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0xe8>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e18d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4956      	ldr	r1, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_OscConfig+0x2b0>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd f881 	bl	80005c8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd f87d 	bl	80005c8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e16e      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4943      	ldr	r1, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_OscConfig+0x2b0>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd f860 	bl	80005c8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7fd f85c 	bl	80005c8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e14d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d030      	beq.n	8003598 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x2b4>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd f840 	bl	80005c8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd f83c 	bl	80005c8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e12d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x200>
 800356a:	e015      	b.n	8003598 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x2b4>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fd f829 	bl	80005c8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd f825 	bl	80005c8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e116      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a0 	beq.w	80036e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fc ffeb 	bl	80005c8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e011      	b.n	800361a <HAL_RCC_OscConfig+0x2ce>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	42470000 	.word	0x42470000
 8003600:	42470e80 	.word	0x42470e80
 8003604:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fc ffde 	bl	80005c8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0cf      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x478>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d106      	bne.n	800363c <HAL_RCC_OscConfig+0x2f0>
 800362e:	4a66      	ldr	r2, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003630:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x312>
 8003644:	4a60      	ldr	r2, [pc, #384]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4a5d      	ldr	r2, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003652:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
 800365e:	4a5a      	ldr	r2, [pc, #360]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4a57      	ldr	r2, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800366c:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fc ffa3 	bl	80005c8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fc ff9f 	bl	80005c8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e08e      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x33a>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fc ff8d 	bl	80005c8 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fc ff89 	bl	80005c8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e078      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4a3b      	ldr	r2, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d064      	beq.n	80037b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fc ff5e 	bl	80005c8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fc ff5a 	bl	80005c8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04b      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	4926      	ldr	r1, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	019b      	lsls	r3, r3, #6
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	3b01      	subs	r3, #1
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fc ff33 	bl	80005c8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fc ff2f 	bl	80005c8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e020      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x41a>
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fc ff1c 	bl	80005c8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fc ff18 	bl	80005c8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e009      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x448>
 80037b2:	e001      	b.n	80037b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470060 	.word	0x42470060

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0ca      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20c      	bcs.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b62      	ldr	r3, [pc, #392]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b6      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	494f      	ldr	r1, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e065      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4936      	ldr	r1, [pc, #216]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 0203 	bic.w	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fc fe82 	bl	80005c8 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fc fe7e 	bl	80005c8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d90c      	bls.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e030      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4918      	ldr	r1, [pc, #96]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4911      	ldr	r1, [pc, #68]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f81d 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
 800396a:	fa21 f303 	lsr.w	r3, r1, r3
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fc fde4 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00
 8003988:	40023800 	.word	0x40023800
 800398c:	080118e4 	.word	0x080118e4
 8003990:	2000000c 	.word	0x2000000c

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800399c:	2200      	movs	r2, #0
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	617a      	str	r2, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80039a8:	2200      	movs	r2, #0
 80039aa:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	f002 020c 	and.w	r2, r2, #12
 80039b4:	2a04      	cmp	r2, #4
 80039b6:	d007      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039b8:	2a08      	cmp	r2, #8
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x3a>
 80039bc:	2a00      	cmp	r2, #0
 80039be:	f040 8090 	bne.w	8003ae2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x164>)
 80039c4:	613b      	str	r3, [r7, #16]
       break;
 80039c6:	e08f      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	e08c      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ce:	4a49      	ldr	r2, [pc, #292]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039d6:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d8:	4a46      	ldr	r2, [pc, #280]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	ea03 0301 	and.w	r3, r3, r1
 80039fa:	ea04 0402 	and.w	r4, r4, r2
 80039fe:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 8003a00:	fb02 f104 	mul.w	r1, r2, r4
 8003a04:	2200      	movs	r2, #0
 8003a06:	fb02 f203 	mul.w	r2, r2, r3
 8003a0a:	440a      	add	r2, r1
 8003a0c:	493b      	ldr	r1, [pc, #236]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 8003a0e:	fba3 0101 	umull	r0, r1, r3, r1
 8003a12:	1853      	adds	r3, r2, r1
 8003a14:	4619      	mov	r1, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	f7fc fbe4 	bl	80001ec <__aeabi_uldivmod>
 8003a24:	4603      	mov	r3, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e04c      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2c:	4a31      	ldr	r2, [pc, #196]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a2e:	6852      	ldr	r2, [r2, #4]
 8003a30:	0992      	lsrs	r2, r2, #6
 8003a32:	4611      	mov	r1, r2
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003a3c:	f04f 0600 	mov.w	r6, #0
 8003a40:	ea05 0501 	and.w	r5, r5, r1
 8003a44:	ea06 0602 	and.w	r6, r6, r2
 8003a48:	4629      	mov	r1, r5
 8003a4a:	4632      	mov	r2, r6
 8003a4c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003a50:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003a54:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003a58:	4651      	mov	r1, sl
 8003a5a:	465a      	mov	r2, fp
 8003a5c:	46aa      	mov	sl, r5
 8003a5e:	46b3      	mov	fp, r6
 8003a60:	4655      	mov	r5, sl
 8003a62:	465e      	mov	r6, fp
 8003a64:	1b4d      	subs	r5, r1, r5
 8003a66:	eb62 0606 	sbc.w	r6, r2, r6
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	0194      	lsls	r4, r2, #6
 8003a70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a74:	018b      	lsls	r3, r1, #6
 8003a76:	1a5b      	subs	r3, r3, r1
 8003a78:	eb64 0402 	sbc.w	r4, r4, r2
 8003a7c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003a80:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003a84:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	464c      	mov	r4, r9
 8003a8c:	4655      	mov	r5, sl
 8003a8e:	465e      	mov	r6, fp
 8003a90:	18ed      	adds	r5, r5, r3
 8003a92:	eb46 0604 	adc.w	r6, r6, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	4634      	mov	r4, r6
 8003a9a:	02a2      	lsls	r2, r4, #10
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fb96 	bl	80001ec <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	613b      	str	r3, [r7, #16]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ae4:	613b      	str	r3, [r7, #16]
      break;
 8003ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae8:	693b      	ldr	r3, [r7, #16]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	017d7840 	.word	0x017d7840

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000000c 	.word	0x2000000c

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	f7ff fff0 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	080118f4 	.word	0x080118f4

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d061      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b68:	4ba3      	ldr	r3, [pc, #652]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b6e:	f7fc fd2b 	bl	80005c8 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b76:	f7fc fd27 	bl	80005c8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e177      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b88:	4b9c      	ldr	r3, [pc, #624]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba0:	4996      	ldr	r1, [pc, #600]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	019a      	lsls	r2, r3, #6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	071b      	lsls	r3, r3, #28
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	0f1b      	lsrs	r3, r3, #28
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bce:	498b      	ldr	r1, [pc, #556]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	019a      	lsls	r2, r3, #6
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003be8:	4984      	ldr	r1, [pc, #528]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bea:	4b84      	ldr	r3, [pc, #528]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f023 021f 	bic.w	r2, r3, #31
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c00:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c06:	f7fc fcdf 	bl	80005c8 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c0e:	f7fc fcdb 	bl	80005c8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e12b      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d079      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c44:	4b6e      	ldr	r3, [pc, #440]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4a:	f7fc fcbd 	bl	80005c8 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c52:	f7fc fcb9 	bl	80005c8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e109      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c64:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c70:	d0ef      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c7e:	4b5f      	ldr	r3, [pc, #380]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	0f1b      	lsrs	r3, r3, #28
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c8c:	495b      	ldr	r1, [pc, #364]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	071b      	lsls	r3, r3, #28
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ca6:	4955      	ldr	r1, [pc, #340]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ca8:	4b54      	ldr	r3, [pc, #336]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	0e1b      	lsrs	r3, r3, #24
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cda:	4948      	ldr	r1, [pc, #288]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf4:	4941      	ldr	r1, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fc fc5a 	bl	80005c8 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d18:	f7fc fc56 	bl	80005c8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0a6      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d36:	d1ef      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808d 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d62:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fc fc2b 	bl	80005c8 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fc fc27 	bl	80005c8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e077      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d039      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d032      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fc fbf5 	bl	80005c8 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	e014      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fc fbf1 	bl	80005c8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d90b      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03f      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003df8:	42470068 	.word	0x42470068
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	42470070 	.word	0x42470070
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0e4      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e24:	d10d      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003e26:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003e42:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	490c      	ldr	r1, [pc, #48]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e6c:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e74:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	424711e0 	.word	0x424711e0

08003e88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e025      	b.n	8003ee8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f004 fe29 	bl	8008b08 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f000 fcea 	bl	80048a2 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	f000 fd55 	bl	8004988 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d101      	bne.n	8003f0c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e018      	b.n	8003f3e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fdb2 	bl	8004a86 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d104      	bne.n	8003f34 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003f32:	e003      	b.n	8003f3c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d101      	bne.n	8003f60 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00e      	b.n	8003f7e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fdc5 	bl	8004afe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e055      	b.n	8004044 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f004 fcac 	bl	8008910 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6851      	ldr	r1, [r2, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6912      	ldr	r2, [r2, #16]
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6952      	ldr	r2, [r2, #20]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6992      	ldr	r2, [r2, #24]
 8003ff4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	69d2      	ldr	r2, [r2, #28]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a12      	ldr	r2, [r2, #32]
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6992      	ldr	r2, [r2, #24]
 8004016:	0c12      	lsrs	r2, r2, #16
 8004018:	f002 0104 	and.w	r1, r2, #4
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	69d2      	ldr	r2, [r2, #28]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_SPI_Transmit+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e123      	b.n	80042ba <HAL_SPI_Transmit+0x26e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407a:	f7fc faa5 	bl	80005c8 <HAL_GetTick>
 800407e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004090:	e10a      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_Transmit+0x52>
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a2:	e101      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d107      	bne.n	80040fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d007      	beq.n	800411a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d147      	bne.n	80041b4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_SPI_Transmit+0xea>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d138      	bne.n	80041a8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3302      	adds	r3, #2
 8004144:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004154:	e028      	b.n	80041a8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d10f      	bne.n	8004184 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	8812      	ldrh	r2, [r2, #0]
 800416c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3302      	adds	r3, #2
 8004172:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	86da      	strh	r2, [r3, #54]	; 0x36
 8004182:	e011      	b.n	80041a8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_SPI_Transmit+0x156>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004190:	d00a      	beq.n	80041a8 <HAL_SPI_Transmit+0x15c>
 8004192:	f7fc fa19 	bl	80005c8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a6:	e07f      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d1      	bne.n	8004156 <HAL_SPI_Transmit+0x10a>
 80041b2:	e048      	b.n	8004246 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_SPI_Transmit+0x17a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d13a      	bne.n	800423c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041e6:	e029      	b.n	800423c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d110      	bne.n	8004218 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	86da      	strh	r2, [r3, #54]	; 0x36
 8004216:	e011      	b.n	800423c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_SPI_Transmit+0x1ea>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004224:	d00a      	beq.n	800423c <HAL_SPI_Transmit+0x1f0>
 8004226:	f7fc f9cf 	bl	80005c8 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	77fb      	strb	r3, [r7, #31]
          goto error;
 800423a:	e035      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d0      	bne.n	80041e8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	2102      	movs	r1, #2
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f836 	bl	80042c2 <SPI_WaitFlagStateUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004260:	e022      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f894 	bl	8004394 <SPI_CheckFlag_BSY>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800427c:	e014      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80042d0:	e04d      	b.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d049      	beq.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80042e0:	f7fc f972 	bl	80005c8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d33e      	bcc.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042fe:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004308:	d111      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0x6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d004      	beq.n	800431e <SPI_WaitFlagStateUntilTimeout+0x5c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d107      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d110      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004346:	400b      	ands	r3, r1
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004358:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00e      	b.n	800438c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d101      	bne.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800437e:	2201      	movs	r2, #1
 8004380:	e000      	b.n	8004384 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004382:	2200      	movs	r2, #0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d1a3      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff89 	bl	80042c2 <SPI_WaitFlagStateUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e000      	b.n	80043c8 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e01d      	b.n	800441e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f004 fad2 	bl	80089a0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 f944 	bl	800469c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d122      	bne.n	8004482 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8f8 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ea 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8fb 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d122      	bne.n	80044d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d11b      	bne.n	80044d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0204 	mvn.w	r2, #4
 80044a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8ce 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8c0 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8d1 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d122      	bne.n	800452a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d11b      	bne.n	800452a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0208 	mvn.w	r2, #8
 80044fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2204      	movs	r2, #4
 8004500:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8a4 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004516:	e005      	b.n	8004524 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f896 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8a7 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d122      	bne.n	800457e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d11b      	bne.n	800457e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f06f 0210 	mvn.w	r2, #16
 800454e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2208      	movs	r2, #8
 8004554:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f87a 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800456a:	e005      	b.n	8004578 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f86c 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f87d 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10e      	bne.n	80045aa <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0201 	mvn.w	r2, #1
 80045a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f846 	bl	8004636 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f95c 	bl	800488e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f842 	bl	8004686 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0220 	mvn.w	r2, #32
 8004626:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f926 	bl	800487a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a44      	ldr	r2, [pc, #272]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a41      	ldr	r2, [pc, #260]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <TIM_Base_SetConfig+0x130>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <TIM_Base_SetConfig+0x48>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <TIM_Base_SetConfig+0x4a>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a31      	ldr	r2, [pc, #196]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d027      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d023      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <TIM_Base_SetConfig+0x130>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01f      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d017      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <TIM_Base_SetConfig+0x13c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <TIM_Base_SetConfig+0x140>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <TIM_Base_SetConfig+0x144>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <TIM_Base_SetConfig+0x148>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <TIM_Base_SetConfig+0x14c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a25      	ldr	r2, [pc, #148]	; (80047ec <TIM_Base_SetConfig+0x150>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <TIM_Base_SetConfig+0xc4>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <TIM_Base_SetConfig+0xc6>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x102>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <TIM_Base_SetConfig+0x106>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <TIM_Base_SetConfig+0x108>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	40001800 	.word	0x40001800
 80047e8:	40001c00 	.word	0x40001c00
 80047ec:	40002000 	.word	0x40002000

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004826:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	6851      	ldr	r1, [r2, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004848:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6891      	ldr	r1, [r2, #8]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
} 
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d029      	beq.n	8004910 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048cc:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048d6:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80048dc:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80048e2:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80048e8:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80048ee:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80048f4:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80048fa:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004900:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e034      	b.n	800497a <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491c:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004926:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800492c:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004944:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800494e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004954:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800495a:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004960:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004966:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d02e      	beq.n	8004a00 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049ae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049f0:	4313      	orrs	r3, r2
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e03b      	b.n	8004a78 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a36:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a46:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a50:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a5a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a64:	4313      	orrs	r3, r2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004aa2:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8004aac:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004abe:	f7fb fd83 	bl	80005c8 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ac4:	e010      	b.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004acc:	d00c      	beq.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <FMC_SDRAM_SendCommand+0x5e>
 8004ad4:	f7fb fd78 	bl	80005c8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d901      	bls.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e8      	bne.n	8004ac6 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8004b28:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 8004b2c:	4803      	ldr	r0, [pc, #12]	; (8004b3c <GUI_X_Config+0x18>)
 8004b2e:	f00a f911 	bl	800ed54 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8004b32:	4803      	ldr	r0, [pc, #12]	; (8004b40 <GUI_X_Config+0x1c>)
 8004b34:	f009 fd02 	bl	800e53c <GUI_SetDefaultFont>
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	2000005c 	.word	0x2000005c
 8004b40:	080125b4 	.word	0x080125b4

08004b44 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <Color2IndexBulk_M8888IDMA2D>:
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems);
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex);
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens);

DEFINEDMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af02      	add	r7, sp, #8
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	70fb      	strb	r3, [r7, #3]
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	2300      	movs	r3, #0
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f001 f88d 	bl	8005c8c <DMA2D_Color2IndexBulk>
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <Index2ColorBulk_M8888IDMA2D>:
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b086      	sub	sp, #24
 8004b7e:	af02      	add	r7, sp, #8
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	70fb      	strb	r3, [r7, #3]
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f001 f85f 	bl	8005c58 <DMA2D_Index2ColorBulk>
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <Color2IndexBulk_M888DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888)
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af02      	add	r7, sp, #8
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	70fb      	strb	r3, [r7, #3]
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f001 f865 	bl	8005c8c <DMA2D_Color2IndexBulk>
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <Index2ColorBulk_M888DMA2D>:
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af02      	add	r7, sp, #8
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	70fb      	strb	r3, [r7, #3]
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f001 f837 	bl	8005c58 <DMA2D_Index2ColorBulk>
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <Color2IndexBulk_M565DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	70fb      	strb	r3, [r7, #3]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	2302      	movs	r3, #2
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4613      	mov	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f001 f83d 	bl	8005c8c <DMA2D_Color2IndexBulk>
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <Index2ColorBulk_M565DMA2D>:
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	70fb      	strb	r3, [r7, #3]
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f001 f80f 	bl	8005c58 <DMA2D_Index2ColorBulk>
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <Color2IndexBulk_M1555IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af02      	add	r7, sp, #8
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	70fb      	strb	r3, [r7, #3]
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	2303      	movs	r3, #3
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f001 f815 	bl	8005c8c <DMA2D_Color2IndexBulk>
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <Index2ColorBulk_M1555IDMA2D>:
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af02      	add	r7, sp, #8
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	70fb      	strb	r3, [r7, #3]
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 ffe7 	bl	8005c58 <DMA2D_Index2ColorBulk>
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <Color2IndexBulk_M4444IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b086      	sub	sp, #24
 8004c96:	af02      	add	r7, sp, #8
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	70fb      	strb	r3, [r7, #3]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 ffed 	bl	8005c8c <DMA2D_Color2IndexBulk>
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <Index2ColorBulk_M4444IDMA2D>:
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af02      	add	r7, sp, #8
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	70fb      	strb	r3, [r7, #3]
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	2304      	movs	r3, #4
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 ffbf 	bl	8005c58 <DMA2D_Index2ColorBulk>
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t Addr;
  uint32_t layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e066      	b.n	8004dc0 <HAL_LTDC_LineEventCallback+0xdc>
  {
    if (layer_prop[layer].pending_buffer >= 0)
 8004cf2:	4939      	ldr	r1, [pc, #228]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3304      	adds	r3, #4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	db58      	blt.n	8004dba <HAL_LTDC_LineEventCallback+0xd6>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004d08:	4933      	ldr	r1, [pc, #204]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	482f      	ldr	r0, [pc, #188]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4403      	add	r3, r0
 8004d26:	330c      	adds	r3, #12
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	4c2b      	ldr	r4, [pc, #172]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4423      	add	r3, r4
 8004d38:	3310      	adds	r3, #16
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fb03 f000 	mul.w	r0, r3, r0
 8004d40:	4c25      	ldr	r4, [pc, #148]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4423      	add	r3, r4
 8004d4e:	3304      	adds	r3, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	fb03 f000 	mul.w	r0, r3, r0
 8004d56:	4c20      	ldr	r4, [pc, #128]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4423      	add	r3, r4
 8004d64:	3314      	adds	r3, #20
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	fb03 f300 	mul.w	r3, r3, r0
 8004d6c:	440b      	add	r3, r1
 8004d6e:	60bb      	str	r3, [r7, #8]
      HAL_LTDC_SetAddress(hltdc, Addr, layer);
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fe f882 	bl	8002e7e <HAL_LTDC_SetAddress>

	  __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	4912      	ldr	r1, [pc, #72]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f008 fc6c 	bl	800d67c <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8004da4:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <HAL_LTDC_LineEventCallback+0xf4>)
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3304      	adds	r3, #4
 8004db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db8:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d095      	beq.n	8004cf2 <HAL_LTDC_LineEventCallback+0xe>
    }
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fe f88f 	bl	8002eec <HAL_LTDC_ProgramLineEvent>
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2001f89c 	.word	0x2001f89c

08004ddc <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
  uint32_t i;

  LCD_LL_Init();
 8004de2:	f000 fa7f 	bl	80052e4 <LCD_LL_Init>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8004de6:	2300      	movs	r3, #0
 8004de8:	2200      	movs	r2, #0
 8004dea:	4958      	ldr	r1, [pc, #352]	; (8004f4c <LCD_X_Config+0x170>)
 8004dec:	4858      	ldr	r0, [pc, #352]	; (8004f50 <LCD_X_Config+0x174>)
 8004dee:	f009 fb35 	bl	800e45c <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8004df2:	2000      	movs	r0, #0
 8004df4:	f006 fd4a 	bl	800b88c <LCD_GetSwapXYEx>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <LCD_X_Config+0x3c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004dfe:	22f0      	movs	r2, #240	; 0xf0
 8004e00:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e04:	2000      	movs	r0, #0
 8004e06:	f006 fc97 	bl	800b738 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004e0a:	22f0      	movs	r2, #240	; 0xf0
 8004e0c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e10:	2000      	movs	r0, #0
 8004e12:	f006 fc79 	bl	800b708 <LCD_SetVSizeEx>
 8004e16:	e00b      	b.n	8004e30 <LCD_X_Config+0x54>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8004e18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e1c:	21f0      	movs	r1, #240	; 0xf0
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f006 fc8a 	bl	800b738 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004e24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e28:	21f0      	movs	r1, #240	; 0xf0
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f006 fc6c 	bl	800b708 <LCD_SetVSizeEx>
      LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
    }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8004e30:	4b48      	ldr	r3, [pc, #288]	; (8004f54 <LCD_X_Config+0x178>)
 8004e32:	4a49      	ldr	r2, [pc, #292]	; (8004f58 <LCD_X_Config+0x17c>)
 8004e34:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER;
#endif

   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	e07f      	b.n	8004f3c <LCD_X_Config+0x160>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8004e3c:	4a47      	ldr	r2, [pc, #284]	; (8004f5c <LCD_X_Config+0x180>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e44:	4843      	ldr	r0, [pc, #268]	; (8004f54 <LCD_X_Config+0x178>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4403      	add	r3, r0
 8004e52:	3318      	adds	r3, #24
 8004e54:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8004e56:	493f      	ldr	r1, [pc, #252]	; (8004f54 <LCD_X_Config+0x178>)
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3304      	adds	r3, #4
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4939      	ldr	r1, [pc, #228]	; (8004f54 <LCD_X_Config+0x178>)
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f006 fc2c 	bl	800b6dc <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f006 fcf4 	bl	800b874 <LCD_GetBitsPerPixelEx>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	10d9      	asrs	r1, r3, #3
 8004e90:	4830      	ldr	r0, [pc, #192]	; (8004f54 <LCD_X_Config+0x178>)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4403      	add	r3, r0
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2e      	ldr	r2, [pc, #184]	; (8004f60 <LCD_X_Config+0x184>)
 8004ea6:	2121      	movs	r1, #33	; 0x21
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f006 fca5 	bl	800b7f8 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <LCD_X_Config+0x188>)
 8004eb2:	2123      	movs	r1, #35	; 0x23
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f006 fc9f 	bl	800b7f8 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    if (LCD_LL_GetPixelformat(i) <= LTDC_PIXEL_FORMAT_ARGB4444)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa88 	bl	80053d0 <LCD_LL_GetPixelformat>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d80b      	bhi.n	8004ede <LCD_X_Config+0x102>
    {
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <LCD_X_Config+0x18c>)
 8004eca:	2119      	movs	r1, #25
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f006 fc93 	bl	800b7f8 <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))BSP_LCD_DrawBitmap8bpp);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <LCD_X_Config+0x190>)
 8004ed6:	2125      	movs	r1, #37	; 0x25
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f006 fc8d 	bl	800b7f8 <LCD_SetDevFunc>
    }

    /* Set up drawing routine for 16bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_RGB565) {
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fa76 	bl	80053d0 <LCD_LL_GetPixelformat>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d105      	bne.n	8004ef6 <LCD_X_Config+0x11a>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))BSP_LCD_DrawBitmap16bpp);     /* Set up drawing routine for 16bpp bitmap using DMA2D. Makes only sense with RGB565 */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <LCD_X_Config+0x194>)
 8004eee:	2124      	movs	r1, #36	; 0x24
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f006 fc81 	bl	800b7f8 <LCD_SetDevFunc>
    }

    /* Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination */
    GUICC_M1555I_SetCustColorConv(Color2IndexBulk_M1555IDMA2D, Index2ColorBulk_M1555IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB1555 */
 8004ef6:	491f      	ldr	r1, [pc, #124]	; (8004f74 <LCD_X_Config+0x198>)
 8004ef8:	481f      	ldr	r0, [pc, #124]	; (8004f78 <LCD_X_Config+0x19c>)
 8004efa:	f00a fc2d 	bl	800f758 <GUICC_M1555I_SetCustColorConv>
    GUICC_M565_SetCustColorConv  (Color2IndexBulk_M565DMA2D,   Index2ColorBulk_M565DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB565 */
 8004efe:	491f      	ldr	r1, [pc, #124]	; (8004f7c <LCD_X_Config+0x1a0>)
 8004f00:	481f      	ldr	r0, [pc, #124]	; (8004f80 <LCD_X_Config+0x1a4>)
 8004f02:	f00a fa27 	bl	800f354 <GUICC_M565_SetCustColorConv>
    GUICC_M4444I_SetCustColorConv(Color2IndexBulk_M4444IDMA2D, Index2ColorBulk_M4444IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB4444 */
 8004f06:	491f      	ldr	r1, [pc, #124]	; (8004f84 <LCD_X_Config+0x1a8>)
 8004f08:	481f      	ldr	r0, [pc, #124]	; (8004f88 <LCD_X_Config+0x1ac>)
 8004f0a:	f00a fb8d 	bl	800f628 <GUICC_M4444I_SetCustColorConv>
    GUICC_M888_SetCustColorConv  (Color2IndexBulk_M888DMA2D,   Index2ColorBulk_M888DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB888 */
 8004f0e:	491f      	ldr	r1, [pc, #124]	; (8004f8c <LCD_X_Config+0x1b0>)
 8004f10:	481f      	ldr	r0, [pc, #124]	; (8004f90 <LCD_X_Config+0x1b4>)
 8004f12:	f00a f995 	bl	800f240 <GUICC_M888_SetCustColorConv>
    GUICC_M8888I_SetCustColorConv(Color2IndexBulk_M8888IDMA2D, Index2ColorBulk_M8888IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB8888 */
 8004f16:	491f      	ldr	r1, [pc, #124]	; (8004f94 <LCD_X_Config+0x1b8>)
 8004f18:	481f      	ldr	r0, [pc, #124]	; (8004f98 <LCD_X_Config+0x1bc>)
 8004f1a:	f00a fadd 	bl	800f4d8 <GUICC_M8888I_SetCustColorConv>

    /* Set up custom alpha blending function using DMA2D */
    GUI_SetFuncAlphaBlending(DMA2D_AlphaBlending);                                                /* Set up custom alpha blending function using DMA2D */
 8004f1e:	481f      	ldr	r0, [pc, #124]	; (8004f9c <LCD_X_Config+0x1c0>)
 8004f20:	f007 fb68 	bl	800c5f4 <GUI_SetFuncAlphaBlending>

    /* Set up custom function for translating a bitmap palette into index values.
    Required to load a bitmap palette into DMA2D CLUT in case of a 8bpp indexed bitmap */
    GUI_SetFuncGetpPalConvTable(_LCD_GetpPalConvTable);
 8004f24:	481e      	ldr	r0, [pc, #120]	; (8004fa0 <LCD_X_Config+0x1c4>)
 8004f26:	f009 fb03 	bl	800e530 <GUI_SetFuncGetpPalConvTable>

    /* Set up a custom function for mixing up single colors using DMA2D */
    GUI_SetFuncMixColors(DMA2D_MixColors);
 8004f2a:	481e      	ldr	r0, [pc, #120]	; (8004fa4 <LCD_X_Config+0x1c8>)
 8004f2c:	f007 fb68 	bl	800c600 <GUI_SetFuncMixColors>

    /* Set up a custom function for mixing up arrays of colors using DMA2D */
    GUI_SetFuncMixColorsBulk(LCD_MixColorsBulk);
 8004f30:	481d      	ldr	r0, [pc, #116]	; (8004fa8 <LCD_X_Config+0x1cc>)
 8004f32:	f007 fb6b 	bl	800c60c <GUI_SetFuncMixColorsBulk>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f43f af7c 	beq.w	8004e3c <LCD_X_Config+0x60>
  }
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	08012f30 	.word	0x08012f30
 8004f50:	08012cb8 	.word	0x08012cb8
 8004f54:	2001f89c 	.word	0x2001f89c
 8004f58:	d0200000 	.word	0xd0200000
 8004f5c:	20000008 	.word	0x20000008
 8004f60:	080055c1 	.word	0x080055c1
 8004f64:	08005675 	.word	0x08005675
 8004f68:	08005795 	.word	0x08005795
 8004f6c:	08005e95 	.word	0x08005e95
 8004f70:	08005dc5 	.word	0x08005dc5
 8004f74:	08004c6b 	.word	0x08004c6b
 8004f78:	08004c43 	.word	0x08004c43
 8004f7c:	08004c1b 	.word	0x08004c1b
 8004f80:	08004bf3 	.word	0x08004bf3
 8004f84:	08004cbb 	.word	0x08004cbb
 8004f88:	08004c93 	.word	0x08004c93
 8004f8c:	08004bcb 	.word	0x08004bcb
 8004f90:	08004ba3 	.word	0x08004ba3
 8004f94:	08004b7b 	.word	0x08004b7b
 8004f98:	08004b53 	.word	0x08004b53
 8004f9c:	08005c0d 	.word	0x08005c0d
 8004fa0:	08005b01 	.word	0x08005b01
 8004fa4:	080059e9 	.word	0x080059e9
 8004fa8:	08005cc1 	.word	0x08005cc1

08004fac <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b08b      	sub	sp, #44	; 0x2c
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  int32_t r = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t addr;
  int32_t xPos, yPos;
  uint32_t Color;

  switch (Cmd)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	2b0d      	cmp	r3, #13
 8004fc2:	f200 8102 	bhi.w	80051ca <LCD_X_DisplayDriver+0x21e>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <LCD_X_DisplayDriver+0x20>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005005 	.word	0x08005005
 8004fd0:	080051cb 	.word	0x080051cb
 8004fd4:	0800500d 	.word	0x0800500d
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	08005083 	.word	0x08005083
 8004fe0:	08005095 	.word	0x08005095
 8004fe4:	08005125 	.word	0x08005125
 8004fe8:	0800510f 	.word	0x0800510f
 8004fec:	080050a7 	.word	0x080050a7
 8004ff0:	08005173 	.word	0x08005173
 8004ff4:	080051cb 	.word	0x080051cb
 8004ff8:	08005183 	.word	0x08005183
 8004ffc:	0800519f 	.word	0x0800519f
 8005000:	0800505d 	.word	0x0800505d
  {
  case LCD_X_INITCONTROLLER:
    LCD_LL_LayerInit(LayerIndex);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f8ed 	bl	80051e4 <LCD_LL_LayerInit>
    break;
 800500a:	e0e1      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETORG:
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 800500c:	4973      	ldr	r1, [pc, #460]	; (80051dc <LCD_X_DisplayDriver+0x230>)
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6858      	ldr	r0, [r3, #4]
 8005020:	4c6e      	ldr	r4, [pc, #440]	; (80051dc <LCD_X_DisplayDriver+0x230>)
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4423      	add	r3, r4
 800502e:	330c      	adds	r3, #12
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	fb03 f000 	mul.w	r0, r3, r0
 8005036:	4c69      	ldr	r4, [pc, #420]	; (80051dc <LCD_X_DisplayDriver+0x230>)
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4423      	add	r3, r4
 8005044:	3314      	adds	r3, #20
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	fb03 f300 	mul.w	r3, r3, r0
 800504c:	440b      	add	r3, r1
 800504e:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	6a39      	ldr	r1, [r7, #32]
 8005054:	4862      	ldr	r0, [pc, #392]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 8005056:	f7fd ff12 	bl	8002e7e <HAL_LTDC_SetAddress>
    break;
 800505a:	e0b9      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SHOWBUFFER:
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	485e      	ldr	r0, [pc, #376]	; (80051dc <LCD_X_DisplayDriver+0x230>)
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4403      	add	r3, r0
 800506e:	3304      	adds	r3, #4
 8005070:	6019      	str	r1, [r3, #0]
    break;
 8005072:	e0ad      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETLUTENTRY:
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	4859      	ldr	r0, [pc, #356]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 800507c:	f7fd fd61 	bl	8002b42 <HAL_LTDC_ConfigCLUT>
    break;
 8005080:	e0a6      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_ON:
    __HAL_LTDC_ENABLE(&hltdc);
 8005082:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a56      	ldr	r2, [pc, #344]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	6992      	ldr	r2, [r2, #24]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	619a      	str	r2, [r3, #24]
    break;
 8005092:	e09d      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_OFF:
    __HAL_LTDC_DISABLE(&hltdc);
 8005094:	4b52      	ldr	r3, [pc, #328]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a51      	ldr	r2, [pc, #324]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	6992      	ldr	r2, [r2, #24]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	619a      	str	r2, [r3, #24]
    break;
 80050a4:	e094      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d113      	bne.n	80050d6 <LCD_X_DisplayDriver+0x12a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 80050ae:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	01db      	lsls	r3, r3, #7
 80050b8:	4413      	add	r3, r2
 80050ba:	3384      	adds	r3, #132	; 0x84
 80050bc:	461a      	mov	r2, r3
 80050be:	4b48      	ldr	r3, [pc, #288]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4619      	mov	r1, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	01db      	lsls	r3, r3, #7
 80050c8:	440b      	add	r3, r1
 80050ca:	3384      	adds	r3, #132	; 0x84
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e012      	b.n	80050fc <LCD_X_DisplayDriver+0x150>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 80050d6:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	01db      	lsls	r3, r3, #7
 80050e0:	4413      	add	r3, r2
 80050e2:	3384      	adds	r3, #132	; 0x84
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	01db      	lsls	r3, r3, #7
 80050f0:	440b      	add	r3, r1
 80050f2:	3384      	adds	r3, #132	; 0x84
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 80050fc:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 800510c:	e060      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETPOS:
    HAL_LTDC_SetWindowPosition(&hltdc,
                               ((LCD_X_SETPOS_INFO *)pData)->xPos,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8005112:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8005118:	461a      	mov	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4830      	ldr	r0, [pc, #192]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 800511e:	f7fd fe32 	bl	8002d86 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8005122:	e055      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, (int*)&xPos, (int*)&yPos);
 8005124:	f107 0214 	add.w	r2, r7, #20
 8005128:	f107 0318 	add.w	r3, r7, #24
 800512c:	4619      	mov	r1, r3
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f008 f990 	bl	800d454 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	4828      	ldr	r0, [pc, #160]	; (80051dc <LCD_X_DisplayDriver+0x230>)
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4403      	add	r3, r0
 8005146:	330c      	adds	r3, #12
 8005148:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	4823      	ldr	r0, [pc, #140]	; (80051dc <LCD_X_DisplayDriver+0x230>)
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4403      	add	r3, r0
 800515c:	3310      	adds	r3, #16
 800515e:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4619      	mov	r1, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	481d      	ldr	r0, [pc, #116]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 800516c:	f7fd fe0b 	bl	8002d86 <HAL_LTDC_SetWindowPosition>
    break;
 8005170:	e02e      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4619      	mov	r1, r3
 800517a:	4819      	ldr	r0, [pc, #100]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 800517c:	f7fd fe49 	bl	8002e12 <HAL_LTDC_SetAlpha>
    break;
 8005180:	e026      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <LCD_X_DisplayDriver+0x1e8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	4814      	ldr	r0, [pc, #80]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 800518e:	f7fd fd4c 	bl	8002c2a <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
    }
    break;
 8005192:	e01d      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 8005194:	68f9      	ldr	r1, [r7, #12]
 8005196:	4812      	ldr	r0, [pc, #72]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 8005198:	f7fd fd81 	bl	8002c9e <HAL_LTDC_DisableColorKeying>
    break;
 800519c:	e018      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80051ae:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61fb      	str	r3, [r7, #28]

    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	4807      	ldr	r0, [pc, #28]	; (80051e0 <LCD_X_DisplayDriver+0x234>)
 80051c4:	f7fd fc78 	bl	8002ab8 <HAL_LTDC_ConfigColorKeying>
    break;
 80051c8:	e002      	b.n	80051d0 <LCD_X_DisplayDriver+0x224>

  default:
    r = -1;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	372c      	adds	r7, #44	; 0x2c
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	2001f89c 	.word	0x2001f89c
 80051e0:	20022c70 	.word	0x20022c70

080051e4 <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(uint32_t LayerIndex)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b090      	sub	sp, #64	; 0x40
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t                         i;
  static uint32_t                  LUT[256];
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d169      	bne.n	80052c6 <LCD_LL_LayerInit+0xe2>
  {
  /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 80051f6:	23f0      	movs	r3, #240	; 0xf0
 80051f8:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowY0 = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY1 = YSIZE_PHYS;
 80051fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005202:	617b      	str	r3, [r7, #20]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8e3 	bl	80053d0 <LCD_LL_GetPixelformat>
 800520a:	4603      	mov	r3, r0
 800520c:	61bb      	str	r3, [r7, #24]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 800520e:	4930      	ldr	r1, [pc, #192]	; (80052d0 <LCD_LL_LayerInit+0xec>)
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.Alpha = 255;
 8005220:	23ff      	movs	r3, #255	; 0xff
 8005222:	61fb      	str	r3, [r7, #28]
    layer_cfg.Alpha0 = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	623b      	str	r3, [r7, #32]
    layer_cfg.Backcolor.Blue = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    layer_cfg.Backcolor.Green = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    layer_cfg.Backcolor.Red = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800523a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005240:	2307      	movs	r3, #7
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8005244:	23f0      	movs	r3, #240	; 0xf0
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8005248:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4619      	mov	r1, r3
 8005256:	481f      	ldr	r0, [pc, #124]	; (80052d4 <LCD_LL_LayerInit+0xf0>)
 8005258:	f7fd fbf0 	bl	8002a3c <HAL_LTDC_ConfigLayer>

    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	f006 fb08 	bl	800b874 <LCD_GetBitsPerPixelEx>
 8005264:	4603      	mov	r3, r0
 8005266:	2b08      	cmp	r3, #8
 8005268:	dc04      	bgt.n	8005274 <LCD_LL_LayerInit+0x90>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4819      	ldr	r0, [pc, #100]	; (80052d4 <LCD_LL_LayerInit+0xf0>)
 800526e:	f7fd fd50 	bl	8002d12 <HAL_LTDC_EnableCLUT>
        }
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
      }
    }
  }
}
 8005272:	e028      	b.n	80052c6 <LCD_LL_LayerInit+0xe2>
      if (layer_prop[LayerIndex].pColorConvAPI == GUICC_88666I)
 8005274:	4916      	ldr	r1, [pc, #88]	; (80052d0 <LCD_LL_LayerInit+0xec>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	3318      	adds	r3, #24
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <LCD_LL_LayerInit+0xf4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d11c      	bne.n	80052c6 <LCD_LL_LayerInit+0xe2>
        HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4811      	ldr	r0, [pc, #68]	; (80052d4 <LCD_LL_LayerInit+0xf0>)
 8005290:	f7fd fd3f 	bl	8002d12 <HAL_LTDC_EnableCLUT>
        for (i = 0; i < 256; i++)
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005298:	e00b      	b.n	80052b2 <LCD_LL_LayerInit+0xce>
          LUT[i] = LCD_API_ColorConv_8666.pfIndex2Color(i);
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <LCD_LL_LayerInit+0xf8>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052a0:	4798      	blx	r3
 80052a2:	4601      	mov	r1, r0
 80052a4:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <LCD_LL_LayerInit+0xfc>)
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < 256; i++)
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	3301      	adds	r3, #1
 80052b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	2bff      	cmp	r3, #255	; 0xff
 80052b6:	d9f0      	bls.n	800529a <LCD_LL_LayerInit+0xb6>
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052be:	4908      	ldr	r1, [pc, #32]	; (80052e0 <LCD_LL_LayerInit+0xfc>)
 80052c0:	4804      	ldr	r0, [pc, #16]	; (80052d4 <LCD_LL_LayerInit+0xf0>)
 80052c2:	f7fd fc3e 	bl	8002b42 <HAL_LTDC_ConfigCLUT>
}
 80052c6:	bf00      	nop
 80052c8:	3740      	adds	r7, #64	; 0x40
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	2001f89c 	.word	0x2001f89c
 80052d4:	20022c70 	.word	0x20022c70
 80052d8:	08012f78 	.word	0x08012f78
 80052dc:	08012f90 	.word	0x08012f90
 80052e0:	200225b8 	.word	0x200225b8

080052e4 <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 80052e8:	4834      	ldr	r0, [pc, #208]	; (80053bc <LCD_LL_Init+0xd8>)
 80052ea:	f7fd fad7 	bl	800289c <HAL_LTDC_DeInit>

      /* Initializaton of ILI9341 component*/
      LCD_PowerOn();
 80052ee:	f002 fb05 	bl	80078fc <LCD_PowerOn>

      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 80052f2:	4b32      	ldr	r3, [pc, #200]	; (80053bc <LCD_LL_Init+0xd8>)
 80052f4:	2209      	movs	r2, #9
 80052f6:	615a      	str	r2, [r3, #20]
      hltdc.Init.VerticalSync = 1;
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <LCD_LL_Init+0xd8>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	619a      	str	r2, [r3, #24]
      hltdc.Init.AccumulatedHBP = 29;
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <LCD_LL_Init+0xd8>)
 8005300:	221d      	movs	r2, #29
 8005302:	61da      	str	r2, [r3, #28]
      hltdc.Init.AccumulatedVBP = 3;
 8005304:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <LCD_LL_Init+0xd8>)
 8005306:	2203      	movs	r2, #3
 8005308:	621a      	str	r2, [r3, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <LCD_LL_Init+0xd8>)
 800530c:	f240 1243 	movw	r2, #323	; 0x143
 8005310:	629a      	str	r2, [r3, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 8005312:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <LCD_LL_Init+0xd8>)
 8005314:	f240 120d 	movw	r2, #269	; 0x10d
 8005318:	625a      	str	r2, [r3, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 800531a:	4b28      	ldr	r3, [pc, #160]	; (80053bc <LCD_LL_Init+0xd8>)
 800531c:	f240 1247 	movw	r2, #327	; 0x147
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 8005322:	4b26      	ldr	r3, [pc, #152]	; (80053bc <LCD_LL_Init+0xd8>)
 8005324:	f240 1217 	movw	r2, #279	; 0x117
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c

      /* background value */
      hltdc.Init.Backcolor.Blue = 0;
 800532a:	4b24      	ldr	r3, [pc, #144]	; (80053bc <LCD_LL_Init+0xd8>)
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <LCD_LL_Init+0xd8>)
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 800533a:	4b20      	ldr	r3, [pc, #128]	; (80053bc <LCD_LL_Init+0xd8>)
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 Mhz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <LCD_LL_Init+0xdc>)
 8005344:	2208      	movs	r2, #8
 8005346:	601a      	str	r2, [r3, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <LCD_LL_Init+0xdc>)
 800534a:	22c0      	movs	r2, #192	; 0xc0
 800534c:	611a      	str	r2, [r3, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <LCD_LL_Init+0xdc>)
 8005350:	2204      	movs	r2, #4
 8005352:	619a      	str	r2, [r3, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <LCD_LL_Init+0xdc>)
 8005356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800535a:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800535c:	4818      	ldr	r0, [pc, #96]	; (80053c0 <LCD_LL_Init+0xdc>)
 800535e:	f7fe fbef 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>

      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <LCD_LL_Init+0xd8>)
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <LCD_LL_Init+0xd8>)
 800536a:	2200      	movs	r2, #0
 800536c:	609a      	str	r2, [r3, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <LCD_LL_Init+0xd8>)
 8005370:	2200      	movs	r2, #0
 8005372:	60da      	str	r2, [r3, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <LCD_LL_Init+0xd8>)
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]
      hltdc.Instance = LTDC;
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <LCD_LL_Init+0xd8>)
 800537c:	4a11      	ldr	r2, [pc, #68]	; (80053c4 <LCD_LL_Init+0xe0>)
 800537e:	601a      	str	r2, [r3, #0]

      HAL_LTDC_Init(&hltdc);
 8005380:	480e      	ldr	r0, [pc, #56]	; (80053bc <LCD_LL_Init+0xd8>)
 8005382:	f7fd f9b7 	bl	80026f4 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8005386:	2100      	movs	r1, #0
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <LCD_LL_Init+0xd8>)
 800538a:	f7fd fdaf 	bl	8002eec <HAL_LTDC_ProgramLineEvent>

	  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 800538e:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <LCD_LL_Init+0xe4>)
 8005390:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005394:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <LCD_LL_Init+0xe4>)
 8005398:	2202      	movs	r2, #2
 800539a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <LCD_LL_Init+0xe4>)
 800539e:	2200      	movs	r2, #0
 80053a0:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D;
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <LCD_LL_Init+0xe4>)
 80053a4:	4a09      	ldr	r2, [pc, #36]	; (80053cc <LCD_LL_Init+0xe8>)
 80053a6:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80053a8:	4807      	ldr	r0, [pc, #28]	; (80053c8 <LCD_LL_Init+0xe4>)
 80053aa:	f7fb fd57 	bl	8000e5c <HAL_DMA2D_Init>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d000      	beq.n	80053b6 <LCD_LL_Init+0xd2>
  {
    while (1);
 80053b4:	e7fe      	b.n	80053b4 <LCD_LL_Init+0xd0>
  }
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20022c70 	.word	0x20022c70
 80053c0:	200229b8 	.word	0x200229b8
 80053c4:	40016800 	.word	0x40016800
 80053c8:	2001f85c 	.word	0x2001f85c
 80053cc:	4002b000 	.word	0x4002b000

080053d0 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static uint32_t LCD_LL_GetPixelformat(uint32_t LayerIndex)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  const LCD_API_COLOR_CONV * pColorConvAPI;

  if (LayerIndex >= GUI_NUM_LAYERS)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <LCD_LL_GetPixelformat+0x12>
  {
    return 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	e03a      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  pColorConvAPI = layer_prop[LayerIndex].pColorConvAPI;
 80053e2:	4920      	ldr	r1, [pc, #128]	; (8005464 <LCD_LL_GetPixelformat+0x94>)
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	3318      	adds	r3, #24
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

  if (pColorConvAPI == GUICC_M8888I)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <LCD_LL_GetPixelformat+0x98>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <LCD_LL_GetPixelformat+0x32>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 80053fe:	2300      	movs	r3, #0
 8005400:	e02a      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M888)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <LCD_LL_GetPixelformat+0x9c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <LCD_LL_GetPixelformat+0x3e>
  {
    return LTDC_PIXEL_FORMAT_RGB888;
 800540a:	2301      	movs	r3, #1
 800540c:	e024      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M565)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <LCD_LL_GetPixelformat+0xa0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <LCD_LL_GetPixelformat+0x4a>
  {
    return LTDC_PIXEL_FORMAT_RGB565;
 8005416:	2302      	movs	r3, #2
 8005418:	e01e      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M1555I)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <LCD_LL_GetPixelformat+0xa4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <LCD_LL_GetPixelformat+0x56>
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8005422:	2303      	movs	r3, #3
 8005424:	e018      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M4444I)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a13      	ldr	r2, [pc, #76]	; (8005478 <LCD_LL_GetPixelformat+0xa8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <LCD_LL_GetPixelformat+0x62>
  {
    return LTDC_PIXEL_FORMAT_ARGB4444;
 800542e:	2304      	movs	r3, #4
 8005430:	e012      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_8666)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <LCD_LL_GetPixelformat+0xac>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d101      	bne.n	800543e <LCD_LL_GetPixelformat+0x6e>
  {
    return LTDC_PIXEL_FORMAT_L8;
 800543a:	2305      	movs	r3, #5
 800543c:	e00c      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_1616I)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <LCD_LL_GetPixelformat+0xb0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <LCD_LL_GetPixelformat+0x7a>
  {
    return LTDC_PIXEL_FORMAT_AL44;
 8005446:	2306      	movs	r3, #6
 8005448:	e006      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_88666I)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <LCD_LL_GetPixelformat+0xb4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <LCD_LL_GetPixelformat+0x86>
  {
    return LTDC_PIXEL_FORMAT_AL88;
 8005452:	2307      	movs	r3, #7
 8005454:	e000      	b.n	8005458 <LCD_LL_GetPixelformat+0x88>
  }
  while (1);
 8005456:	e7fe      	b.n	8005456 <LCD_LL_GetPixelformat+0x86>
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	2001f89c 	.word	0x2001f89c
 8005468:	08012f30 	.word	0x08012f30
 800546c:	08012ee8 	.word	0x08012ee8
 8005470:	08012f00 	.word	0x08012f00
 8005474:	08012f60 	.word	0x08012f60
 8005478:	08012f48 	.word	0x08012f48
 800547c:	08012f90 	.word	0x08012f90
 8005480:	08012fa8 	.word	0x08012fa8
 8005484:	08012f78 	.word	0x08012f78

08005488 <DMA2D_CopyBuffer>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBuffer(uint32_t LayerIndex, void * pSrc, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ff9a 	bl	80053d0 <LCD_LL_GetPixelformat>
 800549c:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a4:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;
 80054ac:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80054b2:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst;
 80054b8:	4a0e      	ldr	r2, [pc, #56]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 80054be:	4a0d      	ldr	r2, [pc, #52]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 80054c4:	4a0b      	ldr	r2, [pc, #44]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	6a39      	ldr	r1, [r7, #32]
 80054cc:	b289      	uxth	r1, r1
 80054ce:	430b      	orrs	r3, r1
 80054d0:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 80054d2:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 80054de:	bf00      	nop
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <DMA2D_CopyBuffer+0x6c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f9      	bne.n	80054e0 <DMA2D_CopyBuffer+0x58>
  {
  }
}
 80054ec:	bf00      	nop
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	4002b000 	.word	0x4002b000

080054f8 <DMA2D_FillBuffer>:
/*********************************************************************
*
*       FillBuffer
*/
static void DMA2D_FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
 uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff ff62 	bl	80053d0 <LCD_LL_GetPixelformat>
 800550c:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <DMA2D_FillBuffer+0x64>)
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <DMA2D_FillBuffer+0x68>)
 8005512:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 8005514:	4a11      	ldr	r2, [pc, #68]	; (800555c <DMA2D_FillBuffer+0x64>)
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (uint32_t)pDst;
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <DMA2D_FillBuffer+0x64>)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8005520:	4a0e      	ldr	r2, [pc, #56]	; (800555c <DMA2D_FillBuffer+0x64>)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 8005526:	4a0d      	ldr	r2, [pc, #52]	; (800555c <DMA2D_FillBuffer+0x64>)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 800552c:	4a0b      	ldr	r2, [pc, #44]	; (800555c <DMA2D_FillBuffer+0x64>)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	b289      	uxth	r1, r1
 8005536:	430b      	orrs	r3, r1
 8005538:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800553a:	4a08      	ldr	r2, [pc, #32]	; (800555c <DMA2D_FillBuffer+0x64>)
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <DMA2D_FillBuffer+0x64>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005546:	bf00      	nop
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <DMA2D_FillBuffer+0x64>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f9      	bne.n	8005548 <DMA2D_FillBuffer+0x50>
  {
  }
}
 8005554:	bf00      	nop
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	4002b000 	.word	0x4002b000
 8005560:	00030200 	.word	0x00030200

08005564 <GetBufferSize>:
/*********************************************************************
*
*       GetBufferSize
*/
static uint32_t GetBufferSize(uint32_t LayerIndex)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 800556c:	4913      	ldr	r1, [pc, #76]	; (80055bc <GetBufferSize+0x58>)
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	330c      	adds	r3, #12
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	480f      	ldr	r0, [pc, #60]	; (80055bc <GetBufferSize+0x58>)
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4403      	add	r3, r0
 800558c:	3310      	adds	r3, #16
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fb03 f101 	mul.w	r1, r3, r1
 8005594:	4809      	ldr	r0, [pc, #36]	; (80055bc <GetBufferSize+0x58>)
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4403      	add	r3, r0
 80055a2:	3314      	adds	r3, #20
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	fb03 f301 	mul.w	r3, r3, r1
 80055aa:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	2001f89c 	.word	0x2001f89c

080055c0 <CUSTOM_CopyBuffer>:

/*********************************************************************
*
*       CUSTOM_CopyBuffer
*/
static void CUSTOM_CopyBuffer(int32_t LayerIndex, int32_t IndexSrc, int32_t IndexDst) {
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c2:	b08d      	sub	sp, #52	; 0x34
 80055c4:	af04      	add	r7, sp, #16
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ffc8 	bl	8005564 <GetBufferSize>
 80055d4:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 80055d6:	4926      	ldr	r1, [pc, #152]	; (8005670 <CUSTOM_CopyBuffer+0xb0>)
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	440b      	add	r3, r1
 80055f2:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 80055f4:	491e      	ldr	r1, [pc, #120]	; (8005670 <CUSTOM_CopyBuffer+0xb0>)
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	440b      	add	r3, r1
 8005610:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	69bc      	ldr	r4, [r7, #24]
 8005616:	697d      	ldr	r5, [r7, #20]
 8005618:	4915      	ldr	r1, [pc, #84]	; (8005670 <CUSTOM_CopyBuffer+0xb0>)
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	330c      	adds	r3, #12
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461e      	mov	r6, r3
 800562c:	4910      	ldr	r1, [pc, #64]	; (8005670 <CUSTOM_CopyBuffer+0xb0>)
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3310      	adds	r3, #16
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	2300      	movs	r3, #0
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	9200      	str	r2, [sp, #0]
 800564a:	4633      	mov	r3, r6
 800564c:	462a      	mov	r2, r5
 800564e:	4621      	mov	r1, r4
 8005650:	f7ff ff1a 	bl	8005488 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8005654:	4906      	ldr	r1, [pc, #24]	; (8005670 <CUSTOM_CopyBuffer+0xb0>)
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3308      	adds	r3, #8
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]
}
 8005668:	bf00      	nop
 800566a:	3724      	adds	r7, #36	; 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005670:	2001f89c 	.word	0x2001f89c

08005674 <CUSTOM_CopyRect>:
/*********************************************************************
*
*       CUSTOM_CopyRect
*/
static void CUSTOM_CopyRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t xSize, int32_t ySize)
{
 8005674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005676:	b08f      	sub	sp, #60	; 0x3c
 8005678:	af04      	add	r7, sp, #16
 800567a:	6178      	str	r0, [r7, #20]
 800567c:	6139      	str	r1, [r7, #16]
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	60bb      	str	r3, [r7, #8]
  int32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff6d 	bl	8005564 <GetBufferSize>
 800568a:	4603      	mov	r3, r0
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800568e:	4940      	ldr	r1, [pc, #256]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	483c      	ldr	r0, [pc, #240]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4403      	add	r3, r0
 80056ac:	3304      	adds	r3, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	4419      	add	r1, r3
 80056b8:	4835      	ldr	r0, [pc, #212]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4403      	add	r3, r0
 80056c6:	330c      	adds	r3, #12
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	fb02 f203 	mul.w	r2, r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	18d0      	adds	r0, r2, r3
 80056d4:	4c2e      	ldr	r4, [pc, #184]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4423      	add	r3, r4
 80056e2:	3314      	adds	r3, #20
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	fb03 f300 	mul.w	r3, r3, r0
 80056ea:	440b      	add	r3, r1
 80056ec:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80056ee:	4928      	ldr	r1, [pc, #160]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	4824      	ldr	r0, [pc, #144]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4403      	add	r3, r0
 800570c:	3304      	adds	r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	4419      	add	r1, r3
 8005718:	481d      	ldr	r0, [pc, #116]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4403      	add	r3, r0
 8005726:	330c      	adds	r3, #12
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800572c:	fb02 f203 	mul.w	r2, r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	18d0      	adds	r0, r2, r3
 8005734:	4c16      	ldr	r4, [pc, #88]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4423      	add	r3, r4
 8005742:	3314      	adds	r3, #20
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	fb03 f300 	mul.w	r3, r3, r0
 800574a:	440b      	add	r3, r1
 800574c:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800574e:	697c      	ldr	r4, [r7, #20]
 8005750:	6a3d      	ldr	r5, [r7, #32]
 8005752:	69fe      	ldr	r6, [r7, #28]
 8005754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800575a:	480d      	ldr	r0, [pc, #52]	; (8005790 <CUSTOM_CopyRect+0x11c>)
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4403      	add	r3, r0
 8005768:	330c      	adds	r3, #12
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	461a      	mov	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	9302      	str	r3, [sp, #8]
 8005776:	9201      	str	r2, [sp, #4]
 8005778:	9100      	str	r1, [sp, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4632      	mov	r2, r6
 800577e:	4629      	mov	r1, r5
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff fe81 	bl	8005488 <DMA2D_CopyBuffer>
}
 8005786:	bf00      	nop
 8005788:	372c      	adds	r7, #44	; 0x2c
 800578a:	46bd      	mov	sp, r7
 800578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578e:	bf00      	nop
 8005790:	2001f89c 	.word	0x2001f89c

08005794 <CUSTOM_FillRect>:
/*********************************************************************
*
*       CUSTOM_FillRect
*/
static void CUSTOM_FillRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t PixelIndex)
{
 8005794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005796:	b08b      	sub	sp, #44	; 0x2c
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 80057a2:	f007 ff8b 	bl	800d6bc <GUI_GetDrawMode>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d110      	bne.n	80057ce <CUSTOM_FillRect+0x3a>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80057ac:	2200      	movs	r2, #0
 80057ae:	2119      	movs	r1, #25
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f006 f821 	bl	800b7f8 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68b8      	ldr	r0, [r7, #8]
 80057be:	f006 fa45 	bl	800bc4c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80057c2:	4a32      	ldr	r2, [pc, #200]	; (800588c <CUSTOM_FillRect+0xf8>)
 80057c4:	2119      	movs	r1, #25
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f006 f816 	bl	800b7f8 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 80057cc:	e059      	b.n	8005882 <CUSTOM_FillRect+0xee>
    xSize = x1 - x0 + 1;
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 80057d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	3301      	adds	r3, #1
 80057e0:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff febd 	bl	8005564 <GetBufferSize>
 80057ea:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80057ec:	4928      	ldr	r1, [pc, #160]	; (8005890 <CUSTOM_FillRect+0xfc>)
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461c      	mov	r4, r3
 80057fe:	4924      	ldr	r1, [pc, #144]	; (8005890 <CUSTOM_FillRect+0xfc>)
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	330c      	adds	r3, #12
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	fb02 f203 	mul.w	r2, r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	18d1      	adds	r1, r2, r3
 800581a:	481d      	ldr	r0, [pc, #116]	; (8005890 <CUSTOM_FillRect+0xfc>)
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4403      	add	r3, r0
 8005828:	3314      	adds	r3, #20
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	fb03 f301 	mul.w	r3, r3, r1
 8005830:	4618      	mov	r0, r3
 8005832:	4917      	ldr	r1, [pc, #92]	; (8005890 <CUSTOM_FillRect+0xfc>)
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3308      	adds	r3, #8
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fb03 f302 	mul.w	r3, r3, r2
 800584c:	4403      	add	r3, r0
 800584e:	4423      	add	r3, r4
 8005850:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	693c      	ldr	r4, [r7, #16]
 8005856:	69fd      	ldr	r5, [r7, #28]
 8005858:	69be      	ldr	r6, [r7, #24]
 800585a:	490d      	ldr	r1, [pc, #52]	; (8005890 <CUSTOM_FillRect+0xfc>)
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	330c      	adds	r3, #12
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	461a      	mov	r2, r3
 8005872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	9200      	str	r2, [sp, #0]
 8005878:	4633      	mov	r3, r6
 800587a:	462a      	mov	r2, r5
 800587c:	4621      	mov	r1, r4
 800587e:	f7ff fe3b 	bl	80054f8 <DMA2D_FillBuffer>
}
 8005882:	bf00      	nop
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588a:	bf00      	nop
 800588c:	08005795 	.word	0x08005795
 8005890:	2001f89c 	.word	0x2001f89c

08005894 <DMA2D_LoadLUT>:
  * @param  pColor
  * @param  NumItems
  * @retval None
  */
static void DMA2D_LoadLUT(LCD_COLOR * pColor, uint32_t NumItems)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  DMA2D->FGCMAR  = (uint32_t)pColor;
 800589e:	4a0b      	ldr	r2, [pc, #44]	; (80058cc <DMA2D_LoadLUT+0x38>)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*  Foreground PFC Control Register */
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 80058a4:	4a09      	ldr	r2, [pc, #36]	; (80058cc <DMA2D_LoadLUT+0x38>)
                  | ((NumItems - 1) & 0xFF) << 8;   /* Number of items to load */
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 80058b2:	61d3      	str	r3, [r2, #28]
  DMA2D->FGPFCCR |= (1 << 5);                       /* Start loading */
 80058b4:	4a05      	ldr	r2, [pc, #20]	; (80058cc <DMA2D_LoadLUT+0x38>)
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <DMA2D_LoadLUT+0x38>)
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f043 0320 	orr.w	r3, r3, #32
 80058be:	61d3      	str	r3, [r2, #28]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	4002b000 	.word	0x4002b000

080058d0 <InvertAlpha_SwapRB>:
  * @param  pColorDst: Destination address
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha_SwapRB(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  uint32_t Color;
  do
  {
    Color = *pColorSrc++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	60fa      	str	r2, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	617b      	str	r3, [r7, #20]
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1d1a      	adds	r2, r3, #4
 80058ea:	60ba      	str	r2, [r7, #8]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	0412      	lsls	r2, r2, #16
 80058f0:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
                 |  (Color & 0x0000FF00)                /* Green */
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80058fa:	4311      	orrs	r1, r2
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	0c12      	lsrs	r2, r2, #16
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	4311      	orrs	r1, r2
                 | ((Color & 0xFF000000) ^ 0xFF000000); /* Invert alpha */
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	43d2      	mvns	r2, r2
 8005908:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800590c:	430a      	orrs	r2, r1
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 800590e:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3b01      	subs	r3, #1
 8005914:	607b      	str	r3, [r7, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1df      	bne.n	80058dc <InvertAlpha_SwapRB+0xc>
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <InvertAlpha>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t Color;

  do
  {
    Color = *pColorSrc++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	60fa      	str	r2, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	617b      	str	r3, [r7, #20]
    *pColorDst++ = Color ^ 0xFF000000; /* Invert alpha */
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1d1a      	adds	r2, r3, #4
 8005942:	60ba      	str	r2, [r7, #8]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	f082 427f 	eor.w	r2, r2, #4278190080	; 0xff000000
 800594a:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3b01      	subs	r3, #1
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ed      	bne.n	8005934 <InvertAlpha+0xc>
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <DMA2D_AlphaBlendingBulk>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlendingBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <DMA2D_AlphaBlendingBulk+0x80>)
 8005976:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8005978:	4a19      	ldr	r2, [pc, #100]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register */
 800598a:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 800598c:	2200      	movs	r2, #0
 800598e:	611a      	str	r2, [r3, #16]
  DMA2D->BGOR    = 0;                               /* Background Offset Register */
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005992:	2200      	movs	r2, #0
 8005994:	619a      	str	r2, [r3, #24]
  DMA2D->OOR     = 0;                               /* Output Offset Register */
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005998:	2200      	movs	r2, #0
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Foreground PFC Control Register (Defines the FG pixel format) */
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Background PFC Control Register (Defines the BG pixel format) */
 80059a2:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;       /* Output     PFC Control Register (Defines the output pixel format) */
 80059a8:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 80059ae:	4a0c      	ldr	r2, [pc, #48]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */

  DMA2D->CR     |= DMA2D_CR_START;
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059bc:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 80059c6:	bf00      	nop
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f9      	bne.n	80059c8 <DMA2D_AlphaBlendingBulk+0x64>
  {
  }
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	4002b000 	.word	0x4002b000
 80059e4:	00020200 	.word	0x00020200

080059e8 <DMA2D_MixColors>:
  * @param  BkColor
  * @param  Intens
  * @retval LCD_COLOR
  */
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	71fb      	strb	r3, [r7, #7]
  uint32_t ColorFG, ColorBG, ColorDst;

  if ((BkColor & 0xFF000000) == 0xFF000000)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005a00:	d101      	bne.n	8005a06 <DMA2D_MixColors+0x1e>
  {
    return Color;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	e039      	b.n	8005a7a <DMA2D_MixColors+0x92>
  }
  ColorFG = Color   ^ 0xFF000000;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	61fb      	str	r3, [r7, #28]
  ColorBG = BkColor ^ 0xFF000000;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	61bb      	str	r3, [r7, #24]

  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <DMA2D_MixColors+0xa4>)
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)&ColorFG;                   /* Foreground Memory Address Register */
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a1e:	f107 031c 	add.w	r3, r7, #28
 8005a22:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)&ColorBG;                   /* Background Memory Address Register */
 8005a24:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a26:	f107 0318 	add.w	r3, r7, #24
 8005a2a:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)&ColorDst;                  /* Output Memory Address Register (Destination address) */
 8005a2c:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a2e:	f107 0314 	add.w	r3, r7, #20
 8005a32:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a34:	4a14      	ldr	r2, [pc, #80]	; (8005a88 <DMA2D_MixColors+0xa0>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	061b      	lsls	r3, r3, #24
 8005a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a3e:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a40:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <DMA2D_MixColors+0xa0>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005a48:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a4a:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(1 << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a54:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Control Register (Start operation) */
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005a66:	bf00      	nop
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <DMA2D_MixColors+0xa0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f9      	bne.n	8005a68 <DMA2D_MixColors+0x80>
  {
  }

  return (ColorDst ^ 0xFF000000);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3724      	adds	r7, #36	; 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	4002b000 	.word	0x4002b000
 8005a8c:	00020200 	.word	0x00020200

08005a90 <DMA2D_ConvertColor>:
  * @param  PixelFormatDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_ConvertColor(void * pSrc, void * pDst,  uint32_t PixelFormatSrc, uint32_t PixelFormatDst, uint32_t NumItems)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  /* Set up mode */

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8005a9e:	4b17      	ldr	r3, [pc, #92]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005aa0:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8005aa6:	4a15      	ldr	r2, [pc, #84]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset) */
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8005ab8:	4b10      	ldr	r3, [pc, #64]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8005abe:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8005aca:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005ae2:	bf00      	nop
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <DMA2D_ConvertColor+0x6c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f9      	bne.n	8005ae4 <DMA2D_ConvertColor+0x54>
  {
  }
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	4002b000 	.word	0x4002b000

08005b00 <_LCD_GetpPalConvTable>:
  * @param  pBitmap
  * @param  LayerIndex
  * @retval LCD_PIXELINDEX
  */
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  void (* pFunc)(void);
  int32_t DoDefault = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Check if we have a non transparent device independent bitmap */
  if (pBitmap->BitsPerPixel == 8)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	88db      	ldrh	r3, [r3, #6]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d119      	bne.n	8005b4c <_LCD_GetpPalConvTable+0x4c>
  {
    pFunc = LCD_GetDevFunc(LayerIndex, LCD_DEVFUNC_DRAWBMP_8BPP);
 8005b18:	2125      	movs	r1, #37	; 0x25
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f005 fece 	bl	800b8bc <LCD_GetDevFunc>
 8005b20:	6138      	str	r0, [r7, #16]
    if (pFunc)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <_LCD_GetpPalConvTable+0x46>
    {
      if (pBitmap->pPal)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <_LCD_GetpPalConvTable+0x40>
      {
        if (pBitmap->pPal->HasTrans)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	791b      	ldrb	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <_LCD_GetpPalConvTable+0x50>
        {
          DoDefault = 1;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e007      	b.n	8005b50 <_LCD_GetpPalConvTable+0x50>
        }
      }
      else
      {
        DoDefault = 1;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e004      	b.n	8005b50 <_LCD_GetpPalConvTable+0x50>
      }
    }
    else
    {
      DoDefault = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e001      	b.n	8005b50 <_LCD_GetpPalConvTable+0x50>
    }
  }
  else
  {
    DoDefault = 1;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  /* Default palette management for other cases */
  if (DoDefault)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <_LCD_GetpPalConvTable+0x60>
  {

    /* Return a pointer to the index values to be used by the controller */
    return LCD_GetpPalConvTable(pLogPal);
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f005 ffa0 	bl	800ba9c <LCD_GetpPalConvTable>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	e00e      	b.n	8005b7e <_LCD_GetpPalConvTable+0x7e>
  }

  /* Convert palette colors from ARGB to ABGR */
  InvertAlpha_SwapRB((U32 *)pLogPal->pPalEntries, aBufferDMA2D, pLogPal->NumEntries);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6898      	ldr	r0, [r3, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4907      	ldr	r1, [pc, #28]	; (8005b88 <_LCD_GetpPalConvTable+0x88>)
 8005b6c:	f7ff feb0 	bl	80058d0 <InvertAlpha_SwapRB>

  /* Load LUT using DMA2D */
  DMA2D_LoadLUT(aBufferDMA2D, pLogPal->NumEntries);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	4804      	ldr	r0, [pc, #16]	; (8005b88 <_LCD_GetpPalConvTable+0x88>)
 8005b78:	f7ff fe8c 	bl	8005894 <DMA2D_LoadLUT>

  /* Return something not NULL */
  return aBufferDMA2D;
 8005b7c:	4b02      	ldr	r3, [pc, #8]	; (8005b88 <_LCD_GetpPalConvTable+0x88>)
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	2001f8b8 	.word	0x2001f8b8

08005b8c <DMA2D_MixColorsBulk>:
  * @param  Intens
  * @param  NumItems
  * @retval None
  */
static void DMA2D_MixColorsBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U8 Intens, uint32_t NumItems)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	70fb      	strb	r3, [r7, #3]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005b9c:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <DMA2D_MixColorsBulk+0x7c>)
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8005ba6:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8005bac:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005bb2:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005bbc:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005bbe:	4a11      	ldr	r2, [pc, #68]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005bc6:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005bc8:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8005bca:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8005bd0:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8005bdc:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005be8:	bf00      	nop
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <DMA2D_MixColorsBulk+0x78>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f9      	bne.n	8005bea <DMA2D_MixColorsBulk+0x5e>
  {
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	4002b000 	.word	0x4002b000
 8005c08:	00020200 	.word	0x00020200

08005c0c <DMA2D_AlphaBlending>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
  /* Invert alpha values */
  InvertAlpha(pColorFG, aBuffer_FG, NumItems);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	490b      	ldr	r1, [pc, #44]	; (8005c4c <DMA2D_AlphaBlending+0x40>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fe82 	bl	8005928 <InvertAlpha>
  InvertAlpha(pColorBG, aBuffer_BG, NumItems);
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <DMA2D_AlphaBlending+0x44>)
 8005c28:	68b8      	ldr	r0, [r7, #8]
 8005c2a:	f7ff fe7d 	bl	8005928 <InvertAlpha>

  /* Use DMA2D for mixing */
  DMA2D_AlphaBlendingBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, NumItems);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <DMA2D_AlphaBlending+0x48>)
 8005c32:	4907      	ldr	r1, [pc, #28]	; (8005c50 <DMA2D_AlphaBlending+0x44>)
 8005c34:	4805      	ldr	r0, [pc, #20]	; (8005c4c <DMA2D_AlphaBlending+0x40>)
 8005c36:	f7ff fe95 	bl	8005964 <DMA2D_AlphaBlendingBulk>

  /* Invert alpha values */
  InvertAlpha(aBufferDMA2D, pColorDst, NumItems);
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4805      	ldr	r0, [pc, #20]	; (8005c54 <DMA2D_AlphaBlending+0x48>)
 8005c40:	f7ff fe72 	bl	8005928 <InvertAlpha>
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	200207b8 	.word	0x200207b8
 8005c50:	200216b8 	.word	0x200216b8
 8005c54:	2001f8b8 	.word	0x2001f8b8

08005c58 <DMA2D_Index2ColorBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	70fb      	strb	r3, [r7, #3]
  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(pIndex, aBufferDMA2D, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4906      	ldr	r1, [pc, #24]	; (8005c88 <DMA2D_Index2ColorBulk+0x30>)
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff ff0d 	bl	8005a90 <DMA2D_ConvertColor>

  /* Convert colors from ARGB to ABGR and invert alpha values */
  InvertAlpha_SwapRB(aBufferDMA2D, pColor, NumItems);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	4803      	ldr	r0, [pc, #12]	; (8005c88 <DMA2D_Index2ColorBulk+0x30>)
 8005c7c:	f7ff fe28 	bl	80058d0 <InvertAlpha_SwapRB>
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2001f8b8 	.word	0x2001f8b8

08005c8c <DMA2D_Color2IndexBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	70fb      	strb	r3, [r7, #3]
  /* Convert colors from ABGR to ARGB and invert alpha values */
  InvertAlpha_SwapRB(pColor, aBufferDMA2D, NumItems);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4907      	ldr	r1, [pc, #28]	; (8005cbc <DMA2D_Color2IndexBulk+0x30>)
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fe16 	bl	80058d0 <InvertAlpha_SwapRB>

  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(aBufferDMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2200      	movs	r2, #0
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	4803      	ldr	r0, [pc, #12]	; (8005cbc <DMA2D_Color2IndexBulk+0x30>)
 8005cb0:	f7ff feee 	bl	8005a90 <DMA2D_ConvertColor>
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	2001f8b8 	.word	0x2001f8b8

08005cc0 <LCD_MixColorsBulk>:
  * @param  ySize
  * @param  Intens
  * @retval None
  */
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  int32_t y;

  GUI_USE_PARA(OffFG);
  GUI_USE_PARA(OffDest);
  for (y = 0; y < ySize; y++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e030      	b.n	8005d36 <LCD_MixColorsBulk+0x76>
  {
    /* Invert alpha values */
    InvertAlpha(pFG, aBuffer_FG, xSize);
 8005cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd6:	491c      	ldr	r1, [pc, #112]	; (8005d48 <LCD_MixColorsBulk+0x88>)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff fe25 	bl	8005928 <InvertAlpha>
    InvertAlpha(pBG, aBuffer_BG, xSize);
 8005cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce0:	491a      	ldr	r1, [pc, #104]	; (8005d4c <LCD_MixColorsBulk+0x8c>)
 8005ce2:	68b8      	ldr	r0, [r7, #8]
 8005ce4:	f7ff fe20 	bl	8005928 <InvertAlpha>

    DMA2D_MixColorsBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, Intens, xSize);
 8005ce8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	4a17      	ldr	r2, [pc, #92]	; (8005d50 <LCD_MixColorsBulk+0x90>)
 8005cf4:	4915      	ldr	r1, [pc, #84]	; (8005d4c <LCD_MixColorsBulk+0x8c>)
 8005cf6:	4814      	ldr	r0, [pc, #80]	; (8005d48 <LCD_MixColorsBulk+0x88>)
 8005cf8:	f7ff ff48 	bl	8005b8c <DMA2D_MixColorsBulk>

    InvertAlpha(aBufferDMA2D, pDst, xSize);
 8005cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4813      	ldr	r0, [pc, #76]	; (8005d50 <LCD_MixColorsBulk+0x90>)
 8005d02:	f7ff fe11 	bl	8005928 <InvertAlpha>
    pFG  += xSize + OffFG;
 8005d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
    pBG  += xSize + OffBG;
 8005d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	4413      	add	r3, r2
 8005d20:	60bb      	str	r3, [r7, #8]
    pDst += xSize + OffDest;
 8005d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	607b      	str	r3, [r7, #4]
  for (y = 0; y < ySize; y++)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3301      	adds	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3ca      	bcc.n	8005cd4 <LCD_MixColorsBulk+0x14>
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	200207b8 	.word	0x200207b8
 8005d4c:	200216b8 	.word	0x200216b8
 8005d50:	2001f8b8 	.word	0x2001f8b8

08005d54 <DMA2D_DrawBitmapL8>:
  * @param  xSize
  * @param  ySize
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  uint32_t OffSrc, uint32_t OffDst, uint32_t PixelFormatDst, uint32_t xSize, uint32_t ySize)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d64:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8005d68:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8005d6a:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8005d70:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8005d7c:	4a10      	ldr	r2, [pc, #64]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d84:	2205      	movs	r2, #5
 8005d86:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8005d88:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | ySize;      /* Number of Line Register (Size configuration of area to be transfered) */
 8005d8e:	490c      	ldr	r1, [pc, #48]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	041a      	lsls	r2, r3, #16
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Start operation */
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005da6:	bf00      	nop
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <DMA2D_DrawBitmapL8+0x6c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f9      	bne.n	8005da8 <DMA2D_DrawBitmapL8+0x54>
  {
  }
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	4002b000 	.word	0x4002b000

08005dc4 <BSP_LCD_DrawBitmap16bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap16bpp(int32_t LayerIndex, int32_t x, int32_t y, U16 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b08c      	sub	sp, #48	; 0x30
 8005dc8:	af04      	add	r7, sp, #16
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fbc5 	bl	8005564 <GetBufferSize>
 8005dda:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8005ddc:	492c      	ldr	r1, [pc, #176]	; (8005e90 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461c      	mov	r4, r3
 8005dee:	4928      	ldr	r1, [pc, #160]	; (8005e90 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	fb02 f203 	mul.w	r2, r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	18d1      	adds	r1, r2, r3
 8005e0a:	4821      	ldr	r0, [pc, #132]	; (8005e90 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4403      	add	r3, r0
 8005e18:	3314      	adds	r3, #20
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	fb03 f301 	mul.w	r3, r3, r1
 8005e20:	4618      	mov	r0, r3
 8005e22:	491b      	ldr	r1, [pc, #108]	; (8005e90 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3308      	adds	r3, #8
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fb03 f302 	mul.w	r3, r3, r2
 8005e3c:	4403      	add	r3, r0
 8005e3e:	4423      	add	r3, r4
 8005e40:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	0fda      	lsrs	r2, r3, #31
 8005e46:	4413      	add	r3, r2
 8005e48:	105b      	asrs	r3, r3, #1
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8005e52:	490f      	ldr	r1, [pc, #60]	; (8005e90 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	330c      	adds	r3, #12
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	69bc      	ldr	r4, [r7, #24]
 8005e6e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	6939      	ldr	r1, [r7, #16]
 8005e76:	9102      	str	r1, [sp, #8]
 8005e78:	9201      	str	r2, [sp, #4]
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	4622      	mov	r2, r4
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	f7ff fb01 	bl	8005488 <DMA2D_CopyBuffer>
}
 8005e86:	bf00      	nop
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2001f89c 	.word	0x2001f89c

08005e94 <BSP_LCD_DrawBitmap8bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap8bpp(int32_t LayerIndex, int32_t x, int32_t y, U8 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b08f      	sub	sp, #60	; 0x3c
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;
  uint32_t PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fb5d 	bl	8005564 <GetBufferSize>
 8005eaa:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8005eac:	492c      	ldr	r1, [pc, #176]	; (8005f60 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461c      	mov	r4, r3
 8005ebe:	4928      	ldr	r1, [pc, #160]	; (8005f60 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	330c      	adds	r3, #12
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	fb02 f203 	mul.w	r2, r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	18d1      	adds	r1, r2, r3
 8005eda:	4821      	ldr	r0, [pc, #132]	; (8005f60 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4403      	add	r3, r0
 8005ee8:	3314      	adds	r3, #20
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	fb03 f301 	mul.w	r3, r3, r1
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	491b      	ldr	r1, [pc, #108]	; (8005f60 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3308      	adds	r3, #8
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	fb03 f302 	mul.w	r3, r3, r2
 8005f0c:	4403      	add	r3, r0
 8005f0e:	4423      	add	r3, r4
 8005f10:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8005f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8005f1a:	4911      	ldr	r1, [pc, #68]	; (8005f60 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	330c      	adds	r3, #12
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	61bb      	str	r3, [r7, #24]
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fa4b 	bl	80053d0 <LCD_LL_GetPixelformat>
 8005f3a:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8005f3c:	6a39      	ldr	r1, [r7, #32]
 8005f3e:	69f8      	ldr	r0, [r7, #28]
 8005f40:	69bc      	ldr	r4, [r7, #24]
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f46:	9202      	str	r2, [sp, #8]
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4623      	mov	r3, r4
 8005f50:	4602      	mov	r2, r0
 8005f52:	6838      	ldr	r0, [r7, #0]
 8005f54:	f7ff fefe 	bl	8005d54 <DMA2D_DrawBitmapL8>
}
 8005f58:	bf00      	nop
 8005f5a:	372c      	adds	r7, #44	; 0x2c
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}
 8005f60:	2001f89c 	.word	0x2001f89c

08005f64 <UI_SetDefault>:
} ui_state_t;

static ui_state_t uiState_g;

void UI_SetDefault(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
	uiState_g.mode = NOT_ACTIVE;
 8005f68:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <UI_SetDefault+0x28>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
	uiState_g.state[ZONE_TOP] = L_ONE;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <UI_SetDefault+0x28>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	705a      	strb	r2, [r3, #1]
	uiState_g.state[ZONE_MID] = L_ONE;
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <UI_SetDefault+0x28>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	709a      	strb	r2, [r3, #2]
	uiState_g.state[ZONE_BOT] = L_ONE;
 8005f7a:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <UI_SetDefault+0x28>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	70da      	strb	r2, [r3, #3]
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	200229e8 	.word	0x200229e8

08005f90 <UI_SetState>:

void UI_SetState(ui_state_t uiState)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	uiState_g.mode = uiState.mode;
 8005f98:	793a      	ldrb	r2, [r7, #4]
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <UI_SetState+0x2c>)
 8005f9c:	701a      	strb	r2, [r3, #0]
	uiState_g.state[ZONE_TOP] = uiState.state[ZONE_TOP];
 8005f9e:	797a      	ldrb	r2, [r7, #5]
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <UI_SetState+0x2c>)
 8005fa2:	705a      	strb	r2, [r3, #1]
	uiState_g.state[ZONE_MID] = uiState.state[ZONE_MID];
 8005fa4:	79ba      	ldrb	r2, [r7, #6]
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <UI_SetState+0x2c>)
 8005fa8:	709a      	strb	r2, [r3, #2]
	uiState_g.state[ZONE_BOT] = uiState.state[ZONE_BOT];
 8005faa:	79fa      	ldrb	r2, [r7, #7]
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <UI_SetState+0x2c>)
 8005fae:	70da      	strb	r2, [r3, #3]
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	200229e8 	.word	0x200229e8

08005fc0 <UI_GetState>:

void UI_GetState(ui_state_t *uiState)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	uiState->mode = uiState_g.mode;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <UI_GetState+0x34>)
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	701a      	strb	r2, [r3, #0]
	uiState->state[ZONE_TOP] = uiState_g.state[ZONE_TOP];
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <UI_GetState+0x34>)
 8005fd2:	785a      	ldrb	r2, [r3, #1]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	705a      	strb	r2, [r3, #1]
	uiState->state[ZONE_MID] = uiState_g.state[ZONE_MID];
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <UI_GetState+0x34>)
 8005fda:	789a      	ldrb	r2, [r3, #2]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	709a      	strb	r2, [r3, #2]
	uiState->state[ZONE_BOT] = uiState_g.state[ZONE_BOT];
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <UI_GetState+0x34>)
 8005fe2:	78da      	ldrb	r2, [r3, #3]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	70da      	strb	r2, [r3, #3]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	200229e8 	.word	0x200229e8

08005ff8 <drawAllNotActive>:

static void drawAllNotActive(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af02      	add	r7, sp, #8

	/* Rectangles */
	GUI_SetBkColor(CUS_BACKGROUND);
 8005ffe:	48f2      	ldr	r0, [pc, #968]	; (80063c8 <drawAllNotActive+0x3d0>)
 8006000:	f006 fb4c 	bl	800c69c <GUI_SetBkColor>
	GUI_Clear();
 8006004:	f008 fad2 	bl	800e5ac <GUI_Clear>
	GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
 8006008:	2000      	movs	r0, #0
 800600a:	f006 fb45 	bl	800c698 <GUI_SetDrawMode>
	GUI_SetTextMode(GUI_TM_NORMAL);
 800600e:	2000      	movs	r0, #0
 8006010:	f006 fb2e 	bl	800c670 <GUI_SetTextMode>
	GUI_SetFont(&GUI_Font8x16);
 8006014:	48ed      	ldr	r0, [pc, #948]	; (80063cc <drawAllNotActive+0x3d4>)
 8006016:	f006 fb35 	bl	800c684 <GUI_SetFont>

	GUI_SetColor(CUS_DARKGRAY);
 800601a:	48ed      	ldr	r0, [pc, #948]	; (80063d0 <drawAllNotActive+0x3d8>)
 800601c:	f006 fb40 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 5, 235, 47, 8);
 8006020:	2308      	movs	r3, #8
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	232f      	movs	r3, #47	; 0x2f
 8006026:	22eb      	movs	r2, #235	; 0xeb
 8006028:	2105      	movs	r1, #5
 800602a:	2005      	movs	r0, #5
 800602c:	f007 fb4c 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 8006030:	2000      	movs	r0, #0
 8006032:	f006 fb35 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 5, 26, 47, 8);
 8006036:	2308      	movs	r3, #8
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	232f      	movs	r3, #47	; 0x2f
 800603c:	221a      	movs	r2, #26
 800603e:	2105      	movs	r1, #5
 8006040:	2005      	movs	r0, #5
 8006042:	f007 fb41 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 8006046:	48e2      	ldr	r0, [pc, #904]	; (80063d0 <drawAllNotActive+0x3d8>)
 8006048:	f006 fb2a 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(15, 5, 30, 47);
 800604c:	232f      	movs	r3, #47	; 0x2f
 800604e:	221e      	movs	r2, #30
 8006050:	2105      	movs	r1, #5
 8006052:	200f      	movs	r0, #15
 8006054:	f007 fb9c 	bl	800d790 <GUI_FillRect>

	GUI_FillRoundedRect(5, 49, 235, 91, 8);
 8006058:	2308      	movs	r3, #8
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	235b      	movs	r3, #91	; 0x5b
 800605e:	22eb      	movs	r2, #235	; 0xeb
 8006060:	2131      	movs	r1, #49	; 0x31
 8006062:	2005      	movs	r0, #5
 8006064:	f007 fb30 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 8006068:	2000      	movs	r0, #0
 800606a:	f006 fb19 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 49, 26, 91, 8);
 800606e:	2308      	movs	r3, #8
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	235b      	movs	r3, #91	; 0x5b
 8006074:	221a      	movs	r2, #26
 8006076:	2131      	movs	r1, #49	; 0x31
 8006078:	2005      	movs	r0, #5
 800607a:	f007 fb25 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 800607e:	48d4      	ldr	r0, [pc, #848]	; (80063d0 <drawAllNotActive+0x3d8>)
 8006080:	f006 fb0e 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(15, 49, 30, 91);
 8006084:	235b      	movs	r3, #91	; 0x5b
 8006086:	221e      	movs	r2, #30
 8006088:	2131      	movs	r1, #49	; 0x31
 800608a:	200f      	movs	r0, #15
 800608c:	f007 fb80 	bl	800d790 <GUI_FillRect>

	GUI_FillRoundedRect(5, 93, 235, 135, 8);
 8006090:	2308      	movs	r3, #8
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	2387      	movs	r3, #135	; 0x87
 8006096:	22eb      	movs	r2, #235	; 0xeb
 8006098:	215d      	movs	r1, #93	; 0x5d
 800609a:	2005      	movs	r0, #5
 800609c:	f007 fb14 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 80060a0:	2000      	movs	r0, #0
 80060a2:	f006 fafd 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 93, 26, 135, 8);
 80060a6:	2308      	movs	r3, #8
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2387      	movs	r3, #135	; 0x87
 80060ac:	221a      	movs	r2, #26
 80060ae:	215d      	movs	r1, #93	; 0x5d
 80060b0:	2005      	movs	r0, #5
 80060b2:	f007 fb09 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 80060b6:	48c6      	ldr	r0, [pc, #792]	; (80063d0 <drawAllNotActive+0x3d8>)
 80060b8:	f006 faf2 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(15, 93, 30, 135);
 80060bc:	2387      	movs	r3, #135	; 0x87
 80060be:	221e      	movs	r2, #30
 80060c0:	215d      	movs	r1, #93	; 0x5d
 80060c2:	200f      	movs	r0, #15
 80060c4:	f007 fb64 	bl	800d790 <GUI_FillRect>

	GUI_FillRoundedRect(5, 137, 235, 179, 8);
 80060c8:	2308      	movs	r3, #8
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	23b3      	movs	r3, #179	; 0xb3
 80060ce:	22eb      	movs	r2, #235	; 0xeb
 80060d0:	2189      	movs	r1, #137	; 0x89
 80060d2:	2005      	movs	r0, #5
 80060d4:	f007 faf8 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 80060d8:	2000      	movs	r0, #0
 80060da:	f006 fae1 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 137, 26, 179, 8);
 80060de:	2308      	movs	r3, #8
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	23b3      	movs	r3, #179	; 0xb3
 80060e4:	221a      	movs	r2, #26
 80060e6:	2189      	movs	r1, #137	; 0x89
 80060e8:	2005      	movs	r0, #5
 80060ea:	f007 faed 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 80060ee:	48b8      	ldr	r0, [pc, #736]	; (80063d0 <drawAllNotActive+0x3d8>)
 80060f0:	f006 fad6 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(15, 137, 30, 179);
 80060f4:	23b3      	movs	r3, #179	; 0xb3
 80060f6:	221e      	movs	r2, #30
 80060f8:	2189      	movs	r1, #137	; 0x89
 80060fa:	200f      	movs	r0, #15
 80060fc:	f007 fb48 	bl	800d790 <GUI_FillRect>


	GUI_FillRoundedRect(35, 181, 235, 223, 8);
 8006100:	2308      	movs	r3, #8
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	23df      	movs	r3, #223	; 0xdf
 8006106:	22eb      	movs	r2, #235	; 0xeb
 8006108:	21b5      	movs	r1, #181	; 0xb5
 800610a:	2023      	movs	r0, #35	; 0x23
 800610c:	f007 fadc 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_FillRoundedRect(35, 225, 235, 267, 8);
 8006110:	2308      	movs	r3, #8
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f240 130b 	movw	r3, #267	; 0x10b
 8006118:	22eb      	movs	r2, #235	; 0xeb
 800611a:	21e1      	movs	r1, #225	; 0xe1
 800611c:	2023      	movs	r0, #35	; 0x23
 800611e:	f007 fad3 	bl	800d6c8 <GUI_FillRoundedRect>
	GUI_FillRoundedRect(35, 269, 235, 311, 8);
 8006122:	2308      	movs	r3, #8
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	f240 1337 	movw	r3, #311	; 0x137
 800612a:	22eb      	movs	r2, #235	; 0xeb
 800612c:	f240 110d 	movw	r1, #269	; 0x10d
 8006130:	2023      	movs	r0, #35	; 0x23
 8006132:	f007 fac9 	bl	800d6c8 <GUI_FillRoundedRect>


	GUI_SetColor(GUI_WHITE);
 8006136:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800613a:	f006 fab1 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(7, 188, 30, 196);
 800613e:	23c4      	movs	r3, #196	; 0xc4
 8006140:	221e      	movs	r2, #30
 8006142:	21bc      	movs	r1, #188	; 0xbc
 8006144:	2007      	movs	r0, #7
 8006146:	f007 fb23 	bl	800d790 <GUI_FillRect>
	GUI_SetColor(CUS_DARKESTGRAY);
 800614a:	48a2      	ldr	r0, [pc, #648]	; (80063d4 <drawAllNotActive+0x3dc>)
 800614c:	f006 faa8 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(7, 198, 30, 206);
 8006150:	23ce      	movs	r3, #206	; 0xce
 8006152:	221e      	movs	r2, #30
 8006154:	21c6      	movs	r1, #198	; 0xc6
 8006156:	2007      	movs	r0, #7
 8006158:	f007 fb1a 	bl	800d790 <GUI_FillRect>
	GUI_FillRect(7, 208, 30, 216);
 800615c:	23d8      	movs	r3, #216	; 0xd8
 800615e:	221e      	movs	r2, #30
 8006160:	21d0      	movs	r1, #208	; 0xd0
 8006162:	2007      	movs	r0, #7
 8006164:	f007 fb14 	bl	800d790 <GUI_FillRect>

	GUI_FillRect(7, 232, 30, 240);
 8006168:	23f0      	movs	r3, #240	; 0xf0
 800616a:	221e      	movs	r2, #30
 800616c:	21e8      	movs	r1, #232	; 0xe8
 800616e:	2007      	movs	r0, #7
 8006170:	f007 fb0e 	bl	800d790 <GUI_FillRect>
	GUI_SetColor(GUI_WHITE);
 8006174:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006178:	f006 fa92 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(7, 242, 30, 250);
 800617c:	23fa      	movs	r3, #250	; 0xfa
 800617e:	221e      	movs	r2, #30
 8006180:	21f2      	movs	r1, #242	; 0xf2
 8006182:	2007      	movs	r0, #7
 8006184:	f007 fb04 	bl	800d790 <GUI_FillRect>
	GUI_SetColor(CUS_DARKESTGRAY);
 8006188:	4892      	ldr	r0, [pc, #584]	; (80063d4 <drawAllNotActive+0x3dc>)
 800618a:	f006 fa89 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(7, 252, 30, 260);
 800618e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006192:	221e      	movs	r2, #30
 8006194:	21fc      	movs	r1, #252	; 0xfc
 8006196:	2007      	movs	r0, #7
 8006198:	f007 fafa 	bl	800d790 <GUI_FillRect>

	GUI_FillRect(7, 276, 30, 284);
 800619c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80061a0:	221e      	movs	r2, #30
 80061a2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80061a6:	2007      	movs	r0, #7
 80061a8:	f007 faf2 	bl	800d790 <GUI_FillRect>
	GUI_FillRect(7, 286, 30, 294);
 80061ac:	f44f 7393 	mov.w	r3, #294	; 0x126
 80061b0:	221e      	movs	r2, #30
 80061b2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80061b6:	2007      	movs	r0, #7
 80061b8:	f007 faea 	bl	800d790 <GUI_FillRect>
	GUI_SetColor(GUI_WHITE);
 80061bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80061c0:	f006 fa6e 	bl	800c6a0 <GUI_SetColor>
	GUI_FillRect(7, 296, 30, 304);
 80061c4:	f44f 7398 	mov.w	r3, #304	; 0x130
 80061c8:	221e      	movs	r2, #30
 80061ca:	f44f 7194 	mov.w	r1, #296	; 0x128
 80061ce:	2007      	movs	r0, #7
 80061d0:	f007 fade 	bl	800d790 <GUI_FillRect>

	/* Text */
	GUI_SetTextMode(GUI_TM_TRANS);
 80061d4:	2002      	movs	r0, #2
 80061d6:	f006 fa4b 	bl	800c670 <GUI_SetTextMode>
	GUI_EnableAlpha(1);
 80061da:	2001      	movs	r0, #1
 80061dc:	f007 fd2e 	bl	800dc3c <GUI_EnableAlpha>
	GUI_SetColor(GUI_WHITE);
 80061e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80061e4:	f006 fa5c 	bl	800c6a0 <GUI_SetColor>
	GUI_DispStringAt("ALL DIM", 25, 18);
 80061e8:	2212      	movs	r2, #18
 80061ea:	2119      	movs	r1, #25
 80061ec:	487a      	ldr	r0, [pc, #488]	; (80063d8 <drawAllNotActive+0x3e0>)
 80061ee:	f007 ffc3 	bl	800e178 <GUI_DispStringAt>
	GUI_DispStringAt("ALL CLEAR", 25, 62);
 80061f2:	223e      	movs	r2, #62	; 0x3e
 80061f4:	2119      	movs	r1, #25
 80061f6:	4879      	ldr	r0, [pc, #484]	; (80063dc <drawAllNotActive+0x3e4>)
 80061f8:	f007 ffbe 	bl	800e178 <GUI_DispStringAt>
	GUI_DispStringAt("PRESENTATION MODE", 25, 106);
 80061fc:	226a      	movs	r2, #106	; 0x6a
 80061fe:	2119      	movs	r1, #25
 8006200:	4877      	ldr	r0, [pc, #476]	; (80063e0 <drawAllNotActive+0x3e8>)
 8006202:	f007 ffb9 	bl	800e178 <GUI_DispStringAt>
	GUI_DispStringAt("ALL AUTO", 25, 150);
 8006206:	2296      	movs	r2, #150	; 0x96
 8006208:	2119      	movs	r1, #25
 800620a:	4876      	ldr	r0, [pc, #472]	; (80063e4 <drawAllNotActive+0x3ec>)
 800620c:	f007 ffb4 	bl	800e178 <GUI_DispStringAt>

	GUI_DispCharAt('1', 50, 194);
 8006210:	22c2      	movs	r2, #194	; 0xc2
 8006212:	2132      	movs	r1, #50	; 0x32
 8006214:	2031      	movs	r0, #49	; 0x31
 8006216:	f008 f87f 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('1', 50, 238);
 800621a:	22ee      	movs	r2, #238	; 0xee
 800621c:	2132      	movs	r1, #50	; 0x32
 800621e:	2031      	movs	r0, #49	; 0x31
 8006220:	f008 f87a 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('1', 50, 282);
 8006224:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006228:	2132      	movs	r1, #50	; 0x32
 800622a:	2031      	movs	r0, #49	; 0x31
 800622c:	f008 f874 	bl	800e318 <GUI_DispCharAt>

	GUI_DispCharAt('2', 83, 194);
 8006230:	22c2      	movs	r2, #194	; 0xc2
 8006232:	2153      	movs	r1, #83	; 0x53
 8006234:	2032      	movs	r0, #50	; 0x32
 8006236:	f008 f86f 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('2', 83, 238);
 800623a:	22ee      	movs	r2, #238	; 0xee
 800623c:	2153      	movs	r1, #83	; 0x53
 800623e:	2032      	movs	r0, #50	; 0x32
 8006240:	f008 f86a 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('2', 83, 282);
 8006244:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006248:	2153      	movs	r1, #83	; 0x53
 800624a:	2032      	movs	r0, #50	; 0x32
 800624c:	f008 f864 	bl	800e318 <GUI_DispCharAt>

	GUI_DispCharAt('3', 116, 194);
 8006250:	22c2      	movs	r2, #194	; 0xc2
 8006252:	2174      	movs	r1, #116	; 0x74
 8006254:	2033      	movs	r0, #51	; 0x33
 8006256:	f008 f85f 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('3', 116, 238);
 800625a:	22ee      	movs	r2, #238	; 0xee
 800625c:	2174      	movs	r1, #116	; 0x74
 800625e:	2033      	movs	r0, #51	; 0x33
 8006260:	f008 f85a 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('3', 116, 282);
 8006264:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006268:	2174      	movs	r1, #116	; 0x74
 800626a:	2033      	movs	r0, #51	; 0x33
 800626c:	f008 f854 	bl	800e318 <GUI_DispCharAt>

	GUI_DispCharAt('4', 149, 194);
 8006270:	22c2      	movs	r2, #194	; 0xc2
 8006272:	2195      	movs	r1, #149	; 0x95
 8006274:	2034      	movs	r0, #52	; 0x34
 8006276:	f008 f84f 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('4', 149, 238);
 800627a:	22ee      	movs	r2, #238	; 0xee
 800627c:	2195      	movs	r1, #149	; 0x95
 800627e:	2034      	movs	r0, #52	; 0x34
 8006280:	f008 f84a 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('4', 149, 282);
 8006284:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006288:	2195      	movs	r1, #149	; 0x95
 800628a:	2034      	movs	r0, #52	; 0x34
 800628c:	f008 f844 	bl	800e318 <GUI_DispCharAt>

	GUI_DispCharAt('5', 182, 194);
 8006290:	22c2      	movs	r2, #194	; 0xc2
 8006292:	21b6      	movs	r1, #182	; 0xb6
 8006294:	2035      	movs	r0, #53	; 0x35
 8006296:	f008 f83f 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('5', 182, 238);
 800629a:	22ee      	movs	r2, #238	; 0xee
 800629c:	21b6      	movs	r1, #182	; 0xb6
 800629e:	2035      	movs	r0, #53	; 0x35
 80062a0:	f008 f83a 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('5', 182, 282);
 80062a4:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80062a8:	21b6      	movs	r1, #182	; 0xb6
 80062aa:	2035      	movs	r0, #53	; 0x35
 80062ac:	f008 f834 	bl	800e318 <GUI_DispCharAt>

	GUI_DispCharAt('A', 215, 194);
 80062b0:	22c2      	movs	r2, #194	; 0xc2
 80062b2:	21d7      	movs	r1, #215	; 0xd7
 80062b4:	2041      	movs	r0, #65	; 0x41
 80062b6:	f008 f82f 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('A', 215, 238);
 80062ba:	22ee      	movs	r2, #238	; 0xee
 80062bc:	21d7      	movs	r1, #215	; 0xd7
 80062be:	2041      	movs	r0, #65	; 0x41
 80062c0:	f008 f82a 	bl	800e318 <GUI_DispCharAt>
	GUI_DispCharAt('A', 215, 282);
 80062c4:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80062c8:	21d7      	movs	r1, #215	; 0xd7
 80062ca:	2041      	movs	r0, #65	; 0x41
 80062cc:	f008 f824 	bl	800e318 <GUI_DispCharAt>
	GUI_EnableAlpha(0);
 80062d0:	2000      	movs	r0, #0
 80062d2:	f007 fcb3 	bl	800dc3c <GUI_EnableAlpha>

	/* Lines under modes */
	GUI_SetColor(GUI_BLACK);
 80062d6:	2000      	movs	r0, #0
 80062d8:	f006 f9e2 	bl	800c6a0 <GUI_SetColor>
	GUI_DrawLine(24, 35, 225, 35);
 80062dc:	2323      	movs	r3, #35	; 0x23
 80062de:	22e1      	movs	r2, #225	; 0xe1
 80062e0:	2123      	movs	r1, #35	; 0x23
 80062e2:	2018      	movs	r0, #24
 80062e4:	f007 ff2a 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(24, 79, 225, 79);
 80062e8:	234f      	movs	r3, #79	; 0x4f
 80062ea:	22e1      	movs	r2, #225	; 0xe1
 80062ec:	214f      	movs	r1, #79	; 0x4f
 80062ee:	2018      	movs	r0, #24
 80062f0:	f007 ff24 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(24, 123, 225, 123);
 80062f4:	237b      	movs	r3, #123	; 0x7b
 80062f6:	22e1      	movs	r2, #225	; 0xe1
 80062f8:	217b      	movs	r1, #123	; 0x7b
 80062fa:	2018      	movs	r0, #24
 80062fc:	f007 ff1e 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(24, 167, 225, 167);
 8006300:	23a7      	movs	r3, #167	; 0xa7
 8006302:	22e1      	movs	r2, #225	; 0xe1
 8006304:	21a7      	movs	r1, #167	; 0xa7
 8006306:	2018      	movs	r0, #24
 8006308:	f007 ff18 	bl	800e13c <GUI_DrawLine>

	/* Lines under values */
	GUI_DrawLine(44, 211, 63, 211); /* For 1 */
 800630c:	23d3      	movs	r3, #211	; 0xd3
 800630e:	223f      	movs	r2, #63	; 0x3f
 8006310:	21d3      	movs	r1, #211	; 0xd3
 8006312:	202c      	movs	r0, #44	; 0x2c
 8006314:	f007 ff12 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(44, 255, 63, 255);
 8006318:	23ff      	movs	r3, #255	; 0xff
 800631a:	223f      	movs	r2, #63	; 0x3f
 800631c:	21ff      	movs	r1, #255	; 0xff
 800631e:	202c      	movs	r0, #44	; 0x2c
 8006320:	f007 ff0c 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(44, 299, 63, 299);
 8006324:	f240 132b 	movw	r3, #299	; 0x12b
 8006328:	223f      	movs	r2, #63	; 0x3f
 800632a:	f240 112b 	movw	r1, #299	; 0x12b
 800632e:	202c      	movs	r0, #44	; 0x2c
 8006330:	f007 ff04 	bl	800e13c <GUI_DrawLine>

	GUI_DrawLine(77, 211, 96, 211); /* For 2 */
 8006334:	23d3      	movs	r3, #211	; 0xd3
 8006336:	2260      	movs	r2, #96	; 0x60
 8006338:	21d3      	movs	r1, #211	; 0xd3
 800633a:	204d      	movs	r0, #77	; 0x4d
 800633c:	f007 fefe 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(77, 255, 96, 255);
 8006340:	23ff      	movs	r3, #255	; 0xff
 8006342:	2260      	movs	r2, #96	; 0x60
 8006344:	21ff      	movs	r1, #255	; 0xff
 8006346:	204d      	movs	r0, #77	; 0x4d
 8006348:	f007 fef8 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(77, 299, 96, 299);
 800634c:	f240 132b 	movw	r3, #299	; 0x12b
 8006350:	2260      	movs	r2, #96	; 0x60
 8006352:	f240 112b 	movw	r1, #299	; 0x12b
 8006356:	204d      	movs	r0, #77	; 0x4d
 8006358:	f007 fef0 	bl	800e13c <GUI_DrawLine>

	GUI_DrawLine(110, 211, 127, 211); /* For 3 */
 800635c:	23d3      	movs	r3, #211	; 0xd3
 800635e:	227f      	movs	r2, #127	; 0x7f
 8006360:	21d3      	movs	r1, #211	; 0xd3
 8006362:	206e      	movs	r0, #110	; 0x6e
 8006364:	f007 feea 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(110, 255, 127, 255);
 8006368:	23ff      	movs	r3, #255	; 0xff
 800636a:	227f      	movs	r2, #127	; 0x7f
 800636c:	21ff      	movs	r1, #255	; 0xff
 800636e:	206e      	movs	r0, #110	; 0x6e
 8006370:	f007 fee4 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(110, 299, 127, 299);
 8006374:	f240 132b 	movw	r3, #299	; 0x12b
 8006378:	227f      	movs	r2, #127	; 0x7f
 800637a:	f240 112b 	movw	r1, #299	; 0x12b
 800637e:	206e      	movs	r0, #110	; 0x6e
 8006380:	f007 fedc 	bl	800e13c <GUI_DrawLine>

	GUI_DrawLine(143, 211, 160, 211); /* For 4 */
 8006384:	23d3      	movs	r3, #211	; 0xd3
 8006386:	22a0      	movs	r2, #160	; 0xa0
 8006388:	21d3      	movs	r1, #211	; 0xd3
 800638a:	208f      	movs	r0, #143	; 0x8f
 800638c:	f007 fed6 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(143, 255, 160, 255);
 8006390:	23ff      	movs	r3, #255	; 0xff
 8006392:	22a0      	movs	r2, #160	; 0xa0
 8006394:	21ff      	movs	r1, #255	; 0xff
 8006396:	208f      	movs	r0, #143	; 0x8f
 8006398:	f007 fed0 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(143, 299, 160, 299);
 800639c:	f240 132b 	movw	r3, #299	; 0x12b
 80063a0:	22a0      	movs	r2, #160	; 0xa0
 80063a2:	f240 112b 	movw	r1, #299	; 0x12b
 80063a6:	208f      	movs	r0, #143	; 0x8f
 80063a8:	f007 fec8 	bl	800e13c <GUI_DrawLine>

	GUI_DrawLine(176, 211, 193, 211); /* For 5 */
 80063ac:	23d3      	movs	r3, #211	; 0xd3
 80063ae:	22c1      	movs	r2, #193	; 0xc1
 80063b0:	21d3      	movs	r1, #211	; 0xd3
 80063b2:	20b0      	movs	r0, #176	; 0xb0
 80063b4:	f007 fec2 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(176, 255, 193, 255);
 80063b8:	23ff      	movs	r3, #255	; 0xff
 80063ba:	22c1      	movs	r2, #193	; 0xc1
 80063bc:	21ff      	movs	r1, #255	; 0xff
 80063be:	20b0      	movs	r0, #176	; 0xb0
 80063c0:	f007 febc 	bl	800e13c <GUI_DrawLine>
 80063c4:	e010      	b.n	80063e8 <drawAllNotActive+0x3f0>
 80063c6:	bf00      	nop
 80063c8:	00101005 	.word	0x00101005
 80063cc:	080123a0 	.word	0x080123a0
 80063d0:	00333333 	.word	0x00333333
 80063d4:	00202020 	.word	0x00202020
 80063d8:	080118a4 	.word	0x080118a4
 80063dc:	080118ac 	.word	0x080118ac
 80063e0:	080118b8 	.word	0x080118b8
 80063e4:	080118cc 	.word	0x080118cc
	GUI_DrawLine(176, 299, 193, 299);
 80063e8:	f240 132b 	movw	r3, #299	; 0x12b
 80063ec:	22c1      	movs	r2, #193	; 0xc1
 80063ee:	f240 112b 	movw	r1, #299	; 0x12b
 80063f2:	20b0      	movs	r0, #176	; 0xb0
 80063f4:	f007 fea2 	bl	800e13c <GUI_DrawLine>

	GUI_DrawLine(209, 211, 226, 211); /* For Auto */
 80063f8:	23d3      	movs	r3, #211	; 0xd3
 80063fa:	22e2      	movs	r2, #226	; 0xe2
 80063fc:	21d3      	movs	r1, #211	; 0xd3
 80063fe:	20d1      	movs	r0, #209	; 0xd1
 8006400:	f007 fe9c 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(209, 255, 226, 255);
 8006404:	23ff      	movs	r3, #255	; 0xff
 8006406:	22e2      	movs	r2, #226	; 0xe2
 8006408:	21ff      	movs	r1, #255	; 0xff
 800640a:	20d1      	movs	r0, #209	; 0xd1
 800640c:	f007 fe96 	bl	800e13c <GUI_DrawLine>
	GUI_DrawLine(209, 299, 226, 299);
 8006410:	f240 132b 	movw	r3, #299	; 0x12b
 8006414:	22e2      	movs	r2, #226	; 0xe2
 8006416:	f240 112b 	movw	r1, #299	; 0x12b
 800641a:	20d1      	movs	r0, #209	; 0xd1
 800641c:	f007 fe8e 	bl	800e13c <GUI_DrawLine>
}
 8006420:	bf00      	nop
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop

08006428 <disablePrevMode>:

static void disablePrevMode(ui_mode_t mode)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af02      	add	r7, sp, #8
 800642e:	4603      	mov	r3, r0
 8006430:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	3b01      	subs	r3, #1
 8006436:	2b03      	cmp	r3, #3
 8006438:	f200 80a8 	bhi.w	800658c <disablePrevMode+0x164>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <disablePrevMode+0x1c>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006455 	.word	0x08006455
 8006448:	080064a3 	.word	0x080064a3
 800644c:	080064f1 	.word	0x080064f1
 8006450:	0800653f 	.word	0x0800653f
	{
	case ALL_DIM:
		/* Activity indicator */
		GUI_SetColor(GUI_BLACK);
 8006454:	2000      	movs	r0, #0
 8006456:	f006 f923 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 5, 26, 47, 8);
 800645a:	2308      	movs	r3, #8
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	232f      	movs	r3, #47	; 0x2f
 8006460:	221a      	movs	r2, #26
 8006462:	2105      	movs	r1, #5
 8006464:	2005      	movs	r0, #5
 8006466:	f007 f92f 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 800646a:	484b      	ldr	r0, [pc, #300]	; (8006598 <disablePrevMode+0x170>)
 800646c:	f006 f918 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 5, 26, 47);
 8006470:	232f      	movs	r3, #47	; 0x2f
 8006472:	221a      	movs	r2, #26
 8006474:	2105      	movs	r1, #5
 8006476:	200f      	movs	r0, #15
 8006478:	f007 f98a 	bl	800d790 <GUI_FillRect>

		/* Text underline */
		GUI_SetColor(GUI_BLACK);
 800647c:	2000      	movs	r0, #0
 800647e:	f006 f90f 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 35, 225, 35);
 8006482:	2323      	movs	r3, #35	; 0x23
 8006484:	22e1      	movs	r2, #225	; 0xe1
 8006486:	2123      	movs	r1, #35	; 0x23
 8006488:	2018      	movs	r0, #24
 800648a:	f007 fe57 	bl	800e13c <GUI_DrawLine>

		/* One char */
		GUI_SetColor(GUI_WHITE);
 800648e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006492:	f006 f905 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 18);
 8006496:	2212      	movs	r2, #18
 8006498:	2119      	movs	r1, #25
 800649a:	2041      	movs	r0, #65	; 0x41
 800649c:	f007 ff3c 	bl	800e318 <GUI_DispCharAt>
		break;
 80064a0:	e075      	b.n	800658e <disablePrevMode+0x166>

	case ALL_CLEAR:
		GUI_SetColor(GUI_BLACK);
 80064a2:	2000      	movs	r0, #0
 80064a4:	f006 f8fc 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 49, 26, 91, 8);
 80064a8:	2308      	movs	r3, #8
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	235b      	movs	r3, #91	; 0x5b
 80064ae:	221a      	movs	r2, #26
 80064b0:	2131      	movs	r1, #49	; 0x31
 80064b2:	2005      	movs	r0, #5
 80064b4:	f007 f908 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 80064b8:	4837      	ldr	r0, [pc, #220]	; (8006598 <disablePrevMode+0x170>)
 80064ba:	f006 f8f1 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 49, 26, 91);
 80064be:	235b      	movs	r3, #91	; 0x5b
 80064c0:	221a      	movs	r2, #26
 80064c2:	2131      	movs	r1, #49	; 0x31
 80064c4:	200f      	movs	r0, #15
 80064c6:	f007 f963 	bl	800d790 <GUI_FillRect>

		GUI_SetColor(GUI_BLACK);
 80064ca:	2000      	movs	r0, #0
 80064cc:	f006 f8e8 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 79, 225, 79);
 80064d0:	234f      	movs	r3, #79	; 0x4f
 80064d2:	22e1      	movs	r2, #225	; 0xe1
 80064d4:	214f      	movs	r1, #79	; 0x4f
 80064d6:	2018      	movs	r0, #24
 80064d8:	f007 fe30 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 80064dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80064e0:	f006 f8de 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 62);
 80064e4:	223e      	movs	r2, #62	; 0x3e
 80064e6:	2119      	movs	r1, #25
 80064e8:	2041      	movs	r0, #65	; 0x41
 80064ea:	f007 ff15 	bl	800e318 <GUI_DispCharAt>
		break;
 80064ee:	e04e      	b.n	800658e <disablePrevMode+0x166>

	case PRESENTATION:
		GUI_SetColor(GUI_BLACK);
 80064f0:	2000      	movs	r0, #0
 80064f2:	f006 f8d5 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 93, 26, 135, 8);
 80064f6:	2308      	movs	r3, #8
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2387      	movs	r3, #135	; 0x87
 80064fc:	221a      	movs	r2, #26
 80064fe:	215d      	movs	r1, #93	; 0x5d
 8006500:	2005      	movs	r0, #5
 8006502:	f007 f8e1 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 8006506:	4824      	ldr	r0, [pc, #144]	; (8006598 <disablePrevMode+0x170>)
 8006508:	f006 f8ca 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 93, 26, 135);
 800650c:	2387      	movs	r3, #135	; 0x87
 800650e:	221a      	movs	r2, #26
 8006510:	215d      	movs	r1, #93	; 0x5d
 8006512:	200f      	movs	r0, #15
 8006514:	f007 f93c 	bl	800d790 <GUI_FillRect>

		GUI_SetColor(GUI_BLACK);
 8006518:	2000      	movs	r0, #0
 800651a:	f006 f8c1 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 123, 225, 123);
 800651e:	237b      	movs	r3, #123	; 0x7b
 8006520:	22e1      	movs	r2, #225	; 0xe1
 8006522:	217b      	movs	r1, #123	; 0x7b
 8006524:	2018      	movs	r0, #24
 8006526:	f007 fe09 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 800652a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800652e:	f006 f8b7 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('P', 25, 106);
 8006532:	226a      	movs	r2, #106	; 0x6a
 8006534:	2119      	movs	r1, #25
 8006536:	2050      	movs	r0, #80	; 0x50
 8006538:	f007 feee 	bl	800e318 <GUI_DispCharAt>
		break;
 800653c:	e027      	b.n	800658e <disablePrevMode+0x166>

	case ALL_AUTO:
		GUI_SetColor(GUI_BLACK);
 800653e:	2000      	movs	r0, #0
 8006540:	f006 f8ae 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 137, 26, 179, 8);
 8006544:	2308      	movs	r3, #8
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	23b3      	movs	r3, #179	; 0xb3
 800654a:	221a      	movs	r2, #26
 800654c:	2189      	movs	r1, #137	; 0x89
 800654e:	2005      	movs	r0, #5
 8006550:	f007 f8ba 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 8006554:	4810      	ldr	r0, [pc, #64]	; (8006598 <disablePrevMode+0x170>)
 8006556:	f006 f8a3 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 137, 26, 179);
 800655a:	23b3      	movs	r3, #179	; 0xb3
 800655c:	221a      	movs	r2, #26
 800655e:	2189      	movs	r1, #137	; 0x89
 8006560:	200f      	movs	r0, #15
 8006562:	f007 f915 	bl	800d790 <GUI_FillRect>

		GUI_SetColor(GUI_BLACK);
 8006566:	2000      	movs	r0, #0
 8006568:	f006 f89a 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 167, 225, 167);
 800656c:	23a7      	movs	r3, #167	; 0xa7
 800656e:	22e1      	movs	r2, #225	; 0xe1
 8006570:	21a7      	movs	r1, #167	; 0xa7
 8006572:	2018      	movs	r0, #24
 8006574:	f007 fde2 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8006578:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800657c:	f006 f890 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 150);
 8006580:	2296      	movs	r2, #150	; 0x96
 8006582:	2119      	movs	r1, #25
 8006584:	2041      	movs	r0, #65	; 0x41
 8006586:	f007 fec7 	bl	800e318 <GUI_DispCharAt>
		break;
 800658a:	e000      	b.n	800658e <disablePrevMode+0x166>

	default:
		break;
 800658c:	bf00      	nop
	}
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	00333333 	.word	0x00333333

0800659c <enableNextMode>:

static void enableNextMode(ui_mode_t mode)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	f200 80a8 	bhi.w	8006700 <enableNextMode+0x164>
 80065b0:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <enableNextMode+0x1c>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	08006617 	.word	0x08006617
 80065c0:	08006665 	.word	0x08006665
 80065c4:	080066b3 	.word	0x080066b3
	{
	case ALL_DIM:
		/* Activity indicator */
		GUI_SetColor(CUS_LIGHTBLUE);
 80065c8:	4850      	ldr	r0, [pc, #320]	; (800670c <enableNextMode+0x170>)
 80065ca:	f006 f869 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 5, 26, 47, 8);
 80065ce:	2308      	movs	r3, #8
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	232f      	movs	r3, #47	; 0x2f
 80065d4:	221a      	movs	r2, #26
 80065d6:	2105      	movs	r1, #5
 80065d8:	2005      	movs	r0, #5
 80065da:	f007 f875 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 80065de:	484c      	ldr	r0, [pc, #304]	; (8006710 <enableNextMode+0x174>)
 80065e0:	f006 f85e 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 5, 26, 47);
 80065e4:	232f      	movs	r3, #47	; 0x2f
 80065e6:	221a      	movs	r2, #26
 80065e8:	2105      	movs	r1, #5
 80065ea:	200f      	movs	r0, #15
 80065ec:	f007 f8d0 	bl	800d790 <GUI_FillRect>

		/* Text underline */
		GUI_SetColor(CUS_LIGHTBLUE);
 80065f0:	4846      	ldr	r0, [pc, #280]	; (800670c <enableNextMode+0x170>)
 80065f2:	f006 f855 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 35, 225, 35);
 80065f6:	2323      	movs	r3, #35	; 0x23
 80065f8:	22e1      	movs	r2, #225	; 0xe1
 80065fa:	2123      	movs	r1, #35	; 0x23
 80065fc:	2018      	movs	r0, #24
 80065fe:	f007 fd9d 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8006602:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006606:	f006 f84b 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 18);
 800660a:	2212      	movs	r2, #18
 800660c:	2119      	movs	r1, #25
 800660e:	2041      	movs	r0, #65	; 0x41
 8006610:	f007 fe82 	bl	800e318 <GUI_DispCharAt>
		break;
 8006614:	e075      	b.n	8006702 <enableNextMode+0x166>

	case ALL_CLEAR:
		GUI_SetColor(CUS_LIGHTBLUE);
 8006616:	483d      	ldr	r0, [pc, #244]	; (800670c <enableNextMode+0x170>)
 8006618:	f006 f842 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 49, 26, 91, 8);
 800661c:	2308      	movs	r3, #8
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	235b      	movs	r3, #91	; 0x5b
 8006622:	221a      	movs	r2, #26
 8006624:	2131      	movs	r1, #49	; 0x31
 8006626:	2005      	movs	r0, #5
 8006628:	f007 f84e 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 800662c:	4838      	ldr	r0, [pc, #224]	; (8006710 <enableNextMode+0x174>)
 800662e:	f006 f837 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 49, 26, 91);
 8006632:	235b      	movs	r3, #91	; 0x5b
 8006634:	221a      	movs	r2, #26
 8006636:	2131      	movs	r1, #49	; 0x31
 8006638:	200f      	movs	r0, #15
 800663a:	f007 f8a9 	bl	800d790 <GUI_FillRect>

		GUI_SetColor(CUS_LIGHTBLUE);
 800663e:	4833      	ldr	r0, [pc, #204]	; (800670c <enableNextMode+0x170>)
 8006640:	f006 f82e 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 79, 225, 79);
 8006644:	234f      	movs	r3, #79	; 0x4f
 8006646:	22e1      	movs	r2, #225	; 0xe1
 8006648:	214f      	movs	r1, #79	; 0x4f
 800664a:	2018      	movs	r0, #24
 800664c:	f007 fd76 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8006650:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006654:	f006 f824 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 62);
 8006658:	223e      	movs	r2, #62	; 0x3e
 800665a:	2119      	movs	r1, #25
 800665c:	2041      	movs	r0, #65	; 0x41
 800665e:	f007 fe5b 	bl	800e318 <GUI_DispCharAt>
		break;
 8006662:	e04e      	b.n	8006702 <enableNextMode+0x166>

	case PRESENTATION:
		GUI_SetColor(CUS_LIGHTBLUE);
 8006664:	4829      	ldr	r0, [pc, #164]	; (800670c <enableNextMode+0x170>)
 8006666:	f006 f81b 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 93, 26, 135, 8);
 800666a:	2308      	movs	r3, #8
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	2387      	movs	r3, #135	; 0x87
 8006670:	221a      	movs	r2, #26
 8006672:	215d      	movs	r1, #93	; 0x5d
 8006674:	2005      	movs	r0, #5
 8006676:	f007 f827 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 800667a:	4825      	ldr	r0, [pc, #148]	; (8006710 <enableNextMode+0x174>)
 800667c:	f006 f810 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 93, 26, 135);
 8006680:	2387      	movs	r3, #135	; 0x87
 8006682:	221a      	movs	r2, #26
 8006684:	215d      	movs	r1, #93	; 0x5d
 8006686:	200f      	movs	r0, #15
 8006688:	f007 f882 	bl	800d790 <GUI_FillRect>

		GUI_SetColor(CUS_LIGHTBLUE);
 800668c:	481f      	ldr	r0, [pc, #124]	; (800670c <enableNextMode+0x170>)
 800668e:	f006 f807 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 123, 225, 123);
 8006692:	237b      	movs	r3, #123	; 0x7b
 8006694:	22e1      	movs	r2, #225	; 0xe1
 8006696:	217b      	movs	r1, #123	; 0x7b
 8006698:	2018      	movs	r0, #24
 800669a:	f007 fd4f 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 800669e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80066a2:	f005 fffd 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('P', 25, 106);
 80066a6:	226a      	movs	r2, #106	; 0x6a
 80066a8:	2119      	movs	r1, #25
 80066aa:	2050      	movs	r0, #80	; 0x50
 80066ac:	f007 fe34 	bl	800e318 <GUI_DispCharAt>
		break;
 80066b0:	e027      	b.n	8006702 <enableNextMode+0x166>

	case ALL_AUTO:
		GUI_SetColor(CUS_LIGHTBLUE);
 80066b2:	4816      	ldr	r0, [pc, #88]	; (800670c <enableNextMode+0x170>)
 80066b4:	f005 fff4 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 137, 26, 179, 8);
 80066b8:	2308      	movs	r3, #8
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	23b3      	movs	r3, #179	; 0xb3
 80066be:	221a      	movs	r2, #26
 80066c0:	2189      	movs	r1, #137	; 0x89
 80066c2:	2005      	movs	r0, #5
 80066c4:	f007 f800 	bl	800d6c8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 80066c8:	4811      	ldr	r0, [pc, #68]	; (8006710 <enableNextMode+0x174>)
 80066ca:	f005 ffe9 	bl	800c6a0 <GUI_SetColor>
		GUI_FillRect(15, 137, 26, 179);
 80066ce:	23b3      	movs	r3, #179	; 0xb3
 80066d0:	221a      	movs	r2, #26
 80066d2:	2189      	movs	r1, #137	; 0x89
 80066d4:	200f      	movs	r0, #15
 80066d6:	f007 f85b 	bl	800d790 <GUI_FillRect>

		GUI_SetColor(CUS_LIGHTBLUE);
 80066da:	480c      	ldr	r0, [pc, #48]	; (800670c <enableNextMode+0x170>)
 80066dc:	f005 ffe0 	bl	800c6a0 <GUI_SetColor>
		GUI_DrawLine(24, 167, 225, 167);
 80066e0:	23a7      	movs	r3, #167	; 0xa7
 80066e2:	22e1      	movs	r2, #225	; 0xe1
 80066e4:	21a7      	movs	r1, #167	; 0xa7
 80066e6:	2018      	movs	r0, #24
 80066e8:	f007 fd28 	bl	800e13c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 80066ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80066f0:	f005 ffd6 	bl	800c6a0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 150);
 80066f4:	2296      	movs	r2, #150	; 0x96
 80066f6:	2119      	movs	r1, #25
 80066f8:	2041      	movs	r0, #65	; 0x41
 80066fa:	f007 fe0d 	bl	800e318 <GUI_DispCharAt>
		break;
 80066fe:	e000      	b.n	8006702 <enableNextMode+0x166>

	default:
		break;
 8006700:	bf00      	nop
	}
}
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	00ffd218 	.word	0x00ffd218
 8006710:	00333333 	.word	0x00333333

08006714 <disablePrevZoneState>:

static void disablePrevZoneState(ui_zone_state_t zoneState, uint8_t numOfZone)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af02      	add	r7, sp, #8
 800671a:	4603      	mov	r3, r0
 800671c:	460a      	mov	r2, r1
 800671e:	71fb      	strb	r3, [r7, #7]
 8006720:	4613      	mov	r3, r2
 8006722:	71bb      	strb	r3, [r7, #6]
	switch (numOfZone)
 8006724:	79bb      	ldrb	r3, [r7, #6]
 8006726:	2b01      	cmp	r3, #1
 8006728:	f000 80d0 	beq.w	80068cc <disablePrevZoneState+0x1b8>
 800672c:	2b02      	cmp	r3, #2
 800672e:	f000 819d 	beq.w	8006a6c <disablePrevZoneState+0x358>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d000      	beq.n	8006738 <disablePrevZoneState+0x24>
		default:
			break;
		}
		break;
	default:
		break;
 8006736:	e284      	b.n	8006c42 <disablePrevZoneState+0x52e>
		switch (zoneState)
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	3b01      	subs	r3, #1
 800673c:	2b05      	cmp	r3, #5
 800673e:	f200 80c3 	bhi.w	80068c8 <disablePrevZoneState+0x1b4>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <disablePrevZoneState+0x34>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006761 	.word	0x08006761
 800674c:	0800679d 	.word	0x0800679d
 8006750:	080067d9 	.word	0x080067d9
 8006754:	08006815 	.word	0x08006815
 8006758:	08006851 	.word	0x08006851
 800675c:	0800688d 	.word	0x0800688d
			GUI_SetColor(CUS_DARKGRAY);
 8006760:	48de      	ldr	r0, [pc, #888]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006762:	f005 ff9d 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 181, 73, 223, 8);
 8006766:	2308      	movs	r3, #8
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	23df      	movs	r3, #223	; 0xdf
 800676c:	2249      	movs	r2, #73	; 0x49
 800676e:	21b5      	movs	r1, #181	; 0xb5
 8006770:	2023      	movs	r0, #35	; 0x23
 8006772:	f006 ffa9 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006776:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800677a:	f005 ff91 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 194);
 800677e:	22c2      	movs	r2, #194	; 0xc2
 8006780:	2132      	movs	r1, #50	; 0x32
 8006782:	2031      	movs	r0, #49	; 0x31
 8006784:	f007 fdc8 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006788:	2000      	movs	r0, #0
 800678a:	f005 ff89 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(44, 211, 63, 211);
 800678e:	23d3      	movs	r3, #211	; 0xd3
 8006790:	223f      	movs	r2, #63	; 0x3f
 8006792:	21d3      	movs	r1, #211	; 0xd3
 8006794:	202c      	movs	r0, #44	; 0x2c
 8006796:	f007 fcd1 	bl	800e13c <GUI_DrawLine>
			break;
 800679a:	e096      	b.n	80068ca <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 800679c:	48cf      	ldr	r0, [pc, #828]	; (8006adc <disablePrevZoneState+0x3c8>)
 800679e:	f005 ff7f 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 181, 106, 223, 8);
 80067a2:	2308      	movs	r3, #8
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	23df      	movs	r3, #223	; 0xdf
 80067a8:	226a      	movs	r2, #106	; 0x6a
 80067aa:	21b5      	movs	r1, #181	; 0xb5
 80067ac:	2043      	movs	r0, #67	; 0x43
 80067ae:	f006 ff8b 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80067b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80067b6:	f005 ff73 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 194);
 80067ba:	22c2      	movs	r2, #194	; 0xc2
 80067bc:	2153      	movs	r1, #83	; 0x53
 80067be:	2032      	movs	r0, #50	; 0x32
 80067c0:	f007 fdaa 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 80067c4:	2000      	movs	r0, #0
 80067c6:	f005 ff6b 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(77, 211, 96, 211);
 80067ca:	23d3      	movs	r3, #211	; 0xd3
 80067cc:	2260      	movs	r2, #96	; 0x60
 80067ce:	21d3      	movs	r1, #211	; 0xd3
 80067d0:	204d      	movs	r0, #77	; 0x4d
 80067d2:	f007 fcb3 	bl	800e13c <GUI_DrawLine>
			break;
 80067d6:	e078      	b.n	80068ca <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 80067d8:	48c0      	ldr	r0, [pc, #768]	; (8006adc <disablePrevZoneState+0x3c8>)
 80067da:	f005 ff61 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 181, 139, 223, 8);
 80067de:	2308      	movs	r3, #8
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	23df      	movs	r3, #223	; 0xdf
 80067e4:	228b      	movs	r2, #139	; 0x8b
 80067e6:	21b5      	movs	r1, #181	; 0xb5
 80067e8:	2064      	movs	r0, #100	; 0x64
 80067ea:	f006 ff6d 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80067ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80067f2:	f005 ff55 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 194);
 80067f6:	22c2      	movs	r2, #194	; 0xc2
 80067f8:	2174      	movs	r1, #116	; 0x74
 80067fa:	2033      	movs	r0, #51	; 0x33
 80067fc:	f007 fd8c 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006800:	2000      	movs	r0, #0
 8006802:	f005 ff4d 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(110, 211, 127, 211);
 8006806:	23d3      	movs	r3, #211	; 0xd3
 8006808:	227f      	movs	r2, #127	; 0x7f
 800680a:	21d3      	movs	r1, #211	; 0xd3
 800680c:	206e      	movs	r0, #110	; 0x6e
 800680e:	f007 fc95 	bl	800e13c <GUI_DrawLine>
			break;
 8006812:	e05a      	b.n	80068ca <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8006814:	48b1      	ldr	r0, [pc, #708]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006816:	f005 ff43 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 181, 171, 223, 8);
 800681a:	2308      	movs	r3, #8
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	23df      	movs	r3, #223	; 0xdf
 8006820:	22ab      	movs	r2, #171	; 0xab
 8006822:	21b5      	movs	r1, #181	; 0xb5
 8006824:	2084      	movs	r0, #132	; 0x84
 8006826:	f006 ff4f 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 800682a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800682e:	f005 ff37 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 194);
 8006832:	22c2      	movs	r2, #194	; 0xc2
 8006834:	2195      	movs	r1, #149	; 0x95
 8006836:	2034      	movs	r0, #52	; 0x34
 8006838:	f007 fd6e 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 800683c:	2000      	movs	r0, #0
 800683e:	f005 ff2f 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(143, 211, 160, 211);
 8006842:	23d3      	movs	r3, #211	; 0xd3
 8006844:	22a0      	movs	r2, #160	; 0xa0
 8006846:	21d3      	movs	r1, #211	; 0xd3
 8006848:	208f      	movs	r0, #143	; 0x8f
 800684a:	f007 fc77 	bl	800e13c <GUI_DrawLine>
			break;
 800684e:	e03c      	b.n	80068ca <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8006850:	48a2      	ldr	r0, [pc, #648]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006852:	f005 ff25 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 181, 204, 223, 8);
 8006856:	2308      	movs	r3, #8
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	23df      	movs	r3, #223	; 0xdf
 800685c:	22cc      	movs	r2, #204	; 0xcc
 800685e:	21b5      	movs	r1, #181	; 0xb5
 8006860:	20a5      	movs	r0, #165	; 0xa5
 8006862:	f006 ff31 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006866:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800686a:	f005 ff19 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 194);
 800686e:	22c2      	movs	r2, #194	; 0xc2
 8006870:	21b6      	movs	r1, #182	; 0xb6
 8006872:	2035      	movs	r0, #53	; 0x35
 8006874:	f007 fd50 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006878:	2000      	movs	r0, #0
 800687a:	f005 ff11 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(176, 211, 193, 211);
 800687e:	23d3      	movs	r3, #211	; 0xd3
 8006880:	22c1      	movs	r2, #193	; 0xc1
 8006882:	21d3      	movs	r1, #211	; 0xd3
 8006884:	20b0      	movs	r0, #176	; 0xb0
 8006886:	f007 fc59 	bl	800e13c <GUI_DrawLine>
			break;
 800688a:	e01e      	b.n	80068ca <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 800688c:	4893      	ldr	r0, [pc, #588]	; (8006adc <disablePrevZoneState+0x3c8>)
 800688e:	f005 ff07 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 181, 235, 223, 8);
 8006892:	2308      	movs	r3, #8
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	23df      	movs	r3, #223	; 0xdf
 8006898:	22eb      	movs	r2, #235	; 0xeb
 800689a:	21b5      	movs	r1, #181	; 0xb5
 800689c:	20c8      	movs	r0, #200	; 0xc8
 800689e:	f006 ff13 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80068a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80068a6:	f005 fefb 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 194);
 80068aa:	22c2      	movs	r2, #194	; 0xc2
 80068ac:	21d7      	movs	r1, #215	; 0xd7
 80068ae:	2041      	movs	r0, #65	; 0x41
 80068b0:	f007 fd32 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 80068b4:	2000      	movs	r0, #0
 80068b6:	f005 fef3 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(209, 211, 226, 211);
 80068ba:	23d3      	movs	r3, #211	; 0xd3
 80068bc:	22e2      	movs	r2, #226	; 0xe2
 80068be:	21d3      	movs	r1, #211	; 0xd3
 80068c0:	20d1      	movs	r0, #209	; 0xd1
 80068c2:	f007 fc3b 	bl	800e13c <GUI_DrawLine>
			break;
 80068c6:	e000      	b.n	80068ca <disablePrevZoneState+0x1b6>
			break;
 80068c8:	bf00      	nop
		break;
 80068ca:	e1ba      	b.n	8006c42 <disablePrevZoneState+0x52e>
		switch (zoneState)
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	2b05      	cmp	r3, #5
 80068d2:	f200 80c9 	bhi.w	8006a68 <disablePrevZoneState+0x354>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <disablePrevZoneState+0x1c8>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	080068f5 	.word	0x080068f5
 80068e0:	08006933 	.word	0x08006933
 80068e4:	08006971 	.word	0x08006971
 80068e8:	080069af 	.word	0x080069af
 80068ec:	080069ed 	.word	0x080069ed
 80068f0:	08006a2b 	.word	0x08006a2b
			GUI_SetColor(CUS_DARKGRAY);
 80068f4:	4879      	ldr	r0, [pc, #484]	; (8006adc <disablePrevZoneState+0x3c8>)
 80068f6:	f005 fed3 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 225, 73, 267, 8);
 80068fa:	2308      	movs	r3, #8
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	f240 130b 	movw	r3, #267	; 0x10b
 8006902:	2249      	movs	r2, #73	; 0x49
 8006904:	21e1      	movs	r1, #225	; 0xe1
 8006906:	2023      	movs	r0, #35	; 0x23
 8006908:	f006 fede 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 800690c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006910:	f005 fec6 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 238);
 8006914:	22ee      	movs	r2, #238	; 0xee
 8006916:	2132      	movs	r1, #50	; 0x32
 8006918:	2031      	movs	r0, #49	; 0x31
 800691a:	f007 fcfd 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 800691e:	2000      	movs	r0, #0
 8006920:	f005 febe 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(44, 255, 63, 255);
 8006924:	23ff      	movs	r3, #255	; 0xff
 8006926:	223f      	movs	r2, #63	; 0x3f
 8006928:	21ff      	movs	r1, #255	; 0xff
 800692a:	202c      	movs	r0, #44	; 0x2c
 800692c:	f007 fc06 	bl	800e13c <GUI_DrawLine>
			break;
 8006930:	e09b      	b.n	8006a6a <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8006932:	486a      	ldr	r0, [pc, #424]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006934:	f005 feb4 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 225, 106, 267, 8);
 8006938:	2308      	movs	r3, #8
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	f240 130b 	movw	r3, #267	; 0x10b
 8006940:	226a      	movs	r2, #106	; 0x6a
 8006942:	21e1      	movs	r1, #225	; 0xe1
 8006944:	2043      	movs	r0, #67	; 0x43
 8006946:	f006 febf 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 800694a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800694e:	f005 fea7 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 238);
 8006952:	22ee      	movs	r2, #238	; 0xee
 8006954:	2153      	movs	r1, #83	; 0x53
 8006956:	2032      	movs	r0, #50	; 0x32
 8006958:	f007 fcde 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 800695c:	2000      	movs	r0, #0
 800695e:	f005 fe9f 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(77, 255, 96, 255);
 8006962:	23ff      	movs	r3, #255	; 0xff
 8006964:	2260      	movs	r2, #96	; 0x60
 8006966:	21ff      	movs	r1, #255	; 0xff
 8006968:	204d      	movs	r0, #77	; 0x4d
 800696a:	f007 fbe7 	bl	800e13c <GUI_DrawLine>
			break;
 800696e:	e07c      	b.n	8006a6a <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8006970:	485a      	ldr	r0, [pc, #360]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006972:	f005 fe95 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 225, 139, 267, 8);
 8006976:	2308      	movs	r3, #8
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	f240 130b 	movw	r3, #267	; 0x10b
 800697e:	228b      	movs	r2, #139	; 0x8b
 8006980:	21e1      	movs	r1, #225	; 0xe1
 8006982:	2064      	movs	r0, #100	; 0x64
 8006984:	f006 fea0 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006988:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800698c:	f005 fe88 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 238);
 8006990:	22ee      	movs	r2, #238	; 0xee
 8006992:	2174      	movs	r1, #116	; 0x74
 8006994:	2033      	movs	r0, #51	; 0x33
 8006996:	f007 fcbf 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 800699a:	2000      	movs	r0, #0
 800699c:	f005 fe80 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(110, 255, 127, 255);
 80069a0:	23ff      	movs	r3, #255	; 0xff
 80069a2:	227f      	movs	r2, #127	; 0x7f
 80069a4:	21ff      	movs	r1, #255	; 0xff
 80069a6:	206e      	movs	r0, #110	; 0x6e
 80069a8:	f007 fbc8 	bl	800e13c <GUI_DrawLine>
			break;
 80069ac:	e05d      	b.n	8006a6a <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 80069ae:	484b      	ldr	r0, [pc, #300]	; (8006adc <disablePrevZoneState+0x3c8>)
 80069b0:	f005 fe76 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 225, 171, 267, 8);
 80069b4:	2308      	movs	r3, #8
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	f240 130b 	movw	r3, #267	; 0x10b
 80069bc:	22ab      	movs	r2, #171	; 0xab
 80069be:	21e1      	movs	r1, #225	; 0xe1
 80069c0:	2084      	movs	r0, #132	; 0x84
 80069c2:	f006 fe81 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80069c6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80069ca:	f005 fe69 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 238);
 80069ce:	22ee      	movs	r2, #238	; 0xee
 80069d0:	2195      	movs	r1, #149	; 0x95
 80069d2:	2034      	movs	r0, #52	; 0x34
 80069d4:	f007 fca0 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 80069d8:	2000      	movs	r0, #0
 80069da:	f005 fe61 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(143, 255, 160, 255);
 80069de:	23ff      	movs	r3, #255	; 0xff
 80069e0:	22a0      	movs	r2, #160	; 0xa0
 80069e2:	21ff      	movs	r1, #255	; 0xff
 80069e4:	208f      	movs	r0, #143	; 0x8f
 80069e6:	f007 fba9 	bl	800e13c <GUI_DrawLine>
			break;
 80069ea:	e03e      	b.n	8006a6a <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 80069ec:	483b      	ldr	r0, [pc, #236]	; (8006adc <disablePrevZoneState+0x3c8>)
 80069ee:	f005 fe57 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 225, 204, 267, 8);
 80069f2:	2308      	movs	r3, #8
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	f240 130b 	movw	r3, #267	; 0x10b
 80069fa:	22cc      	movs	r2, #204	; 0xcc
 80069fc:	21e1      	movs	r1, #225	; 0xe1
 80069fe:	20a5      	movs	r0, #165	; 0xa5
 8006a00:	f006 fe62 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006a04:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006a08:	f005 fe4a 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 238);
 8006a0c:	22ee      	movs	r2, #238	; 0xee
 8006a0e:	21b6      	movs	r1, #182	; 0xb6
 8006a10:	2035      	movs	r0, #53	; 0x35
 8006a12:	f007 fc81 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006a16:	2000      	movs	r0, #0
 8006a18:	f005 fe42 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(176, 255, 193, 255);
 8006a1c:	23ff      	movs	r3, #255	; 0xff
 8006a1e:	22c1      	movs	r2, #193	; 0xc1
 8006a20:	21ff      	movs	r1, #255	; 0xff
 8006a22:	20b0      	movs	r0, #176	; 0xb0
 8006a24:	f007 fb8a 	bl	800e13c <GUI_DrawLine>
			break;
 8006a28:	e01f      	b.n	8006a6a <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8006a2a:	482c      	ldr	r0, [pc, #176]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006a2c:	f005 fe38 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 225, 235, 267, 8);
 8006a30:	2308      	movs	r3, #8
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	f240 130b 	movw	r3, #267	; 0x10b
 8006a38:	22eb      	movs	r2, #235	; 0xeb
 8006a3a:	21e1      	movs	r1, #225	; 0xe1
 8006a3c:	20c8      	movs	r0, #200	; 0xc8
 8006a3e:	f006 fe43 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006a42:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006a46:	f005 fe2b 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 238);
 8006a4a:	22ee      	movs	r2, #238	; 0xee
 8006a4c:	21d7      	movs	r1, #215	; 0xd7
 8006a4e:	2041      	movs	r0, #65	; 0x41
 8006a50:	f007 fc62 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006a54:	2000      	movs	r0, #0
 8006a56:	f005 fe23 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(209, 255, 226, 255);
 8006a5a:	23ff      	movs	r3, #255	; 0xff
 8006a5c:	22e2      	movs	r2, #226	; 0xe2
 8006a5e:	21ff      	movs	r1, #255	; 0xff
 8006a60:	20d1      	movs	r0, #209	; 0xd1
 8006a62:	f007 fb6b 	bl	800e13c <GUI_DrawLine>
			break;
 8006a66:	e000      	b.n	8006a6a <disablePrevZoneState+0x356>
			break;
 8006a68:	bf00      	nop
		break;
 8006a6a:	e0ea      	b.n	8006c42 <disablePrevZoneState+0x52e>
		switch (zoneState)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	f200 80e4 	bhi.w	8006c3e <disablePrevZoneState+0x52a>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <disablePrevZoneState+0x368>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006a95 	.word	0x08006a95
 8006a80:	08006ae1 	.word	0x08006ae1
 8006a84:	08006b27 	.word	0x08006b27
 8006a88:	08006b6d 	.word	0x08006b6d
 8006a8c:	08006bb3 	.word	0x08006bb3
 8006a90:	08006bf9 	.word	0x08006bf9
			GUI_SetColor(CUS_DARKGRAY);
 8006a94:	4811      	ldr	r0, [pc, #68]	; (8006adc <disablePrevZoneState+0x3c8>)
 8006a96:	f005 fe03 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 269, 73, 311, 8);
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	f240 1337 	movw	r3, #311	; 0x137
 8006aa2:	2249      	movs	r2, #73	; 0x49
 8006aa4:	f240 110d 	movw	r1, #269	; 0x10d
 8006aa8:	2023      	movs	r0, #35	; 0x23
 8006aaa:	f006 fe0d 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006aae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006ab2:	f005 fdf5 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 282);
 8006ab6:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006aba:	2132      	movs	r1, #50	; 0x32
 8006abc:	2031      	movs	r0, #49	; 0x31
 8006abe:	f007 fc2b 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f005 fdec 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(44, 299, 63, 299);
 8006ac8:	f240 132b 	movw	r3, #299	; 0x12b
 8006acc:	223f      	movs	r2, #63	; 0x3f
 8006ace:	f240 112b 	movw	r1, #299	; 0x12b
 8006ad2:	202c      	movs	r0, #44	; 0x2c
 8006ad4:	f007 fb32 	bl	800e13c <GUI_DrawLine>
			break;
 8006ad8:	e0b2      	b.n	8006c40 <disablePrevZoneState+0x52c>
 8006ada:	bf00      	nop
 8006adc:	00333333 	.word	0x00333333
			GUI_SetColor(CUS_DARKGRAY);
 8006ae0:	485a      	ldr	r0, [pc, #360]	; (8006c4c <disablePrevZoneState+0x538>)
 8006ae2:	f005 fddd 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 269, 106, 311, 8);
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	f240 1337 	movw	r3, #311	; 0x137
 8006aee:	226a      	movs	r2, #106	; 0x6a
 8006af0:	f240 110d 	movw	r1, #269	; 0x10d
 8006af4:	2043      	movs	r0, #67	; 0x43
 8006af6:	f006 fde7 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006afa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006afe:	f005 fdcf 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 282);
 8006b02:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006b06:	2153      	movs	r1, #83	; 0x53
 8006b08:	2032      	movs	r0, #50	; 0x32
 8006b0a:	f007 fc05 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f005 fdc6 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(77, 299, 96, 299);
 8006b14:	f240 132b 	movw	r3, #299	; 0x12b
 8006b18:	2260      	movs	r2, #96	; 0x60
 8006b1a:	f240 112b 	movw	r1, #299	; 0x12b
 8006b1e:	204d      	movs	r0, #77	; 0x4d
 8006b20:	f007 fb0c 	bl	800e13c <GUI_DrawLine>
			break;
 8006b24:	e08c      	b.n	8006c40 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8006b26:	4849      	ldr	r0, [pc, #292]	; (8006c4c <disablePrevZoneState+0x538>)
 8006b28:	f005 fdba 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 269, 139, 311, 8);
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	f240 1337 	movw	r3, #311	; 0x137
 8006b34:	228b      	movs	r2, #139	; 0x8b
 8006b36:	f240 110d 	movw	r1, #269	; 0x10d
 8006b3a:	2064      	movs	r0, #100	; 0x64
 8006b3c:	f006 fdc4 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006b40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006b44:	f005 fdac 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 282);
 8006b48:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006b4c:	2174      	movs	r1, #116	; 0x74
 8006b4e:	2033      	movs	r0, #51	; 0x33
 8006b50:	f007 fbe2 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006b54:	2000      	movs	r0, #0
 8006b56:	f005 fda3 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(110, 299, 127, 299);
 8006b5a:	f240 132b 	movw	r3, #299	; 0x12b
 8006b5e:	227f      	movs	r2, #127	; 0x7f
 8006b60:	f240 112b 	movw	r1, #299	; 0x12b
 8006b64:	206e      	movs	r0, #110	; 0x6e
 8006b66:	f007 fae9 	bl	800e13c <GUI_DrawLine>
			break;
 8006b6a:	e069      	b.n	8006c40 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8006b6c:	4837      	ldr	r0, [pc, #220]	; (8006c4c <disablePrevZoneState+0x538>)
 8006b6e:	f005 fd97 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 269, 171, 311, 8);
 8006b72:	2308      	movs	r3, #8
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	f240 1337 	movw	r3, #311	; 0x137
 8006b7a:	22ab      	movs	r2, #171	; 0xab
 8006b7c:	f240 110d 	movw	r1, #269	; 0x10d
 8006b80:	2084      	movs	r0, #132	; 0x84
 8006b82:	f006 fda1 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006b86:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006b8a:	f005 fd89 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 282);
 8006b8e:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006b92:	2195      	movs	r1, #149	; 0x95
 8006b94:	2034      	movs	r0, #52	; 0x34
 8006b96:	f007 fbbf 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f005 fd80 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(143, 299, 160, 299);
 8006ba0:	f240 132b 	movw	r3, #299	; 0x12b
 8006ba4:	22a0      	movs	r2, #160	; 0xa0
 8006ba6:	f240 112b 	movw	r1, #299	; 0x12b
 8006baa:	208f      	movs	r0, #143	; 0x8f
 8006bac:	f007 fac6 	bl	800e13c <GUI_DrawLine>
			break;
 8006bb0:	e046      	b.n	8006c40 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8006bb2:	4826      	ldr	r0, [pc, #152]	; (8006c4c <disablePrevZoneState+0x538>)
 8006bb4:	f005 fd74 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 269, 204, 311, 8);
 8006bb8:	2308      	movs	r3, #8
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	f240 1337 	movw	r3, #311	; 0x137
 8006bc0:	22cc      	movs	r2, #204	; 0xcc
 8006bc2:	f240 110d 	movw	r1, #269	; 0x10d
 8006bc6:	20a5      	movs	r0, #165	; 0xa5
 8006bc8:	f006 fd7e 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006bcc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006bd0:	f005 fd66 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 282);
 8006bd4:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006bd8:	21b6      	movs	r1, #182	; 0xb6
 8006bda:	2035      	movs	r0, #53	; 0x35
 8006bdc:	f007 fb9c 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006be0:	2000      	movs	r0, #0
 8006be2:	f005 fd5d 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(176, 299, 193, 299);
 8006be6:	f240 132b 	movw	r3, #299	; 0x12b
 8006bea:	22c1      	movs	r2, #193	; 0xc1
 8006bec:	f240 112b 	movw	r1, #299	; 0x12b
 8006bf0:	20b0      	movs	r0, #176	; 0xb0
 8006bf2:	f007 faa3 	bl	800e13c <GUI_DrawLine>
			break;
 8006bf6:	e023      	b.n	8006c40 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8006bf8:	4814      	ldr	r0, [pc, #80]	; (8006c4c <disablePrevZoneState+0x538>)
 8006bfa:	f005 fd51 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 269, 235, 311, 8);
 8006bfe:	2308      	movs	r3, #8
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	f240 1337 	movw	r3, #311	; 0x137
 8006c06:	22eb      	movs	r2, #235	; 0xeb
 8006c08:	f240 110d 	movw	r1, #269	; 0x10d
 8006c0c:	20c8      	movs	r0, #200	; 0xc8
 8006c0e:	f006 fd5b 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006c12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006c16:	f005 fd43 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 282);
 8006c1a:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006c1e:	21d7      	movs	r1, #215	; 0xd7
 8006c20:	2041      	movs	r0, #65	; 0x41
 8006c22:	f007 fb79 	bl	800e318 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8006c26:	2000      	movs	r0, #0
 8006c28:	f005 fd3a 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(209, 299, 226, 299);
 8006c2c:	f240 132b 	movw	r3, #299	; 0x12b
 8006c30:	22e2      	movs	r2, #226	; 0xe2
 8006c32:	f240 112b 	movw	r1, #299	; 0x12b
 8006c36:	20d1      	movs	r0, #209	; 0xd1
 8006c38:	f007 fa80 	bl	800e13c <GUI_DrawLine>
			break;
 8006c3c:	e000      	b.n	8006c40 <disablePrevZoneState+0x52c>
			break;
 8006c3e:	bf00      	nop
		break;
 8006c40:	bf00      	nop
	}
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	00333333 	.word	0x00333333

08006c50 <enableNextZoneState>:

static void enableNextZoneState(ui_zone_state_t zoneState, uint8_t numOfZone)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	4603      	mov	r3, r0
 8006c58:	460a      	mov	r2, r1
 8006c5a:	71fb      	strb	r3, [r7, #7]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71bb      	strb	r3, [r7, #6]
	switch (numOfZone)
 8006c60:	79bb      	ldrb	r3, [r7, #6]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	f000 80be 	beq.w	8006de4 <enableNextZoneState+0x194>
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	f000 8179 	beq.w	8006f60 <enableNextZoneState+0x310>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d000      	beq.n	8006c74 <enableNextZoneState+0x24>
		default:
			break;
		}
		break;
	default:
		break;
 8006c72:	e24d      	b.n	8007110 <enableNextZoneState+0x4c0>
		switch (zoneState)
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	f200 80b1 	bhi.w	8006de0 <enableNextZoneState+0x190>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <enableNextZoneState+0x34>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006c9d 	.word	0x08006c9d
 8006c88:	08006cd3 	.word	0x08006cd3
 8006c8c:	08006d09 	.word	0x08006d09
 8006c90:	08006d3f 	.word	0x08006d3f
 8006c94:	08006d75 	.word	0x08006d75
 8006c98:	08006dab 	.word	0x08006dab
			GUI_SetColor(CUS_LIGHTBLUE);
 8006c9c:	48da      	ldr	r0, [pc, #872]	; (8007008 <enableNextZoneState+0x3b8>)
 8006c9e:	f005 fcff 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 181, 73, 223, 8);
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	23df      	movs	r3, #223	; 0xdf
 8006ca8:	2249      	movs	r2, #73	; 0x49
 8006caa:	21b5      	movs	r1, #181	; 0xb5
 8006cac:	2023      	movs	r0, #35	; 0x23
 8006cae:	f006 fd0b 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006cb2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006cb6:	f005 fcf3 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 194);
 8006cba:	22c2      	movs	r2, #194	; 0xc2
 8006cbc:	2132      	movs	r1, #50	; 0x32
 8006cbe:	2031      	movs	r0, #49	; 0x31
 8006cc0:	f007 fb2a 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(44, 211, 63, 211);
 8006cc4:	23d3      	movs	r3, #211	; 0xd3
 8006cc6:	223f      	movs	r2, #63	; 0x3f
 8006cc8:	21d3      	movs	r1, #211	; 0xd3
 8006cca:	202c      	movs	r0, #44	; 0x2c
 8006ccc:	f007 fa36 	bl	800e13c <GUI_DrawLine>
			break;
 8006cd0:	e087      	b.n	8006de2 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006cd2:	48cd      	ldr	r0, [pc, #820]	; (8007008 <enableNextZoneState+0x3b8>)
 8006cd4:	f005 fce4 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 181, 106, 223, 8);
 8006cd8:	2308      	movs	r3, #8
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	23df      	movs	r3, #223	; 0xdf
 8006cde:	226a      	movs	r2, #106	; 0x6a
 8006ce0:	21b5      	movs	r1, #181	; 0xb5
 8006ce2:	2043      	movs	r0, #67	; 0x43
 8006ce4:	f006 fcf0 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006ce8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006cec:	f005 fcd8 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 194);
 8006cf0:	22c2      	movs	r2, #194	; 0xc2
 8006cf2:	2153      	movs	r1, #83	; 0x53
 8006cf4:	2032      	movs	r0, #50	; 0x32
 8006cf6:	f007 fb0f 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(77, 211, 96, 211);
 8006cfa:	23d3      	movs	r3, #211	; 0xd3
 8006cfc:	2260      	movs	r2, #96	; 0x60
 8006cfe:	21d3      	movs	r1, #211	; 0xd3
 8006d00:	204d      	movs	r0, #77	; 0x4d
 8006d02:	f007 fa1b 	bl	800e13c <GUI_DrawLine>
			break;
 8006d06:	e06c      	b.n	8006de2 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006d08:	48bf      	ldr	r0, [pc, #764]	; (8007008 <enableNextZoneState+0x3b8>)
 8006d0a:	f005 fcc9 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 181, 139, 223, 8);
 8006d0e:	2308      	movs	r3, #8
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	23df      	movs	r3, #223	; 0xdf
 8006d14:	228b      	movs	r2, #139	; 0x8b
 8006d16:	21b5      	movs	r1, #181	; 0xb5
 8006d18:	2064      	movs	r0, #100	; 0x64
 8006d1a:	f006 fcd5 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006d1e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006d22:	f005 fcbd 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 194);
 8006d26:	22c2      	movs	r2, #194	; 0xc2
 8006d28:	2174      	movs	r1, #116	; 0x74
 8006d2a:	2033      	movs	r0, #51	; 0x33
 8006d2c:	f007 faf4 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(110, 211, 127, 211);
 8006d30:	23d3      	movs	r3, #211	; 0xd3
 8006d32:	227f      	movs	r2, #127	; 0x7f
 8006d34:	21d3      	movs	r1, #211	; 0xd3
 8006d36:	206e      	movs	r0, #110	; 0x6e
 8006d38:	f007 fa00 	bl	800e13c <GUI_DrawLine>
			break;
 8006d3c:	e051      	b.n	8006de2 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006d3e:	48b2      	ldr	r0, [pc, #712]	; (8007008 <enableNextZoneState+0x3b8>)
 8006d40:	f005 fcae 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 181, 171, 223, 8);
 8006d44:	2308      	movs	r3, #8
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	23df      	movs	r3, #223	; 0xdf
 8006d4a:	22ab      	movs	r2, #171	; 0xab
 8006d4c:	21b5      	movs	r1, #181	; 0xb5
 8006d4e:	2084      	movs	r0, #132	; 0x84
 8006d50:	f006 fcba 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006d54:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006d58:	f005 fca2 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 194);
 8006d5c:	22c2      	movs	r2, #194	; 0xc2
 8006d5e:	2195      	movs	r1, #149	; 0x95
 8006d60:	2034      	movs	r0, #52	; 0x34
 8006d62:	f007 fad9 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(143, 211, 160, 211);
 8006d66:	23d3      	movs	r3, #211	; 0xd3
 8006d68:	22a0      	movs	r2, #160	; 0xa0
 8006d6a:	21d3      	movs	r1, #211	; 0xd3
 8006d6c:	208f      	movs	r0, #143	; 0x8f
 8006d6e:	f007 f9e5 	bl	800e13c <GUI_DrawLine>
			break;
 8006d72:	e036      	b.n	8006de2 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006d74:	48a4      	ldr	r0, [pc, #656]	; (8007008 <enableNextZoneState+0x3b8>)
 8006d76:	f005 fc93 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 181, 204, 223, 8);
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	23df      	movs	r3, #223	; 0xdf
 8006d80:	22cc      	movs	r2, #204	; 0xcc
 8006d82:	21b5      	movs	r1, #181	; 0xb5
 8006d84:	20a5      	movs	r0, #165	; 0xa5
 8006d86:	f006 fc9f 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006d8a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006d8e:	f005 fc87 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 194);
 8006d92:	22c2      	movs	r2, #194	; 0xc2
 8006d94:	21b6      	movs	r1, #182	; 0xb6
 8006d96:	2035      	movs	r0, #53	; 0x35
 8006d98:	f007 fabe 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(176, 211, 193, 211);
 8006d9c:	23d3      	movs	r3, #211	; 0xd3
 8006d9e:	22c1      	movs	r2, #193	; 0xc1
 8006da0:	21d3      	movs	r1, #211	; 0xd3
 8006da2:	20b0      	movs	r0, #176	; 0xb0
 8006da4:	f007 f9ca 	bl	800e13c <GUI_DrawLine>
			break;
 8006da8:	e01b      	b.n	8006de2 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006daa:	4897      	ldr	r0, [pc, #604]	; (8007008 <enableNextZoneState+0x3b8>)
 8006dac:	f005 fc78 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 181, 235, 223, 8);
 8006db0:	2308      	movs	r3, #8
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	23df      	movs	r3, #223	; 0xdf
 8006db6:	22eb      	movs	r2, #235	; 0xeb
 8006db8:	21b5      	movs	r1, #181	; 0xb5
 8006dba:	20c8      	movs	r0, #200	; 0xc8
 8006dbc:	f006 fc84 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006dc0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006dc4:	f005 fc6c 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 194);
 8006dc8:	22c2      	movs	r2, #194	; 0xc2
 8006dca:	21d7      	movs	r1, #215	; 0xd7
 8006dcc:	2041      	movs	r0, #65	; 0x41
 8006dce:	f007 faa3 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(209, 211, 226, 211);
 8006dd2:	23d3      	movs	r3, #211	; 0xd3
 8006dd4:	22e2      	movs	r2, #226	; 0xe2
 8006dd6:	21d3      	movs	r1, #211	; 0xd3
 8006dd8:	20d1      	movs	r0, #209	; 0xd1
 8006dda:	f007 f9af 	bl	800e13c <GUI_DrawLine>
			break;
 8006dde:	e000      	b.n	8006de2 <enableNextZoneState+0x192>
			break;
 8006de0:	bf00      	nop
		break;
 8006de2:	e195      	b.n	8007110 <enableNextZoneState+0x4c0>
		switch (zoneState)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	2b05      	cmp	r3, #5
 8006dea:	f200 80b7 	bhi.w	8006f5c <enableNextZoneState+0x30c>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <enableNextZoneState+0x1a4>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e7d 	.word	0x08006e7d
 8006e00:	08006eb5 	.word	0x08006eb5
 8006e04:	08006eed 	.word	0x08006eed
 8006e08:	08006f25 	.word	0x08006f25
			GUI_SetColor(CUS_LIGHTBLUE);
 8006e0c:	487e      	ldr	r0, [pc, #504]	; (8007008 <enableNextZoneState+0x3b8>)
 8006e0e:	f005 fc47 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 225, 73, 267, 8);
 8006e12:	2308      	movs	r3, #8
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	f240 130b 	movw	r3, #267	; 0x10b
 8006e1a:	2249      	movs	r2, #73	; 0x49
 8006e1c:	21e1      	movs	r1, #225	; 0xe1
 8006e1e:	2023      	movs	r0, #35	; 0x23
 8006e20:	f006 fc52 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006e24:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006e28:	f005 fc3a 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 238);
 8006e2c:	22ee      	movs	r2, #238	; 0xee
 8006e2e:	2132      	movs	r1, #50	; 0x32
 8006e30:	2031      	movs	r0, #49	; 0x31
 8006e32:	f007 fa71 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(44, 255, 63, 255);
 8006e36:	23ff      	movs	r3, #255	; 0xff
 8006e38:	223f      	movs	r2, #63	; 0x3f
 8006e3a:	21ff      	movs	r1, #255	; 0xff
 8006e3c:	202c      	movs	r0, #44	; 0x2c
 8006e3e:	f007 f97d 	bl	800e13c <GUI_DrawLine>
			break;
 8006e42:	e08c      	b.n	8006f5e <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006e44:	4870      	ldr	r0, [pc, #448]	; (8007008 <enableNextZoneState+0x3b8>)
 8006e46:	f005 fc2b 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 225, 106, 267, 8);
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	f240 130b 	movw	r3, #267	; 0x10b
 8006e52:	226a      	movs	r2, #106	; 0x6a
 8006e54:	21e1      	movs	r1, #225	; 0xe1
 8006e56:	2043      	movs	r0, #67	; 0x43
 8006e58:	f006 fc36 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006e5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006e60:	f005 fc1e 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 238);
 8006e64:	22ee      	movs	r2, #238	; 0xee
 8006e66:	2153      	movs	r1, #83	; 0x53
 8006e68:	2032      	movs	r0, #50	; 0x32
 8006e6a:	f007 fa55 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(77, 255, 96, 255);
 8006e6e:	23ff      	movs	r3, #255	; 0xff
 8006e70:	2260      	movs	r2, #96	; 0x60
 8006e72:	21ff      	movs	r1, #255	; 0xff
 8006e74:	204d      	movs	r0, #77	; 0x4d
 8006e76:	f007 f961 	bl	800e13c <GUI_DrawLine>
			break;
 8006e7a:	e070      	b.n	8006f5e <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006e7c:	4862      	ldr	r0, [pc, #392]	; (8007008 <enableNextZoneState+0x3b8>)
 8006e7e:	f005 fc0f 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 225, 139, 267, 8);
 8006e82:	2308      	movs	r3, #8
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	f240 130b 	movw	r3, #267	; 0x10b
 8006e8a:	228b      	movs	r2, #139	; 0x8b
 8006e8c:	21e1      	movs	r1, #225	; 0xe1
 8006e8e:	2064      	movs	r0, #100	; 0x64
 8006e90:	f006 fc1a 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006e94:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006e98:	f005 fc02 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 238);
 8006e9c:	22ee      	movs	r2, #238	; 0xee
 8006e9e:	2174      	movs	r1, #116	; 0x74
 8006ea0:	2033      	movs	r0, #51	; 0x33
 8006ea2:	f007 fa39 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(110, 255, 127, 255);
 8006ea6:	23ff      	movs	r3, #255	; 0xff
 8006ea8:	227f      	movs	r2, #127	; 0x7f
 8006eaa:	21ff      	movs	r1, #255	; 0xff
 8006eac:	206e      	movs	r0, #110	; 0x6e
 8006eae:	f007 f945 	bl	800e13c <GUI_DrawLine>
			break;
 8006eb2:	e054      	b.n	8006f5e <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006eb4:	4854      	ldr	r0, [pc, #336]	; (8007008 <enableNextZoneState+0x3b8>)
 8006eb6:	f005 fbf3 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 225, 171, 267, 8);
 8006eba:	2308      	movs	r3, #8
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f240 130b 	movw	r3, #267	; 0x10b
 8006ec2:	22ab      	movs	r2, #171	; 0xab
 8006ec4:	21e1      	movs	r1, #225	; 0xe1
 8006ec6:	2084      	movs	r0, #132	; 0x84
 8006ec8:	f006 fbfe 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006ecc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006ed0:	f005 fbe6 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 238);
 8006ed4:	22ee      	movs	r2, #238	; 0xee
 8006ed6:	2195      	movs	r1, #149	; 0x95
 8006ed8:	2034      	movs	r0, #52	; 0x34
 8006eda:	f007 fa1d 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(143, 255, 160, 255);
 8006ede:	23ff      	movs	r3, #255	; 0xff
 8006ee0:	22a0      	movs	r2, #160	; 0xa0
 8006ee2:	21ff      	movs	r1, #255	; 0xff
 8006ee4:	208f      	movs	r0, #143	; 0x8f
 8006ee6:	f007 f929 	bl	800e13c <GUI_DrawLine>
			break;
 8006eea:	e038      	b.n	8006f5e <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006eec:	4846      	ldr	r0, [pc, #280]	; (8007008 <enableNextZoneState+0x3b8>)
 8006eee:	f005 fbd7 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 225, 204, 267, 8);
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	f240 130b 	movw	r3, #267	; 0x10b
 8006efa:	22cc      	movs	r2, #204	; 0xcc
 8006efc:	21e1      	movs	r1, #225	; 0xe1
 8006efe:	20a5      	movs	r0, #165	; 0xa5
 8006f00:	f006 fbe2 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006f04:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006f08:	f005 fbca 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 238);
 8006f0c:	22ee      	movs	r2, #238	; 0xee
 8006f0e:	21b6      	movs	r1, #182	; 0xb6
 8006f10:	2035      	movs	r0, #53	; 0x35
 8006f12:	f007 fa01 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(176, 255, 193, 255);
 8006f16:	23ff      	movs	r3, #255	; 0xff
 8006f18:	22c1      	movs	r2, #193	; 0xc1
 8006f1a:	21ff      	movs	r1, #255	; 0xff
 8006f1c:	20b0      	movs	r0, #176	; 0xb0
 8006f1e:	f007 f90d 	bl	800e13c <GUI_DrawLine>
			break;
 8006f22:	e01c      	b.n	8006f5e <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006f24:	4838      	ldr	r0, [pc, #224]	; (8007008 <enableNextZoneState+0x3b8>)
 8006f26:	f005 fbbb 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 225, 235, 267, 8);
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	f240 130b 	movw	r3, #267	; 0x10b
 8006f32:	22eb      	movs	r2, #235	; 0xeb
 8006f34:	21e1      	movs	r1, #225	; 0xe1
 8006f36:	20c8      	movs	r0, #200	; 0xc8
 8006f38:	f006 fbc6 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006f3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006f40:	f005 fbae 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 238);
 8006f44:	22ee      	movs	r2, #238	; 0xee
 8006f46:	21d7      	movs	r1, #215	; 0xd7
 8006f48:	2041      	movs	r0, #65	; 0x41
 8006f4a:	f007 f9e5 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(209, 255, 226, 255);
 8006f4e:	23ff      	movs	r3, #255	; 0xff
 8006f50:	22e2      	movs	r2, #226	; 0xe2
 8006f52:	21ff      	movs	r1, #255	; 0xff
 8006f54:	20d1      	movs	r0, #209	; 0xd1
 8006f56:	f007 f8f1 	bl	800e13c <GUI_DrawLine>
			break;
 8006f5a:	e000      	b.n	8006f5e <enableNextZoneState+0x30e>
			break;
 8006f5c:	bf00      	nop
		break;
 8006f5e:	e0d7      	b.n	8007110 <enableNextZoneState+0x4c0>
		switch (zoneState)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	f200 80d1 	bhi.w	800710c <enableNextZoneState+0x4bc>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <enableNextZoneState+0x320>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006fc9 	.word	0x08006fc9
 8006f78:	0800700d 	.word	0x0800700d
 8006f7c:	0800704d 	.word	0x0800704d
 8006f80:	0800708d 	.word	0x0800708d
 8006f84:	080070cd 	.word	0x080070cd
			GUI_SetColor(CUS_LIGHTBLUE);
 8006f88:	481f      	ldr	r0, [pc, #124]	; (8007008 <enableNextZoneState+0x3b8>)
 8006f8a:	f005 fb89 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 269, 73, 311, 8);
 8006f8e:	2308      	movs	r3, #8
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	f240 1337 	movw	r3, #311	; 0x137
 8006f96:	2249      	movs	r2, #73	; 0x49
 8006f98:	f240 110d 	movw	r1, #269	; 0x10d
 8006f9c:	2023      	movs	r0, #35	; 0x23
 8006f9e:	f006 fb93 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006fa2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006fa6:	f005 fb7b 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 282);
 8006faa:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006fae:	2132      	movs	r1, #50	; 0x32
 8006fb0:	2031      	movs	r0, #49	; 0x31
 8006fb2:	f007 f9b1 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(44, 299, 63, 299);
 8006fb6:	f240 132b 	movw	r3, #299	; 0x12b
 8006fba:	223f      	movs	r2, #63	; 0x3f
 8006fbc:	f240 112b 	movw	r1, #299	; 0x12b
 8006fc0:	202c      	movs	r0, #44	; 0x2c
 8006fc2:	f007 f8bb 	bl	800e13c <GUI_DrawLine>
			break;
 8006fc6:	e0a2      	b.n	800710e <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 8006fc8:	480f      	ldr	r0, [pc, #60]	; (8007008 <enableNextZoneState+0x3b8>)
 8006fca:	f005 fb69 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 269, 106, 311, 8);
 8006fce:	2308      	movs	r3, #8
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	f240 1337 	movw	r3, #311	; 0x137
 8006fd6:	226a      	movs	r2, #106	; 0x6a
 8006fd8:	f240 110d 	movw	r1, #269	; 0x10d
 8006fdc:	2043      	movs	r0, #67	; 0x43
 8006fde:	f006 fb73 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8006fe2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006fe6:	f005 fb5b 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 282);
 8006fea:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006fee:	2153      	movs	r1, #83	; 0x53
 8006ff0:	2032      	movs	r0, #50	; 0x32
 8006ff2:	f007 f991 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(77, 299, 96, 299);
 8006ff6:	f240 132b 	movw	r3, #299	; 0x12b
 8006ffa:	2260      	movs	r2, #96	; 0x60
 8006ffc:	f240 112b 	movw	r1, #299	; 0x12b
 8007000:	204d      	movs	r0, #77	; 0x4d
 8007002:	f007 f89b 	bl	800e13c <GUI_DrawLine>
			break;
 8007006:	e082      	b.n	800710e <enableNextZoneState+0x4be>
 8007008:	00ffd218 	.word	0x00ffd218
			GUI_SetColor(CUS_LIGHTBLUE);
 800700c:	4842      	ldr	r0, [pc, #264]	; (8007118 <enableNextZoneState+0x4c8>)
 800700e:	f005 fb47 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 269, 139, 311, 8);
 8007012:	2308      	movs	r3, #8
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	f240 1337 	movw	r3, #311	; 0x137
 800701a:	228b      	movs	r2, #139	; 0x8b
 800701c:	f240 110d 	movw	r1, #269	; 0x10d
 8007020:	2064      	movs	r0, #100	; 0x64
 8007022:	f006 fb51 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007026:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800702a:	f005 fb39 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 282);
 800702e:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007032:	2174      	movs	r1, #116	; 0x74
 8007034:	2033      	movs	r0, #51	; 0x33
 8007036:	f007 f96f 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(110, 299, 127, 299);
 800703a:	f240 132b 	movw	r3, #299	; 0x12b
 800703e:	227f      	movs	r2, #127	; 0x7f
 8007040:	f240 112b 	movw	r1, #299	; 0x12b
 8007044:	206e      	movs	r0, #110	; 0x6e
 8007046:	f007 f879 	bl	800e13c <GUI_DrawLine>
			break;
 800704a:	e060      	b.n	800710e <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 800704c:	4832      	ldr	r0, [pc, #200]	; (8007118 <enableNextZoneState+0x4c8>)
 800704e:	f005 fb27 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 269, 171, 311, 8);
 8007052:	2308      	movs	r3, #8
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	f240 1337 	movw	r3, #311	; 0x137
 800705a:	22ab      	movs	r2, #171	; 0xab
 800705c:	f240 110d 	movw	r1, #269	; 0x10d
 8007060:	2084      	movs	r0, #132	; 0x84
 8007062:	f006 fb31 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007066:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800706a:	f005 fb19 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 282);
 800706e:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007072:	2195      	movs	r1, #149	; 0x95
 8007074:	2034      	movs	r0, #52	; 0x34
 8007076:	f007 f94f 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(143, 299, 160, 299);
 800707a:	f240 132b 	movw	r3, #299	; 0x12b
 800707e:	22a0      	movs	r2, #160	; 0xa0
 8007080:	f240 112b 	movw	r1, #299	; 0x12b
 8007084:	208f      	movs	r0, #143	; 0x8f
 8007086:	f007 f859 	bl	800e13c <GUI_DrawLine>
			break;
 800708a:	e040      	b.n	800710e <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 800708c:	4822      	ldr	r0, [pc, #136]	; (8007118 <enableNextZoneState+0x4c8>)
 800708e:	f005 fb07 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 269, 204, 311, 8);
 8007092:	2308      	movs	r3, #8
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	f240 1337 	movw	r3, #311	; 0x137
 800709a:	22cc      	movs	r2, #204	; 0xcc
 800709c:	f240 110d 	movw	r1, #269	; 0x10d
 80070a0:	20a5      	movs	r0, #165	; 0xa5
 80070a2:	f006 fb11 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80070a6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80070aa:	f005 faf9 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 282);
 80070ae:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80070b2:	21b6      	movs	r1, #182	; 0xb6
 80070b4:	2035      	movs	r0, #53	; 0x35
 80070b6:	f007 f92f 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(176, 299, 193, 299);
 80070ba:	f240 132b 	movw	r3, #299	; 0x12b
 80070be:	22c1      	movs	r2, #193	; 0xc1
 80070c0:	f240 112b 	movw	r1, #299	; 0x12b
 80070c4:	20b0      	movs	r0, #176	; 0xb0
 80070c6:	f007 f839 	bl	800e13c <GUI_DrawLine>
			break;
 80070ca:	e020      	b.n	800710e <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 80070cc:	4812      	ldr	r0, [pc, #72]	; (8007118 <enableNextZoneState+0x4c8>)
 80070ce:	f005 fae7 	bl	800c6a0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 269, 235, 311, 8);
 80070d2:	2308      	movs	r3, #8
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	f240 1337 	movw	r3, #311	; 0x137
 80070da:	22eb      	movs	r2, #235	; 0xeb
 80070dc:	f240 110d 	movw	r1, #269	; 0x10d
 80070e0:	20c8      	movs	r0, #200	; 0xc8
 80070e2:	f006 faf1 	bl	800d6c8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80070e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80070ea:	f005 fad9 	bl	800c6a0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 282);
 80070ee:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80070f2:	21d7      	movs	r1, #215	; 0xd7
 80070f4:	2041      	movs	r0, #65	; 0x41
 80070f6:	f007 f90f 	bl	800e318 <GUI_DispCharAt>
			GUI_DrawLine(209, 299, 226, 299);
 80070fa:	f240 132b 	movw	r3, #299	; 0x12b
 80070fe:	22e2      	movs	r2, #226	; 0xe2
 8007100:	f240 112b 	movw	r1, #299	; 0x12b
 8007104:	20d1      	movs	r0, #209	; 0xd1
 8007106:	f007 f819 	bl	800e13c <GUI_DrawLine>
			break;
 800710a:	e000      	b.n	800710e <enableNextZoneState+0x4be>
			break;
 800710c:	bf00      	nop
		break;
 800710e:	bf00      	nop
	}
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	00ffd218 	.word	0x00ffd218

0800711c <enableNextZoneMode>:

static void enableNextZoneMode(ui_zone_state_t zoneState, uint8_t numOfZone)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	460a      	mov	r2, r1
 8007126:	71fb      	strb	r3, [r7, #7]
 8007128:	4613      	mov	r3, r2
 800712a:	71bb      	strb	r3, [r7, #6]
	switch (numOfZone)
 800712c:	79bb      	ldrb	r3, [r7, #6]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d056      	beq.n	80071e0 <enableNextZoneMode+0xc4>
 8007132:	2b02      	cmp	r3, #2
 8007134:	f000 80a6 	beq.w	8007284 <enableNextZoneMode+0x168>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d000      	beq.n	800713e <enableNextZoneMode+0x22>
		default:
			break;
		}
		break;
	default:
		break;
 800713c:	e100      	b.n	8007340 <enableNextZoneMode+0x224>
		switch (zoneState)
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	3b01      	subs	r3, #1
 8007142:	2b05      	cmp	r3, #5
 8007144:	d84a      	bhi.n	80071dc <enableNextZoneMode+0xc0>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <enableNextZoneMode+0x30>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007165 	.word	0x08007165
 8007150:	08007179 	.word	0x08007179
 8007154:	0800718d 	.word	0x0800718d
 8007158:	080071a1 	.word	0x080071a1
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071c9 	.word	0x080071c9
			GUI_SetColor(CUS_LIGHTBLUE);
 8007164:	4878      	ldr	r0, [pc, #480]	; (8007348 <enableNextZoneMode+0x22c>)
 8007166:	f005 fa9b 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(44, 211, 63, 211);
 800716a:	23d3      	movs	r3, #211	; 0xd3
 800716c:	223f      	movs	r2, #63	; 0x3f
 800716e:	21d3      	movs	r1, #211	; 0xd3
 8007170:	202c      	movs	r0, #44	; 0x2c
 8007172:	f006 ffe3 	bl	800e13c <GUI_DrawLine>
			break;
 8007176:	e032      	b.n	80071de <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 8007178:	4873      	ldr	r0, [pc, #460]	; (8007348 <enableNextZoneMode+0x22c>)
 800717a:	f005 fa91 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(77, 211, 96, 211);
 800717e:	23d3      	movs	r3, #211	; 0xd3
 8007180:	2260      	movs	r2, #96	; 0x60
 8007182:	21d3      	movs	r1, #211	; 0xd3
 8007184:	204d      	movs	r0, #77	; 0x4d
 8007186:	f006 ffd9 	bl	800e13c <GUI_DrawLine>
			break;
 800718a:	e028      	b.n	80071de <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 800718c:	486e      	ldr	r0, [pc, #440]	; (8007348 <enableNextZoneMode+0x22c>)
 800718e:	f005 fa87 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(110, 211, 127, 211);
 8007192:	23d3      	movs	r3, #211	; 0xd3
 8007194:	227f      	movs	r2, #127	; 0x7f
 8007196:	21d3      	movs	r1, #211	; 0xd3
 8007198:	206e      	movs	r0, #110	; 0x6e
 800719a:	f006 ffcf 	bl	800e13c <GUI_DrawLine>
			break;
 800719e:	e01e      	b.n	80071de <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80071a0:	4869      	ldr	r0, [pc, #420]	; (8007348 <enableNextZoneMode+0x22c>)
 80071a2:	f005 fa7d 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(143, 211, 160, 211);
 80071a6:	23d3      	movs	r3, #211	; 0xd3
 80071a8:	22a0      	movs	r2, #160	; 0xa0
 80071aa:	21d3      	movs	r1, #211	; 0xd3
 80071ac:	208f      	movs	r0, #143	; 0x8f
 80071ae:	f006 ffc5 	bl	800e13c <GUI_DrawLine>
			break;
 80071b2:	e014      	b.n	80071de <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80071b4:	4864      	ldr	r0, [pc, #400]	; (8007348 <enableNextZoneMode+0x22c>)
 80071b6:	f005 fa73 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(176, 211, 193, 211);
 80071ba:	23d3      	movs	r3, #211	; 0xd3
 80071bc:	22c1      	movs	r2, #193	; 0xc1
 80071be:	21d3      	movs	r1, #211	; 0xd3
 80071c0:	20b0      	movs	r0, #176	; 0xb0
 80071c2:	f006 ffbb 	bl	800e13c <GUI_DrawLine>
			break;
 80071c6:	e00a      	b.n	80071de <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80071c8:	485f      	ldr	r0, [pc, #380]	; (8007348 <enableNextZoneMode+0x22c>)
 80071ca:	f005 fa69 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(209, 211, 226, 211);
 80071ce:	23d3      	movs	r3, #211	; 0xd3
 80071d0:	22e2      	movs	r2, #226	; 0xe2
 80071d2:	21d3      	movs	r1, #211	; 0xd3
 80071d4:	20d1      	movs	r0, #209	; 0xd1
 80071d6:	f006 ffb1 	bl	800e13c <GUI_DrawLine>
			break;
 80071da:	e000      	b.n	80071de <enableNextZoneMode+0xc2>
			break;
 80071dc:	bf00      	nop
		break;
 80071de:	e0af      	b.n	8007340 <enableNextZoneMode+0x224>
		switch (zoneState)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b05      	cmp	r3, #5
 80071e6:	d84b      	bhi.n	8007280 <enableNextZoneMode+0x164>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <enableNextZoneMode+0xd4>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007209 	.word	0x08007209
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	08007231 	.word	0x08007231
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007259 	.word	0x08007259
 8007204:	0800726d 	.word	0x0800726d
			GUI_SetColor(CUS_LIGHTBLUE);
 8007208:	484f      	ldr	r0, [pc, #316]	; (8007348 <enableNextZoneMode+0x22c>)
 800720a:	f005 fa49 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(44, 255, 63, 255);
 800720e:	23ff      	movs	r3, #255	; 0xff
 8007210:	223f      	movs	r2, #63	; 0x3f
 8007212:	21ff      	movs	r1, #255	; 0xff
 8007214:	202c      	movs	r0, #44	; 0x2c
 8007216:	f006 ff91 	bl	800e13c <GUI_DrawLine>
			break;
 800721a:	e032      	b.n	8007282 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 800721c:	484a      	ldr	r0, [pc, #296]	; (8007348 <enableNextZoneMode+0x22c>)
 800721e:	f005 fa3f 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(77, 255, 96, 255);
 8007222:	23ff      	movs	r3, #255	; 0xff
 8007224:	2260      	movs	r2, #96	; 0x60
 8007226:	21ff      	movs	r1, #255	; 0xff
 8007228:	204d      	movs	r0, #77	; 0x4d
 800722a:	f006 ff87 	bl	800e13c <GUI_DrawLine>
			break;
 800722e:	e028      	b.n	8007282 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 8007230:	4845      	ldr	r0, [pc, #276]	; (8007348 <enableNextZoneMode+0x22c>)
 8007232:	f005 fa35 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(110, 255, 127, 255);
 8007236:	23ff      	movs	r3, #255	; 0xff
 8007238:	227f      	movs	r2, #127	; 0x7f
 800723a:	21ff      	movs	r1, #255	; 0xff
 800723c:	206e      	movs	r0, #110	; 0x6e
 800723e:	f006 ff7d 	bl	800e13c <GUI_DrawLine>
			break;
 8007242:	e01e      	b.n	8007282 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 8007244:	4840      	ldr	r0, [pc, #256]	; (8007348 <enableNextZoneMode+0x22c>)
 8007246:	f005 fa2b 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(143, 255, 160, 255);
 800724a:	23ff      	movs	r3, #255	; 0xff
 800724c:	22a0      	movs	r2, #160	; 0xa0
 800724e:	21ff      	movs	r1, #255	; 0xff
 8007250:	208f      	movs	r0, #143	; 0x8f
 8007252:	f006 ff73 	bl	800e13c <GUI_DrawLine>
			break;
 8007256:	e014      	b.n	8007282 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 8007258:	483b      	ldr	r0, [pc, #236]	; (8007348 <enableNextZoneMode+0x22c>)
 800725a:	f005 fa21 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(176, 255, 193, 255);
 800725e:	23ff      	movs	r3, #255	; 0xff
 8007260:	22c1      	movs	r2, #193	; 0xc1
 8007262:	21ff      	movs	r1, #255	; 0xff
 8007264:	20b0      	movs	r0, #176	; 0xb0
 8007266:	f006 ff69 	bl	800e13c <GUI_DrawLine>
			break;
 800726a:	e00a      	b.n	8007282 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 800726c:	4836      	ldr	r0, [pc, #216]	; (8007348 <enableNextZoneMode+0x22c>)
 800726e:	f005 fa17 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(209, 255, 226, 255);
 8007272:	23ff      	movs	r3, #255	; 0xff
 8007274:	22e2      	movs	r2, #226	; 0xe2
 8007276:	21ff      	movs	r1, #255	; 0xff
 8007278:	20d1      	movs	r0, #209	; 0xd1
 800727a:	f006 ff5f 	bl	800e13c <GUI_DrawLine>
			break;
 800727e:	e000      	b.n	8007282 <enableNextZoneMode+0x166>
			break;
 8007280:	bf00      	nop
		break;
 8007282:	e05d      	b.n	8007340 <enableNextZoneMode+0x224>
		switch (zoneState)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	3b01      	subs	r3, #1
 8007288:	2b05      	cmp	r3, #5
 800728a:	d857      	bhi.n	800733c <enableNextZoneMode+0x220>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <enableNextZoneMode+0x178>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072ad 	.word	0x080072ad
 8007298:	080072c5 	.word	0x080072c5
 800729c:	080072dd 	.word	0x080072dd
 80072a0:	080072f5 	.word	0x080072f5
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	08007325 	.word	0x08007325
			GUI_SetColor(CUS_LIGHTBLUE);
 80072ac:	4826      	ldr	r0, [pc, #152]	; (8007348 <enableNextZoneMode+0x22c>)
 80072ae:	f005 f9f7 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(44, 299, 63, 299);
 80072b2:	f240 132b 	movw	r3, #299	; 0x12b
 80072b6:	223f      	movs	r2, #63	; 0x3f
 80072b8:	f240 112b 	movw	r1, #299	; 0x12b
 80072bc:	202c      	movs	r0, #44	; 0x2c
 80072be:	f006 ff3d 	bl	800e13c <GUI_DrawLine>
			break;
 80072c2:	e03c      	b.n	800733e <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 80072c4:	4820      	ldr	r0, [pc, #128]	; (8007348 <enableNextZoneMode+0x22c>)
 80072c6:	f005 f9eb 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(77, 299, 96, 299);
 80072ca:	f240 132b 	movw	r3, #299	; 0x12b
 80072ce:	2260      	movs	r2, #96	; 0x60
 80072d0:	f240 112b 	movw	r1, #299	; 0x12b
 80072d4:	204d      	movs	r0, #77	; 0x4d
 80072d6:	f006 ff31 	bl	800e13c <GUI_DrawLine>
			break;
 80072da:	e030      	b.n	800733e <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 80072dc:	481a      	ldr	r0, [pc, #104]	; (8007348 <enableNextZoneMode+0x22c>)
 80072de:	f005 f9df 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(110, 299, 127, 299);
 80072e2:	f240 132b 	movw	r3, #299	; 0x12b
 80072e6:	227f      	movs	r2, #127	; 0x7f
 80072e8:	f240 112b 	movw	r1, #299	; 0x12b
 80072ec:	206e      	movs	r0, #110	; 0x6e
 80072ee:	f006 ff25 	bl	800e13c <GUI_DrawLine>
			break;
 80072f2:	e024      	b.n	800733e <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 80072f4:	4814      	ldr	r0, [pc, #80]	; (8007348 <enableNextZoneMode+0x22c>)
 80072f6:	f005 f9d3 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(143, 299, 160, 299);
 80072fa:	f240 132b 	movw	r3, #299	; 0x12b
 80072fe:	22a0      	movs	r2, #160	; 0xa0
 8007300:	f240 112b 	movw	r1, #299	; 0x12b
 8007304:	208f      	movs	r0, #143	; 0x8f
 8007306:	f006 ff19 	bl	800e13c <GUI_DrawLine>
			break;
 800730a:	e018      	b.n	800733e <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 800730c:	480e      	ldr	r0, [pc, #56]	; (8007348 <enableNextZoneMode+0x22c>)
 800730e:	f005 f9c7 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(176, 299, 193, 299);
 8007312:	f240 132b 	movw	r3, #299	; 0x12b
 8007316:	22c1      	movs	r2, #193	; 0xc1
 8007318:	f240 112b 	movw	r1, #299	; 0x12b
 800731c:	20b0      	movs	r0, #176	; 0xb0
 800731e:	f006 ff0d 	bl	800e13c <GUI_DrawLine>
			break;
 8007322:	e00c      	b.n	800733e <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 8007324:	4808      	ldr	r0, [pc, #32]	; (8007348 <enableNextZoneMode+0x22c>)
 8007326:	f005 f9bb 	bl	800c6a0 <GUI_SetColor>
			GUI_DrawLine(209, 299, 226, 299);
 800732a:	f240 132b 	movw	r3, #299	; 0x12b
 800732e:	22e2      	movs	r2, #226	; 0xe2
 8007330:	f240 112b 	movw	r1, #299	; 0x12b
 8007334:	20d1      	movs	r0, #209	; 0xd1
 8007336:	f006 ff01 	bl	800e13c <GUI_DrawLine>
			break;
 800733a:	e000      	b.n	800733e <enableNextZoneMode+0x222>
			break;
 800733c:	bf00      	nop
		break;
 800733e:	bf00      	nop
	}
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	00ffd218 	.word	0x00ffd218

0800734c <setZoneMode>:

static void setZoneMode(ui_mode_t mode)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	71fb      	strb	r3, [r7, #7]
	ui_state_t state;
	switch (mode)
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	3b01      	subs	r3, #1
 800735a:	2b03      	cmp	r3, #3
 800735c:	d862      	bhi.n	8007424 <setZoneMode+0xd8>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <setZoneMode+0x18>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007375 	.word	0x08007375
 8007368:	0800739f 	.word	0x0800739f
 800736c:	080073c9 	.word	0x080073c9
 8007370:	080073f3 	.word	0x080073f3
	{
	case ALL_DIM:
		enableNextZoneMode(L_FIVE, ZONE_TOP);
 8007374:	2100      	movs	r1, #0
 8007376:	2005      	movs	r0, #5
 8007378:	f7ff fed0 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_FIVE, ZONE_MID);
 800737c:	2101      	movs	r1, #1
 800737e:	2005      	movs	r0, #5
 8007380:	f7ff fecc 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_FIVE, ZONE_BOT);
 8007384:	2102      	movs	r1, #2
 8007386:	2005      	movs	r0, #5
 8007388:	f7ff fec8 	bl	800711c <enableNextZoneMode>
		state.mode = ALL_DIM;
 800738c:	2301      	movs	r3, #1
 800738e:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_FIVE;
 8007390:	2305      	movs	r3, #5
 8007392:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_FIVE;
 8007394:	2305      	movs	r3, #5
 8007396:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_FIVE;
 8007398:	2305      	movs	r3, #5
 800739a:	73fb      	strb	r3, [r7, #15]
		break;
 800739c:	e03e      	b.n	800741c <setZoneMode+0xd0>
	case ALL_CLEAR:
		enableNextZoneMode(L_ONE, ZONE_TOP);
 800739e:	2100      	movs	r1, #0
 80073a0:	2001      	movs	r0, #1
 80073a2:	f7ff febb 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_ONE, ZONE_MID);
 80073a6:	2101      	movs	r1, #1
 80073a8:	2001      	movs	r0, #1
 80073aa:	f7ff feb7 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_ONE, ZONE_BOT);
 80073ae:	2102      	movs	r1, #2
 80073b0:	2001      	movs	r0, #1
 80073b2:	f7ff feb3 	bl	800711c <enableNextZoneMode>
		state.mode = ALL_CLEAR;
 80073b6:	2302      	movs	r3, #2
 80073b8:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_ONE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_ONE;
 80073be:	2301      	movs	r3, #1
 80073c0:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_ONE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	73fb      	strb	r3, [r7, #15]
		break;
 80073c6:	e029      	b.n	800741c <setZoneMode+0xd0>
	case PRESENTATION:
		enableNextZoneMode(L_THREE, ZONE_TOP);
 80073c8:	2100      	movs	r1, #0
 80073ca:	2003      	movs	r0, #3
 80073cc:	f7ff fea6 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_TWO, ZONE_MID);
 80073d0:	2101      	movs	r1, #1
 80073d2:	2002      	movs	r0, #2
 80073d4:	f7ff fea2 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_FIVE, ZONE_BOT);
 80073d8:	2102      	movs	r1, #2
 80073da:	2005      	movs	r0, #5
 80073dc:	f7ff fe9e 	bl	800711c <enableNextZoneMode>
		state.mode = PRESENTATION;
 80073e0:	2303      	movs	r3, #3
 80073e2:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_THREE;
 80073e4:	2303      	movs	r3, #3
 80073e6:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_TWO;
 80073e8:	2302      	movs	r3, #2
 80073ea:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_FIVE;
 80073ec:	2305      	movs	r3, #5
 80073ee:	73fb      	strb	r3, [r7, #15]
		break;
 80073f0:	e014      	b.n	800741c <setZoneMode+0xd0>
	case ALL_AUTO:
		enableNextZoneMode(L_AUTO, ZONE_TOP);
 80073f2:	2100      	movs	r1, #0
 80073f4:	2006      	movs	r0, #6
 80073f6:	f7ff fe91 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_AUTO, ZONE_MID);
 80073fa:	2101      	movs	r1, #1
 80073fc:	2006      	movs	r0, #6
 80073fe:	f7ff fe8d 	bl	800711c <enableNextZoneMode>
		enableNextZoneMode(L_AUTO, ZONE_BOT);
 8007402:	2102      	movs	r1, #2
 8007404:	2006      	movs	r0, #6
 8007406:	f7ff fe89 	bl	800711c <enableNextZoneMode>
		state.mode = ALL_AUTO;
 800740a:	2304      	movs	r3, #4
 800740c:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_AUTO;
 800740e:	2306      	movs	r3, #6
 8007410:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_AUTO;
 8007412:	2306      	movs	r3, #6
 8007414:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_AUTO;
 8007416:	2306      	movs	r3, #6
 8007418:	73fb      	strb	r3, [r7, #15]
		break;
 800741a:	bf00      	nop
	default:
		return;
	}
	UI_SetState(state);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7fe fdb7 	bl	8005f90 <UI_SetState>
 8007422:	e000      	b.n	8007426 <setZoneMode+0xda>
		return;
 8007424:	bf00      	nop
}
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <UI_ChangeMode>:

void UI_ChangeMode(ui_mode_t mode)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	71fb      	strb	r3, [r7, #7]
	ui_state_t prevState;
	UI_GetState(&prevState);
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fdc0 	bl	8005fc0 <UI_GetState>
	if (prevState.mode)
 8007440:	7b3b      	ldrb	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01b      	beq.n	800747e <UI_ChangeMode+0x52>
	{
		disablePrevZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 8007446:	7b7b      	ldrb	r3, [r7, #13]
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff f962 	bl	8006714 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_MID], ZONE_MID);
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2101      	movs	r1, #1
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff f95d 	bl	8006714 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2102      	movs	r1, #2
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff f958 	bl	8006714 <disablePrevZoneState>
		disablePrevMode(prevState.mode);
 8007464:	7b3b      	ldrb	r3, [r7, #12]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe ffde 	bl	8006428 <disablePrevMode>
		enableNextMode(mode);
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff f894 	bl	800659c <enableNextMode>
		setZoneMode(mode);
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff ff68 	bl	800734c <setZoneMode>
		disablePrevZoneState(prevState.state[ZONE_MID], ZONE_MID);
		disablePrevZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
		enableNextMode(mode);
		setZoneMode(mode);
	}
}
 800747c:	e016      	b.n	80074ac <UI_ChangeMode+0x80>
		disablePrevZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 800747e:	7b7b      	ldrb	r3, [r7, #13]
 8007480:	2100      	movs	r1, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff f946 	bl	8006714 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_MID], ZONE_MID);
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2101      	movs	r1, #1
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff f941 	bl	8006714 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2102      	movs	r1, #2
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff f93c 	bl	8006714 <disablePrevZoneState>
		enableNextMode(mode);
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff f87c 	bl	800659c <enableNextMode>
		setZoneMode(mode);
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff ff50 	bl	800734c <setZoneMode>
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <UI_ChangeZoneState>:

void UI_ChangeZoneState(ui_zone_state_t state, uint8_t numOfZone)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	460a      	mov	r2, r1
 80074be:	71fb      	strb	r3, [r7, #7]
 80074c0:	4613      	mov	r3, r2
 80074c2:	71bb      	strb	r3, [r7, #6]
	ui_state_t prevState, nextState;
	UI_GetState(&prevState);
 80074c4:	f107 030c 	add.w	r3, r7, #12
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fe fd79 	bl	8005fc0 <UI_GetState>
	nextState = prevState;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	60bb      	str	r3, [r7, #8]

	if (prevState.mode)
 80074d2:	7b3b      	ldrb	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d044      	beq.n	8007562 <UI_ChangeZoneState+0xae>
	{
		disablePrevMode(prevState.mode);
 80074d8:	7b3b      	ldrb	r3, [r7, #12]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe ffa4 	bl	8006428 <disablePrevMode>
		disablePrevZoneState(prevState.state[numOfZone], numOfZone);
 80074e0:	79bb      	ldrb	r3, [r7, #6]
 80074e2:	f107 0210 	add.w	r2, r7, #16
 80074e6:	4413      	add	r3, r2
 80074e8:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 80074ec:	79ba      	ldrb	r2, [r7, #6]
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff f90f 	bl	8006714 <disablePrevZoneState>
		if (numOfZone == ZONE_TOP)
 80074f6:	79bb      	ldrb	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10e      	bne.n	800751a <UI_ChangeZoneState+0x66>
		{
			enableNextZoneState(prevState.state[ZONE_MID], ZONE_MID);
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2101      	movs	r1, #1
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fba5 	bl	8006c50 <enableNextZoneState>
			enableNextZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2102      	movs	r1, #2
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fba0 	bl	8006c50 <enableNextZoneState>
			nextState.state[ZONE_MID] = prevState.state[ZONE_MID];
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	72bb      	strb	r3, [r7, #10]
			nextState.state[ZONE_BOT] = prevState.state[ZONE_BOT];
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	72fb      	strb	r3, [r7, #11]
 8007518:	e02e      	b.n	8007578 <UI_ChangeZoneState+0xc4>
		}
		else if (numOfZone == ZONE_MID)
 800751a:	79bb      	ldrb	r3, [r7, #6]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10e      	bne.n	800753e <UI_ChangeZoneState+0x8a>
		{
			enableNextZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 8007520:	7b7b      	ldrb	r3, [r7, #13]
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fb93 	bl	8006c50 <enableNextZoneState>
			enableNextZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2102      	movs	r1, #2
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff fb8e 	bl	8006c50 <enableNextZoneState>
			nextState.state[ZONE_TOP] = prevState.state[ZONE_TOP];
 8007534:	7b7b      	ldrb	r3, [r7, #13]
 8007536:	727b      	strb	r3, [r7, #9]
			nextState.state[ZONE_BOT] = prevState.state[ZONE_BOT];
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	72fb      	strb	r3, [r7, #11]
 800753c:	e01c      	b.n	8007578 <UI_ChangeZoneState+0xc4>
		}
		else if (numOfZone == ZONE_BOT)
 800753e:	79bb      	ldrb	r3, [r7, #6]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d119      	bne.n	8007578 <UI_ChangeZoneState+0xc4>
		{
			enableNextZoneState(prevState.state[ZONE_MID], ZONE_MID);
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2101      	movs	r1, #1
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fb81 	bl	8006c50 <enableNextZoneState>
			enableNextZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 800754e:	7b7b      	ldrb	r3, [r7, #13]
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff fb7c 	bl	8006c50 <enableNextZoneState>
			nextState.state[ZONE_MID] = prevState.state[ZONE_MID];
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	72bb      	strb	r3, [r7, #10]
			nextState.state[ZONE_TOP] = prevState.state[ZONE_TOP];
 800755c:	7b7b      	ldrb	r3, [r7, #13]
 800755e:	727b      	strb	r3, [r7, #9]
 8007560:	e00a      	b.n	8007578 <UI_ChangeZoneState+0xc4>
		}
	}
	else
	{
		disablePrevZoneState(prevState.state[numOfZone], numOfZone);
 8007562:	79bb      	ldrb	r3, [r7, #6]
 8007564:	f107 0210 	add.w	r2, r7, #16
 8007568:	4413      	add	r3, r2
 800756a:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 800756e:	79ba      	ldrb	r2, [r7, #6]
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f8ce 	bl	8006714 <disablePrevZoneState>
	}
	enableNextZoneState(state, numOfZone);
 8007578:	79ba      	ldrb	r2, [r7, #6]
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fb66 	bl	8006c50 <enableNextZoneState>
	nextState.state[numOfZone] = state;
 8007584:	79bb      	ldrb	r3, [r7, #6]
 8007586:	f107 0210 	add.w	r2, r7, #16
 800758a:	4413      	add	r3, r2
 800758c:	79fa      	ldrb	r2, [r7, #7]
 800758e:	f803 2c07 	strb.w	r2, [r3, #-7]
	UI_SetState(nextState);
 8007592:	68b8      	ldr	r0, [r7, #8]
 8007594:	f7fe fcfc 	bl	8005f90 <UI_SetState>
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <graphicsMain>:

void graphicsMain(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
	tp_state_t tpState;
	ui_state_t uiState;
	UI_SetDefault();
 80075a6:	f7fe fcdd 	bl	8005f64 <UI_SetDefault>
	UI_GetState(&uiState);
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd06 	bl	8005fc0 <UI_GetState>
	drawAllNotActive();
 80075b4:	f7fe fd20 	bl	8005ff8 <drawAllNotActive>

	UI_ChangeMode(uiState.mode);
 80075b8:	7d3b      	ldrb	r3, [r7, #20]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff ff36 	bl	800742c <UI_ChangeMode>
	UI_ChangeZoneState(uiState.state[ZONE_TOP], ZONE_TOP);
 80075c0:	7d7b      	ldrb	r3, [r7, #21]
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff ff75 	bl	80074b4 <UI_ChangeZoneState>
	UI_ChangeZoneState(uiState.state[ZONE_MID], ZONE_MID);
 80075ca:	7dbb      	ldrb	r3, [r7, #22]
 80075cc:	2101      	movs	r1, #1
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff ff70 	bl	80074b4 <UI_ChangeZoneState>
	UI_ChangeZoneState(uiState.state[ZONE_BOT], ZONE_BOT);
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	2102      	movs	r1, #2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff ff6b 	bl	80074b4 <UI_ChangeZoneState>
	char str[20];

	while (1)
	{

		TP_GetState(&tpState);
 80075de:	f107 0318 	add.w	r3, r7, #24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 fd6a 	bl	80090bc <TP_GetState>
		if (tpState.touchDetected)
 80075e8:	7e3b      	ldrb	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0f7      	beq.n	80075de <graphicsMain+0x3e>
		{
			if (tpState.x > 5 && tpState.x < 235 && tpState.y > 5 && tpState.y < 40)
 80075ee:	8b7b      	ldrh	r3, [r7, #26]
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	d90c      	bls.n	800760e <graphicsMain+0x6e>
 80075f4:	8b7b      	ldrh	r3, [r7, #26]
 80075f6:	2bea      	cmp	r3, #234	; 0xea
 80075f8:	d809      	bhi.n	800760e <graphicsMain+0x6e>
 80075fa:	8bbb      	ldrh	r3, [r7, #28]
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d906      	bls.n	800760e <graphicsMain+0x6e>
 8007600:	8bbb      	ldrh	r3, [r7, #28]
 8007602:	2b27      	cmp	r3, #39	; 0x27
 8007604:	d803      	bhi.n	800760e <graphicsMain+0x6e>
			{
				UI_ChangeMode(ALL_DIM);
 8007606:	2001      	movs	r0, #1
 8007608:	f7ff ff10 	bl	800742c <UI_ChangeMode>
 800760c:	e172      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 5 && tpState.x < 235 && tpState.y > 49 && tpState.y < 91)
 800760e:	8b7b      	ldrh	r3, [r7, #26]
 8007610:	2b05      	cmp	r3, #5
 8007612:	d90c      	bls.n	800762e <graphicsMain+0x8e>
 8007614:	8b7b      	ldrh	r3, [r7, #26]
 8007616:	2bea      	cmp	r3, #234	; 0xea
 8007618:	d809      	bhi.n	800762e <graphicsMain+0x8e>
 800761a:	8bbb      	ldrh	r3, [r7, #28]
 800761c:	2b31      	cmp	r3, #49	; 0x31
 800761e:	d906      	bls.n	800762e <graphicsMain+0x8e>
 8007620:	8bbb      	ldrh	r3, [r7, #28]
 8007622:	2b5a      	cmp	r3, #90	; 0x5a
 8007624:	d803      	bhi.n	800762e <graphicsMain+0x8e>
			{
				UI_ChangeMode(ALL_CLEAR);
 8007626:	2002      	movs	r0, #2
 8007628:	f7ff ff00 	bl	800742c <UI_ChangeMode>
 800762c:	e162      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 5 && tpState.x < 235 && tpState.y > 93 && tpState.y < 135)
 800762e:	8b7b      	ldrh	r3, [r7, #26]
 8007630:	2b05      	cmp	r3, #5
 8007632:	d90c      	bls.n	800764e <graphicsMain+0xae>
 8007634:	8b7b      	ldrh	r3, [r7, #26]
 8007636:	2bea      	cmp	r3, #234	; 0xea
 8007638:	d809      	bhi.n	800764e <graphicsMain+0xae>
 800763a:	8bbb      	ldrh	r3, [r7, #28]
 800763c:	2b5d      	cmp	r3, #93	; 0x5d
 800763e:	d906      	bls.n	800764e <graphicsMain+0xae>
 8007640:	8bbb      	ldrh	r3, [r7, #28]
 8007642:	2b86      	cmp	r3, #134	; 0x86
 8007644:	d803      	bhi.n	800764e <graphicsMain+0xae>
			{
				UI_ChangeMode(PRESENTATION);
 8007646:	2003      	movs	r0, #3
 8007648:	f7ff fef0 	bl	800742c <UI_ChangeMode>
 800764c:	e152      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 5 && tpState.x < 235 && tpState.y > 137 && tpState.y < 179)
 800764e:	8b7b      	ldrh	r3, [r7, #26]
 8007650:	2b05      	cmp	r3, #5
 8007652:	d90c      	bls.n	800766e <graphicsMain+0xce>
 8007654:	8b7b      	ldrh	r3, [r7, #26]
 8007656:	2bea      	cmp	r3, #234	; 0xea
 8007658:	d809      	bhi.n	800766e <graphicsMain+0xce>
 800765a:	8bbb      	ldrh	r3, [r7, #28]
 800765c:	2b89      	cmp	r3, #137	; 0x89
 800765e:	d906      	bls.n	800766e <graphicsMain+0xce>
 8007660:	8bbb      	ldrh	r3, [r7, #28]
 8007662:	2bb2      	cmp	r3, #178	; 0xb2
 8007664:	d803      	bhi.n	800766e <graphicsMain+0xce>
			{
				UI_ChangeMode(ALL_AUTO);
 8007666:	2004      	movs	r0, #4
 8007668:	f7ff fee0 	bl	800742c <UI_ChangeMode>
 800766c:	e142      	b.n	80078f4 <graphicsMain+0x354>
			}


			else if (tpState.x > 33 && tpState.x < 66 && tpState.y > 181 && tpState.y < 223)
 800766e:	8b7b      	ldrh	r3, [r7, #26]
 8007670:	2b21      	cmp	r3, #33	; 0x21
 8007672:	d90d      	bls.n	8007690 <graphicsMain+0xf0>
 8007674:	8b7b      	ldrh	r3, [r7, #26]
 8007676:	2b41      	cmp	r3, #65	; 0x41
 8007678:	d80a      	bhi.n	8007690 <graphicsMain+0xf0>
 800767a:	8bbb      	ldrh	r3, [r7, #28]
 800767c:	2bb5      	cmp	r3, #181	; 0xb5
 800767e:	d907      	bls.n	8007690 <graphicsMain+0xf0>
 8007680:	8bbb      	ldrh	r3, [r7, #28]
 8007682:	2bde      	cmp	r3, #222	; 0xde
 8007684:	d804      	bhi.n	8007690 <graphicsMain+0xf0>
			{
				UI_ChangeZoneState(L_ONE, ZONE_TOP);
 8007686:	2100      	movs	r1, #0
 8007688:	2001      	movs	r0, #1
 800768a:	f7ff ff13 	bl	80074b4 <UI_ChangeZoneState>
 800768e:	e131      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 75 && tpState.x < 100 && tpState.y > 181 && tpState.y < 223)
 8007690:	8b7b      	ldrh	r3, [r7, #26]
 8007692:	2b4b      	cmp	r3, #75	; 0x4b
 8007694:	d90d      	bls.n	80076b2 <graphicsMain+0x112>
 8007696:	8b7b      	ldrh	r3, [r7, #26]
 8007698:	2b63      	cmp	r3, #99	; 0x63
 800769a:	d80a      	bhi.n	80076b2 <graphicsMain+0x112>
 800769c:	8bbb      	ldrh	r3, [r7, #28]
 800769e:	2bb5      	cmp	r3, #181	; 0xb5
 80076a0:	d907      	bls.n	80076b2 <graphicsMain+0x112>
 80076a2:	8bbb      	ldrh	r3, [r7, #28]
 80076a4:	2bde      	cmp	r3, #222	; 0xde
 80076a6:	d804      	bhi.n	80076b2 <graphicsMain+0x112>
			{
				UI_ChangeZoneState(L_TWO, ZONE_TOP);
 80076a8:	2100      	movs	r1, #0
 80076aa:	2002      	movs	r0, #2
 80076ac:	f7ff ff02 	bl	80074b4 <UI_ChangeZoneState>
 80076b0:	e120      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 108 && tpState.x < 133 && tpState.y > 181 && tpState.y < 223)
 80076b2:	8b7b      	ldrh	r3, [r7, #26]
 80076b4:	2b6c      	cmp	r3, #108	; 0x6c
 80076b6:	d90d      	bls.n	80076d4 <graphicsMain+0x134>
 80076b8:	8b7b      	ldrh	r3, [r7, #26]
 80076ba:	2b84      	cmp	r3, #132	; 0x84
 80076bc:	d80a      	bhi.n	80076d4 <graphicsMain+0x134>
 80076be:	8bbb      	ldrh	r3, [r7, #28]
 80076c0:	2bb5      	cmp	r3, #181	; 0xb5
 80076c2:	d907      	bls.n	80076d4 <graphicsMain+0x134>
 80076c4:	8bbb      	ldrh	r3, [r7, #28]
 80076c6:	2bde      	cmp	r3, #222	; 0xde
 80076c8:	d804      	bhi.n	80076d4 <graphicsMain+0x134>
			{
				UI_ChangeZoneState(L_THREE, ZONE_TOP);
 80076ca:	2100      	movs	r1, #0
 80076cc:	2003      	movs	r0, #3
 80076ce:	f7ff fef1 	bl	80074b4 <UI_ChangeZoneState>
 80076d2:	e10f      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 140 && tpState.x < 173 && tpState.y > 181 && tpState.y < 223)
 80076d4:	8b7b      	ldrh	r3, [r7, #26]
 80076d6:	2b8c      	cmp	r3, #140	; 0x8c
 80076d8:	d90d      	bls.n	80076f6 <graphicsMain+0x156>
 80076da:	8b7b      	ldrh	r3, [r7, #26]
 80076dc:	2bac      	cmp	r3, #172	; 0xac
 80076de:	d80a      	bhi.n	80076f6 <graphicsMain+0x156>
 80076e0:	8bbb      	ldrh	r3, [r7, #28]
 80076e2:	2bb5      	cmp	r3, #181	; 0xb5
 80076e4:	d907      	bls.n	80076f6 <graphicsMain+0x156>
 80076e6:	8bbb      	ldrh	r3, [r7, #28]
 80076e8:	2bde      	cmp	r3, #222	; 0xde
 80076ea:	d804      	bhi.n	80076f6 <graphicsMain+0x156>
			{
				UI_ChangeZoneState(L_FOUR, ZONE_TOP);
 80076ec:	2100      	movs	r1, #0
 80076ee:	2004      	movs	r0, #4
 80076f0:	f7ff fee0 	bl	80074b4 <UI_ChangeZoneState>
 80076f4:	e0fe      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 177 && tpState.x < 205 && tpState.y > 181 && tpState.y < 223)
 80076f6:	8b7b      	ldrh	r3, [r7, #26]
 80076f8:	2bb1      	cmp	r3, #177	; 0xb1
 80076fa:	d90d      	bls.n	8007718 <graphicsMain+0x178>
 80076fc:	8b7b      	ldrh	r3, [r7, #26]
 80076fe:	2bcc      	cmp	r3, #204	; 0xcc
 8007700:	d80a      	bhi.n	8007718 <graphicsMain+0x178>
 8007702:	8bbb      	ldrh	r3, [r7, #28]
 8007704:	2bb5      	cmp	r3, #181	; 0xb5
 8007706:	d907      	bls.n	8007718 <graphicsMain+0x178>
 8007708:	8bbb      	ldrh	r3, [r7, #28]
 800770a:	2bde      	cmp	r3, #222	; 0xde
 800770c:	d804      	bhi.n	8007718 <graphicsMain+0x178>
			{
				UI_ChangeZoneState(L_FIVE, ZONE_TOP);
 800770e:	2100      	movs	r1, #0
 8007710:	2005      	movs	r0, #5
 8007712:	f7ff fecf 	bl	80074b4 <UI_ChangeZoneState>
 8007716:	e0ed      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 210 && tpState.x < 235 && tpState.y > 181 && tpState.y < 223)
 8007718:	8b7b      	ldrh	r3, [r7, #26]
 800771a:	2bd2      	cmp	r3, #210	; 0xd2
 800771c:	d90d      	bls.n	800773a <graphicsMain+0x19a>
 800771e:	8b7b      	ldrh	r3, [r7, #26]
 8007720:	2bea      	cmp	r3, #234	; 0xea
 8007722:	d80a      	bhi.n	800773a <graphicsMain+0x19a>
 8007724:	8bbb      	ldrh	r3, [r7, #28]
 8007726:	2bb5      	cmp	r3, #181	; 0xb5
 8007728:	d907      	bls.n	800773a <graphicsMain+0x19a>
 800772a:	8bbb      	ldrh	r3, [r7, #28]
 800772c:	2bde      	cmp	r3, #222	; 0xde
 800772e:	d804      	bhi.n	800773a <graphicsMain+0x19a>
			{
				UI_ChangeZoneState(L_AUTO, ZONE_TOP);
 8007730:	2100      	movs	r1, #0
 8007732:	2006      	movs	r0, #6
 8007734:	f7ff febe 	bl	80074b4 <UI_ChangeZoneState>
 8007738:	e0dc      	b.n	80078f4 <graphicsMain+0x354>
			}


			else if (tpState.x > 33 && tpState.x < 66 && tpState.y > 225 && tpState.y < 267)
 800773a:	8b7b      	ldrh	r3, [r7, #26]
 800773c:	2b21      	cmp	r3, #33	; 0x21
 800773e:	d90e      	bls.n	800775e <graphicsMain+0x1be>
 8007740:	8b7b      	ldrh	r3, [r7, #26]
 8007742:	2b41      	cmp	r3, #65	; 0x41
 8007744:	d80b      	bhi.n	800775e <graphicsMain+0x1be>
 8007746:	8bbb      	ldrh	r3, [r7, #28]
 8007748:	2be1      	cmp	r3, #225	; 0xe1
 800774a:	d908      	bls.n	800775e <graphicsMain+0x1be>
 800774c:	8bbb      	ldrh	r3, [r7, #28]
 800774e:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007752:	d804      	bhi.n	800775e <graphicsMain+0x1be>
			{
				UI_ChangeZoneState(L_ONE, ZONE_MID);
 8007754:	2101      	movs	r1, #1
 8007756:	2001      	movs	r0, #1
 8007758:	f7ff feac 	bl	80074b4 <UI_ChangeZoneState>
 800775c:	e0ca      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 75 && tpState.x < 100 && tpState.y > 225 && tpState.y < 267)
 800775e:	8b7b      	ldrh	r3, [r7, #26]
 8007760:	2b4b      	cmp	r3, #75	; 0x4b
 8007762:	d90e      	bls.n	8007782 <graphicsMain+0x1e2>
 8007764:	8b7b      	ldrh	r3, [r7, #26]
 8007766:	2b63      	cmp	r3, #99	; 0x63
 8007768:	d80b      	bhi.n	8007782 <graphicsMain+0x1e2>
 800776a:	8bbb      	ldrh	r3, [r7, #28]
 800776c:	2be1      	cmp	r3, #225	; 0xe1
 800776e:	d908      	bls.n	8007782 <graphicsMain+0x1e2>
 8007770:	8bbb      	ldrh	r3, [r7, #28]
 8007772:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007776:	d804      	bhi.n	8007782 <graphicsMain+0x1e2>
			{
				UI_ChangeZoneState(L_TWO, ZONE_MID);
 8007778:	2101      	movs	r1, #1
 800777a:	2002      	movs	r0, #2
 800777c:	f7ff fe9a 	bl	80074b4 <UI_ChangeZoneState>
 8007780:	e0b8      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 108 && tpState.x < 133 && tpState.y > 225 && tpState.y < 267)
 8007782:	8b7b      	ldrh	r3, [r7, #26]
 8007784:	2b6c      	cmp	r3, #108	; 0x6c
 8007786:	d90e      	bls.n	80077a6 <graphicsMain+0x206>
 8007788:	8b7b      	ldrh	r3, [r7, #26]
 800778a:	2b84      	cmp	r3, #132	; 0x84
 800778c:	d80b      	bhi.n	80077a6 <graphicsMain+0x206>
 800778e:	8bbb      	ldrh	r3, [r7, #28]
 8007790:	2be1      	cmp	r3, #225	; 0xe1
 8007792:	d908      	bls.n	80077a6 <graphicsMain+0x206>
 8007794:	8bbb      	ldrh	r3, [r7, #28]
 8007796:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800779a:	d804      	bhi.n	80077a6 <graphicsMain+0x206>
			{
				UI_ChangeZoneState(L_THREE, ZONE_MID);
 800779c:	2101      	movs	r1, #1
 800779e:	2003      	movs	r0, #3
 80077a0:	f7ff fe88 	bl	80074b4 <UI_ChangeZoneState>
 80077a4:	e0a6      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 140 && tpState.x < 173 && tpState.y > 225 && tpState.y < 267)
 80077a6:	8b7b      	ldrh	r3, [r7, #26]
 80077a8:	2b8c      	cmp	r3, #140	; 0x8c
 80077aa:	d90e      	bls.n	80077ca <graphicsMain+0x22a>
 80077ac:	8b7b      	ldrh	r3, [r7, #26]
 80077ae:	2bac      	cmp	r3, #172	; 0xac
 80077b0:	d80b      	bhi.n	80077ca <graphicsMain+0x22a>
 80077b2:	8bbb      	ldrh	r3, [r7, #28]
 80077b4:	2be1      	cmp	r3, #225	; 0xe1
 80077b6:	d908      	bls.n	80077ca <graphicsMain+0x22a>
 80077b8:	8bbb      	ldrh	r3, [r7, #28]
 80077ba:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80077be:	d804      	bhi.n	80077ca <graphicsMain+0x22a>
			{
				UI_ChangeZoneState(L_FOUR, ZONE_MID);
 80077c0:	2101      	movs	r1, #1
 80077c2:	2004      	movs	r0, #4
 80077c4:	f7ff fe76 	bl	80074b4 <UI_ChangeZoneState>
 80077c8:	e094      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 177 && tpState.x < 205 && tpState.y > 225 && tpState.y < 267)
 80077ca:	8b7b      	ldrh	r3, [r7, #26]
 80077cc:	2bb1      	cmp	r3, #177	; 0xb1
 80077ce:	d90e      	bls.n	80077ee <graphicsMain+0x24e>
 80077d0:	8b7b      	ldrh	r3, [r7, #26]
 80077d2:	2bcc      	cmp	r3, #204	; 0xcc
 80077d4:	d80b      	bhi.n	80077ee <graphicsMain+0x24e>
 80077d6:	8bbb      	ldrh	r3, [r7, #28]
 80077d8:	2be1      	cmp	r3, #225	; 0xe1
 80077da:	d908      	bls.n	80077ee <graphicsMain+0x24e>
 80077dc:	8bbb      	ldrh	r3, [r7, #28]
 80077de:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80077e2:	d804      	bhi.n	80077ee <graphicsMain+0x24e>
			{
				UI_ChangeZoneState(L_FIVE, ZONE_MID);
 80077e4:	2101      	movs	r1, #1
 80077e6:	2005      	movs	r0, #5
 80077e8:	f7ff fe64 	bl	80074b4 <UI_ChangeZoneState>
 80077ec:	e082      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 210 && tpState.x < 235 && tpState.y > 225 && tpState.y < 267)
 80077ee:	8b7b      	ldrh	r3, [r7, #26]
 80077f0:	2bd2      	cmp	r3, #210	; 0xd2
 80077f2:	d90e      	bls.n	8007812 <graphicsMain+0x272>
 80077f4:	8b7b      	ldrh	r3, [r7, #26]
 80077f6:	2bea      	cmp	r3, #234	; 0xea
 80077f8:	d80b      	bhi.n	8007812 <graphicsMain+0x272>
 80077fa:	8bbb      	ldrh	r3, [r7, #28]
 80077fc:	2be1      	cmp	r3, #225	; 0xe1
 80077fe:	d908      	bls.n	8007812 <graphicsMain+0x272>
 8007800:	8bbb      	ldrh	r3, [r7, #28]
 8007802:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007806:	d804      	bhi.n	8007812 <graphicsMain+0x272>
			{
				UI_ChangeZoneState(L_AUTO, ZONE_MID);
 8007808:	2101      	movs	r1, #1
 800780a:	2006      	movs	r0, #6
 800780c:	f7ff fe52 	bl	80074b4 <UI_ChangeZoneState>
 8007810:	e070      	b.n	80078f4 <graphicsMain+0x354>
			}


			else if (tpState.x > 33 && tpState.x < 66 && tpState.y > 269 && tpState.y < 311)
 8007812:	8b7b      	ldrh	r3, [r7, #26]
 8007814:	2b21      	cmp	r3, #33	; 0x21
 8007816:	d90f      	bls.n	8007838 <graphicsMain+0x298>
 8007818:	8b7b      	ldrh	r3, [r7, #26]
 800781a:	2b41      	cmp	r3, #65	; 0x41
 800781c:	d80c      	bhi.n	8007838 <graphicsMain+0x298>
 800781e:	8bbb      	ldrh	r3, [r7, #28]
 8007820:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007824:	d308      	bcc.n	8007838 <graphicsMain+0x298>
 8007826:	8bbb      	ldrh	r3, [r7, #28]
 8007828:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800782c:	d804      	bhi.n	8007838 <graphicsMain+0x298>
			{
				UI_ChangeZoneState(L_ONE, ZONE_BOT);
 800782e:	2102      	movs	r1, #2
 8007830:	2001      	movs	r0, #1
 8007832:	f7ff fe3f 	bl	80074b4 <UI_ChangeZoneState>
 8007836:	e05d      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 75 && tpState.x < 100 && tpState.y > 269 && tpState.y < 311)
 8007838:	8b7b      	ldrh	r3, [r7, #26]
 800783a:	2b4b      	cmp	r3, #75	; 0x4b
 800783c:	d90f      	bls.n	800785e <graphicsMain+0x2be>
 800783e:	8b7b      	ldrh	r3, [r7, #26]
 8007840:	2b63      	cmp	r3, #99	; 0x63
 8007842:	d80c      	bhi.n	800785e <graphicsMain+0x2be>
 8007844:	8bbb      	ldrh	r3, [r7, #28]
 8007846:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800784a:	d308      	bcc.n	800785e <graphicsMain+0x2be>
 800784c:	8bbb      	ldrh	r3, [r7, #28]
 800784e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8007852:	d804      	bhi.n	800785e <graphicsMain+0x2be>
			{
				UI_ChangeZoneState(L_TWO, ZONE_BOT);
 8007854:	2102      	movs	r1, #2
 8007856:	2002      	movs	r0, #2
 8007858:	f7ff fe2c 	bl	80074b4 <UI_ChangeZoneState>
 800785c:	e04a      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 108 && tpState.x < 133 && tpState.y > 269 && tpState.y < 311)
 800785e:	8b7b      	ldrh	r3, [r7, #26]
 8007860:	2b6c      	cmp	r3, #108	; 0x6c
 8007862:	d90f      	bls.n	8007884 <graphicsMain+0x2e4>
 8007864:	8b7b      	ldrh	r3, [r7, #26]
 8007866:	2b84      	cmp	r3, #132	; 0x84
 8007868:	d80c      	bhi.n	8007884 <graphicsMain+0x2e4>
 800786a:	8bbb      	ldrh	r3, [r7, #28]
 800786c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007870:	d308      	bcc.n	8007884 <graphicsMain+0x2e4>
 8007872:	8bbb      	ldrh	r3, [r7, #28]
 8007874:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8007878:	d804      	bhi.n	8007884 <graphicsMain+0x2e4>
			{
				UI_ChangeZoneState(L_THREE, ZONE_BOT);
 800787a:	2102      	movs	r1, #2
 800787c:	2003      	movs	r0, #3
 800787e:	f7ff fe19 	bl	80074b4 <UI_ChangeZoneState>
 8007882:	e037      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 140 && tpState.x < 173 && tpState.y > 269 && tpState.y < 311)
 8007884:	8b7b      	ldrh	r3, [r7, #26]
 8007886:	2b8c      	cmp	r3, #140	; 0x8c
 8007888:	d90f      	bls.n	80078aa <graphicsMain+0x30a>
 800788a:	8b7b      	ldrh	r3, [r7, #26]
 800788c:	2bac      	cmp	r3, #172	; 0xac
 800788e:	d80c      	bhi.n	80078aa <graphicsMain+0x30a>
 8007890:	8bbb      	ldrh	r3, [r7, #28]
 8007892:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007896:	d308      	bcc.n	80078aa <graphicsMain+0x30a>
 8007898:	8bbb      	ldrh	r3, [r7, #28]
 800789a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800789e:	d804      	bhi.n	80078aa <graphicsMain+0x30a>
			{
				UI_ChangeZoneState(L_FOUR, ZONE_BOT);
 80078a0:	2102      	movs	r1, #2
 80078a2:	2004      	movs	r0, #4
 80078a4:	f7ff fe06 	bl	80074b4 <UI_ChangeZoneState>
 80078a8:	e024      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 177 && tpState.x < 205 && tpState.y > 269 && tpState.y < 311)
 80078aa:	8b7b      	ldrh	r3, [r7, #26]
 80078ac:	2bb1      	cmp	r3, #177	; 0xb1
 80078ae:	d90f      	bls.n	80078d0 <graphicsMain+0x330>
 80078b0:	8b7b      	ldrh	r3, [r7, #26]
 80078b2:	2bcc      	cmp	r3, #204	; 0xcc
 80078b4:	d80c      	bhi.n	80078d0 <graphicsMain+0x330>
 80078b6:	8bbb      	ldrh	r3, [r7, #28]
 80078b8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80078bc:	d308      	bcc.n	80078d0 <graphicsMain+0x330>
 80078be:	8bbb      	ldrh	r3, [r7, #28]
 80078c0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80078c4:	d804      	bhi.n	80078d0 <graphicsMain+0x330>
			{
				UI_ChangeZoneState(L_FIVE, ZONE_BOT);
 80078c6:	2102      	movs	r1, #2
 80078c8:	2005      	movs	r0, #5
 80078ca:	f7ff fdf3 	bl	80074b4 <UI_ChangeZoneState>
 80078ce:	e011      	b.n	80078f4 <graphicsMain+0x354>
			}
			else if (tpState.x > 210 && tpState.x < 235 && tpState.y > 269 && tpState.y < 311)
 80078d0:	8b7b      	ldrh	r3, [r7, #26]
 80078d2:	2bd2      	cmp	r3, #210	; 0xd2
 80078d4:	d90e      	bls.n	80078f4 <graphicsMain+0x354>
 80078d6:	8b7b      	ldrh	r3, [r7, #26]
 80078d8:	2bea      	cmp	r3, #234	; 0xea
 80078da:	d80b      	bhi.n	80078f4 <graphicsMain+0x354>
 80078dc:	8bbb      	ldrh	r3, [r7, #28]
 80078de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80078e2:	d307      	bcc.n	80078f4 <graphicsMain+0x354>
 80078e4:	8bbb      	ldrh	r3, [r7, #28]
 80078e6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80078ea:	d803      	bhi.n	80078f4 <graphicsMain+0x354>
			{
				UI_ChangeZoneState(L_AUTO, ZONE_BOT);
 80078ec:	2102      	movs	r1, #2
 80078ee:	2006      	movs	r0, #6
 80078f0:	f7ff fde0 	bl	80074b4 <UI_ChangeZoneState>
			}
			HAL_Delay(50);
 80078f4:	2032      	movs	r0, #50	; 0x32
 80078f6:	f7f8 fe73 	bl	80005e0 <HAL_Delay>
		TP_GetState(&tpState);
 80078fa:	e670      	b.n	80075de <graphicsMain+0x3e>

080078fc <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8007900:	20ca      	movs	r0, #202	; 0xca
 8007902:	f000 f943 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8007906:	20c3      	movs	r0, #195	; 0xc3
 8007908:	f000 f96a 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x08);
 800790c:	2008      	movs	r0, #8
 800790e:	f000 f967 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x50);
 8007912:	2050      	movs	r0, #80	; 0x50
 8007914:	f000 f964 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 8007918:	20cf      	movs	r0, #207	; 0xcf
 800791a:	f000 f937 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800791e:	2000      	movs	r0, #0
 8007920:	f000 f95e 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8007924:	20c1      	movs	r0, #193	; 0xc1
 8007926:	f000 f95b 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x30);
 800792a:	2030      	movs	r0, #48	; 0x30
 800792c:	f000 f958 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8007930:	20ed      	movs	r0, #237	; 0xed
 8007932:	f000 f92b 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8007936:	2064      	movs	r0, #100	; 0x64
 8007938:	f000 f952 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x03);
 800793c:	2003      	movs	r0, #3
 800793e:	f000 f94f 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x12);
 8007942:	2012      	movs	r0, #18
 8007944:	f000 f94c 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x81);
 8007948:	2081      	movs	r0, #129	; 0x81
 800794a:	f000 f949 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 800794e:	20e8      	movs	r0, #232	; 0xe8
 8007950:	f000 f91c 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8007954:	2085      	movs	r0, #133	; 0x85
 8007956:	f000 f943 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800795a:	2000      	movs	r0, #0
 800795c:	f000 f940 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x78);
 8007960:	2078      	movs	r0, #120	; 0x78
 8007962:	f000 f93d 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8007966:	20cb      	movs	r0, #203	; 0xcb
 8007968:	f000 f910 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x39);
 800796c:	2039      	movs	r0, #57	; 0x39
 800796e:	f000 f937 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8007972:	202c      	movs	r0, #44	; 0x2c
 8007974:	f000 f934 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8007978:	2000      	movs	r0, #0
 800797a:	f000 f931 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x34);
 800797e:	2034      	movs	r0, #52	; 0x34
 8007980:	f000 f92e 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x02);
 8007984:	2002      	movs	r0, #2
 8007986:	f000 f92b 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 800798a:	20f7      	movs	r0, #247	; 0xf7
 800798c:	f000 f8fe 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8007990:	2020      	movs	r0, #32
 8007992:	f000 f925 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8007996:	20ea      	movs	r0, #234	; 0xea
 8007998:	f000 f8f8 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800799c:	2000      	movs	r0, #0
 800799e:	f000 f91f 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 80079a2:	2000      	movs	r0, #0
 80079a4:	f000 f91c 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 80079a8:	20b1      	movs	r0, #177	; 0xb1
 80079aa:	f000 f8ef 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80079ae:	2000      	movs	r0, #0
 80079b0:	f000 f916 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80079b4:	201b      	movs	r0, #27
 80079b6:	f000 f913 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 80079ba:	20b6      	movs	r0, #182	; 0xb6
 80079bc:	f000 f8e6 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80079c0:	200a      	movs	r0, #10
 80079c2:	f000 f90d 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0xA2);
 80079c6:	20a2      	movs	r0, #162	; 0xa2
 80079c8:	f000 f90a 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 80079cc:	20c0      	movs	r0, #192	; 0xc0
 80079ce:	f000 f8dd 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80079d2:	2010      	movs	r0, #16
 80079d4:	f000 f904 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 80079d8:	20c1      	movs	r0, #193	; 0xc1
 80079da:	f000 f8d7 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80079de:	2010      	movs	r0, #16
 80079e0:	f000 f8fe 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 80079e4:	20c5      	movs	r0, #197	; 0xc5
 80079e6:	f000 f8d1 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x45);
 80079ea:	2045      	movs	r0, #69	; 0x45
 80079ec:	f000 f8f8 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x15);
 80079f0:	2015      	movs	r0, #21
 80079f2:	f000 f8f5 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 80079f6:	20c7      	movs	r0, #199	; 0xc7
 80079f8:	f000 f8c8 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x90);
 80079fc:	2090      	movs	r0, #144	; 0x90
 80079fe:	f000 f8ef 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8007a02:	2036      	movs	r0, #54	; 0x36
 8007a04:	f000 f8c2 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8007a08:	20c8      	movs	r0, #200	; 0xc8
 8007a0a:	f000 f8e9 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8007a0e:	20f2      	movs	r0, #242	; 0xf2
 8007a10:	f000 f8bc 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8007a14:	2000      	movs	r0, #0
 8007a16:	f000 f8e3 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8007a1a:	20b0      	movs	r0, #176	; 0xb0
 8007a1c:	f000 f8b6 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8007a20:	20c2      	movs	r0, #194	; 0xc2
 8007a22:	f000 f8dd 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8007a26:	20b6      	movs	r0, #182	; 0xb6
 8007a28:	f000 f8b0 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8007a2c:	200a      	movs	r0, #10
 8007a2e:	f000 f8d7 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0xA7);
 8007a32:	20a7      	movs	r0, #167	; 0xa7
 8007a34:	f000 f8d4 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x27);
 8007a38:	2027      	movs	r0, #39	; 0x27
 8007a3a:	f000 f8d1 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x04);
 8007a3e:	2004      	movs	r0, #4
 8007a40:	f000 f8ce 	bl	8007be0 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8007a44:	202a      	movs	r0, #42	; 0x2a
 8007a46:	f000 f8a1 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f000 f8c8 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8007a50:	2000      	movs	r0, #0
 8007a52:	f000 f8c5 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8007a56:	2000      	movs	r0, #0
 8007a58:	f000 f8c2 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8007a5c:	20ef      	movs	r0, #239	; 0xef
 8007a5e:	f000 f8bf 	bl	8007be0 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8007a62:	202b      	movs	r0, #43	; 0x2b
 8007a64:	f000 f892 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f000 f8b9 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8007a6e:	2000      	movs	r0, #0
 8007a70:	f000 f8b6 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x01);
 8007a74:	2001      	movs	r0, #1
 8007a76:	f000 f8b3 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8007a7a:	203f      	movs	r0, #63	; 0x3f
 8007a7c:	f000 f8b0 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8007a80:	20f6      	movs	r0, #246	; 0xf6
 8007a82:	f000 f883 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8007a86:	2001      	movs	r0, #1
 8007a88:	f000 f8aa 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f000 f8a7 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x06);
 8007a92:	2006      	movs	r0, #6
 8007a94:	f000 f8a4 	bl	8007be0 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8007a98:	202c      	movs	r0, #44	; 0x2c
 8007a9a:	f000 f877 	bl	8007b8c <LCD_WriteCommand>
	HAL_Delay(100);
 8007a9e:	2064      	movs	r0, #100	; 0x64
 8007aa0:	f7f8 fd9e 	bl	80005e0 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8007aa4:	2026      	movs	r0, #38	; 0x26
 8007aa6:	f000 f871 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8007aaa:	2001      	movs	r0, #1
 8007aac:	f000 f898 	bl	8007be0 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8007ab0:	20e0      	movs	r0, #224	; 0xe0
 8007ab2:	f000 f86b 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8007ab6:	200f      	movs	r0, #15
 8007ab8:	f000 f892 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x29);
 8007abc:	2029      	movs	r0, #41	; 0x29
 8007abe:	f000 f88f 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x24);
 8007ac2:	2024      	movs	r0, #36	; 0x24
 8007ac4:	f000 f88c 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8007ac8:	200c      	movs	r0, #12
 8007aca:	f000 f889 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8007ace:	200e      	movs	r0, #14
 8007ad0:	f000 f886 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x09);
 8007ad4:	2009      	movs	r0, #9
 8007ad6:	f000 f883 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8007ada:	204e      	movs	r0, #78	; 0x4e
 8007adc:	f000 f880 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x78);
 8007ae0:	2078      	movs	r0, #120	; 0x78
 8007ae2:	f000 f87d 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8007ae6:	203c      	movs	r0, #60	; 0x3c
 8007ae8:	f000 f87a 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x09);
 8007aec:	2009      	movs	r0, #9
 8007aee:	f000 f877 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x13);
 8007af2:	2013      	movs	r0, #19
 8007af4:	f000 f874 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x05);
 8007af8:	2005      	movs	r0, #5
 8007afa:	f000 f871 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x17);
 8007afe:	2017      	movs	r0, #23
 8007b00:	f000 f86e 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x11);
 8007b04:	2011      	movs	r0, #17
 8007b06:	f000 f86b 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f000 f868 	bl	8007be0 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8007b10:	20e1      	movs	r0, #225	; 0xe1
 8007b12:	f000 f83b 	bl	8007b8c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8007b16:	2000      	movs	r0, #0
 8007b18:	f000 f862 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x16);
 8007b1c:	2016      	movs	r0, #22
 8007b1e:	f000 f85f 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8007b22:	201b      	movs	r0, #27
 8007b24:	f000 f85c 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x04);
 8007b28:	2004      	movs	r0, #4
 8007b2a:	f000 f859 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x11);
 8007b2e:	2011      	movs	r0, #17
 8007b30:	f000 f856 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x07);
 8007b34:	2007      	movs	r0, #7
 8007b36:	f000 f853 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x31);
 8007b3a:	2031      	movs	r0, #49	; 0x31
 8007b3c:	f000 f850 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x33);
 8007b40:	2033      	movs	r0, #51	; 0x33
 8007b42:	f000 f84d 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x42);
 8007b46:	2042      	movs	r0, #66	; 0x42
 8007b48:	f000 f84a 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x05);
 8007b4c:	2005      	movs	r0, #5
 8007b4e:	f000 f847 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8007b52:	200c      	movs	r0, #12
 8007b54:	f000 f844 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8007b58:	200a      	movs	r0, #10
 8007b5a:	f000 f841 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x28);
 8007b5e:	2028      	movs	r0, #40	; 0x28
 8007b60:	f000 f83e 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8007b64:	202f      	movs	r0, #47	; 0x2f
 8007b66:	f000 f83b 	bl	8007be0 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8007b6a:	200f      	movs	r0, #15
 8007b6c:	f000 f838 	bl	8007be0 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8007b70:	2011      	movs	r0, #17
 8007b72:	f000 f80b 	bl	8007b8c <LCD_WriteCommand>
	HAL_Delay(100);
 8007b76:	2064      	movs	r0, #100	; 0x64
 8007b78:	f7f8 fd32 	bl	80005e0 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8007b7c:	2029      	movs	r0, #41	; 0x29
 8007b7e:	f000 f805 	bl	8007b8c <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8007b82:	202c      	movs	r0, #44	; 0x2c
 8007b84:	f000 f802 	bl	8007b8c <LCD_WriteCommand>
}
 8007b88:	bf00      	nop
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	733b      	strb	r3, [r7, #12]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ba4:	480b      	ldr	r0, [pc, #44]	; (8007bd4 <LCD_WriteCommand+0x48>)
 8007ba6:	f7f9 fdfb 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8007baa:	2200      	movs	r2, #0
 8007bac:	2104      	movs	r1, #4
 8007bae:	480a      	ldr	r0, [pc, #40]	; (8007bd8 <LCD_WriteCommand+0x4c>)
 8007bb0:	f7f9 fdf6 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8007bb4:	f107 010c 	add.w	r1, r7, #12
 8007bb8:	2364      	movs	r3, #100	; 0x64
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4807      	ldr	r0, [pc, #28]	; (8007bdc <LCD_WriteCommand+0x50>)
 8007bbe:	f7fc fa45 	bl	800404c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	2104      	movs	r1, #4
 8007bc6:	4804      	ldr	r0, [pc, #16]	; (8007bd8 <LCD_WriteCommand+0x4c>)
 8007bc8:	f7f9 fdea 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40020c00 	.word	0x40020c00
 8007bd8:	40020800 	.word	0x40020800
 8007bdc:	20022e2c 	.word	0x20022e2c

08007be0 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	733b      	strb	r3, [r7, #12]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007bf8:	480b      	ldr	r0, [pc, #44]	; (8007c28 <LCD_WriteData+0x48>)
 8007bfa:	f7f9 fdd1 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2104      	movs	r1, #4
 8007c02:	480a      	ldr	r0, [pc, #40]	; (8007c2c <LCD_WriteData+0x4c>)
 8007c04:	f7f9 fdcc 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8007c08:	f107 010c 	add.w	r1, r7, #12
 8007c0c:	2364      	movs	r3, #100	; 0x64
 8007c0e:	2201      	movs	r2, #1
 8007c10:	4807      	ldr	r0, [pc, #28]	; (8007c30 <LCD_WriteData+0x50>)
 8007c12:	f7fc fa1b 	bl	800404c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8007c16:	2201      	movs	r2, #1
 8007c18:	2104      	movs	r1, #4
 8007c1a:	4804      	ldr	r0, [pc, #16]	; (8007c2c <LCD_WriteData+0x4c>)
 8007c1c:	f7f9 fdc0 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40020c00 	.word	0x40020c00
 8007c2c:	40020800 	.word	0x40020800
 8007c30:	20022e2c 	.word	0x20022e2c

08007c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c3a:	f7f8 fc5f 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c3e:	f000 f82d 	bl	8007c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c42:	f000 fab7 	bl	80081b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c46:	f000 fa45 	bl	80080d4 <MX_DMA_Init>
  MX_LTDC_Init();
 8007c4a:	f000 f923 	bl	8007e94 <MX_LTDC_Init>
  MX_SPI5_Init();
 8007c4e:	f000 f9d7 	bl	8008000 <MX_SPI5_Init>
  MX_FMC_Init();
 8007c52:	f000 fa67 	bl	8008124 <MX_FMC_Init>
  MX_DMA2D_Init();
 8007c56:	f000 f8ab 	bl	8007db0 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8007c5a:	f000 f8db 	bl	8007e14 <MX_I2C3_Init>
  MX_TIM6_Init();
 8007c5e:	f000 fa05 	bl	800806c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8007c62:	480c      	ldr	r0, [pc, #48]	; (8007c94 <main+0x60>)
 8007c64:	f000 fb74 	bl	8008350 <SDRAM_init>
  TP_Config();
 8007c68:	f001 f994 	bl	8008f94 <TP_Config>
  //HAL_TIM_Base_Start_IT(&htim6);
  __HAL_RCC_CRC_CLK_ENABLE();
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <main+0x64>)
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <main+0x64>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <main+0x64>)
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
  GUI_Init();
 8007c88:	f006 fcca 	bl	800e620 <GUI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  graphicsMain();
 8007c8c:	f7ff fc88 	bl	80075a0 <graphicsMain>
  while (1)
 8007c90:	e7fe      	b.n	8007c90 <main+0x5c>
 8007c92:	bf00      	nop
 8007c94:	20022f00 	.word	0x20022f00
 8007c98:	40023800 	.word	0x40023800

08007c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b0a0      	sub	sp, #128	; 0x80
 8007ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ca2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ca6:	2230      	movs	r2, #48	; 0x30
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f009 fde6 	bl	801187c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	609a      	str	r2, [r3, #8]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007cc0:	f107 030c 	add.w	r3, r7, #12
 8007cc4:	2230      	movs	r2, #48	; 0x30
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f009 fdd7 	bl	801187c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60bb      	str	r3, [r7, #8]
 8007cd2:	4a35      	ldr	r2, [pc, #212]	; (8007da8 <SystemClock_Config+0x10c>)
 8007cd4:	4b34      	ldr	r3, [pc, #208]	; (8007da8 <SystemClock_Config+0x10c>)
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cde:	4b32      	ldr	r3, [pc, #200]	; (8007da8 <SystemClock_Config+0x10c>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	60bb      	str	r3, [r7, #8]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	4a2f      	ldr	r2, [pc, #188]	; (8007dac <SystemClock_Config+0x110>)
 8007cf0:	4b2e      	ldr	r3, [pc, #184]	; (8007dac <SystemClock_Config+0x110>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	4b2c      	ldr	r3, [pc, #176]	; (8007dac <SystemClock_Config+0x110>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007d06:	2302      	movs	r3, #2
 8007d08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007d0e:	2310      	movs	r3, #16
 8007d10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d12:	2302      	movs	r3, #2
 8007d14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007d16:	2300      	movs	r3, #0
 8007d18:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007d1e:	23b4      	movs	r3, #180	; 0xb4
 8007d20:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007d22:	2302      	movs	r3, #2
 8007d24:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007d26:	2304      	movs	r3, #4
 8007d28:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fb fb0c 	bl	800334c <HAL_RCC_OscConfig>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007d3a:	f000 fb01 	bl	8008340 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007d3e:	f7fb fab5 	bl	80032ac <HAL_PWREx_EnableOverDrive>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8007d48:	f000 fafa 	bl	8008340 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d4c:	230f      	movs	r3, #15
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d50:	2302      	movs	r3, #2
 8007d52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d54:	2300      	movs	r3, #0
 8007d56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d68:	2105      	movs	r1, #5
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fb fd30 	bl	80037d0 <HAL_RCC_ClockConfig>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8007d76:	f000 fae3 	bl	8008340 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007d7a:	2308      	movs	r3, #8
 8007d7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8007d7e:	233c      	movs	r3, #60	; 0x3c
 8007d80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007d82:	2302      	movs	r3, #2
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d8c:	f107 030c 	add.w	r3, r7, #12
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fb fed5 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8007d9c:	f000 fad0 	bl	8008340 <Error_Handler>
  }
}
 8007da0:	bf00      	nop
 8007da2:	3780      	adds	r7, #128	; 0x80
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	40023800 	.word	0x40023800
 8007dac:	40007000 	.word	0x40007000

08007db0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8007db4:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007db6:	4a16      	ldr	r2, [pc, #88]	; (8007e10 <MX_DMA2D_Init+0x60>)
 8007db8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007dc0:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8007dc6:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007dcc:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007dd2:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8007dd8:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007dde:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007de6:	f7f9 f839 	bl	8000e5c <HAL_DMA2D_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8007df0:	f000 faa6 	bl	8008340 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007df4:	2101      	movs	r1, #1
 8007df6:	4805      	ldr	r0, [pc, #20]	; (8007e0c <MX_DMA2D_Init+0x5c>)
 8007df8:	f7f9 f98a 	bl	8001110 <HAL_DMA2D_ConfigLayer>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8007e02:	f000 fa9d 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8007e06:	bf00      	nop
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20022ec0 	.word	0x20022ec0
 8007e10:	4002b000 	.word	0x4002b000

08007e14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8007e18:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <MX_I2C3_Init+0x78>)
 8007e1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007e1e:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e20:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <MX_I2C3_Init+0x7c>)
 8007e22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e24:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 8007e2a:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e2c:	2282      	movs	r2, #130	; 0x82
 8007e2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e30:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e38:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e44:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007e50:	480d      	ldr	r0, [pc, #52]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e52:	f7f9 fcbf 	bl	80017d4 <HAL_I2C_Init>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007e5c:	f000 fa70 	bl	8008340 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007e60:	2100      	movs	r1, #0
 8007e62:	4809      	ldr	r0, [pc, #36]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e64:	f7fa fbcb 	bl	80025fe <HAL_I2CEx_ConfigAnalogFilter>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8007e6e:	f000 fa67 	bl	8008340 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007e72:	2100      	movs	r1, #0
 8007e74:	4804      	ldr	r0, [pc, #16]	; (8007e88 <MX_I2C3_Init+0x74>)
 8007e76:	f7fa fbfe 	bl	8002676 <HAL_I2CEx_ConfigDigitalFilter>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007e80:	f000 fa5e 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20022d78 	.word	0x20022d78
 8007e8c:	40005c00 	.word	0x40005c00
 8007e90:	000186a0 	.word	0x000186a0

08007e94 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b09a      	sub	sp, #104	; 0x68
 8007e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007e9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e9e:	2234      	movs	r2, #52	; 0x34
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f009 fcea 	bl	801187c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8007ea8:	463b      	mov	r3, r7
 8007eaa:	2234      	movs	r2, #52	; 0x34
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f009 fce4 	bl	801187c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8007eb4:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007eb6:	4a51      	ldr	r2, [pc, #324]	; (8007ffc <MX_LTDC_Init+0x168>)
 8007eb8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007eba:	4b4f      	ldr	r3, [pc, #316]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007ec0:	4b4d      	ldr	r3, [pc, #308]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007ec6:	4b4c      	ldr	r3, [pc, #304]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007ecc:	4b4a      	ldr	r3, [pc, #296]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 8007ed2:	4b49      	ldr	r3, [pc, #292]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8007ed8:	4b47      	ldr	r3, [pc, #284]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8007ede:	4b46      	ldr	r3, [pc, #280]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ee0:	221d      	movs	r2, #29
 8007ee2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8007ee4:	4b44      	ldr	r3, [pc, #272]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8007eea:	4b43      	ldr	r3, [pc, #268]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007eec:	f240 120d 	movw	r2, #269	; 0x10d
 8007ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8007ef2:	4b41      	ldr	r3, [pc, #260]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007ef4:	f240 1243 	movw	r2, #323	; 0x143
 8007ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8007efa:	4b3f      	ldr	r3, [pc, #252]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007efc:	f240 1217 	movw	r2, #279	; 0x117
 8007f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8007f02:	4b3d      	ldr	r3, [pc, #244]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007f04:	f240 1247 	movw	r2, #327	; 0x147
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007f0a:	4b3b      	ldr	r3, [pc, #236]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007f12:	4b39      	ldr	r3, [pc, #228]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007f1a:	4b37      	ldr	r3, [pc, #220]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007f22:	4835      	ldr	r0, [pc, #212]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007f24:	f7fa fbe6 	bl	80026f4 <HAL_LTDC_Init>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8007f2e:	f000 fa07 	bl	8008340 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8007f36:	23f0      	movs	r3, #240	; 0xf0
 8007f38:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8007f3e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007f42:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007f44:	2300      	movs	r3, #0
 8007f46:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8007f48:	23ff      	movs	r3, #255	; 0xff
 8007f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007f50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007f54:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007f56:	2307      	movs	r3, #7
 8007f58:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8007f5e:	23f0      	movs	r3, #240	; 0xf0
 8007f60:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8007f62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007f66:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4619      	mov	r1, r3
 8007f82:	481d      	ldr	r0, [pc, #116]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007f84:	f7fa fd5a 	bl	8002a3c <HAL_LTDC_ConfigLayer>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 8007f8e:	f000 f9d7 	bl	8008340 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 8007f96:	23f0      	movs	r3, #240	; 0xf0
 8007f98:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 8007f9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007fa2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8007fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb4:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8007fb6:	2305      	movs	r3, #5
 8007fb8:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 8007fbe:	23f0      	movs	r3, #240	; 0xf0
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 8007fc2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8007fda:	463b      	mov	r3, r7
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <MX_LTDC_Init+0x164>)
 8007fe2:	f7fa fd2b 	bl	8002a3c <HAL_LTDC_ConfigLayer>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8007fec:	f000 f9a8 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8007ff0:	bf00      	nop
 8007ff2:	3768      	adds	r7, #104	; 0x68
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20022c70 	.word	0x20022c70
 8007ffc:	40016800 	.word	0x40016800

08008000 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8008004:	4b17      	ldr	r3, [pc, #92]	; (8008064 <MX_SPI5_Init+0x64>)
 8008006:	4a18      	ldr	r2, [pc, #96]	; (8008068 <MX_SPI5_Init+0x68>)
 8008008:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800800a:	4b16      	ldr	r3, [pc, #88]	; (8008064 <MX_SPI5_Init+0x64>)
 800800c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008010:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008012:	4b14      	ldr	r3, [pc, #80]	; (8008064 <MX_SPI5_Init+0x64>)
 8008014:	2200      	movs	r2, #0
 8008016:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008018:	4b12      	ldr	r3, [pc, #72]	; (8008064 <MX_SPI5_Init+0x64>)
 800801a:	2200      	movs	r2, #0
 800801c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <MX_SPI5_Init+0x64>)
 8008020:	2200      	movs	r2, #0
 8008022:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008024:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <MX_SPI5_Init+0x64>)
 8008026:	2200      	movs	r2, #0
 8008028:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800802a:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <MX_SPI5_Init+0x64>)
 800802c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008030:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008032:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <MX_SPI5_Init+0x64>)
 8008034:	2218      	movs	r2, #24
 8008036:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <MX_SPI5_Init+0x64>)
 800803a:	2200      	movs	r2, #0
 800803c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <MX_SPI5_Init+0x64>)
 8008040:	2200      	movs	r2, #0
 8008042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008044:	4b07      	ldr	r3, [pc, #28]	; (8008064 <MX_SPI5_Init+0x64>)
 8008046:	2200      	movs	r2, #0
 8008048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <MX_SPI5_Init+0x64>)
 800804c:	220a      	movs	r2, #10
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008050:	4804      	ldr	r0, [pc, #16]	; (8008064 <MX_SPI5_Init+0x64>)
 8008052:	f7fb ff98 	bl	8003f86 <HAL_SPI_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800805c:	f000 f970 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8008060:	bf00      	nop
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20022e2c 	.word	0x20022e2c
 8008068:	40015000 	.word	0x40015000

0800806c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008072:	463b      	mov	r3, r7
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800807a:	4b14      	ldr	r3, [pc, #80]	; (80080cc <MX_TIM6_Init+0x60>)
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <MX_TIM6_Init+0x64>)
 800807e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8008080:	4b12      	ldr	r3, [pc, #72]	; (80080cc <MX_TIM6_Init+0x60>)
 8008082:	f242 7210 	movw	r2, #10000	; 0x2710
 8008086:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008088:	4b10      	ldr	r3, [pc, #64]	; (80080cc <MX_TIM6_Init+0x60>)
 800808a:	2200      	movs	r2, #0
 800808c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <MX_TIM6_Init+0x60>)
 8008090:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008094:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008096:	480d      	ldr	r0, [pc, #52]	; (80080cc <MX_TIM6_Init+0x60>)
 8008098:	f7fc f99a 	bl	80043d0 <HAL_TIM_Base_Init>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 80080a2:	f000 f94d 	bl	8008340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80080a6:	2310      	movs	r3, #16
 80080a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80080ae:	463b      	mov	r3, r7
 80080b0:	4619      	mov	r1, r3
 80080b2:	4806      	ldr	r0, [pc, #24]	; (80080cc <MX_TIM6_Init+0x60>)
 80080b4:	f7fc fb9c 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <MX_TIM6_Init+0x56>
  {
    Error_Handler();
 80080be:	f000 f93f 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20022e84 	.word	0x20022e84
 80080d0:	40001000 	.word	0x40001000

080080d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80080da:	2300      	movs	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	4a10      	ldr	r2, [pc, #64]	; (8008120 <MX_DMA_Init+0x4c>)
 80080e0:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <MX_DMA_Init+0x4c>)
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080e8:	6313      	str	r3, [r2, #48]	; 0x30
 80080ea:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <MX_DMA_Init+0x4c>)
 80080ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f2:	607b      	str	r3, [r7, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80080f6:	2200      	movs	r2, #0
 80080f8:	2100      	movs	r1, #0
 80080fa:	200d      	movs	r0, #13
 80080fc:	f7f8 fb81 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008100:	200d      	movs	r0, #13
 8008102:	f7f8 fb9a 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	200f      	movs	r0, #15
 800810c:	f7f8 fb79 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008110:	200f      	movs	r0, #15
 8008112:	f7f8 fb92 	bl	800083a <HAL_NVIC_EnableIRQ>

}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800

08008124 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800812a:	4b20      	ldr	r3, [pc, #128]	; (80081ac <MX_FMC_Init+0x88>)
 800812c:	4a20      	ldr	r2, [pc, #128]	; (80081b0 <MX_FMC_Init+0x8c>)
 800812e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8008130:	4b1e      	ldr	r3, [pc, #120]	; (80081ac <MX_FMC_Init+0x88>)
 8008132:	2201      	movs	r2, #1
 8008134:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008136:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <MX_FMC_Init+0x88>)
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <MX_FMC_Init+0x88>)
 800813e:	2204      	movs	r2, #4
 8008140:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008142:	4b1a      	ldr	r3, [pc, #104]	; (80081ac <MX_FMC_Init+0x88>)
 8008144:	2210      	movs	r2, #16
 8008146:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008148:	4b18      	ldr	r3, [pc, #96]	; (80081ac <MX_FMC_Init+0x88>)
 800814a:	2240      	movs	r2, #64	; 0x40
 800814c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800814e:	4b17      	ldr	r3, [pc, #92]	; (80081ac <MX_FMC_Init+0x88>)
 8008150:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008154:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008156:	4b15      	ldr	r3, [pc, #84]	; (80081ac <MX_FMC_Init+0x88>)
 8008158:	2200      	movs	r2, #0
 800815a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800815c:	4b13      	ldr	r3, [pc, #76]	; (80081ac <MX_FMC_Init+0x88>)
 800815e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008162:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008164:	4b11      	ldr	r3, [pc, #68]	; (80081ac <MX_FMC_Init+0x88>)
 8008166:	2200      	movs	r2, #0
 8008168:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800816a:	4b10      	ldr	r3, [pc, #64]	; (80081ac <MX_FMC_Init+0x88>)
 800816c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008170:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8008172:	2302      	movs	r3, #2
 8008174:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8008176:	2307      	movs	r3, #7
 8008178:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800817a:	2304      	movs	r3, #4
 800817c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800817e:	2307      	movs	r3, #7
 8008180:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8008182:	2303      	movs	r3, #3
 8008184:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8008186:	2302      	movs	r3, #2
 8008188:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800818a:	2302      	movs	r3, #2
 800818c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4806      	ldr	r0, [pc, #24]	; (80081ac <MX_FMC_Init+0x88>)
 8008194:	f7fb fe78 	bl	8003e88 <HAL_SDRAM_Init>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 800819e:	f000 f8cf 	bl	8008340 <Error_Handler>
  }

}
 80081a2:	bf00      	nop
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20022f00 	.word	0x20022f00
 80081b0:	a0000140 	.word	0xa0000140

080081b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	; 0x30
 80081b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081ba:	f107 031c 	add.w	r3, r7, #28
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	605a      	str	r2, [r3, #4]
 80081c4:	609a      	str	r2, [r3, #8]
 80081c6:	60da      	str	r2, [r3, #12]
 80081c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	4a57      	ldr	r2, [pc, #348]	; (800832c <MX_GPIO_Init+0x178>)
 80081d0:	4b56      	ldr	r3, [pc, #344]	; (800832c <MX_GPIO_Init+0x178>)
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	6313      	str	r3, [r2, #48]	; 0x30
 80081da:	4b54      	ldr	r3, [pc, #336]	; (800832c <MX_GPIO_Init+0x178>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	4a50      	ldr	r2, [pc, #320]	; (800832c <MX_GPIO_Init+0x178>)
 80081ec:	4b4f      	ldr	r3, [pc, #316]	; (800832c <MX_GPIO_Init+0x178>)
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	f043 0304 	orr.w	r3, r3, #4
 80081f4:	6313      	str	r3, [r2, #48]	; 0x30
 80081f6:	4b4d      	ldr	r3, [pc, #308]	; (800832c <MX_GPIO_Init+0x178>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008202:	2300      	movs	r3, #0
 8008204:	613b      	str	r3, [r7, #16]
 8008206:	4a49      	ldr	r2, [pc, #292]	; (800832c <MX_GPIO_Init+0x178>)
 8008208:	4b48      	ldr	r3, [pc, #288]	; (800832c <MX_GPIO_Init+0x178>)
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6313      	str	r3, [r2, #48]	; 0x30
 8008212:	4b46      	ldr	r3, [pc, #280]	; (800832c <MX_GPIO_Init+0x178>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	613b      	str	r3, [r7, #16]
 800821c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	4a42      	ldr	r2, [pc, #264]	; (800832c <MX_GPIO_Init+0x178>)
 8008224:	4b41      	ldr	r3, [pc, #260]	; (800832c <MX_GPIO_Init+0x178>)
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	6313      	str	r3, [r2, #48]	; 0x30
 800822e:	4b3f      	ldr	r3, [pc, #252]	; (800832c <MX_GPIO_Init+0x178>)
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800823a:	2300      	movs	r3, #0
 800823c:	60bb      	str	r3, [r7, #8]
 800823e:	4a3b      	ldr	r2, [pc, #236]	; (800832c <MX_GPIO_Init+0x178>)
 8008240:	4b3a      	ldr	r3, [pc, #232]	; (800832c <MX_GPIO_Init+0x178>)
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008248:	6313      	str	r3, [r2, #48]	; 0x30
 800824a:	4b38      	ldr	r3, [pc, #224]	; (800832c <MX_GPIO_Init+0x178>)
 800824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008252:	60bb      	str	r3, [r7, #8]
 8008254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008256:	2300      	movs	r3, #0
 8008258:	607b      	str	r3, [r7, #4]
 800825a:	4a34      	ldr	r2, [pc, #208]	; (800832c <MX_GPIO_Init+0x178>)
 800825c:	4b33      	ldr	r3, [pc, #204]	; (800832c <MX_GPIO_Init+0x178>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	f043 0310 	orr.w	r3, r3, #16
 8008264:	6313      	str	r3, [r2, #48]	; 0x30
 8008266:	4b31      	ldr	r3, [pc, #196]	; (800832c <MX_GPIO_Init+0x178>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	607b      	str	r3, [r7, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008272:	2300      	movs	r3, #0
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4a2d      	ldr	r2, [pc, #180]	; (800832c <MX_GPIO_Init+0x178>)
 8008278:	4b2c      	ldr	r3, [pc, #176]	; (800832c <MX_GPIO_Init+0x178>)
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	f043 0308 	orr.w	r3, r3, #8
 8008280:	6313      	str	r3, [r2, #48]	; 0x30
 8008282:	4b2a      	ldr	r3, [pc, #168]	; (800832c <MX_GPIO_Init+0x178>)
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800828e:	2201      	movs	r2, #1
 8008290:	2104      	movs	r1, #4
 8008292:	4827      	ldr	r0, [pc, #156]	; (8008330 <MX_GPIO_Init+0x17c>)
 8008294:	f7f9 fa84 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800829e:	4825      	ldr	r0, [pc, #148]	; (8008334 <MX_GPIO_Init+0x180>)
 80082a0:	f7f9 fa7e 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80082a4:	2200      	movs	r2, #0
 80082a6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80082aa:	4823      	ldr	r0, [pc, #140]	; (8008338 <MX_GPIO_Init+0x184>)
 80082ac:	f7f9 fa78 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 80082b0:	2304      	movs	r3, #4
 80082b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082b4:	2301      	movs	r3, #1
 80082b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082bc:	2302      	movs	r3, #2
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 80082c0:	f107 031c 	add.w	r3, r7, #28
 80082c4:	4619      	mov	r1, r3
 80082c6:	481a      	ldr	r0, [pc, #104]	; (8008330 <MX_GPIO_Init+0x17c>)
 80082c8:	f7f8 ffb4 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 80082cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082d2:	2301      	movs	r3, #1
 80082d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082da:	2302      	movs	r3, #2
 80082dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 80082de:	f107 031c 	add.w	r3, r7, #28
 80082e2:	4619      	mov	r1, r3
 80082e4:	4813      	ldr	r0, [pc, #76]	; (8008334 <MX_GPIO_Init+0x180>)
 80082e6:	f7f8 ffa5 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80082ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082f0:	2300      	movs	r3, #0
 80082f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80082f8:	f107 031c 	add.w	r3, r7, #28
 80082fc:	4619      	mov	r1, r3
 80082fe:	480f      	ldr	r0, [pc, #60]	; (800833c <MX_GPIO_Init+0x188>)
 8008300:	f7f8 ff98 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8008304:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800830a:	2301      	movs	r3, #1
 800830c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830e:	2300      	movs	r3, #0
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008312:	2300      	movs	r3, #0
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008316:	f107 031c 	add.w	r3, r7, #28
 800831a:	4619      	mov	r1, r3
 800831c:	4806      	ldr	r0, [pc, #24]	; (8008338 <MX_GPIO_Init+0x184>)
 800831e:	f7f8 ff89 	bl	8001234 <HAL_GPIO_Init>

}
 8008322:	bf00      	nop
 8008324:	3730      	adds	r7, #48	; 0x30
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800
 8008330:	40020800 	.word	0x40020800
 8008334:	40020c00 	.word	0x40020c00
 8008338:	40021800 	.word	0x40021800
 800833c:	40020000 	.word	0x40020000

08008340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008344:	bf00      	nop
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
	...

08008350 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800835c:	4b2f      	ldr	r3, [pc, #188]	; (800841c <SDRAM_init+0xcc>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8008362:	4b2e      	ldr	r3, [pc, #184]	; (800841c <SDRAM_init+0xcc>)
 8008364:	2208      	movs	r2, #8
 8008366:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8008368:	4b2c      	ldr	r3, [pc, #176]	; (800841c <SDRAM_init+0xcc>)
 800836a:	2201      	movs	r2, #1
 800836c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800836e:	4b2b      	ldr	r3, [pc, #172]	; (800841c <SDRAM_init+0xcc>)
 8008370:	2200      	movs	r2, #0
 8008372:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8008374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008378:	4928      	ldr	r1, [pc, #160]	; (800841c <SDRAM_init+0xcc>)
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fb fdb8 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8008380:	200a      	movs	r0, #10
 8008382:	f7f8 f92d 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8008386:	4b25      	ldr	r3, [pc, #148]	; (800841c <SDRAM_init+0xcc>)
 8008388:	2202      	movs	r2, #2
 800838a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800838c:	4b23      	ldr	r3, [pc, #140]	; (800841c <SDRAM_init+0xcc>)
 800838e:	2208      	movs	r2, #8
 8008390:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8008392:	4b22      	ldr	r3, [pc, #136]	; (800841c <SDRAM_init+0xcc>)
 8008394:	2201      	movs	r2, #1
 8008396:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8008398:	4b20      	ldr	r3, [pc, #128]	; (800841c <SDRAM_init+0xcc>)
 800839a:	2200      	movs	r2, #0
 800839c:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800839e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a2:	491e      	ldr	r1, [pc, #120]	; (800841c <SDRAM_init+0xcc>)
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fb fda3 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80083aa:	200a      	movs	r0, #10
 80083ac:	f7f8 f918 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80083b0:	4b1a      	ldr	r3, [pc, #104]	; (800841c <SDRAM_init+0xcc>)
 80083b2:	2203      	movs	r2, #3
 80083b4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80083b6:	4b19      	ldr	r3, [pc, #100]	; (800841c <SDRAM_init+0xcc>)
 80083b8:	2208      	movs	r2, #8
 80083ba:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <SDRAM_init+0xcc>)
 80083be:	2204      	movs	r2, #4
 80083c0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80083c2:	4b16      	ldr	r3, [pc, #88]	; (800841c <SDRAM_init+0xcc>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80083c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083cc:	4913      	ldr	r1, [pc, #76]	; (800841c <SDRAM_init+0xcc>)
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fb fd8e 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80083d4:	200a      	movs	r0, #10
 80083d6:	f7f8 f903 	bl	80005e0 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 80083da:	f240 2331 	movw	r3, #561	; 0x231
 80083de:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80083e0:	4b0e      	ldr	r3, [pc, #56]	; (800841c <SDRAM_init+0xcc>)
 80083e2:	2204      	movs	r2, #4
 80083e4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <SDRAM_init+0xcc>)
 80083e8:	2208      	movs	r2, #8
 80083ea:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <SDRAM_init+0xcc>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a09      	ldr	r2, [pc, #36]	; (800841c <SDRAM_init+0xcc>)
 80083f6:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80083f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fc:	4907      	ldr	r1, [pc, #28]	; (800841c <SDRAM_init+0xcc>)
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fb fd76 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8008404:	200a      	movs	r0, #10
 8008406:	f7f8 f8eb 	bl	80005e0 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 800840a:	f240 516a 	movw	r1, #1386	; 0x56a
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7fb fd99 	bl	8003f46 <HAL_SDRAM_ProgramRefreshRate>
}
 8008414:	bf00      	nop
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20022f34 	.word	0x20022f34

08008420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
 800842a:	4a10      	ldr	r2, [pc, #64]	; (800846c <HAL_MspInit+0x4c>)
 800842c:	4b0f      	ldr	r3, [pc, #60]	; (800846c <HAL_MspInit+0x4c>)
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008434:	6453      	str	r3, [r2, #68]	; 0x44
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <HAL_MspInit+0x4c>)
 8008438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008442:	2300      	movs	r3, #0
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	4a09      	ldr	r2, [pc, #36]	; (800846c <HAL_MspInit+0x4c>)
 8008448:	4b08      	ldr	r3, [pc, #32]	; (800846c <HAL_MspInit+0x4c>)
 800844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008450:	6413      	str	r3, [r2, #64]	; 0x40
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <HAL_MspInit+0x4c>)
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	40023800 	.word	0x40023800

08008470 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a0e      	ldr	r2, [pc, #56]	; (80084b8 <HAL_DMA2D_MspInit+0x48>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d115      	bne.n	80084ae <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	4a0d      	ldr	r2, [pc, #52]	; (80084bc <HAL_DMA2D_MspInit+0x4c>)
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <HAL_DMA2D_MspInit+0x4c>)
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008490:	6313      	str	r3, [r2, #48]	; 0x30
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <HAL_DMA2D_MspInit+0x4c>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800849e:	2200      	movs	r2, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	205a      	movs	r0, #90	; 0x5a
 80084a4:	f7f8 f9ad 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80084a8:	205a      	movs	r0, #90	; 0x5a
 80084aa:	f7f8 f9c6 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	4002b000 	.word	0x4002b000
 80084bc:	40023800 	.word	0x40023800

080084c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c8:	f107 0314 	add.w	r3, r7, #20
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a57      	ldr	r2, [pc, #348]	; (800863c <HAL_I2C_MspInit+0x17c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f040 80a8 	bne.w	8008634 <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084e4:	2300      	movs	r3, #0
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	4a55      	ldr	r2, [pc, #340]	; (8008640 <HAL_I2C_MspInit+0x180>)
 80084ea:	4b55      	ldr	r3, [pc, #340]	; (8008640 <HAL_I2C_MspInit+0x180>)
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f043 0304 	orr.w	r3, r3, #4
 80084f2:	6313      	str	r3, [r2, #48]	; 0x30
 80084f4:	4b52      	ldr	r3, [pc, #328]	; (8008640 <HAL_I2C_MspInit+0x180>)
 80084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	4a4e      	ldr	r2, [pc, #312]	; (8008640 <HAL_I2C_MspInit+0x180>)
 8008506:	4b4e      	ldr	r3, [pc, #312]	; (8008640 <HAL_I2C_MspInit+0x180>)
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850a:	f043 0301 	orr.w	r3, r3, #1
 800850e:	6313      	str	r3, [r2, #48]	; 0x30
 8008510:	4b4b      	ldr	r3, [pc, #300]	; (8008640 <HAL_I2C_MspInit+0x180>)
 8008512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800851c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008522:	2312      	movs	r3, #18
 8008524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008526:	2301      	movs	r3, #1
 8008528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800852a:	2303      	movs	r3, #3
 800852c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800852e:	2304      	movs	r3, #4
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008532:	f107 0314 	add.w	r3, r7, #20
 8008536:	4619      	mov	r1, r3
 8008538:	4842      	ldr	r0, [pc, #264]	; (8008644 <HAL_I2C_MspInit+0x184>)
 800853a:	f7f8 fe7b 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800853e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008544:	2312      	movs	r3, #18
 8008546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008548:	2301      	movs	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800854c:	2303      	movs	r3, #3
 800854e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008550:	2304      	movs	r3, #4
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008554:	f107 0314 	add.w	r3, r7, #20
 8008558:	4619      	mov	r1, r3
 800855a:	483b      	ldr	r0, [pc, #236]	; (8008648 <HAL_I2C_MspInit+0x188>)
 800855c:	f7f8 fe6a 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	4a36      	ldr	r2, [pc, #216]	; (8008640 <HAL_I2C_MspInit+0x180>)
 8008566:	4b36      	ldr	r3, [pc, #216]	; (8008640 <HAL_I2C_MspInit+0x180>)
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800856e:	6413      	str	r3, [r2, #64]	; 0x40
 8008570:	4b33      	ldr	r3, [pc, #204]	; (8008640 <HAL_I2C_MspInit+0x180>)
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 800857c:	4b33      	ldr	r3, [pc, #204]	; (800864c <HAL_I2C_MspInit+0x18c>)
 800857e:	4a34      	ldr	r2, [pc, #208]	; (8008650 <HAL_I2C_MspInit+0x190>)
 8008580:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8008582:	4b32      	ldr	r3, [pc, #200]	; (800864c <HAL_I2C_MspInit+0x18c>)
 8008584:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008588:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800858a:	4b30      	ldr	r3, [pc, #192]	; (800864c <HAL_I2C_MspInit+0x18c>)
 800858c:	2200      	movs	r2, #0
 800858e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008590:	4b2e      	ldr	r3, [pc, #184]	; (800864c <HAL_I2C_MspInit+0x18c>)
 8008592:	2200      	movs	r2, #0
 8008594:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008596:	4b2d      	ldr	r3, [pc, #180]	; (800864c <HAL_I2C_MspInit+0x18c>)
 8008598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800859c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800859e:	4b2b      	ldr	r3, [pc, #172]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085a4:	4b29      	ldr	r3, [pc, #164]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80085aa:	4b28      	ldr	r3, [pc, #160]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80085b0:	4b26      	ldr	r3, [pc, #152]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085b6:	4b25      	ldr	r3, [pc, #148]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80085bc:	4823      	ldr	r0, [pc, #140]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085be:	f7f8 f965 	bl	800088c <HAL_DMA_Init>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80085c8:	f7ff feba 	bl	8008340 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1f      	ldr	r2, [pc, #124]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38
 80085d2:	4a1e      	ldr	r2, [pc, #120]	; (800864c <HAL_I2C_MspInit+0x18c>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80085d8:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <HAL_I2C_MspInit+0x194>)
 80085da:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <HAL_I2C_MspInit+0x198>)
 80085dc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80085de:	4b1d      	ldr	r3, [pc, #116]	; (8008654 <HAL_I2C_MspInit+0x194>)
 80085e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80085e4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80085e6:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <HAL_I2C_MspInit+0x194>)
 80085e8:	2240      	movs	r2, #64	; 0x40
 80085ea:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80085ec:	4b19      	ldr	r3, [pc, #100]	; (8008654 <HAL_I2C_MspInit+0x194>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80085f2:	4b18      	ldr	r3, [pc, #96]	; (8008654 <HAL_I2C_MspInit+0x194>)
 80085f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085f8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <HAL_I2C_MspInit+0x194>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008600:	4b14      	ldr	r3, [pc, #80]	; (8008654 <HAL_I2C_MspInit+0x194>)
 8008602:	2200      	movs	r2, #0
 8008604:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8008606:	4b13      	ldr	r3, [pc, #76]	; (8008654 <HAL_I2C_MspInit+0x194>)
 8008608:	2200      	movs	r2, #0
 800860a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800860c:	4b11      	ldr	r3, [pc, #68]	; (8008654 <HAL_I2C_MspInit+0x194>)
 800860e:	2200      	movs	r2, #0
 8008610:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008612:	4b10      	ldr	r3, [pc, #64]	; (8008654 <HAL_I2C_MspInit+0x194>)
 8008614:	2200      	movs	r2, #0
 8008616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8008618:	480e      	ldr	r0, [pc, #56]	; (8008654 <HAL_I2C_MspInit+0x194>)
 800861a:	f7f8 f937 	bl	800088c <HAL_DMA_Init>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8008624:	f7ff fe8c 	bl	8008340 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0a      	ldr	r2, [pc, #40]	; (8008654 <HAL_I2C_MspInit+0x194>)
 800862c:	635a      	str	r2, [r3, #52]	; 0x34
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <HAL_I2C_MspInit+0x194>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8008634:	bf00      	nop
 8008636:	3728      	adds	r7, #40	; 0x28
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40005c00 	.word	0x40005c00
 8008640:	40023800 	.word	0x40023800
 8008644:	40020800 	.word	0x40020800
 8008648:	40020000 	.word	0x40020000
 800864c:	20022dcc 	.word	0x20022dcc
 8008650:	40026040 	.word	0x40026040
 8008654:	20022d18 	.word	0x20022d18
 8008658:	40026070 	.word	0x40026070

0800865c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	; 0x38
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	605a      	str	r2, [r3, #4]
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a7b      	ldr	r2, [pc, #492]	; (8008868 <HAL_LTDC_MspInit+0x20c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f040 80f0 	bne.w	8008860 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008680:	2300      	movs	r3, #0
 8008682:	623b      	str	r3, [r7, #32]
 8008684:	4a79      	ldr	r2, [pc, #484]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008686:	4b79      	ldr	r3, [pc, #484]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800868e:	6453      	str	r3, [r2, #68]	; 0x44
 8008690:	4b76      	ldr	r3, [pc, #472]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008698:	623b      	str	r3, [r7, #32]
 800869a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800869c:	2300      	movs	r3, #0
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	4a72      	ldr	r2, [pc, #456]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086a2:	4b72      	ldr	r3, [pc, #456]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a6:	f043 0320 	orr.w	r3, r3, #32
 80086aa:	6313      	str	r3, [r2, #48]	; 0x30
 80086ac:	4b6f      	ldr	r3, [pc, #444]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b8:	2300      	movs	r3, #0
 80086ba:	61bb      	str	r3, [r7, #24]
 80086bc:	4a6b      	ldr	r2, [pc, #428]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086be:	4b6b      	ldr	r3, [pc, #428]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6313      	str	r3, [r2, #48]	; 0x30
 80086c8:	4b68      	ldr	r3, [pc, #416]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	4a64      	ldr	r2, [pc, #400]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086da:	4b64      	ldr	r3, [pc, #400]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	f043 0302 	orr.w	r3, r3, #2
 80086e2:	6313      	str	r3, [r2, #48]	; 0x30
 80086e4:	4b61      	ldr	r3, [pc, #388]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80086f0:	2300      	movs	r3, #0
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	4a5d      	ldr	r2, [pc, #372]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086f6:	4b5d      	ldr	r3, [pc, #372]	; (800886c <HAL_LTDC_MspInit+0x210>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008700:	4b5a      	ldr	r3, [pc, #360]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	4a56      	ldr	r2, [pc, #344]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008712:	4b56      	ldr	r3, [pc, #344]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	f043 0304 	orr.w	r3, r3, #4
 800871a:	6313      	str	r3, [r2, #48]	; 0x30
 800871c:	4b53      	ldr	r3, [pc, #332]	; (800886c <HAL_LTDC_MspInit+0x210>)
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008728:	2300      	movs	r3, #0
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	4a4f      	ldr	r2, [pc, #316]	; (800886c <HAL_LTDC_MspInit+0x210>)
 800872e:	4b4f      	ldr	r3, [pc, #316]	; (800886c <HAL_LTDC_MspInit+0x210>)
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	f043 0308 	orr.w	r3, r3, #8
 8008736:	6313      	str	r3, [r2, #48]	; 0x30
 8008738:	4b4c      	ldr	r3, [pc, #304]	; (800886c <HAL_LTDC_MspInit+0x210>)
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	f003 0308 	and.w	r3, r3, #8
 8008740:	60bb      	str	r3, [r7, #8]
 8008742:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874a:	2302      	movs	r3, #2
 800874c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874e:	2300      	movs	r3, #0
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008752:	2302      	movs	r3, #2
 8008754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008756:	230e      	movs	r3, #14
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800875a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800875e:	4619      	mov	r1, r3
 8008760:	4843      	ldr	r0, [pc, #268]	; (8008870 <HAL_LTDC_MspInit+0x214>)
 8008762:	f7f8 fd67 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8008766:	f641 0358 	movw	r3, #6232	; 0x1858
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876c:	2302      	movs	r3, #2
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008774:	2302      	movs	r3, #2
 8008776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008778:	230e      	movs	r3, #14
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008780:	4619      	mov	r1, r3
 8008782:	483c      	ldr	r0, [pc, #240]	; (8008874 <HAL_LTDC_MspInit+0x218>)
 8008784:	f7f8 fd56 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008788:	2303      	movs	r3, #3
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878c:	2302      	movs	r3, #2
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008790:	2300      	movs	r3, #0
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008794:	2302      	movs	r3, #2
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008798:	2309      	movs	r3, #9
 800879a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800879c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a0:	4619      	mov	r1, r3
 80087a2:	4835      	ldr	r0, [pc, #212]	; (8008878 <HAL_LTDC_MspInit+0x21c>)
 80087a4:	f7f8 fd46 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80087a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ae:	2302      	movs	r3, #2
 80087b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087b6:	2302      	movs	r3, #2
 80087b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80087ba:	230e      	movs	r3, #14
 80087bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087c2:	4619      	mov	r1, r3
 80087c4:	482c      	ldr	r0, [pc, #176]	; (8008878 <HAL_LTDC_MspInit+0x21c>)
 80087c6:	f7f8 fd35 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80087ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d0:	2302      	movs	r3, #2
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d4:	2300      	movs	r3, #0
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087d8:	2302      	movs	r3, #2
 80087da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80087dc:	230e      	movs	r3, #14
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80087e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087e4:	4619      	mov	r1, r3
 80087e6:	4825      	ldr	r0, [pc, #148]	; (800887c <HAL_LTDC_MspInit+0x220>)
 80087e8:	f7f8 fd24 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80087ec:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f2:	2302      	movs	r3, #2
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087fa:	2302      	movs	r3, #2
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80087fe:	230e      	movs	r3, #14
 8008800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008806:	4619      	mov	r1, r3
 8008808:	481d      	ldr	r0, [pc, #116]	; (8008880 <HAL_LTDC_MspInit+0x224>)
 800880a:	f7f8 fd13 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800880e:	2348      	movs	r3, #72	; 0x48
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008812:	2302      	movs	r3, #2
 8008814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008816:	2300      	movs	r3, #0
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800881a:	2302      	movs	r3, #2
 800881c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800881e:	230e      	movs	r3, #14
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008826:	4619      	mov	r1, r3
 8008828:	4816      	ldr	r0, [pc, #88]	; (8008884 <HAL_LTDC_MspInit+0x228>)
 800882a:	f7f8 fd03 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800882e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008834:	2302      	movs	r3, #2
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008838:	2300      	movs	r3, #0
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800883c:	2302      	movs	r3, #2
 800883e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008840:	2309      	movs	r3, #9
 8008842:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008848:	4619      	mov	r1, r3
 800884a:	480c      	ldr	r0, [pc, #48]	; (800887c <HAL_LTDC_MspInit+0x220>)
 800884c:	f7f8 fcf2 	bl	8001234 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8008850:	2200      	movs	r2, #0
 8008852:	2100      	movs	r1, #0
 8008854:	2058      	movs	r0, #88	; 0x58
 8008856:	f7f7 ffd4 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800885a:	2058      	movs	r0, #88	; 0x58
 800885c:	f7f7 ffed 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8008860:	bf00      	nop
 8008862:	3738      	adds	r7, #56	; 0x38
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	40016800 	.word	0x40016800
 800886c:	40023800 	.word	0x40023800
 8008870:	40021400 	.word	0x40021400
 8008874:	40020000 	.word	0x40020000
 8008878:	40020400 	.word	0x40020400
 800887c:	40021800 	.word	0x40021800
 8008880:	40020800 	.word	0x40020800
 8008884:	40020c00 	.word	0x40020c00

08008888 <HAL_LTDC_MspDeInit>:
* @param hltdc: LTDC handle pointer
* @retval None
*/

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]

  if(hltdc->Instance==LTDC)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <HAL_LTDC_MspDeInit+0x68>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d125      	bne.n	80088e6 <HAL_LTDC_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 800889a:	4a16      	ldr	r2, [pc, #88]	; (80088f4 <HAL_LTDC_MspDeInit+0x6c>)
 800889c:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <HAL_LTDC_MspDeInit+0x6c>)
 800889e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088a4:	6453      	str	r3, [r2, #68]	; 0x44
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 80088a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088aa:	4813      	ldr	r0, [pc, #76]	; (80088f8 <HAL_LTDC_MspDeInit+0x70>)
 80088ac:	f7f8 fe6c 	bl	8001588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80088b0:	f641 0158 	movw	r1, #6232	; 0x1858
 80088b4:	4811      	ldr	r0, [pc, #68]	; (80088fc <HAL_LTDC_MspDeInit+0x74>)
 80088b6:	f7f8 fe67 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80088ba:	f640 7103 	movw	r1, #3843	; 0xf03
 80088be:	4810      	ldr	r0, [pc, #64]	; (8008900 <HAL_LTDC_MspDeInit+0x78>)
 80088c0:	f7f8 fe62 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11 
 80088c4:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 80088c8:	480e      	ldr	r0, [pc, #56]	; (8008904 <HAL_LTDC_MspDeInit+0x7c>)
 80088ca:	f7f8 fe5d 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10);
 80088ce:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80088d2:	480d      	ldr	r0, [pc, #52]	; (8008908 <HAL_LTDC_MspDeInit+0x80>)
 80088d4:	f7f8 fe58 	bl	8001588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3|GPIO_PIN_6);
 80088d8:	2148      	movs	r1, #72	; 0x48
 80088da:	480c      	ldr	r0, [pc, #48]	; (800890c <HAL_LTDC_MspDeInit+0x84>)
 80088dc:	f7f8 fe54 	bl	8001588 <HAL_GPIO_DeInit>

    /* LTDC interrupt DeInit */
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80088e0:	2058      	movs	r0, #88	; 0x58
 80088e2:	f7f7 ffb8 	bl	8000856 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }

}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40016800 	.word	0x40016800
 80088f4:	40023800 	.word	0x40023800
 80088f8:	40021400 	.word	0x40021400
 80088fc:	40020000 	.word	0x40020000
 8008900:	40020400 	.word	0x40020400
 8008904:	40021800 	.word	0x40021800
 8008908:	40020800 	.word	0x40020800
 800890c:	40020c00 	.word	0x40020c00

08008910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	; 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a19      	ldr	r2, [pc, #100]	; (8008994 <HAL_SPI_MspInit+0x84>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d12c      	bne.n	800898c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	4a18      	ldr	r2, [pc, #96]	; (8008998 <HAL_SPI_MspInit+0x88>)
 8008938:	4b17      	ldr	r3, [pc, #92]	; (8008998 <HAL_SPI_MspInit+0x88>)
 800893a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008940:	6453      	str	r3, [r2, #68]	; 0x44
 8008942:	4b15      	ldr	r3, [pc, #84]	; (8008998 <HAL_SPI_MspInit+0x88>)
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	4a11      	ldr	r2, [pc, #68]	; (8008998 <HAL_SPI_MspInit+0x88>)
 8008954:	4b10      	ldr	r3, [pc, #64]	; (8008998 <HAL_SPI_MspInit+0x88>)
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	f043 0320 	orr.w	r3, r3, #32
 800895c:	6313      	str	r3, [r2, #48]	; 0x30
 800895e:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <HAL_SPI_MspInit+0x88>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800896a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800896e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008970:	2302      	movs	r3, #2
 8008972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008974:	2300      	movs	r3, #0
 8008976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008978:	2303      	movs	r3, #3
 800897a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800897c:	2305      	movs	r3, #5
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	4619      	mov	r1, r3
 8008986:	4805      	ldr	r0, [pc, #20]	; (800899c <HAL_SPI_MspInit+0x8c>)
 8008988:	f7f8 fc54 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800898c:	bf00      	nop
 800898e:	3728      	adds	r7, #40	; 0x28
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	40015000 	.word	0x40015000
 8008998:	40023800 	.word	0x40023800
 800899c:	40021400 	.word	0x40021400

080089a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a0e      	ldr	r2, [pc, #56]	; (80089e8 <HAL_TIM_Base_MspInit+0x48>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d115      	bne.n	80089de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <HAL_TIM_Base_MspInit+0x4c>)
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <HAL_TIM_Base_MspInit+0x4c>)
 80089ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089bc:	f043 0310 	orr.w	r3, r3, #16
 80089c0:	6413      	str	r3, [r2, #64]	; 0x40
 80089c2:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <HAL_TIM_Base_MspInit+0x4c>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80089ce:	2200      	movs	r2, #0
 80089d0:	2105      	movs	r1, #5
 80089d2:	2036      	movs	r0, #54	; 0x36
 80089d4:	f7f7 ff15 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80089d8:	2036      	movs	r0, #54	; 0x36
 80089da:	f7f7 ff2e 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40001000 	.word	0x40001000
 80089ec:	40023800 	.word	0x40023800

080089f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80089f6:	4b3c      	ldr	r3, [pc, #240]	; (8008ae8 <HAL_FMC_MspInit+0xf8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d16f      	bne.n	8008ade <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80089fe:	4b3a      	ldr	r3, [pc, #232]	; (8008ae8 <HAL_FMC_MspInit+0xf8>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008a04:	2300      	movs	r3, #0
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4a38      	ldr	r2, [pc, #224]	; (8008aec <HAL_FMC_MspInit+0xfc>)
 8008a0a:	4b38      	ldr	r3, [pc, #224]	; (8008aec <HAL_FMC_MspInit+0xfc>)
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	6393      	str	r3, [r2, #56]	; 0x38
 8008a14:	4b35      	ldr	r3, [pc, #212]	; (8008aec <HAL_FMC_MspInit+0xfc>)
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008a20:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008a24:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a32:	230c      	movs	r3, #12
 8008a34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008a36:	1d3b      	adds	r3, r7, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	482d      	ldr	r0, [pc, #180]	; (8008af0 <HAL_FMC_MspInit+0x100>)
 8008a3c:	f7f8 fbfa 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008a40:	2301      	movs	r3, #1
 8008a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a44:	2302      	movs	r3, #2
 8008a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a50:	230c      	movs	r3, #12
 8008a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a54:	1d3b      	adds	r3, r7, #4
 8008a56:	4619      	mov	r1, r3
 8008a58:	4826      	ldr	r0, [pc, #152]	; (8008af4 <HAL_FMC_MspInit+0x104>)
 8008a5a:	f7f8 fbeb 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8008a5e:	f248 1333 	movw	r3, #33075	; 0x8133
 8008a62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a64:	2302      	movs	r3, #2
 8008a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a70:	230c      	movs	r3, #12
 8008a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a74:	1d3b      	adds	r3, r7, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	481f      	ldr	r0, [pc, #124]	; (8008af8 <HAL_FMC_MspInit+0x108>)
 8008a7a:	f7f8 fbdb 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8008a7e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008a82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a84:	2302      	movs	r3, #2
 8008a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a90:	230c      	movs	r3, #12
 8008a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a94:	1d3b      	adds	r3, r7, #4
 8008a96:	4619      	mov	r1, r3
 8008a98:	4818      	ldr	r0, [pc, #96]	; (8008afc <HAL_FMC_MspInit+0x10c>)
 8008a9a:	f7f8 fbcb 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8008a9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008aa2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aac:	2303      	movs	r3, #3
 8008aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ab0:	230c      	movs	r3, #12
 8008ab2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ab4:	1d3b      	adds	r3, r7, #4
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4811      	ldr	r0, [pc, #68]	; (8008b00 <HAL_FMC_MspInit+0x110>)
 8008aba:	f7f8 fbbb 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008abe:	2360      	movs	r3, #96	; 0x60
 8008ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aca:	2303      	movs	r3, #3
 8008acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ace:	230c      	movs	r3, #12
 8008ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ad2:	1d3b      	adds	r3, r7, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	480b      	ldr	r0, [pc, #44]	; (8008b04 <HAL_FMC_MspInit+0x114>)
 8008ad8:	f7f8 fbac 	bl	8001234 <HAL_GPIO_Init>
 8008adc:	e000      	b.n	8008ae0 <HAL_FMC_MspInit+0xf0>
    return;
 8008ade:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200229ec 	.word	0x200229ec
 8008aec:	40023800 	.word	0x40023800
 8008af0:	40021400 	.word	0x40021400
 8008af4:	40020800 	.word	0x40020800
 8008af8:	40021800 	.word	0x40021800
 8008afc:	40021000 	.word	0x40021000
 8008b00:	40020c00 	.word	0x40020c00
 8008b04:	40020400 	.word	0x40020400

08008b08 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008b10:	f7ff ff6e 	bl	80089f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008b20:	bf00      	nop
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b2e:	e7fe      	b.n	8008b2e <HardFault_Handler+0x4>

08008b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b34:	e7fe      	b.n	8008b34 <MemManage_Handler+0x4>

08008b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b3a:	e7fe      	b.n	8008b3a <BusFault_Handler+0x4>

08008b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b40:	e7fe      	b.n	8008b40 <UsageFault_Handler+0x4>

08008b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b42:	b480      	push	{r7}
 8008b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b46:	bf00      	nop
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b54:	bf00      	nop
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b62:	bf00      	nop
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b70:	f7f7 fd16 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8008b74:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <SysTick_Handler+0x18>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a02      	ldr	r2, [pc, #8]	; (8008b84 <SysTick_Handler+0x18>)
 8008b7c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20022c6c 	.word	0x20022c6c

08008b88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8008b8c:	4802      	ldr	r0, [pc, #8]	; (8008b98 <DMA1_Stream2_IRQHandler+0x10>)
 8008b8e:	f7f7 ff2b 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008b92:	bf00      	nop
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20022dcc 	.word	0x20022dcc

08008b9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8008ba0:	4802      	ldr	r0, [pc, #8]	; (8008bac <DMA1_Stream4_IRQHandler+0x10>)
 8008ba2:	f7f7 ff21 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20022d18 	.word	0x20022d18

08008bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008bb6:	4811      	ldr	r0, [pc, #68]	; (8008bfc <TIM6_DAC_IRQHandler+0x4c>)
 8008bb8:	f7fb fc35 	bl	8004426 <HAL_TIM_IRQHandler>

  GUI_PID_STATE pidState;
  tp_state_t tpState;
  static uint8_t prevState = 0;

  TP_GetState(&tpState);
 8008bbc:	1d3b      	adds	r3, r7, #4
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fa7c 	bl	80090bc <TP_GetState>

  if (tpState.touchDetected)
 8008bc4:	793b      	ldrb	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <TIM6_DAC_IRQHandler+0x26>
  {
	  pidState.Pressed = tpState.touchDetected;
 8008bca:	793b      	ldrb	r3, [r7, #4]
 8008bcc:	753b      	strb	r3, [r7, #20]
	  pidState.x = tpState.x;
 8008bce:	88fb      	ldrh	r3, [r7, #6]
 8008bd0:	60fb      	str	r3, [r7, #12]
	  pidState.y = tpState.y;
 8008bd2:	893b      	ldrh	r3, [r7, #8]
 8008bd4:	613b      	str	r3, [r7, #16]
  }

  if (prevState != tpState.touchDetected)
 8008bd6:	793a      	ldrb	r2, [r7, #4]
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <TIM6_DAC_IRQHandler+0x50>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d009      	beq.n	8008bf4 <TIM6_DAC_IRQHandler+0x44>
  {
	  prevState = tpState.touchDetected;
 8008be0:	793a      	ldrb	r2, [r7, #4]
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <TIM6_DAC_IRQHandler+0x50>)
 8008be4:	701a      	strb	r2, [r3, #0]
	  pidState.Layer = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	757b      	strb	r3, [r7, #21]
	  GUI_TOUCH_StoreStateEx(&pidState);
 8008bea:	f107 030c 	add.w	r3, r7, #12
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f003 fd1a 	bl	800c628 <GUI_TOUCH_StoreStateEx>
  }

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008bf4:	bf00      	nop
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20022e84 	.word	0x20022e84
 8008c00:	200229f0 	.word	0x200229f0

08008c04 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8008c08:	4802      	ldr	r0, [pc, #8]	; (8008c14 <LTDC_IRQHandler+0x10>)
 8008c0a:	f7f9 fe5f 	bl	80028cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8008c0e:	bf00      	nop
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20022c70 	.word	0x20022c70

08008c18 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8008c1c:	4802      	ldr	r0, [pc, #8]	; (8008c28 <DMA2D_IRQHandler+0x10>)
 8008c1e:	f7f8 f966 	bl	8000eee <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8008c22:	bf00      	nop
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20022ec0 	.word	0x20022ec0

08008c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c30:	4a16      	ldr	r2, [pc, #88]	; (8008c8c <SystemInit+0x60>)
 8008c32:	4b16      	ldr	r3, [pc, #88]	; (8008c8c <SystemInit+0x60>)
 8008c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008c40:	4a13      	ldr	r2, [pc, #76]	; (8008c90 <SystemInit+0x64>)
 8008c42:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <SystemInit+0x64>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c4c:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <SystemInit+0x64>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008c52:	4a0f      	ldr	r2, [pc, #60]	; (8008c90 <SystemInit+0x64>)
 8008c54:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <SystemInit+0x64>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008c62:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <SystemInit+0x64>)
 8008c64:	4a0b      	ldr	r2, [pc, #44]	; (8008c94 <SystemInit+0x68>)
 8008c66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <SystemInit+0x64>)
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <SystemInit+0x64>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <SystemInit+0x64>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <SystemInit+0x60>)
 8008c7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c80:	609a      	str	r2, [r3, #8]
#endif
}
 8008c82:	bf00      	nop
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	e000ed00 	.word	0xe000ed00
 8008c90:	40023800 	.word	0x40023800
 8008c94:	24003010 	.word	0x24003010

08008c98 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008caa:	1d3a      	adds	r2, r7, #4
 8008cac:	2364      	movs	r3, #100	; 0x64
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	2182      	movs	r1, #130	; 0x82
 8008cb4:	480b      	ldr	r0, [pc, #44]	; (8008ce4 <touchReset+0x4c>)
 8008cb6:	f7f8 fe6d 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8008cba:	2014      	movs	r0, #20
 8008cbc:	f7f7 fc90 	bl	80005e0 <HAL_Delay>
	sendBuf[1] = 0x00;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008cc4:	1d3a      	adds	r2, r7, #4
 8008cc6:	2364      	movs	r3, #100	; 0x64
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	2302      	movs	r3, #2
 8008ccc:	2182      	movs	r1, #130	; 0x82
 8008cce:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <touchReset+0x4c>)
 8008cd0:	f7f8 fe60 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8008cd4:	2014      	movs	r0, #20
 8008cd6:	f7f7 fc83 	bl	80005e0 <HAL_Delay>
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20022d78 	.word	0x20022d78

08008ce8 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	4603      	mov	r3, r0
 8008cf0:	460a      	mov	r2, r1
 8008cf2:	71fb      	strb	r3, [r7, #7]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8008d00:	2304      	movs	r3, #4
 8008d02:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8008d04:	f107 020c 	add.w	r2, r7, #12
 8008d08:	2364      	movs	r3, #100	; 0x64
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	2182      	movs	r1, #130	; 0x82
 8008d10:	4817      	ldr	r0, [pc, #92]	; (8008d70 <fnctCmd+0x88>)
 8008d12:	f7f8 fe3f 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8008d16:	f107 020c 	add.w	r2, r7, #12
 8008d1a:	2364      	movs	r3, #100	; 0x64
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	2182      	movs	r1, #130	; 0x82
 8008d22:	4813      	ldr	r0, [pc, #76]	; (8008d70 <fnctCmd+0x88>)
 8008d24:	f7f8 ff44 	bl	8001bb0 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8008d28:	7b3b      	ldrb	r3, [r7, #12]
 8008d2a:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8008d2c:	79bb      	ldrb	r3, [r7, #6]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d009      	beq.n	8008d46 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8008d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d36:	43db      	mvns	r3, r3
 8008d38:	b25a      	sxtb	r2, r3
 8008d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e003      	b.n	8008d4e <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8008d46:	7bfa      	ldrb	r2, [r7, #15]
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8008d4e:	2304      	movs	r3, #4
 8008d50:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008d56:	f107 020c 	add.w	r2, r7, #12
 8008d5a:	2364      	movs	r3, #100	; 0x64
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2302      	movs	r3, #2
 8008d60:	2182      	movs	r1, #130	; 0x82
 8008d62:	4803      	ldr	r0, [pc, #12]	; (8008d70 <fnctCmd+0x88>)
 8008d64:	f7f8 fe16 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 8008d68:	bf00      	nop
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20022d78 	.word	0x20022d78

08008d74 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	460a      	mov	r2, r1
 8008d7e:	71fb      	strb	r3, [r7, #7]
 8008d80:	4613      	mov	r3, r2
 8008d82:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8008d88:	2300      	movs	r3, #0
 8008d8a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 8008d8c:	2317      	movs	r3, #23
 8008d8e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8008d90:	f107 020c 	add.w	r2, r7, #12
 8008d94:	2364      	movs	r3, #100	; 0x64
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	2182      	movs	r1, #130	; 0x82
 8008d9c:	4817      	ldr	r0, [pc, #92]	; (8008dfc <ioAFConfig+0x88>)
 8008d9e:	f7f8 fdf9 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8008da2:	f107 020c 	add.w	r2, r7, #12
 8008da6:	2364      	movs	r3, #100	; 0x64
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	2301      	movs	r3, #1
 8008dac:	2182      	movs	r1, #130	; 0x82
 8008dae:	4813      	ldr	r0, [pc, #76]	; (8008dfc <ioAFConfig+0x88>)
 8008db0:	f7f8 fefe 	bl	8001bb0 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8008db4:	7b3b      	ldrb	r3, [r7, #12]
 8008db6:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8008db8:	79bb      	ldrb	r3, [r7, #6]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d004      	beq.n	8008dc8 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 8008dbe:	7bfa      	ldrb	r2, [r7, #15]
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	73fb      	strb	r3, [r7, #15]
 8008dc6:	e008      	b.n	8008dda <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8008dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	b25a      	sxtb	r2, r3
 8008dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 8008dda:	2317      	movs	r3, #23
 8008ddc:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008de2:	f107 020c 	add.w	r2, r7, #12
 8008de6:	2364      	movs	r3, #100	; 0x64
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	2302      	movs	r3, #2
 8008dec:	2182      	movs	r1, #130	; 0x82
 8008dee:	4803      	ldr	r0, [pc, #12]	; (8008dfc <ioAFConfig+0x88>)
 8008df0:	f7f8 fdd0 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20022d78 	.word	0x20022d78

08008e00 <readX>:

static void readX(uint16_t *x)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 8008e08:	234d      	movs	r3, #77	; 0x4d
 8008e0a:	723b      	strb	r3, [r7, #8]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8008e10:	f107 0208 	add.w	r2, r7, #8
 8008e14:	2364      	movs	r3, #100	; 0x64
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	2301      	movs	r3, #1
 8008e1a:	2182      	movs	r1, #130	; 0x82
 8008e1c:	481f      	ldr	r0, [pc, #124]	; (8008e9c <readX+0x9c>)
 8008e1e:	f7f8 fdb9 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8008e22:	f107 0208 	add.w	r2, r7, #8
 8008e26:	2364      	movs	r3, #100	; 0x64
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	2182      	movs	r1, #130	; 0x82
 8008e2e:	481b      	ldr	r0, [pc, #108]	; (8008e9c <readX+0x9c>)
 8008e30:	f7f8 febe 	bl	8001bb0 <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 8008e34:	7a3b      	ldrb	r3, [r7, #8]
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	7a7a      	ldrb	r2, [r7, #9]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008e44:	4293      	cmp	r3, r2
 8008e46:	dc05      	bgt.n	8008e54 <readX+0x54>
	{
		_x = 3870 - _x;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8008e4e:	330e      	adds	r3, #14
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e004      	b.n	8008e5e <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4a0f      	ldr	r2, [pc, #60]	; (8008ea0 <readX+0xa0>)
 8008e62:	fb82 1203 	smull	r1, r2, r2, r3
 8008e66:	441a      	add	r2, r3
 8008e68:	10d2      	asrs	r2, r2, #3
 8008e6a:	17db      	asrs	r3, r3, #31
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <readX+0x84>
	{
		*x = 0;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 8008e82:	e006      	b.n	8008e92 <readX+0x92>
	else if (*x > 240)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	2bf0      	cmp	r3, #240	; 0xf0
 8008e8a:	d902      	bls.n	8008e92 <readX+0x92>
		*x = 239;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	22ef      	movs	r2, #239	; 0xef
 8008e90:	801a      	strh	r2, [r3, #0]
}
 8008e92:	bf00      	nop
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20022d78 	.word	0x20022d78
 8008ea0:	88888889 	.word	0x88888889

08008ea4 <readY>:

static void readY(uint16_t *y)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 8008eac:	234f      	movs	r3, #79	; 0x4f
 8008eae:	723b      	strb	r3, [r7, #8]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8008eb4:	f107 0208 	add.w	r2, r7, #8
 8008eb8:	2364      	movs	r3, #100	; 0x64
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	2182      	movs	r1, #130	; 0x82
 8008ec0:	4819      	ldr	r0, [pc, #100]	; (8008f28 <readY+0x84>)
 8008ec2:	f7f8 fd67 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8008ec6:	f107 0208 	add.w	r2, r7, #8
 8008eca:	2364      	movs	r3, #100	; 0x64
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	2302      	movs	r3, #2
 8008ed0:	2182      	movs	r1, #130	; 0x82
 8008ed2:	4815      	ldr	r0, [pc, #84]	; (8008f28 <readY+0x84>)
 8008ed4:	f7f8 fe6c 	bl	8001bb0 <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 8008ed8:	7a3b      	ldrb	r3, [r7, #8]
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	7a7a      	ldrb	r2, [r7, #9]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008ee8:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4a0f      	ldr	r2, [pc, #60]	; (8008f2c <readY+0x88>)
 8008eee:	fb82 1203 	smull	r1, r2, r2, r3
 8008ef2:	1052      	asrs	r2, r2, #1
 8008ef4:	17db      	asrs	r3, r3, #31
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d103      	bne.n	8008f0e <readY+0x6a>
	{
		*y = 0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 8008f0c:	e008      	b.n	8008f20 <readY+0x7c>
	else if (*y > 320)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008f16:	d903      	bls.n	8008f20 <readY+0x7c>
		*y = 319;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f240 123f 	movw	r2, #319	; 0x13f
 8008f1e:	801a      	strh	r2, [r3, #0]
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20022d78 	.word	0x20022d78
 8008f2c:	2e8ba2e9 	.word	0x2e8ba2e9

08008f30 <readZ>:

static void readZ(uint16_t *z)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 8008f38:	2351      	movs	r3, #81	; 0x51
 8008f3a:	733b      	strb	r3, [r7, #12]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8008f40:	f107 020c 	add.w	r2, r7, #12
 8008f44:	2364      	movs	r3, #100	; 0x64
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	2182      	movs	r1, #130	; 0x82
 8008f4c:	4810      	ldr	r0, [pc, #64]	; (8008f90 <readZ+0x60>)
 8008f4e:	f7f8 fd21 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8008f52:	f107 020c 	add.w	r2, r7, #12
 8008f56:	2364      	movs	r3, #100	; 0x64
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	2182      	movs	r1, #130	; 0x82
 8008f5e:	480c      	ldr	r0, [pc, #48]	; (8008f90 <readZ+0x60>)
 8008f60:	f7f8 fe26 	bl	8001bb0 <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 8008f64:	7b3b      	ldrb	r3, [r7, #12]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	b21a      	sxth	r2, r3
 8008f6a:	7b7b      	ldrb	r3, [r7, #13]
 8008f6c:	b21b      	sxth	r3, r3
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	b21b      	sxth	r3, r3
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <readZ+0x56>
	{
		*z = 0;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	801a      	strh	r2, [r3, #0]
	}
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20022d78 	.word	0x20022d78

08008f94 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af02      	add	r7, sp, #8
	touchReset();
 8008f9a:	f7ff fe7d 	bl	8008c98 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	2001      	movs	r0, #1
 8008fa2:	f7ff fea1 	bl	8008ce8 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	2002      	movs	r0, #2
 8008faa:	f7ff fe9d 	bl	8008ce8 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 8008fae:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <TP_Config+0x120>)
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008fb4:	1d3a      	adds	r2, r7, #4
 8008fb6:	2364      	movs	r3, #100	; 0x64
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	2302      	movs	r3, #2
 8008fbc:	2182      	movs	r1, #130	; 0x82
 8008fbe:	483e      	ldr	r0, [pc, #248]	; (80090b8 <TP_Config+0x124>)
 8008fc0:	f7f8 fce8 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8008fc4:	2014      	movs	r0, #20
 8008fc6:	f7f7 fb0b 	bl	80005e0 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 8008fca:	2321      	movs	r3, #33	; 0x21
 8008fcc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008fd2:	1d3a      	adds	r2, r7, #4
 8008fd4:	2364      	movs	r3, #100	; 0x64
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2182      	movs	r1, #130	; 0x82
 8008fdc:	4836      	ldr	r0, [pc, #216]	; (80090b8 <TP_Config+0x124>)
 8008fde:	f7f8 fcd9 	bl	8001994 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	201e      	movs	r0, #30
 8008fe6:	f7ff fec5 	bl	8008d74 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8008fea:	2341      	movs	r3, #65	; 0x41
 8008fec:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 8008fee:	239a      	movs	r3, #154	; 0x9a
 8008ff0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8008ff2:	1d3a      	adds	r2, r7, #4
 8008ff4:	2364      	movs	r3, #100	; 0x64
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	2182      	movs	r1, #130	; 0x82
 8008ffc:	482e      	ldr	r0, [pc, #184]	; (80090b8 <TP_Config+0x124>)
 8008ffe:	f7f8 fcc9 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 8009002:	234a      	movs	r3, #74	; 0x4a
 8009004:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8009006:	2301      	movs	r3, #1
 8009008:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800900a:	1d3a      	adds	r2, r7, #4
 800900c:	2364      	movs	r3, #100	; 0x64
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	2302      	movs	r3, #2
 8009012:	2182      	movs	r1, #130	; 0x82
 8009014:	4828      	ldr	r0, [pc, #160]	; (80090b8 <TP_Config+0x124>)
 8009016:	f7f8 fcbd 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 800901a:	234b      	movs	r3, #75	; 0x4b
 800901c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800901e:	2301      	movs	r3, #1
 8009020:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8009022:	1d3a      	adds	r2, r7, #4
 8009024:	2364      	movs	r3, #100	; 0x64
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	2302      	movs	r3, #2
 800902a:	2182      	movs	r1, #130	; 0x82
 800902c:	4822      	ldr	r0, [pc, #136]	; (80090b8 <TP_Config+0x124>)
 800902e:	f7f8 fcb1 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8009032:	234b      	movs	r3, #75	; 0x4b
 8009034:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 8009036:	2300      	movs	r3, #0
 8009038:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800903a:	1d3a      	adds	r2, r7, #4
 800903c:	2364      	movs	r3, #100	; 0x64
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	2302      	movs	r3, #2
 8009042:	2182      	movs	r1, #130	; 0x82
 8009044:	481c      	ldr	r0, [pc, #112]	; (80090b8 <TP_Config+0x124>)
 8009046:	f7f8 fca5 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 800904a:	2356      	movs	r3, #86	; 0x56
 800904c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800904e:	2301      	movs	r3, #1
 8009050:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8009052:	1d3a      	adds	r2, r7, #4
 8009054:	2364      	movs	r3, #100	; 0x64
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	2302      	movs	r3, #2
 800905a:	2182      	movs	r1, #130	; 0x82
 800905c:	4816      	ldr	r0, [pc, #88]	; (80090b8 <TP_Config+0x124>)
 800905e:	f7f8 fc99 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8009062:	2358      	movs	r3, #88	; 0x58
 8009064:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8009066:	2301      	movs	r3, #1
 8009068:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800906a:	1d3a      	adds	r2, r7, #4
 800906c:	2364      	movs	r3, #100	; 0x64
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2302      	movs	r3, #2
 8009072:	2182      	movs	r1, #130	; 0x82
 8009074:	4810      	ldr	r0, [pc, #64]	; (80090b8 <TP_Config+0x124>)
 8009076:	f7f8 fc8d 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 800907e:	2303      	movs	r3, #3
 8009080:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8009082:	1d3a      	adds	r2, r7, #4
 8009084:	2364      	movs	r3, #100	; 0x64
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2302      	movs	r3, #2
 800908a:	2182      	movs	r1, #130	; 0x82
 800908c:	480a      	ldr	r0, [pc, #40]	; (80090b8 <TP_Config+0x124>)
 800908e:	f7f8 fc81 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8009092:	230b      	movs	r3, #11
 8009094:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8009096:	23ff      	movs	r3, #255	; 0xff
 8009098:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800909a:	1d3a      	adds	r2, r7, #4
 800909c:	2364      	movs	r3, #100	; 0x64
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	2302      	movs	r3, #2
 80090a2:	2182      	movs	r1, #130	; 0x82
 80090a4:	4804      	ldr	r0, [pc, #16]	; (80090b8 <TP_Config+0x124>)
 80090a6:	f7f8 fc75 	bl	8001994 <HAL_I2C_Master_Transmit>

}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	080118d8 	.word	0x080118d8
 80090b8:	20022d78 	.word	0x20022d78

080090bc <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	733b      	strb	r3, [r7, #12]
 80090c8:	2300      	movs	r3, #0
 80090ca:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80090cc:	f107 020c 	add.w	r2, r7, #12
 80090d0:	2364      	movs	r3, #100	; 0x64
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2301      	movs	r3, #1
 80090d6:	2182      	movs	r1, #130	; 0x82
 80090d8:	483b      	ldr	r0, [pc, #236]	; (80091c8 <TP_GetState+0x10c>)
 80090da:	f7f8 fc5b 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80090de:	f107 020c 	add.w	r2, r7, #12
 80090e2:	2364      	movs	r3, #100	; 0x64
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	2301      	movs	r3, #1
 80090e8:	2182      	movs	r1, #130	; 0x82
 80090ea:	4837      	ldr	r0, [pc, #220]	; (80091c8 <TP_GetState+0x10c>)
 80090ec:	f7f8 fd60 	bl	8001bb0 <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 80090f0:	7b3b      	ldrb	r3, [r7, #12]
 80090f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d039      	beq.n	8009178 <TP_GetState+0xbc>
	{
		readX(&x);
 8009104:	f107 0312 	add.w	r3, r7, #18
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fe79 	bl	8008e00 <readX>
		readY(&y);
 800910e:	f107 0310 	add.w	r3, r7, #16
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff fec6 	bl	8008ea4 <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 8009118:	8a7a      	ldrh	r2, [r7, #18]
 800911a:	4b2c      	ldr	r3, [pc, #176]	; (80091cc <TP_GetState+0x110>)
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d905      	bls.n	800912e <TP_GetState+0x72>
 8009122:	8a7a      	ldrh	r2, [r7, #18]
 8009124:	4b29      	ldr	r3, [pc, #164]	; (80091cc <TP_GetState+0x110>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	b29b      	uxth	r3, r3
 800912c:	e004      	b.n	8009138 <TP_GetState+0x7c>
 800912e:	4b27      	ldr	r3, [pc, #156]	; (80091cc <TP_GetState+0x110>)
 8009130:	881a      	ldrh	r2, [r3, #0]
 8009132:	8a7b      	ldrh	r3, [r7, #18]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	b29b      	uxth	r3, r3
 8009138:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 800913a:	8a3a      	ldrh	r2, [r7, #16]
 800913c:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <TP_GetState+0x114>)
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d905      	bls.n	8009150 <TP_GetState+0x94>
 8009144:	8a3a      	ldrh	r2, [r7, #16]
 8009146:	4b22      	ldr	r3, [pc, #136]	; (80091d0 <TP_GetState+0x114>)
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	b29b      	uxth	r3, r3
 800914e:	e004      	b.n	800915a <TP_GetState+0x9e>
 8009150:	4b1f      	ldr	r3, [pc, #124]	; (80091d0 <TP_GetState+0x114>)
 8009152:	881a      	ldrh	r2, [r3, #0]
 8009154:	8a3b      	ldrh	r3, [r7, #16]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	b29b      	uxth	r3, r3
 800915a:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 800915c:	8afa      	ldrh	r2, [r7, #22]
 800915e:	8abb      	ldrh	r3, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	2b05      	cmp	r3, #5
 8009164:	dd05      	ble.n	8009172 <TP_GetState+0xb6>
		{
			_x = x;
 8009166:	8a7a      	ldrh	r2, [r7, #18]
 8009168:	4b18      	ldr	r3, [pc, #96]	; (80091cc <TP_GetState+0x110>)
 800916a:	801a      	strh	r2, [r3, #0]
			_y = y;
 800916c:	8a3a      	ldrh	r2, [r7, #16]
 800916e:	4b18      	ldr	r3, [pc, #96]	; (80091d0 <TP_GetState+0x114>)
 8009170:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 8009172:	4818      	ldr	r0, [pc, #96]	; (80091d4 <TP_GetState+0x118>)
 8009174:	f7ff fedc 	bl	8008f30 <readZ>
	}

	state->x = _x;
 8009178:	4b14      	ldr	r3, [pc, #80]	; (80091cc <TP_GetState+0x110>)
 800917a:	881a      	ldrh	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8009180:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <TP_GetState+0x114>)
 8009182:	881a      	ldrh	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 8009188:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <TP_GetState+0x118>)
 800918a:	881a      	ldrh	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 8009190:	234b      	movs	r3, #75	; 0x4b
 8009192:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 8009194:	2301      	movs	r3, #1
 8009196:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8009198:	f107 020c 	add.w	r2, r7, #12
 800919c:	2364      	movs	r3, #100	; 0x64
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2302      	movs	r3, #2
 80091a2:	2182      	movs	r1, #130	; 0x82
 80091a4:	4808      	ldr	r0, [pc, #32]	; (80091c8 <TP_GetState+0x10c>)
 80091a6:	f7f8 fbf5 	bl	8001994 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 80091aa:	2300      	movs	r3, #0
 80091ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80091ae:	f107 020c 	add.w	r2, r7, #12
 80091b2:	2364      	movs	r3, #100	; 0x64
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	2302      	movs	r3, #2
 80091b8:	2182      	movs	r1, #130	; 0x82
 80091ba:	4803      	ldr	r0, [pc, #12]	; (80091c8 <TP_GetState+0x10c>)
 80091bc:	f7f8 fbea 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 80091c0:	bf00      	nop
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20022d78 	.word	0x20022d78
 80091cc:	200229f2 	.word	0x200229f2
 80091d0:	200229f4 	.word	0x200229f4
 80091d4:	200229f6 	.word	0x200229f6

080091d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80091d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009210 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80091dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80091de:	e003      	b.n	80091e8 <LoopCopyDataInit>

080091e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80091e0:	4b0c      	ldr	r3, [pc, #48]	; (8009214 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80091e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80091e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80091e6:	3104      	adds	r1, #4

080091e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80091e8:	480b      	ldr	r0, [pc, #44]	; (8009218 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80091ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80091ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80091f0:	d3f6      	bcc.n	80091e0 <CopyDataInit>
  ldr  r2, =_sbss
 80091f2:	4a0b      	ldr	r2, [pc, #44]	; (8009220 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80091f4:	e002      	b.n	80091fc <LoopFillZerobss>

080091f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80091f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80091f8:	f842 3b04 	str.w	r3, [r2], #4

080091fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80091fc:	4b09      	ldr	r3, [pc, #36]	; (8009224 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80091fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009200:	d3f9      	bcc.n	80091f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009202:	f7ff fd13 	bl	8008c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009206:	f008 fae1 	bl	80117cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800920a:	f7fe fd13 	bl	8007c34 <main>
  bx  lr    
 800920e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8009210:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8009214:	08013368 	.word	0x08013368
  ldr  r0, =_sdata
 8009218:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800921c:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8009220:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8009224:	200230cc 	.word	0x200230cc

08009228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009228:	e7fe      	b.n	8009228 <ADC_IRQHandler>
	...

0800922c <WM__SendMessage>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4c0d      	ldr	r4, [pc, #52]	; (8009264 <WM__SendMessage+0x38>)
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	2b13      	cmp	r3, #19
 8009234:	4606      	mov	r6, r0
 8009236:	460d      	mov	r5, r1
 8009238:	dc12      	bgt.n	8009260 <WM__SendMessage+0x34>
 800923a:	f005 fd5b 	bl	800ecf4 <GUI_ALLOC_h2p>
 800923e:	6903      	ldr	r3, [r0, #16]
 8009240:	606e      	str	r6, [r5, #4]
 8009242:	b143      	cbz	r3, 8009256 <WM__SendMessage+0x2a>
 8009244:	6822      	ldr	r2, [r4, #0]
 8009246:	4628      	mov	r0, r5
 8009248:	3201      	adds	r2, #1
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	4798      	blx	r3
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	bd70      	pop	{r4, r5, r6, pc}
 8009256:	4628      	mov	r0, r5
 8009258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800925c:	f000 bdbc 	b.w	8009dd8 <WM_DefaultProc>
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	bf00      	nop
 8009264:	200229f8 	.word	0x200229f8

08009268 <WM__IsEnabled>:
 8009268:	b508      	push	{r3, lr}
 800926a:	f005 fd43 	bl	800ecf4 <GUI_ALLOC_h2p>
 800926e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009270:	f080 0010 	eor.w	r0, r0, #16
 8009274:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8009278:	bd08      	pop	{r3, pc}

0800927a <WM__IsAncestor>:
 800927a:	b510      	push	{r4, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	b908      	cbnz	r0, 8009284 <WM__IsAncestor+0xa>
 8009280:	2000      	movs	r0, #0
 8009282:	bd10      	pop	{r4, pc}
 8009284:	2900      	cmp	r1, #0
 8009286:	d0fb      	beq.n	8009280 <WM__IsAncestor+0x6>
 8009288:	f005 fd34 	bl	800ecf4 <GUI_ALLOC_h2p>
 800928c:	6980      	ldr	r0, [r0, #24]
 800928e:	42a0      	cmp	r0, r4
 8009290:	d002      	beq.n	8009298 <WM__IsAncestor+0x1e>
 8009292:	2800      	cmp	r0, #0
 8009294:	d1f8      	bne.n	8009288 <WM__IsAncestor+0xe>
 8009296:	e7f3      	b.n	8009280 <WM__IsAncestor+0x6>
 8009298:	2001      	movs	r0, #1
 800929a:	bd10      	pop	{r4, pc}

0800929c <WM__ReleaseCapture>:
 800929c:	b530      	push	{r4, r5, lr}
 800929e:	4d0a      	ldr	r5, [pc, #40]	; (80092c8 <WM__ReleaseCapture+0x2c>)
 80092a0:	4c0a      	ldr	r4, [pc, #40]	; (80092cc <WM__ReleaseCapture+0x30>)
 80092a2:	682b      	ldr	r3, [r5, #0]
 80092a4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80092a8:	b085      	sub	sp, #20
 80092aa:	b150      	cbz	r0, 80092c2 <WM__ReleaseCapture+0x26>
 80092ac:	a904      	add	r1, sp, #16
 80092ae:	2318      	movs	r3, #24
 80092b0:	f841 3d10 	str.w	r3, [r1, #-16]!
 80092b4:	4669      	mov	r1, sp
 80092b6:	f7ff ffb9 	bl	800922c <WM__SendMessage>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 80092c2:	b005      	add	sp, #20
 80092c4:	bd30      	pop	{r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	20022f6c 	.word	0x20022f6c
 80092cc:	20022f88 	.word	0x20022f88

080092d0 <WM_ReleaseCapture>:
 80092d0:	f7ff bfe4 	b.w	800929c <WM__ReleaseCapture>

080092d4 <WM_IsWindow>:
 80092d4:	f000 b9ee 	b.w	80096b4 <WM__IsWindow>

080092d8 <WM_GetParent>:
 80092d8:	b508      	push	{r3, lr}
 80092da:	4603      	mov	r3, r0
 80092dc:	b110      	cbz	r0, 80092e4 <WM_GetParent+0xc>
 80092de:	f005 fd09 	bl	800ecf4 <GUI_ALLOC_h2p>
 80092e2:	6983      	ldr	r3, [r0, #24]
 80092e4:	4618      	mov	r0, r3
 80092e6:	bd08      	pop	{r3, pc}

080092e8 <WM_GetFirstChild>:
 80092e8:	b508      	push	{r3, lr}
 80092ea:	4603      	mov	r3, r0
 80092ec:	b110      	cbz	r0, 80092f4 <WM_GetFirstChild+0xc>
 80092ee:	f005 fd01 	bl	800ecf4 <GUI_ALLOC_h2p>
 80092f2:	69c3      	ldr	r3, [r0, #28]
 80092f4:	4618      	mov	r0, r3
 80092f6:	bd08      	pop	{r3, pc}

080092f8 <WM_GetDesktopWindow>:
 80092f8:	4b03      	ldr	r3, [pc, #12]	; (8009308 <WM_GetDesktopWindow+0x10>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	7c5a      	ldrb	r2, [r3, #17]
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <WM_GetDesktopWindow+0x14>)
 8009300:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	2000002c 	.word	0x2000002c
 800930c:	20022f4c 	.word	0x20022f4c

08009310 <_OnExit>:
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <_OnExit+0x2c>)
 8009312:	490b      	ldr	r1, [pc, #44]	; (8009340 <_OnExit+0x30>)
 8009314:	2300      	movs	r3, #0
 8009316:	7013      	strb	r3, [r2, #0]
 8009318:	4a0a      	ldr	r2, [pc, #40]	; (8009344 <_OnExit+0x34>)
 800931a:	600b      	str	r3, [r1, #0]
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <_OnExit+0x38>)
 8009320:	604b      	str	r3, [r1, #4]
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	4a09      	ldr	r2, [pc, #36]	; (800934c <_OnExit+0x3c>)
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	6053      	str	r3, [r2, #4]
 800932a:	4a09      	ldr	r2, [pc, #36]	; (8009350 <_OnExit+0x40>)
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <_OnExit+0x44>)
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	4a09      	ldr	r2, [pc, #36]	; (8009358 <_OnExit+0x48>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4a09      	ldr	r2, [pc, #36]	; (800935c <_OnExit+0x4c>)
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	4770      	bx	lr
 800933c:	20022a24 	.word	0x20022a24
 8009340:	20022f5c 	.word	0x20022f5c
 8009344:	200229fc 	.word	0x200229fc
 8009348:	20022f80 	.word	0x20022f80
 800934c:	20022f88 	.word	0x20022f88
 8009350:	20022f94 	.word	0x20022f94
 8009354:	20022f48 	.word	0x20022f48
 8009358:	20022f74 	.word	0x20022f74
 800935c:	20022f84 	.word	0x20022f84

08009360 <_Findy1>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	b085      	sub	sp, #20
 8009366:	460c      	mov	r4, r1
 8009368:	4616      	mov	r6, r2
 800936a:	2d00      	cmp	r5, #0
 800936c:	d04c      	beq.n	8009408 <_Findy1+0xa8>
 800936e:	4628      	mov	r0, r5
 8009370:	f005 fcca 	bl	800ed08 <GUI_ALLOC_LockH>
 8009374:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8009376:	9001      	str	r0, [sp, #4]
 8009378:	07bb      	lsls	r3, r7, #30
 800937a:	4601      	mov	r1, r0
 800937c:	d53d      	bpl.n	80093fa <_Findy1+0x9a>
 800937e:	ad02      	add	r5, sp, #8
 8009380:	b126      	cbz	r6, 800938c <_Findy1+0x2c>
 8009382:	4628      	mov	r0, r5
 8009384:	4632      	mov	r2, r6
 8009386:	f002 ff01 	bl	800c18c <GUI__IntersectRects>
 800938a:	e002      	b.n	8009392 <_Findy1+0x32>
 800938c:	c803      	ldmia	r0, {r0, r1}
 800938e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f004 f888 	bl	800d4aa <GUI_RectsIntersect>
 800939a:	b370      	cbz	r0, 80093fa <_Findy1+0x9a>
 800939c:	f017 0f01 	tst.w	r7, #1
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	d11e      	bne.n	80093e2 <_Findy1+0x82>
 80093a4:	b13e      	cbz	r6, 80093b6 <_Findy1+0x56>
 80093a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80093aa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	bfa8      	it	ge
 80093b2:	4613      	movge	r3, r2
 80093b4:	e001      	b.n	80093ba <_Findy1+0x5a>
 80093b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80093ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80093be:	4293      	cmp	r3, r2
 80093c0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80093c4:	dd06      	ble.n	80093d4 <_Findy1+0x74>
 80093c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80093ca:	b219      	sxth	r1, r3
 80093cc:	428a      	cmp	r2, r1
 80093ce:	db14      	blt.n	80093fa <_Findy1+0x9a>
 80093d0:	3b01      	subs	r3, #1
 80093d2:	e004      	b.n	80093de <_Findy1+0x7e>
 80093d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80093d8:	b219      	sxth	r1, r3
 80093da:	428a      	cmp	r2, r1
 80093dc:	dd0d      	ble.n	80093fa <_Findy1+0x9a>
 80093de:	80e3      	strh	r3, [r4, #6]
 80093e0:	e00b      	b.n	80093fa <_Findy1+0x9a>
 80093e2:	69df      	ldr	r7, [r3, #28]
 80093e4:	b14f      	cbz	r7, 80093fa <_Findy1+0x9a>
 80093e6:	4638      	mov	r0, r7
 80093e8:	4621      	mov	r1, r4
 80093ea:	462a      	mov	r2, r5
 80093ec:	f7ff ffb8 	bl	8009360 <_Findy1>
 80093f0:	4638      	mov	r0, r7
 80093f2:	f005 fc7f 	bl	800ecf4 <GUI_ALLOC_h2p>
 80093f6:	6a07      	ldr	r7, [r0, #32]
 80093f8:	e7f4      	b.n	80093e4 <_Findy1+0x84>
 80093fa:	a804      	add	r0, sp, #16
 80093fc:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009400:	6a1d      	ldr	r5, [r3, #32]
 8009402:	f005 fc8f 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009406:	e7b0      	b.n	800936a <_Findy1+0xa>
 8009408:	b005      	add	sp, #20
 800940a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800940c <_Findx0>:
 800940c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	460f      	mov	r7, r1
 8009414:	4690      	mov	r8, r2
 8009416:	2500      	movs	r5, #0
 8009418:	2c00      	cmp	r4, #0
 800941a:	d037      	beq.n	800948c <_Findx0+0x80>
 800941c:	4620      	mov	r0, r4
 800941e:	f005 fc73 	bl	800ed08 <GUI_ALLOC_LockH>
 8009422:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009424:	9001      	str	r0, [sp, #4]
 8009426:	07b2      	lsls	r2, r6, #30
 8009428:	4601      	mov	r1, r0
 800942a:	d528      	bpl.n	800947e <_Findx0+0x72>
 800942c:	ac02      	add	r4, sp, #8
 800942e:	f1b8 0f00 	cmp.w	r8, #0
 8009432:	d004      	beq.n	800943e <_Findx0+0x32>
 8009434:	4620      	mov	r0, r4
 8009436:	4642      	mov	r2, r8
 8009438:	f002 fea8 	bl	800c18c <GUI__IntersectRects>
 800943c:	e002      	b.n	8009444 <_Findx0+0x38>
 800943e:	c803      	ldmia	r0, {r0, r1}
 8009440:	e884 0003 	stmia.w	r4, {r0, r1}
 8009444:	4638      	mov	r0, r7
 8009446:	4621      	mov	r1, r4
 8009448:	f004 f82f 	bl	800d4aa <GUI_RectsIntersect>
 800944c:	b1b8      	cbz	r0, 800947e <_Findx0+0x72>
 800944e:	07f3      	lsls	r3, r6, #31
 8009450:	d405      	bmi.n	800945e <_Findx0+0x52>
 8009452:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	803b      	strh	r3, [r7, #0]
 800945a:	2501      	movs	r5, #1
 800945c:	e00f      	b.n	800947e <_Findx0+0x72>
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	69de      	ldr	r6, [r3, #28]
 8009462:	b166      	cbz	r6, 800947e <_Findx0+0x72>
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	4622      	mov	r2, r4
 800946a:	f7ff ffcf 	bl	800940c <_Findx0>
 800946e:	2800      	cmp	r0, #0
 8009470:	4630      	mov	r0, r6
 8009472:	bf18      	it	ne
 8009474:	2501      	movne	r5, #1
 8009476:	f005 fc3d 	bl	800ecf4 <GUI_ALLOC_h2p>
 800947a:	6a06      	ldr	r6, [r0, #32]
 800947c:	e7f1      	b.n	8009462 <_Findx0+0x56>
 800947e:	a804      	add	r0, sp, #16
 8009480:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009484:	6a1c      	ldr	r4, [r3, #32]
 8009486:	f005 fc4d 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800948a:	e7c5      	b.n	8009418 <_Findx0+0xc>
 800948c:	4628      	mov	r0, r5
 800948e:	b004      	add	sp, #16
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009494 <_Findx1>:
 8009494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009496:	4604      	mov	r4, r0
 8009498:	b085      	sub	sp, #20
 800949a:	460e      	mov	r6, r1
 800949c:	4617      	mov	r7, r2
 800949e:	2c00      	cmp	r4, #0
 80094a0:	d031      	beq.n	8009506 <_Findx1+0x72>
 80094a2:	4620      	mov	r0, r4
 80094a4:	f005 fc30 	bl	800ed08 <GUI_ALLOC_LockH>
 80094a8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80094aa:	9001      	str	r0, [sp, #4]
 80094ac:	07aa      	lsls	r2, r5, #30
 80094ae:	4601      	mov	r1, r0
 80094b0:	d522      	bpl.n	80094f8 <_Findx1+0x64>
 80094b2:	ac02      	add	r4, sp, #8
 80094b4:	b127      	cbz	r7, 80094c0 <_Findx1+0x2c>
 80094b6:	4620      	mov	r0, r4
 80094b8:	463a      	mov	r2, r7
 80094ba:	f002 fe67 	bl	800c18c <GUI__IntersectRects>
 80094be:	e002      	b.n	80094c6 <_Findx1+0x32>
 80094c0:	c803      	ldmia	r0, {r0, r1}
 80094c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80094c6:	4630      	mov	r0, r6
 80094c8:	4621      	mov	r1, r4
 80094ca:	f003 ffee 	bl	800d4aa <GUI_RectsIntersect>
 80094ce:	b198      	cbz	r0, 80094f8 <_Findx1+0x64>
 80094d0:	07eb      	lsls	r3, r5, #31
 80094d2:	d404      	bmi.n	80094de <_Findx1+0x4a>
 80094d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80094d8:	3b01      	subs	r3, #1
 80094da:	80b3      	strh	r3, [r6, #4]
 80094dc:	e00c      	b.n	80094f8 <_Findx1+0x64>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	69dd      	ldr	r5, [r3, #28]
 80094e2:	b14d      	cbz	r5, 80094f8 <_Findx1+0x64>
 80094e4:	4628      	mov	r0, r5
 80094e6:	4631      	mov	r1, r6
 80094e8:	4622      	mov	r2, r4
 80094ea:	f7ff ffd3 	bl	8009494 <_Findx1>
 80094ee:	4628      	mov	r0, r5
 80094f0:	f005 fc00 	bl	800ecf4 <GUI_ALLOC_h2p>
 80094f4:	6a05      	ldr	r5, [r0, #32]
 80094f6:	e7f4      	b.n	80094e2 <_Findx1+0x4e>
 80094f8:	a804      	add	r0, sp, #16
 80094fa:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80094fe:	6a1c      	ldr	r4, [r3, #32]
 8009500:	f005 fc10 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009504:	e7cb      	b.n	800949e <_Findx1+0xa>
 8009506:	b005      	add	sp, #20
 8009508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800950c <WM__ClipAtParentBorders>:
 800950c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800950e:	4607      	mov	r7, r0
 8009510:	460d      	mov	r5, r1
 8009512:	4628      	mov	r0, r5
 8009514:	f005 fbf8 	bl	800ed08 <GUI_ALLOC_LockH>
 8009518:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800951a:	ac02      	add	r4, sp, #8
 800951c:	f013 0602 	ands.w	r6, r3, #2
 8009520:	4601      	mov	r1, r0
 8009522:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009526:	d104      	bne.n	8009532 <WM__ClipAtParentBorders+0x26>
 8009528:	4620      	mov	r0, r4
 800952a:	f005 fbfb 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800952e:	4630      	mov	r0, r6
 8009530:	e016      	b.n	8009560 <WM__ClipAtParentBorders+0x54>
 8009532:	4638      	mov	r0, r7
 8009534:	f002 fe5c 	bl	800c1f0 <GUI__IntersectRect>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	699e      	ldr	r6, [r3, #24]
 800953c:	4620      	mov	r0, r4
 800953e:	b956      	cbnz	r6, 8009556 <WM__ClipAtParentBorders+0x4a>
 8009540:	f005 fbf0 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009544:	4b07      	ldr	r3, [pc, #28]	; (8009564 <WM__ClipAtParentBorders+0x58>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	4295      	cmp	r5, r2
 800954a:	d008      	beq.n	800955e <WM__ClipAtParentBorders+0x52>
 800954c:	6858      	ldr	r0, [r3, #4]
 800954e:	1a2b      	subs	r3, r5, r0
 8009550:	4258      	negs	r0, r3
 8009552:	4158      	adcs	r0, r3
 8009554:	e004      	b.n	8009560 <WM__ClipAtParentBorders+0x54>
 8009556:	f005 fbe5 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800955a:	4635      	mov	r5, r6
 800955c:	e7d9      	b.n	8009512 <WM__ClipAtParentBorders+0x6>
 800955e:	2001      	movs	r0, #1
 8009560:	b003      	add	sp, #12
 8009562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009564:	20022f4c 	.word	0x20022f4c

08009568 <WM__InsertWindowIntoList>:
 8009568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956a:	4604      	mov	r4, r0
 800956c:	b085      	sub	sp, #20
 800956e:	460d      	mov	r5, r1
 8009570:	2900      	cmp	r1, #0
 8009572:	d049      	beq.n	8009608 <WM__InsertWindowIntoList+0xa0>
 8009574:	f005 fbc8 	bl	800ed08 <GUI_ALLOC_LockH>
 8009578:	2300      	movs	r3, #0
 800957a:	6203      	str	r3, [r0, #32]
 800957c:	6185      	str	r5, [r0, #24]
 800957e:	9001      	str	r0, [sp, #4]
 8009580:	4628      	mov	r0, r5
 8009582:	f005 fbc1 	bl	800ed08 <GUI_ALLOC_LockH>
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	69c5      	ldr	r5, [r0, #28]
 800958a:	9002      	str	r0, [sp, #8]
 800958c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800958e:	b92d      	cbnz	r5, 800959c <WM__InsertWindowIntoList+0x34>
 8009590:	61c4      	str	r4, [r0, #28]
 8009592:	a801      	add	r0, sp, #4
 8009594:	f005 fbc6 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009598:	a802      	add	r0, sp, #8
 800959a:	e033      	b.n	8009604 <WM__InsertWindowIntoList+0x9c>
 800959c:	4628      	mov	r0, r5
 800959e:	f005 fbb3 	bl	800ed08 <GUI_ALLOC_LockH>
 80095a2:	ae04      	add	r6, sp, #16
 80095a4:	f007 0708 	and.w	r7, r7, #8
 80095a8:	f846 0d04 	str.w	r0, [r6, #-4]!
 80095ac:	b977      	cbnz	r7, 80095cc <WM__InsertWindowIntoList+0x64>
 80095ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095b0:	071a      	lsls	r2, r3, #28
 80095b2:	d50b      	bpl.n	80095cc <WM__InsertWindowIntoList+0x64>
 80095b4:	9b01      	ldr	r3, [sp, #4]
 80095b6:	621d      	str	r5, [r3, #32]
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	a801      	add	r0, sp, #4
 80095bc:	61dc      	str	r4, [r3, #28]
 80095be:	f005 fbb1 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80095c2:	a802      	add	r0, sp, #8
 80095c4:	f005 fbae 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80095c8:	4630      	mov	r0, r6
 80095ca:	e01b      	b.n	8009604 <WM__InsertWindowIntoList+0x9c>
 80095cc:	a802      	add	r0, sp, #8
 80095ce:	f005 fba9 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80095d2:	4630      	mov	r0, r6
 80095d4:	f005 fba6 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80095d8:	4628      	mov	r0, r5
 80095da:	f005 fb8b 	bl	800ecf4 <GUI_ALLOC_h2p>
 80095de:	9003      	str	r0, [sp, #12]
 80095e0:	9b03      	ldr	r3, [sp, #12]
 80095e2:	6a1d      	ldr	r5, [r3, #32]
 80095e4:	b90d      	cbnz	r5, 80095ea <WM__InsertWindowIntoList+0x82>
 80095e6:	621c      	str	r4, [r3, #32]
 80095e8:	e00b      	b.n	8009602 <WM__InsertWindowIntoList+0x9a>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f005 fb82 	bl	800ecf4 <GUI_ALLOC_h2p>
 80095f0:	2f00      	cmp	r7, #0
 80095f2:	d1f4      	bne.n	80095de <WM__InsertWindowIntoList+0x76>
 80095f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095f6:	071b      	lsls	r3, r3, #28
 80095f8:	d5f1      	bpl.n	80095de <WM__InsertWindowIntoList+0x76>
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	621c      	str	r4, [r3, #32]
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	621d      	str	r5, [r3, #32]
 8009602:	a801      	add	r0, sp, #4
 8009604:	f005 fb8e 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009608:	b005      	add	sp, #20
 800960a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800960c <WM__Client2Screen>:
 800960c:	4603      	mov	r3, r0
 800960e:	4608      	mov	r0, r1
 8009610:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009614:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009618:	f003 bff4 	b.w	800d604 <GUI_MoveRect>

0800961c <_SetClipRectUserIntersect>:
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <_SetClipRectUserIntersect+0x48>)
 800961e:	b530      	push	{r4, r5, lr}
 8009620:	681c      	ldr	r4, [r3, #0]
 8009622:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009624:	b085      	sub	sp, #20
 8009626:	4605      	mov	r5, r0
 8009628:	b1ba      	cbz	r2, 800965a <_SetClipRectUserIntersect+0x3e>
 800962a:	6810      	ldr	r0, [r2, #0]
 800962c:	6851      	ldr	r1, [r2, #4]
 800962e:	ab02      	add	r3, sp, #8
 8009630:	c303      	stmia	r3!, {r0, r1}
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <_SetClipRectUserIntersect+0x4c>)
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	b900      	cbnz	r0, 800963a <_SetClipRectUserIntersect+0x1e>
 8009638:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800963a:	f005 fb65 	bl	800ed08 <GUI_ALLOC_LockH>
 800963e:	ac04      	add	r4, sp, #16
 8009640:	a902      	add	r1, sp, #8
 8009642:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8009646:	f7ff ffe1 	bl	800960c <WM__Client2Screen>
 800964a:	4620      	mov	r0, r4
 800964c:	f005 fb6a 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009650:	a802      	add	r0, sp, #8
 8009652:	4629      	mov	r1, r5
 8009654:	f002 fdcc 	bl	800c1f0 <GUI__IntersectRect>
 8009658:	a802      	add	r0, sp, #8
 800965a:	f002 f827 	bl	800b6ac <LCD_SetClipRectEx>
 800965e:	b005      	add	sp, #20
 8009660:	bd30      	pop	{r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	2000002c 	.word	0x2000002c
 8009668:	20022f48 	.word	0x20022f48

0800966c <WM__ActivateClipRect>:
 800966c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <WM__ActivateClipRect+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009676:	b10a      	cbz	r2, 800967c <WM__ActivateClipRect+0x10>
 8009678:	480c      	ldr	r0, [pc, #48]	; (80096ac <WM__ActivateClipRect+0x40>)
 800967a:	e011      	b.n	80096a0 <WM__ActivateClipRect+0x34>
 800967c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800967e:	f005 fb43 	bl	800ed08 <GUI_ALLOC_LockH>
 8009682:	9001      	str	r0, [sp, #4]
 8009684:	c803      	ldmia	r0, {r0, r1}
 8009686:	ac02      	add	r4, sp, #8
 8009688:	e884 0003 	stmia.w	r4, {r0, r1}
 800968c:	a801      	add	r0, sp, #4
 800968e:	f005 fb49 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <WM__ActivateClipRect+0x44>)
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	b111      	cbz	r1, 800969e <WM__ActivateClipRect+0x32>
 8009698:	4620      	mov	r0, r4
 800969a:	f7ff ff37 	bl	800950c <WM__ClipAtParentBorders>
 800969e:	4620      	mov	r0, r4
 80096a0:	f7ff ffbc 	bl	800961c <_SetClipRectUserIntersect>
 80096a4:	b004      	add	sp, #16
 80096a6:	bd10      	pop	{r4, pc}
 80096a8:	2000002c 	.word	0x2000002c
 80096ac:	20022a08 	.word	0x20022a08
 80096b0:	20022f48 	.word	0x20022f48

080096b4 <WM__IsWindow>:
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <WM__IsWindow+0x1c>)
 80096b6:	b510      	push	{r4, lr}
 80096b8:	4604      	mov	r4, r0
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	b128      	cbz	r0, 80096ca <WM__IsWindow+0x16>
 80096be:	42a0      	cmp	r0, r4
 80096c0:	d004      	beq.n	80096cc <WM__IsWindow+0x18>
 80096c2:	f005 fb17 	bl	800ecf4 <GUI_ALLOC_h2p>
 80096c6:	6940      	ldr	r0, [r0, #20]
 80096c8:	e7f8      	b.n	80096bc <WM__IsWindow+0x8>
 80096ca:	bd10      	pop	{r4, pc}
 80096cc:	2001      	movs	r0, #1
 80096ce:	bd10      	pop	{r4, pc}
 80096d0:	20022f68 	.word	0x20022f68

080096d4 <WM__InvalidateDrawAndDescs>:
 80096d4:	b513      	push	{r0, r1, r4, lr}
 80096d6:	4604      	mov	r4, r0
 80096d8:	b300      	cbz	r0, 800971c <WM__InvalidateDrawAndDescs+0x48>
 80096da:	f005 fb15 	bl	800ed08 <GUI_ALLOC_LockH>
 80096de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80096e0:	9001      	str	r0, [sp, #4]
 80096e2:	0793      	lsls	r3, r2, #30
 80096e4:	d517      	bpl.n	8009716 <WM__InvalidateDrawAndDescs+0x42>
 80096e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80096e8:	b140      	cbz	r0, 80096fc <WM__InvalidateDrawAndDescs+0x28>
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <WM__InvalidateDrawAndDescs+0x4c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	d004      	beq.n	80096fc <WM__InvalidateDrawAndDescs+0x28>
 80096f2:	f001 f9bf 	bl	800aa74 <GUI_MEMDEV_Delete>
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	625a      	str	r2, [r3, #36]	; 0x24
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7ff fdf3 	bl	80092e8 <WM_GetFirstChild>
 8009702:	4604      	mov	r4, r0
 8009704:	b13c      	cbz	r4, 8009716 <WM__InvalidateDrawAndDescs+0x42>
 8009706:	4620      	mov	r0, r4
 8009708:	f7ff ffe4 	bl	80096d4 <WM__InvalidateDrawAndDescs>
 800970c:	4620      	mov	r0, r4
 800970e:	f005 faf1 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009712:	6a04      	ldr	r4, [r0, #32]
 8009714:	e7f6      	b.n	8009704 <WM__InvalidateDrawAndDescs+0x30>
 8009716:	a801      	add	r0, sp, #4
 8009718:	f005 fb04 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800971c:	b002      	add	sp, #8
 800971e:	bd10      	pop	{r4, pc}
 8009720:	20022f90 	.word	0x20022f90

08009724 <WM__RectIsNZ>:
 8009724:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009728:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800972c:	429a      	cmp	r2, r3
 800972e:	dc08      	bgt.n	8009742 <WM__RectIsNZ+0x1e>
 8009730:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009734:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009738:	429a      	cmp	r2, r3
 800973a:	bfcc      	ite	gt
 800973c:	2000      	movgt	r0, #0
 800973e:	2001      	movle	r0, #1
 8009740:	4770      	bx	lr
 8009742:	2000      	movs	r0, #0
 8009744:	4770      	bx	lr
	...

08009748 <_Invalidate1Abs>:
 8009748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974a:	b085      	sub	sp, #20
 800974c:	4606      	mov	r6, r0
 800974e:	460d      	mov	r5, r1
 8009750:	4617      	mov	r7, r2
 8009752:	f005 facf 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009756:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009758:	9001      	str	r0, [sp, #4]
 800975a:	07a3      	lsls	r3, r4, #30
 800975c:	d534      	bpl.n	80097c8 <_Invalidate1Abs+0x80>
 800975e:	4628      	mov	r0, r5
 8009760:	f7ff ffe0 	bl	8009724 <WM__RectIsNZ>
 8009764:	2800      	cmp	r0, #0
 8009766:	d02f      	beq.n	80097c8 <_Invalidate1Abs+0x80>
 8009768:	f640 0301 	movw	r3, #2049	; 0x801
 800976c:	4023      	ands	r3, r4
 800976e:	2b01      	cmp	r3, #1
 8009770:	d02a      	beq.n	80097c8 <_Invalidate1Abs+0x80>
 8009772:	4630      	mov	r0, r6
 8009774:	f005 fac8 	bl	800ed08 <GUI_ALLOC_LockH>
 8009778:	ac02      	add	r4, sp, #8
 800977a:	4602      	mov	r2, r0
 800977c:	9001      	str	r0, [sp, #4]
 800977e:	4629      	mov	r1, r5
 8009780:	4620      	mov	r0, r4
 8009782:	f002 fd03 	bl	800c18c <GUI__IntersectRects>
 8009786:	4620      	mov	r0, r4
 8009788:	f7ff ffcc 	bl	8009724 <WM__RectIsNZ>
 800978c:	b1c8      	cbz	r0, 80097c2 <_Invalidate1Abs+0x7a>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8009792:	f244 0120 	movw	r1, #16416	; 0x4020
 8009796:	4031      	ands	r1, r6
 8009798:	f103 0508 	add.w	r5, r3, #8
 800979c:	b129      	cbz	r1, 80097aa <_Invalidate1Abs+0x62>
 800979e:	4628      	mov	r0, r5
 80097a0:	4629      	mov	r1, r5
 80097a2:	4622      	mov	r2, r4
 80097a4:	f003 ff3e 	bl	800d624 <GUI_MergeRect>
 80097a8:	e00b      	b.n	80097c2 <_Invalidate1Abs+0x7a>
 80097aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097ae:	433e      	orrs	r6, r7
 80097b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80097b4:	629e      	str	r6, [r3, #40]	; 0x28
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <_Invalidate1Abs+0x84>)
 80097b8:	881a      	ldrh	r2, [r3, #0]
 80097ba:	3201      	adds	r2, #1
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	f002 ff2b 	bl	800c618 <GUI_SignalEvent>
 80097c2:	a801      	add	r0, sp, #4
 80097c4:	f005 faae 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80097c8:	b005      	add	sp, #20
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097cc:	20022f64 	.word	0x20022f64

080097d0 <WM__Invalidate1Abs>:
 80097d0:	2220      	movs	r2, #32
 80097d2:	f7ff bfb9 	b.w	8009748 <_Invalidate1Abs>

080097d6 <WM_InvalidateWindowAndDescsEx>:
 80097d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d8:	460f      	mov	r7, r1
 80097da:	b085      	sub	sp, #20
 80097dc:	4615      	mov	r5, r2
 80097de:	4606      	mov	r6, r0
 80097e0:	b348      	cbz	r0, 8009836 <WM_InvalidateWindowAndDescsEx+0x60>
 80097e2:	f005 fa91 	bl	800ed08 <GUI_ALLOC_LockH>
 80097e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80097e8:	ac04      	add	r4, sp, #16
 80097ea:	079b      	lsls	r3, r3, #30
 80097ec:	4602      	mov	r2, r0
 80097ee:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80097f2:	d403      	bmi.n	80097fc <WM_InvalidateWindowAndDescsEx+0x26>
 80097f4:	4620      	mov	r0, r4
 80097f6:	f005 fa95 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80097fa:	e01c      	b.n	8009836 <WM_InvalidateWindowAndDescsEx+0x60>
 80097fc:	a802      	add	r0, sp, #8
 80097fe:	4639      	mov	r1, r7
 8009800:	f002 fcc4 	bl	800c18c <GUI__IntersectRects>
 8009804:	2800      	cmp	r0, #0
 8009806:	d0f5      	beq.n	80097f4 <WM_InvalidateWindowAndDescsEx+0x1e>
 8009808:	4620      	mov	r0, r4
 800980a:	f005 fa8b 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800980e:	4630      	mov	r0, r6
 8009810:	a902      	add	r1, sp, #8
 8009812:	462a      	mov	r2, r5
 8009814:	f7ff ff98 	bl	8009748 <_Invalidate1Abs>
 8009818:	4630      	mov	r0, r6
 800981a:	f7ff fd65 	bl	80092e8 <WM_GetFirstChild>
 800981e:	4604      	mov	r4, r0
 8009820:	b14c      	cbz	r4, 8009836 <WM_InvalidateWindowAndDescsEx+0x60>
 8009822:	4620      	mov	r0, r4
 8009824:	a902      	add	r1, sp, #8
 8009826:	462a      	mov	r2, r5
 8009828:	f7ff ffd5 	bl	80097d6 <WM_InvalidateWindowAndDescsEx>
 800982c:	4620      	mov	r0, r4
 800982e:	f005 fa61 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009832:	6a04      	ldr	r4, [r0, #32]
 8009834:	e7f4      	b.n	8009820 <WM_InvalidateWindowAndDescsEx+0x4a>
 8009836:	b005      	add	sp, #20
 8009838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800983a <WM__InvalidateRect>:
 800983a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800983e:	4680      	mov	r8, r0
 8009840:	4617      	mov	r7, r2
 8009842:	461d      	mov	r5, r3
 8009844:	460c      	mov	r4, r1
 8009846:	2900      	cmp	r1, #0
 8009848:	d030      	beq.n	80098ac <WM__InvalidateRect+0x72>
 800984a:	4608      	mov	r0, r1
 800984c:	f005 fa5c 	bl	800ed08 <GUI_ALLOC_LockH>
 8009850:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009852:	9001      	str	r0, [sp, #4]
 8009854:	07b3      	lsls	r3, r6, #30
 8009856:	4602      	mov	r2, r0
 8009858:	d525      	bpl.n	80098a6 <WM__InvalidateRect+0x6c>
 800985a:	a802      	add	r0, sp, #8
 800985c:	4641      	mov	r1, r8
 800985e:	f002 fc95 	bl	800c18c <GUI__IntersectRects>
 8009862:	b300      	cbz	r0, 80098a6 <WM__InvalidateRect+0x6c>
 8009864:	f640 0301 	movw	r3, #2049	; 0x801
 8009868:	4033      	ands	r3, r6
 800986a:	2b01      	cmp	r3, #1
 800986c:	d107      	bne.n	800987e <WM__InvalidateRect+0x44>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	a802      	add	r0, sp, #8
 8009872:	6999      	ldr	r1, [r3, #24]
 8009874:	6a1a      	ldr	r2, [r3, #32]
 8009876:	462b      	mov	r3, r5
 8009878:	f7ff ffdf 	bl	800983a <WM__InvalidateRect>
 800987c:	e004      	b.n	8009888 <WM__InvalidateRect+0x4e>
 800987e:	4620      	mov	r0, r4
 8009880:	a902      	add	r1, sp, #8
 8009882:	462a      	mov	r2, r5
 8009884:	f7ff ff60 	bl	8009748 <_Invalidate1Abs>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	69dc      	ldr	r4, [r3, #28]
 800988c:	b15c      	cbz	r4, 80098a6 <WM__InvalidateRect+0x6c>
 800988e:	42bc      	cmp	r4, r7
 8009890:	d009      	beq.n	80098a6 <WM__InvalidateRect+0x6c>
 8009892:	4620      	mov	r0, r4
 8009894:	a902      	add	r1, sp, #8
 8009896:	462a      	mov	r2, r5
 8009898:	f7ff ff9d 	bl	80097d6 <WM_InvalidateWindowAndDescsEx>
 800989c:	4620      	mov	r0, r4
 800989e:	f005 fa29 	bl	800ecf4 <GUI_ALLOC_h2p>
 80098a2:	6a04      	ldr	r4, [r0, #32]
 80098a4:	e7f2      	b.n	800988c <WM__InvalidateRect+0x52>
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f005 fa3c 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80098ac:	b004      	add	sp, #16
 80098ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098b2 <WM__InvalidateRectEx>:
 80098b2:	2320      	movs	r3, #32
 80098b4:	f7ff bfc1 	b.w	800983a <WM__InvalidateRect>

080098b8 <WM__SendMsgNoData>:
 80098b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098ba:	ab04      	add	r3, sp, #16
 80098bc:	9001      	str	r0, [sp, #4]
 80098be:	f843 1d10 	str.w	r1, [r3, #-16]!
 80098c2:	4669      	mov	r1, sp
 80098c4:	f7ff fcb2 	bl	800922c <WM__SendMessage>
 80098c8:	b005      	add	sp, #20
 80098ca:	f85d fb04 	ldr.w	pc, [sp], #4

080098ce <WM__GetClientRectWin>:
 80098ce:	2300      	movs	r3, #0
 80098d0:	800b      	strh	r3, [r1, #0]
 80098d2:	8882      	ldrh	r2, [r0, #4]
 80098d4:	804b      	strh	r3, [r1, #2]
 80098d6:	8803      	ldrh	r3, [r0, #0]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	808b      	strh	r3, [r1, #4]
 80098dc:	88c2      	ldrh	r2, [r0, #6]
 80098de:	8843      	ldrh	r3, [r0, #2]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	80cb      	strh	r3, [r1, #6]
 80098e4:	4770      	bx	lr

080098e6 <WM_InvalidateRect>:
 80098e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e8:	460f      	mov	r7, r1
 80098ea:	b087      	sub	sp, #28
 80098ec:	4605      	mov	r5, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d033      	beq.n	800995a <WM_InvalidateRect+0x74>
 80098f2:	f005 fa09 	bl	800ed08 <GUI_ALLOC_LockH>
 80098f6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80098f8:	9001      	str	r0, [sp, #4]
 80098fa:	07b2      	lsls	r2, r6, #30
 80098fc:	d52a      	bpl.n	8009954 <WM_InvalidateRect+0x6e>
 80098fe:	c803      	ldmia	r0, {r0, r1}
 8009900:	ac04      	add	r4, sp, #16
 8009902:	03f3      	lsls	r3, r6, #15
 8009904:	e884 0003 	stmia.w	r4, {r0, r1}
 8009908:	d502      	bpl.n	8009910 <WM_InvalidateRect+0x2a>
 800990a:	4628      	mov	r0, r5
 800990c:	f7ff fee2 	bl	80096d4 <WM__InvalidateDrawAndDescs>
 8009910:	b15f      	cbz	r7, 800992a <WM_InvalidateRect+0x44>
 8009912:	6838      	ldr	r0, [r7, #0]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	ab02      	add	r3, sp, #8
 8009918:	c303      	stmia	r3!, {r0, r1}
 800991a:	9801      	ldr	r0, [sp, #4]
 800991c:	a902      	add	r1, sp, #8
 800991e:	f7ff fe75 	bl	800960c <WM__Client2Screen>
 8009922:	4620      	mov	r0, r4
 8009924:	a902      	add	r1, sp, #8
 8009926:	f002 fc63 	bl	800c1f0 <GUI__IntersectRect>
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	f7ff fded 	bl	800950c <WM__ClipAtParentBorders>
 8009932:	b178      	cbz	r0, 8009954 <WM_InvalidateRect+0x6e>
 8009934:	f640 0301 	movw	r3, #2049	; 0x801
 8009938:	4033      	ands	r3, r6
 800993a:	2b01      	cmp	r3, #1
 800993c:	d106      	bne.n	800994c <WM_InvalidateRect+0x66>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	4620      	mov	r0, r4
 8009942:	6999      	ldr	r1, [r3, #24]
 8009944:	6a1a      	ldr	r2, [r3, #32]
 8009946:	f7ff ffb4 	bl	80098b2 <WM__InvalidateRectEx>
 800994a:	e003      	b.n	8009954 <WM_InvalidateRect+0x6e>
 800994c:	4628      	mov	r0, r5
 800994e:	4621      	mov	r1, r4
 8009950:	f7ff ff3e 	bl	80097d0 <WM__Invalidate1Abs>
 8009954:	a801      	add	r0, sp, #4
 8009956:	f005 f9e5 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800995a:	b007      	add	sp, #28
 800995c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800995e <WM_InvalidateWindow>:
 800995e:	2100      	movs	r1, #0
 8009960:	f7ff bfc1 	b.w	80098e6 <WM_InvalidateRect>

08009964 <WM__GetTopLevelLayer>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4604      	mov	r4, r0
 8009968:	f005 f9c4 	bl	800ecf4 <GUI_ALLOC_h2p>
 800996c:	6980      	ldr	r0, [r0, #24]
 800996e:	2800      	cmp	r0, #0
 8009970:	d1f9      	bne.n	8009966 <WM__GetTopLevelLayer+0x2>
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <WM__GetTopLevelLayer+0x24>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4294      	cmp	r4, r2
 8009978:	d005      	beq.n	8009986 <WM__GetTopLevelLayer+0x22>
 800997a:	6858      	ldr	r0, [r3, #4]
 800997c:	4284      	cmp	r4, r0
 800997e:	bf14      	ite	ne
 8009980:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009984:	2001      	moveq	r0, #1
 8009986:	bd10      	pop	{r4, pc}
 8009988:	20022f4c 	.word	0x20022f4c

0800998c <WM__SelectTopLevelLayer>:
 800998c:	b508      	push	{r3, lr}
 800998e:	f7ff ffe9 	bl	8009964 <WM__GetTopLevelLayer>
 8009992:	2800      	cmp	r0, #0
 8009994:	db03      	blt.n	800999e <WM__SelectTopLevelLayer+0x12>
 8009996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800999a:	f003 bd65 	b.w	800d468 <GUI_SelectLayer>
 800999e:	bd08      	pop	{r3, pc}

080099a0 <WM_SelectWindow>:
 80099a0:	4a0d      	ldr	r2, [pc, #52]	; (80099d8 <WM_SelectWindow+0x38>)
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80099a8:	4604      	mov	r4, r0
 80099aa:	4616      	mov	r6, r2
 80099ac:	b908      	cbnz	r0, 80099b2 <WM_SelectWindow+0x12>
 80099ae:	4a0b      	ldr	r2, [pc, #44]	; (80099dc <WM_SelectWindow+0x3c>)
 80099b0:	6814      	ldr	r4, [r2, #0]
 80099b2:	649c      	str	r4, [r3, #72]	; 0x48
 80099b4:	4620      	mov	r0, r4
 80099b6:	f7ff ffe9 	bl	800998c <WM__SelectTopLevelLayer>
 80099ba:	f002 fa7f 	bl	800bebc <LCD_SetClipRectMax>
 80099be:	4620      	mov	r0, r4
 80099c0:	f005 f998 	bl	800ecf4 <GUI_ALLOC_h2p>
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80099ca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80099ce:	64d9      	str	r1, [r3, #76]	; 0x4c
 80099d0:	651a      	str	r2, [r3, #80]	; 0x50
 80099d2:	4628      	mov	r0, r5
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	bf00      	nop
 80099d8:	2000002c 	.word	0x2000002c
 80099dc:	20022f68 	.word	0x20022f68

080099e0 <WM_CreateWindowAsChild>:
 80099e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099e6:	469b      	mov	fp, r3
 80099e8:	4b4b      	ldr	r3, [pc, #300]	; (8009b18 <WM_CreateWindowAsChild+0x138>)
 80099ea:	4607      	mov	r7, r0
 80099ec:	4688      	mov	r8, r1
 80099ee:	4692      	mov	sl, r2
 80099f0:	681e      	ldr	r6, [r3, #0]
 80099f2:	bb65      	cbnz	r5, 8009a4e <WM_CreateWindowAsChild+0x6e>
 80099f4:	4b49      	ldr	r3, [pc, #292]	; (8009b1c <WM_CreateWindowAsChild+0x13c>)
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	b363      	cbz	r3, 8009a54 <WM_CreateWindowAsChild+0x74>
 80099fa:	4b49      	ldr	r3, [pc, #292]	; (8009b20 <WM_CreateWindowAsChild+0x140>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	7c5a      	ldrb	r2, [r3, #17]
 8009a00:	4b48      	ldr	r3, [pc, #288]	; (8009b24 <WM_CreateWindowAsChild+0x144>)
 8009a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	d024      	beq.n	8009a54 <WM_CreateWindowAsChild+0x74>
 8009a0a:	b31b      	cbz	r3, 8009a54 <WM_CreateWindowAsChild+0x74>
 8009a0c:	461d      	mov	r5, r3
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f005 f97a 	bl	800ed08 <GUI_ALLOC_LockH>
 8009a14:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009a18:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009a1c:	9001      	str	r0, [sp, #4]
 8009a1e:	4417      	add	r7, r2
 8009a20:	4498      	add	r8, r3
 8009a22:	f1ba 0f00 	cmp.w	sl, #0
 8009a26:	d105      	bne.n	8009a34 <WM_CreateWindowAsChild+0x54>
 8009a28:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8009a2c:	ebc2 0a0a 	rsb	sl, r2, sl
 8009a30:	f10a 0a01 	add.w	sl, sl, #1
 8009a34:	f1bb 0f00 	cmp.w	fp, #0
 8009a38:	d105      	bne.n	8009a46 <WM_CreateWindowAsChild+0x66>
 8009a3a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8009a3e:	ebc3 0b0b 	rsb	fp, r3, fp
 8009a42:	f10b 0b01 	add.w	fp, fp, #1
 8009a46:	a801      	add	r0, sp, #4
 8009a48:	f005 f96c 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009a4c:	e002      	b.n	8009a54 <WM_CreateWindowAsChild+0x74>
 8009a4e:	1c6b      	adds	r3, r5, #1
 8009a50:	d1dd      	bne.n	8009a0e <WM_CreateWindowAsChild+0x2e>
 8009a52:	2500      	movs	r5, #0
 8009a54:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009a56:	302c      	adds	r0, #44	; 0x2c
 8009a58:	f005 fb8c 	bl	800f174 <GUI_ALLOC_AllocZero>
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d056      	beq.n	8009b10 <WM_CreateWindowAsChild+0x130>
 8009a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a64:	431e      	orrs	r6, r3
 8009a66:	4b2d      	ldr	r3, [pc, #180]	; (8009b1c <WM_CreateWindowAsChild+0x13c>)
 8009a68:	881a      	ldrh	r2, [r3, #0]
 8009a6a:	3201      	adds	r2, #1
 8009a6c:	801a      	strh	r2, [r3, #0]
 8009a6e:	f005 f94b 	bl	800ed08 <GUI_ALLOC_LockH>
 8009a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a74:	6103      	str	r3, [r0, #16]
 8009a76:	f10d 0908 	add.w	r9, sp, #8
 8009a7a:	4b2b      	ldr	r3, [pc, #172]	; (8009b28 <WM_CreateWindowAsChild+0x148>)
 8009a7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009a7e:	f849 0d08 	str.w	r0, [r9, #-8]!
 8009a82:	4033      	ands	r3, r6
 8009a84:	8007      	strh	r7, [r0, #0]
 8009a86:	f8a0 8002 	strh.w	r8, [r0, #2]
 8009a8a:	4457      	add	r7, sl
 8009a8c:	44d8      	add	r8, fp
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	3f01      	subs	r7, #1
 8009a92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009a96:	6283      	str	r3, [r0, #40]	; 0x28
 8009a98:	8087      	strh	r7, [r0, #4]
 8009a9a:	f8a0 8006 	strh.w	r8, [r0, #6]
 8009a9e:	4668      	mov	r0, sp
 8009aa0:	f005 f940 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009aa4:	4b21      	ldr	r3, [pc, #132]	; (8009b2c <WM_CreateWindowAsChild+0x14c>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	b148      	cbz	r0, 8009abe <WM_CreateWindowAsChild+0xde>
 8009aaa:	f005 f923 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009aae:	4607      	mov	r7, r0
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f005 f91f 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	6143      	str	r3, [r0, #20]
 8009aba:	617c      	str	r4, [r7, #20]
 8009abc:	e000      	b.n	8009ac0 <WM_CreateWindowAsChild+0xe0>
 8009abe:	601c      	str	r4, [r3, #0]
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f7ff fd50 	bl	8009568 <WM__InsertWindowIntoList>
 8009ac8:	06b5      	lsls	r5, r6, #26
 8009aca:	d502      	bpl.n	8009ad2 <WM_CreateWindowAsChild+0xf2>
 8009acc:	4620      	mov	r0, r4
 8009ace:	f7ff ff67 	bl	80099a0 <WM_SelectWindow>
 8009ad2:	07f0      	lsls	r0, r6, #31
 8009ad4:	d503      	bpl.n	8009ade <WM_CreateWindowAsChild+0xfe>
 8009ad6:	4b16      	ldr	r3, [pc, #88]	; (8009b30 <WM_CreateWindowAsChild+0x150>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	3201      	adds	r2, #1
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	0671      	lsls	r1, r6, #25
 8009ae0:	d502      	bpl.n	8009ae8 <WM_CreateWindowAsChild+0x108>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f006 fab2 	bl	801004c <WM_BringToBottom>
 8009ae8:	07b2      	lsls	r2, r6, #30
 8009aea:	d50d      	bpl.n	8009b08 <WM_CreateWindowAsChild+0x128>
 8009aec:	4620      	mov	r0, r4
 8009aee:	f005 f90b 	bl	800ed08 <GUI_ALLOC_LockH>
 8009af2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009af4:	9000      	str	r0, [sp, #0]
 8009af6:	f043 0302 	orr.w	r3, r3, #2
 8009afa:	6283      	str	r3, [r0, #40]	; 0x28
 8009afc:	4668      	mov	r0, sp
 8009afe:	f005 f911 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009b02:	4620      	mov	r0, r4
 8009b04:	f7ff ff2b 	bl	800995e <WM_InvalidateWindow>
 8009b08:	4620      	mov	r0, r4
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	f7ff fed4 	bl	80098b8 <WM__SendMsgNoData>
 8009b10:	4620      	mov	r0, r4
 8009b12:	b003      	add	sp, #12
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	20022f74 	.word	0x20022f74
 8009b1c:	20022f44 	.word	0x20022f44
 8009b20:	2000002c 	.word	0x2000002c
 8009b24:	20022f4c 	.word	0x20022f4c
 8009b28:	003f3f9f 	.word	0x003f3f9f
 8009b2c:	20022f68 	.word	0x20022f68
 8009b30:	20022f94 	.word	0x20022f94

08009b34 <WM__GetNextIVR>:
 8009b34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009b38:	4f5d      	ldr	r7, [pc, #372]	; (8009cb0 <WM__GetNextIVR+0x17c>)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009b40:	2800      	cmp	r0, #0
 8009b42:	f000 80b2 	beq.w	8009caa <WM__GetNextIVR+0x176>
 8009b46:	4b5b      	ldr	r3, [pc, #364]	; (8009cb4 <WM__GetNextIVR+0x180>)
 8009b48:	695a      	ldr	r2, [r3, #20]
 8009b4a:	2a01      	cmp	r2, #1
 8009b4c:	461c      	mov	r4, r3
 8009b4e:	dd03      	ble.n	8009b58 <WM__GetNextIVR+0x24>
 8009b50:	3a01      	subs	r2, #1
 8009b52:	615a      	str	r2, [r3, #20]
 8009b54:	2000      	movs	r0, #0
 8009b56:	e0a8      	b.n	8009caa <WM__GetNextIVR+0x176>
 8009b58:	f104 0608 	add.w	r6, r4, #8
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009b62:	3301      	adds	r3, #1
 8009b64:	ad02      	add	r5, sp, #8
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b6c:	b923      	cbnz	r3, 8009b78 <WM__GetNextIVR+0x44>
 8009b6e:	8823      	ldrh	r3, [r4, #0]
 8009b70:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009b74:	8863      	ldrh	r3, [r4, #2]
 8009b76:	e011      	b.n	8009b9c <WM__GetNextIVR+0x68>
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	8962      	ldrh	r2, [r4, #10]
 8009b7c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009b80:	3301      	adds	r3, #1
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009b88:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009b8c:	b21b      	sxth	r3, r3
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	da06      	bge.n	8009ba0 <WM__GetNextIVR+0x6c>
 8009b92:	8823      	ldrh	r3, [r4, #0]
 8009b94:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009b98:	89e3      	ldrh	r3, [r4, #14]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009ba0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8009ba4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009ba8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009cb4 <WM__GetNextIVR+0x180>
 8009bac:	429a      	cmp	r2, r3
 8009bae:	dd04      	ble.n	8009bba <WM__GetNextIVR+0x86>
 8009bb0:	6963      	ldr	r3, [r4, #20]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	6163      	str	r3, [r4, #20]
 8009bb8:	e077      	b.n	8009caa <WM__GetNextIVR+0x176>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009bbe:	f005 f8a3 	bl	800ed08 <GUI_ALLOC_LockH>
 8009bc2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009bc6:	f9b8 3000 	ldrsh.w	r3, [r8]
 8009bca:	9001      	str	r0, [sp, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d11c      	bne.n	8009c0a <WM__GetNextIVR+0xd6>
 8009bd0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009bd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009bd8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009bdc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009be0:	4b33      	ldr	r3, [pc, #204]	; (8009cb0 <WM__GetNextIVR+0x17c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009be6:	b15a      	cbz	r2, 8009c00 <WM__GetNextIVR+0xcc>
 8009be8:	4610      	mov	r0, r2
 8009bea:	f005 f883 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009bee:	4680      	mov	r8, r0
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	6a00      	ldr	r0, [r0, #32]
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7ff fbb3 	bl	8009360 <_Findy1>
 8009bfa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009bfe:	e7f2      	b.n	8009be6 <WM__GetNextIVR+0xb2>
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	4629      	mov	r1, r5
 8009c04:	69d8      	ldr	r0, [r3, #28]
 8009c06:	f7ff fbab 	bl	8009360 <_Findy1>
 8009c0a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009c0e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c16:	b16a      	cbz	r2, 8009c34 <WM__GetNextIVR+0x100>
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f005 f86b 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4680      	mov	r8, r0
 8009c22:	2200      	movs	r2, #0
 8009c24:	6a00      	ldr	r0, [r0, #32]
 8009c26:	f7ff fbf1 	bl	800940c <_Findx0>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1ed      	bne.n	8009c0a <WM__GetNextIVR+0xd6>
 8009c2e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009c32:	e7f0      	b.n	8009c16 <WM__GetNextIVR+0xe2>
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	4629      	mov	r1, r5
 8009c38:	69d8      	ldr	r0, [r3, #28]
 8009c3a:	f7ff fbe7 	bl	800940c <_Findx0>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d1e3      	bne.n	8009c0a <WM__GetNextIVR+0xd6>
 8009c42:	88a3      	ldrh	r3, [r4, #4]
 8009c44:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009c48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c4c:	b21b      	sxth	r3, r3
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	dd07      	ble.n	8009c62 <WM__GetNextIVR+0x12e>
 8009c52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009c56:	e886 0003 	stmia.w	r6, {r0, r1}
 8009c5a:	a801      	add	r0, sp, #4
 8009c5c:	f005 f862 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009c60:	e797      	b.n	8009b92 <WM__GetNextIVR+0x5e>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c66:	b152      	cbz	r2, 8009c7e <WM__GetNextIVR+0x14a>
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f005 f843 	bl	800ecf4 <GUI_ALLOC_h2p>
 8009c6e:	4607      	mov	r7, r0
 8009c70:	2200      	movs	r2, #0
 8009c72:	6a00      	ldr	r0, [r0, #32]
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7ff fc0d 	bl	8009494 <_Findx1>
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	e7f3      	b.n	8009c66 <WM__GetNextIVR+0x132>
 8009c7e:	af04      	add	r7, sp, #16
 8009c80:	4629      	mov	r1, r5
 8009c82:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8009c86:	69d8      	ldr	r0, [r3, #28]
 8009c88:	f7ff fc04 	bl	8009494 <_Findx1>
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f005 f849 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	dc89      	bgt.n	8009bb0 <WM__GetNextIVR+0x7c>
 8009c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ca0:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ca4:	f7ff fce2 	bl	800966c <WM__ActivateClipRect>
 8009ca8:	2001      	movs	r0, #1
 8009caa:	b004      	add	sp, #16
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	2000002c 	.word	0x2000002c
 8009cb4:	20022a00 	.word	0x20022a00

08009cb8 <WM__InitIVRSearch>:
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbc:	4f39      	ldr	r7, [pc, #228]	; (8009da4 <WM__InitIVRSearch+0xec>)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009cc4:	b086      	sub	sp, #24
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b912      	cbnz	r2, 8009cd0 <WM__InitIVRSearch+0x18>
 8009cca:	f7ff fccf 	bl	800966c <WM__ActivateClipRect>
 8009cce:	e064      	b.n	8009d9a <WM__InitIVRSearch+0xe2>
 8009cd0:	4d35      	ldr	r5, [pc, #212]	; (8009da8 <WM__InitIVRSearch+0xf0>)
 8009cd2:	696a      	ldr	r2, [r5, #20]
 8009cd4:	3201      	adds	r2, #1
 8009cd6:	2a01      	cmp	r2, #1
 8009cd8:	616a      	str	r2, [r5, #20]
 8009cda:	462c      	mov	r4, r5
 8009cdc:	dc5d      	bgt.n	8009d9a <WM__InitIVRSearch+0xe2>
 8009cde:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009ce0:	f005 f812 	bl	800ed08 <GUI_ALLOC_LockH>
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ce8:	612a      	str	r2, [r5, #16]
 8009cea:	4a30      	ldr	r2, [pc, #192]	; (8009dac <WM__InitIVRSearch+0xf4>)
 8009cec:	9000      	str	r0, [sp, #0]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	b12a      	cbz	r2, 8009cfe <WM__InitIVRSearch+0x46>
 8009cf2:	f100 0308 	add.w	r3, r0, #8
 8009cf6:	aa02      	add	r2, sp, #8
 8009cf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cfc:	e005      	b.n	8009d0a <WM__InitIVRSearch+0x52>
 8009cfe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009d00:	f012 0802 	ands.w	r8, r2, #2
 8009d04:	d00a      	beq.n	8009d1c <WM__InitIVRSearch+0x64>
 8009d06:	c803      	ldmia	r0, {r0, r1}
 8009d08:	aa02      	add	r2, sp, #8
 8009d0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8009d0e:	ad02      	add	r5, sp, #8
 8009d10:	b166      	cbz	r6, 8009d2c <WM__InitIVRSearch+0x74>
 8009d12:	4628      	mov	r0, r5
 8009d14:	4631      	mov	r1, r6
 8009d16:	f002 fa6b 	bl	800c1f0 <GUI__IntersectRect>
 8009d1a:	e007      	b.n	8009d2c <WM__InitIVRSearch+0x74>
 8009d1c:	696b      	ldr	r3, [r5, #20]
 8009d1e:	4668      	mov	r0, sp
 8009d20:	3b01      	subs	r3, #1
 8009d22:	616b      	str	r3, [r5, #20]
 8009d24:	f004 fffe 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009d28:	4640      	mov	r0, r8
 8009d2a:	e037      	b.n	8009d9c <WM__InitIVRSearch+0xe4>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	4e20      	ldr	r6, [pc, #128]	; (8009db0 <WM__InitIVRSearch+0xf8>)
 8009d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d32:	b1c2      	cbz	r2, 8009d66 <WM__InitIVRSearch+0xae>
 8009d34:	9b00      	ldr	r3, [sp, #0]
 8009d36:	6810      	ldr	r0, [r2, #0]
 8009d38:	6851      	ldr	r1, [r2, #4]
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	ab04      	add	r3, sp, #16
 8009d3e:	c303      	stmia	r3!, {r0, r1}
 8009d40:	6833      	ldr	r3, [r6, #0]
 8009d42:	b133      	cbz	r3, 8009d52 <WM__InitIVRSearch+0x9a>
 8009d44:	a801      	add	r0, sp, #4
 8009d46:	f004 ffed 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009d4a:	6830      	ldr	r0, [r6, #0]
 8009d4c:	f004 ffdc 	bl	800ed08 <GUI_ALLOC_LockH>
 8009d50:	9001      	str	r0, [sp, #4]
 8009d52:	9801      	ldr	r0, [sp, #4]
 8009d54:	a904      	add	r1, sp, #16
 8009d56:	f7ff fc59 	bl	800960c <WM__Client2Screen>
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	a904      	add	r1, sp, #16
 8009d5e:	f002 fa47 	bl	800c1f0 <GUI__IntersectRect>
 8009d62:	a801      	add	r0, sp, #4
 8009d64:	e000      	b.n	8009d68 <WM__InitIVRSearch+0xb0>
 8009d66:	4668      	mov	r0, sp
 8009d68:	f004 ffdc 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009d6c:	6831      	ldr	r1, [r6, #0]
 8009d6e:	b119      	cbz	r1, 8009d78 <WM__InitIVRSearch+0xc0>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7ff fbcb 	bl	800950c <WM__ClipAtParentBorders>
 8009d76:	b128      	cbz	r0, 8009d84 <WM__InitIVRSearch+0xcc>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009d7e:	f7ff fbc5 	bl	800950c <WM__ClipAtParentBorders>
 8009d82:	b918      	cbnz	r0, 8009d8c <WM__InitIVRSearch+0xd4>
 8009d84:	6963      	ldr	r3, [r4, #20]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	6163      	str	r3, [r4, #20]
 8009d8a:	e007      	b.n	8009d9c <WM__InitIVRSearch+0xe4>
 8009d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d90:	e884 0003 	stmia.w	r4, {r0, r1}
 8009d94:	f7ff fece 	bl	8009b34 <WM__GetNextIVR>
 8009d98:	e000      	b.n	8009d9c <WM__InitIVRSearch+0xe4>
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	b006      	add	sp, #24
 8009d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da2:	bf00      	nop
 8009da4:	2000002c 	.word	0x2000002c
 8009da8:	20022a00 	.word	0x20022a00
 8009dac:	20022f71 	.word	0x20022f71
 8009db0:	20022f48 	.word	0x20022f48

08009db4 <WM_Activate>:
 8009db4:	4b02      	ldr	r3, [pc, #8]	; (8009dc0 <WM_Activate+0xc>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009dbe:	4770      	bx	lr
 8009dc0:	2000002c 	.word	0x2000002c

08009dc4 <WM_Deactivate>:
 8009dc4:	4b03      	ldr	r3, [pc, #12]	; (8009dd4 <WM_Deactivate+0x10>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009dce:	f002 b875 	b.w	800bebc <LCD_SetClipRectMax>
 8009dd2:	bf00      	nop
 8009dd4:	2000002c 	.word	0x2000002c

08009dd8 <WM_DefaultProc>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4604      	mov	r4, r0
 8009ddc:	6840      	ldr	r0, [r0, #4]
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	68e1      	ldr	r1, [r4, #12]
 8009de2:	2b17      	cmp	r3, #23
 8009de4:	d00f      	beq.n	8009e06 <WM_DefaultProc+0x2e>
 8009de6:	dc06      	bgt.n	8009df6 <WM_DefaultProc+0x1e>
 8009de8:	2b0e      	cmp	r3, #14
 8009dea:	d00e      	beq.n	8009e0a <WM_DefaultProc+0x32>
 8009dec:	2b14      	cmp	r3, #20
 8009dee:	d114      	bne.n	8009e1a <WM_DefaultProc+0x42>
 8009df0:	f006 f8fc 	bl	800ffec <WM__GetClientRectEx>
 8009df4:	e011      	b.n	8009e1a <WM_DefaultProc+0x42>
 8009df6:	2b22      	cmp	r3, #34	; 0x22
 8009df8:	d00c      	beq.n	8009e14 <WM_DefaultProc+0x3c>
 8009dfa:	2b28      	cmp	r3, #40	; 0x28
 8009dfc:	d10d      	bne.n	8009e1a <WM_DefaultProc+0x42>
 8009dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e02:	f7ff bdac 	b.w	800995e <WM_InvalidateWindow>
 8009e06:	60e0      	str	r0, [r4, #12]
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e10:	f006 b86e 	b.w	800fef0 <WM_SendToParent>
 8009e14:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009e18:	e000      	b.n	8009e1c <WM_DefaultProc+0x44>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60e3      	str	r3, [r4, #12]
 8009e1e:	bd10      	pop	{r4, pc}

08009e20 <_cbBackWin>:
 8009e20:	6803      	ldr	r3, [r0, #0]
 8009e22:	2b0e      	cmp	r3, #14
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
 8009e28:	d002      	beq.n	8009e30 <_cbBackWin+0x10>
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	d009      	beq.n	8009e42 <_cbBackWin+0x22>
 8009e2e:	e020      	b.n	8009e72 <_cbBackWin+0x52>
 8009e30:	68c3      	ldr	r3, [r0, #12]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	2a01      	cmp	r2, #1
 8009e36:	d121      	bne.n	8009e7c <_cbBackWin+0x5c>
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e3e:	f003 bbd9 	b.w	800d5f4 <GUI_StoreKey>
 8009e42:	4a0f      	ldr	r2, [pc, #60]	; (8009e80 <_cbBackWin+0x60>)
 8009e44:	6843      	ldr	r3, [r0, #4]
 8009e46:	6811      	ldr	r1, [r2, #0]
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	d006      	beq.n	8009e5a <_cbBackWin+0x3a>
 8009e4c:	6852      	ldr	r2, [r2, #4]
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	bf14      	ite	ne
 8009e52:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009e56:	2301      	moveq	r3, #1
 8009e58:	e000      	b.n	8009e5c <_cbBackWin+0x3c>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <_cbBackWin+0x64>)
 8009e5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e62:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009e66:	4298      	cmp	r0, r3
 8009e68:	d003      	beq.n	8009e72 <_cbBackWin+0x52>
 8009e6a:	f002 fc17 	bl	800c69c <GUI_SetBkColor>
 8009e6e:	f004 fb9d 	bl	800e5ac <GUI_Clear>
 8009e72:	4620      	mov	r0, r4
 8009e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e78:	f7ff bfae 	b.w	8009dd8 <WM_DefaultProc>
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop
 8009e80:	20022f4c 	.word	0x20022f4c
 8009e84:	20022f78 	.word	0x20022f78

08009e88 <WM_Init>:
 8009e88:	b530      	push	{r4, r5, lr}
 8009e8a:	4b2b      	ldr	r3, [pc, #172]	; (8009f38 <WM_Init+0xb0>)
 8009e8c:	7818      	ldrb	r0, [r3, #0]
 8009e8e:	b085      	sub	sp, #20
 8009e90:	461d      	mov	r5, r3
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d14d      	bne.n	8009f32 <WM_Init+0xaa>
 8009e96:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <WM_Init+0xb4>)
 8009e98:	6018      	str	r0, [r3, #0]
 8009e9a:	4b29      	ldr	r3, [pc, #164]	; (8009f40 <WM_Init+0xb8>)
 8009e9c:	6018      	str	r0, [r3, #0]
 8009e9e:	4b29      	ldr	r3, [pc, #164]	; (8009f44 <WM_Init+0xbc>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6458      	str	r0, [r3, #68]	; 0x44
 8009ea4:	4b28      	ldr	r3, [pc, #160]	; (8009f48 <WM_Init+0xc0>)
 8009ea6:	8018      	strh	r0, [r3, #0]
 8009ea8:	4b28      	ldr	r3, [pc, #160]	; (8009f4c <WM_Init+0xc4>)
 8009eaa:	4604      	mov	r4, r0
 8009eac:	8018      	strh	r0, [r3, #0]
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f004 fa4c 	bl	800e34c <GUI_DEVICE__GetpDriver>
 8009eb4:	b1c0      	cbz	r0, 8009ee8 <WM_Init+0x60>
 8009eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009ec6:	4b22      	ldr	r3, [pc, #136]	; (8009f50 <WM_Init+0xc8>)
 8009ec8:	9302      	str	r3, [sp, #8]
 8009eca:	9003      	str	r0, [sp, #12]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	4601      	mov	r1, r0
 8009ed0:	f7ff fd86 	bl	80099e0 <WM_CreateWindowAsChild>
 8009ed4:	4b1f      	ldr	r3, [pc, #124]	; (8009f54 <WM_Init+0xcc>)
 8009ed6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009eda:	4b1f      	ldr	r3, [pc, #124]	; (8009f58 <WM_Init+0xd0>)
 8009edc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009ee0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009ee4:	f7ff fd3b 	bl	800995e <WM_InvalidateWindow>
 8009ee8:	3401      	adds	r4, #1
 8009eea:	2c02      	cmp	r4, #2
 8009eec:	d1df      	bne.n	8009eae <WM_Init+0x26>
 8009eee:	481b      	ldr	r0, [pc, #108]	; (8009f5c <WM_Init+0xd4>)
 8009ef0:	f006 f88e 	bl	8010010 <WM__AddCriticalHandle>
 8009ef4:	481a      	ldr	r0, [pc, #104]	; (8009f60 <WM_Init+0xd8>)
 8009ef6:	f006 f88b 	bl	8010010 <WM__AddCriticalHandle>
 8009efa:	481a      	ldr	r0, [pc, #104]	; (8009f64 <WM_Init+0xdc>)
 8009efc:	f006 f888 	bl	8010010 <WM__AddCriticalHandle>
 8009f00:	4819      	ldr	r0, [pc, #100]	; (8009f68 <WM_Init+0xe0>)
 8009f02:	f006 f885 	bl	8010010 <WM__AddCriticalHandle>
 8009f06:	4819      	ldr	r0, [pc, #100]	; (8009f6c <WM_Init+0xe4>)
 8009f08:	f006 f882 	bl	8010010 <WM__AddCriticalHandle>
 8009f0c:	4818      	ldr	r0, [pc, #96]	; (8009f70 <WM_Init+0xe8>)
 8009f0e:	f006 f87f 	bl	8010010 <WM__AddCriticalHandle>
 8009f12:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <WM_Init+0xcc>)
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f7ff fd43 	bl	80099a0 <WM_SelectWindow>
 8009f1a:	f7ff ff4b 	bl	8009db4 <WM_Activate>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	702b      	strb	r3, [r5, #0]
 8009f22:	4814      	ldr	r0, [pc, #80]	; (8009f74 <WM_Init+0xec>)
 8009f24:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <WM_Init+0xf0>)
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	b005      	add	sp, #20
 8009f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2e:	f004 bb4d 	b.w	800e5cc <GUI__RegisterExit>
 8009f32:	b005      	add	sp, #20
 8009f34:	bd30      	pop	{r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	20022a24 	.word	0x20022a24
 8009f3c:	20022f68 	.word	0x20022f68
 8009f40:	20022a18 	.word	0x20022a18
 8009f44:	2000002c 	.word	0x2000002c
 8009f48:	20022f64 	.word	0x20022f64
 8009f4c:	20022f44 	.word	0x20022f44
 8009f50:	08009e21 	.word	0x08009e21
 8009f54:	20022f4c 	.word	0x20022f4c
 8009f58:	20022f78 	.word	0x20022f78
 8009f5c:	200230bc 	.word	0x200230bc
 8009f60:	200230ac 	.word	0x200230ac
 8009f64:	2002309c 	.word	0x2002309c
 8009f68:	200230c4 	.word	0x200230c4
 8009f6c:	200230b4 	.word	0x200230b4
 8009f70:	200230a4 	.word	0x200230a4
 8009f74:	20022a1c 	.word	0x20022a1c
 8009f78:	08009311 	.word	0x08009311

08009f7c <GUI_MEMDEV_GetXSize>:
 8009f7c:	b513      	push	{r0, r1, r4, lr}
 8009f7e:	b920      	cbnz	r0, 8009f8a <GUI_MEMDEV_GetXSize+0xe>
 8009f80:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <GUI_MEMDEV_GetXSize+0x28>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009f86:	4604      	mov	r4, r0
 8009f88:	b148      	cbz	r0, 8009f9e <GUI_MEMDEV_GetXSize+0x22>
 8009f8a:	f004 febd 	bl	800ed08 <GUI_ALLOC_LockH>
 8009f8e:	ab02      	add	r3, sp, #8
 8009f90:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8009f94:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f004 fec3 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	b002      	add	sp, #8
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	2000002c 	.word	0x2000002c

08009fa8 <GUI_MEMDEV_GetXPos>:
 8009fa8:	b513      	push	{r0, r1, r4, lr}
 8009faa:	b920      	cbnz	r0, 8009fb6 <GUI_MEMDEV_GetXPos+0xe>
 8009fac:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <GUI_MEMDEV_GetXPos+0x28>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	b148      	cbz	r0, 8009fca <GUI_MEMDEV_GetXPos+0x22>
 8009fb6:	f004 fea7 	bl	800ed08 <GUI_ALLOC_LockH>
 8009fba:	ab02      	add	r3, sp, #8
 8009fbc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8009fc0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f004 fead 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009fca:	4620      	mov	r0, r4
 8009fcc:	b002      	add	sp, #8
 8009fce:	bd10      	pop	{r4, pc}
 8009fd0:	2000002c 	.word	0x2000002c

08009fd4 <GUI_MEMDEV_GetYPos>:
 8009fd4:	b513      	push	{r0, r1, r4, lr}
 8009fd6:	b920      	cbnz	r0, 8009fe2 <GUI_MEMDEV_GetYPos+0xe>
 8009fd8:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <GUI_MEMDEV_GetYPos+0x28>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009fde:	4604      	mov	r4, r0
 8009fe0:	b148      	cbz	r0, 8009ff6 <GUI_MEMDEV_GetYPos+0x22>
 8009fe2:	f004 fe91 	bl	800ed08 <GUI_ALLOC_LockH>
 8009fe6:	ab02      	add	r3, sp, #8
 8009fe8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8009fec:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f004 fe97 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	b002      	add	sp, #8
 8009ffa:	bd10      	pop	{r4, pc}
 8009ffc:	2000002c 	.word	0x2000002c

0800a000 <GUI_MEMDEV_GetDataPtr>:
 800a000:	b513      	push	{r0, r1, r4, lr}
 800a002:	b150      	cbz	r0, 800a01a <GUI_MEMDEV_GetDataPtr+0x1a>
 800a004:	f004 fe80 	bl	800ed08 <GUI_ALLOC_LockH>
 800a008:	4604      	mov	r4, r0
 800a00a:	a802      	add	r0, sp, #8
 800a00c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800a010:	f004 fe88 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a014:	f104 0018 	add.w	r0, r4, #24
 800a018:	e7ff      	b.n	800a01a <GUI_MEMDEV_GetDataPtr+0x1a>
 800a01a:	b002      	add	sp, #8
 800a01c:	bd10      	pop	{r4, pc}
	...

0800a020 <GUI_MEMDEV__SetAlphaCallback>:
 800a020:	4b01      	ldr	r3, [pc, #4]	; (800a028 <GUI_MEMDEV__SetAlphaCallback+0x8>)
 800a022:	6018      	str	r0, [r3, #0]
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	20022a28 	.word	0x20022a28

0800a02c <_GetDevData>:
 800a02c:	4802      	ldr	r0, [pc, #8]	; (800a038 <_GetDevData+0xc>)
 800a02e:	2901      	cmp	r1, #1
 800a030:	bf18      	it	ne
 800a032:	2000      	movne	r0, #0
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	0801193c 	.word	0x0801193c

0800a03c <_GetDevFunc>:
 800a03c:	4802      	ldr	r0, [pc, #8]	; (800a048 <_GetDevFunc+0xc>)
 800a03e:	2916      	cmp	r1, #22
 800a040:	bf18      	it	ne
 800a042:	2000      	movne	r0, #0
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	080100d5 	.word	0x080100d5

0800a04c <_GetDevProp>:
 800a04c:	2908      	cmp	r1, #8
 800a04e:	bf0c      	ite	eq
 800a050:	2020      	moveq	r0, #32
 800a052:	2000      	movne	r0, #0
 800a054:	4770      	bx	lr

0800a056 <_SetOrg>:
 800a056:	b508      	push	{r3, lr}
 800a058:	6800      	ldr	r0, [r0, #0]
 800a05a:	68c3      	ldr	r3, [r0, #12]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	4798      	blx	r3
 800a060:	bd08      	pop	{r3, pc}

0800a062 <_GetRect>:
 800a062:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a064:	6880      	ldr	r0, [r0, #8]
 800a066:	460c      	mov	r4, r1
 800a068:	f004 fe4e 	bl	800ed08 <GUI_ALLOC_LockH>
 800a06c:	4603      	mov	r3, r0
 800a06e:	a802      	add	r0, sp, #8
 800a070:	8899      	ldrh	r1, [r3, #4]
 800a072:	88da      	ldrh	r2, [r3, #6]
 800a074:	891d      	ldrh	r5, [r3, #8]
 800a076:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a07a:	895b      	ldrh	r3, [r3, #10]
 800a07c:	8021      	strh	r1, [r4, #0]
 800a07e:	8062      	strh	r2, [r4, #2]
 800a080:	4429      	add	r1, r5
 800a082:	441a      	add	r2, r3
 800a084:	3901      	subs	r1, #1
 800a086:	3a01      	subs	r2, #1
 800a088:	80a1      	strh	r1, [r4, #4]
 800a08a:	80e2      	strh	r2, [r4, #6]
 800a08c:	f004 fe4a 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a090:	b003      	add	sp, #12
 800a092:	bd30      	pop	{r4, r5, pc}

0800a094 <_XY2PTR>:
 800a094:	4b0e      	ldr	r3, [pc, #56]	; (800a0d0 <_XY2PTR+0x3c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a09a:	4605      	mov	r5, r0
 800a09c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a09e:	460e      	mov	r6, r1
 800a0a0:	f004 fe32 	bl	800ed08 <GUI_ALLOC_LockH>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	a802      	add	r0, sp, #8
 800a0a8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a0ac:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a0b0:	f103 0118 	add.w	r1, r3, #24
 800a0b4:	1b36      	subs	r6, r6, r4
 800a0b6:	68dc      	ldr	r4, [r3, #12]
 800a0b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a0bc:	fb04 1406 	mla	r4, r4, r6, r1
 800a0c0:	1aed      	subs	r5, r5, r3
 800a0c2:	f004 fe2f 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a0c6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	b002      	add	sp, #8
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	2000002c 	.word	0x2000002c

0800a0d4 <_GetPixelIndex>:
 800a0d4:	b508      	push	{r3, lr}
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	f7ff ffdb 	bl	800a094 <_XY2PTR>
 800a0de:	6800      	ldr	r0, [r0, #0]
 800a0e0:	bd08      	pop	{r3, pc}
	...

0800a0e4 <_XorPixel>:
 800a0e4:	4b15      	ldr	r3, [pc, #84]	; (800a13c <_XorPixel+0x58>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0ea:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	460e      	mov	r6, r1
 800a0f0:	f004 fe0a 	bl	800ed08 <GUI_ALLOC_LockH>
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	9000      	str	r0, [sp, #0]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff ffcb 	bl	800a094 <_XY2PTR>
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	4604      	mov	r4, r0
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	4798      	blx	r3
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	4058      	eors	r0, r3
 800a10e:	9b00      	ldr	r3, [sp, #0]
 800a110:	6020      	str	r0, [r4, #0]
 800a112:	6958      	ldr	r0, [r3, #20]
 800a114:	b160      	cbz	r0, 800a130 <_XorPixel+0x4c>
 800a116:	f004 fdf7 	bl	800ed08 <GUI_ALLOC_LockH>
 800a11a:	ac02      	add	r4, sp, #8
 800a11c:	6883      	ldr	r3, [r0, #8]
 800a11e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4631      	mov	r1, r6
 800a126:	462a      	mov	r2, r5
 800a128:	4798      	blx	r3
 800a12a:	4620      	mov	r0, r4
 800a12c:	f004 fdfa 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a130:	4668      	mov	r0, sp
 800a132:	f004 fdf7 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a136:	b002      	add	sp, #8
 800a138:	bd70      	pop	{r4, r5, r6, pc}
 800a13a:	bf00      	nop
 800a13c:	2000002c 	.word	0x2000002c

0800a140 <_SetPixelIndex>:
 800a140:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a142:	461c      	mov	r4, r3
 800a144:	4b10      	ldr	r3, [pc, #64]	; (800a188 <_SetPixelIndex+0x48>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a14a:	460e      	mov	r6, r1
 800a14c:	4615      	mov	r5, r2
 800a14e:	f004 fddb 	bl	800ed08 <GUI_ALLOC_LockH>
 800a152:	4629      	mov	r1, r5
 800a154:	9000      	str	r0, [sp, #0]
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ff9c 	bl	800a094 <_XY2PTR>
 800a15c:	9b00      	ldr	r3, [sp, #0]
 800a15e:	6004      	str	r4, [r0, #0]
 800a160:	6958      	ldr	r0, [r3, #20]
 800a162:	b160      	cbz	r0, 800a17e <_SetPixelIndex+0x3e>
 800a164:	f004 fdd0 	bl	800ed08 <GUI_ALLOC_LockH>
 800a168:	ac02      	add	r4, sp, #8
 800a16a:	6883      	ldr	r3, [r0, #8]
 800a16c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4631      	mov	r1, r6
 800a174:	462a      	mov	r2, r5
 800a176:	4798      	blx	r3
 800a178:	4620      	mov	r0, r4
 800a17a:	f004 fdd3 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a17e:	4668      	mov	r0, sp
 800a180:	f004 fdd0 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a184:	b002      	add	sp, #8
 800a186:	bd70      	pop	{r4, r5, r6, pc}
 800a188:	2000002c 	.word	0x2000002c

0800a18c <_DrawVLine>:
 800a18c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a190:	4d2c      	ldr	r5, [pc, #176]	; (800a244 <_DrawVLine+0xb8>)
 800a192:	461e      	mov	r6, r3
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a198:	460f      	mov	r7, r1
 800a19a:	4614      	mov	r4, r2
 800a19c:	f004 fdb4 	bl	800ed08 <GUI_ALLOC_LockH>
 800a1a0:	9000      	str	r0, [sp, #0]
 800a1a2:	6940      	ldr	r0, [r0, #20]
 800a1a4:	46a9      	mov	r9, r5
 800a1a6:	b108      	cbz	r0, 800a1ac <_DrawVLine+0x20>
 800a1a8:	f004 fdae 	bl	800ed08 <GUI_ALLOC_LockH>
 800a1ac:	9001      	str	r0, [sp, #4]
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff ff6f 	bl	800a094 <_XY2PTR>
 800a1b6:	f8d9 2000 	ldr.w	r2, [r9]
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a1be:	7c12      	ldrb	r2, [r2, #16]
 800a1c0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800a1c4:	f8d1 9000 	ldr.w	r9, [r1]
 800a1c8:	07d2      	lsls	r2, r2, #31
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	d51f      	bpl.n	800a20e <_DrawVLine+0x82>
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	4798      	blx	r3
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	9801      	ldr	r0, [sp, #4]
 800a1da:	b128      	cbz	r0, 800a1e8 <_DrawVLine+0x5c>
 800a1dc:	6882      	ldr	r2, [r0, #8]
 800a1de:	4639      	mov	r1, r7
 800a1e0:	f8d2 c000 	ldr.w	ip, [r2]
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	47e0      	blx	ip
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	ea83 0308 	eor.w	r3, r3, r8
 800a1ee:	602b      	str	r3, [r5, #0]
 800a1f0:	9b00      	ldr	r3, [sp, #0]
 800a1f2:	3401      	adds	r4, #1
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	42b4      	cmp	r4, r6
 800a1f8:	441d      	add	r5, r3
 800a1fa:	dded      	ble.n	800a1d8 <_DrawVLine+0x4c>
 800a1fc:	4668      	mov	r0, sp
 800a1fe:	f004 fd91 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	b1d3      	cbz	r3, 800a23c <_DrawVLine+0xb0>
 800a206:	a801      	add	r0, sp, #4
 800a208:	f004 fd8c 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a20c:	e016      	b.n	800a23c <_DrawVLine+0xb0>
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	b163      	cbz	r3, 800a22c <_DrawVLine+0xa0>
 800a212:	9801      	ldr	r0, [sp, #4]
 800a214:	6883      	ldr	r3, [r0, #8]
 800a216:	4622      	mov	r2, r4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4639      	mov	r1, r7
 800a21c:	3401      	adds	r4, #1
 800a21e:	4798      	blx	r3
 800a220:	42b4      	cmp	r4, r6
 800a222:	f8c5 9000 	str.w	r9, [r5]
 800a226:	4445      	add	r5, r8
 800a228:	ddf3      	ble.n	800a212 <_DrawVLine+0x86>
 800a22a:	e7e7      	b.n	800a1fc <_DrawVLine+0x70>
 800a22c:	1b34      	subs	r4, r6, r4
 800a22e:	3401      	adds	r4, #1
 800a230:	3c01      	subs	r4, #1
 800a232:	f8c5 9000 	str.w	r9, [r5]
 800a236:	4445      	add	r5, r8
 800a238:	d1fa      	bne.n	800a230 <_DrawVLine+0xa4>
 800a23a:	e7df      	b.n	800a1fc <_DrawVLine+0x70>
 800a23c:	b003      	add	sp, #12
 800a23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a242:	bf00      	nop
 800a244:	2000002c 	.word	0x2000002c

0800a248 <_FillRect>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a2fc <_FillRect+0xb4>
 800a250:	4614      	mov	r4, r2
 800a252:	f8db 2000 	ldr.w	r2, [fp]
 800a256:	b085      	sub	sp, #20
 800a258:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800a25a:	460f      	mov	r7, r1
 800a25c:	461d      	mov	r5, r3
 800a25e:	f004 fd53 	bl	800ed08 <GUI_ALLOC_LockH>
 800a262:	4621      	mov	r1, r4
 800a264:	9002      	str	r0, [sp, #8]
 800a266:	4638      	mov	r0, r7
 800a268:	f7ff ff14 	bl	800a094 <_XY2PTR>
 800a26c:	9a02      	ldr	r2, [sp, #8]
 800a26e:	f8db 3000 	ldr.w	r3, [fp]
 800a272:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800a276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a278:	4606      	mov	r6, r0
 800a27a:	6950      	ldr	r0, [r2, #20]
 800a27c:	f8d3 a000 	ldr.w	sl, [r3]
 800a280:	1bed      	subs	r5, r5, r7
 800a282:	3501      	adds	r5, #1
 800a284:	b338      	cbz	r0, 800a2d6 <_FillRect+0x8e>
 800a286:	f004 fd3f 	bl	800ed08 <GUI_ALLOC_LockH>
 800a28a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a28c:	f10d 0810 	add.w	r8, sp, #16
 800a290:	1b13      	subs	r3, r2, r4
 800a292:	f848 0d04 	str.w	r0, [r8, #-4]!
 800a296:	3301      	adds	r3, #1
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4639      	mov	r1, r7
 800a29c:	4622      	mov	r2, r4
 800a29e:	462b      	mov	r3, r5
 800a2a0:	f005 fff4 	bl	801028c <GUI_USAGE_AddRect>
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	f004 fd3d 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a2aa:	e014      	b.n	800a2d6 <_FillRect+0x8e>
 800a2ac:	f8db 3000 	ldr.w	r3, [fp]
 800a2b0:	7c1b      	ldrb	r3, [r3, #16]
 800a2b2:	07db      	lsls	r3, r3, #31
 800a2b4:	d513      	bpl.n	800a2de <_FillRect+0x96>
 800a2b6:	9b02      	ldr	r3, [sp, #8]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	4798      	blx	r3
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	462b      	mov	r3, r5
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	ea81 0100 	eor.w	r1, r1, r0
 800a2cc:	f842 1b04 	str.w	r1, [r2], #4
 800a2d0:	d1f8      	bne.n	800a2c4 <_FillRect+0x7c>
 800a2d2:	444e      	add	r6, r9
 800a2d4:	3401      	adds	r4, #1
 800a2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2d8:	429c      	cmp	r4, r3
 800a2da:	dde7      	ble.n	800a2ac <_FillRect+0x64>
 800a2dc:	e008      	b.n	800a2f0 <_FillRect+0xa8>
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	ddf7      	ble.n	800a2d2 <_FillRect+0x8a>
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	f842 ab04 	str.w	sl, [r2], #4
 800a2ec:	d1fb      	bne.n	800a2e6 <_FillRect+0x9e>
 800a2ee:	e7f0      	b.n	800a2d2 <_FillRect+0x8a>
 800a2f0:	a802      	add	r0, sp, #8
 800a2f2:	f004 fd17 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a2f6:	b005      	add	sp, #20
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	2000002c 	.word	0x2000002c

0800a300 <_DrawHLine>:
 800a300:	b507      	push	{r0, r1, r2, lr}
 800a302:	9200      	str	r2, [sp, #0]
 800a304:	f7ff ffa0 	bl	800a248 <_FillRect>
 800a308:	b003      	add	sp, #12
 800a30a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a310 <_DrawBitmap>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	4c9d      	ldr	r4, [pc, #628]	; (800a58c <_DrawBitmap+0x27c>)
 800a316:	469a      	mov	sl, r3
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	b091      	sub	sp, #68	; 0x44
 800a31c:	4680      	mov	r8, r0
 800a31e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a320:	9207      	str	r2, [sp, #28]
 800a322:	460e      	mov	r6, r1
 800a324:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800a328:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f000 8387 	beq.w	800aa3e <_DrawBitmap+0x72e>
 800a330:	f004 fcea 	bl	800ed08 <GUI_ALLOC_LockH>
 800a334:	900e      	str	r0, [sp, #56]	; 0x38
 800a336:	6940      	ldr	r0, [r0, #20]
 800a338:	b108      	cbz	r0, 800a33e <_DrawBitmap+0x2e>
 800a33a:	f004 fce5 	bl	800ed08 <GUI_ALLOC_LockH>
 800a33e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a340:	a810      	add	r0, sp, #64	; 0x40
 800a342:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	930a      	str	r3, [sp, #40]	; 0x28
 800a34a:	f004 fceb 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a34e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a350:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a352:	4437      	add	r7, r6
 800a354:	9704      	str	r7, [sp, #16]
 800a356:	b150      	cbz	r0, 800a36e <_DrawBitmap+0x5e>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	7c1b      	ldrb	r3, [r3, #16]
 800a35c:	079c      	lsls	r4, r3, #30
 800a35e:	d406      	bmi.n	800a36e <_DrawBitmap+0x5e>
 800a360:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a362:	9700      	str	r7, [sp, #0]
 800a364:	9904      	ldr	r1, [sp, #16]
 800a366:	9a07      	ldr	r2, [sp, #28]
 800a368:	4653      	mov	r3, sl
 800a36a:	f005 ff8f 	bl	801028c <GUI_USAGE_AddRect>
 800a36e:	9804      	ldr	r0, [sp, #16]
 800a370:	9907      	ldr	r1, [sp, #28]
 800a372:	f7ff fe8f 	bl	800a094 <_XY2PTR>
 800a376:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a378:	2f17      	cmp	r7, #23
 800a37a:	4606      	mov	r6, r0
 800a37c:	dd64      	ble.n	800a448 <_DrawBitmap+0x138>
 800a37e:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800a382:	9706      	str	r7, [sp, #24]
 800a384:	f04f 0900 	mov.w	r9, #0
 800a388:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a38a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a38c:	45b9      	cmp	r9, r7
 800a38e:	da57      	bge.n	800a440 <_DrawBitmap+0x130>
 800a390:	b130      	cbz	r0, 800a3a0 <_DrawBitmap+0x90>
 800a392:	6883      	ldr	r3, [r0, #8]
 800a394:	9a07      	ldr	r2, [sp, #28]
 800a396:	685c      	ldr	r4, [r3, #4]
 800a398:	9904      	ldr	r1, [sp, #16]
 800a39a:	444a      	add	r2, r9
 800a39c:	4653      	mov	r3, sl
 800a39e:	47a0      	blx	r4
 800a3a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a3a4:	68d8      	ldr	r0, [r3, #12]
 800a3a6:	b128      	cbz	r0, 800a3b4 <_DrawBitmap+0xa4>
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	4659      	mov	r1, fp
 800a3ac:	9a06      	ldr	r2, [sp, #24]
 800a3ae:	f007 fa40 	bl	8011832 <memcpy>
 800a3b2:	e03e      	b.n	800a432 <_DrawBitmap+0x122>
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	4798      	blx	r3
 800a3b8:	0e00      	lsrs	r0, r0, #24
 800a3ba:	9005      	str	r0, [sp, #20]
 800a3bc:	4635      	mov	r5, r6
 800a3be:	4657      	mov	r7, sl
 800a3c0:	465c      	mov	r4, fp
 800a3c2:	463b      	mov	r3, r7
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	f04f 0c00 	mov.w	ip, #0
 800a3ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800a3ce:	9805      	ldr	r0, [sp, #20]
 800a3d0:	0e09      	lsrs	r1, r1, #24
 800a3d2:	4281      	cmp	r1, r0
 800a3d4:	9805      	ldr	r0, [sp, #20]
 800a3d6:	bf08      	it	eq
 800a3d8:	f10c 0c01 	addeq.w	ip, ip, #1
 800a3dc:	4281      	cmp	r1, r0
 800a3de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a3e2:	d014      	beq.n	800a40e <_DrawBitmap+0xfe>
 800a3e4:	f1bc 0f00 	cmp.w	ip, #0
 800a3e8:	d014      	beq.n	800a414 <_DrawBitmap+0x104>
 800a3ea:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	9303      	str	r3, [sp, #12]
 800a3f6:	f8cd c008 	str.w	ip, [sp, #8]
 800a3fa:	f007 fa1a 	bl	8011832 <memcpy>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a404:	441d      	add	r5, r3
 800a406:	441c      	add	r4, r3
 800a408:	ebcc 0707 	rsb	r7, ip, r7
 800a40c:	e00f      	b.n	800a42e <_DrawBitmap+0x11e>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1db      	bne.n	800a3ca <_DrawBitmap+0xba>
 800a412:	e7e7      	b.n	800a3e4 <_DrawBitmap+0xd4>
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	0e02      	lsrs	r2, r0, #24
 800a418:	2aff      	cmp	r2, #255	; 0xff
 800a41a:	d005      	beq.n	800a428 <_DrawBitmap+0x118>
 800a41c:	43d2      	mvns	r2, r2
 800a41e:	6829      	ldr	r1, [r5, #0]
 800a420:	b2d2      	uxtb	r2, r2
 800a422:	f001 ff03 	bl	800c22c <GUI__MixColors>
 800a426:	6028      	str	r0, [r5, #0]
 800a428:	3504      	adds	r5, #4
 800a42a:	3404      	adds	r4, #4
 800a42c:	3f01      	subs	r7, #1
 800a42e:	2f00      	cmp	r7, #0
 800a430:	d1c7      	bne.n	800a3c2 <_DrawBitmap+0xb2>
 800a432:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a434:	44bb      	add	fp, r7
 800a436:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a438:	f109 0901 	add.w	r9, r9, #1
 800a43c:	443e      	add	r6, r7
 800a43e:	e7a3      	b.n	800a388 <_DrawBitmap+0x78>
 800a440:	2800      	cmp	r0, #0
 800a442:	f040 82f9 	bne.w	800aa38 <_DrawBitmap+0x728>
 800a446:	e2fa      	b.n	800aa3e <_DrawBitmap+0x72e>
 800a448:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a44a:	2f10      	cmp	r7, #16
 800a44c:	d137      	bne.n	800a4be <_DrawBitmap+0x1ae>
 800a44e:	1f06      	subs	r6, r0, #4
 800a450:	2500      	movs	r5, #0
 800a452:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a454:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a456:	42bd      	cmp	r5, r7
 800a458:	f280 80a0 	bge.w	800a59c <_DrawBitmap+0x28c>
 800a45c:	9f07      	ldr	r7, [sp, #28]
 800a45e:	442f      	add	r7, r5
 800a460:	b13c      	cbz	r4, 800a472 <_DrawBitmap+0x162>
 800a462:	68a3      	ldr	r3, [r4, #8]
 800a464:	9904      	ldr	r1, [sp, #16]
 800a466:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a46a:	4620      	mov	r0, r4
 800a46c:	463a      	mov	r2, r7
 800a46e:	4653      	mov	r3, sl
 800a470:	47e0      	blx	ip
 800a472:	f1ab 0302 	sub.w	r3, fp, #2
 800a476:	9306      	str	r3, [sp, #24]
 800a478:	9605      	str	r6, [sp, #20]
 800a47a:	46d1      	mov	r9, sl
 800a47c:	9904      	ldr	r1, [sp, #16]
 800a47e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a482:	9a06      	ldr	r2, [sp, #24]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800a48a:	9206      	str	r2, [sp, #24]
 800a48c:	4451      	add	r1, sl
 800a48e:	ebc9 0101 	rsb	r1, r9, r1
 800a492:	9103      	str	r1, [sp, #12]
 800a494:	4798      	blx	r3
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	9903      	ldr	r1, [sp, #12]
 800a49a:	f843 0f04 	str.w	r0, [r3, #4]!
 800a49e:	9305      	str	r3, [sp, #20]
 800a4a0:	b124      	cbz	r4, 800a4ac <_DrawBitmap+0x19c>
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	463a      	mov	r2, r7
 800a4aa:	4798      	blx	r3
 800a4ac:	f1b9 0901 	subs.w	r9, r9, #1
 800a4b0:	d1e4      	bne.n	800a47c <_DrawBitmap+0x16c>
 800a4b2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a4b4:	44bb      	add	fp, r7
 800a4b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	443e      	add	r6, r7
 800a4bc:	e7c9      	b.n	800a452 <_DrawBitmap+0x142>
 800a4be:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a4c0:	2f08      	cmp	r7, #8
 800a4c2:	f100 0604 	add.w	r6, r0, #4
 800a4c6:	d16d      	bne.n	800a5a4 <_DrawBitmap+0x294>
 800a4c8:	9f07      	ldr	r7, [sp, #28]
 800a4ca:	9907      	ldr	r1, [sp, #28]
 800a4cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a4d0:	1a7b      	subs	r3, r7, r1
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	f1a6 0004 	sub.w	r0, r6, #4
 800a4d8:	da60      	bge.n	800a59c <_DrawBitmap+0x28c>
 800a4da:	4b2c      	ldr	r3, [pc, #176]	; (800a58c <_DrawBitmap+0x27c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	7c1b      	ldrb	r3, [r3, #16]
 800a4e0:	b36d      	cbz	r5, 800a53e <_DrawBitmap+0x22e>
 800a4e2:	f013 0303 	ands.w	r3, r3, #3
 800a4e6:	d005      	beq.n	800a4f4 <_DrawBitmap+0x1e4>
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d151      	bne.n	800a590 <_DrawBitmap+0x280>
 800a4ec:	46b1      	mov	r9, r6
 800a4ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a4f2:	e01c      	b.n	800a52e <_DrawBitmap+0x21e>
 800a4f4:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800a4f8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a4fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a500:	3301      	adds	r3, #1
 800a502:	4553      	cmp	r3, sl
 800a504:	d1f6      	bne.n	800a4f4 <_DrawBitmap+0x1e4>
 800a506:	e043      	b.n	800a590 <_DrawBitmap+0x280>
 800a508:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a50c:	f849 3c04 	str.w	r3, [r9, #-4]
 800a510:	b12c      	cbz	r4, 800a51e <_DrawBitmap+0x20e>
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	4620      	mov	r0, r4
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4641      	mov	r1, r8
 800a51a:	463a      	mov	r2, r7
 800a51c:	4798      	blx	r3
 800a51e:	9b04      	ldr	r3, [sp, #16]
 800a520:	f108 0801 	add.w	r8, r8, #1
 800a524:	4453      	add	r3, sl
 800a526:	4543      	cmp	r3, r8
 800a528:	f109 0904 	add.w	r9, r9, #4
 800a52c:	d030      	beq.n	800a590 <_DrawBitmap+0x280>
 800a52e:	9804      	ldr	r0, [sp, #16]
 800a530:	ebc0 030b 	rsb	r3, r0, fp
 800a534:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0f0      	beq.n	800a51e <_DrawBitmap+0x20e>
 800a53c:	e7e4      	b.n	800a508 <_DrawBitmap+0x1f8>
 800a53e:	f013 0303 	ands.w	r3, r3, #3
 800a542:	d005      	beq.n	800a550 <_DrawBitmap+0x240>
 800a544:	2b02      	cmp	r3, #2
 800a546:	d123      	bne.n	800a590 <_DrawBitmap+0x280>
 800a548:	46b1      	mov	r9, r6
 800a54a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a54e:	e015      	b.n	800a57c <_DrawBitmap+0x26c>
 800a550:	4659      	mov	r1, fp
 800a552:	4652      	mov	r2, sl
 800a554:	f007 f96d 	bl	8011832 <memcpy>
 800a558:	e01a      	b.n	800a590 <_DrawBitmap+0x280>
 800a55a:	f849 3c04 	str.w	r3, [r9, #-4]
 800a55e:	b12c      	cbz	r4, 800a56c <_DrawBitmap+0x25c>
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	4620      	mov	r0, r4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4641      	mov	r1, r8
 800a568:	463a      	mov	r2, r7
 800a56a:	4798      	blx	r3
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	f108 0801 	add.w	r8, r8, #1
 800a572:	4453      	add	r3, sl
 800a574:	4543      	cmp	r3, r8
 800a576:	f109 0904 	add.w	r9, r9, #4
 800a57a:	d009      	beq.n	800a590 <_DrawBitmap+0x280>
 800a57c:	9904      	ldr	r1, [sp, #16]
 800a57e:	ebc1 030b 	rsb	r3, r1, fp
 800a582:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0f0      	beq.n	800a56c <_DrawBitmap+0x25c>
 800a58a:	e7e6      	b.n	800a55a <_DrawBitmap+0x24a>
 800a58c:	2000002c 	.word	0x2000002c
 800a590:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a594:	4493      	add	fp, r2
 800a596:	3701      	adds	r7, #1
 800a598:	441e      	add	r6, r3
 800a59a:	e796      	b.n	800a4ca <_DrawBitmap+0x1ba>
 800a59c:	2c00      	cmp	r4, #0
 800a59e:	f040 824b 	bne.w	800aa38 <_DrawBitmap+0x728>
 800a5a2:	e24c      	b.n	800aa3e <_DrawBitmap+0x72e>
 800a5a4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a5a6:	4bb2      	ldr	r3, [pc, #712]	; (800a870 <_DrawBitmap+0x560>)
 800a5a8:	9609      	str	r6, [sp, #36]	; 0x24
 800a5aa:	007f      	lsls	r7, r7, #1
 800a5ac:	970c      	str	r7, [sp, #48]	; 0x30
 800a5ae:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a5b0:	00bf      	lsls	r7, r7, #2
 800a5b2:	970d      	str	r7, [sp, #52]	; 0x34
 800a5b4:	9f07      	ldr	r7, [sp, #28]
 800a5b6:	9705      	str	r7, [sp, #20]
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	bf08      	it	eq
 800a5bc:	461d      	moveq	r5, r3
 800a5be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5c0:	9807      	ldr	r0, [sp, #28]
 800a5c2:	1f3c      	subs	r4, r7, #4
 800a5c4:	9f05      	ldr	r7, [sp, #20]
 800a5c6:	1a3b      	subs	r3, r7, r0
 800a5c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a5ca:	42bb      	cmp	r3, r7
 800a5cc:	f280 8232 	bge.w	800aa34 <_DrawBitmap+0x724>
 800a5d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a5d2:	2f02      	cmp	r7, #2
 800a5d4:	f000 80ad 	beq.w	800a732 <_DrawBitmap+0x422>
 800a5d8:	2f04      	cmp	r7, #4
 800a5da:	f000 814f 	beq.w	800a87c <_DrawBitmap+0x56c>
 800a5de:	2f01      	cmp	r7, #1
 800a5e0:	f040 821e 	bne.w	800aa20 <_DrawBitmap+0x710>
 800a5e4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a878 <_DrawBitmap+0x568>
 800a5e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a5ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a5ee:	f004 fb8b 	bl	800ed08 <GUI_ALLOC_LockH>
 800a5f2:	f89b 3000 	ldrb.w	r3, [fp]
 800a5f6:	4a9f      	ldr	r2, [pc, #636]	; (800a874 <_DrawBitmap+0x564>)
 800a5f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5fa:	5cd6      	ldrb	r6, [r2, r3]
 800a5fc:	f8d9 3000 	ldr.w	r3, [r9]
 800a600:	900e      	str	r0, [sp, #56]	; 0x38
 800a602:	7c1b      	ldrb	r3, [r3, #16]
 800a604:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	4657      	mov	r7, sl
 800a610:	f1c1 0808 	rsb	r8, r1, #8
 800a614:	fa46 f601 	asr.w	r6, r6, r1
 800a618:	d020      	beq.n	800a65c <_DrawBitmap+0x34c>
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d061      	beq.n	800a6e2 <_DrawBitmap+0x3d2>
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d05f      	beq.n	800a6e2 <_DrawBitmap+0x3d2>
 800a622:	465a      	mov	r2, fp
 800a624:	4547      	cmp	r7, r8
 800a626:	bf38      	it	cc
 800a628:	46b8      	movcc	r8, r7
 800a62a:	ebc8 0707 	rsb	r7, r8, r7
 800a62e:	4643      	mov	r3, r8
 800a630:	4621      	mov	r1, r4
 800a632:	f006 0001 	and.w	r0, r6, #1
 800a636:	3b01      	subs	r3, #1
 800a638:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800a63c:	f841 0b04 	str.w	r0, [r1], #4
 800a640:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a644:	d1f5      	bne.n	800a632 <_DrawBitmap+0x322>
 800a646:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a64a:	2f00      	cmp	r7, #0
 800a64c:	d06d      	beq.n	800a72a <_DrawBitmap+0x41a>
 800a64e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a652:	4988      	ldr	r1, [pc, #544]	; (800a874 <_DrawBitmap+0x564>)
 800a654:	f04f 0808 	mov.w	r8, #8
 800a658:	5cce      	ldrb	r6, [r1, r3]
 800a65a:	e7e3      	b.n	800a624 <_DrawBitmap+0x314>
 800a65c:	686b      	ldr	r3, [r5, #4]
 800a65e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a662:	930b      	str	r3, [sp, #44]	; 0x2c
 800a664:	f8cd b020 	str.w	fp, [sp, #32]
 800a668:	4547      	cmp	r7, r8
 800a66a:	bf38      	it	cc
 800a66c:	46b8      	movcc	r8, r7
 800a66e:	ebc8 0707 	rsb	r7, r8, r7
 800a672:	f1bc 0f00 	cmp.w	ip, #0
 800a676:	d026      	beq.n	800a6c6 <_DrawBitmap+0x3b6>
 800a678:	b91e      	cbnz	r6, 800a682 <_DrawBitmap+0x372>
 800a67a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a67e:	44c1      	add	r9, r8
 800a680:	e025      	b.n	800a6ce <_DrawBitmap+0x3be>
 800a682:	07f0      	lsls	r0, r6, #31
 800a684:	d50c      	bpl.n	800a6a0 <_DrawBitmap+0x390>
 800a686:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a68a:	9a05      	ldr	r2, [sp, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8cd c008 	str.w	ip, [sp, #8]
 800a692:	4660      	mov	r0, ip
 800a694:	4649      	mov	r1, r9
 800a696:	4798      	blx	r3
 800a698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a69a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	f1b8 0801 	subs.w	r8, r8, #1
 800a6a4:	f109 0901 	add.w	r9, r9, #1
 800a6a8:	f104 0404 	add.w	r4, r4, #4
 800a6ac:	d00f      	beq.n	800a6ce <_DrawBitmap+0x3be>
 800a6ae:	0876      	lsrs	r6, r6, #1
 800a6b0:	e7e2      	b.n	800a678 <_DrawBitmap+0x368>
 800a6b2:	07f1      	lsls	r1, r6, #31
 800a6b4:	bf44      	itt	mi
 800a6b6:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800a6b8:	6023      	strmi	r3, [r4, #0]
 800a6ba:	f1b8 0801 	subs.w	r8, r8, #1
 800a6be:	f104 0404 	add.w	r4, r4, #4
 800a6c2:	d004      	beq.n	800a6ce <_DrawBitmap+0x3be>
 800a6c4:	0876      	lsrs	r6, r6, #1
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	d1f3      	bne.n	800a6b2 <_DrawBitmap+0x3a2>
 800a6ca:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a6ce:	b367      	cbz	r7, 800a72a <_DrawBitmap+0x41a>
 800a6d0:	9808      	ldr	r0, [sp, #32]
 800a6d2:	4a68      	ldr	r2, [pc, #416]	; (800a874 <_DrawBitmap+0x564>)
 800a6d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a6d8:	9008      	str	r0, [sp, #32]
 800a6da:	5cd6      	ldrb	r6, [r2, r3]
 800a6dc:	f04f 0808 	mov.w	r8, #8
 800a6e0:	e7c2      	b.n	800a668 <_DrawBitmap+0x358>
 800a6e2:	6803      	ldr	r3, [r0, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	4798      	blx	r3
 800a6ea:	4659      	mov	r1, fp
 800a6ec:	4547      	cmp	r7, r8
 800a6ee:	bf38      	it	cc
 800a6f0:	46b8      	movcc	r8, r7
 800a6f2:	ebc8 0707 	rsb	r7, r8, r7
 800a6f6:	1d23      	adds	r3, r4, #4
 800a6f8:	46c6      	mov	lr, r8
 800a6fa:	07f2      	lsls	r2, r6, #31
 800a6fc:	d504      	bpl.n	800a708 <_DrawBitmap+0x3f8>
 800a6fe:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800a702:	4042      	eors	r2, r0
 800a704:	f843 2c04 	str.w	r2, [r3, #-4]
 800a708:	f1be 0e01 	subs.w	lr, lr, #1
 800a70c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a710:	f103 0304 	add.w	r3, r3, #4
 800a714:	d1f1      	bne.n	800a6fa <_DrawBitmap+0x3ea>
 800a716:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a71a:	b137      	cbz	r7, 800a72a <_DrawBitmap+0x41a>
 800a71c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a720:	4a54      	ldr	r2, [pc, #336]	; (800a874 <_DrawBitmap+0x564>)
 800a722:	f04f 0808 	mov.w	r8, #8
 800a726:	5cd6      	ldrb	r6, [r2, r3]
 800a728:	e7e0      	b.n	800a6ec <_DrawBitmap+0x3dc>
 800a72a:	a80e      	add	r0, sp, #56	; 0x38
 800a72c:	f004 fafa 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800a730:	e176      	b.n	800aa20 <_DrawBitmap+0x710>
 800a732:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a736:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a73a:	f1c7 0604 	rsb	r6, r7, #4
 800a73e:	f89b 7000 	ldrb.w	r7, [fp]
 800a742:	409f      	lsls	r7, r3
 800a744:	4b4c      	ldr	r3, [pc, #304]	; (800a878 <_DrawBitmap+0x568>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	7c1b      	ldrb	r3, [r3, #16]
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	2b01      	cmp	r3, #1
 800a750:	b2f6      	uxtb	r6, r6
 800a752:	b2ff      	uxtb	r7, r7
 800a754:	d066      	beq.n	800a824 <_DrawBitmap+0x514>
 800a756:	d308      	bcc.n	800a76a <_DrawBitmap+0x45a>
 800a758:	2b02      	cmp	r3, #2
 800a75a:	f040 8161 	bne.w	800aa20 <_DrawBitmap+0x710>
 800a75e:	9804      	ldr	r0, [sp, #16]
 800a760:	f8cd b020 	str.w	fp, [sp, #32]
 800a764:	46d0      	mov	r8, sl
 800a766:	9006      	str	r0, [sp, #24]
 800a768:	e03e      	b.n	800a7e8 <_DrawBitmap+0x4d8>
 800a76a:	465a      	mov	r2, fp
 800a76c:	4653      	mov	r3, sl
 800a76e:	429e      	cmp	r6, r3
 800a770:	bfc8      	it	gt
 800a772:	b2de      	uxtbgt	r6, r3
 800a774:	1b9b      	subs	r3, r3, r6
 800a776:	4631      	mov	r1, r6
 800a778:	4620      	mov	r0, r4
 800a77a:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800a77e:	3901      	subs	r1, #1
 800a780:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800a784:	f840 cb04 	str.w	ip, [r0], #4
 800a788:	00bf      	lsls	r7, r7, #2
 800a78a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a78e:	b2ff      	uxtb	r7, r7
 800a790:	d1f3      	bne.n	800a77a <_DrawBitmap+0x46a>
 800a792:	3e01      	subs	r6, #1
 800a794:	b2f6      	uxtb	r6, r6
 800a796:	3601      	adds	r6, #1
 800a798:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 813f 	beq.w	800aa20 <_DrawBitmap+0x710>
 800a7a2:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800a7a6:	2604      	movs	r6, #4
 800a7a8:	e7e1      	b.n	800a76e <_DrawBitmap+0x45e>
 800a7aa:	9906      	ldr	r1, [sp, #24]
 800a7ac:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800a7b0:	4449      	add	r1, r9
 800a7b2:	d122      	bne.n	800a7fa <_DrawBitmap+0x4ea>
 800a7b4:	f109 0901 	add.w	r9, r9, #1
 800a7b8:	fa5f f289 	uxtb.w	r2, r9
 800a7bc:	00bf      	lsls	r7, r7, #2
 800a7be:	4296      	cmp	r6, r2
 800a7c0:	b2ff      	uxtb	r7, r7
 800a7c2:	d1f2      	bne.n	800a7aa <_DrawBitmap+0x49a>
 800a7c4:	9f06      	ldr	r7, [sp, #24]
 800a7c6:	3e01      	subs	r6, #1
 800a7c8:	b2f6      	uxtb	r6, r6
 800a7ca:	1c7b      	adds	r3, r7, #1
 800a7cc:	1c72      	adds	r2, r6, #1
 800a7ce:	199e      	adds	r6, r3, r6
 800a7d0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800a7d4:	9606      	str	r6, [sp, #24]
 800a7d6:	f1b8 0f00 	cmp.w	r8, #0
 800a7da:	f000 8121 	beq.w	800aa20 <_DrawBitmap+0x710>
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a7e4:	9308      	str	r3, [sp, #32]
 800a7e6:	2604      	movs	r6, #4
 800a7e8:	4546      	cmp	r6, r8
 800a7ea:	bfc8      	it	gt
 800a7ec:	fa5f f688 	uxtbgt.w	r6, r8
 800a7f0:	ebc6 0808 	rsb	r8, r6, r8
 800a7f4:	f04f 0900 	mov.w	r9, #0
 800a7f8:	e7d7      	b.n	800a7aa <_DrawBitmap+0x49a>
 800a7fa:	09ba      	lsrs	r2, r7, #6
 800a7fc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a800:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800a804:	f1bc 0f00 	cmp.w	ip, #0
 800a808:	d0d4      	beq.n	800a7b4 <_DrawBitmap+0x4a4>
 800a80a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	920b      	str	r2, [sp, #44]	; 0x2c
 800a812:	4660      	mov	r0, ip
 800a814:	f8cd c008 	str.w	ip, [sp, #8]
 800a818:	9a05      	ldr	r2, [sp, #20]
 800a81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81c:	4798      	blx	r3
 800a81e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a822:	e7c7      	b.n	800a7b4 <_DrawBitmap+0x4a4>
 800a824:	4658      	mov	r0, fp
 800a826:	4653      	mov	r3, sl
 800a828:	429e      	cmp	r6, r3
 800a82a:	bfc8      	it	gt
 800a82c:	b2de      	uxtbgt	r6, r3
 800a82e:	1b9b      	subs	r3, r3, r6
 800a830:	1d22      	adds	r2, r4, #4
 800a832:	46b4      	mov	ip, r6
 800a834:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800a838:	d005      	beq.n	800a846 <_DrawBitmap+0x536>
 800a83a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800a83e:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800a842:	f842 1c04 	str.w	r1, [r2, #-4]
 800a846:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a84a:	00bf      	lsls	r7, r7, #2
 800a84c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800a850:	b2ff      	uxtb	r7, r7
 800a852:	f102 0204 	add.w	r2, r2, #4
 800a856:	d1ed      	bne.n	800a834 <_DrawBitmap+0x524>
 800a858:	3e01      	subs	r6, #1
 800a85a:	b2f6      	uxtb	r6, r6
 800a85c:	3601      	adds	r6, #1
 800a85e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 80dc 	beq.w	800aa20 <_DrawBitmap+0x710>
 800a868:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a86c:	2604      	movs	r6, #4
 800a86e:	e7db      	b.n	800a828 <_DrawBitmap+0x518>
 800a870:	080118fc 	.word	0x080118fc
 800a874:	08012cec 	.word	0x08012cec
 800a878:	2000002c 	.word	0x2000002c
 800a87c:	4a71      	ldr	r2, [pc, #452]	; (800aa44 <_DrawBitmap+0x734>)
 800a87e:	f89b 3000 	ldrb.w	r3, [fp]
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a886:	7c12      	ldrb	r2, [r2, #16]
 800a888:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a88a:	f002 0203 	and.w	r2, r2, #3
 800a88e:	4083      	lsls	r3, r0
 800a890:	2a01      	cmp	r2, #1
 800a892:	b2de      	uxtb	r6, r3
 800a894:	f000 809c 	beq.w	800a9d0 <_DrawBitmap+0x6c0>
 800a898:	d302      	bcc.n	800a8a0 <_DrawBitmap+0x590>
 800a89a:	2a02      	cmp	r2, #2
 800a89c:	d035      	beq.n	800a90a <_DrawBitmap+0x5fa>
 800a89e:	e0bf      	b.n	800aa20 <_DrawBitmap+0x710>
 800a8a0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a8a2:	b15f      	cbz	r7, 800a8bc <_DrawBitmap+0x5ac>
 800a8a4:	0936      	lsrs	r6, r6, #4
 800a8a6:	f10b 0201 	add.w	r2, fp, #1
 800a8aa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800a8b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a8b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a8ba:	e001      	b.n	800a8c0 <_DrawBitmap+0x5b0>
 800a8bc:	4653      	mov	r3, sl
 800a8be:	465a      	mov	r2, fp
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	dd1a      	ble.n	800a8fa <_DrawBitmap+0x5ea>
 800a8c4:	1058      	asrs	r0, r3, #1
 800a8c6:	f104 0108 	add.w	r1, r4, #8
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	eb02 0800 	add.w	r8, r2, r0
 800a8d2:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800a8d6:	f006 060f 	and.w	r6, r6, #15
 800a8da:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800a8de:	f841 7c08 	str.w	r7, [r1, #-8]
 800a8e2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a8e6:	f841 6c04 	str.w	r6, [r1, #-4]
 800a8ea:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800a8ee:	4542      	cmp	r2, r8
 800a8f0:	f101 0108 	add.w	r1, r1, #8
 800a8f4:	d1ed      	bne.n	800a8d2 <_DrawBitmap+0x5c2>
 800a8f6:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 8090 	beq.w	800aa20 <_DrawBitmap+0x710>
 800a900:	0936      	lsrs	r6, r6, #4
 800a902:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	e08a      	b.n	800aa20 <_DrawBitmap+0x710>
 800a90a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a90c:	b1c0      	cbz	r0, 800a940 <_DrawBitmap+0x630>
 800a90e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a912:	d00a      	beq.n	800a92a <_DrawBitmap+0x61a>
 800a914:	0936      	lsrs	r6, r6, #4
 800a916:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	b12f      	cbz	r7, 800a92a <_DrawBitmap+0x61a>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	9904      	ldr	r1, [sp, #16]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	9a05      	ldr	r2, [sp, #20]
 800a926:	4638      	mov	r0, r7
 800a928:	4798      	blx	r3
 800a92a:	9904      	ldr	r1, [sp, #16]
 800a92c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a92e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800a932:	f101 0801 	add.w	r8, r1, #1
 800a936:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800a93a:	f10b 0901 	add.w	r9, fp, #1
 800a93e:	e011      	b.n	800a964 <_DrawBitmap+0x654>
 800a940:	46d4      	mov	ip, sl
 800a942:	46d9      	mov	r9, fp
 800a944:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a948:	e00c      	b.n	800a964 <_DrawBitmap+0x654>
 800a94a:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800a94e:	d10d      	bne.n	800a96c <_DrawBitmap+0x65c>
 800a950:	f016 060f 	ands.w	r6, r6, #15
 800a954:	d11b      	bne.n	800a98e <_DrawBitmap+0x67e>
 800a956:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800a95a:	3408      	adds	r4, #8
 800a95c:	f108 0802 	add.w	r8, r8, #2
 800a960:	f1ac 0c02 	sub.w	ip, ip, #2
 800a964:	f1bc 0f01 	cmp.w	ip, #1
 800a968:	dcef      	bgt.n	800a94a <_DrawBitmap+0x63a>
 800a96a:	e021      	b.n	800a9b0 <_DrawBitmap+0x6a0>
 800a96c:	0933      	lsrs	r3, r6, #4
 800a96e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a972:	6023      	str	r3, [r4, #0]
 800a974:	2f00      	cmp	r7, #0
 800a976:	d0eb      	beq.n	800a950 <_DrawBitmap+0x640>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	9a05      	ldr	r2, [sp, #20]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8cd c008 	str.w	ip, [sp, #8]
 800a982:	4638      	mov	r0, r7
 800a984:	4641      	mov	r1, r8
 800a986:	4798      	blx	r3
 800a988:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a98c:	e7e0      	b.n	800a950 <_DrawBitmap+0x640>
 800a98e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a992:	6063      	str	r3, [r4, #4]
 800a994:	2f00      	cmp	r7, #0
 800a996:	d0de      	beq.n	800a956 <_DrawBitmap+0x646>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	9a05      	ldr	r2, [sp, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f8cd c008 	str.w	ip, [sp, #8]
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f108 0101 	add.w	r1, r8, #1
 800a9a8:	4798      	blx	r3
 800a9aa:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a9ae:	e7d2      	b.n	800a956 <_DrawBitmap+0x646>
 800a9b0:	f1bc 0f00 	cmp.w	ip, #0
 800a9b4:	d034      	beq.n	800aa20 <_DrawBitmap+0x710>
 800a9b6:	0936      	lsrs	r6, r6, #4
 800a9b8:	d032      	beq.n	800aa20 <_DrawBitmap+0x710>
 800a9ba:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	b377      	cbz	r7, 800aa20 <_DrawBitmap+0x710>
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	9a05      	ldr	r2, [sp, #20]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4798      	blx	r3
 800a9ce:	e027      	b.n	800aa20 <_DrawBitmap+0x710>
 800a9d0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a9d2:	f1c7 0302 	rsb	r3, r7, #2
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	465f      	mov	r7, fp
 800a9da:	4652      	mov	r2, sl
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	bfc8      	it	gt
 800a9e0:	b2d3      	uxtbgt	r3, r2
 800a9e2:	1ad2      	subs	r2, r2, r3
 800a9e4:	1d20      	adds	r0, r4, #4
 800a9e6:	469c      	mov	ip, r3
 800a9e8:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800a9ec:	d005      	beq.n	800a9fa <_DrawBitmap+0x6ea>
 800a9ee:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800a9f2:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800a9f6:	f840 1c04 	str.w	r1, [r0, #-4]
 800a9fa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a9fe:	0136      	lsls	r6, r6, #4
 800aa00:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800aa04:	b2f6      	uxtb	r6, r6
 800aa06:	f100 0004 	add.w	r0, r0, #4
 800aa0a:	d1ed      	bne.n	800a9e8 <_DrawBitmap+0x6d8>
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	3301      	adds	r3, #1
 800aa12:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800aa16:	b11a      	cbz	r2, 800aa20 <_DrawBitmap+0x710>
 800aa18:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e7dd      	b.n	800a9dc <_DrawBitmap+0x6cc>
 800aa20:	9b05      	ldr	r3, [sp, #20]
 800aa22:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800aa24:	3301      	adds	r3, #1
 800aa26:	44bb      	add	fp, r7
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2e:	443b      	add	r3, r7
 800aa30:	9309      	str	r3, [sp, #36]	; 0x24
 800aa32:	e5c4      	b.n	800a5be <_DrawBitmap+0x2ae>
 800aa34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa36:	b113      	cbz	r3, 800aa3e <_DrawBitmap+0x72e>
 800aa38:	a80f      	add	r0, sp, #60	; 0x3c
 800aa3a:	f004 f973 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800aa3e:	b011      	add	sp, #68	; 0x44
 800aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa44:	2000002c 	.word	0x2000002c

0800aa48 <GUI_MEMDEV_GetBitsPerPixel>:
 800aa48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	b170      	cbz	r0, 800aa6c <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800aa4e:	f004 f95b 	bl	800ed08 <GUI_ALLOC_LockH>
 800aa52:	6803      	ldr	r3, [r0, #0]
 800aa54:	ac02      	add	r4, sp, #8
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	4798      	blx	r3
 800aa60:	f000 ffb1 	bl	800b9c6 <LCD__GetBPPDevice>
 800aa64:	4605      	mov	r5, r0
 800aa66:	4620      	mov	r0, r4
 800aa68:	f004 f95c 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	b003      	add	sp, #12
 800aa70:	bd30      	pop	{r4, r5, pc}
	...

0800aa74 <GUI_MEMDEV_Delete>:
 800aa74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa76:	4604      	mov	r4, r0
 800aa78:	b1d0      	cbz	r0, 800aab0 <GUI_MEMDEV_Delete+0x3c>
 800aa7a:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <GUI_MEMDEV_Delete+0x40>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa80:	4283      	cmp	r3, r0
 800aa82:	d101      	bne.n	800aa88 <GUI_MEMDEV_Delete+0x14>
 800aa84:	f002 fd08 	bl	800d498 <GUI_SelectLCD>
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f004 f93d 	bl	800ed08 <GUI_ALLOC_LockH>
 800aa8e:	9001      	str	r0, [sp, #4]
 800aa90:	6940      	ldr	r0, [r0, #20]
 800aa92:	b108      	cbz	r0, 800aa98 <GUI_MEMDEV_Delete+0x24>
 800aa94:	f005 fbe6 	bl	8010264 <GUI_USAGE_DecUseCnt>
 800aa98:	ad02      	add	r5, sp, #8
 800aa9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800aa9e:	6818      	ldr	r0, [r3, #0]
 800aaa0:	f003 fc64 	bl	800e36c <GUI_DEVICE_Delete>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f004 f93d 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f004 f95a 	bl	800ed64 <GUI_ALLOC_Free>
 800aab0:	b003      	add	sp, #12
 800aab2:	bd30      	pop	{r4, r5, pc}
 800aab4:	2000002c 	.word	0x2000002c

0800aab8 <GUI_MEMDEV_Select>:
 800aab8:	4b11      	ldr	r3, [pc, #68]	; (800ab00 <GUI_MEMDEV_Select+0x48>)
 800aaba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4604      	mov	r4, r0
 800aac0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800aac2:	461f      	mov	r7, r3
 800aac4:	b910      	cbnz	r0, 800aacc <GUI_MEMDEV_Select+0x14>
 800aac6:	f002 fce7 	bl	800d498 <GUI_SelectLCD>
 800aaca:	e016      	b.n	800aafa <GUI_MEMDEV_Select+0x42>
 800aacc:	b10e      	cbz	r6, 800aad2 <GUI_MEMDEV_Select+0x1a>
 800aace:	f002 fce3 	bl	800d498 <GUI_SelectLCD>
 800aad2:	f7ff f977 	bl	8009dc4 <WM_Deactivate>
 800aad6:	4620      	mov	r0, r4
 800aad8:	f004 f916 	bl	800ed08 <GUI_ALLOC_LockH>
 800aadc:	ad02      	add	r5, sp, #8
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800aae4:	661c      	str	r4, [r3, #96]	; 0x60
 800aae6:	6800      	ldr	r0, [r0, #0]
 800aae8:	f003 fc7e 	bl	800e3e8 <GUI_DEVICE_Link>
 800aaec:	4628      	mov	r0, r5
 800aaee:	f004 f919 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800aaf2:	f000 fdc9 	bl	800b688 <LCD_UpdateColorIndices>
 800aaf6:	f001 f9e1 	bl	800bebc <LCD_SetClipRectMax>
 800aafa:	4630      	mov	r0, r6
 800aafc:	b003      	add	sp, #12
 800aafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab00:	2000002c 	.word	0x2000002c

0800ab04 <_GetRect>:
 800ab04:	6883      	ldr	r3, [r0, #8]
 800ab06:	2200      	movs	r2, #0
 800ab08:	800a      	strh	r2, [r1, #0]
 800ab0a:	804a      	strh	r2, [r1, #2]
 800ab0c:	695a      	ldr	r2, [r3, #20]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	3a01      	subs	r2, #1
 800ab12:	3b01      	subs	r3, #1
 800ab14:	808a      	strh	r2, [r1, #4]
 800ab16:	80cb      	strh	r3, [r1, #6]
 800ab18:	4770      	bx	lr

0800ab1a <_SetPixelIndex>:
 800ab1a:	b510      	push	{r4, lr}
 800ab1c:	6880      	ldr	r0, [r0, #8]
 800ab1e:	69c4      	ldr	r4, [r0, #28]
 800ab20:	6800      	ldr	r0, [r0, #0]
 800ab22:	fb04 1202 	mla	r2, r4, r2, r1
 800ab26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ab2a:	bd10      	pop	{r4, pc}

0800ab2c <_GetPixelIndex>:
 800ab2c:	6883      	ldr	r3, [r0, #8]
 800ab2e:	69d8      	ldr	r0, [r3, #28]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	fb00 1202 	mla	r2, r0, r2, r1
 800ab36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ab3a:	4770      	bx	lr

0800ab3c <_XorPixel>:
 800ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab40:	4604      	mov	r4, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	4616      	mov	r6, r2
 800ab46:	f7ff fff1 	bl	800ab2c <_GetPixelIndex>
 800ab4a:	6925      	ldr	r5, [r4, #16]
 800ab4c:	68ab      	ldr	r3, [r5, #8]
 800ab4e:	4680      	mov	r8, r0
 800ab50:	4798      	blx	r3
 800ab52:	4639      	mov	r1, r7
 800ab54:	ea80 0308 	eor.w	r3, r0, r8
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab60:	f7ff bfdb 	b.w	800ab1a <_SetPixelIndex>

0800ab64 <_FillRect>:
 800ab64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab68:	6886      	ldr	r6, [r0, #8]
 800ab6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ab6c:	6b34      	ldr	r4, [r6, #48]	; 0x30
 800ab6e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ac84 <_FillRect+0x120>
 800ab72:	4689      	mov	r9, r1
 800ab74:	4692      	mov	sl, r2
 800ab76:	b144      	cbz	r4, 800ab8a <_FillRect+0x26>
 800ab78:	9700      	str	r7, [sp, #0]
 800ab7a:	f8dc 5000 	ldr.w	r5, [ip]
 800ab7e:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800ab80:	682d      	ldr	r5, [r5, #0]
 800ab82:	9501      	str	r5, [sp, #4]
 800ab84:	6980      	ldr	r0, [r0, #24]
 800ab86:	47a0      	blx	r4
 800ab88:	e079      	b.n	800ac7e <_FillRect+0x11a>
 800ab8a:	1a5b      	subs	r3, r3, r1
 800ab8c:	f8dc 1000 	ldr.w	r1, [ip]
 800ab90:	f891 c010 	ldrb.w	ip, [r1, #16]
 800ab94:	ebc2 0807 	rsb	r8, r2, r7
 800ab98:	f01c 0c01 	ands.w	ip, ip, #1
 800ab9c:	f103 0401 	add.w	r4, r3, #1
 800aba0:	f108 0501 	add.w	r5, r8, #1
 800aba4:	69f7      	ldr	r7, [r6, #28]
 800aba6:	d021      	beq.n	800abec <_FillRect+0x88>
 800aba8:	6903      	ldr	r3, [r0, #16]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	4798      	blx	r3
 800abae:	69f2      	ldr	r2, [r6, #28]
 800abb0:	2c00      	cmp	r4, #0
 800abb2:	d064      	beq.n	800ac7e <_FillRect+0x11a>
 800abb4:	f06f 0c03 	mvn.w	ip, #3
 800abb8:	fb02 990a 	mla	r9, r2, sl, r9
 800abbc:	fb0c fc07 	mul.w	ip, ip, r7
 800abc0:	fb07 9708 	mla	r7, r7, r8, r9
 800abc4:	00bf      	lsls	r7, r7, #2
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	d059      	beq.n	800ac7e <_FillRect+0x11a>
 800abca:	3d01      	subs	r5, #1
 800abcc:	463b      	mov	r3, r7
 800abce:	4622      	mov	r2, r4
 800abd0:	f8d6 8000 	ldr.w	r8, [r6]
 800abd4:	f853 1008 	ldr.w	r1, [r3, r8]
 800abd8:	3a01      	subs	r2, #1
 800abda:	ea81 0100 	eor.w	r1, r1, r0
 800abde:	f843 1008 	str.w	r1, [r3, r8]
 800abe2:	f103 0304 	add.w	r3, r3, #4
 800abe6:	d1f3      	bne.n	800abd0 <_FillRect+0x6c>
 800abe8:	4467      	add	r7, ip
 800abea:	e7ec      	b.n	800abc6 <_FillRect+0x62>
 800abec:	6830      	ldr	r0, [r6, #0]
 800abee:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800abf0:	fb07 9202 	mla	r2, r7, r2, r9
 800abf4:	2c0f      	cmp	r4, #15
 800abf6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800abfa:	6808      	ldr	r0, [r1, #0]
 800abfc:	d92f      	bls.n	800ac5e <_FillRect+0xfa>
 800abfe:	f1a3 0a0f 	sub.w	sl, r3, #15
 800ac02:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800ac06:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800ac0a:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 800ac0e:	f10a 0a01 	add.w	sl, sl, #1
 800ac12:	fb09 2101 	mla	r1, r9, r1, r2
 800ac16:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 800ac1a:	462e      	mov	r6, r5
 800ac1c:	4662      	mov	r2, ip
 800ac1e:	b1e6      	cbz	r6, 800ac5a <_FillRect+0xf6>
 800ac20:	4622      	mov	r2, r4
 800ac22:	460b      	mov	r3, r1
 800ac24:	3a10      	subs	r2, #16
 800ac26:	2a0f      	cmp	r2, #15
 800ac28:	6018      	str	r0, [r3, #0]
 800ac2a:	6058      	str	r0, [r3, #4]
 800ac2c:	6098      	str	r0, [r3, #8]
 800ac2e:	60d8      	str	r0, [r3, #12]
 800ac30:	6118      	str	r0, [r3, #16]
 800ac32:	6158      	str	r0, [r3, #20]
 800ac34:	6198      	str	r0, [r3, #24]
 800ac36:	61d8      	str	r0, [r3, #28]
 800ac38:	6218      	str	r0, [r3, #32]
 800ac3a:	6258      	str	r0, [r3, #36]	; 0x24
 800ac3c:	6298      	str	r0, [r3, #40]	; 0x28
 800ac3e:	62d8      	str	r0, [r3, #44]	; 0x2c
 800ac40:	6318      	str	r0, [r3, #48]	; 0x30
 800ac42:	6358      	str	r0, [r3, #52]	; 0x34
 800ac44:	6398      	str	r0, [r3, #56]	; 0x38
 800ac46:	63d8      	str	r0, [r3, #60]	; 0x3c
 800ac48:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800ac4c:	d8ea      	bhi.n	800ac24 <_FillRect+0xc0>
 800ac4e:	eb01 020a 	add.w	r2, r1, sl
 800ac52:	3e01      	subs	r6, #1
 800ac54:	ebc9 0101 	rsb	r1, r9, r1
 800ac58:	e7e1      	b.n	800ac1e <_FillRect+0xba>
 800ac5a:	f004 040f 	and.w	r4, r4, #15
 800ac5e:	b174      	cbz	r4, 800ac7e <_FillRect+0x11a>
 800ac60:	00bf      	lsls	r7, r7, #2
 800ac62:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800ac66:	fb07 2208 	mla	r2, r7, r8, r2
 800ac6a:	b145      	cbz	r5, 800ac7e <_FillRect+0x11a>
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4623      	mov	r3, r4
 800ac70:	3b01      	subs	r3, #1
 800ac72:	f841 0b04 	str.w	r0, [r1], #4
 800ac76:	d1fb      	bne.n	800ac70 <_FillRect+0x10c>
 800ac78:	3d01      	subs	r5, #1
 800ac7a:	1bd2      	subs	r2, r2, r7
 800ac7c:	e7f5      	b.n	800ac6a <_FillRect+0x106>
 800ac7e:	b002      	add	sp, #8
 800ac80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac84:	2000002c 	.word	0x2000002c

0800ac88 <_DrawHLine>:
 800ac88:	b507      	push	{r0, r1, r2, lr}
 800ac8a:	9200      	str	r2, [sp, #0]
 800ac8c:	f7ff ff6a 	bl	800ab64 <_FillRect>
 800ac90:	b003      	add	sp, #12
 800ac92:	f85d fb04 	ldr.w	pc, [sp], #4

0800ac96 <_DrawVLine>:
 800ac96:	b507      	push	{r0, r1, r2, lr}
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	f7ff ff62 	bl	800ab64 <_FillRect>
 800aca0:	b003      	add	sp, #12
 800aca2:	f85d fb04 	ldr.w	pc, [sp], #4

0800aca6 <_GetDevProp>:
 800aca6:	3901      	subs	r1, #1
 800aca8:	6883      	ldr	r3, [r0, #8]
 800acaa:	290d      	cmp	r1, #13
 800acac:	d814      	bhi.n	800acd8 <_GetDevProp+0x32>
 800acae:	e8df f001 	tbb	[pc, r1]
 800acb2:	0b09      	.short	0x0b09
 800acb4:	13130f0d 	.word	0x13130f0d
 800acb8:	11160713 	.word	0x11160713
 800acbc:	16161611 	.word	0x16161611
 800acc0:	2020      	movs	r0, #32
 800acc2:	4770      	bx	lr
 800acc4:	68d8      	ldr	r0, [r3, #12]
 800acc6:	4770      	bx	lr
 800acc8:	6918      	ldr	r0, [r3, #16]
 800acca:	4770      	bx	lr
 800accc:	6958      	ldr	r0, [r3, #20]
 800acce:	4770      	bx	lr
 800acd0:	6998      	ldr	r0, [r3, #24]
 800acd2:	4770      	bx	lr
 800acd4:	2001      	movs	r0, #1
 800acd6:	4770      	bx	lr
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acdc:	4770      	bx	lr
 800acde:	2000      	movs	r0, #0
 800ace0:	4770      	bx	lr
	...

0800ace4 <_GetDevData>:
 800ace4:	4802      	ldr	r0, [pc, #8]	; (800acf0 <_GetDevData+0xc>)
 800ace6:	2901      	cmp	r1, #1
 800ace8:	bf18      	it	ne
 800acea:	2000      	movne	r0, #0
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	0801193c 	.word	0x0801193c

0800acf4 <_ReadRect>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	460f      	mov	r7, r1
 800acfa:	6881      	ldr	r1, [r0, #8]
 800acfc:	69c8      	ldr	r0, [r1, #28]
 800acfe:	f06f 0903 	mvn.w	r9, #3
 800ad02:	fb00 7502 	mla	r5, r0, r2, r7
 800ad06:	1bdb      	subs	r3, r3, r7
 800ad08:	00ae      	lsls	r6, r5, #2
 800ad0a:	fb09 fc00 	mul.w	ip, r9, r0
 800ad0e:	fb09 f505 	mul.w	r5, r9, r5
 800ad12:	f103 0901 	add.w	r9, r3, #1
 800ad16:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800ad1a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800ad1e:	1c5f      	adds	r7, r3, #1
 800ad20:	4630      	mov	r0, r6
 800ad22:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ad26:	680c      	ldr	r4, [r1, #0]
 800ad28:	44aa      	add	sl, r5
 800ad2a:	f850 b004 	ldr.w	fp, [r0, r4]
 800ad2e:	f84a b000 	str.w	fp, [sl, r0]
 800ad32:	3f01      	subs	r7, #1
 800ad34:	f100 0004 	add.w	r0, r0, #4
 800ad38:	d1f3      	bne.n	800ad22 <_ReadRect+0x2e>
 800ad3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad3c:	444c      	add	r4, r9
 800ad3e:	940a      	str	r4, [sp, #40]	; 0x28
 800ad40:	3201      	adds	r2, #1
 800ad42:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ad44:	1e50      	subs	r0, r2, #1
 800ad46:	42a0      	cmp	r0, r4
 800ad48:	4446      	add	r6, r8
 800ad4a:	4465      	add	r5, ip
 800ad4c:	dbe7      	blt.n	800ad1e <_ReadRect+0x2a>
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ad54 <_GetDevFunc>:
 800ad54:	3901      	subs	r1, #1
 800ad56:	2924      	cmp	r1, #36	; 0x24
 800ad58:	d844      	bhi.n	800ade4 <_GetDevFunc+0x90>
 800ad5a:	e8df f001 	tbb	[pc, r1]
 800ad5e:	1b41      	.short	0x1b41
 800ad60:	1d431917 	.word	0x1d431917
 800ad64:	45134343 	.word	0x45134343
 800ad68:	21431f15 	.word	0x21431f15
 800ad6c:	43434323 	.word	0x43434323
 800ad70:	2f292725 	.word	0x2f292725
 800ad74:	43314343 	.word	0x43314343
 800ad78:	43434343 	.word	0x43434343
 800ad7c:	2d2b3543 	.word	0x2d2b3543
 800ad80:	433d      	.short	0x433d
 800ad82:	39          	.byte	0x39
 800ad83:	00          	.byte	0x00
 800ad84:	4819      	ldr	r0, [pc, #100]	; (800adec <_GetDevFunc+0x98>)
 800ad86:	4770      	bx	lr
 800ad88:	4819      	ldr	r0, [pc, #100]	; (800adf0 <_GetDevFunc+0x9c>)
 800ad8a:	4770      	bx	lr
 800ad8c:	4819      	ldr	r0, [pc, #100]	; (800adf4 <_GetDevFunc+0xa0>)
 800ad8e:	4770      	bx	lr
 800ad90:	4819      	ldr	r0, [pc, #100]	; (800adf8 <_GetDevFunc+0xa4>)
 800ad92:	4770      	bx	lr
 800ad94:	4819      	ldr	r0, [pc, #100]	; (800adfc <_GetDevFunc+0xa8>)
 800ad96:	4770      	bx	lr
 800ad98:	4819      	ldr	r0, [pc, #100]	; (800ae00 <_GetDevFunc+0xac>)
 800ad9a:	4770      	bx	lr
 800ad9c:	4819      	ldr	r0, [pc, #100]	; (800ae04 <_GetDevFunc+0xb0>)
 800ad9e:	4770      	bx	lr
 800ada0:	4819      	ldr	r0, [pc, #100]	; (800ae08 <_GetDevFunc+0xb4>)
 800ada2:	4770      	bx	lr
 800ada4:	4819      	ldr	r0, [pc, #100]	; (800ae0c <_GetDevFunc+0xb8>)
 800ada6:	4770      	bx	lr
 800ada8:	4819      	ldr	r0, [pc, #100]	; (800ae10 <_GetDevFunc+0xbc>)
 800adaa:	4770      	bx	lr
 800adac:	4819      	ldr	r0, [pc, #100]	; (800ae14 <_GetDevFunc+0xc0>)
 800adae:	4770      	bx	lr
 800adb0:	4819      	ldr	r0, [pc, #100]	; (800ae18 <_GetDevFunc+0xc4>)
 800adb2:	4770      	bx	lr
 800adb4:	4819      	ldr	r0, [pc, #100]	; (800ae1c <_GetDevFunc+0xc8>)
 800adb6:	4770      	bx	lr
 800adb8:	4819      	ldr	r0, [pc, #100]	; (800ae20 <_GetDevFunc+0xcc>)
 800adba:	4770      	bx	lr
 800adbc:	4819      	ldr	r0, [pc, #100]	; (800ae24 <_GetDevFunc+0xd0>)
 800adbe:	4770      	bx	lr
 800adc0:	6803      	ldr	r3, [r0, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adc6:	4770      	bx	lr
 800adc8:	6803      	ldr	r3, [r0, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800adce:	4770      	bx	lr
 800add0:	6803      	ldr	r3, [r0, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800add6:	4770      	bx	lr
 800add8:	6803      	ldr	r3, [r0, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800adde:	4770      	bx	lr
 800ade0:	4811      	ldr	r0, [pc, #68]	; (800ae28 <_GetDevFunc+0xd4>)
 800ade2:	4770      	bx	lr
 800ade4:	2000      	movs	r0, #0
 800ade6:	4770      	bx	lr
 800ade8:	4810      	ldr	r0, [pc, #64]	; (800ae2c <_GetDevFunc+0xd8>)
 800adea:	4770      	bx	lr
 800adec:	0800b4bf 	.word	0x0800b4bf
 800adf0:	0800b621 	.word	0x0800b621
 800adf4:	0800b53b 	.word	0x0800b53b
 800adf8:	0800b413 	.word	0x0800b413
 800adfc:	0800b497 	.word	0x0800b497
 800ae00:	0800b46f 	.word	0x0800b46f
 800ae04:	0800b455 	.word	0x0800b455
 800ae08:	0800ae7d 	.word	0x0800ae7d
 800ae0c:	0800ae73 	.word	0x0800ae73
 800ae10:	0800ae5d 	.word	0x0800ae5d
 800ae14:	0800ae47 	.word	0x0800ae47
 800ae18:	0800ae31 	.word	0x0800ae31
 800ae1c:	0800b4e9 	.word	0x0800b4e9
 800ae20:	0800b42f 	.word	0x0800b42f
 800ae24:	0800b3cd 	.word	0x0800b3cd
 800ae28:	0800acf5 	.word	0x0800acf5
 800ae2c:	0800b663 	.word	0x0800b663

0800ae30 <_SetChroma>:
 800ae30:	b507      	push	{r0, r1, r2, lr}
 800ae32:	6980      	ldr	r0, [r0, #24]
 800ae34:	e88d 0006 	stmia.w	sp, {r1, r2}
 800ae38:	210d      	movs	r1, #13
 800ae3a:	466a      	mov	r2, sp
 800ae3c:	f7fa f8b6 	bl	8004fac <LCD_X_DisplayDriver>
 800ae40:	b003      	add	sp, #12
 800ae42:	f85d fb04 	ldr.w	pc, [sp], #4

0800ae46 <_SetChromaMode>:
 800ae46:	b507      	push	{r0, r1, r2, lr}
 800ae48:	aa02      	add	r2, sp, #8
 800ae4a:	6980      	ldr	r0, [r0, #24]
 800ae4c:	f842 1d04 	str.w	r1, [r2, #-4]!
 800ae50:	210c      	movs	r1, #12
 800ae52:	f7fa f8ab 	bl	8004fac <LCD_X_DisplayDriver>
 800ae56:	b003      	add	sp, #12
 800ae58:	f85d fb04 	ldr.w	pc, [sp], #4

0800ae5c <_SetAlphaMode>:
 800ae5c:	b507      	push	{r0, r1, r2, lr}
 800ae5e:	aa02      	add	r2, sp, #8
 800ae60:	6980      	ldr	r0, [r0, #24]
 800ae62:	f842 1d04 	str.w	r1, [r2, #-4]!
 800ae66:	210b      	movs	r1, #11
 800ae68:	f7fa f8a0 	bl	8004fac <LCD_X_DisplayDriver>
 800ae6c:	b003      	add	sp, #12
 800ae6e:	f85d fb04 	ldr.w	pc, [sp], #4

0800ae72 <_Off>:
 800ae72:	6980      	ldr	r0, [r0, #24]
 800ae74:	2106      	movs	r1, #6
 800ae76:	2200      	movs	r2, #0
 800ae78:	f7fa b898 	b.w	8004fac <LCD_X_DisplayDriver>

0800ae7c <_On>:
 800ae7c:	6980      	ldr	r0, [r0, #24]
 800ae7e:	2105      	movs	r1, #5
 800ae80:	2200      	movs	r2, #0
 800ae82:	f7fa b893 	b.w	8004fac <LCD_X_DisplayDriver>

0800ae86 <_SetOrg>:
 800ae86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	6884      	ldr	r4, [r0, #8]
 800ae90:	6980      	ldr	r0, [r0, #24]
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	460d      	mov	r5, r1
 800ae96:	4616      	mov	r6, r2
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	f000 fcf1 	bl	800b880 <LCD_GetMirrorXEx>
 800ae9e:	4680      	mov	r8, r0
 800aea0:	69b8      	ldr	r0, [r7, #24]
 800aea2:	f000 fcf0 	bl	800b886 <LCD_GetMirrorYEx>
 800aea6:	4681      	mov	r9, r0
 800aea8:	69b8      	ldr	r0, [r7, #24]
 800aeaa:	f000 fcef 	bl	800b88c <LCD_GetSwapXYEx>
 800aeae:	0080      	lsls	r0, r0, #2
 800aeb0:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800aeb4:	ea40 0008 	orr.w	r0, r0, r8
 800aeb8:	2807      	cmp	r0, #7
 800aeba:	d826      	bhi.n	800af0a <_SetOrg+0x84>
 800aebc:	e8df f000 	tbb	[pc, r0]
 800aec0:	0b0f0408 	.word	0x0b0f0408
 800aec4:	1b1f1519 	.word	0x1b1f1519
 800aec8:	6962      	ldr	r2, [r4, #20]
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	1b5d      	subs	r5, r3, r5
 800aed0:	9500      	str	r5, [sp, #0]
 800aed2:	9601      	str	r6, [sp, #4]
 800aed4:	e019      	b.n	800af0a <_SetOrg+0x84>
 800aed6:	6962      	ldr	r2, [r4, #20]
 800aed8:	68e3      	ldr	r3, [r4, #12]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	1b5d      	subs	r5, r3, r5
 800aede:	69a2      	ldr	r2, [r4, #24]
 800aee0:	6923      	ldr	r3, [r4, #16]
 800aee2:	9500      	str	r5, [sp, #0]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	1b9e      	subs	r6, r3, r6
 800aee8:	e7f3      	b.n	800aed2 <_SetOrg+0x4c>
 800aeea:	69a2      	ldr	r2, [r4, #24]
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	1b9e      	subs	r6, r3, r6
 800aef2:	9600      	str	r6, [sp, #0]
 800aef4:	e008      	b.n	800af08 <_SetOrg+0x82>
 800aef6:	69a2      	ldr	r2, [r4, #24]
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	1b9e      	subs	r6, r3, r6
 800aefe:	6962      	ldr	r2, [r4, #20]
 800af00:	68e3      	ldr	r3, [r4, #12]
 800af02:	9600      	str	r6, [sp, #0]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	1b5d      	subs	r5, r3, r5
 800af08:	9501      	str	r5, [sp, #4]
 800af0a:	69b8      	ldr	r0, [r7, #24]
 800af0c:	2103      	movs	r1, #3
 800af0e:	466a      	mov	r2, sp
 800af10:	f7fa f84c 	bl	8004fac <LCD_X_DisplayDriver>
 800af14:	b003      	add	sp, #12
 800af16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800af1c <_DrawBitmap>:
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	b08d      	sub	sp, #52	; 0x34
 800af22:	4606      	mov	r6, r0
 800af24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800af26:	910a      	str	r1, [sp, #40]	; 0x28
 800af28:	2804      	cmp	r0, #4
 800af2a:	469b      	mov	fp, r3
 800af2c:	9209      	str	r2, [sp, #36]	; 0x24
 800af2e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800af30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800af32:	68b3      	ldr	r3, [r6, #8]
 800af34:	d011      	beq.n	800af5a <_DrawBitmap+0x3e>
 800af36:	dc09      	bgt.n	800af4c <_DrawBitmap+0x30>
 800af38:	2801      	cmp	r0, #1
 800af3a:	d013      	beq.n	800af64 <_DrawBitmap+0x48>
 800af3c:	2802      	cmp	r0, #2
 800af3e:	f040 822d 	bne.w	800b39c <_DrawBitmap+0x480>
 800af42:	4aab      	ldr	r2, [pc, #684]	; (800b1f0 <_DrawBitmap+0x2d4>)
 800af44:	6812      	ldr	r2, [r2, #0]
 800af46:	920b      	str	r2, [sp, #44]	; 0x2c
 800af48:	2100      	movs	r1, #0
 800af4a:	e0b8      	b.n	800b0be <_DrawBitmap+0x1a2>
 800af4c:	2808      	cmp	r0, #8
 800af4e:	f000 8172 	beq.w	800b236 <_DrawBitmap+0x31a>
 800af52:	2820      	cmp	r0, #32
 800af54:	f000 81fb 	beq.w	800b34e <_DrawBitmap+0x432>
 800af58:	e220      	b.n	800b39c <_DrawBitmap+0x480>
 800af5a:	4aa5      	ldr	r2, [pc, #660]	; (800b1f0 <_DrawBitmap+0x2d4>)
 800af5c:	6812      	ldr	r2, [r2, #0]
 800af5e:	920b      	str	r2, [sp, #44]	; 0x2c
 800af60:	2100      	movs	r1, #0
 800af62:	e10a      	b.n	800b17a <_DrawBitmap+0x25e>
 800af64:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800af66:	b90f      	cbnz	r7, 800af6c <_DrawBitmap+0x50>
 800af68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af6a:	e042      	b.n	800aff2 <_DrawBitmap+0xd6>
 800af6c:	4ba0      	ldr	r3, [pc, #640]	; (800b1f0 <_DrawBitmap+0x2d4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	7c1b      	ldrb	r3, [r3, #16]
 800af72:	07db      	lsls	r3, r3, #31
 800af74:	d4f8      	bmi.n	800af68 <_DrawBitmap+0x4c>
 800af76:	981a      	ldr	r0, [sp, #104]	; 0x68
 800af78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af7a:	9302      	str	r3, [sp, #8]
 800af7c:	e88d 0801 	stmia.w	sp, {r0, fp}
 800af80:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af82:	9003      	str	r0, [sp, #12]
 800af84:	9504      	str	r5, [sp, #16]
 800af86:	69b0      	ldr	r0, [r6, #24]
 800af88:	4623      	mov	r3, r4
 800af8a:	47b8      	blx	r7
 800af8c:	e206      	b.n	800b39c <_DrawBitmap+0x480>
 800af8e:	4b98      	ldr	r3, [pc, #608]	; (800b1f0 <_DrawBitmap+0x2d4>)
 800af90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af98:	7c1b      	ldrb	r3, [r3, #16]
 800af9a:	f8d5 c000 	ldr.w	ip, [r5]
 800af9e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800afa2:	68b0      	ldr	r0, [r6, #8]
 800afa4:	f003 0303 	and.w	r3, r3, #3
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	448a      	add	sl, r1
 800afac:	d02d      	beq.n	800b00a <_DrawBitmap+0xee>
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d04d      	beq.n	800b04e <_DrawBitmap+0x132>
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d04b      	beq.n	800b04e <_DrawBitmap+0x132>
 800afb6:	f1c1 0308 	rsb	r3, r1, #8
 800afba:	7822      	ldrb	r2, [r4, #0]
 800afbc:	498d      	ldr	r1, [pc, #564]	; (800b1f4 <_DrawBitmap+0x2d8>)
 800afbe:	5c8a      	ldrb	r2, [r1, r2]
 800afc0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800afc2:	410a      	asrs	r2, r1
 800afc4:	69c1      	ldr	r1, [r0, #28]
 800afc6:	6800      	ldr	r0, [r0, #0]
 800afc8:	fb01 a107 	mla	r1, r1, r7, sl
 800afcc:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 800afd0:	4659      	mov	r1, fp
 800afd2:	4620      	mov	r0, r4
 800afd4:	f012 0f01 	tst.w	r2, #1
 800afd8:	bf0c      	ite	eq
 800afda:	46e0      	moveq	r8, ip
 800afdc:	46c8      	movne	r8, r9
 800afde:	3b01      	subs	r3, #1
 800afe0:	d00d      	beq.n	800affe <_DrawBitmap+0xe2>
 800afe2:	0852      	lsrs	r2, r2, #1
 800afe4:	3901      	subs	r1, #1
 800afe6:	f84a 8b04 	str.w	r8, [sl], #4
 800afea:	d1f3      	bne.n	800afd4 <_DrawBitmap+0xb8>
 800afec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afee:	3701      	adds	r7, #1
 800aff0:	4414      	add	r4, r2
 800aff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aff4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aff6:	1a3b      	subs	r3, r7, r0
 800aff8:	428b      	cmp	r3, r1
 800affa:	dbc8      	blt.n	800af8e <_DrawBitmap+0x72>
 800affc:	e1ce      	b.n	800b39c <_DrawBitmap+0x480>
 800affe:	7843      	ldrb	r3, [r0, #1]
 800b000:	4a7c      	ldr	r2, [pc, #496]	; (800b1f4 <_DrawBitmap+0x2d8>)
 800b002:	3001      	adds	r0, #1
 800b004:	5cd2      	ldrb	r2, [r2, r3]
 800b006:	2308      	movs	r3, #8
 800b008:	e7ec      	b.n	800afe4 <_DrawBitmap+0xc8>
 800b00a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b00c:	4979      	ldr	r1, [pc, #484]	; (800b1f4 <_DrawBitmap+0x2d8>)
 800b00e:	f1c2 0308 	rsb	r3, r2, #8
 800b012:	7822      	ldrb	r2, [r4, #0]
 800b014:	5c89      	ldrb	r1, [r1, r2]
 800b016:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b018:	4111      	asrs	r1, r2
 800b01a:	69c2      	ldr	r2, [r0, #28]
 800b01c:	6800      	ldr	r0, [r0, #0]
 800b01e:	fb02 a207 	mla	r2, r2, r7, sl
 800b022:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 800b026:	4622      	mov	r2, r4
 800b028:	2000      	movs	r0, #0
 800b02a:	f011 0f01 	tst.w	r1, #1
 800b02e:	bf18      	it	ne
 800b030:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 800b034:	3b01      	subs	r3, #1
 800b036:	d001      	beq.n	800b03c <_DrawBitmap+0x120>
 800b038:	0849      	lsrs	r1, r1, #1
 800b03a:	e004      	b.n	800b046 <_DrawBitmap+0x12a>
 800b03c:	7853      	ldrb	r3, [r2, #1]
 800b03e:	496d      	ldr	r1, [pc, #436]	; (800b1f4 <_DrawBitmap+0x2d8>)
 800b040:	3201      	adds	r2, #1
 800b042:	5cc9      	ldrb	r1, [r1, r3]
 800b044:	2308      	movs	r3, #8
 800b046:	3001      	adds	r0, #1
 800b048:	4558      	cmp	r0, fp
 800b04a:	d1ee      	bne.n	800b02a <_DrawBitmap+0x10e>
 800b04c:	e7ce      	b.n	800afec <_DrawBitmap+0xd0>
 800b04e:	6933      	ldr	r3, [r6, #16]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	4798      	blx	r3
 800b054:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b058:	900b      	str	r0, [sp, #44]	; 0x2c
 800b05a:	46d9      	mov	r9, fp
 800b05c:	46a4      	mov	ip, r4
 800b05e:	f89c 1000 	ldrb.w	r1, [ip]
 800b062:	2280      	movs	r2, #128	; 0x80
 800b064:	fa42 f208 	asr.w	r2, r2, r8
 800b068:	eb0a 030b 	add.w	r3, sl, fp
 800b06c:	4211      	tst	r1, r2
 800b06e:	ebc9 0303 	rsb	r3, r9, r3
 800b072:	d013      	beq.n	800b09c <_DrawBitmap+0x180>
 800b074:	4619      	mov	r1, r3
 800b076:	463a      	mov	r2, r7
 800b078:	4630      	mov	r0, r6
 800b07a:	f8cd c01c 	str.w	ip, [sp, #28]
 800b07e:	9308      	str	r3, [sp, #32]
 800b080:	f7ff fd54 	bl	800ab2c <_GetPixelIndex>
 800b084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	ea80 0e01 	eor.w	lr, r0, r1
 800b08c:	463a      	mov	r2, r7
 800b08e:	4619      	mov	r1, r3
 800b090:	4630      	mov	r0, r6
 800b092:	4673      	mov	r3, lr
 800b094:	f7ff fd41 	bl	800ab1a <_SetPixelIndex>
 800b098:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b09c:	f108 0801 	add.w	r8, r8, #1
 800b0a0:	f1b8 0f08 	cmp.w	r8, #8
 800b0a4:	bf04      	itt	eq
 800b0a6:	f10c 0c01 	addeq.w	ip, ip, #1
 800b0aa:	f04f 0800 	moveq.w	r8, #0
 800b0ae:	f1b9 0901 	subs.w	r9, r9, #1
 800b0b2:	d1d4      	bne.n	800b05e <_DrawBitmap+0x142>
 800b0b4:	e79a      	b.n	800afec <_DrawBitmap+0xd0>
 800b0b6:	b935      	cbnz	r5, 800b0c6 <_DrawBitmap+0x1aa>
 800b0b8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b0ba:	3101      	adds	r1, #1
 800b0bc:	443c      	add	r4, r7
 800b0be:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b0c0:	42b9      	cmp	r1, r7
 800b0c2:	dbf8      	blt.n	800b0b6 <_DrawBitmap+0x19a>
 800b0c4:	e16a      	b.n	800b39c <_DrawBitmap+0x480>
 800b0c6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800b0ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0cc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b0ce:	69da      	ldr	r2, [r3, #28]
 800b0d0:	7826      	ldrb	r6, [r4, #0]
 800b0d2:	4438      	add	r0, r7
 800b0d4:	4488      	add	r8, r1
 800b0d6:	fb02 0808 	mla	r8, r2, r8, r0
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b0de:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800b0e2:	7c02      	ldrb	r2, [r0, #16]
 800b0e4:	f012 0203 	ands.w	r2, r2, #3
 800b0e8:	46c4      	mov	ip, r8
 800b0ea:	d005      	beq.n	800b0f8 <_DrawBitmap+0x1dc>
 800b0ec:	2a02      	cmp	r2, #2
 800b0ee:	d1e3      	bne.n	800b0b8 <_DrawBitmap+0x19c>
 800b0f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b0f2:	9406      	str	r4, [sp, #24]
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	e020      	b.n	800b13a <_DrawBitmap+0x21e>
 800b0f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b0fa:	4658      	mov	r0, fp
 800b0fc:	4627      	mov	r7, r4
 800b0fe:	f1c2 0803 	rsb	r8, r2, #3
 800b102:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b106:	f1c8 0906 	rsb	r9, r8, #6
 800b10a:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800b10e:	fa4a f909 	asr.w	r9, sl, r9
 800b112:	ea09 0906 	and.w	r9, r9, r6
 800b116:	fa29 f808 	lsr.w	r8, r9, r8
 800b11a:	3201      	adds	r2, #1
 800b11c:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800b120:	f84c 8b04 	str.w	r8, [ip], #4
 800b124:	2a04      	cmp	r2, #4
 800b126:	d102      	bne.n	800b12e <_DrawBitmap+0x212>
 800b128:	787e      	ldrb	r6, [r7, #1]
 800b12a:	2200      	movs	r2, #0
 800b12c:	3701      	adds	r7, #1
 800b12e:	3801      	subs	r0, #1
 800b130:	d1e5      	bne.n	800b0fe <_DrawBitmap+0x1e2>
 800b132:	e7c1      	b.n	800b0b8 <_DrawBitmap+0x19c>
 800b134:	3001      	adds	r0, #1
 800b136:	4558      	cmp	r0, fp
 800b138:	d0be      	beq.n	800b0b8 <_DrawBitmap+0x19c>
 800b13a:	f1c2 0c03 	rsb	ip, r2, #3
 800b13e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b142:	f1cc 0906 	rsb	r9, ip, #6
 800b146:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800b14a:	fa4a f909 	asr.w	r9, sl, r9
 800b14e:	ea09 0906 	and.w	r9, r9, r6
 800b152:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800b156:	bf1c      	itt	ne
 800b158:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800b15c:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800b160:	3201      	adds	r2, #1
 800b162:	2a04      	cmp	r2, #4
 800b164:	d1e6      	bne.n	800b134 <_DrawBitmap+0x218>
 800b166:	9a06      	ldr	r2, [sp, #24]
 800b168:	7856      	ldrb	r6, [r2, #1]
 800b16a:	3201      	adds	r2, #1
 800b16c:	9206      	str	r2, [sp, #24]
 800b16e:	2200      	movs	r2, #0
 800b170:	e7e0      	b.n	800b134 <_DrawBitmap+0x218>
 800b172:	b935      	cbnz	r5, 800b182 <_DrawBitmap+0x266>
 800b174:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b176:	3101      	adds	r1, #1
 800b178:	443c      	add	r4, r7
 800b17a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b17c:	42b9      	cmp	r1, r7
 800b17e:	dbf8      	blt.n	800b172 <_DrawBitmap+0x256>
 800b180:	e10c      	b.n	800b39c <_DrawBitmap+0x480>
 800b182:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800b186:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b188:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b18a:	69da      	ldr	r2, [r3, #28]
 800b18c:	7826      	ldrb	r6, [r4, #0]
 800b18e:	4438      	add	r0, r7
 800b190:	4488      	add	r8, r1
 800b192:	fb02 0808 	mla	r8, r2, r8, r0
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b19a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800b19e:	7c02      	ldrb	r2, [r0, #16]
 800b1a0:	f012 0203 	ands.w	r2, r2, #3
 800b1a4:	46c4      	mov	ip, r8
 800b1a6:	d005      	beq.n	800b1b4 <_DrawBitmap+0x298>
 800b1a8:	2a02      	cmp	r2, #2
 800b1aa:	d1e3      	bne.n	800b174 <_DrawBitmap+0x258>
 800b1ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1ae:	9406      	str	r4, [sp, #24]
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	e024      	b.n	800b1fe <_DrawBitmap+0x2e2>
 800b1b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1b6:	4658      	mov	r0, fp
 800b1b8:	4627      	mov	r7, r4
 800b1ba:	f1c2 0801 	rsb	r8, r2, #1
 800b1be:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800b1c2:	f1c8 0904 	rsb	r9, r8, #4
 800b1c6:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800b1ca:	fa4a f909 	asr.w	r9, sl, r9
 800b1ce:	ea09 0906 	and.w	r9, r9, r6
 800b1d2:	fa29 f808 	lsr.w	r8, r9, r8
 800b1d6:	3201      	adds	r2, #1
 800b1d8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800b1dc:	f84c 8b04 	str.w	r8, [ip], #4
 800b1e0:	2a02      	cmp	r2, #2
 800b1e2:	d102      	bne.n	800b1ea <_DrawBitmap+0x2ce>
 800b1e4:	787e      	ldrb	r6, [r7, #1]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	3701      	adds	r7, #1
 800b1ea:	3801      	subs	r0, #1
 800b1ec:	d1e5      	bne.n	800b1ba <_DrawBitmap+0x29e>
 800b1ee:	e7c1      	b.n	800b174 <_DrawBitmap+0x258>
 800b1f0:	2000002c 	.word	0x2000002c
 800b1f4:	08012cec 	.word	0x08012cec
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	4558      	cmp	r0, fp
 800b1fc:	d0ba      	beq.n	800b174 <_DrawBitmap+0x258>
 800b1fe:	f1c2 0c01 	rsb	ip, r2, #1
 800b202:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800b206:	f1cc 0904 	rsb	r9, ip, #4
 800b20a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800b20e:	fa4a f909 	asr.w	r9, sl, r9
 800b212:	ea09 0906 	and.w	r9, r9, r6
 800b216:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800b21a:	bf1c      	itt	ne
 800b21c:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800b220:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800b224:	3201      	adds	r2, #1
 800b226:	2a02      	cmp	r2, #2
 800b228:	d1e6      	bne.n	800b1f8 <_DrawBitmap+0x2dc>
 800b22a:	9a06      	ldr	r2, [sp, #24]
 800b22c:	7856      	ldrb	r6, [r2, #1]
 800b22e:	3201      	adds	r2, #1
 800b230:	9206      	str	r2, [sp, #24]
 800b232:	2200      	movs	r2, #0
 800b234:	e7e0      	b.n	800b1f8 <_DrawBitmap+0x2dc>
 800b236:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800b238:	f8df c168 	ldr.w	ip, [pc, #360]	; 800b3a4 <_DrawBitmap+0x488>
 800b23c:	b127      	cbz	r7, 800b248 <_DrawBitmap+0x32c>
 800b23e:	f8dc 0000 	ldr.w	r0, [ip]
 800b242:	7c00      	ldrb	r0, [r0, #16]
 800b244:	0780      	lsls	r0, r0, #30
 800b246:	d504      	bpl.n	800b252 <_DrawBitmap+0x336>
 800b248:	f8dc c000 	ldr.w	ip, [ip]
 800b24c:	f04f 0900 	mov.w	r9, #0
 800b250:	e011      	b.n	800b276 <_DrawBitmap+0x35a>
 800b252:	2d00      	cmp	r5, #0
 800b254:	d0f8      	beq.n	800b248 <_DrawBitmap+0x32c>
 800b256:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b258:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b25a:	9302      	str	r3, [sp, #8]
 800b25c:	f8cd b000 	str.w	fp, [sp]
 800b260:	9001      	str	r0, [sp, #4]
 800b262:	9503      	str	r5, [sp, #12]
 800b264:	69b0      	ldr	r0, [r6, #24]
 800b266:	4623      	mov	r3, r4
 800b268:	47b8      	blx	r7
 800b26a:	e097      	b.n	800b39c <_DrawBitmap+0x480>
 800b26c:	b93d      	cbnz	r5, 800b27e <_DrawBitmap+0x362>
 800b26e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b270:	f109 0901 	add.w	r9, r9, #1
 800b274:	443c      	add	r4, r7
 800b276:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b278:	45b9      	cmp	r9, r7
 800b27a:	dbf7      	blt.n	800b26c <_DrawBitmap+0x350>
 800b27c:	e08e      	b.n	800b39c <_DrawBitmap+0x480>
 800b27e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b280:	69da      	ldr	r2, [r3, #28]
 800b282:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b284:	4448      	add	r0, r9
 800b286:	fb02 7000 	mla	r0, r2, r0, r7
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b290:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800b294:	f012 0203 	ands.w	r2, r2, #3
 800b298:	4601      	mov	r1, r0
 800b29a:	d003      	beq.n	800b2a4 <_DrawBitmap+0x388>
 800b29c:	2a02      	cmp	r2, #2
 800b29e:	d1e6      	bne.n	800b26e <_DrawBitmap+0x352>
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	e04f      	b.n	800b344 <_DrawBitmap+0x428>
 800b2a4:	4658      	mov	r0, fp
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	2807      	cmp	r0, #7
 800b2aa:	dd23      	ble.n	800b2f4 <_DrawBitmap+0x3d8>
 800b2ac:	7816      	ldrb	r6, [r2, #0]
 800b2ae:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2b2:	600e      	str	r6, [r1, #0]
 800b2b4:	7856      	ldrb	r6, [r2, #1]
 800b2b6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2ba:	604e      	str	r6, [r1, #4]
 800b2bc:	7896      	ldrb	r6, [r2, #2]
 800b2be:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2c2:	608e      	str	r6, [r1, #8]
 800b2c4:	78d6      	ldrb	r6, [r2, #3]
 800b2c6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2ca:	60ce      	str	r6, [r1, #12]
 800b2cc:	7916      	ldrb	r6, [r2, #4]
 800b2ce:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2d2:	610e      	str	r6, [r1, #16]
 800b2d4:	7956      	ldrb	r6, [r2, #5]
 800b2d6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2da:	614e      	str	r6, [r1, #20]
 800b2dc:	7996      	ldrb	r6, [r2, #6]
 800b2de:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2e2:	618e      	str	r6, [r1, #24]
 800b2e4:	79d6      	ldrb	r6, [r2, #7]
 800b2e6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2ea:	61ce      	str	r6, [r1, #28]
 800b2ec:	3808      	subs	r0, #8
 800b2ee:	3208      	adds	r2, #8
 800b2f0:	3120      	adds	r1, #32
 800b2f2:	e7d9      	b.n	800b2a8 <_DrawBitmap+0x38c>
 800b2f4:	2803      	cmp	r0, #3
 800b2f6:	dd13      	ble.n	800b320 <_DrawBitmap+0x404>
 800b2f8:	7816      	ldrb	r6, [r2, #0]
 800b2fa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b2fe:	600e      	str	r6, [r1, #0]
 800b300:	7856      	ldrb	r6, [r2, #1]
 800b302:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b306:	604e      	str	r6, [r1, #4]
 800b308:	7896      	ldrb	r6, [r2, #2]
 800b30a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b30e:	608e      	str	r6, [r1, #8]
 800b310:	78d6      	ldrb	r6, [r2, #3]
 800b312:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b316:	60ce      	str	r6, [r1, #12]
 800b318:	3804      	subs	r0, #4
 800b31a:	3204      	adds	r2, #4
 800b31c:	3110      	adds	r1, #16
 800b31e:	e7e9      	b.n	800b2f4 <_DrawBitmap+0x3d8>
 800b320:	2600      	movs	r6, #0
 800b322:	4286      	cmp	r6, r0
 800b324:	d0a3      	beq.n	800b26e <_DrawBitmap+0x352>
 800b326:	f812 8006 	ldrb.w	r8, [r2, r6]
 800b32a:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 800b32e:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 800b332:	3601      	adds	r6, #1
 800b334:	e7f5      	b.n	800b322 <_DrawBitmap+0x406>
 800b336:	5c62      	ldrb	r2, [r4, r1]
 800b338:	b11a      	cbz	r2, 800b342 <_DrawBitmap+0x426>
 800b33a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b33e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800b342:	3101      	adds	r1, #1
 800b344:	ebc1 020b 	rsb	r2, r1, fp
 800b348:	2a00      	cmp	r2, #0
 800b34a:	dcf4      	bgt.n	800b336 <_DrawBitmap+0x41a>
 800b34c:	e78f      	b.n	800b26e <_DrawBitmap+0x352>
 800b34e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800b350:	b90d      	cbnz	r5, 800b356 <_DrawBitmap+0x43a>
 800b352:	462b      	mov	r3, r5
 800b354:	e012      	b.n	800b37c <_DrawBitmap+0x460>
 800b356:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b358:	9701      	str	r7, [sp, #4]
 800b35a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b35c:	f8cd b000 	str.w	fp, [sp]
 800b360:	9702      	str	r7, [sp, #8]
 800b362:	69b0      	ldr	r0, [r6, #24]
 800b364:	4623      	mov	r3, r4
 800b366:	47a8      	blx	r5
 800b368:	e018      	b.n	800b39c <_DrawBitmap+0x480>
 800b36a:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800b36e:	1b0d      	subs	r5, r1, r4
 800b370:	3a01      	subs	r2, #1
 800b372:	502f      	str	r7, [r5, r0]
 800b374:	d1f9      	bne.n	800b36a <_DrawBitmap+0x44e>
 800b376:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b378:	3301      	adds	r3, #1
 800b37a:	443c      	add	r4, r7
 800b37c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b37e:	42ab      	cmp	r3, r5
 800b380:	da0c      	bge.n	800b39c <_DrawBitmap+0x480>
 800b382:	68b2      	ldr	r2, [r6, #8]
 800b384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b386:	69d1      	ldr	r1, [r2, #28]
 800b388:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	4418      	add	r0, r3
 800b38e:	fb01 5100 	mla	r1, r1, r0, r5
 800b392:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b396:	1f21      	subs	r1, r4, #4
 800b398:	465a      	mov	r2, fp
 800b39a:	e7e6      	b.n	800b36a <_DrawBitmap+0x44e>
 800b39c:	b00d      	add	sp, #52	; 0x34
 800b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a2:	bf00      	nop
 800b3a4:	2000002c 	.word	0x2000002c

0800b3a8 <_InitOnce.isra.4>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	6805      	ldr	r5, [r0, #0]
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	b93d      	cbnz	r5, 800b3c0 <_InitOnce.isra.4+0x18>
 800b3b0:	2048      	movs	r0, #72	; 0x48
 800b3b2:	f003 fdf5 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	6020      	str	r0, [r4, #0]
 800b3ba:	2248      	movs	r2, #72	; 0x48
 800b3bc:	f000 fe40 	bl	800c040 <GUI__memset>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	f1d0 0001 	rsbs	r0, r0, #1
 800b3c6:	bf38      	it	cc
 800b3c8:	2000      	movcc	r0, #0
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}

0800b3cc <_SetDevFunc>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	3008      	adds	r0, #8
 800b3d2:	460e      	mov	r6, r1
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	f7ff ffe7 	bl	800b3a8 <_InitOnce.isra.4>
 800b3da:	68ab      	ldr	r3, [r5, #8]
 800b3dc:	b1c3      	cbz	r3, 800b410 <_SetDevFunc+0x44>
 800b3de:	f1a6 0119 	sub.w	r1, r6, #25
 800b3e2:	290f      	cmp	r1, #15
 800b3e4:	d814      	bhi.n	800b410 <_SetDevFunc+0x44>
 800b3e6:	e8df f001 	tbb	[pc, r1]
 800b3ea:	1308      	.short	0x1308
 800b3ec:	13131313 	.word	0x13131313
 800b3f0:	130a0c13 	.word	0x130a0c13
 800b3f4:	130e1310 	.word	0x130e1310
 800b3f8:	1213      	.short	0x1213
 800b3fa:	631c      	str	r4, [r3, #48]	; 0x30
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	635c      	str	r4, [r3, #52]	; 0x34
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	639c      	str	r4, [r3, #56]	; 0x38
 800b404:	bd70      	pop	{r4, r5, r6, pc}
 800b406:	63dc      	str	r4, [r3, #60]	; 0x3c
 800b408:	bd70      	pop	{r4, r5, r6, pc}
 800b40a:	641c      	str	r4, [r3, #64]	; 0x40
 800b40c:	bd70      	pop	{r4, r5, r6, pc}
 800b40e:	645c      	str	r4, [r3, #68]	; 0x44
 800b410:	bd70      	pop	{r4, r5, r6, pc}

0800b412 <_GetPos>:
 800b412:	b570      	push	{r4, r5, r6, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	3008      	adds	r0, #8
 800b418:	460d      	mov	r5, r1
 800b41a:	4616      	mov	r6, r2
 800b41c:	f7ff ffc4 	bl	800b3a8 <_InitOnce.isra.4>
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	b11b      	cbz	r3, 800b42c <_GetPos+0x1a>
 800b424:	6a18      	ldr	r0, [r3, #32]
 800b426:	6028      	str	r0, [r5, #0]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	6033      	str	r3, [r6, #0]
 800b42c:	bd70      	pop	{r4, r5, r6, pc}

0800b42e <_ShowBuffer>:
 800b42e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b430:	4604      	mov	r4, r0
 800b432:	2300      	movs	r3, #0
 800b434:	3008      	adds	r0, #8
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	460d      	mov	r5, r1
 800b43a:	f7ff ffb5 	bl	800b3a8 <_InitOnce.isra.4>
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	b133      	cbz	r3, 800b450 <_ShowBuffer+0x22>
 800b442:	aa02      	add	r2, sp, #8
 800b444:	69a0      	ldr	r0, [r4, #24]
 800b446:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b44a:	210e      	movs	r1, #14
 800b44c:	f7f9 fdae 	bl	8004fac <LCD_X_DisplayDriver>
 800b450:	b003      	add	sp, #12
 800b452:	bd30      	pop	{r4, r5, pc}

0800b454 <_Init>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4604      	mov	r4, r0
 800b458:	3008      	adds	r0, #8
 800b45a:	f7ff ffa5 	bl	800b3a8 <_InitOnce.isra.4>
 800b45e:	2101      	movs	r1, #1
 800b460:	4605      	mov	r5, r0
 800b462:	2200      	movs	r2, #0
 800b464:	69a0      	ldr	r0, [r4, #24]
 800b466:	f7f9 fda1 	bl	8004fac <LCD_X_DisplayDriver>
 800b46a:	4328      	orrs	r0, r5
 800b46c:	bd38      	pop	{r3, r4, r5, pc}

0800b46e <_SetVis>:
 800b46e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b470:	4604      	mov	r4, r0
 800b472:	2300      	movs	r3, #0
 800b474:	3008      	adds	r0, #8
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	460d      	mov	r5, r1
 800b47a:	f7ff ff95 	bl	800b3a8 <_InitOnce.isra.4>
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	b13b      	cbz	r3, 800b492 <_SetVis+0x24>
 800b482:	aa02      	add	r2, sp, #8
 800b484:	62dd      	str	r5, [r3, #44]	; 0x2c
 800b486:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b48a:	69a0      	ldr	r0, [r4, #24]
 800b48c:	2109      	movs	r1, #9
 800b48e:	f7f9 fd8d 	bl	8004fac <LCD_X_DisplayDriver>
 800b492:	b003      	add	sp, #12
 800b494:	bd30      	pop	{r4, r5, pc}

0800b496 <_SetAlpha>:
 800b496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b498:	4604      	mov	r4, r0
 800b49a:	2300      	movs	r3, #0
 800b49c:	3008      	adds	r0, #8
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	f7ff ff81 	bl	800b3a8 <_InitOnce.isra.4>
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	b13b      	cbz	r3, 800b4ba <_SetAlpha+0x24>
 800b4aa:	aa02      	add	r2, sp, #8
 800b4ac:	629d      	str	r5, [r3, #40]	; 0x28
 800b4ae:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b4b2:	69a0      	ldr	r0, [r4, #24]
 800b4b4:	210a      	movs	r1, #10
 800b4b6:	f7f9 fd79 	bl	8004fac <LCD_X_DisplayDriver>
 800b4ba:	b003      	add	sp, #12
 800b4bc:	bd30      	pop	{r4, r5, pc}

0800b4be <_SetVRAMAddr>:
 800b4be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	3008      	adds	r0, #8
 800b4c6:	9301      	str	r3, [sp, #4]
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	f7ff ff6d 	bl	800b3a8 <_InitOnce.isra.4>
 800b4ce:	68a3      	ldr	r3, [r4, #8]
 800b4d0:	b143      	cbz	r3, 800b4e4 <_SetVRAMAddr+0x26>
 800b4d2:	aa02      	add	r2, sp, #8
 800b4d4:	601d      	str	r5, [r3, #0]
 800b4d6:	605d      	str	r5, [r3, #4]
 800b4d8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b4dc:	69a0      	ldr	r0, [r4, #24]
 800b4de:	2102      	movs	r1, #2
 800b4e0:	f7f9 fd64 	bl	8004fac <LCD_X_DisplayDriver>
 800b4e4:	b003      	add	sp, #12
 800b4e6:	bd30      	pop	{r4, r5, pc}

0800b4e8 <_CopyBuffer>:
 800b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	3008      	adds	r0, #8
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	4617      	mov	r7, r2
 800b4f4:	f7ff ff58 	bl	800b3a8 <_InitOnce.isra.4>
 800b4f8:	68ac      	ldr	r4, [r5, #8]
 800b4fa:	b1e4      	cbz	r4, 800b536 <_CopyBuffer+0x4e>
 800b4fc:	42be      	cmp	r6, r7
 800b4fe:	d01a      	beq.n	800b536 <_CopyBuffer+0x4e>
 800b500:	68eb      	ldr	r3, [r5, #12]
 800b502:	2108      	movs	r1, #8
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	4628      	mov	r0, r5
 800b508:	4798      	blx	r3
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	68e2      	ldr	r2, [r4, #12]
 800b50e:	6861      	ldr	r1, [r4, #4]
 800b510:	435a      	muls	r2, r3
 800b512:	4350      	muls	r0, r2
 800b514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b516:	08c2      	lsrs	r2, r0, #3
 800b518:	fb07 1802 	mla	r8, r7, r2, r1
 800b51c:	b123      	cbz	r3, 800b528 <_CopyBuffer+0x40>
 800b51e:	69a8      	ldr	r0, [r5, #24]
 800b520:	4631      	mov	r1, r6
 800b522:	463a      	mov	r2, r7
 800b524:	4798      	blx	r3
 800b526:	e004      	b.n	800b532 <_CopyBuffer+0x4a>
 800b528:	4640      	mov	r0, r8
 800b52a:	fb06 1102 	mla	r1, r6, r2, r1
 800b52e:	f006 f980 	bl	8011832 <memcpy>
 800b532:	f8c4 8000 	str.w	r8, [r4]
 800b536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b53a <_SetPos>:
 800b53a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53e:	b087      	sub	sp, #28
 800b540:	4604      	mov	r4, r0
 800b542:	460e      	mov	r6, r1
 800b544:	4615      	mov	r5, r2
 800b546:	2100      	movs	r1, #0
 800b548:	2218      	movs	r2, #24
 800b54a:	4668      	mov	r0, sp
 800b54c:	f006 f996 	bl	801187c <memset>
 800b550:	f104 0008 	add.w	r0, r4, #8
 800b554:	f7ff ff28 	bl	800b3a8 <_InitOnce.isra.4>
 800b558:	68a7      	ldr	r7, [r4, #8]
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	d05d      	beq.n	800b61a <_SetPos+0xe0>
 800b55e:	623e      	str	r6, [r7, #32]
 800b560:	627d      	str	r5, [r7, #36]	; 0x24
 800b562:	f000 f9e5 	bl	800b930 <LCD_GetXSizeDisplay>
 800b566:	4681      	mov	r9, r0
 800b568:	f000 f9e8 	bl	800b93c <LCD_GetYSizeDisplay>
 800b56c:	68e3      	ldr	r3, [r4, #12]
 800b56e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b574:	f8d7 b010 	ldr.w	fp, [r7, #16]
 800b578:	4680      	mov	r8, r0
 800b57a:	2108      	movs	r1, #8
 800b57c:	4620      	mov	r0, r4
 800b57e:	4798      	blx	r3
 800b580:	2308      	movs	r3, #8
 800b582:	3007      	adds	r0, #7
 800b584:	fb90 f0f3 	sdiv	r0, r0, r3
 800b588:	2e00      	cmp	r6, #0
 800b58a:	9004      	str	r0, [sp, #16]
 800b58c:	eb0a 0306 	add.w	r3, sl, r6
 800b590:	da07      	bge.n	800b5a2 <_SetPos+0x68>
 800b592:	9a05      	ldr	r2, [sp, #20]
 800b594:	9302      	str	r3, [sp, #8]
 800b596:	fb00 2616 	mls	r6, r0, r6, r2
 800b59a:	2200      	movs	r2, #0
 800b59c:	9605      	str	r6, [sp, #20]
 800b59e:	9200      	str	r2, [sp, #0]
 800b5a0:	e007      	b.n	800b5b2 <_SetPos+0x78>
 800b5a2:	454b      	cmp	r3, r9
 800b5a4:	9600      	str	r6, [sp, #0]
 800b5a6:	bfca      	itet	gt
 800b5a8:	ebc6 0609 	rsbgt	r6, r6, r9
 800b5ac:	f8cd a008 	strle.w	sl, [sp, #8]
 800b5b0:	9602      	strgt	r6, [sp, #8]
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	eb0b 0305 	add.w	r3, fp, r5
 800b5b8:	da09      	bge.n	800b5ce <_SetPos+0x94>
 800b5ba:	9a04      	ldr	r2, [sp, #16]
 800b5bc:	9303      	str	r3, [sp, #12]
 800b5be:	4355      	muls	r5, r2
 800b5c0:	9a05      	ldr	r2, [sp, #20]
 800b5c2:	fb0a 2215 	mls	r2, sl, r5, r2
 800b5c6:	9205      	str	r2, [sp, #20]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	9201      	str	r2, [sp, #4]
 800b5cc:	e007      	b.n	800b5de <_SetPos+0xa4>
 800b5ce:	4543      	cmp	r3, r8
 800b5d0:	9501      	str	r5, [sp, #4]
 800b5d2:	bfca      	itet	gt
 800b5d4:	ebc5 0508 	rsbgt	r5, r5, r8
 800b5d8:	f8cd b00c 	strle.w	fp, [sp, #12]
 800b5dc:	9503      	strgt	r5, [sp, #12]
 800b5de:	9b02      	ldr	r3, [sp, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	dd08      	ble.n	800b5f8 <_SetPos+0xbe>
 800b5e6:	9a03      	ldr	r2, [sp, #12]
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	dd05      	ble.n	800b5f8 <_SetPos+0xbe>
 800b5ec:	9a00      	ldr	r2, [sp, #0]
 800b5ee:	454a      	cmp	r2, r9
 800b5f0:	da02      	bge.n	800b5f8 <_SetPos+0xbe>
 800b5f2:	9a01      	ldr	r2, [sp, #4]
 800b5f4:	4542      	cmp	r2, r8
 800b5f6:	db06      	blt.n	800b606 <_SetPos+0xcc>
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d10e      	bne.n	800b61a <_SetPos+0xe0>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	2100      	movs	r1, #0
 800b600:	f7ff ff35 	bl	800b46e <_SetVis>
 800b604:	e009      	b.n	800b61a <_SetPos+0xe0>
 800b606:	b91b      	cbnz	r3, 800b610 <_SetPos+0xd6>
 800b608:	4620      	mov	r0, r4
 800b60a:	2101      	movs	r1, #1
 800b60c:	f7ff ff2f 	bl	800b46e <_SetVis>
 800b610:	69a0      	ldr	r0, [r4, #24]
 800b612:	2108      	movs	r1, #8
 800b614:	466a      	mov	r2, sp
 800b616:	f7f9 fcc9 	bl	8004fac <LCD_X_DisplayDriver>
 800b61a:	b007      	add	sp, #28
 800b61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b620 <_SetSize>:
 800b620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b622:	4605      	mov	r5, r0
 800b624:	2300      	movs	r3, #0
 800b626:	3008      	adds	r0, #8
 800b628:	460e      	mov	r6, r1
 800b62a:	4617      	mov	r7, r2
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	f7ff feba 	bl	800b3a8 <_InitOnce.isra.4>
 800b634:	68ac      	ldr	r4, [r5, #8]
 800b636:	b194      	cbz	r4, 800b65e <_SetSize+0x3e>
 800b638:	69e3      	ldr	r3, [r4, #28]
 800b63a:	b93b      	cbnz	r3, 800b64c <_SetSize+0x2c>
 800b63c:	69a8      	ldr	r0, [r5, #24]
 800b63e:	f000 f925 	bl	800b88c <LCD_GetSwapXYEx>
 800b642:	2800      	cmp	r0, #0
 800b644:	bf0c      	ite	eq
 800b646:	4630      	moveq	r0, r6
 800b648:	4638      	movne	r0, r7
 800b64a:	61e0      	str	r0, [r4, #28]
 800b64c:	60e6      	str	r6, [r4, #12]
 800b64e:	6127      	str	r7, [r4, #16]
 800b650:	69a8      	ldr	r0, [r5, #24]
 800b652:	2107      	movs	r1, #7
 800b654:	466a      	mov	r2, sp
 800b656:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800b65a:	f7f9 fca7 	bl	8004fac <LCD_X_DisplayDriver>
 800b65e:	b003      	add	sp, #12
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b662 <_SetVSize>:
 800b662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b664:	4606      	mov	r6, r0
 800b666:	3008      	adds	r0, #8
 800b668:	460d      	mov	r5, r1
 800b66a:	4617      	mov	r7, r2
 800b66c:	f7ff fe9c 	bl	800b3a8 <_InitOnce.isra.4>
 800b670:	68b4      	ldr	r4, [r6, #8]
 800b672:	b144      	cbz	r4, 800b686 <_SetVSize+0x24>
 800b674:	69b0      	ldr	r0, [r6, #24]
 800b676:	f000 f909 	bl	800b88c <LCD_GetSwapXYEx>
 800b67a:	6165      	str	r5, [r4, #20]
 800b67c:	61a7      	str	r7, [r4, #24]
 800b67e:	b108      	cbz	r0, 800b684 <_SetVSize+0x22>
 800b680:	61e7      	str	r7, [r4, #28]
 800b682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b684:	61e5      	str	r5, [r4, #28]
 800b686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b688 <LCD_UpdateColorIndices>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	4c07      	ldr	r4, [pc, #28]	; (800b6a8 <LCD_UpdateColorIndices+0x20>)
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b690:	f000 fc6e 	bl	800bf70 <LCD_Color2Index>
 800b694:	f000 fc8c 	bl	800bfb0 <LCD_SetColorIndex>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b69c:	f000 fc68 	bl	800bf70 <LCD_Color2Index>
 800b6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a4:	f000 bca0 	b.w	800bfe8 <LCD_SetBkColorIndex>
 800b6a8:	2000002c 	.word	0x2000002c

0800b6ac <LCD_SetClipRectEx>:
 800b6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ae:	4c09      	ldr	r4, [pc, #36]	; (800b6d4 <LCD_SetClipRectEx+0x28>)
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	7c5a      	ldrb	r2, [r3, #17]
 800b6b4:	4b08      	ldr	r3, [pc, #32]	; (800b6d8 <LCD_SetClipRectEx+0x2c>)
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b6bc:	68c2      	ldr	r2, [r0, #12]
 800b6be:	4669      	mov	r1, sp
 800b6c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6c2:	4790      	blx	r2
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	466a      	mov	r2, sp
 800b6ca:	3008      	adds	r0, #8
 800b6cc:	f000 fd5e 	bl	800c18c <GUI__IntersectRects>
 800b6d0:	b003      	add	sp, #12
 800b6d2:	bd30      	pop	{r4, r5, pc}
 800b6d4:	2000002c 	.word	0x2000002c
 800b6d8:	20022fcc 	.word	0x20022fcc

0800b6dc <LCD_SetVRAMAddrEx>:
 800b6dc:	b513      	push	{r0, r1, r4, lr}
 800b6de:	460c      	mov	r4, r1
 800b6e0:	f002 fe34 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b6e4:	9001      	str	r0, [sp, #4]
 800b6e6:	b908      	cbnz	r0, 800b6ec <LCD_SetVRAMAddrEx+0x10>
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	e00b      	b.n	800b704 <LCD_SetVRAMAddrEx+0x28>
 800b6ec:	68c3      	ldr	r3, [r0, #12]
 800b6ee:	2109      	movs	r1, #9
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	a801      	add	r0, sp, #4
 800b6f4:	4798      	blx	r3
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d0f5      	beq.n	800b6e8 <LCD_SetVRAMAddrEx+0xc>
 800b6fc:	9801      	ldr	r0, [sp, #4]
 800b6fe:	4621      	mov	r1, r4
 800b700:	4798      	blx	r3
 800b702:	2000      	movs	r0, #0
 800b704:	b002      	add	sp, #8
 800b706:	bd10      	pop	{r4, pc}

0800b708 <LCD_SetVSizeEx>:
 800b708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70a:	460d      	mov	r5, r1
 800b70c:	4614      	mov	r4, r2
 800b70e:	f002 fe1d 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b712:	9001      	str	r0, [sp, #4]
 800b714:	b908      	cbnz	r0, 800b71a <LCD_SetVSizeEx+0x12>
 800b716:	2001      	movs	r0, #1
 800b718:	e00c      	b.n	800b734 <LCD_SetVSizeEx+0x2c>
 800b71a:	68c3      	ldr	r3, [r0, #12]
 800b71c:	210a      	movs	r1, #10
 800b71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b720:	a801      	add	r0, sp, #4
 800b722:	4798      	blx	r3
 800b724:	4603      	mov	r3, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d0f5      	beq.n	800b716 <LCD_SetVSizeEx+0xe>
 800b72a:	9801      	ldr	r0, [sp, #4]
 800b72c:	4629      	mov	r1, r5
 800b72e:	4622      	mov	r2, r4
 800b730:	4798      	blx	r3
 800b732:	2000      	movs	r0, #0
 800b734:	b003      	add	sp, #12
 800b736:	bd30      	pop	{r4, r5, pc}

0800b738 <LCD_SetSizeEx>:
 800b738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b73a:	460d      	mov	r5, r1
 800b73c:	4614      	mov	r4, r2
 800b73e:	f002 fe05 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b742:	9001      	str	r0, [sp, #4]
 800b744:	b908      	cbnz	r0, 800b74a <LCD_SetSizeEx+0x12>
 800b746:	2001      	movs	r0, #1
 800b748:	e00c      	b.n	800b764 <LCD_SetSizeEx+0x2c>
 800b74a:	68c3      	ldr	r3, [r0, #12]
 800b74c:	210b      	movs	r1, #11
 800b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b750:	a801      	add	r0, sp, #4
 800b752:	4798      	blx	r3
 800b754:	4603      	mov	r3, r0
 800b756:	2800      	cmp	r0, #0
 800b758:	d0f5      	beq.n	800b746 <LCD_SetSizeEx+0xe>
 800b75a:	9801      	ldr	r0, [sp, #4]
 800b75c:	4629      	mov	r1, r5
 800b75e:	4622      	mov	r2, r4
 800b760:	4798      	blx	r3
 800b762:	2000      	movs	r0, #0
 800b764:	b003      	add	sp, #12
 800b766:	bd30      	pop	{r4, r5, pc}

0800b768 <LCD_SetPosEx>:
 800b768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b76a:	460d      	mov	r5, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	f002 fded 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b772:	9001      	str	r0, [sp, #4]
 800b774:	b908      	cbnz	r0, 800b77a <LCD_SetPosEx+0x12>
 800b776:	2001      	movs	r0, #1
 800b778:	e00c      	b.n	800b794 <LCD_SetPosEx+0x2c>
 800b77a:	68c3      	ldr	r3, [r0, #12]
 800b77c:	2103      	movs	r1, #3
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	a801      	add	r0, sp, #4
 800b782:	4798      	blx	r3
 800b784:	4603      	mov	r3, r0
 800b786:	2800      	cmp	r0, #0
 800b788:	d0f5      	beq.n	800b776 <LCD_SetPosEx+0xe>
 800b78a:	9801      	ldr	r0, [sp, #4]
 800b78c:	4629      	mov	r1, r5
 800b78e:	4622      	mov	r2, r4
 800b790:	4798      	blx	r3
 800b792:	2000      	movs	r0, #0
 800b794:	b003      	add	sp, #12
 800b796:	bd30      	pop	{r4, r5, pc}

0800b798 <LCD_SetLUTEntryEx>:
 800b798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b79a:	460d      	mov	r5, r1
 800b79c:	4614      	mov	r4, r2
 800b79e:	f002 fdd5 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b7a2:	9001      	str	r0, [sp, #4]
 800b7a4:	b908      	cbnz	r0, 800b7aa <LCD_SetLUTEntryEx+0x12>
 800b7a6:	2001      	movs	r0, #1
 800b7a8:	e00c      	b.n	800b7c4 <LCD_SetLUTEntryEx+0x2c>
 800b7aa:	68c3      	ldr	r3, [r0, #12]
 800b7ac:	2110      	movs	r1, #16
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	a801      	add	r0, sp, #4
 800b7b2:	4798      	blx	r3
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0f5      	beq.n	800b7a6 <LCD_SetLUTEntryEx+0xe>
 800b7ba:	9801      	ldr	r0, [sp, #4]
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4622      	mov	r2, r4
 800b7c0:	4798      	blx	r3
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	b003      	add	sp, #12
 800b7c6:	bd30      	pop	{r4, r5, pc}

0800b7c8 <LCD_GetPosEx>:
 800b7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	4614      	mov	r4, r2
 800b7ce:	f002 fdbd 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b7d2:	9001      	str	r0, [sp, #4]
 800b7d4:	b908      	cbnz	r0, 800b7da <LCD_GetPosEx+0x12>
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	e00c      	b.n	800b7f4 <LCD_GetPosEx+0x2c>
 800b7da:	68c3      	ldr	r3, [r0, #12]
 800b7dc:	2104      	movs	r1, #4
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	a801      	add	r0, sp, #4
 800b7e2:	4798      	blx	r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d0f5      	beq.n	800b7d6 <LCD_GetPosEx+0xe>
 800b7ea:	9801      	ldr	r0, [sp, #4]
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	4798      	blx	r3
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	b003      	add	sp, #12
 800b7f6:	bd30      	pop	{r4, r5, pc}

0800b7f8 <LCD_SetDevFunc>:
 800b7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7fa:	460d      	mov	r5, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	f002 fda5 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b802:	9001      	str	r0, [sp, #4]
 800b804:	b908      	cbnz	r0, 800b80a <LCD_SetDevFunc+0x12>
 800b806:	2001      	movs	r0, #1
 800b808:	e00c      	b.n	800b824 <LCD_SetDevFunc+0x2c>
 800b80a:	68c3      	ldr	r3, [r0, #12]
 800b80c:	2116      	movs	r1, #22
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	a801      	add	r0, sp, #4
 800b812:	4798      	blx	r3
 800b814:	4603      	mov	r3, r0
 800b816:	2800      	cmp	r0, #0
 800b818:	d0f5      	beq.n	800b806 <LCD_SetDevFunc+0xe>
 800b81a:	9801      	ldr	r0, [sp, #4]
 800b81c:	4629      	mov	r1, r5
 800b81e:	4622      	mov	r2, r4
 800b820:	4798      	blx	r3
 800b822:	2000      	movs	r0, #0
 800b824:	b003      	add	sp, #12
 800b826:	bd30      	pop	{r4, r5, pc}

0800b828 <_GetDevProp>:
 800b828:	2801      	cmp	r0, #1
 800b82a:	b510      	push	{r4, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	dc08      	bgt.n	800b842 <_GetDevProp+0x1a>
 800b830:	f002 fd8c 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b834:	b120      	cbz	r0, 800b840 <_GetDevProp+0x18>
 800b836:	68c3      	ldr	r3, [r0, #12]
 800b838:	4621      	mov	r1, r4
 800b83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83c:	4798      	blx	r3
 800b83e:	bd10      	pop	{r4, pc}
 800b840:	bd10      	pop	{r4, pc}
 800b842:	2000      	movs	r0, #0
 800b844:	bd10      	pop	{r4, pc}

0800b846 <_GetMaxValue>:
 800b846:	b538      	push	{r3, r4, r5, lr}
 800b848:	4604      	mov	r4, r0
 800b84a:	4621      	mov	r1, r4
 800b84c:	2001      	movs	r0, #1
 800b84e:	f7ff ffeb 	bl	800b828 <_GetDevProp>
 800b852:	4621      	mov	r1, r4
 800b854:	4605      	mov	r5, r0
 800b856:	2000      	movs	r0, #0
 800b858:	f7ff ffe6 	bl	800b828 <_GetDevProp>
 800b85c:	42a8      	cmp	r0, r5
 800b85e:	bfb8      	it	lt
 800b860:	4628      	movlt	r0, r5
 800b862:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b866:	bd38      	pop	{r3, r4, r5, pc}

0800b868 <LCD_GetXSizeEx>:
 800b868:	2101      	movs	r1, #1
 800b86a:	f7ff bfdd 	b.w	800b828 <_GetDevProp>

0800b86e <LCD_GetYSizeEx>:
 800b86e:	2102      	movs	r1, #2
 800b870:	f7ff bfda 	b.w	800b828 <_GetDevProp>

0800b874 <LCD_GetBitsPerPixelEx>:
 800b874:	2108      	movs	r1, #8
 800b876:	f7ff bfd7 	b.w	800b828 <_GetDevProp>

0800b87a <LCD_GetNumColorsEx>:
 800b87a:	2109      	movs	r1, #9
 800b87c:	f7ff bfd4 	b.w	800b828 <_GetDevProp>

0800b880 <LCD_GetMirrorXEx>:
 800b880:	210c      	movs	r1, #12
 800b882:	f7ff bfd1 	b.w	800b828 <_GetDevProp>

0800b886 <LCD_GetMirrorYEx>:
 800b886:	210d      	movs	r1, #13
 800b888:	f7ff bfce 	b.w	800b828 <_GetDevProp>

0800b88c <LCD_GetSwapXYEx>:
 800b88c:	210e      	movs	r1, #14
 800b88e:	f7ff bfcb 	b.w	800b828 <_GetDevProp>
	...

0800b894 <LCD_GetNumColors>:
 800b894:	4b02      	ldr	r3, [pc, #8]	; (800b8a0 <LCD_GetNumColors+0xc>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	7c58      	ldrb	r0, [r3, #17]
 800b89a:	f7ff bfee 	b.w	800b87a <LCD_GetNumColorsEx>
 800b89e:	bf00      	nop
 800b8a0:	2000002c 	.word	0x2000002c

0800b8a4 <GUI_GetBitsPerPixelEx>:
 800b8a4:	b508      	push	{r3, lr}
 800b8a6:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <GUI_GetBitsPerPixelEx+0x14>)
 800b8a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b8ac:	68c3      	ldr	r3, [r0, #12]
 800b8ae:	2108      	movs	r1, #8
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b2:	4798      	blx	r3
 800b8b4:	bd08      	pop	{r3, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20022fcc 	.word	0x20022fcc

0800b8bc <LCD_GetDevFunc>:
 800b8bc:	b508      	push	{r3, lr}
 800b8be:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <LCD_GetDevFunc+0x14>)
 800b8c0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800b8c4:	68d2      	ldr	r2, [r2, #12]
 800b8c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b8ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b8cc:	4790      	blx	r2
 800b8ce:	bd08      	pop	{r3, pc}
 800b8d0:	20022fcc 	.word	0x20022fcc

0800b8d4 <LCD_GetPaletteEx>:
 800b8d4:	b508      	push	{r3, lr}
 800b8d6:	f002 fd39 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800b8da:	b120      	cbz	r0, 800b8e6 <LCD_GetPaletteEx+0x12>
 800b8dc:	68c3      	ldr	r3, [r0, #12]
 800b8de:	2102      	movs	r1, #2
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	4798      	blx	r3
 800b8e4:	bd08      	pop	{r3, pc}
 800b8e6:	bd08      	pop	{r3, pc}

0800b8e8 <LCD_GetPalette>:
 800b8e8:	4b02      	ldr	r3, [pc, #8]	; (800b8f4 <LCD_GetPalette+0xc>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	7c58      	ldrb	r0, [r3, #17]
 800b8ee:	f7ff bff1 	b.w	800b8d4 <LCD_GetPaletteEx>
 800b8f2:	bf00      	nop
 800b8f4:	2000002c 	.word	0x2000002c

0800b8f8 <GUI_GetpfIndex2ColorEx>:
 800b8f8:	4b02      	ldr	r3, [pc, #8]	; (800b904 <GUI_GetpfIndex2ColorEx+0xc>)
 800b8fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	6858      	ldr	r0, [r3, #4]
 800b902:	4770      	bx	lr
 800b904:	20022fcc 	.word	0x20022fcc

0800b908 <LCD_GetXSizeMax>:
 800b908:	2001      	movs	r0, #1
 800b90a:	f7ff bf9c 	b.w	800b846 <_GetMaxValue>

0800b90e <LCD_GetYSizeMax>:
 800b90e:	2002      	movs	r0, #2
 800b910:	f7ff bf99 	b.w	800b846 <_GetMaxValue>

0800b914 <LCD_GetVXSizeMax>:
 800b914:	2003      	movs	r0, #3
 800b916:	f7ff bf96 	b.w	800b846 <_GetMaxValue>
	...

0800b91c <LCD_SetDisplaySize>:
 800b91c:	4b02      	ldr	r3, [pc, #8]	; (800b928 <LCD_SetDisplaySize+0xc>)
 800b91e:	6018      	str	r0, [r3, #0]
 800b920:	4b02      	ldr	r3, [pc, #8]	; (800b92c <LCD_SetDisplaySize+0x10>)
 800b922:	6019      	str	r1, [r3, #0]
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	20022a30 	.word	0x20022a30
 800b92c:	20022a2c 	.word	0x20022a2c

0800b930 <LCD_GetXSizeDisplay>:
 800b930:	4b01      	ldr	r3, [pc, #4]	; (800b938 <LCD_GetXSizeDisplay+0x8>)
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20022a30 	.word	0x20022a30

0800b93c <LCD_GetYSizeDisplay>:
 800b93c:	4b01      	ldr	r3, [pc, #4]	; (800b944 <LCD_GetYSizeDisplay+0x8>)
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20022a2c 	.word	0x20022a2c

0800b948 <LCD__GetBPP>:
 800b948:	2800      	cmp	r0, #0
 800b94a:	d03b      	beq.n	800b9c4 <LCD__GetBPP+0x7c>
 800b94c:	f030 0301 	bics.w	r3, r0, #1
 800b950:	d029      	beq.n	800b9a6 <LCD__GetBPP+0x5e>
 800b952:	f030 0303 	bics.w	r3, r0, #3
 800b956:	d028      	beq.n	800b9aa <LCD__GetBPP+0x62>
 800b958:	f030 0307 	bics.w	r3, r0, #7
 800b95c:	d027      	beq.n	800b9ae <LCD__GetBPP+0x66>
 800b95e:	f030 030f 	bics.w	r3, r0, #15
 800b962:	d026      	beq.n	800b9b2 <LCD__GetBPP+0x6a>
 800b964:	f030 031f 	bics.w	r3, r0, #31
 800b968:	d025      	beq.n	800b9b6 <LCD__GetBPP+0x6e>
 800b96a:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b96e:	d024      	beq.n	800b9ba <LCD__GetBPP+0x72>
 800b970:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b974:	f023 0301 	bic.w	r3, r3, #1
 800b978:	b30b      	cbz	r3, 800b9be <LCD__GetBPP+0x76>
 800b97a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800b97e:	f023 030f 	bic.w	r3, r3, #15
 800b982:	b1e3      	cbz	r3, 800b9be <LCD__GetBPP+0x76>
 800b984:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800b988:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b98c:	b1bb      	cbz	r3, 800b9be <LCD__GetBPP+0x76>
 800b98e:	0c03      	lsrs	r3, r0, #16
 800b990:	041b      	lsls	r3, r3, #16
 800b992:	b1a3      	cbz	r3, 800b9be <LCD__GetBPP+0x76>
 800b994:	0c83      	lsrs	r3, r0, #18
 800b996:	049b      	lsls	r3, r3, #18
 800b998:	b19b      	cbz	r3, 800b9c2 <LCD__GetBPP+0x7a>
 800b99a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b99e:	bf0c      	ite	eq
 800b9a0:	2018      	moveq	r0, #24
 800b9a2:	2020      	movne	r0, #32
 800b9a4:	4770      	bx	lr
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	4770      	bx	lr
 800b9aa:	2002      	movs	r0, #2
 800b9ac:	4770      	bx	lr
 800b9ae:	2003      	movs	r0, #3
 800b9b0:	4770      	bx	lr
 800b9b2:	2004      	movs	r0, #4
 800b9b4:	4770      	bx	lr
 800b9b6:	2005      	movs	r0, #5
 800b9b8:	4770      	bx	lr
 800b9ba:	2008      	movs	r0, #8
 800b9bc:	4770      	bx	lr
 800b9be:	2010      	movs	r0, #16
 800b9c0:	4770      	bx	lr
 800b9c2:	2012      	movs	r0, #18
 800b9c4:	4770      	bx	lr

0800b9c6 <LCD__GetBPPDevice>:
 800b9c6:	b508      	push	{r3, lr}
 800b9c8:	f7ff ffbe 	bl	800b948 <LCD__GetBPP>
 800b9cc:	2801      	cmp	r0, #1
 800b9ce:	d00f      	beq.n	800b9f0 <LCD__GetBPPDevice+0x2a>
 800b9d0:	1e83      	subs	r3, r0, #2
 800b9d2:	2b06      	cmp	r3, #6
 800b9d4:	d909      	bls.n	800b9ea <LCD__GetBPPDevice+0x24>
 800b9d6:	f1a0 0309 	sub.w	r3, r0, #9
 800b9da:	2b07      	cmp	r3, #7
 800b9dc:	d907      	bls.n	800b9ee <LCD__GetBPPDevice+0x28>
 800b9de:	3811      	subs	r0, #17
 800b9e0:	2810      	cmp	r0, #16
 800b9e2:	bf34      	ite	cc
 800b9e4:	2020      	movcc	r0, #32
 800b9e6:	2000      	movcs	r0, #0
 800b9e8:	bd08      	pop	{r3, pc}
 800b9ea:	2008      	movs	r0, #8
 800b9ec:	bd08      	pop	{r3, pc}
 800b9ee:	2010      	movs	r0, #16
 800b9f0:	bd08      	pop	{r3, pc}
	...

0800b9f4 <_OnExit>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	4c03      	ldr	r4, [pc, #12]	; (800ba04 <_OnExit+0x10>)
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	f003 f971 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd10      	pop	{r4, pc}
 800ba04:	20022f98 	.word	0x20022f98

0800ba08 <LCD_InitColors>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d09      	ldr	r5, [pc, #36]	; (800ba30 <LCD_InitColors+0x28>)
 800ba0c:	682c      	ldr	r4, [r5, #0]
 800ba0e:	b95c      	cbnz	r4, 800ba28 <LCD_InitColors+0x20>
 800ba10:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <LCD_InitColors+0x2c>)
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	0080      	lsls	r0, r0, #2
 800ba16:	f003 fac3 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800ba1a:	6028      	str	r0, [r5, #0]
 800ba1c:	b130      	cbz	r0, 800ba2c <LCD_InitColors+0x24>
 800ba1e:	4806      	ldr	r0, [pc, #24]	; (800ba38 <LCD_InitColors+0x30>)
 800ba20:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <LCD_InitColors+0x34>)
 800ba22:	6003      	str	r3, [r0, #0]
 800ba24:	f002 fdd2 	bl	800e5cc <GUI__RegisterExit>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	20022f98 	.word	0x20022f98
 800ba34:	20000010 	.word	0x20000010
 800ba38:	20022a34 	.word	0x20022a34
 800ba3c:	0800b9f5 	.word	0x0800b9f5

0800ba40 <LCD_GetpPalConvTableUncached>:
 800ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba44:	b320      	cbz	r0, 800ba90 <LCD_GetpPalConvTableUncached+0x50>
 800ba46:	6885      	ldr	r5, [r0, #8]
 800ba48:	b1dd      	cbz	r5, 800ba82 <LCD_GetpPalConvTableUncached+0x42>
 800ba4a:	4e12      	ldr	r6, [pc, #72]	; (800ba94 <LCD_GetpPalConvTableUncached+0x54>)
 800ba4c:	6833      	ldr	r3, [r6, #0]
 800ba4e:	b1db      	cbz	r3, 800ba88 <LCD_GetpPalConvTableUncached+0x48>
 800ba50:	6803      	ldr	r3, [r0, #0]
 800ba52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba56:	dc1a      	bgt.n	800ba8e <LCD_GetpPalConvTableUncached+0x4e>
 800ba58:	4a0f      	ldr	r2, [pc, #60]	; (800ba98 <LCD_GetpPalConvTableUncached+0x58>)
 800ba5a:	6812      	ldr	r2, [r2, #0]
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	bfb4      	ite	lt
 800ba62:	4690      	movlt	r8, r2
 800ba64:	4698      	movge	r8, r3
 800ba66:	4544      	cmp	r4, r8
 800ba68:	da08      	bge.n	800ba7c <LCD_GetpPalConvTableUncached+0x3c>
 800ba6a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800ba6e:	6837      	ldr	r7, [r6, #0]
 800ba70:	f000 fa7e 	bl	800bf70 <LCD_Color2Index>
 800ba74:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800ba78:	3401      	adds	r4, #1
 800ba7a:	e7f4      	b.n	800ba66 <LCD_GetpPalConvTableUncached+0x26>
 800ba7c:	6830      	ldr	r0, [r6, #0]
 800ba7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba82:	4628      	mov	r0, r5
 800ba84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba94:	20022f98 	.word	0x20022f98
 800ba98:	20000010 	.word	0x20000010

0800ba9c <LCD_GetpPalConvTable>:
 800ba9c:	f7ff bfd0 	b.w	800ba40 <LCD_GetpPalConvTableUncached>

0800baa0 <LCD_GetpPalConvTableBM>:
 800baa0:	f7ff bfce 	b.w	800ba40 <LCD_GetpPalConvTableUncached>

0800baa4 <LCD_InitLUT>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	f004 fd4a 	bl	8010540 <LCD_GetNumLayers>
 800baac:	2400      	movs	r4, #0
 800baae:	4680      	mov	r8, r0
 800bab0:	4544      	cmp	r4, r8
 800bab2:	da2c      	bge.n	800bb0e <LCD_InitLUT+0x6a>
 800bab4:	4620      	mov	r0, r4
 800bab6:	f002 fc49 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800baba:	b330      	cbz	r0, 800bb0a <LCD_InitLUT+0x66>
 800babc:	4e15      	ldr	r6, [pc, #84]	; (800bb14 <LCD_InitLUT+0x70>)
 800babe:	6833      	ldr	r3, [r6, #0]
 800bac0:	4620      	mov	r0, r4
 800bac2:	f893 9011 	ldrb.w	r9, [r3, #17]
 800bac6:	745c      	strb	r4, [r3, #17]
 800bac8:	f7ff fed4 	bl	800b874 <LCD_GetBitsPerPixelEx>
 800bacc:	2808      	cmp	r0, #8
 800bace:	dd03      	ble.n	800bad8 <LCD_InitLUT+0x34>
 800bad0:	6833      	ldr	r3, [r6, #0]
 800bad2:	f883 9011 	strb.w	r9, [r3, #17]
 800bad6:	e018      	b.n	800bb0a <LCD_InitLUT+0x66>
 800bad8:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <LCD_InitLUT+0x74>)
 800bada:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bade:	691a      	ldr	r2, [r3, #16]
 800bae0:	4b0e      	ldr	r3, [pc, #56]	; (800bb1c <LCD_InitLUT+0x78>)
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d0f4      	beq.n	800bad0 <LCD_InitLUT+0x2c>
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff fec7 	bl	800b87a <LCD_GetNumColorsEx>
 800baec:	2500      	movs	r5, #0
 800baee:	4682      	mov	sl, r0
 800baf0:	4555      	cmp	r5, sl
 800baf2:	daed      	bge.n	800bad0 <LCD_InitLUT+0x2c>
 800baf4:	b2ef      	uxtb	r7, r5
 800baf6:	4638      	mov	r0, r7
 800baf8:	f000 fa4a 	bl	800bf90 <LCD_Index2Color>
 800bafc:	4639      	mov	r1, r7
 800bafe:	4602      	mov	r2, r0
 800bb00:	4620      	mov	r0, r4
 800bb02:	f7ff fe49 	bl	800b798 <LCD_SetLUTEntryEx>
 800bb06:	3501      	adds	r5, #1
 800bb08:	e7f2      	b.n	800baf0 <LCD_InitLUT+0x4c>
 800bb0a:	3401      	adds	r4, #1
 800bb0c:	e7d0      	b.n	800bab0 <LCD_InitLUT+0xc>
 800bb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb12:	bf00      	nop
 800bb14:	2000002c 	.word	0x2000002c
 800bb18:	20022fcc 	.word	0x20022fcc
 800bb1c:	08012f18 	.word	0x08012f18

0800bb20 <_SetDrawMode>:
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	4b08      	ldr	r3, [pc, #32]	; (800bb44 <_SetDrawMode+0x24>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	7c1a      	ldrb	r2, [r3, #16]
 800bb28:	ea80 0102 	eor.w	r1, r0, r2
 800bb2c:	0749      	lsls	r1, r1, #29
 800bb2e:	d505      	bpl.n	800bb3c <_SetDrawMode+0x1c>
 800bb30:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bb32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bb34:	6826      	ldr	r6, [r4, #0]
 800bb36:	680d      	ldr	r5, [r1, #0]
 800bb38:	6025      	str	r5, [r4, #0]
 800bb3a:	600e      	str	r6, [r1, #0]
 800bb3c:	7418      	strb	r0, [r3, #16]
 800bb3e:	4610      	mov	r0, r2
 800bb40:	bd70      	pop	{r4, r5, r6, pc}
 800bb42:	bf00      	nop
 800bb44:	2000002c 	.word	0x2000002c

0800bb48 <LCD_SetDrawMode>:
 800bb48:	b508      	push	{r3, lr}
 800bb4a:	4b02      	ldr	r3, [pc, #8]	; (800bb54 <LCD_SetDrawMode+0xc>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	4798      	blx	r3
 800bb52:	bd08      	pop	{r3, pc}
 800bb54:	20000014 	.word	0x20000014

0800bb58 <LCD_DrawPixel>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4b14      	ldr	r3, [pc, #80]	; (800bbac <LCD_DrawPixel+0x54>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	460a      	mov	r2, r1
 800bb60:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800bb64:	428a      	cmp	r2, r1
 800bb66:	4604      	mov	r4, r0
 800bb68:	db1e      	blt.n	800bba8 <LCD_DrawPixel+0x50>
 800bb6a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800bb6e:	428a      	cmp	r2, r1
 800bb70:	dc1a      	bgt.n	800bba8 <LCD_DrawPixel+0x50>
 800bb72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800bb76:	4288      	cmp	r0, r1
 800bb78:	db16      	blt.n	800bba8 <LCD_DrawPixel+0x50>
 800bb7a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800bb7e:	4288      	cmp	r0, r1
 800bb80:	dc12      	bgt.n	800bba8 <LCD_DrawPixel+0x50>
 800bb82:	7c19      	ldrb	r1, [r3, #16]
 800bb84:	7c58      	ldrb	r0, [r3, #17]
 800bb86:	f011 0f01 	tst.w	r1, #1
 800bb8a:	4909      	ldr	r1, [pc, #36]	; (800bbb0 <LCD_DrawPixel+0x58>)
 800bb8c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800bb90:	d004      	beq.n	800bb9c <LCD_DrawPixel+0x44>
 800bb92:	68c3      	ldr	r3, [r0, #12]
 800bb94:	4621      	mov	r1, r4
 800bb96:	69db      	ldr	r3, [r3, #28]
 800bb98:	4798      	blx	r3
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	68c1      	ldr	r1, [r0, #12]
 800bb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba0:	698d      	ldr	r5, [r1, #24]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4621      	mov	r1, r4
 800bba6:	47a8      	blx	r5
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	2000002c 	.word	0x2000002c
 800bbb0:	20022fcc 	.word	0x20022fcc

0800bbb4 <LCD_DrawHLine>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <LCD_DrawHLine+0x44>)
 800bbb8:	681c      	ldr	r4, [r3, #0]
 800bbba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800bbbe:	4299      	cmp	r1, r3
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	db17      	blt.n	800bbf4 <LCD_DrawHLine+0x40>
 800bbc4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800bbc8:	4299      	cmp	r1, r3
 800bbca:	dc13      	bgt.n	800bbf4 <LCD_DrawHLine+0x40>
 800bbcc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800bbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd4:	4288      	cmp	r0, r1
 800bbd6:	bfa8      	it	ge
 800bbd8:	4601      	movge	r1, r0
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	bfb8      	it	lt
 800bbde:	4613      	movlt	r3, r2
 800bbe0:	428b      	cmp	r3, r1
 800bbe2:	db07      	blt.n	800bbf4 <LCD_DrawHLine+0x40>
 800bbe4:	7c60      	ldrb	r0, [r4, #17]
 800bbe6:	4a05      	ldr	r2, [pc, #20]	; (800bbfc <LCD_DrawHLine+0x48>)
 800bbe8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800bbec:	68c2      	ldr	r2, [r0, #12]
 800bbee:	6894      	ldr	r4, [r2, #8]
 800bbf0:	462a      	mov	r2, r5
 800bbf2:	47a0      	blx	r4
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	bf00      	nop
 800bbf8:	2000002c 	.word	0x2000002c
 800bbfc:	20022fcc 	.word	0x20022fcc

0800bc00 <LCD_DrawVLine>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <LCD_DrawVLine+0x44>)
 800bc04:	681c      	ldr	r4, [r3, #0]
 800bc06:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	429d      	cmp	r5, r3
 800bc0e:	4610      	mov	r0, r2
 800bc10:	db17      	blt.n	800bc42 <LCD_DrawVLine+0x42>
 800bc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc16:	429d      	cmp	r5, r3
 800bc18:	dc13      	bgt.n	800bc42 <LCD_DrawVLine+0x42>
 800bc1a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800bc1e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800bc22:	4291      	cmp	r1, r2
 800bc24:	bfa8      	it	ge
 800bc26:	460a      	movge	r2, r1
 800bc28:	4298      	cmp	r0, r3
 800bc2a:	bfb8      	it	lt
 800bc2c:	4603      	movlt	r3, r0
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	db07      	blt.n	800bc42 <LCD_DrawVLine+0x42>
 800bc32:	7c60      	ldrb	r0, [r4, #17]
 800bc34:	4904      	ldr	r1, [pc, #16]	; (800bc48 <LCD_DrawVLine+0x48>)
 800bc36:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800bc3a:	68c1      	ldr	r1, [r0, #12]
 800bc3c:	68cc      	ldr	r4, [r1, #12]
 800bc3e:	4629      	mov	r1, r5
 800bc40:	47a0      	blx	r4
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	2000002c 	.word	0x2000002c
 800bc48:	20022fcc 	.word	0x20022fcc

0800bc4c <LCD_FillRect>:
 800bc4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc4e:	460e      	mov	r6, r1
 800bc50:	4912      	ldr	r1, [pc, #72]	; (800bc9c <LCD_FillRect+0x50>)
 800bc52:	680c      	ldr	r4, [r1, #0]
 800bc54:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800bc58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc5c:	4288      	cmp	r0, r1
 800bc5e:	bfa8      	it	ge
 800bc60:	4601      	movge	r1, r0
 800bc62:	42aa      	cmp	r2, r5
 800bc64:	bfb8      	it	lt
 800bc66:	4615      	movlt	r5, r2
 800bc68:	428d      	cmp	r5, r1
 800bc6a:	db14      	blt.n	800bc96 <LCD_FillRect+0x4a>
 800bc6c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800bc70:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800bc74:	4296      	cmp	r6, r2
 800bc76:	bfa8      	it	ge
 800bc78:	4632      	movge	r2, r6
 800bc7a:	4283      	cmp	r3, r0
 800bc7c:	bfa8      	it	ge
 800bc7e:	4603      	movge	r3, r0
 800bc80:	4293      	cmp	r3, r2
 800bc82:	db08      	blt.n	800bc96 <LCD_FillRect+0x4a>
 800bc84:	7c64      	ldrb	r4, [r4, #17]
 800bc86:	4806      	ldr	r0, [pc, #24]	; (800bca0 <LCD_FillRect+0x54>)
 800bc88:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bc8c:	68c4      	ldr	r4, [r0, #12]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	6924      	ldr	r4, [r4, #16]
 800bc92:	462b      	mov	r3, r5
 800bc94:	47a0      	blx	r4
 800bc96:	b002      	add	sp, #8
 800bc98:	bd70      	pop	{r4, r5, r6, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2000002c 	.word	0x2000002c
 800bca0:	20022fcc 	.word	0x20022fcc

0800bca4 <LCD_DrawBitmap>:
 800bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800beb8 <LCD_DrawBitmap+0x214>
 800bcac:	b091      	sub	sp, #68	; 0x44
 800bcae:	f8dc 9000 	ldr.w	r9, [ip]
 800bcb2:	9207      	str	r2, [sp, #28]
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	4688      	mov	r8, r1
 800bcb8:	469b      	mov	fp, r3
 800bcba:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800bcbc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bcbe:	f1b9 0f00 	cmp.w	r9, #0
 800bcc2:	d00c      	beq.n	800bcde <LCD_DrawBitmap+0x3a>
 800bcc4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800bcc6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bcc8:	9500      	str	r5, [sp, #0]
 800bcca:	9701      	str	r7, [sp, #4]
 800bccc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800bcce:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800bcd0:	9602      	str	r6, [sp, #8]
 800bcd2:	9503      	str	r5, [sp, #12]
 800bcd4:	9404      	str	r4, [sp, #16]
 800bcd6:	9705      	str	r7, [sp, #20]
 800bcd8:	f8d9 4000 	ldr.w	r4, [r9]
 800bcdc:	e081      	b.n	800bde2 <LCD_DrawBitmap+0x13e>
 800bcde:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800bce0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bce2:	ea47 0300 	orr.w	r3, r7, r0
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d17d      	bne.n	800bde6 <LCD_DrawBitmap+0x142>
 800bcea:	4b71      	ldr	r3, [pc, #452]	; (800beb0 <LCD_DrawBitmap+0x20c>)
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800bcf2:	1a53      	subs	r3, r2, r1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	dd08      	ble.n	800bd0a <LCD_DrawBitmap+0x66>
 800bcf8:	ebc3 010b 	rsb	r1, r3, fp
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	f340 80d4 	ble.w	800beaa <LCD_DrawBitmap+0x206>
 800bd02:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bd04:	fb07 4403 	mla	r4, r7, r3, r4
 800bd08:	e001      	b.n	800bd0e <LCD_DrawBitmap+0x6a>
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	4642      	mov	r2, r8
 800bd0e:	44d8      	add	r8, fp
 800bd10:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800bd14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bd18:	ebc3 0808 	rsb	r8, r3, r8
 800bd1c:	f1b8 0f00 	cmp.w	r8, #0
 800bd20:	dd04      	ble.n	800bd2c <LCD_DrawBitmap+0x88>
 800bd22:	ebc8 0101 	rsb	r1, r8, r1
 800bd26:	2900      	cmp	r1, #0
 800bd28:	f340 80bf 	ble.w	800beaa <LCD_DrawBitmap+0x206>
 800bd2c:	9b07      	ldr	r3, [sp, #28]
 800bd2e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800bd32:	442b      	add	r3, r5
 800bd34:	3b01      	subs	r3, #1
 800bd36:	ebcc 0303 	rsb	r3, ip, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dd02      	ble.n	800bd44 <LCD_DrawBitmap+0xa0>
 800bd3e:	9f07      	ldr	r7, [sp, #28]
 800bd40:	1aff      	subs	r7, r7, r3
 800bd42:	9707      	str	r7, [sp, #28]
 800bd44:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800bd48:	4565      	cmp	r5, ip
 800bd4a:	da33      	bge.n	800bdb4 <LCD_DrawBitmap+0x110>
 800bd4c:	9f07      	ldr	r7, [sp, #28]
 800bd4e:	ebc5 030c 	rsb	r3, r5, ip
 800bd52:	1aff      	subs	r7, r7, r3
 800bd54:	2e08      	cmp	r6, #8
 800bd56:	9707      	str	r7, [sp, #28]
 800bd58:	d027      	beq.n	800bdaa <LCD_DrawBitmap+0x106>
 800bd5a:	dc0d      	bgt.n	800bd78 <LCD_DrawBitmap+0xd4>
 800bd5c:	2e02      	cmp	r6, #2
 800bd5e:	d014      	beq.n	800bd8a <LCD_DrawBitmap+0xe6>
 800bd60:	2e04      	cmp	r6, #4
 800bd62:	d01a      	beq.n	800bd9a <LCD_DrawBitmap+0xf6>
 800bd64:	2e01      	cmp	r6, #1
 800bd66:	d126      	bne.n	800bdb6 <LCD_DrawBitmap+0x112>
 800bd68:	f023 0c07 	bic.w	ip, r3, #7
 800bd6c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800bd70:	4465      	add	r5, ip
 800bd72:	f003 0307 	and.w	r3, r3, #7
 800bd76:	e01e      	b.n	800bdb6 <LCD_DrawBitmap+0x112>
 800bd78:	2e18      	cmp	r6, #24
 800bd7a:	d018      	beq.n	800bdae <LCD_DrawBitmap+0x10a>
 800bd7c:	2e20      	cmp	r6, #32
 800bd7e:	d016      	beq.n	800bdae <LCD_DrawBitmap+0x10a>
 800bd80:	2e10      	cmp	r6, #16
 800bd82:	d118      	bne.n	800bdb6 <LCD_DrawBitmap+0x112>
 800bd84:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800bd88:	e013      	b.n	800bdb2 <LCD_DrawBitmap+0x10e>
 800bd8a:	f023 0c03 	bic.w	ip, r3, #3
 800bd8e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800bd92:	4465      	add	r5, ip
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	e00d      	b.n	800bdb6 <LCD_DrawBitmap+0x112>
 800bd9a:	f023 0c01 	bic.w	ip, r3, #1
 800bd9e:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800bda2:	4465      	add	r5, ip
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	e005      	b.n	800bdb6 <LCD_DrawBitmap+0x112>
 800bdaa:	441c      	add	r4, r3
 800bdac:	e001      	b.n	800bdb2 <LCD_DrawBitmap+0x10e>
 800bdae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bdb2:	4665      	mov	r5, ip
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9f07      	ldr	r7, [sp, #28]
 800bdb8:	2f00      	cmp	r7, #0
 800bdba:	dd76      	ble.n	800beaa <LCD_DrawBitmap+0x206>
 800bdbc:	f890 e011 	ldrb.w	lr, [r0, #17]
 800bdc0:	483c      	ldr	r0, [pc, #240]	; (800beb4 <LCD_DrawBitmap+0x210>)
 800bdc2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bdc4:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800bdc8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800bdcc:	9403      	str	r4, [sp, #12]
 800bdce:	e88d 0042 	stmia.w	sp, {r1, r6}
 800bdd2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	9702      	str	r7, [sp, #8]
 800bdd8:	9405      	str	r4, [sp, #20]
 800bdda:	f8de 4004 	ldr.w	r4, [lr, #4]
 800bdde:	9b07      	ldr	r3, [sp, #28]
 800bde0:	4629      	mov	r1, r5
 800bde2:	47a0      	blx	r4
 800bde4:	e061      	b.n	800beaa <LCD_DrawBitmap+0x206>
 800bde6:	f1c6 0708 	rsb	r7, r6, #8
 800bdea:	970e      	str	r7, [sp, #56]	; 0x38
 800bdec:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800bdf0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bdf2:	455f      	cmp	r7, fp
 800bdf4:	da59      	bge.n	800beaa <LCD_DrawBitmap+0x206>
 800bdf6:	4b2e      	ldr	r3, [pc, #184]	; (800beb0 <LCD_DrawBitmap+0x20c>)
 800bdf8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4447      	add	r7, r8
 800bdfe:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800be02:	970c      	str	r7, [sp, #48]	; 0x30
 800be04:	3f01      	subs	r7, #1
 800be06:	4297      	cmp	r7, r2
 800be08:	970d      	str	r7, [sp, #52]	; 0x34
 800be0a:	db46      	blt.n	800be9a <LCD_DrawBitmap+0x1f6>
 800be0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be10:	4598      	cmp	r8, r3
 800be12:	dc42      	bgt.n	800be9a <LCD_DrawBitmap+0x1f6>
 800be14:	f04f 0a00 	mov.w	sl, #0
 800be18:	940b      	str	r4, [sp, #44]	; 0x2c
 800be1a:	46ac      	mov	ip, r5
 800be1c:	4657      	mov	r7, sl
 800be1e:	9807      	ldr	r0, [sp, #28]
 800be20:	4287      	cmp	r7, r0
 800be22:	da3a      	bge.n	800be9a <LCD_DrawBitmap+0x1f6>
 800be24:	f1ba 0f00 	cmp.w	sl, #0
 800be28:	d106      	bne.n	800be38 <LCD_DrawBitmap+0x194>
 800be2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800be2c:	f890 9000 	ldrb.w	r9, [r0]
 800be30:	3001      	adds	r0, #1
 800be32:	900b      	str	r0, [sp, #44]	; 0x2c
 800be34:	f04f 0a08 	mov.w	sl, #8
 800be38:	990e      	ldr	r1, [sp, #56]	; 0x38
 800be3a:	4a1d      	ldr	r2, [pc, #116]	; (800beb0 <LCD_DrawBitmap+0x20c>)
 800be3c:	fa49 f301 	asr.w	r3, r9, r1
 800be40:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800be44:	fa09 f906 	lsl.w	r9, r9, r6
 800be48:	fa5f f989 	uxtb.w	r9, r9
 800be4c:	ebc6 0a0a 	rsb	sl, r6, sl
 800be50:	d103      	bne.n	800be5a <LCD_DrawBitmap+0x1b6>
 800be52:	6810      	ldr	r0, [r2, #0]
 800be54:	7c00      	ldrb	r0, [r0, #16]
 800be56:	0780      	lsls	r0, r0, #30
 800be58:	d41b      	bmi.n	800be92 <LCD_DrawBitmap+0x1ee>
 800be5a:	6812      	ldr	r2, [r2, #0]
 800be5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800be5e:	6810      	ldr	r0, [r2, #0]
 800be60:	900f      	str	r0, [sp, #60]	; 0x3c
 800be62:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800be64:	b110      	cbz	r0, 800be6c <LCD_DrawBitmap+0x1c8>
 800be66:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800be6a:	e000      	b.n	800be6e <LCD_DrawBitmap+0x1ca>
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	1e4a      	subs	r2, r1, #1
 800be74:	4462      	add	r2, ip
 800be76:	4660      	mov	r0, ip
 800be78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be7a:	f8cd c020 	str.w	ip, [sp, #32]
 800be7e:	4641      	mov	r1, r8
 800be80:	f7ff fee4 	bl	800bc4c <LCD_FillRect>
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <LCD_DrawBitmap+0x20c>)
 800be86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800be8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800be94:	3701      	adds	r7, #1
 800be96:	449c      	add	ip, r3
 800be98:	e7c1      	b.n	800be1e <LCD_DrawBitmap+0x17a>
 800be9a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800be9c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bea0:	3701      	adds	r7, #1
 800bea2:	970a      	str	r7, [sp, #40]	; 0x28
 800bea4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bea6:	443c      	add	r4, r7
 800bea8:	e7a2      	b.n	800bdf0 <LCD_DrawBitmap+0x14c>
 800beaa:	b011      	add	sp, #68	; 0x44
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	2000002c 	.word	0x2000002c
 800beb4:	20022fcc 	.word	0x20022fcc
 800beb8:	20022fa0 	.word	0x20022fa0

0800bebc <LCD_SetClipRectMax>:
 800bebc:	b508      	push	{r3, lr}
 800bebe:	4b05      	ldr	r3, [pc, #20]	; (800bed4 <LCD_SetClipRectMax+0x18>)
 800bec0:	6819      	ldr	r1, [r3, #0]
 800bec2:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <LCD_SetClipRectMax+0x1c>)
 800bec4:	7c4a      	ldrb	r2, [r1, #17]
 800bec6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800beca:	68c3      	ldr	r3, [r0, #12]
 800becc:	3108      	adds	r1, #8
 800bece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed0:	4798      	blx	r3
 800bed2:	bd08      	pop	{r3, pc}
 800bed4:	2000002c 	.word	0x2000002c
 800bed8:	20022fcc 	.word	0x20022fcc

0800bedc <emWin_LCD_Init>:
 800bedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bede:	f7ff ffed 	bl	800bebc <LCD_SetClipRectMax>
 800bee2:	f7ff fd91 	bl	800ba08 <LCD_InitColors>
 800bee6:	4604      	mov	r4, r0
 800bee8:	2800      	cmp	r0, #0
 800beea:	d13d      	bne.n	800bf68 <emWin_LCD_Init+0x8c>
 800beec:	4605      	mov	r5, r0
 800beee:	4628      	mov	r0, r5
 800bef0:	f002 fa2c 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800bef4:	9001      	str	r0, [sp, #4]
 800bef6:	b148      	cbz	r0, 800bf0c <emWin_LCD_Init+0x30>
 800bef8:	68c3      	ldr	r3, [r0, #12]
 800befa:	210c      	movs	r1, #12
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	a801      	add	r0, sp, #4
 800bf00:	4798      	blx	r3
 800bf02:	4603      	mov	r3, r0
 800bf04:	b370      	cbz	r0, 800bf64 <emWin_LCD_Init+0x88>
 800bf06:	9801      	ldr	r0, [sp, #4]
 800bf08:	4798      	blx	r3
 800bf0a:	4304      	orrs	r4, r0
 800bf0c:	3501      	adds	r5, #1
 800bf0e:	2d02      	cmp	r5, #2
 800bf10:	d1ed      	bne.n	800beee <emWin_LCD_Init+0x12>
 800bf12:	bb4c      	cbnz	r4, 800bf68 <emWin_LCD_Init+0x8c>
 800bf14:	f7ff fdc6 	bl	800baa4 <LCD_InitLUT>
 800bf18:	2401      	movs	r4, #1
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f002 fa16 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800bf20:	9001      	str	r0, [sp, #4]
 800bf22:	b1d0      	cbz	r0, 800bf5a <emWin_LCD_Init+0x7e>
 800bf24:	4620      	mov	r0, r4
 800bf26:	f001 fa9f 	bl	800d468 <GUI_SelectLayer>
 800bf2a:	2004      	movs	r0, #4
 800bf2c:	f7ff fe0c 	bl	800bb48 <LCD_SetDrawMode>
 800bf30:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800bf34:	2000      	movs	r0, #0
 800bf36:	4601      	mov	r1, r0
 800bf38:	4613      	mov	r3, r2
 800bf3a:	f7ff fe87 	bl	800bc4c <LCD_FillRect>
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f7ff fe02 	bl	800bb48 <LCD_SetDrawMode>
 800bf44:	a802      	add	r0, sp, #8
 800bf46:	210e      	movs	r1, #14
 800bf48:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	4798      	blx	r3
 800bf52:	4603      	mov	r3, r0
 800bf54:	b108      	cbz	r0, 800bf5a <emWin_LCD_Init+0x7e>
 800bf56:	9801      	ldr	r0, [sp, #4]
 800bf58:	4798      	blx	r3
 800bf5a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800bf5e:	d2dc      	bcs.n	800bf1a <emWin_LCD_Init+0x3e>
 800bf60:	2000      	movs	r0, #0
 800bf62:	e002      	b.n	800bf6a <emWin_LCD_Init+0x8e>
 800bf64:	2001      	movs	r0, #1
 800bf66:	e000      	b.n	800bf6a <emWin_LCD_Init+0x8e>
 800bf68:	4620      	mov	r0, r4
 800bf6a:	b003      	add	sp, #12
 800bf6c:	bd30      	pop	{r4, r5, pc}
	...

0800bf70 <LCD_Color2Index>:
 800bf70:	b508      	push	{r3, lr}
 800bf72:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <LCD_Color2Index+0x18>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	7c5a      	ldrb	r2, [r3, #17]
 800bf78:	4b04      	ldr	r3, [pc, #16]	; (800bf8c <LCD_Color2Index+0x1c>)
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4798      	blx	r3
 800bf84:	bd08      	pop	{r3, pc}
 800bf86:	bf00      	nop
 800bf88:	2000002c 	.word	0x2000002c
 800bf8c:	20022fcc 	.word	0x20022fcc

0800bf90 <LCD_Index2Color>:
 800bf90:	b508      	push	{r3, lr}
 800bf92:	4b05      	ldr	r3, [pc, #20]	; (800bfa8 <LCD_Index2Color+0x18>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	7c5a      	ldrb	r2, [r3, #17]
 800bf98:	4b04      	ldr	r3, [pc, #16]	; (800bfac <LCD_Index2Color+0x1c>)
 800bf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	4798      	blx	r3
 800bfa4:	bd08      	pop	{r3, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000002c 	.word	0x2000002c
 800bfac:	20022fcc 	.word	0x20022fcc

0800bfb0 <LCD_SetColorIndex>:
 800bfb0:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <LCD_SetColorIndex+0x14>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	7c1a      	ldrb	r2, [r3, #16]
 800bfb6:	0752      	lsls	r2, r2, #29
 800bfb8:	bf4c      	ite	mi
 800bfba:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800bfbc:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800bfbe:	6018      	str	r0, [r3, #0]
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	2000002c 	.word	0x2000002c

0800bfc8 <_SetColor>:
 800bfc8:	b508      	push	{r3, lr}
 800bfca:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <_SetColor+0x1c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bfd0:	4281      	cmp	r1, r0
 800bfd2:	d006      	beq.n	800bfe2 <_SetColor+0x1a>
 800bfd4:	6318      	str	r0, [r3, #48]	; 0x30
 800bfd6:	f7ff ffcb 	bl	800bf70 <LCD_Color2Index>
 800bfda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bfde:	f7ff bfe7 	b.w	800bfb0 <LCD_SetColorIndex>
 800bfe2:	bd08      	pop	{r3, pc}
 800bfe4:	2000002c 	.word	0x2000002c

0800bfe8 <LCD_SetBkColorIndex>:
 800bfe8:	4b04      	ldr	r3, [pc, #16]	; (800bffc <LCD_SetBkColorIndex+0x14>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	7c1a      	ldrb	r2, [r3, #16]
 800bfee:	0752      	lsls	r2, r2, #29
 800bff0:	bf4c      	ite	mi
 800bff2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800bff4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800bff6:	6018      	str	r0, [r3, #0]
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	2000002c 	.word	0x2000002c

0800c000 <_SetBkColor>:
 800c000:	b508      	push	{r3, lr}
 800c002:	4b06      	ldr	r3, [pc, #24]	; (800c01c <_SetBkColor+0x1c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c008:	4281      	cmp	r1, r0
 800c00a:	d006      	beq.n	800c01a <_SetBkColor+0x1a>
 800c00c:	6358      	str	r0, [r3, #52]	; 0x34
 800c00e:	f7ff ffaf 	bl	800bf70 <LCD_Color2Index>
 800c012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c016:	f7ff bfe7 	b.w	800bfe8 <LCD_SetBkColorIndex>
 800c01a:	bd08      	pop	{r3, pc}
 800c01c:	2000002c 	.word	0x2000002c

0800c020 <LCD_SetBkColor>:
 800c020:	b508      	push	{r3, lr}
 800c022:	4b02      	ldr	r3, [pc, #8]	; (800c02c <LCD_SetBkColor+0xc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	4798      	blx	r3
 800c02a:	bd08      	pop	{r3, pc}
 800c02c:	20000014 	.word	0x20000014

0800c030 <LCD_SetColor>:
 800c030:	b508      	push	{r3, lr}
 800c032:	4b02      	ldr	r3, [pc, #8]	; (800c03c <LCD_SetColor+0xc>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4798      	blx	r3
 800c03a:	bd08      	pop	{r3, pc}
 800c03c:	20000014 	.word	0x20000014

0800c040 <GUI__memset>:
 800c040:	b570      	push	{r4, r5, r6, lr}
 800c042:	b12a      	cbz	r2, 800c050 <GUI__memset+0x10>
 800c044:	0783      	lsls	r3, r0, #30
 800c046:	d003      	beq.n	800c050 <GUI__memset+0x10>
 800c048:	f800 1b01 	strb.w	r1, [r0], #1
 800c04c:	3a01      	subs	r2, #1
 800c04e:	e7f8      	b.n	800c042 <GUI__memset+0x2>
 800c050:	0893      	lsrs	r3, r2, #2
 800c052:	d101      	bne.n	800c058 <GUI__memset+0x18>
 800c054:	4402      	add	r2, r0
 800c056:	e017      	b.n	800c088 <GUI__memset+0x48>
 800c058:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800c05c:	f002 0203 	and.w	r2, r2, #3
 800c060:	434c      	muls	r4, r1
 800c062:	2b03      	cmp	r3, #3
 800c064:	4605      	mov	r5, r0
 800c066:	dd06      	ble.n	800c076 <GUI__memset+0x36>
 800c068:	6004      	str	r4, [r0, #0]
 800c06a:	6044      	str	r4, [r0, #4]
 800c06c:	6084      	str	r4, [r0, #8]
 800c06e:	60c4      	str	r4, [r0, #12]
 800c070:	3b04      	subs	r3, #4
 800c072:	3010      	adds	r0, #16
 800c074:	e7f5      	b.n	800c062 <GUI__memset+0x22>
 800c076:	461e      	mov	r6, r3
 800c078:	b11b      	cbz	r3, 800c082 <GUI__memset+0x42>
 800c07a:	f845 4b04 	str.w	r4, [r5], #4
 800c07e:	3b01      	subs	r3, #1
 800c080:	e7fa      	b.n	800c078 <GUI__memset+0x38>
 800c082:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800c086:	e7e5      	b.n	800c054 <GUI__memset+0x14>
 800c088:	4290      	cmp	r0, r2
 800c08a:	d002      	beq.n	800c092 <GUI__memset+0x52>
 800c08c:	f800 1b01 	strb.w	r1, [r0], #1
 800c090:	e7fa      	b.n	800c088 <GUI__memset+0x48>
 800c092:	bd70      	pop	{r4, r5, r6, pc}

0800c094 <GUI__ManageCacheEx>:
 800c094:	2801      	cmp	r0, #1
 800c096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c098:	4604      	mov	r4, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	dc65      	bgt.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c09e:	4b34      	ldr	r3, [pc, #208]	; (800c170 <GUI__ManageCacheEx+0xdc>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <GUI__ManageCacheEx+0x12>
 800c0a4:	4798      	blx	r3
 800c0a6:	2d01      	cmp	r5, #1
 800c0a8:	d004      	beq.n	800c0b4 <GUI__ManageCacheEx+0x20>
 800c0aa:	2d02      	cmp	r5, #2
 800c0ac:	d021      	beq.n	800c0f2 <GUI__ManageCacheEx+0x5e>
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	d15b      	bne.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c0b2:	e035      	b.n	800c120 <GUI__ManageCacheEx+0x8c>
 800c0b4:	4e2f      	ldr	r6, [pc, #188]	; (800c174 <GUI__ManageCacheEx+0xe0>)
 800c0b6:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800c0ba:	b9b7      	cbnz	r7, 800c0ea <GUI__ManageCacheEx+0x56>
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f002 f945 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800c0c2:	9001      	str	r0, [sp, #4]
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d050      	beq.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c0c8:	68c3      	ldr	r3, [r0, #12]
 800c0ca:	210d      	movs	r1, #13
 800c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ce:	a801      	add	r0, sp, #4
 800c0d0:	4798      	blx	r3
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d048      	beq.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c0d8:	9801      	ldr	r0, [sp, #4]
 800c0da:	4629      	mov	r1, r5
 800c0dc:	4798      	blx	r3
 800c0de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800c0e8:	e018      	b.n	800c11c <GUI__ManageCacheEx+0x88>
 800c0ea:	3701      	adds	r7, #1
 800c0ec:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800c0f0:	e03b      	b.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f002 f92a 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800c0f8:	9001      	str	r0, [sp, #4]
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d035      	beq.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c0fe:	68c3      	ldr	r3, [r0, #12]
 800c100:	210d      	movs	r1, #13
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	a801      	add	r0, sp, #4
 800c106:	4798      	blx	r3
 800c108:	4604      	mov	r4, r0
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d02d      	beq.n	800c16a <GUI__ManageCacheEx+0xd6>
 800c10e:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <GUI__ManageCacheEx+0xe4>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	b103      	cbz	r3, 800c116 <GUI__ManageCacheEx+0x82>
 800c114:	4798      	blx	r3
 800c116:	9801      	ldr	r0, [sp, #4]
 800c118:	2102      	movs	r1, #2
 800c11a:	47a0      	blx	r4
 800c11c:	2000      	movs	r0, #0
 800c11e:	e025      	b.n	800c16c <GUI__ManageCacheEx+0xd8>
 800c120:	4d14      	ldr	r5, [pc, #80]	; (800c174 <GUI__ManageCacheEx+0xe0>)
 800c122:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d001      	beq.n	800c12e <GUI__ManageCacheEx+0x9a>
 800c12a:	2001      	movs	r0, #1
 800c12c:	e015      	b.n	800c15a <GUI__ManageCacheEx+0xc6>
 800c12e:	4620      	mov	r0, r4
 800c130:	f002 f90c 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800c134:	9001      	str	r0, [sp, #4]
 800c136:	2800      	cmp	r0, #0
 800c138:	d0f7      	beq.n	800c12a <GUI__ManageCacheEx+0x96>
 800c13a:	68c3      	ldr	r3, [r0, #12]
 800c13c:	210d      	movs	r1, #13
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	a801      	add	r0, sp, #4
 800c142:	4798      	blx	r3
 800c144:	4606      	mov	r6, r0
 800c146:	2800      	cmp	r0, #0
 800c148:	d0ef      	beq.n	800c12a <GUI__ManageCacheEx+0x96>
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <GUI__ManageCacheEx+0xe4>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	b103      	cbz	r3, 800c152 <GUI__ManageCacheEx+0xbe>
 800c150:	4798      	blx	r3
 800c152:	9801      	ldr	r0, [sp, #4]
 800c154:	2100      	movs	r1, #0
 800c156:	47b0      	blx	r6
 800c158:	2000      	movs	r0, #0
 800c15a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bf18      	it	ne
 800c162:	3b01      	subne	r3, #1
 800c164:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800c168:	e000      	b.n	800c16c <GUI__ManageCacheEx+0xd8>
 800c16a:	2001      	movs	r0, #1
 800c16c:	b003      	add	sp, #12
 800c16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c170:	20022a48 	.word	0x20022a48
 800c174:	20022a40 	.word	0x20022a40
 800c178:	20022a3c 	.word	0x20022a3c

0800c17c <GUI__ManageCache>:
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <GUI__ManageCache+0xc>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4601      	mov	r1, r0
 800c182:	7c58      	ldrb	r0, [r3, #17]
 800c184:	f7ff bf86 	b.w	800c094 <GUI__ManageCacheEx>
 800c188:	2000002c 	.word	0x2000002c

0800c18c <GUI__IntersectRects>:
 800c18c:	b570      	push	{r4, r5, r6, lr}
 800c18e:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c192:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c196:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c19a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800c19e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	bfb8      	it	lt
 800c1a6:	461c      	movlt	r4, r3
 800c1a8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c1ac:	429d      	cmp	r5, r3
 800c1ae:	bfa8      	it	ge
 800c1b0:	462b      	movge	r3, r5
 800c1b2:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800c1b6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c1ba:	42ae      	cmp	r6, r5
 800c1bc:	bfb8      	it	lt
 800c1be:	4635      	movlt	r5, r6
 800c1c0:	b2a4      	uxth	r4, r4
 800c1c2:	b2ad      	uxth	r5, r5
 800c1c4:	4291      	cmp	r1, r2
 800c1c6:	bfb8      	it	lt
 800c1c8:	460a      	movlt	r2, r1
 800c1ca:	8004      	strh	r4, [r0, #0]
 800c1cc:	8085      	strh	r5, [r0, #4]
 800c1ce:	b224      	sxth	r4, r4
 800c1d0:	b22d      	sxth	r5, r5
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	b292      	uxth	r2, r2
 800c1d6:	42a5      	cmp	r5, r4
 800c1d8:	8043      	strh	r3, [r0, #2]
 800c1da:	80c2      	strh	r2, [r0, #6]
 800c1dc:	db06      	blt.n	800c1ec <GUI__IntersectRects+0x60>
 800c1de:	b210      	sxth	r0, r2
 800c1e0:	b21b      	sxth	r3, r3
 800c1e2:	4298      	cmp	r0, r3
 800c1e4:	bfb4      	ite	lt
 800c1e6:	2000      	movlt	r0, #0
 800c1e8:	2001      	movge	r0, #1
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}

0800c1f0 <GUI__IntersectRect>:
 800c1f0:	880b      	ldrh	r3, [r1, #0]
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c1f8:	b21a      	sxth	r2, r3
 800c1fa:	4294      	cmp	r4, r2
 800c1fc:	bfb8      	it	lt
 800c1fe:	8003      	strhlt	r3, [r0, #0]
 800c200:	884b      	ldrh	r3, [r1, #2]
 800c202:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c206:	b21a      	sxth	r2, r3
 800c208:	4294      	cmp	r4, r2
 800c20a:	bfb8      	it	lt
 800c20c:	8043      	strhlt	r3, [r0, #2]
 800c20e:	888b      	ldrh	r3, [r1, #4]
 800c210:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c214:	b21a      	sxth	r2, r3
 800c216:	4294      	cmp	r4, r2
 800c218:	bfc8      	it	gt
 800c21a:	8083      	strhgt	r3, [r0, #4]
 800c21c:	88cb      	ldrh	r3, [r1, #6]
 800c21e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c222:	b21a      	sxth	r2, r3
 800c224:	4291      	cmp	r1, r2
 800c226:	bfc8      	it	gt
 800c228:	80c3      	strhgt	r3, [r0, #6]
 800c22a:	bd10      	pop	{r4, pc}

0800c22c <GUI__MixColors>:
 800c22c:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800c230:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c236:	d027      	beq.n	800c288 <GUI__MixColors+0x5c>
 800c238:	43d3      	mvns	r3, r2
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	b2cd      	uxtb	r5, r1
 800c23e:	b2c6      	uxtb	r6, r0
 800c240:	435d      	muls	r5, r3
 800c242:	fb02 5506 	mla	r5, r2, r6, r5
 800c246:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800c24a:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800c24e:	435e      	muls	r6, r3
 800c250:	fb02 6604 	mla	r6, r2, r4, r6
 800c254:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800c258:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800c25c:	435c      	muls	r4, r3
 800c25e:	0e09      	lsrs	r1, r1, #24
 800c260:	0e00      	lsrs	r0, r0, #24
 800c262:	fb02 4407 	mla	r4, r2, r7, r4
 800c266:	434b      	muls	r3, r1
 800c268:	0a36      	lsrs	r6, r6, #8
 800c26a:	fb02 3200 	mla	r2, r2, r0, r3
 800c26e:	0a24      	lsrs	r4, r4, #8
 800c270:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800c274:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800c278:	4318      	orrs	r0, r3
 800c27a:	0412      	lsls	r2, r2, #16
 800c27c:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800c280:	4318      	orrs	r0, r3
 800c282:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c286:	4310      	orrs	r0, r2
 800c288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c28a <GUI__MixColorsBulk>:
 800c28a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28e:	b085      	sub	sp, #20
 800c290:	4604      	mov	r4, r0
 800c292:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800c296:	9303      	str	r3, [sp, #12]
 800c298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	9302      	str	r3, [sp, #8]
 800c29e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2a0:	460d      	mov	r5, r1
 800c2a2:	4616      	mov	r6, r2
 800c2a4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800c2a8:	f04f 0900 	mov.w	r9, #0
 800c2ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2ae:	4599      	cmp	r9, r3
 800c2b0:	d024      	beq.n	800c2fc <GUI__MixColorsBulk+0x72>
 800c2b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c2b6:	4633      	mov	r3, r6
 800c2b8:	46ab      	mov	fp, r5
 800c2ba:	4627      	mov	r7, r4
 800c2bc:	f857 0b04 	ldr.w	r0, [r7], #4
 800c2c0:	9903      	ldr	r1, [sp, #12]
 800c2c2:	0e02      	lsrs	r2, r0, #24
 800c2c4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c2c8:	434a      	muls	r2, r1
 800c2ca:	21ff      	movs	r1, #255	; 0xff
 800c2cc:	fbb2 f2f1 	udiv	r2, r2, r1
 800c2d0:	b2d2      	uxtb	r2, r2
 800c2d2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800c2d6:	9301      	str	r3, [sp, #4]
 800c2d8:	f7ff ffa8 	bl	800c22c <GUI__MixColors>
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c2e2:	f1b8 0801 	subs.w	r8, r8, #1
 800c2e6:	f843 0b04 	str.w	r0, [r3], #4
 800c2ea:	d1e7      	bne.n	800c2bc <GUI__MixColorsBulk+0x32>
 800c2ec:	9b02      	ldr	r3, [sp, #8]
 800c2ee:	4455      	add	r5, sl
 800c2f0:	4454      	add	r4, sl
 800c2f2:	4456      	add	r6, sl
 800c2f4:	441d      	add	r5, r3
 800c2f6:	f109 0901 	add.w	r9, r9, #1
 800c2fa:	e7d7      	b.n	800c2ac <GUI__MixColorsBulk+0x22>
 800c2fc:	b005      	add	sp, #20
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c304 <_OnExit>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	4c0a      	ldr	r4, [pc, #40]	; (800c330 <_OnExit+0x2c>)
 800c308:	4d0a      	ldr	r5, [pc, #40]	; (800c334 <_OnExit+0x30>)
 800c30a:	6820      	ldr	r0, [r4, #0]
 800c30c:	4e0a      	ldr	r6, [pc, #40]	; (800c338 <_OnExit+0x34>)
 800c30e:	f002 fce7 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c312:	6828      	ldr	r0, [r5, #0]
 800c314:	f002 fce4 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c318:	6830      	ldr	r0, [r6, #0]
 800c31a:	f002 fce1 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c31e:	4a07      	ldr	r2, [pc, #28]	; (800c33c <_OnExit+0x38>)
 800c320:	2300      	movs	r3, #0
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	4a06      	ldr	r2, [pc, #24]	; (800c340 <_OnExit+0x3c>)
 800c326:	6033      	str	r3, [r6, #0]
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	20022a50 	.word	0x20022a50
 800c334:	20022a4c 	.word	0x20022a4c
 800c338:	20022a54 	.word	0x20022a54
 800c33c:	20022a58 	.word	0x20022a58
 800c340:	20022a68 	.word	0x20022a68

0800c344 <GUI__GetAlphaBuffer>:
 800c344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c348:	461c      	mov	r4, r3
 800c34a:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <GUI__GetAlphaBuffer+0xa8>)
 800c34c:	4617      	mov	r7, r2
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	4606      	mov	r6, r0
 800c352:	4688      	mov	r8, r1
 800c354:	b932      	cbnz	r2, 800c364 <GUI__GetAlphaBuffer+0x20>
 800c356:	2201      	movs	r2, #1
 800c358:	4825      	ldr	r0, [pc, #148]	; (800c3f0 <GUI__GetAlphaBuffer+0xac>)
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	4b25      	ldr	r3, [pc, #148]	; (800c3f4 <GUI__GetAlphaBuffer+0xb0>)
 800c35e:	6003      	str	r3, [r0, #0]
 800c360:	f002 f934 	bl	800e5cc <GUI__RegisterExit>
 800c364:	4d24      	ldr	r5, [pc, #144]	; (800c3f8 <GUI__GetAlphaBuffer+0xb4>)
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b933      	cbnz	r3, 800c378 <GUI__GetAlphaBuffer+0x34>
 800c36a:	4b24      	ldr	r3, [pc, #144]	; (800c3fc <GUI__GetAlphaBuffer+0xb8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	602b      	str	r3, [r5, #0]
 800c370:	b913      	cbnz	r3, 800c378 <GUI__GetAlphaBuffer+0x34>
 800c372:	f7ff facf 	bl	800b914 <LCD_GetVXSizeMax>
 800c376:	6028      	str	r0, [r5, #0]
 800c378:	b10c      	cbz	r4, 800c37e <GUI__GetAlphaBuffer+0x3a>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	b196      	cbz	r6, 800c3a6 <GUI__GetAlphaBuffer+0x62>
 800c380:	4b1f      	ldr	r3, [pc, #124]	; (800c400 <GUI__GetAlphaBuffer+0xbc>)
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	4699      	mov	r9, r3
 800c386:	2400      	movs	r4, #0
 800c388:	b94a      	cbnz	r2, 800c39e <GUI__GetAlphaBuffer+0x5a>
 800c38a:	6828      	ldr	r0, [r5, #0]
 800c38c:	0080      	lsls	r0, r0, #2
 800c38e:	f002 fe07 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800c392:	f1d0 0401 	rsbs	r4, r0, #1
 800c396:	f8c9 0000 	str.w	r0, [r9]
 800c39a:	bf38      	it	cc
 800c39c:	2400      	movcc	r4, #0
 800c39e:	f8d9 3000 	ldr.w	r3, [r9]
 800c3a2:	6033      	str	r3, [r6, #0]
 800c3a4:	e000      	b.n	800c3a8 <GUI__GetAlphaBuffer+0x64>
 800c3a6:	4634      	mov	r4, r6
 800c3a8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ac:	d00d      	beq.n	800c3ca <GUI__GetAlphaBuffer+0x86>
 800c3ae:	4e15      	ldr	r6, [pc, #84]	; (800c404 <GUI__GetAlphaBuffer+0xc0>)
 800c3b0:	6833      	ldr	r3, [r6, #0]
 800c3b2:	b93b      	cbnz	r3, 800c3c4 <GUI__GetAlphaBuffer+0x80>
 800c3b4:	6828      	ldr	r0, [r5, #0]
 800c3b6:	0080      	lsls	r0, r0, #2
 800c3b8:	f002 fdf2 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	6030      	str	r0, [r6, #0]
 800c3c0:	bf08      	it	eq
 800c3c2:	2401      	moveq	r4, #1
 800c3c4:	6833      	ldr	r3, [r6, #0]
 800c3c6:	f8c8 3000 	str.w	r3, [r8]
 800c3ca:	b167      	cbz	r7, 800c3e6 <GUI__GetAlphaBuffer+0xa2>
 800c3cc:	4e0e      	ldr	r6, [pc, #56]	; (800c408 <GUI__GetAlphaBuffer+0xc4>)
 800c3ce:	6833      	ldr	r3, [r6, #0]
 800c3d0:	b93b      	cbnz	r3, 800c3e2 <GUI__GetAlphaBuffer+0x9e>
 800c3d2:	6828      	ldr	r0, [r5, #0]
 800c3d4:	0080      	lsls	r0, r0, #2
 800c3d6:	f002 fde3 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	6030      	str	r0, [r6, #0]
 800c3de:	bf08      	it	eq
 800c3e0:	2401      	moveq	r4, #1
 800c3e2:	6833      	ldr	r3, [r6, #0]
 800c3e4:	603b      	str	r3, [r7, #0]
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ec:	20022a68 	.word	0x20022a68
 800c3f0:	20022a60 	.word	0x20022a60
 800c3f4:	0800c305 	.word	0x0800c305
 800c3f8:	20022a58 	.word	0x20022a58
 800c3fc:	20022fd4 	.word	0x20022fd4
 800c400:	20022a50 	.word	0x20022a50
 800c404:	20022a4c 	.word	0x20022a4c
 800c408:	20022a54 	.word	0x20022a54

0800c40c <GUI__DoAlphaBlending>:
 800c40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c410:	b093      	sub	sp, #76	; 0x4c
 800c412:	2400      	movs	r4, #0
 800c414:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c416:	900b      	str	r0, [sp, #44]	; 0x2c
 800c418:	910c      	str	r1, [sp, #48]	; 0x30
 800c41a:	4690      	mov	r8, r2
 800c41c:	461f      	mov	r7, r3
 800c41e:	6034      	str	r4, [r6, #0]
 800c420:	a80f      	add	r0, sp, #60	; 0x3c
 800c422:	a910      	add	r1, sp, #64	; 0x40
 800c424:	4622      	mov	r2, r4
 800c426:	ab11      	add	r3, sp, #68	; 0x44
 800c428:	f7ff ff8c 	bl	800c344 <GUI__GetAlphaBuffer>
 800c42c:	4605      	mov	r5, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	f040 80c3 	bne.w	800c5ba <GUI__DoAlphaBlending+0x1ae>
 800c434:	4c63      	ldr	r4, [pc, #396]	; (800c5c4 <GUI__DoAlphaBlending+0x1b8>)
 800c436:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	7c58      	ldrb	r0, [r3, #17]
 800c43c:	4b62      	ldr	r3, [pc, #392]	; (800c5c8 <GUI__DoAlphaBlending+0x1bc>)
 800c43e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	4297      	cmp	r7, r2
 800c446:	bfa8      	it	ge
 800c448:	4617      	movge	r7, r2
 800c44a:	691a      	ldr	r2, [r3, #16]
 800c44c:	920d      	str	r2, [sp, #52]	; 0x34
 800c44e:	970a      	str	r7, [sp, #40]	; 0x28
 800c450:	f7ff fa28 	bl	800b8a4 <GUI_GetBitsPerPixelEx>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	9008      	str	r0, [sp, #32]
 800c458:	7c58      	ldrb	r0, [r3, #17]
 800c45a:	f7ff fa4d 	bl	800b8f8 <GUI_GetpfIndex2ColorEx>
 800c45e:	4b5b      	ldr	r3, [pc, #364]	; (800c5cc <GUI__DoAlphaBlending+0x1c0>)
 800c460:	9004      	str	r0, [sp, #16]
 800c462:	4298      	cmp	r0, r3
 800c464:	d005      	beq.n	800c472 <GUI__DoAlphaBlending+0x66>
 800c466:	4b5a      	ldr	r3, [pc, #360]	; (800c5d0 <GUI__DoAlphaBlending+0x1c4>)
 800c468:	1ac3      	subs	r3, r0, r3
 800c46a:	bf18      	it	ne
 800c46c:	2301      	movne	r3, #1
 800c46e:	9306      	str	r3, [sp, #24]
 800c470:	e000      	b.n	800c474 <GUI__DoAlphaBlending+0x68>
 800c472:	9506      	str	r5, [sp, #24]
 800c474:	2500      	movs	r5, #0
 800c476:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c478:	46ab      	mov	fp, r5
 800c47a:	4643      	mov	r3, r8
 800c47c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c47e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c482:	9305      	str	r3, [sp, #20]
 800c484:	4790      	blx	r2
 800c486:	0e03      	lsrs	r3, r0, #24
 800c488:	4681      	mov	r9, r0
 800c48a:	9309      	str	r3, [sp, #36]	; 0x24
 800c48c:	f000 8085 	beq.w	800c59a <GUI__DoAlphaBlending+0x18e>
 800c490:	f1bb 0f00 	cmp.w	fp, #0
 800c494:	d13f      	bne.n	800c516 <GUI__DoAlphaBlending+0x10a>
 800c496:	4b4b      	ldr	r3, [pc, #300]	; (800c5c4 <GUI__DoAlphaBlending+0x1b8>)
 800c498:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c49e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4a2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c4a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4a8:	442f      	add	r7, r5
 800c4aa:	42bb      	cmp	r3, r7
 800c4ac:	bfc8      	it	gt
 800c4ae:	ebc7 0b03 	rsbgt	fp, r7, r3
 800c4b2:	eb0b 0a05 	add.w	sl, fp, r5
 800c4b6:	bfc8      	it	gt
 800c4b8:	461f      	movgt	r7, r3
 800c4ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4bc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c4c0:	4453      	add	r3, sl
 800c4c2:	4494      	add	ip, r2
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	9b07      	ldr	r3, [sp, #28]
 800c4c8:	9301      	str	r3, [sp, #4]
 800c4ca:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	f8cd c00c 	str.w	ip, [sp, #12]
 800c4d6:	f004 f803 	bl	80104e0 <GUI_ReadRectEx>
 800c4da:	9a08      	ldr	r2, [sp, #32]
 800c4dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c4de:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c4e2:	2a17      	cmp	r2, #23
 800c4e4:	dc06      	bgt.n	800c4f4 <GUI__DoAlphaBlending+0xe8>
 800c4e6:	4450      	add	r0, sl
 800c4e8:	ebcb 0104 	rsb	r1, fp, r4
 800c4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4ee:	f004 f8b7 	bl	8010660 <GUI__ExpandPixelIndicesEx>
 800c4f2:	e001      	b.n	800c4f8 <GUI__DoAlphaBlending+0xec>
 800c4f4:	9b06      	ldr	r3, [sp, #24]
 800c4f6:	b913      	cbnz	r3, 800c4fe <GUI__DoAlphaBlending+0xf2>
 800c4f8:	f04f 0b01 	mov.w	fp, #1
 800c4fc:	e00b      	b.n	800c516 <GUI__DoAlphaBlending+0x10a>
 800c4fe:	ebc7 070c 	rsb	r7, r7, ip
 800c502:	4482      	add	sl, r0
 800c504:	f8da 0000 	ldr.w	r0, [sl]
 800c508:	9a04      	ldr	r2, [sp, #16]
 800c50a:	4790      	blx	r2
 800c50c:	3f01      	subs	r7, #1
 800c50e:	f84a 0b04 	str.w	r0, [sl], #4
 800c512:	d1f7      	bne.n	800c504 <GUI__DoAlphaBlending+0xf8>
 800c514:	e7f0      	b.n	800c4f8 <GUI__DoAlphaBlending+0xec>
 800c516:	4b2f      	ldr	r3, [pc, #188]	; (800c5d4 <GUI__DoAlphaBlending+0x1c8>)
 800c518:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c51a:	f8d3 c000 	ldr.w	ip, [r3]
 800c51e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c520:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800c524:	f1bc 0f00 	cmp.w	ip, #0
 800c528:	d024      	beq.n	800c574 <GUI__DoAlphaBlending+0x168>
 800c52a:	eb07 020a 	add.w	r2, r7, sl
 800c52e:	4451      	add	r1, sl
 800c530:	9210      	str	r2, [sp, #64]	; 0x40
 800c532:	4623      	mov	r3, r4
 800c534:	910f      	str	r1, [sp, #60]	; 0x3c
 800c536:	4640      	mov	r0, r8
 800c538:	47e0      	blx	ip
 800c53a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c53c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c53e:	2300      	movs	r3, #0
 800c540:	f858 1003 	ldr.w	r1, [r8, r3]
 800c544:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800c548:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c54c:	58e8      	ldr	r0, [r5, r3]
 800c54e:	d101      	bne.n	800c554 <GUI__DoAlphaBlending+0x148>
 800c550:	50d0      	str	r0, [r2, r3]
 800c552:	e005      	b.n	800c560 <GUI__DoAlphaBlending+0x154>
 800c554:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800c558:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c55c:	bf08      	it	eq
 800c55e:	50d1      	streq	r1, [r2, r3]
 800c560:	3c01      	subs	r4, #1
 800c562:	f103 0304 	add.w	r3, r3, #4
 800c566:	d1eb      	bne.n	800c540 <GUI__DoAlphaBlending+0x134>
 800c568:	6833      	ldr	r3, [r6, #0]
 800c56a:	9710      	str	r7, [sp, #64]	; 0x40
 800c56c:	f043 0301 	orr.w	r3, r3, #1
 800c570:	6033      	str	r3, [r6, #0]
 800c572:	e020      	b.n	800c5b6 <GUI__DoAlphaBlending+0x1aa>
 800c574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c576:	2bff      	cmp	r3, #255	; 0xff
 800c578:	d104      	bne.n	800c584 <GUI__DoAlphaBlending+0x178>
 800c57a:	f851 300a 	ldr.w	r3, [r1, sl]
 800c57e:	f847 300a 	str.w	r3, [r7, sl]
 800c582:	e011      	b.n	800c5a8 <GUI__DoAlphaBlending+0x19c>
 800c584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c586:	f851 100a 	ldr.w	r1, [r1, sl]
 800c58a:	43da      	mvns	r2, r3
 800c58c:	4648      	mov	r0, r9
 800c58e:	b2d2      	uxtb	r2, r2
 800c590:	f7ff fe4c 	bl	800c22c <GUI__MixColors>
 800c594:	f847 000a 	str.w	r0, [r7, sl]
 800c598:	e002      	b.n	800c5a0 <GUI__DoAlphaBlending+0x194>
 800c59a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c59c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c5a0:	6833      	ldr	r3, [r6, #0]
 800c5a2:	f043 0301 	orr.w	r3, r3, #1
 800c5a6:	6033      	str	r3, [r6, #0]
 800c5a8:	3c01      	subs	r4, #1
 800c5aa:	f105 0501 	add.w	r5, r5, #1
 800c5ae:	d002      	beq.n	800c5b6 <GUI__DoAlphaBlending+0x1aa>
 800c5b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c5b4:	e761      	b.n	800c47a <GUI__DoAlphaBlending+0x6e>
 800c5b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5b8:	e000      	b.n	800c5bc <GUI__DoAlphaBlending+0x1b0>
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	b013      	add	sp, #76	; 0x4c
 800c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2000002c 	.word	0x2000002c
 800c5c8:	20022fcc 	.word	0x20022fcc
 800c5cc:	0800f36b 	.word	0x0800f36b
 800c5d0:	0800f369 	.word	0x0800f369
 800c5d4:	20022a5c 	.word	0x20022a5c

0800c5d8 <GUI__AllocAlphaBuffer>:
 800c5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5da:	b108      	cbz	r0, 800c5e0 <GUI__AllocAlphaBuffer+0x8>
 800c5dc:	aa03      	add	r2, sp, #12
 800c5de:	e000      	b.n	800c5e2 <GUI__AllocAlphaBuffer+0xa>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	a801      	add	r0, sp, #4
 800c5e4:	a902      	add	r1, sp, #8
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f7ff feac 	bl	800c344 <GUI__GetAlphaBuffer>
 800c5ec:	b005      	add	sp, #20
 800c5ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c5f4 <GUI_SetFuncAlphaBlending>:
 800c5f4:	4b01      	ldr	r3, [pc, #4]	; (800c5fc <GUI_SetFuncAlphaBlending+0x8>)
 800c5f6:	6018      	str	r0, [r3, #0]
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	20022a5c 	.word	0x20022a5c

0800c600 <GUI_SetFuncMixColors>:
 800c600:	4b01      	ldr	r3, [pc, #4]	; (800c608 <GUI_SetFuncMixColors+0x8>)
 800c602:	6018      	str	r0, [r3, #0]
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	20000018 	.word	0x20000018

0800c60c <GUI_SetFuncMixColorsBulk>:
 800c60c:	4b01      	ldr	r3, [pc, #4]	; (800c614 <GUI_SetFuncMixColorsBulk+0x8>)
 800c60e:	6018      	str	r0, [r3, #0]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	2000001c 	.word	0x2000001c

0800c618 <GUI_SignalEvent>:
 800c618:	b508      	push	{r3, lr}
 800c61a:	4b02      	ldr	r3, [pc, #8]	; (800c624 <GUI_SignalEvent+0xc>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	b103      	cbz	r3, 800c622 <GUI_SignalEvent+0xa>
 800c620:	4798      	blx	r3
 800c622:	bd08      	pop	{r3, pc}
 800c624:	20022a6c 	.word	0x20022a6c

0800c628 <GUI_TOUCH_StoreStateEx>:
 800c628:	b530      	push	{r4, r5, lr}
 800c62a:	4d0f      	ldr	r5, [pc, #60]	; (800c668 <GUI_TOUCH_StoreStateEx+0x40>)
 800c62c:	b085      	sub	sp, #20
 800c62e:	4629      	mov	r1, r5
 800c630:	220c      	movs	r2, #12
 800c632:	4604      	mov	r4, r0
 800c634:	f005 f8ee 	bl	8011814 <memcmp>
 800c638:	b1a0      	cbz	r0, 800c664 <GUI_TOUCH_StoreStateEx+0x3c>
 800c63a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c63e:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <GUI_TOUCH_StoreStateEx+0x44>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c646:	b153      	cbz	r3, 800c65e <GUI_TOUCH_StoreStateEx+0x36>
 800c648:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c64c:	ad01      	add	r5, sp, #4
 800c64e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c652:	4628      	mov	r0, r5
 800c654:	a902      	add	r1, sp, #8
 800c656:	4798      	blx	r3
 800c658:	b920      	cbnz	r0, 800c664 <GUI_TOUCH_StoreStateEx+0x3c>
 800c65a:	4628      	mov	r0, r5
 800c65c:	e000      	b.n	800c660 <GUI_TOUCH_StoreStateEx+0x38>
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 ff6a 	bl	800d538 <GUI_PID_StoreState>
 800c664:	b005      	add	sp, #20
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	20022a70 	.word	0x20022a70
 800c66c:	20022a7c 	.word	0x20022a7c

0800c670 <GUI_SetTextMode>:
 800c670:	4b03      	ldr	r3, [pc, #12]	; (800c680 <GUI_SetTextMode+0x10>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800c678:	8558      	strh	r0, [r3, #42]	; 0x2a
 800c67a:	4610      	mov	r0, r2
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	2000002c 	.word	0x2000002c

0800c684 <GUI_SetFont>:
 800c684:	4b03      	ldr	r3, [pc, #12]	; (800c694 <GUI_SetFont+0x10>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	69d9      	ldr	r1, [r3, #28]
 800c68a:	b100      	cbz	r0, 800c68e <GUI_SetFont+0xa>
 800c68c:	61d8      	str	r0, [r3, #28]
 800c68e:	4608      	mov	r0, r1
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	2000002c 	.word	0x2000002c

0800c698 <GUI_SetDrawMode>:
 800c698:	f7ff ba56 	b.w	800bb48 <LCD_SetDrawMode>

0800c69c <GUI_SetBkColor>:
 800c69c:	f7ff bcc0 	b.w	800c020 <LCD_SetBkColor>

0800c6a0 <GUI_SetColor>:
 800c6a0:	f7ff bcc6 	b.w	800c030 <LCD_SetColor>

0800c6a4 <_Color2Index>:
 800c6a4:	b508      	push	{r3, lr}
 800c6a6:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <_Color2Index+0x18>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	7c5a      	ldrb	r2, [r3, #17]
 800c6ac:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <_Color2Index+0x1c>)
 800c6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4798      	blx	r3
 800c6ba:	bd08      	pop	{r3, pc}
 800c6bc:	2000002c 	.word	0x2000002c
 800c6c0:	20022a94 	.word	0x20022a94

0800c6c4 <_Index2Color>:
 800c6c4:	b508      	push	{r3, lr}
 800c6c6:	4b05      	ldr	r3, [pc, #20]	; (800c6dc <_Index2Color+0x18>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	7c5a      	ldrb	r2, [r3, #17]
 800c6cc:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <_Index2Color+0x1c>)
 800c6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	4798      	blx	r3
 800c6da:	bd08      	pop	{r3, pc}
 800c6dc:	2000002c 	.word	0x2000002c
 800c6e0:	20022a94 	.word	0x20022a94

0800c6e4 <_GetIndexMask>:
 800c6e4:	b508      	push	{r3, lr}
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <_GetIndexMask+0x18>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	7c5a      	ldrb	r2, [r3, #17]
 800c6ec:	4b04      	ldr	r3, [pc, #16]	; (800c700 <_GetIndexMask+0x1c>)
 800c6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	4798      	blx	r3
 800c6fa:	bd08      	pop	{r3, pc}
 800c6fc:	2000002c 	.word	0x2000002c
 800c700:	20022a94 	.word	0x20022a94

0800c704 <_GetPixelIndex>:
 800c704:	b508      	push	{r3, lr}
 800c706:	6800      	ldr	r0, [r0, #0]
 800c708:	68c3      	ldr	r3, [r0, #12]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	4798      	blx	r3
 800c70e:	bd08      	pop	{r3, pc}

0800c710 <_GetDevData>:
 800c710:	2000      	movs	r0, #0
 800c712:	4770      	bx	lr

0800c714 <_SetOrg>:
 800c714:	b508      	push	{r3, lr}
 800c716:	6800      	ldr	r0, [r0, #0]
 800c718:	68c3      	ldr	r3, [r0, #12]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	4798      	blx	r3
 800c71e:	bd08      	pop	{r3, pc}

0800c720 <_GetDevFunc>:
 800c720:	b508      	push	{r3, lr}
 800c722:	6803      	ldr	r3, [r0, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6003      	str	r3, [r0, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	4798      	blx	r3
 800c72e:	bd08      	pop	{r3, pc}

0800c730 <_GetDevProp>:
 800c730:	b508      	push	{r3, lr}
 800c732:	6800      	ldr	r0, [r0, #0]
 800c734:	68c3      	ldr	r3, [r0, #12]
 800c736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c738:	4798      	blx	r3
 800c73a:	bd08      	pop	{r3, pc}

0800c73c <_GetRect>:
 800c73c:	b508      	push	{r3, lr}
 800c73e:	6800      	ldr	r0, [r0, #0]
 800c740:	68c3      	ldr	r3, [r0, #12]
 800c742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c744:	4798      	blx	r3
 800c746:	bd08      	pop	{r3, pc}

0800c748 <GUI_SetAlpha>:
 800c748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	4a3c      	ldr	r2, [pc, #240]	; (800c840 <GUI_SetAlpha+0xf8>)
 800c74e:	493d      	ldr	r1, [pc, #244]	; (800c844 <GUI_SetAlpha+0xfc>)
 800c750:	6813      	ldr	r3, [r2, #0]
 800c752:	4d3d      	ldr	r5, [pc, #244]	; (800c848 <GUI_SetAlpha+0x100>)
 800c754:	7c5b      	ldrb	r3, [r3, #17]
 800c756:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c75a:	698e      	ldr	r6, [r1, #24]
 800c75c:	5da9      	ldrb	r1, [r5, r6]
 800c75e:	9101      	str	r1, [sp, #4]
 800c760:	4604      	mov	r4, r0
 800c762:	46a8      	mov	r8, r5
 800c764:	b970      	cbnz	r0, 800c784 <GUI_SetAlpha+0x3c>
 800c766:	4618      	mov	r0, r3
 800c768:	2105      	movs	r1, #5
 800c76a:	f001 fddd 	bl	800e328 <GUI_DEVICE__GetpDevice>
 800c76e:	4607      	mov	r7, r0
 800c770:	2800      	cmp	r0, #0
 800c772:	d061      	beq.n	800c838 <GUI_SetAlpha+0xf0>
 800c774:	4620      	mov	r0, r4
 800c776:	f7fd fc53 	bl	800a020 <GUI_MEMDEV__SetAlphaCallback>
 800c77a:	4638      	mov	r0, r7
 800c77c:	f001 fe1e 	bl	800e3bc <GUI_DEVICE_Unlink>
 800c780:	55ac      	strb	r4, [r5, r6]
 800c782:	e059      	b.n	800c838 <GUI_SetAlpha+0xf0>
 800c784:	4d31      	ldr	r5, [pc, #196]	; (800c84c <GUI_SetAlpha+0x104>)
 800c786:	682b      	ldr	r3, [r5, #0]
 800c788:	46aa      	mov	sl, r5
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d13f      	bne.n	800c80e <GUI_SetAlpha+0xc6>
 800c78e:	4830      	ldr	r0, [pc, #192]	; (800c850 <GUI_SetAlpha+0x108>)
 800c790:	4b30      	ldr	r3, [pc, #192]	; (800c854 <GUI_SetAlpha+0x10c>)
 800c792:	6003      	str	r3, [r0, #0]
 800c794:	f001 ff1a 	bl	800e5cc <GUI__RegisterExit>
 800c798:	f7ff f8bc 	bl	800b914 <LCD_GetVXSizeMax>
 800c79c:	ea4f 0980 	mov.w	r9, r0, lsl #2
 800c7a0:	4648      	mov	r0, r9
 800c7a2:	f002 fbfd 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800c7a6:	6028      	str	r0, [r5, #0]
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d045      	beq.n	800c838 <GUI_SetAlpha+0xf0>
 800c7ac:	4f2a      	ldr	r7, [pc, #168]	; (800c858 <GUI_SetAlpha+0x110>)
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	46bb      	mov	fp, r7
 800c7b2:	bb62      	cbnz	r2, 800c80e <GUI_SetAlpha+0xc6>
 800c7b4:	4648      	mov	r0, r9
 800c7b6:	9200      	str	r2, [sp, #0]
 800c7b8:	f002 fbf2 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800c7bc:	9a00      	ldr	r2, [sp, #0]
 800c7be:	6038      	str	r0, [r7, #0]
 800c7c0:	b918      	cbnz	r0, 800c7ca <GUI_SetAlpha+0x82>
 800c7c2:	6828      	ldr	r0, [r5, #0]
 800c7c4:	f002 fa8c 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c7c8:	e036      	b.n	800c838 <GUI_SetAlpha+0xf0>
 800c7ca:	4f24      	ldr	r7, [pc, #144]	; (800c85c <GUI_SetAlpha+0x114>)
 800c7cc:	4615      	mov	r5, r2
 800c7ce:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800c7d2:	b9ca      	cbnz	r2, 800c808 <GUI_SetAlpha+0xc0>
 800c7d4:	4822      	ldr	r0, [pc, #136]	; (800c860 <GUI_SetAlpha+0x118>)
 800c7d6:	4923      	ldr	r1, [pc, #140]	; (800c864 <GUI_SetAlpha+0x11c>)
 800c7d8:	462b      	mov	r3, r5
 800c7da:	f001 fdc9 	bl	800e370 <GUI_DEVICE_Create>
 800c7de:	6038      	str	r0, [r7, #0]
 800c7e0:	b990      	cbnz	r0, 800c808 <GUI_SetAlpha+0xc0>
 800c7e2:	f8da 0000 	ldr.w	r0, [sl]
 800c7e6:	f002 fa7b 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c7ea:	f8db 0000 	ldr.w	r0, [fp]
 800c7ee:	f002 fa77 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <GUI_SetAlpha+0x120>)
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	461c      	mov	r4, r3
 800c7f8:	b108      	cbz	r0, 800c7fe <GUI_SetAlpha+0xb6>
 800c7fa:	f001 fdb7 	bl	800e36c <GUI_DEVICE_Delete>
 800c7fe:	6860      	ldr	r0, [r4, #4]
 800c800:	b1d0      	cbz	r0, 800c838 <GUI_SetAlpha+0xf0>
 800c802:	f001 fdb3 	bl	800e36c <GUI_DEVICE_Delete>
 800c806:	e017      	b.n	800c838 <GUI_SetAlpha+0xf0>
 800c808:	3501      	adds	r5, #1
 800c80a:	2d02      	cmp	r5, #2
 800c80c:	d1df      	bne.n	800c7ce <GUI_SetAlpha+0x86>
 800c80e:	4a0c      	ldr	r2, [pc, #48]	; (800c840 <GUI_SetAlpha+0xf8>)
 800c810:	6813      	ldr	r3, [r2, #0]
 800c812:	2105      	movs	r1, #5
 800c814:	7c58      	ldrb	r0, [r3, #17]
 800c816:	f001 fd87 	bl	800e328 <GUI_DEVICE__GetpDevice>
 800c81a:	b958      	cbnz	r0, 800c834 <GUI_SetAlpha+0xec>
 800c81c:	4813      	ldr	r0, [pc, #76]	; (800c86c <GUI_SetAlpha+0x124>)
 800c81e:	f7fd fbff 	bl	800a020 <GUI_MEMDEV__SetAlphaCallback>
 800c822:	4b07      	ldr	r3, [pc, #28]	; (800c840 <GUI_SetAlpha+0xf8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	7c5a      	ldrb	r2, [r3, #17]
 800c828:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <GUI_SetAlpha+0x120>)
 800c82a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c82e:	b108      	cbz	r0, 800c834 <GUI_SetAlpha+0xec>
 800c830:	f001 fdda 	bl	800e3e8 <GUI_DEVICE_Link>
 800c834:	f808 4006 	strb.w	r4, [r8, r6]
 800c838:	9801      	ldr	r0, [sp, #4]
 800c83a:	b003      	add	sp, #12
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	2000002c 	.word	0x2000002c
 800c844:	20022fcc 	.word	0x20022fcc
 800c848:	20022a80 	.word	0x20022a80
 800c84c:	20022a90 	.word	0x20022a90
 800c850:	20022a84 	.word	0x20022a84
 800c854:	0800c871 	.word	0x0800c871
 800c858:	20022a8c 	.word	0x20022a8c
 800c85c:	20022a90 	.word	0x20022a90
 800c860:	08012e10 	.word	0x08012e10
 800c864:	08012df8 	.word	0x08012df8
 800c868:	20022a94 	.word	0x20022a94
 800c86c:	0800c749 	.word	0x0800c749

0800c870 <_OnExit>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d0c      	ldr	r5, [pc, #48]	; (800c8a4 <_OnExit+0x34>)
 800c874:	2400      	movs	r4, #0
 800c876:	6828      	ldr	r0, [r5, #0]
 800c878:	f002 fa32 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c87c:	602c      	str	r4, [r5, #0]
 800c87e:	4d0a      	ldr	r5, [pc, #40]	; (800c8a8 <_OnExit+0x38>)
 800c880:	6828      	ldr	r0, [r5, #0]
 800c882:	f002 fa2d 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800c886:	602c      	str	r4, [r5, #0]
 800c888:	4d08      	ldr	r5, [pc, #32]	; (800c8ac <_OnExit+0x3c>)
 800c88a:	6828      	ldr	r0, [r5, #0]
 800c88c:	b110      	cbz	r0, 800c894 <_OnExit+0x24>
 800c88e:	f001 fd6d 	bl	800e36c <GUI_DEVICE_Delete>
 800c892:	602c      	str	r4, [r5, #0]
 800c894:	6868      	ldr	r0, [r5, #4]
 800c896:	b120      	cbz	r0, 800c8a2 <_OnExit+0x32>
 800c898:	f001 fd68 	bl	800e36c <GUI_DEVICE_Delete>
 800c89c:	4b03      	ldr	r3, [pc, #12]	; (800c8ac <_OnExit+0x3c>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	605a      	str	r2, [r3, #4]
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	20022a90 	.word	0x20022a90
 800c8a8:	20022a8c 	.word	0x20022a8c
 800c8ac:	20022a94 	.word	0x20022a94

0800c8b0 <_ReadRectFromMemdev>:
 800c8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	4c23      	ldr	r4, [pc, #140]	; (800c944 <_ReadRectFromMemdev+0x94>)
 800c8b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c8b8:	469b      	mov	fp, r3
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c8be:	4691      	mov	r9, r2
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	f7fd fb71 	bl	8009fa8 <GUI_MEMDEV_GetXPos>
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c8cc:	f7fd fb82 	bl	8009fd4 <GUI_MEMDEV_GetYPos>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	4680      	mov	r8, r0
 800c8d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c8d6:	f7fd fb51 	bl	8009f7c <GUI_MEMDEV_GetXSize>
 800c8da:	45c1      	cmp	r9, r8
 800c8dc:	4682      	mov	sl, r0
 800c8de:	db2e      	blt.n	800c93e <_ReadRectFromMemdev+0x8e>
 800c8e0:	42bd      	cmp	r5, r7
 800c8e2:	db2c      	blt.n	800c93e <_ReadRectFromMemdev+0x8e>
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800c8e8:	9401      	str	r4, [sp, #4]
 800c8ea:	f7fe f8ad 	bl	800aa48 <GUI_MEMDEV_GetBitsPerPixel>
 800c8ee:	2808      	cmp	r0, #8
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	9b01      	ldr	r3, [sp, #4]
 800c8f4:	dd04      	ble.n	800c900 <_ReadRectFromMemdev+0x50>
 800c8f6:	2810      	cmp	r0, #16
 800c8f8:	bfcc      	ite	gt
 800c8fa:	2204      	movgt	r2, #4
 800c8fc:	2202      	movle	r2, #2
 800c8fe:	e000      	b.n	800c902 <_ReadRectFromMemdev+0x52>
 800c900:	2201      	movs	r2, #1
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c906:	9201      	str	r2, [sp, #4]
 800c908:	f7fd fb7a 	bl	800a000 <GUI_MEMDEV_GetDataPtr>
 800c90c:	ebc5 0b0b 	rsb	fp, r5, fp
 800c910:	9a01      	ldr	r2, [sp, #4]
 800c912:	ebc8 0809 	rsb	r8, r8, r9
 800c916:	1bed      	subs	r5, r5, r7
 800c918:	f10b 0b01 	add.w	fp, fp, #1
 800c91c:	fb0a 5a08 	mla	sl, sl, r8, r5
 800c920:	fb0a 0102 	mla	r1, sl, r2, r0
 800c924:	fb02 f20b 	mul.w	r2, r2, fp
 800c928:	4630      	mov	r0, r6
 800c92a:	f004 ff82 	bl	8011832 <memcpy>
 800c92e:	4630      	mov	r0, r6
 800c930:	4659      	mov	r1, fp
 800c932:	4622      	mov	r2, r4
 800c934:	b003      	add	sp, #12
 800c936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	f003 be23 	b.w	8010584 <GUI__ExpandPixelIndices>
 800c93e:	b003      	add	sp, #12
 800c940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c944:	2000002c 	.word	0x2000002c

0800c948 <_Color2IndexBulk>:
 800c948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c94c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800c9e4 <_Color2IndexBulk+0x9c>
 800c950:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c9e8 <_Color2IndexBulk+0xa0>
 800c954:	f8d9 5000 	ldr.w	r5, [r9]
 800c958:	7c6d      	ldrb	r5, [r5, #17]
 800c95a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800c95e:	682d      	ldr	r5, [r5, #0]
 800c960:	692d      	ldr	r5, [r5, #16]
 800c962:	692d      	ldr	r5, [r5, #16]
 800c964:	4607      	mov	r7, r0
 800c966:	460e      	mov	r6, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	b115      	cbz	r5, 800c972 <_Color2IndexBulk+0x2a>
 800c96c:	47a8      	blx	r5
 800c96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c972:	2b02      	cmp	r3, #2
 800c974:	d014      	beq.n	800c9a0 <_Color2IndexBulk+0x58>
 800c976:	2b04      	cmp	r3, #4
 800c978:	d023      	beq.n	800c9c2 <_Color2IndexBulk+0x7a>
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d130      	bne.n	800c9e0 <_Color2IndexBulk+0x98>
 800c97e:	f8d9 3000 	ldr.w	r3, [r9]
 800c982:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800c986:	7c5b      	ldrb	r3, [r3, #17]
 800c988:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4798      	blx	r3
 800c994:	5570      	strb	r0, [r6, r5]
 800c996:	3501      	adds	r5, #1
 800c998:	42ac      	cmp	r4, r5
 800c99a:	d1f0      	bne.n	800c97e <_Color2IndexBulk+0x36>
 800c99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a0:	f8d9 3000 	ldr.w	r3, [r9]
 800c9a4:	f857 0b04 	ldr.w	r0, [r7], #4
 800c9a8:	7c5b      	ldrb	r3, [r3, #17]
 800c9aa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4798      	blx	r3
 800c9b6:	3c01      	subs	r4, #1
 800c9b8:	f826 0b02 	strh.w	r0, [r6], #2
 800c9bc:	d1f0      	bne.n	800c9a0 <_Color2IndexBulk+0x58>
 800c9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c2:	f8d9 3000 	ldr.w	r3, [r9]
 800c9c6:	5978      	ldr	r0, [r7, r5]
 800c9c8:	7c5b      	ldrb	r3, [r3, #17]
 800c9ca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4798      	blx	r3
 800c9d6:	3c01      	subs	r4, #1
 800c9d8:	5170      	str	r0, [r6, r5]
 800c9da:	f105 0504 	add.w	r5, r5, #4
 800c9de:	d1f0      	bne.n	800c9c2 <_Color2IndexBulk+0x7a>
 800c9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e4:	2000002c 	.word	0x2000002c
 800c9e8:	20022a94 	.word	0x20022a94

0800c9ec <_Index2ColorBulk>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800ca88 <_Index2ColorBulk+0x9c>
 800c9f4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800ca8c <_Index2ColorBulk+0xa0>
 800c9f8:	f8d9 5000 	ldr.w	r5, [r9]
 800c9fc:	7c6d      	ldrb	r5, [r5, #17]
 800c9fe:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800ca02:	682d      	ldr	r5, [r5, #0]
 800ca04:	692d      	ldr	r5, [r5, #16]
 800ca06:	696d      	ldr	r5, [r5, #20]
 800ca08:	4607      	mov	r7, r0
 800ca0a:	460e      	mov	r6, r1
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	b115      	cbz	r5, 800ca16 <_Index2ColorBulk+0x2a>
 800ca10:	47a8      	blx	r5
 800ca12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d014      	beq.n	800ca44 <_Index2ColorBulk+0x58>
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	d023      	beq.n	800ca66 <_Index2ColorBulk+0x7a>
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d130      	bne.n	800ca84 <_Index2ColorBulk+0x98>
 800ca22:	f8d9 3000 	ldr.w	r3, [r9]
 800ca26:	5d78      	ldrb	r0, [r7, r5]
 800ca28:	7c5b      	ldrb	r3, [r3, #17]
 800ca2a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	4798      	blx	r3
 800ca36:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800ca3a:	3501      	adds	r5, #1
 800ca3c:	42ac      	cmp	r4, r5
 800ca3e:	d1f0      	bne.n	800ca22 <_Index2ColorBulk+0x36>
 800ca40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca44:	f8d9 3000 	ldr.w	r3, [r9]
 800ca48:	f837 0b02 	ldrh.w	r0, [r7], #2
 800ca4c:	7c5b      	ldrb	r3, [r3, #17]
 800ca4e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	4798      	blx	r3
 800ca5a:	3c01      	subs	r4, #1
 800ca5c:	f846 0b04 	str.w	r0, [r6], #4
 800ca60:	d1f0      	bne.n	800ca44 <_Index2ColorBulk+0x58>
 800ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca66:	f8d9 3000 	ldr.w	r3, [r9]
 800ca6a:	5978      	ldr	r0, [r7, r5]
 800ca6c:	7c5b      	ldrb	r3, [r3, #17]
 800ca6e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	4798      	blx	r3
 800ca7a:	3c01      	subs	r4, #1
 800ca7c:	5170      	str	r0, [r6, r5]
 800ca7e:	f105 0504 	add.w	r5, r5, #4
 800ca82:	d1f0      	bne.n	800ca66 <_Index2ColorBulk+0x7a>
 800ca84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca88:	2000002c 	.word	0x2000002c
 800ca8c:	20022a94 	.word	0x20022a94

0800ca90 <_MixColors>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <_MixColors+0x40>)
 800ca94:	4a0f      	ldr	r2, [pc, #60]	; (800cad4 <_MixColors+0x44>)
 800ca96:	781e      	ldrb	r6, [r3, #0]
 800ca98:	4c0f      	ldr	r4, [pc, #60]	; (800cad8 <_MixColors+0x48>)
 800ca9a:	4b10      	ldr	r3, [pc, #64]	; (800cadc <_MixColors+0x4c>)
 800ca9c:	b156      	cbz	r6, 800cab4 <_MixColors+0x24>
 800ca9e:	6821      	ldr	r1, [r4, #0]
 800caa0:	7c49      	ldrb	r1, [r1, #17]
 800caa2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800caa6:	6992      	ldr	r2, [r2, #24]
 800caa8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
 800caac:	5c98      	ldrb	r0, [r3, r2]
 800caae:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	6824      	ldr	r4, [r4, #0]
 800cab6:	7c64      	ldrb	r4, [r4, #17]
 800cab8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800cabc:	6992      	ldr	r2, [r2, #24]
 800cabe:	5c9a      	ldrb	r2, [r3, r2]
 800cac0:	43d2      	mvns	r2, r2
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	f7ff fbb2 	bl	800c22c <GUI__MixColors>
 800cac8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	bf00      	nop
 800cad0:	20022fbd 	.word	0x20022fbd
 800cad4:	20022fcc 	.word	0x20022fcc
 800cad8:	2000002c 	.word	0x2000002c
 800cadc:	20022a80 	.word	0x20022a80

0800cae0 <_SetPixelIndex>:
 800cae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae4:	6804      	ldr	r4, [r0, #0]
 800cae6:	68e5      	ldr	r5, [r4, #12]
 800cae8:	4698      	mov	r8, r3
 800caea:	4620      	mov	r0, r4
 800caec:	696b      	ldr	r3, [r5, #20]
 800caee:	4616      	mov	r6, r2
 800caf0:	460f      	mov	r7, r1
 800caf2:	4798      	blx	r3
 800caf4:	6925      	ldr	r5, [r4, #16]
 800caf6:	686b      	ldr	r3, [r5, #4]
 800caf8:	4798      	blx	r3
 800cafa:	6925      	ldr	r5, [r4, #16]
 800cafc:	4681      	mov	r9, r0
 800cafe:	686b      	ldr	r3, [r5, #4]
 800cb00:	4640      	mov	r0, r8
 800cb02:	4798      	blx	r3
 800cb04:	4649      	mov	r1, r9
 800cb06:	f7ff ffc3 	bl	800ca90 <_MixColors>
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4798      	blx	r3
 800cb10:	68e5      	ldr	r5, [r4, #12]
 800cb12:	4603      	mov	r3, r0
 800cb14:	69ad      	ldr	r5, [r5, #24]
 800cb16:	4620      	mov	r0, r4
 800cb18:	4639      	mov	r1, r7
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	47a8      	blx	r5
 800cb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cb22 <_XorPixel>:
 800cb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb26:	4604      	mov	r4, r0
 800cb28:	460f      	mov	r7, r1
 800cb2a:	4616      	mov	r6, r2
 800cb2c:	f7ff fdea 	bl	800c704 <_GetPixelIndex>
 800cb30:	6825      	ldr	r5, [r4, #0]
 800cb32:	692b      	ldr	r3, [r5, #16]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	4680      	mov	r8, r0
 800cb38:	4798      	blx	r3
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	ea80 0308 	eor.w	r3, r0, r8
 800cb40:	4632      	mov	r2, r6
 800cb42:	4620      	mov	r0, r4
 800cb44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	f7ff bfca 	b.w	800cae0 <_SetPixelIndex>

0800cb4c <_DrawVLine>:
 800cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	461d      	mov	r5, r3
 800cb52:	4b12      	ldr	r3, [pc, #72]	; (800cb9c <_DrawVLine+0x50>)
 800cb54:	4614      	mov	r4, r2
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	7c12      	ldrb	r2, [r2, #16]
 800cb5a:	f012 0f01 	tst.w	r2, #1
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460f      	mov	r7, r1
 800cb62:	4698      	mov	r8, r3
 800cb64:	d10e      	bne.n	800cb84 <_DrawVLine+0x38>
 800cb66:	42ac      	cmp	r4, r5
 800cb68:	dc0a      	bgt.n	800cb80 <_DrawVLine+0x34>
 800cb6a:	f8d8 2000 	ldr.w	r2, [r8]
 800cb6e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cb70:	4630      	mov	r0, r6
 800cb72:	4622      	mov	r2, r4
 800cb74:	4639      	mov	r1, r7
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f7ff ffb2 	bl	800cae0 <_SetPixelIndex>
 800cb7c:	3401      	adds	r4, #1
 800cb7e:	e7f2      	b.n	800cb66 <_DrawVLine+0x1a>
 800cb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb84:	42ac      	cmp	r4, r5
 800cb86:	dc06      	bgt.n	800cb96 <_DrawVLine+0x4a>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	4639      	mov	r1, r7
 800cb8e:	f7ff ffc8 	bl	800cb22 <_XorPixel>
 800cb92:	3401      	adds	r4, #1
 800cb94:	e7f6      	b.n	800cb84 <_DrawVLine+0x38>
 800cb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9a:	bf00      	nop
 800cb9c:	2000002c 	.word	0x2000002c

0800cba0 <_GetLine>:
 800cba0:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
 800cba4:	4698      	mov	r8, r3
 800cba6:	b085      	sub	sp, #20
 800cba8:	6803      	ldr	r3, [r0, #0]
 800cbaa:	9303      	str	r3, [sp, #12]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cbb0:	4616      	mov	r6, r2
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	2a04      	cmp	r2, #4
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	d006      	beq.n	800cbc8 <_GetLine+0x28>
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	a803      	add	r0, sp, #12
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	4798      	blx	r3
 800cbc2:	2501      	movs	r5, #1
 800cbc4:	4684      	mov	ip, r0
 800cbc6:	e002      	b.n	800cbce <_GetLine+0x2e>
 800cbc8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc48 <_GetLine+0xa8>
 800cbcc:	2500      	movs	r5, #0
 800cbce:	eb04 0b08 	add.w	fp, r4, r8
 800cbd2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cbd6:	f1bc 0f00 	cmp.w	ip, #0
 800cbda:	d101      	bne.n	800cbe0 <_GetLine+0x40>
 800cbdc:	463d      	mov	r5, r7
 800cbde:	e016      	b.n	800cc0e <_GetLine+0x6e>
 800cbe0:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800cbe4:	9803      	ldr	r0, [sp, #12]
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	4632      	mov	r2, r6
 800cbea:	465b      	mov	r3, fp
 800cbec:	47e0      	blx	ip
 800cbee:	b165      	cbz	r5, 800cc0a <_GetLine+0x6a>
 800cbf0:	4b14      	ldr	r3, [pc, #80]	; (800cc44 <_GetLine+0xa4>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	7c58      	ldrb	r0, [r3, #17]
 800cbf6:	f7fe fe3d 	bl	800b874 <LCD_GetBitsPerPixelEx>
 800cbfa:	4641      	mov	r1, r8
 800cbfc:	2818      	cmp	r0, #24
 800cbfe:	bf14      	ite	ne
 800cc00:	4602      	movne	r2, r0
 800cc02:	2220      	moveq	r2, #32
 800cc04:	4638      	mov	r0, r7
 800cc06:	f003 fcbd 	bl	8010584 <GUI__ExpandPixelIndices>
 800cc0a:	2400      	movs	r4, #0
 800cc0c:	e00b      	b.n	800cc26 <_GetLine+0x86>
 800cc0e:	455c      	cmp	r4, fp
 800cc10:	dcfb      	bgt.n	800cc0a <_GetLine+0x6a>
 800cc12:	9803      	ldr	r0, [sp, #12]
 800cc14:	68c3      	ldr	r3, [r0, #12]
 800cc16:	4621      	mov	r1, r4
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	4798      	blx	r3
 800cc1e:	3401      	adds	r4, #1
 800cc20:	f845 0b04 	str.w	r0, [r5], #4
 800cc24:	e7f3      	b.n	800cc0e <_GetLine+0x6e>
 800cc26:	4544      	cmp	r4, r8
 800cc28:	da08      	bge.n	800cc3c <_GetLine+0x9c>
 800cc2a:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800cc2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc30:	4798      	blx	r3
 800cc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc38:	3401      	adds	r4, #1
 800cc3a:	e7f4      	b.n	800cc26 <_GetLine+0x86>
 800cc3c:	b005      	add	sp, #20
 800cc3e:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
 800cc42:	bf00      	nop
 800cc44:	2000002c 	.word	0x2000002c
 800cc48:	0800c8b1 	.word	0x0800c8b1

0800cc4c <_DrawBitmapLine.isra.6>:
 800cc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc50:	461d      	mov	r5, r3
 800cc52:	4b13      	ldr	r3, [pc, #76]	; (800cca0 <_DrawBitmapLine.isra.6+0x54>)
 800cc54:	4e13      	ldr	r6, [pc, #76]	; (800cca4 <_DrawBitmapLine.isra.6+0x58>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	b087      	sub	sp, #28
 800cc5a:	4607      	mov	r7, r0
 800cc5c:	7c58      	ldrb	r0, [r3, #17]
 800cc5e:	4689      	mov	r9, r1
 800cc60:	4690      	mov	r8, r2
 800cc62:	f7fe fe07 	bl	800b874 <LCD_GetBitsPerPixelEx>
 800cc66:	2818      	cmp	r0, #24
 800cc68:	bf14      	ite	ne
 800cc6a:	4604      	movne	r4, r0
 800cc6c:	2420      	moveq	r4, #32
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4622      	mov	r2, r4
 800cc72:	6830      	ldr	r0, [r6, #0]
 800cc74:	f003 fdaf 	bl	80107d6 <GUI__CompactPixelIndices>
 800cc78:	6838      	ldr	r0, [r7, #0]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	68c2      	ldr	r2, [r0, #12]
 800cc7e:	e88d 0018 	stmia.w	sp, {r3, r4}
 800cc82:	2400      	movs	r4, #0
 800cc84:	6833      	ldr	r3, [r6, #0]
 800cc86:	9303      	str	r3, [sp, #12]
 800cc88:	9402      	str	r4, [sp, #8]
 800cc8a:	9404      	str	r4, [sp, #16]
 800cc8c:	9405      	str	r4, [sp, #20]
 800cc8e:	6854      	ldr	r4, [r2, #4]
 800cc90:	4649      	mov	r1, r9
 800cc92:	4642      	mov	r2, r8
 800cc94:	462b      	mov	r3, r5
 800cc96:	47a0      	blx	r4
 800cc98:	b007      	add	sp, #28
 800cc9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc9e:	bf00      	nop
 800cca0:	2000002c 	.word	0x2000002c
 800cca4:	20022a90 	.word	0x20022a90

0800cca8 <_DrawHLine>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	1a5b      	subs	r3, r3, r1
 800ccae:	1c5d      	adds	r5, r3, #1
 800ccb0:	6803      	ldr	r3, [r0, #0]
 800ccb2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800cd2c <_DrawHLine+0x84>
 800ccb6:	691c      	ldr	r4, [r3, #16]
 800ccb8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800cd30 <_DrawHLine+0x88>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	9305      	str	r3, [sp, #20]
 800ccc4:	f8d9 3000 	ldr.w	r3, [r9]
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	f8d8 3000 	ldr.w	r3, [r8]
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	6863      	ldr	r3, [r4, #4]
 800ccd2:	9302      	str	r3, [sp, #8]
 800ccd4:	462b      	mov	r3, r5
 800ccd6:	460e      	mov	r6, r1
 800ccd8:	4692      	mov	sl, r2
 800ccda:	f7ff ff61 	bl	800cba0 <_GetLine>
 800ccde:	4b12      	ldr	r3, [pc, #72]	; (800cd28 <_DrawHLine+0x80>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f7ff f953 	bl	800bf90 <LCD_Index2Color>
 800ccea:	2400      	movs	r4, #0
 800ccec:	4683      	mov	fp, r0
 800ccee:	42ac      	cmp	r4, r5
 800ccf0:	da10      	bge.n	800cd14 <_DrawHLine+0x6c>
 800ccf2:	f8d8 3000 	ldr.w	r3, [r8]
 800ccf6:	4658      	mov	r0, fp
 800ccf8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800ccfc:	f7ff fec8 	bl	800ca90 <_MixColors>
 800cd00:	f8d9 3000 	ldr.w	r3, [r9]
 800cd04:	9304      	str	r3, [sp, #16]
 800cd06:	9a05      	ldr	r2, [sp, #20]
 800cd08:	4790      	blx	r2
 800cd0a:	9b04      	ldr	r3, [sp, #16]
 800cd0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd10:	3401      	adds	r4, #1
 800cd12:	e7ec      	b.n	800ccee <_DrawHLine+0x46>
 800cd14:	4638      	mov	r0, r7
 800cd16:	4631      	mov	r1, r6
 800cd18:	4652      	mov	r2, sl
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	b007      	add	sp, #28
 800cd1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd22:	f7ff bf93 	b.w	800cc4c <_DrawBitmapLine.isra.6>
 800cd26:	bf00      	nop
 800cd28:	2000002c 	.word	0x2000002c
 800cd2c:	20022a90 	.word	0x20022a90
 800cd30:	20022a8c 	.word	0x20022a8c

0800cd34 <_FillRect>:
 800cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd38:	9d06      	ldr	r5, [sp, #24]
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	460f      	mov	r7, r1
 800cd3e:	4614      	mov	r4, r2
 800cd40:	4698      	mov	r8, r3
 800cd42:	42ac      	cmp	r4, r5
 800cd44:	dc07      	bgt.n	800cd56 <_FillRect+0x22>
 800cd46:	4622      	mov	r2, r4
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	4643      	mov	r3, r8
 800cd4e:	f7ff ffab 	bl	800cca8 <_DrawHLine>
 800cd52:	3401      	adds	r4, #1
 800cd54:	e7f5      	b.n	800cd42 <_FillRect+0xe>
 800cd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cd5c <_DrawBitmap>:
 800cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	b08d      	sub	sp, #52	; 0x34
 800cd62:	4605      	mov	r5, r0
 800cd64:	9105      	str	r1, [sp, #20]
 800cd66:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd68:	461c      	mov	r4, r3
 800cd6a:	4616      	mov	r6, r2
 800cd6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800cd6e:	1bf3      	subs	r3, r6, r7
 800cd70:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800cd72:	42bb      	cmp	r3, r7
 800cd74:	f280 835d 	bge.w	800d432 <_DrawBitmap+0x6d6>
 800cd78:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800cd7a:	2f04      	cmp	r7, #4
 800cd7c:	f000 81b5 	beq.w	800d0ea <_DrawBitmap+0x38e>
 800cd80:	dc05      	bgt.n	800cd8e <_DrawBitmap+0x32>
 800cd82:	2f01      	cmp	r7, #1
 800cd84:	d00e      	beq.n	800cda4 <_DrawBitmap+0x48>
 800cd86:	2f02      	cmp	r7, #2
 800cd88:	f000 80e1 	beq.w	800cf4e <_DrawBitmap+0x1f2>
 800cd8c:	e34b      	b.n	800d426 <_DrawBitmap+0x6ca>
 800cd8e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800cd90:	2f10      	cmp	r7, #16
 800cd92:	f000 82d8 	beq.w	800d346 <_DrawBitmap+0x5ea>
 800cd96:	2f20      	cmp	r7, #32
 800cd98:	f000 830e 	beq.w	800d3b8 <_DrawBitmap+0x65c>
 800cd9c:	2f08      	cmp	r7, #8
 800cd9e:	f040 8342 	bne.w	800d426 <_DrawBitmap+0x6ca>
 800cda2:	e268      	b.n	800d276 <_DrawBitmap+0x51a>
 800cda4:	4bb9      	ldr	r3, [pc, #740]	; (800d08c <_DrawBitmap+0x330>)
 800cda6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f8d7 b000 	ldr.w	fp, [r7]
 800cdae:	7c1b      	ldrb	r3, [r3, #16]
 800cdb0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800cdb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cdb8:	9f05      	ldr	r7, [sp, #20]
 800cdba:	f003 0303 	and.w	r3, r3, #3
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	44b8      	add	r8, r7
 800cdc2:	d04c      	beq.n	800ce5e <_DrawBitmap+0x102>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	f000 808e 	beq.w	800cee6 <_DrawBitmap+0x18a>
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	f000 808b 	beq.w	800cee6 <_DrawBitmap+0x18a>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	e893 0280 	ldmia.w	r3, {r7, r9}
 800cdd8:	4bad      	ldr	r3, [pc, #692]	; (800d090 <_DrawBitmap+0x334>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	4bad      	ldr	r3, [pc, #692]	; (800d094 <_DrawBitmap+0x338>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	4641      	mov	r1, r8
 800cde6:	4623      	mov	r3, r4
 800cde8:	4632      	mov	r2, r6
 800cdea:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7ff fed6 	bl	800cba0 <_GetLine>
 800cdf4:	4658      	mov	r0, fp
 800cdf6:	47c8      	blx	r9
 800cdf8:	4683      	mov	fp, r0
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	47c8      	blx	r9
 800cdfe:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800ce02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce04:	4684      	mov	ip, r0
 800ce06:	46a2      	mov	sl, r4
 800ce08:	7819      	ldrb	r1, [r3, #0]
 800ce0a:	2280      	movs	r2, #128	; 0x80
 800ce0c:	fa42 f209 	asr.w	r2, r2, r9
 800ce10:	4211      	tst	r1, r2
 800ce12:	49a0      	ldr	r1, [pc, #640]	; (800d094 <_DrawBitmap+0x338>)
 800ce14:	ebca 0204 	rsb	r2, sl, r4
 800ce18:	6809      	ldr	r1, [r1, #0]
 800ce1a:	bf0c      	ite	eq
 800ce1c:	4658      	moveq	r0, fp
 800ce1e:	4660      	movne	r0, ip
 800ce20:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ce24:	9208      	str	r2, [sp, #32]
 800ce26:	9307      	str	r3, [sp, #28]
 800ce28:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ce2c:	f7ff fe30 	bl	800ca90 <_MixColors>
 800ce30:	4997      	ldr	r1, [pc, #604]	; (800d090 <_DrawBitmap+0x334>)
 800ce32:	6809      	ldr	r1, [r1, #0]
 800ce34:	9104      	str	r1, [sp, #16]
 800ce36:	f109 0901 	add.w	r9, r9, #1
 800ce3a:	47b8      	blx	r7
 800ce3c:	9b07      	ldr	r3, [sp, #28]
 800ce3e:	9a08      	ldr	r2, [sp, #32]
 800ce40:	9904      	ldr	r1, [sp, #16]
 800ce42:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800ce46:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800ce4a:	f1b9 0f08 	cmp.w	r9, #8
 800ce4e:	bf04      	itt	eq
 800ce50:	3301      	addeq	r3, #1
 800ce52:	f04f 0900 	moveq.w	r9, #0
 800ce56:	f1ba 0a01 	subs.w	sl, sl, #1
 800ce5a:	d1d5      	bne.n	800ce08 <_DrawBitmap+0xac>
 800ce5c:	e040      	b.n	800cee0 <_DrawBitmap+0x184>
 800ce5e:	682b      	ldr	r3, [r5, #0]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	e893 0280 	ldmia.w	r3, {r7, r9}
 800ce66:	4b8a      	ldr	r3, [pc, #552]	; (800d090 <_DrawBitmap+0x334>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	4b89      	ldr	r3, [pc, #548]	; (800d094 <_DrawBitmap+0x338>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	4632      	mov	r2, r6
 800ce74:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce78:	4628      	mov	r0, r5
 800ce7a:	4641      	mov	r1, r8
 800ce7c:	4623      	mov	r3, r4
 800ce7e:	f7ff fe8f 	bl	800cba0 <_GetLine>
 800ce82:	4650      	mov	r0, sl
 800ce84:	47c8      	blx	r9
 800ce86:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800ce8a:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800ce8e:	4602      	mov	r2, r0
 800ce90:	46a2      	mov	sl, r4
 800ce92:	f89b 1000 	ldrb.w	r1, [fp]
 800ce96:	2380      	movs	r3, #128	; 0x80
 800ce98:	fa43 f309 	asr.w	r3, r3, r9
 800ce9c:	4219      	tst	r1, r3
 800ce9e:	d013      	beq.n	800cec8 <_DrawBitmap+0x16c>
 800cea0:	497c      	ldr	r1, [pc, #496]	; (800d094 <_DrawBitmap+0x338>)
 800cea2:	ebca 0304 	rsb	r3, sl, r4
 800cea6:	6809      	ldr	r1, [r1, #0]
 800cea8:	4610      	mov	r0, r2
 800ceaa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ceae:	9208      	str	r2, [sp, #32]
 800ceb0:	9307      	str	r3, [sp, #28]
 800ceb2:	f7ff fded 	bl	800ca90 <_MixColors>
 800ceb6:	4976      	ldr	r1, [pc, #472]	; (800d090 <_DrawBitmap+0x334>)
 800ceb8:	6809      	ldr	r1, [r1, #0]
 800ceba:	9104      	str	r1, [sp, #16]
 800cebc:	47b8      	blx	r7
 800cebe:	9b07      	ldr	r3, [sp, #28]
 800cec0:	9904      	ldr	r1, [sp, #16]
 800cec2:	9a08      	ldr	r2, [sp, #32]
 800cec4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800cec8:	f109 0901 	add.w	r9, r9, #1
 800cecc:	f1b9 0f08 	cmp.w	r9, #8
 800ced0:	bf04      	itt	eq
 800ced2:	f10b 0b01 	addeq.w	fp, fp, #1
 800ced6:	f04f 0900 	moveq.w	r9, #0
 800ceda:	f1ba 0a01 	subs.w	sl, sl, #1
 800cede:	d1d8      	bne.n	800ce92 <_DrawBitmap+0x136>
 800cee0:	4628      	mov	r0, r5
 800cee2:	4641      	mov	r1, r8
 800cee4:	e29b      	b.n	800d41e <_DrawBitmap+0x6c2>
 800cee6:	692b      	ldr	r3, [r5, #16]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	4798      	blx	r3
 800ceec:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800cef0:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800cef4:	4683      	mov	fp, r0
 800cef6:	46a2      	mov	sl, r4
 800cef8:	f89c 1000 	ldrb.w	r1, [ip]
 800cefc:	2280      	movs	r2, #128	; 0x80
 800cefe:	fa42 f209 	asr.w	r2, r2, r9
 800cf02:	eb08 0304 	add.w	r3, r8, r4
 800cf06:	4211      	tst	r1, r2
 800cf08:	ebca 0303 	rsb	r3, sl, r3
 800cf0c:	d012      	beq.n	800cf34 <_DrawBitmap+0x1d8>
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4632      	mov	r2, r6
 800cf12:	4628      	mov	r0, r5
 800cf14:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cf18:	9307      	str	r3, [sp, #28]
 800cf1a:	f7ff fbf3 	bl	800c704 <_GetPixelIndex>
 800cf1e:	9b07      	ldr	r3, [sp, #28]
 800cf20:	ea80 0e0b 	eor.w	lr, r0, fp
 800cf24:	4619      	mov	r1, r3
 800cf26:	4628      	mov	r0, r5
 800cf28:	4632      	mov	r2, r6
 800cf2a:	4673      	mov	r3, lr
 800cf2c:	f7ff fdd8 	bl	800cae0 <_SetPixelIndex>
 800cf30:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cf34:	f109 0901 	add.w	r9, r9, #1
 800cf38:	f1b9 0f08 	cmp.w	r9, #8
 800cf3c:	bf04      	itt	eq
 800cf3e:	f10c 0c01 	addeq.w	ip, ip, #1
 800cf42:	f04f 0900 	moveq.w	r9, #0
 800cf46:	f1ba 0a01 	subs.w	sl, sl, #1
 800cf4a:	d1d5      	bne.n	800cef8 <_DrawBitmap+0x19c>
 800cf4c:	e26b      	b.n	800d426 <_DrawBitmap+0x6ca>
 800cf4e:	4b4f      	ldr	r3, [pc, #316]	; (800d08c <_DrawBitmap+0x330>)
 800cf50:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f897 8000 	ldrb.w	r8, [r7]
 800cf58:	7c1b      	ldrb	r3, [r3, #16]
 800cf5a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800cf5e:	9f05      	ldr	r7, [sp, #20]
 800cf60:	f013 0303 	ands.w	r3, r3, #3
 800cf64:	44b9      	add	r9, r7
 800cf66:	d002      	beq.n	800cf6e <_DrawBitmap+0x212>
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d05b      	beq.n	800d024 <_DrawBitmap+0x2c8>
 800cf6c:	e25b      	b.n	800d426 <_DrawBitmap+0x6ca>
 800cf6e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cf70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cf74:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800cf78:	4649      	mov	r1, r9
 800cf7a:	b387      	cbz	r7, 800cfde <_DrawBitmap+0x282>
 800cf7c:	f1ca 0303 	rsb	r3, sl, #3
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	f1c3 0206 	rsb	r2, r3, #6
 800cf86:	20c0      	movs	r0, #192	; 0xc0
 800cf88:	fa40 f202 	asr.w	r2, r0, r2
 800cf8c:	ea02 0208 	and.w	r2, r2, r8
 800cf90:	fa22 f303 	lsr.w	r3, r2, r3
 800cf94:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cf96:	f101 0c01 	add.w	ip, r1, #1
 800cf9a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800cf9e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	f10a 0a01 	add.w	sl, sl, #1
 800cfaa:	f7ff fd99 	bl	800cae0 <_SetPixelIndex>
 800cfae:	f1ba 0f04 	cmp.w	sl, #4
 800cfb2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cfb6:	d105      	bne.n	800cfc4 <_DrawBitmap+0x268>
 800cfb8:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800cfbc:	f04f 0a00 	mov.w	sl, #0
 800cfc0:	f10b 0b01 	add.w	fp, fp, #1
 800cfc4:	eb09 0304 	add.w	r3, r9, r4
 800cfc8:	4563      	cmp	r3, ip
 800cfca:	f000 822c 	beq.w	800d426 <_DrawBitmap+0x6ca>
 800cfce:	4661      	mov	r1, ip
 800cfd0:	e7d4      	b.n	800cf7c <_DrawBitmap+0x220>
 800cfd2:	eb09 0304 	add.w	r3, r9, r4
 800cfd6:	4563      	cmp	r3, ip
 800cfd8:	f000 8225 	beq.w	800d426 <_DrawBitmap+0x6ca>
 800cfdc:	4661      	mov	r1, ip
 800cfde:	f1ca 0e03 	rsb	lr, sl, #3
 800cfe2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800cfe6:	f1ce 0306 	rsb	r3, lr, #6
 800cfea:	22c0      	movs	r2, #192	; 0xc0
 800cfec:	fa42 f303 	asr.w	r3, r2, r3
 800cff0:	ea03 0308 	and.w	r3, r3, r8
 800cff4:	f101 0c01 	add.w	ip, r1, #1
 800cff8:	4628      	mov	r0, r5
 800cffa:	4632      	mov	r2, r6
 800cffc:	fa23 f30e 	lsr.w	r3, r3, lr
 800d000:	f10a 0a01 	add.w	sl, sl, #1
 800d004:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d008:	f7ff fd6a 	bl	800cae0 <_SetPixelIndex>
 800d00c:	f1ba 0f04 	cmp.w	sl, #4
 800d010:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d014:	d1dd      	bne.n	800cfd2 <_DrawBitmap+0x276>
 800d016:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800d01a:	f04f 0a00 	mov.w	sl, #0
 800d01e:	f10b 0b01 	add.w	fp, fp, #1
 800d022:	e7d6      	b.n	800cfd2 <_DrawBitmap+0x276>
 800d024:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d026:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d02a:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800d02e:	46a3      	mov	fp, r4
 800d030:	2f00      	cmp	r7, #0
 800d032:	d040      	beq.n	800d0b6 <_DrawBitmap+0x35a>
 800d034:	f1ca 0303 	rsb	r3, sl, #3
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	f1c3 0206 	rsb	r2, r3, #6
 800d03e:	20c0      	movs	r0, #192	; 0xc0
 800d040:	fa40 f202 	asr.w	r2, r0, r2
 800d044:	ea02 0208 	and.w	r2, r2, r8
 800d048:	eb09 0104 	add.w	r1, r9, r4
 800d04c:	fa32 f303 	lsrs.w	r3, r2, r3
 800d050:	ebcb 0101 	rsb	r1, fp, r1
 800d054:	d00a      	beq.n	800d06c <_DrawBitmap+0x310>
 800d056:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d058:	4628      	mov	r0, r5
 800d05a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d05e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d062:	4632      	mov	r2, r6
 800d064:	f7ff fd3c 	bl	800cae0 <_SetPixelIndex>
 800d068:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d06c:	f10a 0a01 	add.w	sl, sl, #1
 800d070:	f1ba 0f04 	cmp.w	sl, #4
 800d074:	d105      	bne.n	800d082 <_DrawBitmap+0x326>
 800d076:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800d07a:	f04f 0a00 	mov.w	sl, #0
 800d07e:	f10c 0c01 	add.w	ip, ip, #1
 800d082:	f1bb 0b01 	subs.w	fp, fp, #1
 800d086:	d1d5      	bne.n	800d034 <_DrawBitmap+0x2d8>
 800d088:	e1cd      	b.n	800d426 <_DrawBitmap+0x6ca>
 800d08a:	bf00      	nop
 800d08c:	2000002c 	.word	0x2000002c
 800d090:	20022a90 	.word	0x20022a90
 800d094:	20022a8c 	.word	0x20022a8c
 800d098:	f10a 0a01 	add.w	sl, sl, #1
 800d09c:	f1ba 0f04 	cmp.w	sl, #4
 800d0a0:	d105      	bne.n	800d0ae <_DrawBitmap+0x352>
 800d0a2:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800d0a6:	f04f 0a00 	mov.w	sl, #0
 800d0aa:	f10c 0c01 	add.w	ip, ip, #1
 800d0ae:	f1bb 0b01 	subs.w	fp, fp, #1
 800d0b2:	f000 81b8 	beq.w	800d426 <_DrawBitmap+0x6ca>
 800d0b6:	f1ca 0303 	rsb	r3, sl, #3
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	f1c3 0206 	rsb	r2, r3, #6
 800d0c0:	20c0      	movs	r0, #192	; 0xc0
 800d0c2:	fa40 f202 	asr.w	r2, r0, r2
 800d0c6:	ea02 0208 	and.w	r2, r2, r8
 800d0ca:	eb09 0104 	add.w	r1, r9, r4
 800d0ce:	fa32 f303 	lsrs.w	r3, r2, r3
 800d0d2:	ebcb 0101 	rsb	r1, fp, r1
 800d0d6:	d0df      	beq.n	800d098 <_DrawBitmap+0x33c>
 800d0d8:	4628      	mov	r0, r5
 800d0da:	4632      	mov	r2, r6
 800d0dc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d0e0:	f7ff fcfe 	bl	800cae0 <_SetPixelIndex>
 800d0e4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d0e8:	e7d6      	b.n	800d098 <_DrawBitmap+0x33c>
 800d0ea:	4bb0      	ldr	r3, [pc, #704]	; (800d3ac <_DrawBitmap+0x650>)
 800d0ec:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f897 8000 	ldrb.w	r8, [r7]
 800d0f4:	7c1b      	ldrb	r3, [r3, #16]
 800d0f6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800d0fa:	9f05      	ldr	r7, [sp, #20]
 800d0fc:	f013 0303 	ands.w	r3, r3, #3
 800d100:	44b9      	add	r9, r7
 800d102:	d002      	beq.n	800d10a <_DrawBitmap+0x3ae>
 800d104:	2b02      	cmp	r3, #2
 800d106:	d05b      	beq.n	800d1c0 <_DrawBitmap+0x464>
 800d108:	e18d      	b.n	800d426 <_DrawBitmap+0x6ca>
 800d10a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d10c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d110:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800d114:	4649      	mov	r1, r9
 800d116:	b387      	cbz	r7, 800d17a <_DrawBitmap+0x41e>
 800d118:	f1ca 0301 	rsb	r3, sl, #1
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	f1c3 0204 	rsb	r2, r3, #4
 800d122:	20f0      	movs	r0, #240	; 0xf0
 800d124:	fa40 f202 	asr.w	r2, r0, r2
 800d128:	ea02 0208 	and.w	r2, r2, r8
 800d12c:	fa22 f303 	lsr.w	r3, r2, r3
 800d130:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d132:	f101 0c01 	add.w	ip, r1, #1
 800d136:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d13a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d13e:	4628      	mov	r0, r5
 800d140:	4632      	mov	r2, r6
 800d142:	f10a 0a01 	add.w	sl, sl, #1
 800d146:	f7ff fccb 	bl	800cae0 <_SetPixelIndex>
 800d14a:	f1ba 0f02 	cmp.w	sl, #2
 800d14e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d152:	d105      	bne.n	800d160 <_DrawBitmap+0x404>
 800d154:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800d158:	f04f 0a00 	mov.w	sl, #0
 800d15c:	f10b 0b01 	add.w	fp, fp, #1
 800d160:	eb09 0304 	add.w	r3, r9, r4
 800d164:	4563      	cmp	r3, ip
 800d166:	f000 815e 	beq.w	800d426 <_DrawBitmap+0x6ca>
 800d16a:	4661      	mov	r1, ip
 800d16c:	e7d4      	b.n	800d118 <_DrawBitmap+0x3bc>
 800d16e:	eb09 0304 	add.w	r3, r9, r4
 800d172:	4563      	cmp	r3, ip
 800d174:	f000 8157 	beq.w	800d426 <_DrawBitmap+0x6ca>
 800d178:	4661      	mov	r1, ip
 800d17a:	f1ca 0e01 	rsb	lr, sl, #1
 800d17e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800d182:	f1ce 0304 	rsb	r3, lr, #4
 800d186:	22f0      	movs	r2, #240	; 0xf0
 800d188:	fa42 f303 	asr.w	r3, r2, r3
 800d18c:	ea03 0308 	and.w	r3, r3, r8
 800d190:	f101 0c01 	add.w	ip, r1, #1
 800d194:	4628      	mov	r0, r5
 800d196:	4632      	mov	r2, r6
 800d198:	fa23 f30e 	lsr.w	r3, r3, lr
 800d19c:	f10a 0a01 	add.w	sl, sl, #1
 800d1a0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d1a4:	f7ff fc9c 	bl	800cae0 <_SetPixelIndex>
 800d1a8:	f1ba 0f02 	cmp.w	sl, #2
 800d1ac:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d1b0:	d1dd      	bne.n	800d16e <_DrawBitmap+0x412>
 800d1b2:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800d1b6:	f04f 0a00 	mov.w	sl, #0
 800d1ba:	f10b 0b01 	add.w	fp, fp, #1
 800d1be:	e7d6      	b.n	800d16e <_DrawBitmap+0x412>
 800d1c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d1c2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d1c6:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800d1ca:	46a3      	mov	fp, r4
 800d1cc:	b3cf      	cbz	r7, 800d242 <_DrawBitmap+0x4e6>
 800d1ce:	f1ca 0301 	rsb	r3, sl, #1
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	f1c3 0204 	rsb	r2, r3, #4
 800d1d8:	20f0      	movs	r0, #240	; 0xf0
 800d1da:	fa40 f202 	asr.w	r2, r0, r2
 800d1de:	ea02 0208 	and.w	r2, r2, r8
 800d1e2:	eb09 0104 	add.w	r1, r9, r4
 800d1e6:	fa32 f303 	lsrs.w	r3, r2, r3
 800d1ea:	ebcb 0101 	rsb	r1, fp, r1
 800d1ee:	d00a      	beq.n	800d206 <_DrawBitmap+0x4aa>
 800d1f0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d1f8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d1fc:	4632      	mov	r2, r6
 800d1fe:	f7ff fc6f 	bl	800cae0 <_SetPixelIndex>
 800d202:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d206:	f10a 0a01 	add.w	sl, sl, #1
 800d20a:	f1ba 0f02 	cmp.w	sl, #2
 800d20e:	d105      	bne.n	800d21c <_DrawBitmap+0x4c0>
 800d210:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800d214:	f04f 0a00 	mov.w	sl, #0
 800d218:	f10c 0c01 	add.w	ip, ip, #1
 800d21c:	f1bb 0b01 	subs.w	fp, fp, #1
 800d220:	d1d5      	bne.n	800d1ce <_DrawBitmap+0x472>
 800d222:	e100      	b.n	800d426 <_DrawBitmap+0x6ca>
 800d224:	f10a 0a01 	add.w	sl, sl, #1
 800d228:	f1ba 0f02 	cmp.w	sl, #2
 800d22c:	d105      	bne.n	800d23a <_DrawBitmap+0x4de>
 800d22e:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800d232:	f04f 0a00 	mov.w	sl, #0
 800d236:	f10c 0c01 	add.w	ip, ip, #1
 800d23a:	f1bb 0b01 	subs.w	fp, fp, #1
 800d23e:	f000 80f2 	beq.w	800d426 <_DrawBitmap+0x6ca>
 800d242:	f1ca 0301 	rsb	r3, sl, #1
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	f1c3 0204 	rsb	r2, r3, #4
 800d24c:	20f0      	movs	r0, #240	; 0xf0
 800d24e:	fa40 f202 	asr.w	r2, r0, r2
 800d252:	ea02 0208 	and.w	r2, r2, r8
 800d256:	eb09 0104 	add.w	r1, r9, r4
 800d25a:	fa32 f303 	lsrs.w	r3, r2, r3
 800d25e:	ebcb 0101 	rsb	r1, fp, r1
 800d262:	d0df      	beq.n	800d224 <_DrawBitmap+0x4c8>
 800d264:	4628      	mov	r0, r5
 800d266:	4632      	mov	r2, r6
 800d268:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d26c:	f7ff fc38 	bl	800cae0 <_SetPixelIndex>
 800d270:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d274:	e7d6      	b.n	800d224 <_DrawBitmap+0x4c8>
 800d276:	4b4d      	ldr	r3, [pc, #308]	; (800d3ac <_DrawBitmap+0x650>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	7c1b      	ldrb	r3, [r3, #16]
 800d27c:	f013 0303 	ands.w	r3, r3, #3
 800d280:	d002      	beq.n	800d288 <_DrawBitmap+0x52c>
 800d282:	2b02      	cmp	r3, #2
 800d284:	d02f      	beq.n	800d2e6 <_DrawBitmap+0x58a>
 800d286:	e0ce      	b.n	800d426 <_DrawBitmap+0x6ca>
 800d288:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d28a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d28e:	b1b7      	cbz	r7, 800d2be <_DrawBitmap+0x562>
 800d290:	9b05      	ldr	r3, [sp, #20]
 800d292:	4423      	add	r3, r4
 800d294:	ebc8 0303 	rsb	r3, r8, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f340 80c4 	ble.w	800d426 <_DrawBitmap+0x6ca>
 800d29e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d2a0:	9905      	ldr	r1, [sp, #20]
 800d2a2:	1a7b      	subs	r3, r7, r1
 800d2a4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d2a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d2aa:	4641      	mov	r1, r8
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d2b4:	f7ff fc14 	bl	800cae0 <_SetPixelIndex>
 800d2b8:	f108 0801 	add.w	r8, r8, #1
 800d2bc:	e7e8      	b.n	800d290 <_DrawBitmap+0x534>
 800d2be:	9b05      	ldr	r3, [sp, #20]
 800d2c0:	4423      	add	r3, r4
 800d2c2:	ebc8 0303 	rsb	r3, r8, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f340 80ad 	ble.w	800d426 <_DrawBitmap+0x6ca>
 800d2cc:	9905      	ldr	r1, [sp, #20]
 800d2ce:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d2d0:	1a7b      	subs	r3, r7, r1
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	4641      	mov	r1, r8
 800d2d6:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d2da:	4632      	mov	r2, r6
 800d2dc:	f7ff fc00 	bl	800cae0 <_SetPixelIndex>
 800d2e0:	f108 0801 	add.w	r8, r8, #1
 800d2e4:	e7eb      	b.n	800d2be <_DrawBitmap+0x562>
 800d2e6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d2e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d2ec:	b327      	cbz	r7, 800d338 <_DrawBitmap+0x5dc>
 800d2ee:	9b05      	ldr	r3, [sp, #20]
 800d2f0:	4423      	add	r3, r4
 800d2f2:	ebc8 0303 	rsb	r3, r8, r3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f340 8095 	ble.w	800d426 <_DrawBitmap+0x6ca>
 800d2fc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d2fe:	9905      	ldr	r1, [sp, #20]
 800d300:	1a7b      	subs	r3, r7, r1
 800d302:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d306:	b13b      	cbz	r3, 800d318 <_DrawBitmap+0x5bc>
 800d308:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d30a:	4628      	mov	r0, r5
 800d30c:	4641      	mov	r1, r8
 800d30e:	4632      	mov	r2, r6
 800d310:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d314:	f7ff fbe4 	bl	800cae0 <_SetPixelIndex>
 800d318:	f108 0801 	add.w	r8, r8, #1
 800d31c:	e7e7      	b.n	800d2ee <_DrawBitmap+0x592>
 800d31e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d320:	9905      	ldr	r1, [sp, #20]
 800d322:	1a7b      	subs	r3, r7, r1
 800d324:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d328:	b123      	cbz	r3, 800d334 <_DrawBitmap+0x5d8>
 800d32a:	4628      	mov	r0, r5
 800d32c:	4641      	mov	r1, r8
 800d32e:	4632      	mov	r2, r6
 800d330:	f7ff fbd6 	bl	800cae0 <_SetPixelIndex>
 800d334:	f108 0801 	add.w	r8, r8, #1
 800d338:	9b05      	ldr	r3, [sp, #20]
 800d33a:	4423      	add	r3, r4
 800d33c:	ebc8 0303 	rsb	r3, r8, r3
 800d340:	2b00      	cmp	r3, #0
 800d342:	dcec      	bgt.n	800d31e <_DrawBitmap+0x5c2>
 800d344:	e06f      	b.n	800d426 <_DrawBitmap+0x6ca>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800d3b0 <_DrawBitmap+0x654>
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d3b4 <_DrawBitmap+0x658>
 800d352:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d356:	f8d3 a000 	ldr.w	sl, [r3]
 800d35a:	f8d8 3000 	ldr.w	r3, [r8]
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	f8db 3000 	ldr.w	r3, [fp]
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	4632      	mov	r2, r6
 800d368:	4623      	mov	r3, r4
 800d36a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d36e:	4628      	mov	r0, r5
 800d370:	9905      	ldr	r1, [sp, #20]
 800d372:	f7ff fc15 	bl	800cba0 <_GetLine>
 800d376:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d378:	f8db 3000 	ldr.w	r3, [fp]
 800d37c:	f8d8 b000 	ldr.w	fp, [r8]
 800d380:	46a0      	mov	r8, r4
 800d382:	f853 1b04 	ldr.w	r1, [r3], #4
 800d386:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d38a:	9208      	str	r2, [sp, #32]
 800d38c:	9307      	str	r3, [sp, #28]
 800d38e:	9109      	str	r1, [sp, #36]	; 0x24
 800d390:	47c8      	blx	r9
 800d392:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d394:	f7ff fb7c 	bl	800ca90 <_MixColors>
 800d398:	47d0      	blx	sl
 800d39a:	f1b8 0801 	subs.w	r8, r8, #1
 800d39e:	f84b 0b04 	str.w	r0, [fp], #4
 800d3a2:	9a08      	ldr	r2, [sp, #32]
 800d3a4:	9b07      	ldr	r3, [sp, #28]
 800d3a6:	d1ec      	bne.n	800d382 <_DrawBitmap+0x626>
 800d3a8:	e037      	b.n	800d41a <_DrawBitmap+0x6be>
 800d3aa:	bf00      	nop
 800d3ac:	2000002c 	.word	0x2000002c
 800d3b0:	20022a90 	.word	0x20022a90
 800d3b4:	20022a8c 	.word	0x20022a8c
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d438 <_DrawBitmap+0x6dc>
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d43c <_DrawBitmap+0x6e0>
 800d3c4:	9905      	ldr	r1, [sp, #20]
 800d3c6:	e893 0280 	ldmia.w	r3, {r7, r9}
 800d3ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	f8db 3000 	ldr.w	r3, [fp]
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3da:	4623      	mov	r3, r4
 800d3dc:	4628      	mov	r0, r5
 800d3de:	4632      	mov	r2, r6
 800d3e0:	f7ff fbde 	bl	800cba0 <_GetLine>
 800d3e4:	46a2      	mov	sl, r4
 800d3e6:	f8db 3000 	ldr.w	r3, [fp]
 800d3ea:	f8d8 b000 	ldr.w	fp, [r8]
 800d3ee:	f04f 0800 	mov.w	r8, #0
 800d3f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d3f4:	f853 1008 	ldr.w	r1, [r3, r8]
 800d3f8:	f852 0008 	ldr.w	r0, [r2, r8]
 800d3fc:	9307      	str	r3, [sp, #28]
 800d3fe:	9109      	str	r1, [sp, #36]	; 0x24
 800d400:	47c8      	blx	r9
 800d402:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d404:	f7ff fb44 	bl	800ca90 <_MixColors>
 800d408:	47b8      	blx	r7
 800d40a:	f1ba 0a01 	subs.w	sl, sl, #1
 800d40e:	f84b 0008 	str.w	r0, [fp, r8]
 800d412:	9b07      	ldr	r3, [sp, #28]
 800d414:	f108 0804 	add.w	r8, r8, #4
 800d418:	d1eb      	bne.n	800d3f2 <_DrawBitmap+0x696>
 800d41a:	9905      	ldr	r1, [sp, #20]
 800d41c:	4628      	mov	r0, r5
 800d41e:	4632      	mov	r2, r6
 800d420:	4623      	mov	r3, r4
 800d422:	f7ff fc13 	bl	800cc4c <_DrawBitmapLine.isra.6>
 800d426:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d428:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d42a:	440f      	add	r7, r1
 800d42c:	9719      	str	r7, [sp, #100]	; 0x64
 800d42e:	3601      	adds	r6, #1
 800d430:	e49c      	b.n	800cd6c <_DrawBitmap+0x10>
 800d432:	b00d      	add	sp, #52	; 0x34
 800d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d438:	20022a90 	.word	0x20022a90
 800d43c:	20022a8c 	.word	0x20022a8c

0800d440 <GUI_GetCursorLayer>:
 800d440:	2801      	cmp	r0, #1
 800d442:	bf9a      	itte	ls
 800d444:	4b02      	ldrls	r3, [pc, #8]	; (800d450 <GUI_GetCursorLayer+0x10>)
 800d446:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d44a:	2000      	movhi	r0, #0
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	20022a9c 	.word	0x20022a9c

0800d454 <GUI_GetLayerPosEx>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	460d      	mov	r5, r1
 800d458:	4614      	mov	r4, r2
 800d45a:	f7fe f9b5 	bl	800b7c8 <LCD_GetPosEx>
 800d45e:	b110      	cbz	r0, 800d466 <GUI_GetLayerPosEx+0x12>
 800d460:	2300      	movs	r3, #0
 800d462:	602b      	str	r3, [r5, #0]
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}

0800d468 <GUI_SelectLayer>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	4d08      	ldr	r5, [pc, #32]	; (800d48c <GUI_SelectLayer+0x24>)
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	2801      	cmp	r0, #1
 800d470:	4604      	mov	r4, r0
 800d472:	7c5e      	ldrb	r6, [r3, #17]
 800d474:	d808      	bhi.n	800d488 <GUI_SelectLayer+0x20>
 800d476:	f000 ff69 	bl	800e34c <GUI_DEVICE__GetpDriver>
 800d47a:	b128      	cbz	r0, 800d488 <GUI_SelectLayer+0x20>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	745c      	strb	r4, [r3, #17]
 800d480:	f000 f80a 	bl	800d498 <GUI_SelectLCD>
 800d484:	4b02      	ldr	r3, [pc, #8]	; (800d490 <GUI_SelectLayer+0x28>)
 800d486:	601c      	str	r4, [r3, #0]
 800d488:	4630      	mov	r0, r6
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	2000002c 	.word	0x2000002c
 800d490:	20022f6c 	.word	0x20022f6c

0800d494 <GUI_SetLayerPosEx>:
 800d494:	f7fe b968 	b.w	800b768 <LCD_SetPosEx>

0800d498 <GUI_SelectLCD>:
 800d498:	b508      	push	{r3, lr}
 800d49a:	f002 ff0d 	bl	80102b8 <LCD_SelectLCD>
 800d49e:	f7fe f8f3 	bl	800b688 <LCD_UpdateColorIndices>
 800d4a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d4a6:	f7fc bc85 	b.w	8009db4 <WM_Activate>

0800d4aa <GUI_RectsIntersect>:
 800d4aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d4ae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	dc14      	bgt.n	800d4e0 <GUI_RectsIntersect+0x36>
 800d4b6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800d4ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	dc0e      	bgt.n	800d4e0 <GUI_RectsIntersect+0x36>
 800d4c2:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d4c6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	dc08      	bgt.n	800d4e0 <GUI_RectsIntersect+0x36>
 800d4ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d4d2:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	bfcc      	ite	gt
 800d4da:	2000      	movgt	r0, #0
 800d4dc:	2001      	movle	r0, #1
 800d4de:	4770      	bx	lr
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	4770      	bx	lr

0800d4e4 <GUI_PID_GetState>:
 800d4e4:	4a11      	ldr	r2, [pc, #68]	; (800d52c <GUI_PID_GetState+0x48>)
 800d4e6:	4912      	ldr	r1, [pc, #72]	; (800d530 <GUI_PID_GetState+0x4c>)
 800d4e8:	6813      	ldr	r3, [r2, #0]
 800d4ea:	6809      	ldr	r1, [r1, #0]
 800d4ec:	428b      	cmp	r3, r1
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	4616      	mov	r6, r2
 800d4f4:	4d0f      	ldr	r5, [pc, #60]	; (800d534 <GUI_PID_GetState+0x50>)
 800d4f6:	d109      	bne.n	800d50c <GUI_PID_GetState+0x28>
 800d4f8:	42ab      	cmp	r3, r5
 800d4fa:	bf06      	itte	eq
 800d4fc:	333c      	addeq	r3, #60	; 0x3c
 800d4fe:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800d502:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800d506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d50a:	e00a      	b.n	800d522 <GUI_PID_GetState+0x3e>
 800d50c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d514:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800d518:	4293      	cmp	r3, r2
 800d51a:	bf18      	it	ne
 800d51c:	f103 050c 	addne.w	r5, r3, #12
 800d520:	6035      	str	r5, [r6, #0]
 800d522:	7a20      	ldrb	r0, [r4, #8]
 800d524:	3000      	adds	r0, #0
 800d526:	bf18      	it	ne
 800d528:	2001      	movne	r0, #1
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	20000024 	.word	0x20000024
 800d530:	20000020 	.word	0x20000020
 800d534:	20022aa8 	.word	0x20022aa8

0800d538 <GUI_PID_StoreState>:
 800d538:	4a21      	ldr	r2, [pc, #132]	; (800d5c0 <GUI_PID_StoreState+0x88>)
 800d53a:	4922      	ldr	r1, [pc, #136]	; (800d5c4 <GUI_PID_StoreState+0x8c>)
 800d53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d540:	6011      	str	r1, [r2, #0]
 800d542:	4f21      	ldr	r7, [pc, #132]	; (800d5c8 <GUI_PID_StoreState+0x90>)
 800d544:	4921      	ldr	r1, [pc, #132]	; (800d5cc <GUI_PID_StoreState+0x94>)
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	680c      	ldr	r4, [r1, #0]
 800d54a:	4603      	mov	r3, r0
 800d54c:	4820      	ldr	r0, [pc, #128]	; (800d5d0 <GUI_PID_StoreState+0x98>)
 800d54e:	4294      	cmp	r4, r2
 800d550:	468c      	mov	ip, r1
 800d552:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800d556:	d017      	beq.n	800d588 <GUI_PID_StoreState+0x50>
 800d558:	4282      	cmp	r2, r0
 800d55a:	bf14      	ite	ne
 800d55c:	f1a2 010c 	subne.w	r1, r2, #12
 800d560:	4631      	moveq	r1, r6
 800d562:	7a1d      	ldrb	r5, [r3, #8]
 800d564:	f891 8008 	ldrb.w	r8, [r1, #8]
 800d568:	45a8      	cmp	r8, r5
 800d56a:	d10d      	bne.n	800d588 <GUI_PID_StoreState+0x50>
 800d56c:	428c      	cmp	r4, r1
 800d56e:	d00b      	beq.n	800d588 <GUI_PID_StoreState+0x50>
 800d570:	4281      	cmp	r1, r0
 800d572:	bf14      	ite	ne
 800d574:	390c      	subne	r1, #12
 800d576:	4917      	ldreq	r1, [pc, #92]	; (800d5d4 <GUI_PID_StoreState+0x9c>)
 800d578:	7a09      	ldrb	r1, [r1, #8]
 800d57a:	42a9      	cmp	r1, r5
 800d57c:	d104      	bne.n	800d588 <GUI_PID_StoreState+0x50>
 800d57e:	4282      	cmp	r2, r0
 800d580:	bf14      	ite	ne
 800d582:	3a0c      	subne	r2, #12
 800d584:	4a13      	ldreq	r2, [pc, #76]	; (800d5d4 <GUI_PID_StoreState+0x9c>)
 800d586:	603a      	str	r2, [r7, #0]
 800d588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d58c:	683d      	ldr	r5, [r7, #0]
 800d58e:	42b5      	cmp	r5, r6
 800d590:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d594:	bf0c      	ite	eq
 800d596:	4d0e      	ldreq	r5, [pc, #56]	; (800d5d0 <GUI_PID_StoreState+0x98>)
 800d598:	350c      	addne	r5, #12
 800d59a:	42ac      	cmp	r4, r5
 800d59c:	603d      	str	r5, [r7, #0]
 800d59e:	d105      	bne.n	800d5ac <GUI_PID_StoreState+0x74>
 800d5a0:	42b4      	cmp	r4, r6
 800d5a2:	bf14      	ite	ne
 800d5a4:	340c      	addne	r4, #12
 800d5a6:	4c0a      	ldreq	r4, [pc, #40]	; (800d5d0 <GUI_PID_StoreState+0x98>)
 800d5a8:	f8cc 4000 	str.w	r4, [ip]
 800d5ac:	4a0a      	ldr	r2, [pc, #40]	; (800d5d8 <GUI_PID_StoreState+0xa0>)
 800d5ae:	6812      	ldr	r2, [r2, #0]
 800d5b0:	b10a      	cbz	r2, 800d5b6 <GUI_PID_StoreState+0x7e>
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	4790      	blx	r2
 800d5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ba:	f7ff b82d 	b.w	800c618 <GUI_SignalEvent>
 800d5be:	bf00      	nop
 800d5c0:	20022fd8 	.word	0x20022fd8
 800d5c4:	0800fb71 	.word	0x0800fb71
 800d5c8:	20000020 	.word	0x20000020
 800d5cc:	20000024 	.word	0x20000024
 800d5d0:	20022aa8 	.word	0x20022aa8
 800d5d4:	20022ae4 	.word	0x20022ae4
 800d5d8:	20022aa4 	.word	0x20022aa4

0800d5dc <GUI_PID_IsEmpty>:
 800d5dc:	4b03      	ldr	r3, [pc, #12]	; (800d5ec <GUI_PID_IsEmpty+0x10>)
 800d5de:	6818      	ldr	r0, [r3, #0]
 800d5e0:	4b03      	ldr	r3, [pc, #12]	; (800d5f0 <GUI_PID_IsEmpty+0x14>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	1ac3      	subs	r3, r0, r3
 800d5e6:	4258      	negs	r0, r3
 800d5e8:	4158      	adcs	r0, r3
 800d5ea:	4770      	bx	lr
 800d5ec:	20000024 	.word	0x20000024
 800d5f0:	20000020 	.word	0x20000020

0800d5f4 <GUI_StoreKey>:
 800d5f4:	4b02      	ldr	r3, [pc, #8]	; (800d600 <GUI_StoreKey+0xc>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	b902      	cbnz	r2, 800d5fc <GUI_StoreKey+0x8>
 800d5fa:	6018      	str	r0, [r3, #0]
 800d5fc:	f7ff b80c 	b.w	800c618 <GUI_SignalEvent>
 800d600:	20022af0 	.word	0x20022af0

0800d604 <GUI_MoveRect>:
 800d604:	b168      	cbz	r0, 800d622 <GUI_MoveRect+0x1e>
 800d606:	8803      	ldrh	r3, [r0, #0]
 800d608:	b289      	uxth	r1, r1
 800d60a:	440b      	add	r3, r1
 800d60c:	8003      	strh	r3, [r0, #0]
 800d60e:	8883      	ldrh	r3, [r0, #4]
 800d610:	4419      	add	r1, r3
 800d612:	8843      	ldrh	r3, [r0, #2]
 800d614:	8081      	strh	r1, [r0, #4]
 800d616:	b292      	uxth	r2, r2
 800d618:	4413      	add	r3, r2
 800d61a:	8043      	strh	r3, [r0, #2]
 800d61c:	88c3      	ldrh	r3, [r0, #6]
 800d61e:	441a      	add	r2, r3
 800d620:	80c2      	strh	r2, [r0, #6]
 800d622:	4770      	bx	lr

0800d624 <GUI_MergeRect>:
 800d624:	b510      	push	{r4, lr}
 800d626:	b338      	cbz	r0, 800d678 <GUI_MergeRect+0x54>
 800d628:	b309      	cbz	r1, 800d66e <GUI_MergeRect+0x4a>
 800d62a:	b30a      	cbz	r2, 800d670 <GUI_MergeRect+0x4c>
 800d62c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d630:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d634:	429c      	cmp	r4, r3
 800d636:	bfb8      	it	lt
 800d638:	4623      	movlt	r3, r4
 800d63a:	8003      	strh	r3, [r0, #0]
 800d63c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800d640:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d644:	429c      	cmp	r4, r3
 800d646:	bfb8      	it	lt
 800d648:	4623      	movlt	r3, r4
 800d64a:	8043      	strh	r3, [r0, #2]
 800d64c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800d650:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d654:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800d658:	429c      	cmp	r4, r3
 800d65a:	bfa8      	it	ge
 800d65c:	4623      	movge	r3, r4
 800d65e:	8083      	strh	r3, [r0, #4]
 800d660:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d664:	4299      	cmp	r1, r3
 800d666:	bfa8      	it	ge
 800d668:	460b      	movge	r3, r1
 800d66a:	80c3      	strh	r3, [r0, #6]
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	4611      	mov	r1, r2
 800d670:	680b      	ldr	r3, [r1, #0]
 800d672:	6003      	str	r3, [r0, #0]
 800d674:	684b      	ldr	r3, [r1, #4]
 800d676:	6043      	str	r3, [r0, #4]
 800d678:	bd10      	pop	{r4, pc}
	...

0800d67c <GUI_MULTIBUF_ConfirmEx>:
 800d67c:	4b08      	ldr	r3, [pc, #32]	; (800d6a0 <GUI_MULTIBUF_ConfirmEx+0x24>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	bf18      	it	ne
 800d684:	2000      	movne	r0, #0
 800d686:	4b07      	ldr	r3, [pc, #28]	; (800d6a4 <GUI_MULTIBUF_ConfirmEx+0x28>)
 800d688:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800d68c:	2a00      	cmp	r2, #0
 800d68e:	db06      	blt.n	800d69e <GUI_MULTIBUF_ConfirmEx+0x22>
 800d690:	4a05      	ldr	r2, [pc, #20]	; (800d6a8 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 800d692:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800d696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d69a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800d69e:	4770      	bx	lr
 800d6a0:	20022b04 	.word	0x20022b04
 800d6a4:	20022afc 	.word	0x20022afc
 800d6a8:	20022af4 	.word	0x20022af4

0800d6ac <GUI_GotoXY>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	; (800d6b8 <GUI_GotoXY+0xc>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	8458      	strh	r0, [r3, #34]	; 0x22
 800d6b2:	8499      	strh	r1, [r3, #36]	; 0x24
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	4770      	bx	lr
 800d6b8:	2000002c 	.word	0x2000002c

0800d6bc <GUI_GetDrawMode>:
 800d6bc:	4b01      	ldr	r3, [pc, #4]	; (800d6c4 <GUI_GetDrawMode+0x8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	7c18      	ldrb	r0, [r3, #16]
 800d6c2:	4770      	bx	lr
 800d6c4:	2000002c 	.word	0x2000002c

0800d6c8 <GUI_FillRoundedRect>:
 800d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6cc:	4d2f      	ldr	r5, [pc, #188]	; (800d78c <GUI_FillRoundedRect+0xc4>)
 800d6ce:	682e      	ldr	r6, [r5, #0]
 800d6d0:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
 800d6d2:	1947      	adds	r7, r0, r5
 800d6d4:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	eb01 0800 	add.w	r8, r1, r0
 800d6dc:	eb03 0a00 	add.w	sl, r3, r0
 800d6e0:	eb02 0905 	add.w	r9, r2, r5
 800d6e4:	a804      	add	r0, sp, #16
 800d6e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d6e8:	f8ad 7010 	strh.w	r7, [sp, #16]
 800d6ec:	f8ad 9014 	strh.w	r9, [sp, #20]
 800d6f0:	f8ad 8012 	strh.w	r8, [sp, #18]
 800d6f4:	f8ad a016 	strh.w	sl, [sp, #22]
 800d6f8:	f7fc fade 	bl	8009cb8 <WM__InitIVRSearch>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d041      	beq.n	800d784 <GUI_FillRoundedRect+0xbc>
 800d700:	fb04 f304 	mul.w	r3, r4, r4
 800d704:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 800d708:	9303      	str	r3, [sp, #12]
 800d70a:	ebc8 030a 	rsb	r3, r8, sl
 800d70e:	3301      	adds	r3, #1
 800d710:	455b      	cmp	r3, fp
 800d712:	db33      	blt.n	800d77c <GUI_FillRoundedRect+0xb4>
 800d714:	ebc7 0309 	rsb	r3, r7, r9
 800d718:	3301      	adds	r3, #1
 800d71a:	455b      	cmp	r3, fp
 800d71c:	db2e      	blt.n	800d77c <GUI_FillRoundedRect+0xb4>
 800d71e:	4626      	mov	r6, r4
 800d720:	4645      	mov	r5, r8
 800d722:	eb08 0304 	add.w	r3, r8, r4
 800d726:	429d      	cmp	r5, r3
 800d728:	dc20      	bgt.n	800d76c <GUI_FillRoundedRect+0xa4>
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	fb06 3016 	mls	r0, r6, r6, r3
 800d730:	f002 ff15 	bl	801055e <GUI__sqrt32>
 800d734:	eb07 0c04 	add.w	ip, r7, r4
 800d738:	ebc4 0309 	rsb	r3, r4, r9
 800d73c:	4403      	add	r3, r0
 800d73e:	ebc0 0c0c 	rsb	ip, r0, ip
 800d742:	4660      	mov	r0, ip
 800d744:	4629      	mov	r1, r5
 800d746:	461a      	mov	r2, r3
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	f8cd c008 	str.w	ip, [sp, #8]
 800d74e:	f7fe fa31 	bl	800bbb4 <LCD_DrawHLine>
 800d752:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d756:	9b01      	ldr	r3, [sp, #4]
 800d758:	ebc4 010a 	rsb	r1, r4, sl
 800d75c:	4431      	add	r1, r6
 800d75e:	4660      	mov	r0, ip
 800d760:	461a      	mov	r2, r3
 800d762:	f7fe fa27 	bl	800bbb4 <LCD_DrawHLine>
 800d766:	3501      	adds	r5, #1
 800d768:	3e01      	subs	r6, #1
 800d76a:	e7da      	b.n	800d722 <GUI_FillRoundedRect+0x5a>
 800d76c:	ebc4 030a 	rsb	r3, r4, sl
 800d770:	4638      	mov	r0, r7
 800d772:	4629      	mov	r1, r5
 800d774:	464a      	mov	r2, r9
 800d776:	3b01      	subs	r3, #1
 800d778:	f7fe fa68 	bl	800bc4c <LCD_FillRect>
 800d77c:	f7fc f9da 	bl	8009b34 <WM__GetNextIVR>
 800d780:	2800      	cmp	r0, #0
 800d782:	d1c2      	bne.n	800d70a <GUI_FillRoundedRect+0x42>
 800d784:	b007      	add	sp, #28
 800d786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78a:	bf00      	nop
 800d78c:	2000002c 	.word	0x2000002c

0800d790 <GUI_FillRect>:
 800d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d792:	4c0f      	ldr	r4, [pc, #60]	; (800d7d0 <GUI_FillRect+0x40>)
 800d794:	6824      	ldr	r4, [r4, #0]
 800d796:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d798:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800d79a:	1947      	adds	r7, r0, r5
 800d79c:	190e      	adds	r6, r1, r4
 800d79e:	4415      	add	r5, r2
 800d7a0:	441c      	add	r4, r3
 800d7a2:	4668      	mov	r0, sp
 800d7a4:	f8ad 7000 	strh.w	r7, [sp]
 800d7a8:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d7ac:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d7b0:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d7b4:	f7fc fa80 	bl	8009cb8 <WM__InitIVRSearch>
 800d7b8:	b140      	cbz	r0, 800d7cc <GUI_FillRect+0x3c>
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	4631      	mov	r1, r6
 800d7be:	462a      	mov	r2, r5
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	f7fe fa43 	bl	800bc4c <LCD_FillRect>
 800d7c6:	f7fc f9b5 	bl	8009b34 <WM__GetNextIVR>
 800d7ca:	e7f5      	b.n	800d7b8 <GUI_FillRect+0x28>
 800d7cc:	b003      	add	sp, #12
 800d7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d0:	2000002c 	.word	0x2000002c

0800d7d4 <_Color2Index>:
 800d7d4:	b508      	push	{r3, lr}
 800d7d6:	4b03      	ldr	r3, [pc, #12]	; (800d7e4 <_Color2Index+0x10>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4798      	blx	r3
 800d7e2:	bd08      	pop	{r3, pc}
 800d7e4:	20022b18 	.word	0x20022b18

0800d7e8 <_Index2Color>:
 800d7e8:	b508      	push	{r3, lr}
 800d7ea:	4b03      	ldr	r3, [pc, #12]	; (800d7f8 <_Index2Color+0x10>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	4798      	blx	r3
 800d7f6:	bd08      	pop	{r3, pc}
 800d7f8:	20022b18 	.word	0x20022b18

0800d7fc <_GetIndexMask>:
 800d7fc:	b508      	push	{r3, lr}
 800d7fe:	4b03      	ldr	r3, [pc, #12]	; (800d80c <_GetIndexMask+0x10>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	4798      	blx	r3
 800d80a:	bd08      	pop	{r3, pc}
 800d80c:	20022b18 	.word	0x20022b18

0800d810 <_SwapIndices>:
 800d810:	4b04      	ldr	r3, [pc, #16]	; (800d824 <_SwapIndices+0x14>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	6810      	ldr	r0, [r2, #0]
 800d81a:	6819      	ldr	r1, [r3, #0]
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	6018      	str	r0, [r3, #0]
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	2000002c 	.word	0x2000002c

0800d828 <_SwapColors>:
 800d828:	4a03      	ldr	r2, [pc, #12]	; (800d838 <_SwapColors+0x10>)
 800d82a:	4b04      	ldr	r3, [pc, #16]	; (800d83c <_SwapColors+0x14>)
 800d82c:	6810      	ldr	r0, [r2, #0]
 800d82e:	6819      	ldr	r1, [r3, #0]
 800d830:	6011      	str	r1, [r2, #0]
 800d832:	6018      	str	r0, [r3, #0]
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	20022b2c 	.word	0x20022b2c
 800d83c:	20000028 	.word	0x20000028

0800d840 <_DrawHLine>:
 800d840:	6800      	ldr	r0, [r0, #0]
 800d842:	b510      	push	{r4, lr}
 800d844:	b110      	cbz	r0, 800d84c <_DrawHLine+0xc>
 800d846:	68c4      	ldr	r4, [r0, #12]
 800d848:	68a4      	ldr	r4, [r4, #8]
 800d84a:	47a0      	blx	r4
 800d84c:	bd10      	pop	{r4, pc}

0800d84e <_DrawVLine>:
 800d84e:	6800      	ldr	r0, [r0, #0]
 800d850:	b510      	push	{r4, lr}
 800d852:	b110      	cbz	r0, 800d85a <_DrawVLine+0xc>
 800d854:	68c4      	ldr	r4, [r0, #12]
 800d856:	68e4      	ldr	r4, [r4, #12]
 800d858:	47a0      	blx	r4
 800d85a:	bd10      	pop	{r4, pc}

0800d85c <_FillRect>:
 800d85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d85e:	6800      	ldr	r0, [r0, #0]
 800d860:	b120      	cbz	r0, 800d86c <_FillRect+0x10>
 800d862:	68c5      	ldr	r5, [r0, #12]
 800d864:	9c06      	ldr	r4, [sp, #24]
 800d866:	9400      	str	r4, [sp, #0]
 800d868:	692c      	ldr	r4, [r5, #16]
 800d86a:	47a0      	blx	r4
 800d86c:	b003      	add	sp, #12
 800d86e:	bd30      	pop	{r4, r5, pc}

0800d870 <_GetPixelIndex>:
 800d870:	6800      	ldr	r0, [r0, #0]
 800d872:	b508      	push	{r3, lr}
 800d874:	b110      	cbz	r0, 800d87c <_GetPixelIndex+0xc>
 800d876:	68c3      	ldr	r3, [r0, #12]
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	4798      	blx	r3
 800d87c:	bd08      	pop	{r3, pc}

0800d87e <_SetPixelIndex>:
 800d87e:	6800      	ldr	r0, [r0, #0]
 800d880:	b510      	push	{r4, lr}
 800d882:	b110      	cbz	r0, 800d88a <_SetPixelIndex+0xc>
 800d884:	68c4      	ldr	r4, [r0, #12]
 800d886:	69a4      	ldr	r4, [r4, #24]
 800d888:	47a0      	blx	r4
 800d88a:	bd10      	pop	{r4, pc}

0800d88c <_XorPixel>:
 800d88c:	6800      	ldr	r0, [r0, #0]
 800d88e:	b508      	push	{r3, lr}
 800d890:	b110      	cbz	r0, 800d898 <_XorPixel+0xc>
 800d892:	68c3      	ldr	r3, [r0, #12]
 800d894:	69db      	ldr	r3, [r3, #28]
 800d896:	4798      	blx	r3
 800d898:	bd08      	pop	{r3, pc}

0800d89a <_GetDevData>:
 800d89a:	6800      	ldr	r0, [r0, #0]
 800d89c:	b508      	push	{r3, lr}
 800d89e:	b110      	cbz	r0, 800d8a6 <_GetDevData+0xc>
 800d8a0:	68c3      	ldr	r3, [r0, #12]
 800d8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a4:	4798      	blx	r3
 800d8a6:	bd08      	pop	{r3, pc}

0800d8a8 <_SetOrg>:
 800d8a8:	6800      	ldr	r0, [r0, #0]
 800d8aa:	b508      	push	{r3, lr}
 800d8ac:	b110      	cbz	r0, 800d8b4 <_SetOrg+0xc>
 800d8ae:	68c3      	ldr	r3, [r0, #12]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	4798      	blx	r3
 800d8b4:	bd08      	pop	{r3, pc}

0800d8b6 <_GetDevFunc>:
 800d8b6:	b508      	push	{r3, lr}
 800d8b8:	6803      	ldr	r3, [r0, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6003      	str	r3, [r0, #0]
 800d8be:	b11b      	cbz	r3, 800d8c8 <_GetDevFunc+0x12>
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c4:	4798      	blx	r3
 800d8c6:	bd08      	pop	{r3, pc}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	bd08      	pop	{r3, pc}

0800d8cc <_GetDevProp>:
 800d8cc:	6800      	ldr	r0, [r0, #0]
 800d8ce:	b508      	push	{r3, lr}
 800d8d0:	b110      	cbz	r0, 800d8d8 <_GetDevProp+0xc>
 800d8d2:	68c3      	ldr	r3, [r0, #12]
 800d8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d6:	4798      	blx	r3
 800d8d8:	bd08      	pop	{r3, pc}

0800d8da <_GetRect>:
 800d8da:	6800      	ldr	r0, [r0, #0]
 800d8dc:	b508      	push	{r3, lr}
 800d8de:	b110      	cbz	r0, 800d8e6 <_GetRect+0xc>
 800d8e0:	68c3      	ldr	r3, [r0, #12]
 800d8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e4:	4798      	blx	r3
 800d8e6:	bd08      	pop	{r3, pc}

0800d8e8 <_ManageAlpha>:
 800d8e8:	b538      	push	{r3, r4, r5, lr}
 800d8ea:	4b16      	ldr	r3, [pc, #88]	; (800d944 <_ManageAlpha+0x5c>)
 800d8ec:	4d16      	ldr	r5, [pc, #88]	; (800d948 <_ManageAlpha+0x60>)
 800d8ee:	78dc      	ldrb	r4, [r3, #3]
 800d8f0:	4b16      	ldr	r3, [pc, #88]	; (800d94c <_ManageAlpha+0x64>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	b90c      	cbnz	r4, 800d8fa <_ManageAlpha+0x12>
 800d8f6:	0e1b      	lsrs	r3, r3, #24
 800d8f8:	d009      	beq.n	800d90e <_ManageAlpha+0x26>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	b97b      	cbnz	r3, 800d91e <_ManageAlpha+0x36>
 800d8fe:	4b14      	ldr	r3, [pc, #80]	; (800d950 <_ManageAlpha+0x68>)
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	f000 fd71 	bl	800e3e8 <GUI_DEVICE_Link>
 800d906:	4b10      	ldr	r3, [pc, #64]	; (800d948 <_ManageAlpha+0x60>)
 800d908:	2201      	movs	r2, #1
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	e007      	b.n	800d91e <_ManageAlpha+0x36>
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d104      	bne.n	800d91e <_ManageAlpha+0x36>
 800d914:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <_ManageAlpha+0x68>)
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	f000 fd50 	bl	800e3bc <GUI_DEVICE_Unlink>
 800d91c:	602c      	str	r4, [r5, #0]
 800d91e:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <_ManageAlpha+0x6c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	b133      	cbz	r3, 800d932 <_ManageAlpha+0x4a>
 800d924:	f1c4 02ff 	rsb	r2, r4, #255	; 0xff
 800d928:	4353      	muls	r3, r2
 800d92a:	22ff      	movs	r2, #255	; 0xff
 800d92c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d930:	441c      	add	r4, r3
 800d932:	4d09      	ldr	r5, [pc, #36]	; (800d958 <_ManageAlpha+0x70>)
 800d934:	682b      	ldr	r3, [r5, #0]
 800d936:	429c      	cmp	r4, r3
 800d938:	d003      	beq.n	800d942 <_ManageAlpha+0x5a>
 800d93a:	b2e0      	uxtb	r0, r4
 800d93c:	f7fe ff04 	bl	800c748 <GUI_SetAlpha>
 800d940:	602c      	str	r4, [r5, #0]
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	20022b2c 	.word	0x20022b2c
 800d948:	20022b10 	.word	0x20022b10
 800d94c:	20000028 	.word	0x20000028
 800d950:	20022b18 	.word	0x20022b18
 800d954:	20022b0c 	.word	0x20022b0c
 800d958:	20022b24 	.word	0x20022b24

0800d95c <_SetDrawMode>:
 800d95c:	b510      	push	{r4, lr}
 800d95e:	4b08      	ldr	r3, [pc, #32]	; (800d980 <_SetDrawMode+0x24>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	7c1b      	ldrb	r3, [r3, #16]
 800d964:	4043      	eors	r3, r0
 800d966:	075b      	lsls	r3, r3, #29
 800d968:	4604      	mov	r4, r0
 800d96a:	d501      	bpl.n	800d970 <_SetDrawMode+0x14>
 800d96c:	f7ff ff5c 	bl	800d828 <_SwapColors>
 800d970:	f7ff ffba 	bl	800d8e8 <_ManageAlpha>
 800d974:	4b03      	ldr	r3, [pc, #12]	; (800d984 <_SetDrawMode+0x28>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4620      	mov	r0, r4
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	4798      	blx	r3
 800d97e:	bd10      	pop	{r4, pc}
 800d980:	2000002c 	.word	0x2000002c
 800d984:	20022b08 	.word	0x20022b08

0800d988 <_SetBkColor>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <_SetBkColor+0x28>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	7c1b      	ldrb	r3, [r3, #16]
 800d990:	075b      	lsls	r3, r3, #29
 800d992:	bf4c      	ite	mi
 800d994:	4b07      	ldrmi	r3, [pc, #28]	; (800d9b4 <_SetBkColor+0x2c>)
 800d996:	4b08      	ldrpl	r3, [pc, #32]	; (800d9b8 <_SetBkColor+0x30>)
 800d998:	6018      	str	r0, [r3, #0]
 800d99a:	4604      	mov	r4, r0
 800d99c:	f7ff ffa4 	bl	800d8e8 <_ManageAlpha>
 800d9a0:	4b06      	ldr	r3, [pc, #24]	; (800d9bc <_SetBkColor+0x34>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	4798      	blx	r3
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	bf00      	nop
 800d9b0:	2000002c 	.word	0x2000002c
 800d9b4:	20022b2c 	.word	0x20022b2c
 800d9b8:	20000028 	.word	0x20000028
 800d9bc:	20022b08 	.word	0x20022b08

0800d9c0 <_SetColor>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <_SetColor+0x28>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	7c1b      	ldrb	r3, [r3, #16]
 800d9c8:	075b      	lsls	r3, r3, #29
 800d9ca:	bf4c      	ite	mi
 800d9cc:	4b07      	ldrmi	r3, [pc, #28]	; (800d9ec <_SetColor+0x2c>)
 800d9ce:	4b08      	ldrpl	r3, [pc, #32]	; (800d9f0 <_SetColor+0x30>)
 800d9d0:	6018      	str	r0, [r3, #0]
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	f7ff ff88 	bl	800d8e8 <_ManageAlpha>
 800d9d8:	4b06      	ldr	r3, [pc, #24]	; (800d9f4 <_SetColor+0x34>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4798      	blx	r3
 800d9e4:	bd10      	pop	{r4, pc}
 800d9e6:	bf00      	nop
 800d9e8:	2000002c 	.word	0x2000002c
 800d9ec:	20000028 	.word	0x20000028
 800d9f0:	20022b2c 	.word	0x20022b2c
 800d9f4:	20022b08 	.word	0x20022b08

0800d9f8 <_DrawBitmap>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	b087      	sub	sp, #28
 800d9fe:	4606      	mov	r6, r0
 800da00:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800da04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800da06:	f1bc 0f01 	cmp.w	ip, #1
 800da0a:	4689      	mov	r9, r1
 800da0c:	4690      	mov	r8, r2
 800da0e:	461f      	mov	r7, r3
 800da10:	d163      	bne.n	800dada <_DrawBitmap+0xe2>
 800da12:	483c      	ldr	r0, [pc, #240]	; (800db04 <_DrawBitmap+0x10c>)
 800da14:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800da16:	f8d0 a000 	ldr.w	sl, [r0]
 800da1a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800da1e:	4285      	cmp	r5, r0
 800da20:	d15b      	bne.n	800dada <_DrawBitmap+0xe2>
 800da22:	f89a 0010 	ldrb.w	r0, [sl, #16]
 800da26:	2800      	cmp	r0, #0
 800da28:	d157      	bne.n	800dada <_DrawBitmap+0xe2>
 800da2a:	2002      	movs	r0, #2
 800da2c:	f88a 0010 	strb.w	r0, [sl, #16]
 800da30:	f8d6 a000 	ldr.w	sl, [r6]
 800da34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800da36:	f8da e00c 	ldr.w	lr, [sl, #12]
 800da3a:	9402      	str	r4, [sp, #8]
 800da3c:	e88d 1020 	stmia.w	sp, {r5, ip}
 800da40:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800da42:	9503      	str	r5, [sp, #12]
 800da44:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800da46:	9504      	str	r5, [sp, #16]
 800da48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800da4a:	9505      	str	r5, [sp, #20]
 800da4c:	f8de c004 	ldr.w	ip, [lr, #4]
 800da50:	4650      	mov	r0, sl
 800da52:	47e0      	blx	ip
 800da54:	f7ff fee8 	bl	800d828 <_SwapColors>
 800da58:	f7ff feda 	bl	800d810 <_SwapIndices>
 800da5c:	f7ff ff44 	bl	800d8e8 <_ManageAlpha>
 800da60:	4b29      	ldr	r3, [pc, #164]	; (800db08 <_DrawBitmap+0x110>)
 800da62:	f8d6 b000 	ldr.w	fp, [r6]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	b953      	cbnz	r3, 800da80 <_DrawBitmap+0x88>
 800da6a:	f7ff fedd 	bl	800d828 <_SwapColors>
 800da6e:	f7ff fecf 	bl	800d810 <_SwapIndices>
 800da72:	f7ff ff39 	bl	800d8e8 <_ManageAlpha>
 800da76:	4b23      	ldr	r3, [pc, #140]	; (800db04 <_DrawBitmap+0x10c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2200      	movs	r2, #0
 800da7c:	741a      	strb	r2, [r3, #16]
 800da7e:	e03e      	b.n	800dafe <_DrawBitmap+0x106>
 800da80:	4b22      	ldr	r3, [pc, #136]	; (800db0c <_DrawBitmap+0x114>)
 800da82:	681e      	ldr	r6, [r3, #0]
 800da84:	42b4      	cmp	r4, r6
 800da86:	bfcc      	ite	gt
 800da88:	00f7      	lslgt	r7, r6, #3
 800da8a:	4626      	movle	r6, r4
 800da8c:	4642      	mov	r2, r8
 800da8e:	4b1e      	ldr	r3, [pc, #120]	; (800db08 <_DrawBitmap+0x110>)
 800da90:	6819      	ldr	r1, [r3, #0]
 800da92:	2300      	movs	r3, #0
 800da94:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800da96:	5ce8      	ldrb	r0, [r5, r3]
 800da98:	43c0      	mvns	r0, r0
 800da9a:	54c8      	strb	r0, [r1, r3]
 800da9c:	3301      	adds	r3, #1
 800da9e:	42b3      	cmp	r3, r6
 800daa0:	d1f8      	bne.n	800da94 <_DrawBitmap+0x9c>
 800daa2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800daa4:	f8db 000c 	ldr.w	r0, [fp, #12]
 800daa8:	9504      	str	r5, [sp, #16]
 800daaa:	2301      	movs	r3, #1
 800daac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	9103      	str	r1, [sp, #12]
 800dab4:	9505      	str	r5, [sp, #20]
 800dab6:	9402      	str	r4, [sp, #8]
 800dab8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800dabc:	463b      	mov	r3, r7
 800dabe:	4658      	mov	r0, fp
 800dac0:	4649      	mov	r1, r9
 800dac2:	f102 0a01 	add.w	sl, r2, #1
 800dac6:	47e0      	blx	ip
 800dac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800dacc:	4443      	add	r3, r8
 800dace:	4425      	add	r5, r4
 800dad0:	4553      	cmp	r3, sl
 800dad2:	9513      	str	r5, [sp, #76]	; 0x4c
 800dad4:	d0c9      	beq.n	800da6a <_DrawBitmap+0x72>
 800dad6:	4652      	mov	r2, sl
 800dad8:	e7d9      	b.n	800da8e <_DrawBitmap+0x96>
 800dada:	6830      	ldr	r0, [r6, #0]
 800dadc:	b178      	cbz	r0, 800dafe <_DrawBitmap+0x106>
 800dade:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dae0:	68c3      	ldr	r3, [r0, #12]
 800dae2:	9402      	str	r4, [sp, #8]
 800dae4:	e88d 1020 	stmia.w	sp, {r5, ip}
 800dae8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800daea:	9503      	str	r5, [sp, #12]
 800daec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800daee:	9504      	str	r5, [sp, #16]
 800daf0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800daf2:	9505      	str	r5, [sp, #20]
 800daf4:	685c      	ldr	r4, [r3, #4]
 800daf6:	4649      	mov	r1, r9
 800daf8:	4642      	mov	r2, r8
 800dafa:	463b      	mov	r3, r7
 800dafc:	47a0      	blx	r4
 800dafe:	b007      	add	sp, #28
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	2000002c 	.word	0x2000002c
 800db08:	20022b14 	.word	0x20022b14
 800db0c:	20022b28 	.word	0x20022b28

0800db10 <_OnExit>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4c06      	ldr	r4, [pc, #24]	; (800db2c <_OnExit+0x1c>)
 800db14:	2500      	movs	r5, #0
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	f001 f8e2 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800db1c:	6025      	str	r5, [r4, #0]
 800db1e:	4c04      	ldr	r4, [pc, #16]	; (800db30 <_OnExit+0x20>)
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	f001 f8dd 	bl	800ece0 <GUI_ALLOC_FreeFixedBlock>
 800db26:	6025      	str	r5, [r4, #0]
 800db28:	bd38      	pop	{r3, r4, r5, pc}
 800db2a:	bf00      	nop
 800db2c:	20022b18 	.word	0x20022b18
 800db30:	20022b14 	.word	0x20022b14

0800db34 <_Color2IndexBulk>:
 800db34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db38:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800dbb4 <_Color2IndexBulk+0x80>
 800db3c:	f8d8 5000 	ldr.w	r5, [r8]
 800db40:	682d      	ldr	r5, [r5, #0]
 800db42:	692d      	ldr	r5, [r5, #16]
 800db44:	692d      	ldr	r5, [r5, #16]
 800db46:	4607      	mov	r7, r0
 800db48:	460e      	mov	r6, r1
 800db4a:	4614      	mov	r4, r2
 800db4c:	b115      	cbz	r5, 800db54 <_Color2IndexBulk+0x20>
 800db4e:	47a8      	blx	r5
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	2b02      	cmp	r3, #2
 800db56:	d011      	beq.n	800db7c <_Color2IndexBulk+0x48>
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d01d      	beq.n	800db98 <_Color2IndexBulk+0x64>
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d127      	bne.n	800dbb0 <_Color2IndexBulk+0x7c>
 800db60:	f8d8 3000 	ldr.w	r3, [r8]
 800db64:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4798      	blx	r3
 800db70:	5570      	strb	r0, [r6, r5]
 800db72:	3501      	adds	r5, #1
 800db74:	42ac      	cmp	r4, r5
 800db76:	d1f3      	bne.n	800db60 <_Color2IndexBulk+0x2c>
 800db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7c:	f8d8 3000 	ldr.w	r3, [r8]
 800db80:	f857 0b04 	ldr.w	r0, [r7], #4
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4798      	blx	r3
 800db8c:	3c01      	subs	r4, #1
 800db8e:	f826 0b02 	strh.w	r0, [r6], #2
 800db92:	d1f3      	bne.n	800db7c <_Color2IndexBulk+0x48>
 800db94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db98:	f8d8 3000 	ldr.w	r3, [r8]
 800db9c:	5978      	ldr	r0, [r7, r5]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4798      	blx	r3
 800dba6:	3c01      	subs	r4, #1
 800dba8:	5170      	str	r0, [r6, r5]
 800dbaa:	f105 0504 	add.w	r5, r5, #4
 800dbae:	d1f3      	bne.n	800db98 <_Color2IndexBulk+0x64>
 800dbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb4:	20022b18 	.word	0x20022b18

0800dbb8 <_Index2ColorBulk>:
 800dbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbbc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800dc38 <_Index2ColorBulk+0x80>
 800dbc0:	f8d8 5000 	ldr.w	r5, [r8]
 800dbc4:	682d      	ldr	r5, [r5, #0]
 800dbc6:	692d      	ldr	r5, [r5, #16]
 800dbc8:	696d      	ldr	r5, [r5, #20]
 800dbca:	4607      	mov	r7, r0
 800dbcc:	460e      	mov	r6, r1
 800dbce:	4614      	mov	r4, r2
 800dbd0:	b115      	cbz	r5, 800dbd8 <_Index2ColorBulk+0x20>
 800dbd2:	47a8      	blx	r5
 800dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d011      	beq.n	800dc00 <_Index2ColorBulk+0x48>
 800dbdc:	2b04      	cmp	r3, #4
 800dbde:	d01d      	beq.n	800dc1c <_Index2ColorBulk+0x64>
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d127      	bne.n	800dc34 <_Index2ColorBulk+0x7c>
 800dbe4:	f8d8 3000 	ldr.w	r3, [r8]
 800dbe8:	5d78      	ldrb	r0, [r7, r5]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	4798      	blx	r3
 800dbf2:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800dbf6:	3501      	adds	r5, #1
 800dbf8:	42ac      	cmp	r4, r5
 800dbfa:	d1f3      	bne.n	800dbe4 <_Index2ColorBulk+0x2c>
 800dbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc00:	f8d8 3000 	ldr.w	r3, [r8]
 800dc04:	f837 0b02 	ldrh.w	r0, [r7], #2
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	4798      	blx	r3
 800dc10:	3c01      	subs	r4, #1
 800dc12:	f846 0b04 	str.w	r0, [r6], #4
 800dc16:	d1f3      	bne.n	800dc00 <_Index2ColorBulk+0x48>
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	f8d8 3000 	ldr.w	r3, [r8]
 800dc20:	5978      	ldr	r0, [r7, r5]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4798      	blx	r3
 800dc2a:	3c01      	subs	r4, #1
 800dc2c:	5170      	str	r0, [r6, r5]
 800dc2e:	f105 0504 	add.w	r5, r5, #4
 800dc32:	d1f3      	bne.n	800dc1c <_Index2ColorBulk+0x64>
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	20022b18 	.word	0x20022b18

0800dc3c <GUI_EnableAlpha>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	4d19      	ldr	r5, [pc, #100]	; (800dca4 <GUI_EnableAlpha+0x68>)
 800dc40:	682e      	ldr	r6, [r5, #0]
 800dc42:	4604      	mov	r4, r0
 800dc44:	b9de      	cbnz	r6, 800dc7e <GUI_EnableAlpha+0x42>
 800dc46:	4818      	ldr	r0, [pc, #96]	; (800dca8 <GUI_EnableAlpha+0x6c>)
 800dc48:	4b18      	ldr	r3, [pc, #96]	; (800dcac <GUI_EnableAlpha+0x70>)
 800dc4a:	6003      	str	r3, [r0, #0]
 800dc4c:	f000 fcbe 	bl	800e5cc <GUI__RegisterExit>
 800dc50:	2001      	movs	r0, #1
 800dc52:	f7fe fd79 	bl	800c748 <GUI_SetAlpha>
 800dc56:	b2c0      	uxtb	r0, r0
 800dc58:	f7fe fd76 	bl	800c748 <GUI_SetAlpha>
 800dc5c:	4914      	ldr	r1, [pc, #80]	; (800dcb0 <GUI_EnableAlpha+0x74>)
 800dc5e:	4815      	ldr	r0, [pc, #84]	; (800dcb4 <GUI_EnableAlpha+0x78>)
 800dc60:	4632      	mov	r2, r6
 800dc62:	4633      	mov	r3, r6
 800dc64:	f000 fb84 	bl	800e370 <GUI_DEVICE_Create>
 800dc68:	6028      	str	r0, [r5, #0]
 800dc6a:	f7fd fe53 	bl	800b914 <LCD_GetVXSizeMax>
 800dc6e:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <GUI_EnableAlpha+0x7c>)
 800dc70:	3007      	adds	r0, #7
 800dc72:	08c0      	lsrs	r0, r0, #3
 800dc74:	6018      	str	r0, [r3, #0]
 800dc76:	f001 f993 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800dc7a:	4b10      	ldr	r3, [pc, #64]	; (800dcbc <GUI_EnableAlpha+0x80>)
 800dc7c:	6018      	str	r0, [r3, #0]
 800dc7e:	4b10      	ldr	r3, [pc, #64]	; (800dcc0 <GUI_EnableAlpha+0x84>)
 800dc80:	b13c      	cbz	r4, 800dc92 <GUI_EnableAlpha+0x56>
 800dc82:	6818      	ldr	r0, [r3, #0]
 800dc84:	b950      	cbnz	r0, 800dc9c <GUI_EnableAlpha+0x60>
 800dc86:	4a0f      	ldr	r2, [pc, #60]	; (800dcc4 <GUI_EnableAlpha+0x88>)
 800dc88:	6811      	ldr	r1, [r2, #0]
 800dc8a:	6019      	str	r1, [r3, #0]
 800dc8c:	4b0e      	ldr	r3, [pc, #56]	; (800dcc8 <GUI_EnableAlpha+0x8c>)
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	bd70      	pop	{r4, r5, r6, pc}
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	b122      	cbz	r2, 800dca0 <GUI_EnableAlpha+0x64>
 800dc96:	490b      	ldr	r1, [pc, #44]	; (800dcc4 <GUI_EnableAlpha+0x88>)
 800dc98:	601c      	str	r4, [r3, #0]
 800dc9a:	600a      	str	r2, [r1, #0]
 800dc9c:	2001      	movs	r0, #1
 800dc9e:	bd70      	pop	{r4, r5, r6, pc}
 800dca0:	4620      	mov	r0, r4
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	20022b18 	.word	0x20022b18
 800dca8:	20022b1c 	.word	0x20022b1c
 800dcac:	0800db11 	.word	0x0800db11
 800dcb0:	08012e50 	.word	0x08012e50
 800dcb4:	08012e68 	.word	0x08012e68
 800dcb8:	20022b28 	.word	0x20022b28
 800dcbc:	20022b14 	.word	0x20022b14
 800dcc0:	20022b08 	.word	0x20022b08
 800dcc4:	20000014 	.word	0x20000014
 800dcc8:	08012e44 	.word	0x08012e44

0800dccc <_SetLineColor>:
 800dccc:	4b1e      	ldr	r3, [pc, #120]	; (800dd48 <_SetLineColor+0x7c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	7e9b      	ldrb	r3, [r3, #26]
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	2b03      	cmp	r3, #3
 800dcd6:	d832      	bhi.n	800dd3e <_SetLineColor+0x72>
 800dcd8:	e8df f003 	tbb	[pc, r3]
 800dcdc:	221a0d02 	.word	0x221a0d02
 800dce0:	4b1a      	ldr	r3, [pc, #104]	; (800dd4c <_SetLineColor+0x80>)
 800dce2:	3006      	adds	r0, #6
 800dce4:	4003      	ands	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	da03      	bge.n	800dcf2 <_SetLineColor+0x26>
 800dcea:	3b01      	subs	r3, #1
 800dcec:	f063 030f 	orn	r3, r3, #15
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	2b0b      	cmp	r3, #11
 800dcf4:	e008      	b.n	800dd08 <_SetLineColor+0x3c>
 800dcf6:	4b16      	ldr	r3, [pc, #88]	; (800dd50 <_SetLineColor+0x84>)
 800dcf8:	4003      	ands	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	da03      	bge.n	800dd06 <_SetLineColor+0x3a>
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	f063 0303 	orn	r3, r3, #3
 800dd04:	3301      	adds	r3, #1
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	bfcc      	ite	gt
 800dd0a:	2000      	movgt	r0, #0
 800dd0c:	2001      	movle	r0, #1
 800dd0e:	4770      	bx	lr
 800dd10:	2314      	movs	r3, #20
 800dd12:	fb90 f2f3 	sdiv	r2, r0, r3
 800dd16:	fb03 0012 	mls	r0, r3, r2, r0
 800dd1a:	280b      	cmp	r0, #11
 800dd1c:	dc09      	bgt.n	800dd32 <_SetLineColor+0x66>
 800dd1e:	e010      	b.n	800dd42 <_SetLineColor+0x76>
 800dd20:	2318      	movs	r3, #24
 800dd22:	fb90 f2f3 	sdiv	r2, r0, r3
 800dd26:	fb03 0012 	mls	r0, r3, r2, r0
 800dd2a:	280b      	cmp	r0, #11
 800dd2c:	dd09      	ble.n	800dd42 <_SetLineColor+0x76>
 800dd2e:	f020 0004 	bic.w	r0, r0, #4
 800dd32:	3810      	subs	r0, #16
 800dd34:	2801      	cmp	r0, #1
 800dd36:	bf8c      	ite	hi
 800dd38:	2000      	movhi	r0, #0
 800dd3a:	2001      	movls	r0, #1
 800dd3c:	4770      	bx	lr
 800dd3e:	2000      	movs	r0, #0
 800dd40:	4770      	bx	lr
 800dd42:	2001      	movs	r0, #1
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	2000002c 	.word	0x2000002c
 800dd4c:	8000000f 	.word	0x8000000f
 800dd50:	80000003 	.word	0x80000003

0800dd54 <GUI_sin>:
 800dd54:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800dd58:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800dd5c:	bfc6      	itte	gt
 800dd5e:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 800dd62:	2101      	movgt	r1, #1
 800dd64:	2100      	movle	r1, #0
 800dd66:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800dd6a:	bfc8      	it	gt
 800dd6c:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 800dd70:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800dd74:	b510      	push	{r4, lr}
 800dd76:	1182      	asrs	r2, r0, #6
 800dd78:	4c0b      	ldr	r4, [pc, #44]	; (800dda8 <GUI_sin+0x54>)
 800dd7a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 800dd84:	2b40      	cmp	r3, #64	; 0x40
 800dd86:	fb00 f003 	mul.w	r0, r0, r3
 800dd8a:	d008      	beq.n	800dd9e <GUI_sin+0x4a>
 800dd8c:	2a10      	cmp	r2, #16
 800dd8e:	d006      	beq.n	800dd9e <GUI_sin+0x4a>
 800dd90:	3201      	adds	r2, #1
 800dd92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800dd96:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 800dd9a:	fb03 0002 	mla	r0, r3, r2, r0
 800dd9e:	3020      	adds	r0, #32
 800dda0:	0980      	lsrs	r0, r0, #6
 800dda2:	b101      	cbz	r1, 800dda6 <GUI_sin+0x52>
 800dda4:	4240      	negs	r0, r0
 800dda6:	bd10      	pop	{r4, pc}
 800dda8:	08012e9c 	.word	0x08012e9c

0800ddac <GUI_cos>:
 800ddac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ddb0:	f7ff bfd0 	b.w	800dd54 <GUI_sin>

0800ddb4 <GL_DrawLine1Ex>:
 800ddb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ddbc:	1a17      	subs	r7, r2, r0
 800ddbe:	1a5c      	subs	r4, r3, r1
 800ddc0:	ea54 0c07 	orrs.w	ip, r4, r7
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	460e      	mov	r6, r1
 800ddc8:	f8d8 b000 	ldr.w	fp, [r8]
 800ddcc:	d104      	bne.n	800ddd8 <GL_DrawLine1Ex+0x24>
 800ddce:	b003      	add	sp, #12
 800ddd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	f002 bfde 	b.w	8010d94 <GL_DrawPoint>
 800ddd8:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 800dddc:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 800dde0:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800dde4:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800dde8:	4288      	cmp	r0, r1
 800ddea:	db04      	blt.n	800ddf6 <GL_DrawLine1Ex+0x42>
 800ddec:	4621      	mov	r1, r4
 800ddee:	463c      	mov	r4, r7
 800ddf0:	460f      	mov	r7, r1
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	e006      	b.n	800de04 <GL_DrawLine1Ex+0x50>
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	4635      	mov	r5, r6
 800de00:	460e      	mov	r6, r1
 800de02:	2101      	movs	r1, #1
 800de04:	9100      	str	r1, [sp, #0]
 800de06:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800de0a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800de0e:	428c      	cmp	r4, r1
 800de10:	d008      	beq.n	800de24 <GL_DrawLine1Ex+0x70>
 800de12:	461e      	mov	r6, r3
 800de14:	462b      	mov	r3, r5
 800de16:	4264      	negs	r4, r4
 800de18:	4615      	mov	r5, r2
 800de1a:	427f      	negs	r7, r7
 800de1c:	461a      	mov	r2, r3
 800de1e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800de22:	e001      	b.n	800de28 <GL_DrawLine1Ex+0x74>
 800de24:	f04f 0a01 	mov.w	sl, #1
 800de28:	2f00      	cmp	r7, #0
 800de2a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800df74 <GL_DrawLine1Ex+0x1c0>
 800de2e:	d13e      	bne.n	800deae <GL_DrawLine1Ex+0xfa>
 800de30:	9b00      	ldr	r3, [sp, #0]
 800de32:	b1d3      	cbz	r3, 800de6a <GL_DrawLine1Ex+0xb6>
 800de34:	f8d9 3000 	ldr.w	r3, [r9]
 800de38:	7e9b      	ldrb	r3, [r3, #26]
 800de3a:	b98b      	cbnz	r3, 800de60 <GL_DrawLine1Ex+0xac>
 800de3c:	4630      	mov	r0, r6
 800de3e:	4629      	mov	r1, r5
 800de40:	b003      	add	sp, #12
 800de42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de46:	f7fd bedb 	b.w	800bc00 <LCD_DrawVLine>
 800de4a:	f7ff ff3f 	bl	800dccc <_SetLineColor>
 800de4e:	b930      	cbnz	r0, 800de5e <GL_DrawLine1Ex+0xaa>
 800de50:	f8d9 3000 	ldr.w	r3, [r9]
 800de54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de56:	4630      	mov	r0, r6
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	1979      	adds	r1, r7, r5
 800de5c:	4798      	blx	r3
 800de5e:	3701      	adds	r7, #1
 800de60:	42a7      	cmp	r7, r4
 800de62:	eb07 000b 	add.w	r0, r7, fp
 800de66:	ddf0      	ble.n	800de4a <GL_DrawLine1Ex+0x96>
 800de68:	e01d      	b.n	800dea6 <GL_DrawLine1Ex+0xf2>
 800de6a:	f8d9 3000 	ldr.w	r3, [r9]
 800de6e:	7e99      	ldrb	r1, [r3, #26]
 800de70:	b111      	cbz	r1, 800de78 <GL_DrawLine1Ex+0xc4>
 800de72:	f8dd a000 	ldr.w	sl, [sp]
 800de76:	e012      	b.n	800de9e <GL_DrawLine1Ex+0xea>
 800de78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7a:	4628      	mov	r0, r5
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4631      	mov	r1, r6
 800de80:	4798      	blx	r3
 800de82:	e074      	b.n	800df6e <GL_DrawLine1Ex+0x1ba>
 800de84:	f7ff ff22 	bl	800dccc <_SetLineColor>
 800de88:	b938      	cbnz	r0, 800de9a <GL_DrawLine1Ex+0xe6>
 800de8a:	f8d9 3000 	ldr.w	r3, [r9]
 800de8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de90:	eb0a 0005 	add.w	r0, sl, r5
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	4631      	mov	r1, r6
 800de98:	4798      	blx	r3
 800de9a:	f10a 0a01 	add.w	sl, sl, #1
 800de9e:	45a2      	cmp	sl, r4
 800dea0:	eb0a 000b 	add.w	r0, sl, fp
 800dea4:	ddee      	ble.n	800de84 <GL_DrawLine1Ex+0xd0>
 800dea6:	3801      	subs	r0, #1
 800dea8:	f8c8 0000 	str.w	r0, [r8]
 800deac:	e05f      	b.n	800df6e <GL_DrawLine1Ex+0x1ba>
 800deae:	f8d9 1000 	ldr.w	r1, [r9]
 800deb2:	f04f 0202 	mov.w	r2, #2
 800deb6:	7e89      	ldrb	r1, [r1, #26]
 800deb8:	fb94 f2f2 	sdiv	r2, r4, r2
 800debc:	bfb8      	it	lt
 800debe:	4252      	neglt	r2, r2
 800dec0:	b9d9      	cbnz	r1, 800defa <GL_DrawLine1Ex+0x146>
 800dec2:	4693      	mov	fp, r2
 800dec4:	46a8      	mov	r8, r5
 800dec6:	ebc5 0308 	rsb	r3, r5, r8
 800deca:	42a3      	cmp	r3, r4
 800decc:	dc4f      	bgt.n	800df6e <GL_DrawLine1Ex+0x1ba>
 800dece:	9b00      	ldr	r3, [sp, #0]
 800ded0:	fb9b f1f4 	sdiv	r1, fp, r4
 800ded4:	4431      	add	r1, r6
 800ded6:	b92b      	cbnz	r3, 800dee4 <GL_DrawLine1Ex+0x130>
 800ded8:	f8d9 3000 	ldr.w	r3, [r9]
 800dedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dede:	4640      	mov	r0, r8
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	e005      	b.n	800def0 <GL_DrawLine1Ex+0x13c>
 800dee4:	f8d9 3000 	ldr.w	r3, [r9]
 800dee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	4608      	mov	r0, r1
 800deee:	4641      	mov	r1, r8
 800def0:	4798      	blx	r3
 800def2:	f108 0801 	add.w	r8, r8, #1
 800def6:	44bb      	add	fp, r7
 800def8:	e7e5      	b.n	800dec6 <GL_DrawLine1Ex+0x112>
 800defa:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800defe:	bf04      	itt	eq
 800df00:	eb04 010b 	addeq.w	r1, r4, fp
 800df04:	f8c8 1000 	streq.w	r1, [r8]
 800df08:	9201      	str	r2, [sp, #4]
 800df0a:	46ab      	mov	fp, r5
 800df0c:	ebc5 010b 	rsb	r1, r5, fp
 800df10:	42a1      	cmp	r1, r4
 800df12:	f8d8 0000 	ldr.w	r0, [r8]
 800df16:	dc1e      	bgt.n	800df56 <GL_DrawLine1Ex+0x1a2>
 800df18:	4450      	add	r0, sl
 800df1a:	f8c8 0000 	str.w	r0, [r8]
 800df1e:	f7ff fed5 	bl	800dccc <_SetLineColor>
 800df22:	b980      	cbnz	r0, 800df46 <GL_DrawLine1Ex+0x192>
 800df24:	f8dd c004 	ldr.w	ip, [sp, #4]
 800df28:	f8d9 0000 	ldr.w	r0, [r9]
 800df2c:	9b00      	ldr	r3, [sp, #0]
 800df2e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800df30:	fb9c f1f4 	sdiv	r1, ip, r4
 800df34:	4431      	add	r1, r6
 800df36:	b913      	cbnz	r3, 800df3e <GL_DrawLine1Ex+0x18a>
 800df38:	6843      	ldr	r3, [r0, #4]
 800df3a:	4658      	mov	r0, fp
 800df3c:	e002      	b.n	800df44 <GL_DrawLine1Ex+0x190>
 800df3e:	6843      	ldr	r3, [r0, #4]
 800df40:	4608      	mov	r0, r1
 800df42:	4659      	mov	r1, fp
 800df44:	4798      	blx	r3
 800df46:	f8dd c004 	ldr.w	ip, [sp, #4]
 800df4a:	44bc      	add	ip, r7
 800df4c:	f10b 0b01 	add.w	fp, fp, #1
 800df50:	f8cd c004 	str.w	ip, [sp, #4]
 800df54:	e7da      	b.n	800df0c <GL_DrawLine1Ex+0x158>
 800df56:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800df5a:	bf04      	itt	eq
 800df5c:	1824      	addeq	r4, r4, r0
 800df5e:	f8c8 4000 	streq.w	r4, [r8]
 800df62:	f8d8 2000 	ldr.w	r2, [r8]
 800df66:	ebca 0302 	rsb	r3, sl, r2
 800df6a:	f8c8 3000 	str.w	r3, [r8]
 800df6e:	b003      	add	sp, #12
 800df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df74:	2000002c 	.word	0x2000002c

0800df78 <GL_DrawLineEx>:
 800df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	4d67      	ldr	r5, [pc, #412]	; (800e11c <GL_DrawLineEx+0x1a4>)
 800df7e:	682c      	ldr	r4, [r5, #0]
 800df80:	f894 b018 	ldrb.w	fp, [r4, #24]
 800df84:	f1bb 0f01 	cmp.w	fp, #1
 800df88:	b087      	sub	sp, #28
 800df8a:	4681      	mov	r9, r0
 800df8c:	4688      	mov	r8, r1
 800df8e:	4617      	mov	r7, r2
 800df90:	461e      	mov	r6, r3
 800df92:	46aa      	mov	sl, r5
 800df94:	d104      	bne.n	800dfa0 <GL_DrawLineEx+0x28>
 800df96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800df98:	9400      	str	r4, [sp, #0]
 800df9a:	f7ff ff0b 	bl	800ddb4 <GL_DrawLine1Ex>
 800df9e:	e0ba      	b.n	800e116 <GL_DrawLineEx+0x19e>
 800dfa0:	1a84      	subs	r4, r0, r2
 800dfa2:	1acd      	subs	r5, r1, r3
 800dfa4:	ea54 0305 	orrs.w	r3, r4, r5
 800dfa8:	f000 80b5 	beq.w	800e116 <GL_DrawLineEx+0x19e>
 800dfac:	2c00      	cmp	r4, #0
 800dfae:	bfba      	itte	lt
 800dfb0:	4264      	neglt	r4, r4
 800dfb2:	2301      	movlt	r3, #1
 800dfb4:	2300      	movge	r3, #0
 800dfb6:	2d00      	cmp	r5, #0
 800dfb8:	bfbc      	itt	lt
 800dfba:	426d      	neglt	r5, r5
 800dfbc:	f043 0302 	orrlt.w	r3, r3, #2
 800dfc0:	42a5      	cmp	r5, r4
 800dfc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfc6:	dd04      	ble.n	800dfd2 <GL_DrawLineEx+0x5a>
 800dfc8:	4622      	mov	r2, r4
 800dfca:	f043 0304 	orr.w	r3, r3, #4
 800dfce:	462c      	mov	r4, r5
 800dfd0:	4615      	mov	r5, r2
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	fb94 f2f2 	sdiv	r2, r4, r2
 800dfd8:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 800dfdc:	fb95 f4f4 	sdiv	r4, r5, r4
 800dfe0:	11a1      	asrs	r1, r4, #6
 800dfe2:	4a4f      	ldr	r2, [pc, #316]	; (800e120 <GL_DrawLineEx+0x1a8>)
 800dfe4:	f3c4 0483 	ubfx	r4, r4, #2, #4
 800dfe8:	f1c4 0510 	rsb	r5, r4, #16
 800dfec:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 800dff0:	2d10      	cmp	r5, #16
 800dff2:	fb05 f000 	mul.w	r0, r5, r0
 800dff6:	d004      	beq.n	800e002 <GL_DrawLineEx+0x8a>
 800dff8:	3101      	adds	r1, #1
 800dffa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800dffe:	fb04 0002 	mla	r0, r4, r2, r0
 800e002:	2210      	movs	r2, #16
 800e004:	3008      	adds	r0, #8
 800e006:	fb90 f0f2 	sdiv	r0, r0, r2
 800e00a:	0759      	lsls	r1, r3, #29
 800e00c:	bf48      	it	mi
 800e00e:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 800e012:	07da      	lsls	r2, r3, #31
 800e014:	bf48      	it	mi
 800e016:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 800e01a:	079b      	lsls	r3, r3, #30
 800e01c:	bf48      	it	mi
 800e01e:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 800e022:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800e026:	4628      	mov	r0, r5
 800e028:	f7ff fec0 	bl	800ddac <GUI_cos>
 800e02c:	fb00 f40b 	mul.w	r4, r0, fp
 800e030:	4628      	mov	r0, r5
 800e032:	f7ff fe8f 	bl	800dd54 <GUI_sin>
 800e036:	2c00      	cmp	r4, #0
 800e038:	fb00 f00b 	mul.w	r0, r0, fp
 800e03c:	da04      	bge.n	800e048 <GL_DrawLineEx+0xd0>
 800e03e:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800e042:	129b      	asrs	r3, r3, #10
 800e044:	425b      	negs	r3, r3
 800e046:	e002      	b.n	800e04e <GL_DrawLineEx+0xd6>
 800e048:	f504 7300 	add.w	r3, r4, #512	; 0x200
 800e04c:	129b      	asrs	r3, r3, #10
 800e04e:	2800      	cmp	r0, #0
 800e050:	da06      	bge.n	800e060 <GL_DrawLineEx+0xe8>
 800e052:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 800e056:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800e05a:	f1cb 0b00 	rsb	fp, fp, #0
 800e05e:	e003      	b.n	800e068 <GL_DrawLineEx+0xf0>
 800e060:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 800e064:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800e068:	2b00      	cmp	r3, #0
 800e06a:	dd03      	ble.n	800e074 <GL_DrawLineEx+0xfc>
 800e06c:	1c58      	adds	r0, r3, #1
 800e06e:	1040      	asrs	r0, r0, #1
 800e070:	105b      	asrs	r3, r3, #1
 800e072:	e005      	b.n	800e080 <GL_DrawLineEx+0x108>
 800e074:	2202      	movs	r2, #2
 800e076:	fb93 f0f2 	sdiv	r0, r3, r2
 800e07a:	3b01      	subs	r3, #1
 800e07c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e080:	f1bb 0f00 	cmp.w	fp, #0
 800e084:	dd05      	ble.n	800e092 <GL_DrawLineEx+0x11a>
 800e086:	f10b 0201 	add.w	r2, fp, #1
 800e08a:	1052      	asrs	r2, r2, #1
 800e08c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800e090:	e006      	b.n	800e0a0 <GL_DrawLineEx+0x128>
 800e092:	2102      	movs	r1, #2
 800e094:	fb9b f2f1 	sdiv	r2, fp, r1
 800e098:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e09c:	fb9b fbf1 	sdiv	fp, fp, r1
 800e0a0:	b280      	uxth	r0, r0
 800e0a2:	fa1f f489 	uxth.w	r4, r9
 800e0a6:	1901      	adds	r1, r0, r4
 800e0a8:	b292      	uxth	r2, r2
 800e0aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e0ae:	fa1f fb8b 	uxth.w	fp, fp
 800e0b2:	fa1f f188 	uxth.w	r1, r8
 800e0b6:	1855      	adds	r5, r2, r1
 800e0b8:	ebcb 0101 	rsb	r1, fp, r1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	f8ad 100e 	strh.w	r1, [sp, #14]
 800e0c2:	b2b9      	uxth	r1, r7
 800e0c4:	1ae4      	subs	r4, r4, r3
 800e0c6:	1acb      	subs	r3, r1, r3
 800e0c8:	f8ad 3010 	strh.w	r3, [sp, #16]
 800e0cc:	b2b3      	uxth	r3, r6
 800e0ce:	4401      	add	r1, r0
 800e0d0:	ebcb 0b03 	rsb	fp, fp, r3
 800e0d4:	4413      	add	r3, r2
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e0dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e0e0:	a802      	add	r0, sp, #8
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	2104      	movs	r1, #4
 800e0e6:	f8ad 500a 	strh.w	r5, [sp, #10]
 800e0ea:	f8ad 400c 	strh.w	r4, [sp, #12]
 800e0ee:	f8ad b012 	strh.w	fp, [sp, #18]
 800e0f2:	f002 fd6d 	bl	8010bd0 <GL_FillPolygon>
 800e0f6:	f8da 3000 	ldr.w	r3, [sl]
 800e0fa:	7e5b      	ldrb	r3, [r3, #25]
 800e0fc:	b91b      	cbnz	r3, 800e106 <GL_DrawLineEx+0x18e>
 800e0fe:	4648      	mov	r0, r9
 800e100:	4641      	mov	r1, r8
 800e102:	f002 fe47 	bl	8010d94 <GL_DrawPoint>
 800e106:	f8da 3000 	ldr.w	r3, [sl]
 800e10a:	7e5b      	ldrb	r3, [r3, #25]
 800e10c:	b91b      	cbnz	r3, 800e116 <GL_DrawLineEx+0x19e>
 800e10e:	4638      	mov	r0, r7
 800e110:	4631      	mov	r1, r6
 800e112:	f002 fe3f 	bl	8010d94 <GL_DrawPoint>
 800e116:	b007      	add	sp, #28
 800e118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11c:	2000002c 	.word	0x2000002c
 800e120:	08012ebe 	.word	0x08012ebe

0800e124 <GL_DrawLine>:
 800e124:	b530      	push	{r4, r5, lr}
 800e126:	b085      	sub	sp, #20
 800e128:	ac04      	add	r4, sp, #16
 800e12a:	2500      	movs	r5, #0
 800e12c:	f844 5d04 	str.w	r5, [r4, #-4]!
 800e130:	9400      	str	r4, [sp, #0]
 800e132:	f7ff ff21 	bl	800df78 <GL_DrawLineEx>
 800e136:	b005      	add	sp, #20
 800e138:	bd30      	pop	{r4, r5, pc}
	...

0800e13c <GUI_DrawLine>:
 800e13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e140:	461e      	mov	r6, r3
 800e142:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <GUI_DrawLine+0x38>)
 800e144:	681c      	ldr	r4, [r3, #0]
 800e146:	4681      	mov	r9, r0
 800e148:	2000      	movs	r0, #0
 800e14a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e14c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800e14e:	4688      	mov	r8, r1
 800e150:	4617      	mov	r7, r2
 800e152:	f7fb fdb1 	bl	8009cb8 <WM__InitIVRSearch>
 800e156:	b150      	cbz	r0, 800e16e <GUI_DrawLine+0x32>
 800e158:	eb09 0005 	add.w	r0, r9, r5
 800e15c:	eb08 0104 	add.w	r1, r8, r4
 800e160:	197a      	adds	r2, r7, r5
 800e162:	1933      	adds	r3, r6, r4
 800e164:	f7ff ffde 	bl	800e124 <GL_DrawLine>
 800e168:	f7fb fce4 	bl	8009b34 <WM__GetNextIVR>
 800e16c:	e7f3      	b.n	800e156 <GUI_DrawLine+0x1a>
 800e16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e172:	bf00      	nop
 800e174:	2000002c 	.word	0x2000002c

0800e178 <GUI_DispStringAt>:
 800e178:	4b02      	ldr	r3, [pc, #8]	; (800e184 <GUI_DispStringAt+0xc>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	8459      	strh	r1, [r3, #34]	; 0x22
 800e17e:	849a      	strh	r2, [r3, #36]	; 0x24
 800e180:	f000 b802 	b.w	800e188 <GUI_DispString>
 800e184:	2000002c 	.word	0x2000002c

0800e188 <GUI_DispString>:
 800e188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	4604      	mov	r4, r0
 800e18e:	2800      	cmp	r0, #0
 800e190:	d079      	beq.n	800e286 <GUI_DispString+0xfe>
 800e192:	4d3e      	ldr	r5, [pc, #248]	; (800e28c <GUI_DispString+0x104>)
 800e194:	f000 fc74 	bl	800ea80 <GUI_GetFontDistY>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	4680      	mov	r8, r0
 800e19c:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800e1a0:	f000 fc56 	bl	800ea50 <GUI_GetYAdjust>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e1a8:	b287      	uxth	r7, r0
 800e1aa:	1bd2      	subs	r2, r2, r7
 800e1ac:	849a      	strh	r2, [r3, #36]	; 0x24
 800e1ae:	7823      	ldrb	r3, [r4, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d05d      	beq.n	800e270 <GUI_DispString+0xe8>
 800e1b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fb97 	bl	800e8ec <GUI__GetLineNumChars>
 800e1be:	4606      	mov	r6, r0
 800e1c0:	4631      	mov	r1, r6
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fbc0 	bl	800e948 <GUI__GetLineDistX>
 800e1c8:	682b      	ldr	r3, [r5, #0]
 800e1ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e1cc:	f002 0203 	and.w	r2, r2, #3
 800e1d0:	2a01      	cmp	r2, #1
 800e1d2:	d005      	beq.n	800e1e0 <GUI_DispString+0x58>
 800e1d4:	2a02      	cmp	r2, #2
 800e1d6:	bf14      	ite	ne
 800e1d8:	2200      	movne	r2, #0
 800e1da:	fb90 f2f2 	sdiveq	r2, r0, r2
 800e1de:	e000      	b.n	800e1e2 <GUI_DispString+0x5a>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e1e4:	1a8a      	subs	r2, r1, r2
 800e1e6:	b292      	uxth	r2, r2
 800e1e8:	b291      	uxth	r1, r2
 800e1ea:	8459      	strh	r1, [r3, #34]	; 0x22
 800e1ec:	fa1f fa80 	uxth.w	sl, r0
 800e1f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1f2:	f8ad 1000 	strh.w	r1, [sp]
 800e1f6:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800e1fa:	440a      	add	r2, r1
 800e1fc:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e200:	fa1f fb88 	uxth.w	fp, r8
 800e204:	3b01      	subs	r3, #1
 800e206:	445b      	add	r3, fp
 800e208:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e20c:	4620      	mov	r0, r4
 800e20e:	4631      	mov	r1, r6
 800e210:	466a      	mov	r2, sp
 800e212:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e216:	f000 fbc7 	bl	800e9a8 <GUI__DispLine>
 800e21a:	682b      	ldr	r3, [r5, #0]
 800e21c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e220:	849a      	strh	r2, [r3, #36]	; 0x24
 800e222:	4620      	mov	r0, r4
 800e224:	4631      	mov	r1, r6
 800e226:	f002 fc85 	bl	8010b34 <GUI_UC__NumChars2NumBytes>
 800e22a:	5c23      	ldrb	r3, [r4, r0]
 800e22c:	2b0a      	cmp	r3, #10
 800e22e:	eb04 0200 	add.w	r2, r4, r0
 800e232:	d001      	beq.n	800e238 <GUI_DispString+0xb0>
 800e234:	2b0d      	cmp	r3, #13
 800e236:	d112      	bne.n	800e25e <GUI_DispString+0xd6>
 800e238:	682b      	ldr	r3, [r5, #0]
 800e23a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800e23c:	f001 0103 	and.w	r1, r1, #3
 800e240:	3901      	subs	r1, #1
 800e242:	2901      	cmp	r1, #1
 800e244:	bf8a      	itet	hi
 800e246:	8c19      	ldrhhi	r1, [r3, #32]
 800e248:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 800e24c:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800e24e:	7811      	ldrb	r1, [r2, #0]
 800e250:	290a      	cmp	r1, #10
 800e252:	d10b      	bne.n	800e26c <GUI_DispString+0xe4>
 800e254:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e256:	448b      	add	fp, r1
 800e258:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800e25c:	e006      	b.n	800e26c <GUI_DispString+0xe4>
 800e25e:	4b0b      	ldr	r3, [pc, #44]	; (800e28c <GUI_DispString+0x104>)
 800e260:	f8bd 0000 	ldrh.w	r0, [sp]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4482      	add	sl, r0
 800e268:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800e26c:	7813      	ldrb	r3, [r2, #0]
 800e26e:	b943      	cbnz	r3, 800e282 <GUI_DispString+0xfa>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e274:	4417      	add	r7, r2
 800e276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e278:	849f      	strh	r7, [r3, #36]	; 0x24
 800e27a:	f022 0203 	bic.w	r2, r2, #3
 800e27e:	859a      	strh	r2, [r3, #44]	; 0x2c
 800e280:	e001      	b.n	800e286 <GUI_DispString+0xfe>
 800e282:	1c54      	adds	r4, r2, #1
 800e284:	e793      	b.n	800e1ae <GUI_DispString+0x26>
 800e286:	b003      	add	sp, #12
 800e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	2000002c 	.word	0x2000002c

0800e290 <CL_DispChar>:
 800e290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e292:	4d20      	ldr	r5, [pc, #128]	; (800e314 <CL_DispChar+0x84>)
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e298:	8c5e      	ldrh	r6, [r3, #34]	; 0x22
 800e29a:	8c9f      	ldrh	r7, [r3, #36]	; 0x24
 800e29c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e29e:	4416      	add	r6, r2
 800e2a0:	b2b6      	uxth	r6, r6
 800e2a2:	b2b2      	uxth	r2, r6
 800e2a4:	4439      	add	r1, r7
 800e2a6:	845a      	strh	r2, [r3, #34]	; 0x22
 800e2a8:	8499      	strh	r1, [r3, #36]	; 0x24
 800e2aa:	f8ad 2000 	strh.w	r2, [sp]
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	f000 fc16 	bl	800eae0 <GUI_GetCharDistX>
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f000 fb36 	bl	800e928 <GUI__GetOverlap>
 800e2bc:	3e01      	subs	r6, #1
 800e2be:	682b      	ldr	r3, [r5, #0]
 800e2c0:	4437      	add	r7, r6
 800e2c2:	4438      	add	r0, r7
 800e2c4:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800e2c6:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e2ca:	f8ad 0004 	strh.w	r0, [sp, #4]
 800e2ce:	f002 fc5d 	bl	8010b8c <GUI_GetFontSizeY>
 800e2d2:	3e01      	subs	r6, #1
 800e2d4:	4430      	add	r0, r6
 800e2d6:	f8ad 0006 	strh.w	r0, [sp, #6]
 800e2da:	4668      	mov	r0, sp
 800e2dc:	f7fb fcec 	bl	8009cb8 <WM__InitIVRSearch>
 800e2e0:	b938      	cbnz	r0, 800e2f2 <CL_DispChar+0x62>
 800e2e2:	2c0a      	cmp	r4, #10
 800e2e4:	d00b      	beq.n	800e2fe <CL_DispChar+0x6e>
 800e2e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e2ea:	682b      	ldr	r3, [r5, #0]
 800e2ec:	3201      	adds	r2, #1
 800e2ee:	845a      	strh	r2, [r3, #34]	; 0x22
 800e2f0:	e005      	b.n	800e2fe <CL_DispChar+0x6e>
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 fbda 	bl	800eaac <GL_DispChar>
 800e2f8:	f7fb fc1c 	bl	8009b34 <WM__GetNextIVR>
 800e2fc:	e7f0      	b.n	800e2e0 <CL_DispChar+0x50>
 800e2fe:	682b      	ldr	r3, [r5, #0]
 800e300:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e304:	1a8a      	subs	r2, r1, r2
 800e306:	845a      	strh	r2, [r3, #34]	; 0x22
 800e308:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e30a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e30c:	1a8a      	subs	r2, r1, r2
 800e30e:	849a      	strh	r2, [r3, #36]	; 0x24
 800e310:	b003      	add	sp, #12
 800e312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e314:	2000002c 	.word	0x2000002c

0800e318 <GUI_DispCharAt>:
 800e318:	4b02      	ldr	r3, [pc, #8]	; (800e324 <GUI_DispCharAt+0xc>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	8459      	strh	r1, [r3, #34]	; 0x22
 800e31e:	849a      	strh	r2, [r3, #36]	; 0x24
 800e320:	f7ff bfb6 	b.w	800e290 <CL_DispChar>
 800e324:	2000002c 	.word	0x2000002c

0800e328 <GUI_DEVICE__GetpDevice>:
 800e328:	2801      	cmp	r0, #1
 800e32a:	dc0a      	bgt.n	800e342 <GUI_DEVICE__GetpDevice+0x1a>
 800e32c:	4b06      	ldr	r3, [pc, #24]	; (800e348 <GUI_DEVICE__GetpDevice+0x20>)
 800e32e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e332:	b128      	cbz	r0, 800e340 <GUI_DEVICE__GetpDevice+0x18>
 800e334:	68c3      	ldr	r3, [r0, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	428b      	cmp	r3, r1
 800e33a:	d003      	beq.n	800e344 <GUI_DEVICE__GetpDevice+0x1c>
 800e33c:	6800      	ldr	r0, [r0, #0]
 800e33e:	e7f8      	b.n	800e332 <GUI_DEVICE__GetpDevice+0xa>
 800e340:	4770      	bx	lr
 800e342:	2000      	movs	r0, #0
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	20022fcc 	.word	0x20022fcc

0800e34c <GUI_DEVICE__GetpDriver>:
 800e34c:	2801      	cmp	r0, #1
 800e34e:	dc09      	bgt.n	800e364 <GUI_DEVICE__GetpDriver+0x18>
 800e350:	4b05      	ldr	r3, [pc, #20]	; (800e368 <GUI_DEVICE__GetpDriver+0x1c>)
 800e352:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e356:	b120      	cbz	r0, 800e362 <GUI_DEVICE__GetpDriver+0x16>
 800e358:	68c3      	ldr	r3, [r0, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	b11b      	cbz	r3, 800e366 <GUI_DEVICE__GetpDriver+0x1a>
 800e35e:	6800      	ldr	r0, [r0, #0]
 800e360:	e7f9      	b.n	800e356 <GUI_DEVICE__GetpDriver+0xa>
 800e362:	4770      	bx	lr
 800e364:	2000      	movs	r0, #0
 800e366:	4770      	bx	lr
 800e368:	20022fcc 	.word	0x20022fcc

0800e36c <GUI_DEVICE_Delete>:
 800e36c:	f000 bcb8 	b.w	800ece0 <GUI_ALLOC_FreeFixedBlock>

0800e370 <GUI_DEVICE_Create>:
 800e370:	2b01      	cmp	r3, #1
 800e372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e374:	4606      	mov	r6, r0
 800e376:	460d      	mov	r5, r1
 800e378:	4617      	mov	r7, r2
 800e37a:	461c      	mov	r4, r3
 800e37c:	dd01      	ble.n	800e382 <GUI_DEVICE_Create+0x12>
 800e37e:	2000      	movs	r0, #0
 800e380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e382:	201c      	movs	r0, #28
 800e384:	f000 fe0c 	bl	800efa0 <GUI_ALLOC_GetFixedBlock>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d0f8      	beq.n	800e37e <GUI_DEVICE_Create+0xe>
 800e38c:	b10d      	cbz	r5, 800e392 <GUI_DEVICE_Create+0x22>
 800e38e:	6105      	str	r5, [r0, #16]
 800e390:	e009      	b.n	800e3a6 <GUI_DEVICE_Create+0x36>
 800e392:	4b09      	ldr	r3, [pc, #36]	; (800e3b8 <GUI_DEVICE_Create+0x48>)
 800e394:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800e398:	b129      	cbz	r1, 800e3a6 <GUI_DEVICE_Create+0x36>
 800e39a:	680b      	ldr	r3, [r1, #0]
 800e39c:	b10b      	cbz	r3, 800e3a2 <GUI_DEVICE_Create+0x32>
 800e39e:	4619      	mov	r1, r3
 800e3a0:	e7fb      	b.n	800e39a <GUI_DEVICE_Create+0x2a>
 800e3a2:	690b      	ldr	r3, [r1, #16]
 800e3a4:	6103      	str	r3, [r0, #16]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	6083      	str	r3, [r0, #8]
 800e3aa:	6184      	str	r4, [r0, #24]
 800e3ac:	8287      	strh	r7, [r0, #20]
 800e3ae:	60c6      	str	r6, [r0, #12]
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	6043      	str	r3, [r0, #4]
 800e3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	20022fcc 	.word	0x20022fcc

0800e3bc <GUI_DEVICE_Unlink>:
 800e3bc:	4b09      	ldr	r3, [pc, #36]	; (800e3e4 <GUI_DEVICE_Unlink+0x28>)
 800e3be:	6982      	ldr	r2, [r0, #24]
 800e3c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3c4:	4281      	cmp	r1, r0
 800e3c6:	bf04      	itt	eq
 800e3c8:	6801      	ldreq	r1, [r0, #0]
 800e3ca:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800e3ce:	6843      	ldr	r3, [r0, #4]
 800e3d0:	b10b      	cbz	r3, 800e3d6 <GUI_DEVICE_Unlink+0x1a>
 800e3d2:	6802      	ldr	r2, [r0, #0]
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	6802      	ldr	r2, [r0, #0]
 800e3d8:	b102      	cbz	r2, 800e3dc <GUI_DEVICE_Unlink+0x20>
 800e3da:	6053      	str	r3, [r2, #4]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	6003      	str	r3, [r0, #0]
 800e3e0:	6043      	str	r3, [r0, #4]
 800e3e2:	4770      	bx	lr
 800e3e4:	20022fcc 	.word	0x20022fcc

0800e3e8 <GUI_DEVICE_Link>:
 800e3e8:	b570      	push	{r4, r5, r6, lr}
 800e3ea:	b338      	cbz	r0, 800e43c <GUI_DEVICE_Link+0x54>
 800e3ec:	6982      	ldr	r2, [r0, #24]
 800e3ee:	2a01      	cmp	r2, #1
 800e3f0:	dc24      	bgt.n	800e43c <GUI_DEVICE_Link+0x54>
 800e3f2:	4919      	ldr	r1, [pc, #100]	; (800e458 <GUI_DEVICE_Link+0x70>)
 800e3f4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	b913      	cbnz	r3, 800e402 <GUI_DEVICE_Link+0x1a>
 800e3fc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800e400:	e01a      	b.n	800e438 <GUI_DEVICE_Link+0x50>
 800e402:	6859      	ldr	r1, [r3, #4]
 800e404:	b109      	cbz	r1, 800e40a <GUI_DEVICE_Link+0x22>
 800e406:	460b      	mov	r3, r1
 800e408:	e7fb      	b.n	800e402 <GUI_DEVICE_Link+0x1a>
 800e40a:	68c1      	ldr	r1, [r0, #12]
 800e40c:	680e      	ldr	r6, [r1, #0]
 800e40e:	68d9      	ldr	r1, [r3, #12]
 800e410:	680c      	ldr	r4, [r1, #0]
 800e412:	42b4      	cmp	r4, r6
 800e414:	dd03      	ble.n	800e41e <GUI_DEVICE_Link+0x36>
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1f8      	bne.n	800e40e <GUI_DEVICE_Link+0x26>
 800e41c:	e00e      	b.n	800e43c <GUI_DEVICE_Link+0x54>
 800e41e:	d102      	bne.n	800e426 <GUI_DEVICE_Link+0x3e>
 800e420:	8a81      	ldrh	r1, [r0, #20]
 800e422:	2901      	cmp	r1, #1
 800e424:	d011      	beq.n	800e44a <GUI_DEVICE_Link+0x62>
 800e426:	6859      	ldr	r1, [r3, #4]
 800e428:	b199      	cbz	r1, 800e452 <GUI_DEVICE_Link+0x6a>
 800e42a:	6008      	str	r0, [r1, #0]
 800e42c:	6041      	str	r1, [r0, #4]
 800e42e:	6058      	str	r0, [r3, #4]
 800e430:	4298      	cmp	r0, r3
 800e432:	bf08      	it	eq
 800e434:	2300      	moveq	r3, #0
 800e436:	6003      	str	r3, [r0, #0]
 800e438:	2000      	movs	r0, #0
 800e43a:	bd70      	pop	{r4, r5, r6, pc}
 800e43c:	2001      	movs	r0, #1
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	68cb      	ldr	r3, [r1, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	42a3      	cmp	r3, r4
 800e446:	460b      	mov	r3, r1
 800e448:	dbed      	blt.n	800e426 <GUI_DEVICE_Link+0x3e>
 800e44a:	6819      	ldr	r1, [r3, #0]
 800e44c:	2900      	cmp	r1, #0
 800e44e:	d1f7      	bne.n	800e440 <GUI_DEVICE_Link+0x58>
 800e450:	e7e9      	b.n	800e426 <GUI_DEVICE_Link+0x3e>
 800e452:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800e456:	e7ea      	b.n	800e42e <GUI_DEVICE_Link+0x46>
 800e458:	20022fcc 	.word	0x20022fcc

0800e45c <GUI_DEVICE_CreateAndLink>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	461d      	mov	r5, r3
 800e460:	f7ff ff86 	bl	800e370 <GUI_DEVICE_Create>
 800e464:	4604      	mov	r4, r0
 800e466:	b148      	cbz	r0, 800e47c <GUI_DEVICE_CreateAndLink+0x20>
 800e468:	f7ff ffbe 	bl	800e3e8 <GUI_DEVICE_Link>
 800e46c:	68e3      	ldr	r3, [r4, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	b923      	cbnz	r3, 800e47c <GUI_DEVICE_CreateAndLink+0x20>
 800e472:	4b03      	ldr	r3, [pc, #12]	; (800e480 <GUI_DEVICE_CreateAndLink+0x24>)
 800e474:	3516      	adds	r5, #22
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800e47c:	4620      	mov	r0, r4
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	2000002c 	.word	0x2000002c

0800e484 <_OnExit>:
 800e484:	b510      	push	{r4, lr}
 800e486:	4b07      	ldr	r3, [pc, #28]	; (800e4a4 <_OnExit+0x20>)
 800e488:	4807      	ldr	r0, [pc, #28]	; (800e4a8 <_OnExit+0x24>)
 800e48a:	2400      	movs	r4, #0
 800e48c:	4621      	mov	r1, r4
 800e48e:	2270      	movs	r2, #112	; 0x70
 800e490:	601c      	str	r4, [r3, #0]
 800e492:	f7fd fdd5 	bl	800c040 <GUI__memset>
 800e496:	4621      	mov	r1, r4
 800e498:	4804      	ldr	r0, [pc, #16]	; (800e4ac <_OnExit+0x28>)
 800e49a:	2208      	movs	r2, #8
 800e49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4a0:	f7fd bdce 	b.w	800c040 <GUI__memset>
 800e4a4:	20022bac 	.word	0x20022bac
 800e4a8:	20022b34 	.word	0x20022b34
 800e4ac:	20022fcc 	.word	0x20022fcc

0800e4b0 <_InitContext>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	4d19      	ldr	r5, [pc, #100]	; (800e518 <_InitContext+0x68>)
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	1d1a      	adds	r2, r3, #4
 800e4b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800e4ba:	f103 0208 	add.w	r2, r3, #8
 800e4be:	639b      	str	r3, [r3, #56]	; 0x38
 800e4c0:	641b      	str	r3, [r3, #64]	; 0x40
 800e4c2:	6142      	str	r2, [r0, #20]
 800e4c4:	7c5a      	ldrb	r2, [r3, #17]
 800e4c6:	4b15      	ldr	r3, [pc, #84]	; (800e51c <_InitContext+0x6c>)
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e4ce:	68c3      	ldr	r3, [r0, #12]
 800e4d0:	f104 0108 	add.w	r1, r4, #8
 800e4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d6:	4798      	blx	r3
 800e4d8:	4b11      	ldr	r3, [pc, #68]	; (800e520 <_InitContext+0x70>)
 800e4da:	6663      	str	r3, [r4, #100]	; 0x64
 800e4dc:	4b11      	ldr	r3, [pc, #68]	; (800e524 <_InitContext+0x74>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	61e3      	str	r3, [r4, #28]
 800e4e2:	682b      	ldr	r3, [r5, #0]
 800e4e4:	3308      	adds	r3, #8
 800e4e6:	6163      	str	r3, [r4, #20]
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	7623      	strb	r3, [r4, #24]
 800e4ec:	f7fa ff04 	bl	80092f8 <WM_GetDesktopWindow>
 800e4f0:	2303      	movs	r3, #3
 800e4f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800e4f6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e4fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e4fc:	6363      	str	r3, [r4, #52]	; 0x34
 800e4fe:	64a0      	str	r0, [r4, #72]	; 0x48
 800e500:	2000      	movs	r0, #0
 800e502:	f7fd fd8d 	bl	800c020 <LCD_SetBkColor>
 800e506:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e50a:	f7fd fd91 	bl	800c030 <LCD_SetColor>
 800e50e:	4b06      	ldr	r3, [pc, #24]	; (800e528 <_InitContext+0x78>)
 800e510:	4a06      	ldr	r2, [pc, #24]	; (800e52c <_InitContext+0x7c>)
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	bd38      	pop	{r3, r4, r5, pc}
 800e516:	bf00      	nop
 800e518:	2000002c 	.word	0x2000002c
 800e51c:	20022fcc 	.word	0x20022fcc
 800e520:	08012ee0 	.word	0x08012ee0
 800e524:	20000030 	.word	0x20000030
 800e528:	20022fc4 	.word	0x20022fc4
 800e52c:	08013348 	.word	0x08013348

0800e530 <GUI_SetFuncGetpPalConvTable>:
 800e530:	4b01      	ldr	r3, [pc, #4]	; (800e538 <GUI_SetFuncGetpPalConvTable+0x8>)
 800e532:	6018      	str	r0, [r3, #0]
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	20000034 	.word	0x20000034

0800e53c <GUI_SetDefaultFont>:
 800e53c:	4b01      	ldr	r3, [pc, #4]	; (800e544 <GUI_SetDefaultFont+0x8>)
 800e53e:	6018      	str	r0, [r3, #0]
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	20000030 	.word	0x20000030

0800e548 <GUI_ClearRect>:
 800e548:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e54c:	4607      	mov	r7, r0
 800e54e:	2004      	movs	r0, #4
 800e550:	469a      	mov	sl, r3
 800e552:	460e      	mov	r6, r1
 800e554:	4691      	mov	r9, r2
 800e556:	f7fd faf7 	bl	800bb48 <LCD_SetDrawMode>
 800e55a:	4b13      	ldr	r3, [pc, #76]	; (800e5a8 <GUI_ClearRect+0x60>)
 800e55c:	681c      	ldr	r4, [r3, #0]
 800e55e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e560:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800e562:	442f      	add	r7, r5
 800e564:	4426      	add	r6, r4
 800e566:	4680      	mov	r8, r0
 800e568:	444d      	add	r5, r9
 800e56a:	4454      	add	r4, sl
 800e56c:	4668      	mov	r0, sp
 800e56e:	f8ad 7000 	strh.w	r7, [sp]
 800e572:	f8ad 5004 	strh.w	r5, [sp, #4]
 800e576:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e57a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800e57e:	f7fb fb9b 	bl	8009cb8 <WM__InitIVRSearch>
 800e582:	b928      	cbnz	r0, 800e590 <GUI_ClearRect+0x48>
 800e584:	4640      	mov	r0, r8
 800e586:	f7fd fadf 	bl	800bb48 <LCD_SetDrawMode>
 800e58a:	b002      	add	sp, #8
 800e58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e590:	4638      	mov	r0, r7
 800e592:	4631      	mov	r1, r6
 800e594:	462a      	mov	r2, r5
 800e596:	4623      	mov	r3, r4
 800e598:	f7fd fb58 	bl	800bc4c <LCD_FillRect>
 800e59c:	f7fb faca 	bl	8009b34 <WM__GetNextIVR>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d1f5      	bne.n	800e590 <GUI_ClearRect+0x48>
 800e5a4:	e7ee      	b.n	800e584 <GUI_ClearRect+0x3c>
 800e5a6:	bf00      	nop
 800e5a8:	2000002c 	.word	0x2000002c

0800e5ac <GUI_Clear>:
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	4601      	mov	r1, r0
 800e5b2:	f7ff f87b 	bl	800d6ac <GUI_GotoXY>
 800e5b6:	4804      	ldr	r0, [pc, #16]	; (800e5c8 <GUI_Clear+0x1c>)
 800e5b8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800e5bc:	4601      	mov	r1, r0
 800e5be:	4613      	mov	r3, r2
 800e5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c4:	f7ff bfc0 	b.w	800e548 <GUI_ClearRect>
 800e5c8:	ffffc001 	.word	0xffffc001

0800e5cc <GUI__RegisterExit>:
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	4b05      	ldr	r3, [pc, #20]	; (800e5ec <GUI__RegisterExit+0x20>)
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	605a      	str	r2, [r3, #4]
 800e5dc:	4b03      	ldr	r3, [pc, #12]	; (800e5ec <GUI__RegisterExit+0x20>)
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	20022b30 	.word	0x20022b30

0800e5f0 <GUI__Config>:
 800e5f0:	b508      	push	{r3, lr}
 800e5f2:	4b08      	ldr	r3, [pc, #32]	; (800e614 <GUI__Config+0x24>)
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	b962      	cbnz	r2, 800e612 <GUI__Config+0x22>
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	f7f6 fa92 	bl	8004b24 <GUI_X_Config>
 800e600:	f7f6 fbec 	bl	8004ddc <LCD_X_Config>
 800e604:	4804      	ldr	r0, [pc, #16]	; (800e618 <GUI__Config+0x28>)
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <GUI__Config+0x2c>)
 800e608:	6003      	str	r3, [r0, #0]
 800e60a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e60e:	f7ff bfdd 	b.w	800e5cc <GUI__RegisterExit>
 800e612:	bd08      	pop	{r3, pc}
 800e614:	20022bac 	.word	0x20022bac
 800e618:	20022ba4 	.word	0x20022ba4
 800e61c:	0800e485 	.word	0x0800e485

0800e620 <GUI_Init>:
 800e620:	b590      	push	{r4, r7, lr}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	4b20      	ldr	r3, [pc, #128]	; (800e6a8 <GUI_Init+0x88>)
 800e628:	4a1f      	ldr	r2, [pc, #124]	; (800e6a8 <GUI_Init+0x88>)
 800e62a:	6812      	ldr	r2, [r2, #0]
 800e62c:	f022 0201 	bic.w	r2, r2, #1
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	4b1e      	ldr	r3, [pc, #120]	; (800e6ac <GUI_Init+0x8c>)
 800e634:	2201      	movs	r2, #1
 800e636:	601a      	str	r2, [r3, #0]
 800e638:	4b1d      	ldr	r3, [pc, #116]	; (800e6b0 <GUI_Init+0x90>)
 800e63a:	4a1e      	ldr	r2, [pc, #120]	; (800e6b4 <GUI_Init+0x94>)
 800e63c:	601a      	str	r2, [r3, #0]
 800e63e:	4b1c      	ldr	r3, [pc, #112]	; (800e6b0 <GUI_Init+0x90>)
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	4b1d      	ldr	r3, [pc, #116]	; (800e6b8 <GUI_Init+0x98>)
 800e644:	429a      	cmp	r2, r3
 800e646:	d000      	beq.n	800e64a <GUI_Init+0x2a>
 800e648:	e7fe      	b.n	800e648 <GUI_Init+0x28>
 800e64a:	f7ff ffd1 	bl	800e5f0 <GUI__Config>
 800e64e:	4b1b      	ldr	r3, [pc, #108]	; (800e6bc <GUI_Init+0x9c>)
 800e650:	222e      	movs	r2, #46	; 0x2e
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	f7f6 fa76 	bl	8004b44 <GUI_X_Init>
 800e658:	4819      	ldr	r0, [pc, #100]	; (800e6c0 <GUI_Init+0xa0>)
 800e65a:	f7ff ff29 	bl	800e4b0 <_InitContext>
 800e65e:	f7fd fc3d 	bl	800bedc <emWin_LCD_Init>
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	f7fd f964 	bl	800b930 <LCD_GetXSizeDisplay>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d004      	beq.n	800e678 <GUI_Init+0x58>
 800e66e:	f7fd f965 	bl	800b93c <LCD_GetYSizeDisplay>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d109      	bne.n	800e68c <GUI_Init+0x6c>
 800e678:	f7fd f946 	bl	800b908 <LCD_GetXSizeMax>
 800e67c:	4604      	mov	r4, r0
 800e67e:	f7fd f946 	bl	800b90e <LCD_GetYSizeMax>
 800e682:	4603      	mov	r3, r0
 800e684:	4620      	mov	r0, r4
 800e686:	4619      	mov	r1, r3
 800e688:	f7fd f948 	bl	800b91c <LCD_SetDisplaySize>
 800e68c:	2000      	movs	r0, #0
 800e68e:	2100      	movs	r1, #0
 800e690:	f002 fa62 	bl	8010b58 <GUI_SetOrg>
 800e694:	f7fb fbf8 	bl	8009e88 <WM_Init>
 800e698:	4b0a      	ldr	r3, [pc, #40]	; (800e6c4 <GUI_Init+0xa4>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd90      	pop	{r4, r7, pc}
 800e6a8:	e0002000 	.word	0xe0002000
 800e6ac:	40023008 	.word	0x40023008
 800e6b0:	40023000 	.word	0x40023000
 800e6b4:	f407a5c2 	.word	0xf407a5c2
 800e6b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e6bc:	20022f9e 	.word	0x20022f9e
 800e6c0:	20022b34 	.word	0x20022b34
 800e6c4:	20022fbc 	.word	0x20022fbc

0800e6c8 <GUIMONO_DispChar>:
 800e6c8:	4b52      	ldr	r3, [pc, #328]	; (800e814 <GUIMONO_DispChar+0x14c>)
 800e6ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	69d9      	ldr	r1, [r3, #28]
 800e6d2:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800e6d4:	69cc      	ldr	r4, [r1, #28]
 800e6d6:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800e6d8:	89a2      	ldrh	r2, [r4, #12]
 800e6da:	4290      	cmp	r0, r2
 800e6dc:	b08b      	sub	sp, #44	; 0x2c
 800e6de:	d308      	bcc.n	800e6f2 <GUIMONO_DispChar+0x2a>
 800e6e0:	89e6      	ldrh	r6, [r4, #14]
 800e6e2:	4286      	cmp	r6, r0
 800e6e4:	d305      	bcc.n	800e6f2 <GUIMONO_DispChar+0x2a>
 800e6e6:	f8d4 9000 	ldr.w	r9, [r4]
 800e6ea:	1a82      	subs	r2, r0, r2
 800e6ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e6f0:	e015      	b.n	800e71e <GUIMONO_DispChar+0x56>
 800e6f2:	68a2      	ldr	r2, [r4, #8]
 800e6f4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e6f8:	2a00      	cmp	r2, #0
 800e6fa:	f000 8081 	beq.w	800e800 <GUIMONO_DispChar+0x138>
 800e6fe:	8816      	ldrh	r6, [r2, #0]
 800e700:	42b0      	cmp	r0, r6
 800e702:	d37d      	bcc.n	800e800 <GUIMONO_DispChar+0x138>
 800e704:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800e708:	4584      	cmp	ip, r0
 800e70a:	d379      	bcc.n	800e800 <GUIMONO_DispChar+0x138>
 800e70c:	6852      	ldr	r2, [r2, #4]
 800e70e:	1b80      	subs	r0, r0, r6
 800e710:	b280      	uxth	r0, r0
 800e712:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800e716:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800e71a:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800e71e:	1c50      	adds	r0, r2, #1
 800e720:	d06e      	beq.n	800e800 <GUIMONO_DispChar+0x138>
 800e722:	f891 8018 	ldrb.w	r8, [r1, #24]
 800e726:	7ca1      	ldrb	r1, [r4, #18]
 800e728:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800e72c:	7c26      	ldrb	r6, [r4, #16]
 800e72e:	9206      	str	r2, [sp, #24]
 800e730:	fb18 f101 	smulbb	r1, r8, r1
 800e734:	9107      	str	r1, [sp, #28]
 800e736:	fa0f f18a 	sxth.w	r1, sl
 800e73a:	4608      	mov	r0, r1
 800e73c:	9108      	str	r1, [sp, #32]
 800e73e:	f7fd fa03 	bl	800bb48 <LCD_SetDrawMode>
 800e742:	4934      	ldr	r1, [pc, #208]	; (800e814 <GUIMONO_DispChar+0x14c>)
 800e744:	9009      	str	r0, [sp, #36]	; 0x24
 800e746:	680b      	ldr	r3, [r1, #0]
 800e748:	9a06      	ldr	r2, [sp, #24]
 800e74a:	69d9      	ldr	r1, [r3, #28]
 800e74c:	7e88      	ldrb	r0, [r1, #26]
 800e74e:	9000      	str	r0, [sp, #0]
 800e750:	7ec9      	ldrb	r1, [r1, #27]
 800e752:	9101      	str	r1, [sp, #4]
 800e754:	2101      	movs	r1, #1
 800e756:	9102      	str	r1, [sp, #8]
 800e758:	7ca1      	ldrb	r1, [r4, #18]
 800e75a:	9103      	str	r1, [sp, #12]
 800e75c:	9907      	ldr	r1, [sp, #28]
 800e75e:	fb01 9202 	mla	r2, r1, r2, r9
 800e762:	9204      	str	r2, [sp, #16]
 800e764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e766:	9305      	str	r3, [sp, #20]
 800e768:	b23f      	sxth	r7, r7
 800e76a:	b22d      	sxth	r5, r5
 800e76c:	4638      	mov	r0, r7
 800e76e:	4629      	mov	r1, r5
 800e770:	4632      	mov	r2, r6
 800e772:	4643      	mov	r3, r8
 800e774:	f7fd fa96 	bl	800bca4 <LCD_DrawBitmap>
 800e778:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800e77c:	d01b      	beq.n	800e7b6 <GUIMONO_DispChar+0xee>
 800e77e:	f04a 0002 	orr.w	r0, sl, #2
 800e782:	b200      	sxth	r0, r0
 800e784:	f7fd f9e0 	bl	800bb48 <LCD_SetDrawMode>
 800e788:	4a22      	ldr	r2, [pc, #136]	; (800e814 <GUIMONO_DispChar+0x14c>)
 800e78a:	6813      	ldr	r3, [r2, #0]
 800e78c:	69da      	ldr	r2, [r3, #28]
 800e78e:	7e91      	ldrb	r1, [r2, #26]
 800e790:	9100      	str	r1, [sp, #0]
 800e792:	7ed2      	ldrb	r2, [r2, #27]
 800e794:	9201      	str	r2, [sp, #4]
 800e796:	2101      	movs	r1, #1
 800e798:	9102      	str	r1, [sp, #8]
 800e79a:	9907      	ldr	r1, [sp, #28]
 800e79c:	7ca2      	ldrb	r2, [r4, #18]
 800e79e:	9203      	str	r2, [sp, #12]
 800e7a0:	fb01 920b 	mla	r2, r1, fp, r9
 800e7a4:	9204      	str	r2, [sp, #16]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a8:	9305      	str	r3, [sp, #20]
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4632      	mov	r2, r6
 800e7b0:	4643      	mov	r3, r8
 800e7b2:	f7fd fa77 	bl	800bca4 <LCD_DrawBitmap>
 800e7b6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800e814 <GUIMONO_DispChar+0x14c>
 800e7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	7e5a      	ldrb	r2, [r3, #25]
 800e7c2:	7e1b      	ldrb	r3, [r3, #24]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d917      	bls.n	800e7f8 <GUIMONO_DispChar+0x130>
 800e7c8:	9a08      	ldr	r2, [sp, #32]
 800e7ca:	2a02      	cmp	r2, #2
 800e7cc:	d014      	beq.n	800e7f8 <GUIMONO_DispChar+0x130>
 800e7ce:	f08a 0004 	eor.w	r0, sl, #4
 800e7d2:	b200      	sxth	r0, r0
 800e7d4:	f7fd f9b8 	bl	800bb48 <LCD_SetDrawMode>
 800e7d8:	f8d8 3000 	ldr.w	r3, [r8]
 800e7dc:	69db      	ldr	r3, [r3, #28]
 800e7de:	f893 e018 	ldrb.w	lr, [r3, #24]
 800e7e2:	7ed9      	ldrb	r1, [r3, #27]
 800e7e4:	7e9a      	ldrb	r2, [r3, #26]
 800e7e6:	7e5b      	ldrb	r3, [r3, #25]
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	fb0e 5101 	mla	r1, lr, r1, r5
 800e7ee:	fb06 7202 	mla	r2, r6, r2, r7
 800e7f2:	442b      	add	r3, r5
 800e7f4:	f7fd fa2a 	bl	800bc4c <LCD_FillRect>
 800e7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7fa:	b2d8      	uxtb	r0, r3
 800e7fc:	f7fd f9a4 	bl	800bb48 <LCD_SetDrawMode>
 800e800:	4b04      	ldr	r3, [pc, #16]	; (800e814 <GUIMONO_DispChar+0x14c>)
 800e802:	7c61      	ldrb	r1, [r4, #17]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800e808:	440a      	add	r2, r1
 800e80a:	845a      	strh	r2, [r3, #34]	; 0x22
 800e80c:	b00b      	add	sp, #44	; 0x2c
 800e80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e812:	bf00      	nop
 800e814:	2000002c 	.word	0x2000002c

0800e818 <GUIMONO_GetCharDistX>:
 800e818:	4b04      	ldr	r3, [pc, #16]	; (800e82c <GUIMONO_GetCharDistX+0x14>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	69db      	ldr	r3, [r3, #28]
 800e81e:	69db      	ldr	r3, [r3, #28]
 800e820:	b109      	cbz	r1, 800e826 <GUIMONO_GetCharDistX+0xe>
 800e822:	7c1a      	ldrb	r2, [r3, #16]
 800e824:	600a      	str	r2, [r1, #0]
 800e826:	7c58      	ldrb	r0, [r3, #17]
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	2000002c 	.word	0x2000002c

0800e830 <GUIMONO_GetFontInfo>:
 800e830:	2302      	movs	r3, #2
 800e832:	800b      	strh	r3, [r1, #0]
 800e834:	4770      	bx	lr

0800e836 <GUIMONO_IsInFont>:
 800e836:	69c3      	ldr	r3, [r0, #28]
 800e838:	899a      	ldrh	r2, [r3, #12]
 800e83a:	428a      	cmp	r2, r1
 800e83c:	d802      	bhi.n	800e844 <GUIMONO_IsInFont+0xe>
 800e83e:	89da      	ldrh	r2, [r3, #14]
 800e840:	428a      	cmp	r2, r1
 800e842:	d20f      	bcs.n	800e864 <GUIMONO_IsInFont+0x2e>
 800e844:	6898      	ldr	r0, [r3, #8]
 800e846:	b180      	cbz	r0, 800e86a <GUIMONO_IsInFont+0x34>
 800e848:	8803      	ldrh	r3, [r0, #0]
 800e84a:	4299      	cmp	r1, r3
 800e84c:	d30c      	bcc.n	800e868 <GUIMONO_IsInFont+0x32>
 800e84e:	8842      	ldrh	r2, [r0, #2]
 800e850:	428a      	cmp	r2, r1
 800e852:	d309      	bcc.n	800e868 <GUIMONO_IsInFont+0x32>
 800e854:	1ac9      	subs	r1, r1, r3
 800e856:	6842      	ldr	r2, [r0, #4]
 800e858:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800e85c:	43c0      	mvns	r0, r0
 800e85e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800e862:	4770      	bx	lr
 800e864:	2001      	movs	r0, #1
 800e866:	4770      	bx	lr
 800e868:	2000      	movs	r0, #0
 800e86a:	4770      	bx	lr

0800e86c <_Log2VisBuffered>:
 800e86c:	4770      	bx	lr
	...

0800e870 <_DispLine>:
 800e870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e872:	4615      	mov	r5, r2
 800e874:	ab02      	add	r3, sp, #8
 800e876:	4a1a      	ldr	r2, [pc, #104]	; (800e8e0 <_DispLine+0x70>)
 800e878:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e87c:	9001      	str	r0, [sp, #4]
 800e87e:	6812      	ldr	r2, [r2, #0]
 800e880:	4c18      	ldr	r4, [pc, #96]	; (800e8e4 <_DispLine+0x74>)
 800e882:	4669      	mov	r1, sp
 800e884:	4790      	blx	r2
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	9001      	str	r0, [sp, #4]
 800e88a:	6958      	ldr	r0, [r3, #20]
 800e88c:	b958      	cbnz	r0, 800e8a6 <_DispLine+0x36>
 800e88e:	2001      	movs	r0, #1
 800e890:	f7fd fc74 	bl	800c17c <GUI__ManageCache>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	69db      	ldr	r3, [r3, #28]
 800e898:	695b      	ldr	r3, [r3, #20]
 800e89a:	b1bb      	cbz	r3, 800e8cc <_DispLine+0x5c>
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	9801      	ldr	r0, [sp, #4]
 800e8a0:	9900      	ldr	r1, [sp, #0]
 800e8a2:	4798      	blx	r3
 800e8a4:	e017      	b.n	800e8d6 <_DispLine+0x66>
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	f7fe fdff 	bl	800d4aa <GUI_RectsIntersect>
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d1ee      	bne.n	800e88e <_DispLine+0x1e>
 800e8b0:	e014      	b.n	800e8dc <_DispLine+0x6c>
 800e8b2:	a801      	add	r0, sp, #4
 800e8b4:	f002 f92a 	bl	8010b0c <GUI_UC__GetCharCodeInc>
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	69db      	ldr	r3, [r3, #28]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4605      	mov	r5, r0
 800e8c0:	4798      	blx	r3
 800e8c2:	4b09      	ldr	r3, [pc, #36]	; (800e8e8 <_DispLine+0x78>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	b10b      	cbz	r3, 800e8cc <_DispLine+0x5c>
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	4798      	blx	r3
 800e8cc:	9b00      	ldr	r3, [sp, #0]
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	daed      	bge.n	800e8b2 <_DispLine+0x42>
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	f7fd fc50 	bl	800c17c <GUI__ManageCache>
 800e8dc:	b003      	add	sp, #12
 800e8de:	bd30      	pop	{r4, r5, pc}
 800e8e0:	20000038 	.word	0x20000038
 800e8e4:	2000002c 	.word	0x2000002c
 800e8e8:	20022fb8 	.word	0x20022fb8

0800e8ec <GUI__GetLineNumChars>:
 800e8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	9001      	str	r0, [sp, #4]
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	b198      	cbz	r0, 800e91e <GUI__GetLineNumChars+0x32>
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <GUI__GetLineNumChars+0x38>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	69db      	ldr	r3, [r3, #28]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	b10b      	cbz	r3, 800e904 <GUI__GetLineNumChars+0x18>
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	b90b      	cbnz	r3, 800e908 <GUI__GetLineNumChars+0x1c>
 800e904:	2400      	movs	r4, #0
 800e906:	e008      	b.n	800e91a <GUI__GetLineNumChars+0x2e>
 800e908:	4798      	blx	r3
 800e90a:	e009      	b.n	800e920 <GUI__GetLineNumChars+0x34>
 800e90c:	a801      	add	r0, sp, #4
 800e90e:	f002 f8fd 	bl	8010b0c <GUI_UC__GetCharCodeInc>
 800e912:	b120      	cbz	r0, 800e91e <GUI__GetLineNumChars+0x32>
 800e914:	280a      	cmp	r0, #10
 800e916:	d002      	beq.n	800e91e <GUI__GetLineNumChars+0x32>
 800e918:	3401      	adds	r4, #1
 800e91a:	42ac      	cmp	r4, r5
 800e91c:	dbf6      	blt.n	800e90c <GUI__GetLineNumChars+0x20>
 800e91e:	4620      	mov	r0, r4
 800e920:	b003      	add	sp, #12
 800e922:	bd30      	pop	{r4, r5, pc}
 800e924:	2000002c 	.word	0x2000002c

0800e928 <GUI__GetOverlap>:
 800e928:	b513      	push	{r0, r1, r4, lr}
 800e92a:	a902      	add	r1, sp, #8
 800e92c:	2400      	movs	r4, #0
 800e92e:	f841 4d04 	str.w	r4, [r1, #-4]!
 800e932:	f000 f8df 	bl	800eaf4 <GUI_GetCharDistXEx>
 800e936:	9b01      	ldr	r3, [sp, #4]
 800e938:	4283      	cmp	r3, r0
 800e93a:	bfcc      	ite	gt
 800e93c:	ebc0 0003 	rsbgt	r0, r0, r3
 800e940:	4620      	movle	r0, r4
 800e942:	b002      	add	sp, #8
 800e944:	bd10      	pop	{r4, pc}
	...

0800e948 <GUI__GetLineDistX>:
 800e948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e94a:	4a15      	ldr	r2, [pc, #84]	; (800e9a0 <GUI__GetLineDistX+0x58>)
 800e94c:	9001      	str	r0, [sp, #4]
 800e94e:	ab02      	add	r3, sp, #8
 800e950:	6812      	ldr	r2, [r2, #0]
 800e952:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e956:	4669      	mov	r1, sp
 800e958:	4790      	blx	r2
 800e95a:	9001      	str	r0, [sp, #4]
 800e95c:	b1f0      	cbz	r0, 800e99c <GUI__GetLineDistX+0x54>
 800e95e:	4b11      	ldr	r3, [pc, #68]	; (800e9a4 <GUI__GetLineDistX+0x5c>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	695b      	ldr	r3, [r3, #20]
 800e966:	b10b      	cbz	r3, 800e96c <GUI__GetLineDistX+0x24>
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	b913      	cbnz	r3, 800e972 <GUI__GetLineDistX+0x2a>
 800e96c:	2500      	movs	r5, #0
 800e96e:	462c      	mov	r4, r5
 800e970:	e002      	b.n	800e978 <GUI__GetLineDistX+0x30>
 800e972:	9900      	ldr	r1, [sp, #0]
 800e974:	4798      	blx	r3
 800e976:	e011      	b.n	800e99c <GUI__GetLineDistX+0x54>
 800e978:	9b00      	ldr	r3, [sp, #0]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	db07      	blt.n	800e992 <GUI__GetLineDistX+0x4a>
 800e982:	a801      	add	r0, sp, #4
 800e984:	f002 f8c2 	bl	8010b0c <GUI_UC__GetCharCodeInc>
 800e988:	4605      	mov	r5, r0
 800e98a:	f000 f8a9 	bl	800eae0 <GUI_GetCharDistX>
 800e98e:	4404      	add	r4, r0
 800e990:	e7f2      	b.n	800e978 <GUI__GetLineDistX+0x30>
 800e992:	4628      	mov	r0, r5
 800e994:	f7ff ffc8 	bl	800e928 <GUI__GetOverlap>
 800e998:	4420      	add	r0, r4
 800e99a:	e7ff      	b.n	800e99c <GUI__GetLineDistX+0x54>
 800e99c:	b003      	add	sp, #12
 800e99e:	bd30      	pop	{r4, r5, pc}
 800e9a0:	20000038 	.word	0x20000038
 800e9a4:	2000002c 	.word	0x2000002c

0800e9a8 <GUI__DispLine>:
 800e9a8:	4b27      	ldr	r3, [pc, #156]	; (800ea48 <GUI__DispLine+0xa0>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	b163      	cbz	r3, 800e9ce <GUI__DispLine+0x26>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	f7fb f97f 	bl	8009cb8 <WM__InitIVRSearch>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d041      	beq.n	800ea42 <GUI__DispLine+0x9a>
 800e9be:	4628      	mov	r0, r5
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	466a      	mov	r2, sp
 800e9c4:	f7ff ff54 	bl	800e870 <_DispLine>
 800e9c8:	f7fb f8b4 	bl	8009b34 <WM__GetNextIVR>
 800e9cc:	e7f5      	b.n	800e9ba <GUI__DispLine+0x12>
 800e9ce:	6810      	ldr	r0, [r2, #0]
 800e9d0:	6851      	ldr	r1, [r2, #4]
 800e9d2:	4e1e      	ldr	r6, [pc, #120]	; (800ea4c <GUI__DispLine+0xa4>)
 800e9d4:	466b      	mov	r3, sp
 800e9d6:	c303      	stmia	r3!, {r0, r1}
 800e9d8:	6833      	ldr	r3, [r6, #0]
 800e9da:	f8bd 1000 	ldrh.w	r1, [sp]
 800e9de:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800e9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9e6:	4411      	add	r1, r2
 800e9e8:	f8ad 1000 	strh.w	r1, [sp]
 800e9ec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e9f0:	4419      	add	r1, r3
 800e9f2:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e9f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e9fa:	440a      	add	r2, r1
 800e9fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ea00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea04:	4668      	mov	r0, sp
 800ea06:	4413      	add	r3, r2
 800ea08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea0c:	f7fb f954 	bl	8009cb8 <WM__InitIVRSearch>
 800ea10:	6833      	ldr	r3, [r6, #0]
 800ea12:	b940      	cbnz	r0, 800ea26 <GUI__DispLine+0x7e>
 800ea14:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ea16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea18:	1a8a      	subs	r2, r1, r2
 800ea1a:	845a      	strh	r2, [r3, #34]	; 0x22
 800ea1c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800ea1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea20:	1a8a      	subs	r2, r1, r2
 800ea22:	849a      	strh	r2, [r3, #36]	; 0x24
 800ea24:	e00d      	b.n	800ea42 <GUI__DispLine+0x9a>
 800ea26:	f8bd 2000 	ldrh.w	r2, [sp]
 800ea2a:	845a      	strh	r2, [r3, #34]	; 0x22
 800ea2c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea30:	849a      	strh	r2, [r3, #36]	; 0x24
 800ea32:	4628      	mov	r0, r5
 800ea34:	4621      	mov	r1, r4
 800ea36:	466a      	mov	r2, sp
 800ea38:	f7ff ff1a 	bl	800e870 <_DispLine>
 800ea3c:	f7fb f87a 	bl	8009b34 <WM__GetNextIVR>
 800ea40:	e7e6      	b.n	800ea10 <GUI__DispLine+0x68>
 800ea42:	b002      	add	sp, #8
 800ea44:	bd70      	pop	{r4, r5, r6, pc}
 800ea46:	bf00      	nop
 800ea48:	20022fa0 	.word	0x20022fa0
 800ea4c:	2000002c 	.word	0x2000002c

0800ea50 <GUI_GetYAdjust>:
 800ea50:	4b0a      	ldr	r3, [pc, #40]	; (800ea7c <GUI_GetYAdjust+0x2c>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ea56:	f002 020c 	and.w	r2, r2, #12
 800ea5a:	2a08      	cmp	r2, #8
 800ea5c:	d007      	beq.n	800ea6e <GUI_GetYAdjust+0x1e>
 800ea5e:	2a0c      	cmp	r2, #12
 800ea60:	d005      	beq.n	800ea6e <GUI_GetYAdjust+0x1e>
 800ea62:	2a04      	cmp	r2, #4
 800ea64:	d107      	bne.n	800ea76 <GUI_GetYAdjust+0x26>
 800ea66:	69db      	ldr	r3, [r3, #28]
 800ea68:	7e18      	ldrb	r0, [r3, #24]
 800ea6a:	3801      	subs	r0, #1
 800ea6c:	4770      	bx	lr
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	7e18      	ldrb	r0, [r3, #24]
 800ea72:	0840      	lsrs	r0, r0, #1
 800ea74:	4770      	bx	lr
 800ea76:	2000      	movs	r0, #0
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	2000002c 	.word	0x2000002c

0800ea80 <GUI_GetFontDistY>:
 800ea80:	4b02      	ldr	r3, [pc, #8]	; (800ea8c <GUI_GetFontDistY+0xc>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	69db      	ldr	r3, [r3, #28]
 800ea86:	7e58      	ldrb	r0, [r3, #25]
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	2000002c 	.word	0x2000002c

0800ea90 <GUI_DispNextLine>:
 800ea90:	4b05      	ldr	r3, [pc, #20]	; (800eaa8 <GUI_DispNextLine+0x18>)
 800ea92:	b510      	push	{r4, lr}
 800ea94:	681c      	ldr	r4, [r3, #0]
 800ea96:	f7ff fff3 	bl	800ea80 <GUI_GetFontDistY>
 800ea9a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ea9c:	4418      	add	r0, r3
 800ea9e:	8c23      	ldrh	r3, [r4, #32]
 800eaa0:	84a0      	strh	r0, [r4, #36]	; 0x24
 800eaa2:	8463      	strh	r3, [r4, #34]	; 0x22
 800eaa4:	bd10      	pop	{r4, pc}
 800eaa6:	bf00      	nop
 800eaa8:	2000002c 	.word	0x2000002c

0800eaac <GL_DispChar>:
 800eaac:	280a      	cmp	r0, #10
 800eaae:	b510      	push	{r4, lr}
 800eab0:	4604      	mov	r4, r0
 800eab2:	d103      	bne.n	800eabc <GL_DispChar+0x10>
 800eab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab8:	f7ff bfea 	b.w	800ea90 <GUI_DispNextLine>
 800eabc:	280d      	cmp	r0, #13
 800eabe:	d009      	beq.n	800ead4 <GL_DispChar+0x28>
 800eac0:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <GL_DispChar+0x2c>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	69db      	ldr	r3, [r3, #28]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4798      	blx	r3
 800eaca:	4b04      	ldr	r3, [pc, #16]	; (800eadc <GL_DispChar+0x30>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	b10b      	cbz	r3, 800ead4 <GL_DispChar+0x28>
 800ead0:	4620      	mov	r0, r4
 800ead2:	4798      	blx	r3
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	bf00      	nop
 800ead8:	2000002c 	.word	0x2000002c
 800eadc:	20022fb8 	.word	0x20022fb8

0800eae0 <GUI_GetCharDistX>:
 800eae0:	b508      	push	{r3, lr}
 800eae2:	4b03      	ldr	r3, [pc, #12]	; (800eaf0 <GUI_GetCharDistX+0x10>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	69db      	ldr	r3, [r3, #28]
 800eae8:	2100      	movs	r1, #0
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	4798      	blx	r3
 800eaee:	bd08      	pop	{r3, pc}
 800eaf0:	2000002c 	.word	0x2000002c

0800eaf4 <GUI_GetCharDistXEx>:
 800eaf4:	b508      	push	{r3, lr}
 800eaf6:	4b03      	ldr	r3, [pc, #12]	; (800eb04 <GUI_GetCharDistXEx+0x10>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	69db      	ldr	r3, [r3, #28]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	4798      	blx	r3
 800eb00:	bd08      	pop	{r3, pc}
 800eb02:	bf00      	nop
 800eb04:	2000002c 	.word	0x2000002c

0800eb08 <_PushFreeBlock>:
 800eb08:	4b07      	ldr	r3, [pc, #28]	; (800eb28 <_PushFreeBlock+0x20>)
 800eb0a:	685a      	ldr	r2, [r3, #4]
 800eb0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800eb0e:	3201      	adds	r2, #1
 800eb10:	b510      	push	{r4, lr}
 800eb12:	605a      	str	r2, [r3, #4]
 800eb14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb16:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800eb1a:	6061      	str	r1, [r4, #4]
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800eb22:	6258      	str	r0, [r3, #36]	; 0x24
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	bf00      	nop
 800eb28:	20022fdc 	.word	0x20022fdc

0800eb2c <_OnExit>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d0b      	ldr	r5, [pc, #44]	; (800eb5c <_OnExit+0x30>)
 800eb30:	2400      	movs	r4, #0
 800eb32:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800eb36:	4621      	mov	r1, r4
 800eb38:	2280      	movs	r2, #128	; 0x80
 800eb3a:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800eb3e:	f7fd fa7f 	bl	800c040 <GUI__memset>
 800eb42:	4628      	mov	r0, r5
 800eb44:	4621      	mov	r1, r4
 800eb46:	22c0      	movs	r2, #192	; 0xc0
 800eb48:	f7fd fa7a 	bl	800c040 <GUI__memset>
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4804      	ldr	r0, [pc, #16]	; (800eb60 <_OnExit+0x34>)
 800eb50:	220c      	movs	r2, #12
 800eb52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb56:	f7fd ba73 	b.w	800c040 <GUI__memset>
 800eb5a:	bf00      	nop
 800eb5c:	20022fdc 	.word	0x20022fdc
 800eb60:	20022bb0 	.word	0x20022bb0

0800eb64 <_RemoveFreeBlock>:
 800eb64:	b510      	push	{r4, lr}
 800eb66:	6842      	ldr	r2, [r0, #4]
 800eb68:	230f      	movs	r3, #15
 800eb6a:	490d      	ldr	r1, [pc, #52]	; (800eba0 <_RemoveFreeBlock+0x3c>)
 800eb6c:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800eb70:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800eb72:	42a2      	cmp	r2, r4
 800eb74:	d203      	bcs.n	800eb7e <_RemoveFreeBlock+0x1a>
 800eb76:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800eb7a:	d2f6      	bcs.n	800eb6a <_RemoveFreeBlock+0x6>
 800eb7c:	bd10      	pop	{r4, pc}
 800eb7e:	2b0f      	cmp	r3, #15
 800eb80:	d80c      	bhi.n	800eb9c <_RemoveFreeBlock+0x38>
 800eb82:	680c      	ldr	r4, [r1, #0]
 800eb84:	1aa2      	subs	r2, r4, r2
 800eb86:	600a      	str	r2, [r1, #0]
 800eb88:	6882      	ldr	r2, [r0, #8]
 800eb8a:	68c0      	ldr	r0, [r0, #12]
 800eb8c:	b102      	cbz	r2, 800eb90 <_RemoveFreeBlock+0x2c>
 800eb8e:	6050      	str	r0, [r2, #4]
 800eb90:	b108      	cbz	r0, 800eb96 <_RemoveFreeBlock+0x32>
 800eb92:	6002      	str	r2, [r0, #0]
 800eb94:	bd10      	pop	{r4, pc}
 800eb96:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800eb9a:	645a      	str	r2, [r3, #68]	; 0x44
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	bf00      	nop
 800eba0:	20022fdc 	.word	0x20022fdc

0800eba4 <_AddFreeMemory>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	4e26      	ldr	r6, [pc, #152]	; (800ec40 <_AddFreeMemory+0x9c>)
 800eba8:	68f3      	ldr	r3, [r6, #12]
 800ebaa:	1e5a      	subs	r2, r3, #1
 800ebac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ebae:	4605      	mov	r5, r0
 800ebb0:	4413      	add	r3, r2
 800ebb2:	1808      	adds	r0, r1, r0
 800ebb4:	4298      	cmp	r0, r3
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	d805      	bhi.n	800ebc6 <_AddFreeMemory+0x22>
 800ebba:	594b      	ldr	r3, [r1, r5]
 800ebbc:	b91b      	cbnz	r3, 800ebc6 <_AddFreeMemory+0x22>
 800ebbe:	6843      	ldr	r3, [r0, #4]
 800ebc0:	441d      	add	r5, r3
 800ebc2:	f7ff ffcf 	bl	800eb64 <_RemoveFreeBlock>
 800ebc6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ebc8:	429c      	cmp	r4, r3
 800ebca:	d90a      	bls.n	800ebe2 <_AddFreeMemory+0x3e>
 800ebcc:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800ebd0:	1be7      	subs	r7, r4, r7
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	b92b      	cbnz	r3, 800ebe2 <_AddFreeMemory+0x3e>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4638      	mov	r0, r7
 800ebda:	441d      	add	r5, r3
 800ebdc:	f7ff ffc2 	bl	800eb64 <_RemoveFreeBlock>
 800ebe0:	463c      	mov	r4, r7
 800ebe2:	230f      	movs	r3, #15
 800ebe4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ebe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ebea:	4295      	cmp	r5, r2
 800ebec:	d203      	bcs.n	800ebf6 <_AddFreeMemory+0x52>
 800ebee:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800ebf2:	d2f7      	bcs.n	800ebe4 <_AddFreeMemory+0x40>
 800ebf4:	e022      	b.n	800ec3c <_AddFreeMemory+0x98>
 800ebf6:	2b0f      	cmp	r3, #15
 800ebf8:	d820      	bhi.n	800ec3c <_AddFreeMemory+0x98>
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ec00:	1961      	adds	r1, r4, r5
 800ec02:	6852      	ldr	r2, [r2, #4]
 800ec04:	60a2      	str	r2, [r4, #8]
 800ec06:	2000      	movs	r0, #0
 800ec08:	e884 0021 	stmia.w	r4, {r0, r5}
 800ec0c:	6124      	str	r4, [r4, #16]
 800ec0e:	f841 5c04 	str.w	r5, [r1, #-4]
 800ec12:	f104 0108 	add.w	r1, r4, #8
 800ec16:	b102      	cbz	r2, 800ec1a <_AddFreeMemory+0x76>
 800ec18:	6051      	str	r1, [r2, #4]
 800ec1a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ec1e:	60e0      	str	r0, [r4, #12]
 800ec20:	6059      	str	r1, [r3, #4]
 800ec22:	6833      	ldr	r3, [r6, #0]
 800ec24:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800ec28:	4a05      	ldr	r2, [pc, #20]	; (800ec40 <_AddFreeMemory+0x9c>)
 800ec2a:	442b      	add	r3, r5
 800ec2c:	6033      	str	r3, [r6, #0]
 800ec2e:	b929      	cbnz	r1, 800ec3c <_AddFreeMemory+0x98>
 800ec30:	68d1      	ldr	r1, [r2, #12]
 800ec32:	1acb      	subs	r3, r1, r3
 800ec34:	6891      	ldr	r1, [r2, #8]
 800ec36:	4299      	cmp	r1, r3
 800ec38:	bf38      	it	cc
 800ec3a:	6093      	strcc	r3, [r2, #8]
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec40:	20022fdc 	.word	0x20022fdc

0800ec44 <_RemoveHoles>:
 800ec44:	4b25      	ldr	r3, [pc, #148]	; (800ecdc <_RemoveHoles+0x98>)
 800ec46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4a:	68da      	ldr	r2, [r3, #12]
 800ec4c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ec4e:	3a01      	subs	r2, #1
 800ec50:	4682      	mov	sl, r0
 800ec52:	eb02 0904 	add.w	r9, r2, r4
 800ec56:	469b      	mov	fp, r3
 800ec58:	e894 0028 	ldmia.w	r4, {r3, r5}
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d133      	bne.n	800ecc8 <_RemoveHoles+0x84>
 800ec60:	eb04 0805 	add.w	r8, r4, r5
 800ec64:	45c8      	cmp	r8, r9
 800ec66:	d22f      	bcs.n	800ecc8 <_RemoveHoles+0x84>
 800ec68:	f854 c005 	ldr.w	ip, [r4, r5]
 800ec6c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800ec70:	f1bc 0f00 	cmp.w	ip, #0
 800ec74:	d028      	beq.n	800ecc8 <_RemoveHoles+0x84>
 800ec76:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800ec7a:	4f18      	ldr	r7, [pc, #96]	; (800ecdc <_RemoveHoles+0x98>)
 800ec7c:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d121      	bne.n	800ecc8 <_RemoveHoles+0x84>
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	4620      	mov	r0, r4
 800ec88:	e88d 1008 	stmia.w	sp, {r3, ip}
 800ec8c:	f7ff ff6a 	bl	800eb64 <_RemoveFreeBlock>
 800ec90:	f8d8 1000 	ldr.w	r1, [r8]
 800ec94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	6054      	str	r4, [r2, #4]
 800ec9e:	4641      	mov	r1, r8
 800eca0:	4632      	mov	r2, r6
 800eca2:	f002 fdd1 	bl	8011848 <memmove>
 800eca6:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800ecaa:	459c      	cmp	ip, r3
 800ecac:	d102      	bne.n	800ecb4 <_RemoveHoles+0x70>
 800ecae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb0:	1b5b      	subs	r3, r3, r5
 800ecb2:	637b      	str	r3, [r7, #52]	; 0x34
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	19a1      	adds	r1, r4, r6
 800ecb8:	f7ff ff74 	bl	800eba4 <_AddFreeMemory>
 800ecbc:	f1ba 0f00 	cmp.w	sl, #0
 800ecc0:	d001      	beq.n	800ecc6 <_RemoveHoles+0x82>
 800ecc2:	4582      	cmp	sl, r0
 800ecc4:	d905      	bls.n	800ecd2 <_RemoveHoles+0x8e>
 800ecc6:	4635      	mov	r5, r6
 800ecc8:	442c      	add	r4, r5
 800ecca:	454c      	cmp	r4, r9
 800eccc:	d3c4      	bcc.n	800ec58 <_RemoveHoles+0x14>
 800ecce:	2001      	movs	r0, #1
 800ecd0:	e000      	b.n	800ecd4 <_RemoveHoles+0x90>
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	b003      	add	sp, #12
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecda:	bf00      	nop
 800ecdc:	20022fdc 	.word	0x20022fdc

0800ece0 <GUI_ALLOC_FreeFixedBlock>:
 800ece0:	b128      	cbz	r0, 800ecee <GUI_ALLOC_FreeFixedBlock+0xe>
 800ece2:	4a03      	ldr	r2, [pc, #12]	; (800ecf0 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800ece4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ece6:	6003      	str	r3, [r0, #0]
 800ece8:	b103      	cbz	r3, 800ecec <GUI_ALLOC_FreeFixedBlock+0xc>
 800ecea:	6058      	str	r0, [r3, #4]
 800ecec:	63d0      	str	r0, [r2, #60]	; 0x3c
 800ecee:	4770      	bx	lr
 800ecf0:	20022fdc 	.word	0x20022fdc

0800ecf4 <GUI_ALLOC_h2p>:
 800ecf4:	b128      	cbz	r0, 800ed02 <GUI_ALLOC_h2p+0xe>
 800ecf6:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <GUI_ALLOC_h2p+0x10>)
 800ecf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecfa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ecfe:	6840      	ldr	r0, [r0, #4]
 800ed00:	3008      	adds	r0, #8
 800ed02:	4770      	bx	lr
 800ed04:	20022fdc 	.word	0x20022fdc

0800ed08 <GUI_ALLOC_LockH>:
 800ed08:	4b05      	ldr	r3, [pc, #20]	; (800ed20 <GUI_ALLOC_LockH+0x18>)
 800ed0a:	69d9      	ldr	r1, [r3, #28]
 800ed0c:	3101      	adds	r1, #1
 800ed0e:	61d9      	str	r1, [r3, #28]
 800ed10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed12:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800ed16:	3101      	adds	r1, #1
 800ed18:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800ed1c:	f7ff bfea 	b.w	800ecf4 <GUI_ALLOC_h2p>
 800ed20:	20022fdc 	.word	0x20022fdc

0800ed24 <GUI_ALLOC_UnlockH>:
 800ed24:	b530      	push	{r4, r5, lr}
 800ed26:	6802      	ldr	r2, [r0, #0]
 800ed28:	4b09      	ldr	r3, [pc, #36]	; (800ed50 <GUI_ALLOC_UnlockH+0x2c>)
 800ed2a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800ed2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed30:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800ed34:	2c01      	cmp	r4, #1
 800ed36:	d903      	bls.n	800ed40 <GUI_ALLOC_UnlockH+0x1c>
 800ed38:	69dd      	ldr	r5, [r3, #28]
 800ed3a:	b10d      	cbz	r5, 800ed40 <GUI_ALLOC_UnlockH+0x1c>
 800ed3c:	3d01      	subs	r5, #1
 800ed3e:	61dd      	str	r5, [r3, #28]
 800ed40:	3c01      	subs	r4, #1
 800ed42:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800ed46:	2300      	movs	r3, #0
 800ed48:	6003      	str	r3, [r0, #0]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	bd30      	pop	{r4, r5, pc}
 800ed4e:	bf00      	nop
 800ed50:	20022fdc 	.word	0x20022fdc

0800ed54 <GUI_ALLOC_AssignMemory>:
 800ed54:	4b02      	ldr	r3, [pc, #8]	; (800ed60 <GUI_ALLOC_AssignMemory+0xc>)
 800ed56:	f021 0103 	bic.w	r1, r1, #3
 800ed5a:	6018      	str	r0, [r3, #0]
 800ed5c:	6059      	str	r1, [r3, #4]
 800ed5e:	4770      	bx	lr
 800ed60:	20022bb0 	.word	0x20022bb0

0800ed64 <GUI_ALLOC_Free>:
 800ed64:	b510      	push	{r4, lr}
 800ed66:	4604      	mov	r4, r0
 800ed68:	b180      	cbz	r0, 800ed8c <GUI_ALLOC_Free+0x28>
 800ed6a:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <GUI_ALLOC_Free+0x2c>)
 800ed6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed6e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800ed72:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d108      	bne.n	800ed8c <GUI_ALLOC_Free+0x28>
 800ed7a:	6851      	ldr	r1, [r2, #4]
 800ed7c:	6848      	ldr	r0, [r1, #4]
 800ed7e:	f7ff ff11 	bl	800eba4 <_AddFreeMemory>
 800ed82:	4620      	mov	r0, r4
 800ed84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed88:	f7ff bebe 	b.w	800eb08 <_PushFreeBlock>
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop
 800ed90:	20022fdc 	.word	0x20022fdc

0800ed94 <_EnlargeBlocks>:
 800ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed98:	4c22      	ldr	r4, [pc, #136]	; (800ee24 <_EnlargeBlocks+0x90>)
 800ed9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed9c:	b93b      	cbnz	r3, 800edae <_EnlargeBlocks+0x1a>
 800ed9e:	4b22      	ldr	r3, [pc, #136]	; (800ee28 <_EnlargeBlocks+0x94>)
 800eda0:	689d      	ldr	r5, [r3, #8]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	3508      	adds	r5, #8
 800eda6:	fbb3 f5f5 	udiv	r5, r3, r5
 800edaa:	3502      	adds	r5, #2
 800edac:	e003      	b.n	800edb6 <_EnlargeBlocks+0x22>
 800edae:	6923      	ldr	r3, [r4, #16]
 800edb0:	1d1d      	adds	r5, r3, #4
 800edb2:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800edb6:	00e8      	lsls	r0, r5, #3
 800edb8:	f000 f962 	bl	800f080 <_Alloc>
 800edbc:	4680      	mov	r8, r0
 800edbe:	b360      	cbz	r0, 800ee1a <_EnlargeBlocks+0x86>
 800edc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edc2:	6922      	ldr	r2, [r4, #16]
 800edc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800edc6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800edca:	00d2      	lsls	r2, r2, #3
 800edcc:	685e      	ldr	r6, [r3, #4]
 800edce:	3608      	adds	r6, #8
 800edd0:	4630      	mov	r0, r6
 800edd2:	f002 fd2e 	bl	8011832 <memcpy>
 800edd6:	6922      	ldr	r2, [r4, #16]
 800edd8:	6366      	str	r6, [r4, #52]	; 0x34
 800edda:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800edde:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800ede2:	3104      	adds	r1, #4
 800ede4:	4613      	mov	r3, r2
 800ede6:	1e68      	subs	r0, r5, #1
 800ede8:	4283      	cmp	r3, r0
 800edea:	f101 0108 	add.w	r1, r1, #8
 800edee:	d203      	bcs.n	800edf8 <_EnlargeBlocks+0x64>
 800edf0:	3301      	adds	r3, #1
 800edf2:	f841 3c08 	str.w	r3, [r1, #-8]
 800edf6:	e7f6      	b.n	800ede6 <_EnlargeBlocks+0x52>
 800edf8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800edfc:	2600      	movs	r6, #0
 800edfe:	605e      	str	r6, [r3, #4]
 800ee00:	6863      	ldr	r3, [r4, #4]
 800ee02:	6262      	str	r2, [r4, #36]	; 0x24
 800ee04:	1a9b      	subs	r3, r3, r2
 800ee06:	442b      	add	r3, r5
 800ee08:	6063      	str	r3, [r4, #4]
 800ee0a:	6125      	str	r5, [r4, #16]
 800ee0c:	4638      	mov	r0, r7
 800ee0e:	b13f      	cbz	r7, 800ee20 <_EnlargeBlocks+0x8c>
 800ee10:	f7ff ffa8 	bl	800ed64 <GUI_ALLOC_Free>
 800ee14:	4630      	mov	r0, r6
 800ee16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1a:	2001      	movs	r0, #1
 800ee1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee24:	20022fdc 	.word	0x20022fdc
 800ee28:	20022bb0 	.word	0x20022bb0

0800ee2c <_InitOnce>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	4e58      	ldr	r6, [pc, #352]	; (800ef90 <_InitOnce+0x164>)
 800ee30:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800ee34:	2900      	cmp	r1, #0
 800ee36:	f040 80aa 	bne.w	800ef8e <_InitOnce+0x162>
 800ee3a:	4d56      	ldr	r5, [pc, #344]	; (800ef94 <_InitOnce+0x168>)
 800ee3c:	686a      	ldr	r2, [r5, #4]
 800ee3e:	2301      	movs	r3, #1
 800ee40:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800ee44:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800ee48:	bf28      	it	cs
 800ee4a:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800ee4e:	682b      	ldr	r3, [r5, #0]
 800ee50:	0894      	lsrs	r4, r2, #2
 800ee52:	2000      	movs	r0, #0
 800ee54:	42a0      	cmp	r0, r4
 800ee56:	d00c      	beq.n	800ee72 <_InitOnce+0x46>
 800ee58:	1847      	adds	r7, r0, r1
 800ee5a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ee5e:	fbb7 fefe 	udiv	lr, r7, lr
 800ee62:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ee66:	ebce 0707 	rsb	r7, lr, r7
 800ee6a:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800ee6e:	3001      	adds	r0, #1
 800ee70:	e7f0      	b.n	800ee54 <_InitOnce+0x28>
 800ee72:	2000      	movs	r0, #0
 800ee74:	42a0      	cmp	r0, r4
 800ee76:	d016      	beq.n	800eea6 <_InitOnce+0x7a>
 800ee78:	1847      	adds	r7, r0, r1
 800ee7a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ee7e:	fbb7 fefe 	udiv	lr, r7, lr
 800ee82:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ee86:	ebce 0e07 	rsb	lr, lr, r7
 800ee8a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ee8e:	4577      	cmp	r7, lr
 800ee90:	d007      	beq.n	800eea2 <_InitOnce+0x76>
 800ee92:	68aa      	ldr	r2, [r5, #8]
 800ee94:	4b3f      	ldr	r3, [pc, #252]	; (800ef94 <_InitOnce+0x168>)
 800ee96:	2a00      	cmp	r2, #0
 800ee98:	d155      	bne.n	800ef46 <_InitOnce+0x11a>
 800ee9a:	685a      	ldr	r2, [r3, #4]
 800ee9c:	0892      	lsrs	r2, r2, #2
 800ee9e:	609a      	str	r2, [r3, #8]
 800eea0:	e051      	b.n	800ef46 <_InitOnce+0x11a>
 800eea2:	3001      	adds	r0, #1
 800eea4:	e7e6      	b.n	800ee74 <_InitOnce+0x48>
 800eea6:	3101      	adds	r1, #1
 800eea8:	2902      	cmp	r1, #2
 800eeaa:	d1d2      	bne.n	800ee52 <_InitOnce+0x26>
 800eeac:	0854      	lsrs	r4, r2, #1
 800eeae:	2100      	movs	r1, #0
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	42a0      	cmp	r0, r4
 800eeb4:	d00c      	beq.n	800eed0 <_InitOnce+0xa4>
 800eeb6:	1847      	adds	r7, r0, r1
 800eeb8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800eebc:	fbb7 fefe 	udiv	lr, r7, lr
 800eec0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800eec4:	ebce 0707 	rsb	r7, lr, r7
 800eec8:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800eecc:	3001      	adds	r0, #1
 800eece:	e7f0      	b.n	800eeb2 <_InitOnce+0x86>
 800eed0:	2000      	movs	r0, #0
 800eed2:	42a0      	cmp	r0, r4
 800eed4:	d00f      	beq.n	800eef6 <_InitOnce+0xca>
 800eed6:	1847      	adds	r7, r0, r1
 800eed8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800eedc:	fbb7 fefe 	udiv	lr, r7, lr
 800eee0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800eee4:	ebce 0707 	rsb	r7, lr, r7
 800eee8:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800eeec:	b2bf      	uxth	r7, r7
 800eeee:	45bc      	cmp	ip, r7
 800eef0:	d1cf      	bne.n	800ee92 <_InitOnce+0x66>
 800eef2:	3001      	adds	r0, #1
 800eef4:	e7ed      	b.n	800eed2 <_InitOnce+0xa6>
 800eef6:	3101      	adds	r1, #1
 800eef8:	2902      	cmp	r1, #2
 800eefa:	d1d9      	bne.n	800eeb0 <_InitOnce+0x84>
 800eefc:	2100      	movs	r1, #0
 800eefe:	2000      	movs	r0, #0
 800ef00:	4290      	cmp	r0, r2
 800ef02:	d007      	beq.n	800ef14 <_InitOnce+0xe8>
 800ef04:	1844      	adds	r4, r0, r1
 800ef06:	27ff      	movs	r7, #255	; 0xff
 800ef08:	fbb4 f7f7 	udiv	r7, r4, r7
 800ef0c:	443c      	add	r4, r7
 800ef0e:	541c      	strb	r4, [r3, r0]
 800ef10:	3001      	adds	r0, #1
 800ef12:	e7f5      	b.n	800ef00 <_InitOnce+0xd4>
 800ef14:	2000      	movs	r0, #0
 800ef16:	4290      	cmp	r0, r2
 800ef18:	d00b      	beq.n	800ef32 <_InitOnce+0x106>
 800ef1a:	1844      	adds	r4, r0, r1
 800ef1c:	27ff      	movs	r7, #255	; 0xff
 800ef1e:	fbb4 f7f7 	udiv	r7, r4, r7
 800ef22:	443c      	add	r4, r7
 800ef24:	5c1f      	ldrb	r7, [r3, r0]
 800ef26:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800ef2a:	42a7      	cmp	r7, r4
 800ef2c:	d1b1      	bne.n	800ee92 <_InitOnce+0x66>
 800ef2e:	3001      	adds	r0, #1
 800ef30:	e7f1      	b.n	800ef16 <_InitOnce+0xea>
 800ef32:	3101      	adds	r1, #1
 800ef34:	2902      	cmp	r1, #2
 800ef36:	d1e2      	bne.n	800eefe <_InitOnce+0xd2>
 800ef38:	2100      	movs	r1, #0
 800ef3a:	4291      	cmp	r1, r2
 800ef3c:	d0a9      	beq.n	800ee92 <_InitOnce+0x66>
 800ef3e:	2000      	movs	r0, #0
 800ef40:	5458      	strb	r0, [r3, r1]
 800ef42:	3101      	adds	r1, #1
 800ef44:	e7f9      	b.n	800ef3a <_InitOnce+0x10e>
 800ef46:	4814      	ldr	r0, [pc, #80]	; (800ef98 <_InitOnce+0x16c>)
 800ef48:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <_InitOnce+0x170>)
 800ef4a:	6003      	str	r3, [r0, #0]
 800ef4c:	f7ff fb3e 	bl	800e5cc <GUI__RegisterExit>
 800ef50:	235a      	movs	r3, #90	; 0x5a
 800ef52:	6233      	str	r3, [r6, #32]
 800ef54:	2300      	movs	r3, #0
 800ef56:	2110      	movs	r1, #16
 800ef58:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ef5c:	4099      	lsls	r1, r3
 800ef5e:	3301      	adds	r3, #1
 800ef60:	2b10      	cmp	r3, #16
 800ef62:	4c0b      	ldr	r4, [pc, #44]	; (800ef90 <_InitOnce+0x164>)
 800ef64:	6411      	str	r1, [r2, #64]	; 0x40
 800ef66:	d1f6      	bne.n	800ef56 <_InitOnce+0x12a>
 800ef68:	6868      	ldr	r0, [r5, #4]
 800ef6a:	6829      	ldr	r1, [r5, #0]
 800ef6c:	63a1      	str	r1, [r4, #56]	; 0x38
 800ef6e:	2302      	movs	r3, #2
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	f1a0 0314 	sub.w	r3, r0, #20
 800ef76:	440b      	add	r3, r1
 800ef78:	2501      	movs	r5, #1
 800ef7a:	6363      	str	r3, [r4, #52]	; 0x34
 800ef7c:	60e0      	str	r0, [r4, #12]
 800ef7e:	605d      	str	r5, [r3, #4]
 800ef80:	6265      	str	r5, [r4, #36]	; 0x24
 800ef82:	6065      	str	r5, [r4, #4]
 800ef84:	f7ff fe0e 	bl	800eba4 <_AddFreeMemory>
 800ef88:	f7ff ff04 	bl	800ed94 <_EnlargeBlocks>
 800ef8c:	6325      	str	r5, [r4, #48]	; 0x30
 800ef8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef90:	20022fdc 	.word	0x20022fdc
 800ef94:	20022bb0 	.word	0x20022bb0
 800ef98:	20022bbc 	.word	0x20022bbc
 800ef9c:	0800eb2d 	.word	0x0800eb2d

0800efa0 <GUI_ALLOC_GetFixedBlock>:
 800efa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa4:	4605      	mov	r5, r0
 800efa6:	4e26      	ldr	r6, [pc, #152]	; (800f040 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800efa8:	3503      	adds	r5, #3
 800efaa:	f7ff ff3f 	bl	800ee2c <_InitOnce>
 800efae:	f025 0503 	bic.w	r5, r5, #3
 800efb2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800efb4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800efb6:	3504      	adds	r5, #4
 800efb8:	429d      	cmp	r5, r3
 800efba:	bf38      	it	cc
 800efbc:	461d      	movcc	r5, r3
 800efbe:	4614      	mov	r4, r2
 800efc0:	b12c      	cbz	r4, 800efce <GUI_ALLOC_GetFixedBlock+0x2e>
 800efc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800efc6:	42ab      	cmp	r3, r5
 800efc8:	d02c      	beq.n	800f024 <GUI_ALLOC_GetFixedBlock+0x84>
 800efca:	6824      	ldr	r4, [r4, #0]
 800efcc:	e7f8      	b.n	800efc0 <GUI_ALLOC_GetFixedBlock+0x20>
 800efce:	68f3      	ldr	r3, [r6, #12]
 800efd0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800efd2:	eb02 0803 	add.w	r8, r2, r3
 800efd6:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800efda:	ebc7 0708 	rsb	r7, r7, r8
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	b133      	cbz	r3, 800eff0 <GUI_ALLOC_GetFixedBlock+0x50>
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7ff fe2e 	bl	800ec44 <_RemoveHoles>
 800efe8:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800efec:	ebc7 0708 	rsb	r7, r7, r8
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	bb13      	cbnz	r3, 800f03a <GUI_ALLOC_GetFixedBlock+0x9a>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	42ab      	cmp	r3, r5
 800eff8:	db1f      	blt.n	800f03a <GUI_ALLOC_GetFixedBlock+0x9a>
 800effa:	4638      	mov	r0, r7
 800effc:	1d1c      	adds	r4, r3, #4
 800effe:	f7ff fdb1 	bl	800eb64 <_RemoveFreeBlock>
 800f002:	68f3      	ldr	r3, [r6, #12]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	1b5b      	subs	r3, r3, r5
 800f008:	60f3      	str	r3, [r6, #12]
 800f00a:	6973      	ldr	r3, [r6, #20]
 800f00c:	1b64      	subs	r4, r4, r5
 800f00e:	442b      	add	r3, r5
 800f010:	1b40      	subs	r0, r0, r5
 800f012:	443c      	add	r4, r7
 800f014:	6173      	str	r3, [r6, #20]
 800f016:	d002      	beq.n	800f01e <GUI_ALLOC_GetFixedBlock+0x7e>
 800f018:	4639      	mov	r1, r7
 800f01a:	f7ff fdc3 	bl	800eba4 <_AddFreeMemory>
 800f01e:	f844 5c04 	str.w	r5, [r4, #-4]
 800f022:	e00a      	b.n	800f03a <GUI_ALLOC_GetFixedBlock+0x9a>
 800f024:	6823      	ldr	r3, [r4, #0]
 800f026:	b10b      	cbz	r3, 800f02c <GUI_ALLOC_GetFixedBlock+0x8c>
 800f028:	6861      	ldr	r1, [r4, #4]
 800f02a:	6059      	str	r1, [r3, #4]
 800f02c:	6861      	ldr	r1, [r4, #4]
 800f02e:	b101      	cbz	r1, 800f032 <GUI_ALLOC_GetFixedBlock+0x92>
 800f030:	600b      	str	r3, [r1, #0]
 800f032:	42a2      	cmp	r2, r4
 800f034:	d101      	bne.n	800f03a <GUI_ALLOC_GetFixedBlock+0x9a>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	63f3      	str	r3, [r6, #60]	; 0x3c
 800f03a:	4620      	mov	r0, r4
 800f03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f040:	20022fdc 	.word	0x20022fdc

0800f044 <GUI_ALLOC_GetMaxSize>:
 800f044:	b508      	push	{r3, lr}
 800f046:	f7ff fef1 	bl	800ee2c <_InitOnce>
 800f04a:	2200      	movs	r2, #0
 800f04c:	4b0b      	ldr	r3, [pc, #44]	; (800f07c <GUI_ALLOC_GetMaxSize+0x38>)
 800f04e:	4413      	add	r3, r2
 800f050:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f054:	b113      	cbz	r3, 800f05c <GUI_ALLOC_GetMaxSize+0x18>
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	2000      	movs	r0, #0
 800f05a:	e00b      	b.n	800f074 <GUI_ALLOC_GetMaxSize+0x30>
 800f05c:	3a08      	subs	r2, #8
 800f05e:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800f062:	d1f3      	bne.n	800f04c <GUI_ALLOC_GetMaxSize+0x8>
 800f064:	e7f8      	b.n	800f058 <GUI_ALLOC_GetMaxSize+0x14>
 800f066:	685a      	ldr	r2, [r3, #4]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	4290      	cmp	r0, r2
 800f06c:	bf38      	it	cc
 800f06e:	4610      	movcc	r0, r2
 800f070:	b113      	cbz	r3, 800f078 <GUI_ALLOC_GetMaxSize+0x34>
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d1f6      	bne.n	800f066 <GUI_ALLOC_GetMaxSize+0x22>
 800f078:	380c      	subs	r0, #12
 800f07a:	bd08      	pop	{r3, pc}
 800f07c:	20022fdc 	.word	0x20022fdc

0800f080 <_Alloc>:
 800f080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f084:	4d38      	ldr	r5, [pc, #224]	; (800f168 <_Alloc+0xe8>)
 800f086:	4604      	mov	r4, r0
 800f088:	f7ff fed0 	bl	800ee2c <_InitOnce>
 800f08c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800f08e:	682b      	ldr	r3, [r5, #0]
 800f090:	42bc      	cmp	r4, r7
 800f092:	bf24      	itt	cs
 800f094:	1ce7      	addcs	r7, r4, #3
 800f096:	f027 0703 	biccs.w	r7, r7, #3
 800f09a:	370c      	adds	r7, #12
 800f09c:	429f      	cmp	r7, r3
 800f09e:	4c32      	ldr	r4, [pc, #200]	; (800f168 <_Alloc+0xe8>)
 800f0a0:	d83e      	bhi.n	800f120 <_Alloc+0xa0>
 800f0a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0a4:	6862      	ldr	r2, [r4, #4]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d90f      	bls.n	800f0ca <_Alloc+0x4a>
 800f0aa:	686b      	ldr	r3, [r5, #4]
 800f0ac:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	606b      	str	r3, [r5, #4]
 800f0b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f0b4:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800f0b8:	eb03 0209 	add.w	r2, r3, r9
 800f0bc:	6852      	ldr	r2, [r2, #4]
 800f0be:	626a      	str	r2, [r5, #36]	; 0x24
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800f0c6:	b956      	cbnz	r6, 800f0de <_Alloc+0x5e>
 800f0c8:	e02a      	b.n	800f120 <_Alloc+0xa0>
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	6323      	str	r3, [r4, #48]	; 0x30
 800f0ce:	f7ff fe61 	bl	800ed94 <_EnlargeBlocks>
 800f0d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	6323      	str	r3, [r4, #48]	; 0x30
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d0e6      	beq.n	800f0aa <_Alloc+0x2a>
 800f0dc:	e020      	b.n	800f120 <_Alloc+0xa0>
 800f0de:	230f      	movs	r3, #15
 800f0e0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f0e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f0e6:	4297      	cmp	r7, r2
 800f0e8:	d20c      	bcs.n	800f104 <_Alloc+0x84>
 800f0ea:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800f0ee:	d2f7      	bcs.n	800f0e0 <_Alloc+0x60>
 800f0f0:	e008      	b.n	800f104 <_Alloc+0x84>
 800f0f2:	6894      	ldr	r4, [r2, #8]
 800f0f4:	b12c      	cbz	r4, 800f102 <_Alloc+0x82>
 800f0f6:	6862      	ldr	r2, [r4, #4]
 800f0f8:	4297      	cmp	r7, r2
 800f0fa:	d914      	bls.n	800f126 <_Alloc+0xa6>
 800f0fc:	68a2      	ldr	r2, [r4, #8]
 800f0fe:	2a00      	cmp	r2, #0
 800f100:	d1f7      	bne.n	800f0f2 <_Alloc+0x72>
 800f102:	3301      	adds	r3, #1
 800f104:	2b0f      	cmp	r3, #15
 800f106:	d803      	bhi.n	800f110 <_Alloc+0x90>
 800f108:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f10c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f10e:	e7f6      	b.n	800f0fe <_Alloc+0x7e>
 800f110:	4638      	mov	r0, r7
 800f112:	f7ff fd97 	bl	800ec44 <_RemoveHoles>
 800f116:	2800      	cmp	r0, #0
 800f118:	d0e1      	beq.n	800f0de <_Alloc+0x5e>
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7ff fcf4 	bl	800eb08 <_PushFreeBlock>
 800f120:	2000      	movs	r0, #0
 800f122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f126:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f12a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f12c:	ebc7 0208 	rsb	r2, r7, r8
 800f130:	330c      	adds	r3, #12
 800f132:	4620      	mov	r0, r4
 800f134:	429a      	cmp	r2, r3
 800f136:	bf38      	it	cc
 800f138:	4647      	movcc	r7, r8
 800f13a:	f7ff fd13 	bl	800eb64 <_RemoveFreeBlock>
 800f13e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f140:	444b      	add	r3, r9
 800f142:	19e1      	adds	r1, r4, r7
 800f144:	605c      	str	r4, [r3, #4]
 800f146:	45b8      	cmp	r8, r7
 800f148:	f04f 0300 	mov.w	r3, #0
 800f14c:	e884 00c0 	stmia.w	r4, {r6, r7}
 800f150:	60a3      	str	r3, [r4, #8]
 800f152:	6124      	str	r4, [r4, #16]
 800f154:	f841 7c04 	str.w	r7, [r1, #-4]
 800f158:	dd03      	ble.n	800f162 <_Alloc+0xe2>
 800f15a:	ebc7 0008 	rsb	r0, r7, r8
 800f15e:	f7ff fd21 	bl	800eba4 <_AddFreeMemory>
 800f162:	4630      	mov	r0, r6
 800f164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f168:	20022fdc 	.word	0x20022fdc

0800f16c <GUI_ALLOC_AllocNoInit>:
 800f16c:	b108      	cbz	r0, 800f172 <GUI_ALLOC_AllocNoInit+0x6>
 800f16e:	f7ff bf87 	b.w	800f080 <_Alloc>
 800f172:	4770      	bx	lr

0800f174 <GUI_ALLOC_AllocZero>:
 800f174:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f176:	4605      	mov	r5, r0
 800f178:	f7ff fff8 	bl	800f16c <GUI_ALLOC_AllocNoInit>
 800f17c:	4606      	mov	r6, r0
 800f17e:	b158      	cbz	r0, 800f198 <GUI_ALLOC_AllocZero+0x24>
 800f180:	f7ff fdc2 	bl	800ed08 <GUI_ALLOC_LockH>
 800f184:	ac02      	add	r4, sp, #8
 800f186:	2100      	movs	r1, #0
 800f188:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f18c:	462a      	mov	r2, r5
 800f18e:	f7fc ff57 	bl	800c040 <GUI__memset>
 800f192:	4620      	mov	r0, r4
 800f194:	f7ff fdc6 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800f198:	4630      	mov	r0, r6
 800f19a:	b002      	add	sp, #8
 800f19c:	bd70      	pop	{r4, r5, r6, pc}

0800f19e <LCD_Index2Color_M8888I>:
 800f19e:	43c3      	mvns	r3, r0
 800f1a0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f1a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	b2c2      	uxtb	r2, r0
 800f1ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800f1b4:	4318      	orrs	r0, r3
 800f1b6:	4770      	bx	lr

0800f1b8 <_Color2Index_M888>:
 800f1b8:	b2c2      	uxtb	r2, r0
 800f1ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1c2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800f1c6:	4318      	orrs	r0, r3
 800f1c8:	4770      	bx	lr

0800f1ca <_GetIndexMask_M888>:
 800f1ca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f1ce:	4770      	bx	lr

0800f1d0 <_Color2IndexBulk>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	4f0c      	ldr	r7, [pc, #48]	; (800f204 <_Color2IndexBulk+0x34>)
 800f1d4:	683f      	ldr	r7, [r7, #0]
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	460d      	mov	r5, r1
 800f1da:	4614      	mov	r4, r2
 800f1dc:	469c      	mov	ip, r3
 800f1de:	b10f      	cbz	r7, 800f1e4 <_Color2IndexBulk+0x14>
 800f1e0:	47b8      	blx	r7
 800f1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e4:	f856 2b04 	ldr.w	r2, [r6], #4
 800f1e8:	b2d1      	uxtb	r1, r2
 800f1ea:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800f1ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f1f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800f1f6:	431a      	orrs	r2, r3
 800f1f8:	3c01      	subs	r4, #1
 800f1fa:	602a      	str	r2, [r5, #0]
 800f1fc:	4465      	add	r5, ip
 800f1fe:	d1f1      	bne.n	800f1e4 <_Color2IndexBulk+0x14>
 800f200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f202:	bf00      	nop
 800f204:	20022bc8 	.word	0x20022bc8

0800f208 <_Index2ColorBulk>:
 800f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20a:	4f0c      	ldr	r7, [pc, #48]	; (800f23c <_Index2ColorBulk+0x34>)
 800f20c:	683f      	ldr	r7, [r7, #0]
 800f20e:	4605      	mov	r5, r0
 800f210:	460e      	mov	r6, r1
 800f212:	4614      	mov	r4, r2
 800f214:	469c      	mov	ip, r3
 800f216:	b10f      	cbz	r7, 800f21c <_Index2ColorBulk+0x14>
 800f218:	47b8      	blx	r7
 800f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f21c:	682a      	ldr	r2, [r5, #0]
 800f21e:	b2d1      	uxtb	r1, r2
 800f220:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800f224:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f228:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800f22c:	431a      	orrs	r2, r3
 800f22e:	3c01      	subs	r4, #1
 800f230:	f846 2b04 	str.w	r2, [r6], #4
 800f234:	4465      	add	r5, ip
 800f236:	d1f1      	bne.n	800f21c <_Index2ColorBulk+0x14>
 800f238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23a:	bf00      	nop
 800f23c:	20022bc4 	.word	0x20022bc4

0800f240 <GUICC_M888_SetCustColorConv>:
 800f240:	4b02      	ldr	r3, [pc, #8]	; (800f24c <GUICC_M888_SetCustColorConv+0xc>)
 800f242:	6018      	str	r0, [r3, #0]
 800f244:	4b02      	ldr	r3, [pc, #8]	; (800f250 <GUICC_M888_SetCustColorConv+0x10>)
 800f246:	6019      	str	r1, [r3, #0]
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop
 800f24c:	20022bc8 	.word	0x20022bc8
 800f250:	20022bc4 	.word	0x20022bc4

0800f254 <LCD_Index2Color_M565>:
 800f254:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 800f258:	4b06      	ldr	r3, [pc, #24]	; (800f274 <LCD_Index2Color_M565+0x20>)
 800f25a:	f000 021f 	and.w	r2, r0, #31
 800f25e:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800f262:	5c9a      	ldrb	r2, [r3, r2]
 800f264:	5c5b      	ldrb	r3, [r3, r1]
 800f266:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800f26a:	4a03      	ldr	r2, [pc, #12]	; (800f278 <LCD_Index2Color_M565+0x24>)
 800f26c:	5c10      	ldrb	r0, [r2, r0]
 800f26e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800f272:	4770      	bx	lr
 800f274:	08013018 	.word	0x08013018
 800f278:	08012fd8 	.word	0x08012fd8

0800f27c <_Color2Index_M565>:
 800f27c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f280:	4b06      	ldr	r3, [pc, #24]	; (800f29c <_Color2Index_M565+0x20>)
 800f282:	b2c2      	uxtb	r2, r0
 800f284:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f288:	5c9a      	ldrb	r2, [r3, r2]
 800f28a:	5c5b      	ldrb	r3, [r3, r1]
 800f28c:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800f290:	4a03      	ldr	r2, [pc, #12]	; (800f2a0 <_Color2Index_M565+0x24>)
 800f292:	5c10      	ldrb	r0, [r2, r0]
 800f294:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	08013138 	.word	0x08013138
 800f2a0:	08013038 	.word	0x08013038

0800f2a4 <_GetIndexMask_M565>:
 800f2a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f2a8:	4770      	bx	lr
	...

0800f2ac <_Color2IndexBulk>:
 800f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ae:	4f0f      	ldr	r7, [pc, #60]	; (800f2ec <_Color2IndexBulk+0x40>)
 800f2b0:	683f      	ldr	r7, [r7, #0]
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	460d      	mov	r5, r1
 800f2b6:	4614      	mov	r4, r2
 800f2b8:	469c      	mov	ip, r3
 800f2ba:	b10f      	cbz	r7, 800f2c0 <_Color2IndexBulk+0x14>
 800f2bc:	47b8      	blx	r7
 800f2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2c0:	f856 2b04 	ldr.w	r2, [r6], #4
 800f2c4:	490a      	ldr	r1, [pc, #40]	; (800f2f0 <_Color2IndexBulk+0x44>)
 800f2c6:	b2d3      	uxtb	r3, r2
 800f2c8:	3c01      	subs	r4, #1
 800f2ca:	5cc8      	ldrb	r0, [r1, r3]
 800f2cc:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800f2d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f2d4:	5ccb      	ldrb	r3, [r1, r3]
 800f2d6:	4907      	ldr	r1, [pc, #28]	; (800f2f4 <_Color2IndexBulk+0x48>)
 800f2d8:	5c8a      	ldrb	r2, [r1, r2]
 800f2da:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800f2de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f2e2:	802b      	strh	r3, [r5, #0]
 800f2e4:	4465      	add	r5, ip
 800f2e6:	d1eb      	bne.n	800f2c0 <_Color2IndexBulk+0x14>
 800f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20022bd0 	.word	0x20022bd0
 800f2f0:	08013138 	.word	0x08013138
 800f2f4:	08013038 	.word	0x08013038

0800f2f8 <_Index2ColorBulk>:
 800f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fa:	4e13      	ldr	r6, [pc, #76]	; (800f348 <_Index2ColorBulk+0x50>)
 800f2fc:	6836      	ldr	r6, [r6, #0]
 800f2fe:	4684      	mov	ip, r0
 800f300:	4614      	mov	r4, r2
 800f302:	461d      	mov	r5, r3
 800f304:	b10e      	cbz	r6, 800f30a <_Index2ColorBulk+0x12>
 800f306:	47b0      	blx	r6
 800f308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f30a:	1e50      	subs	r0, r2, #1
 800f30c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f310:	3a01      	subs	r2, #1
 800f312:	fb03 c000 	mla	r0, r3, r0, ip
 800f316:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f31a:	8802      	ldrh	r2, [r0, #0]
 800f31c:	4b0b      	ldr	r3, [pc, #44]	; (800f34c <_Index2ColorBulk+0x54>)
 800f31e:	f002 061f 	and.w	r6, r2, #31
 800f322:	0ad7      	lsrs	r7, r2, #11
 800f324:	5d9e      	ldrb	r6, [r3, r6]
 800f326:	5ddb      	ldrb	r3, [r3, r7]
 800f328:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800f32c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800f330:	4e07      	ldr	r6, [pc, #28]	; (800f350 <_Index2ColorBulk+0x58>)
 800f332:	5cb2      	ldrb	r2, [r6, r2]
 800f334:	3c01      	subs	r4, #1
 800f336:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f33a:	f841 3904 	str.w	r3, [r1], #-4
 800f33e:	ebc5 0000 	rsb	r0, r5, r0
 800f342:	d1ea      	bne.n	800f31a <_Index2ColorBulk+0x22>
 800f344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f346:	bf00      	nop
 800f348:	20022bcc 	.word	0x20022bcc
 800f34c:	08013018 	.word	0x08013018
 800f350:	08012fd8 	.word	0x08012fd8

0800f354 <GUICC_M565_SetCustColorConv>:
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <GUICC_M565_SetCustColorConv+0xc>)
 800f356:	6018      	str	r0, [r3, #0]
 800f358:	4b02      	ldr	r3, [pc, #8]	; (800f364 <GUICC_M565_SetCustColorConv+0x10>)
 800f35a:	6019      	str	r1, [r3, #0]
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	20022bd0 	.word	0x20022bd0
 800f364:	20022bcc 	.word	0x20022bcc

0800f368 <LCD_Index2Color_888>:
 800f368:	4770      	bx	lr

0800f36a <LCD_Index2Color_8888>:
 800f36a:	4770      	bx	lr

0800f36c <_GetIndexMask_0>:
 800f36c:	b508      	push	{r3, lr}
 800f36e:	f7fc fa91 	bl	800b894 <LCD_GetNumColors>
 800f372:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f376:	d010      	beq.n	800f39a <_GetIndexMask_0+0x2e>
 800f378:	287f      	cmp	r0, #127	; 0x7f
 800f37a:	d810      	bhi.n	800f39e <_GetIndexMask_0+0x32>
 800f37c:	283f      	cmp	r0, #63	; 0x3f
 800f37e:	d810      	bhi.n	800f3a2 <_GetIndexMask_0+0x36>
 800f380:	281f      	cmp	r0, #31
 800f382:	d810      	bhi.n	800f3a6 <_GetIndexMask_0+0x3a>
 800f384:	280f      	cmp	r0, #15
 800f386:	d810      	bhi.n	800f3aa <_GetIndexMask_0+0x3e>
 800f388:	2807      	cmp	r0, #7
 800f38a:	d810      	bhi.n	800f3ae <_GetIndexMask_0+0x42>
 800f38c:	2803      	cmp	r0, #3
 800f38e:	d810      	bhi.n	800f3b2 <_GetIndexMask_0+0x46>
 800f390:	2801      	cmp	r0, #1
 800f392:	bf94      	ite	ls
 800f394:	2000      	movls	r0, #0
 800f396:	2001      	movhi	r0, #1
 800f398:	e00c      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f39a:	2008      	movs	r0, #8
 800f39c:	e00a      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f39e:	2007      	movs	r0, #7
 800f3a0:	e008      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f3a2:	2006      	movs	r0, #6
 800f3a4:	e006      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f3a6:	2005      	movs	r0, #5
 800f3a8:	e004      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f3aa:	2004      	movs	r0, #4
 800f3ac:	e002      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f3ae:	2003      	movs	r0, #3
 800f3b0:	e000      	b.n	800f3b4 <_GetIndexMask_0+0x48>
 800f3b2:	2002      	movs	r0, #2
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	fa03 f000 	lsl.w	r0, r3, r0
 800f3ba:	3801      	subs	r0, #1
 800f3bc:	bd08      	pop	{r3, pc}

0800f3be <_Index2Color_0>:
 800f3be:	b538      	push	{r3, r4, r5, lr}
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	f7fc fa67 	bl	800b894 <LCD_GetNumColors>
 800f3c6:	4605      	mov	r5, r0
 800f3c8:	f7fc fa8e 	bl	800b8e8 <LCD_GetPalette>
 800f3cc:	42ac      	cmp	r4, r5
 800f3ce:	d203      	bcs.n	800f3d8 <_Index2Color_0+0x1a>
 800f3d0:	b118      	cbz	r0, 800f3da <_Index2Color_0+0x1c>
 800f3d2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	2000      	movs	r0, #0
 800f3da:	bd38      	pop	{r3, r4, r5, pc}

0800f3dc <_Color2Index_0>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4681      	mov	r9, r0
 800f3e2:	f7fc fa57 	bl	800b894 <LCD_GetNumColors>
 800f3e6:	4680      	mov	r8, r0
 800f3e8:	f7fc fa7e 	bl	800b8e8 <LCD_GetPalette>
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	b1d8      	cbz	r0, 800f428 <_Color2Index_0+0x4c>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800f3f6:	4591      	cmp	r9, r2
 800f3f8:	d01a      	beq.n	800f430 <_Color2Index_0+0x54>
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	4543      	cmp	r3, r8
 800f3fe:	dbf8      	blt.n	800f3f2 <_Color2Index_0+0x16>
 800f400:	2500      	movs	r5, #0
 800f402:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800f406:	462c      	mov	r4, r5
 800f408:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800f40c:	4648      	mov	r0, r9
 800f40e:	f001 fd6b 	bl	8010ee8 <GUI_CalcColorDist>
 800f412:	42b8      	cmp	r0, r7
 800f414:	bf38      	it	cc
 800f416:	4625      	movcc	r5, r4
 800f418:	f104 0401 	add.w	r4, r4, #1
 800f41c:	bf28      	it	cs
 800f41e:	4638      	movcs	r0, r7
 800f420:	4544      	cmp	r4, r8
 800f422:	da02      	bge.n	800f42a <_Color2Index_0+0x4e>
 800f424:	4607      	mov	r7, r0
 800f426:	e7ef      	b.n	800f408 <_Color2Index_0+0x2c>
 800f428:	4605      	mov	r5, r0
 800f42a:	4628      	mov	r0, r5
 800f42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f430:	4618      	mov	r0, r3
 800f432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f436 <_Color2Index_M8888I>:
 800f436:	43c3      	mvns	r3, r0
 800f438:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f43c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f440:	4313      	orrs	r3, r2
 800f442:	b2c2      	uxtb	r2, r0
 800f444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f448:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800f44c:	4318      	orrs	r0, r3
 800f44e:	4770      	bx	lr

0800f450 <_GetIndexMask_M8888I>:
 800f450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f454:	4770      	bx	lr
	...

0800f458 <_Color2IndexBulk_M8888I>:
 800f458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45a:	4c0e      	ldr	r4, [pc, #56]	; (800f494 <_Color2IndexBulk_M8888I+0x3c>)
 800f45c:	6824      	ldr	r4, [r4, #0]
 800f45e:	4607      	mov	r7, r0
 800f460:	460e      	mov	r6, r1
 800f462:	4615      	mov	r5, r2
 800f464:	469c      	mov	ip, r3
 800f466:	b10c      	cbz	r4, 800f46c <_Color2IndexBulk_M8888I+0x14>
 800f468:	47a0      	blx	r4
 800f46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f46c:	f857 4b04 	ldr.w	r4, [r7], #4
 800f470:	43e3      	mvns	r3, r4
 800f472:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800f476:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f47a:	4313      	orrs	r3, r2
 800f47c:	b2e2      	uxtb	r2, r4
 800f47e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f482:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800f486:	431c      	orrs	r4, r3
 800f488:	3d01      	subs	r5, #1
 800f48a:	6034      	str	r4, [r6, #0]
 800f48c:	4466      	add	r6, ip
 800f48e:	d1ed      	bne.n	800f46c <_Color2IndexBulk_M8888I+0x14>
 800f490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f492:	bf00      	nop
 800f494:	20022bd8 	.word	0x20022bd8

0800f498 <_Index2ColorBulk_M8888I>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	4c0e      	ldr	r4, [pc, #56]	; (800f4d4 <_Index2ColorBulk_M8888I+0x3c>)
 800f49c:	6824      	ldr	r4, [r4, #0]
 800f49e:	4606      	mov	r6, r0
 800f4a0:	460f      	mov	r7, r1
 800f4a2:	4615      	mov	r5, r2
 800f4a4:	469c      	mov	ip, r3
 800f4a6:	b10c      	cbz	r4, 800f4ac <_Index2ColorBulk_M8888I+0x14>
 800f4a8:	47a0      	blx	r4
 800f4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ac:	6834      	ldr	r4, [r6, #0]
 800f4ae:	43e3      	mvns	r3, r4
 800f4b0:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800f4b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	b2e2      	uxtb	r2, r4
 800f4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4c0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800f4c4:	431c      	orrs	r4, r3
 800f4c6:	3d01      	subs	r5, #1
 800f4c8:	f847 4b04 	str.w	r4, [r7], #4
 800f4cc:	4466      	add	r6, ip
 800f4ce:	d1ed      	bne.n	800f4ac <_Index2ColorBulk_M8888I+0x14>
 800f4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20022bd4 	.word	0x20022bd4

0800f4d8 <GUICC_M8888I_SetCustColorConv>:
 800f4d8:	4b02      	ldr	r3, [pc, #8]	; (800f4e4 <GUICC_M8888I_SetCustColorConv+0xc>)
 800f4da:	6018      	str	r0, [r3, #0]
 800f4dc:	4b02      	ldr	r3, [pc, #8]	; (800f4e8 <GUICC_M8888I_SetCustColorConv+0x10>)
 800f4de:	6019      	str	r1, [r3, #0]
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	20022bd8 	.word	0x20022bd8
 800f4e8:	20022bd4 	.word	0x20022bd4

0800f4ec <_Color2Index_M4444I>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	f240 1307 	movw	r3, #263	; 0x107
 800f4f2:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800f4f6:	b2c2      	uxtb	r2, r0
 800f4f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f4fc:	3408      	adds	r4, #8
 800f4fe:	eba3 6010 	sub.w	r0, r3, r0, lsr #24
 800f502:	2311      	movs	r3, #17
 800f504:	fbb4 f4f3 	udiv	r4, r4, r3
 800f508:	fbb0 f0f3 	udiv	r0, r0, r3
 800f50c:	3208      	adds	r2, #8
 800f50e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f512:	3108      	adds	r1, #8
 800f514:	eb04 3000 	add.w	r0, r4, r0, lsl #12
 800f518:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800f51c:	fbb1 f3f3 	udiv	r3, r1, r3
 800f520:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800f524:	bd10      	pop	{r4, pc}
	...

0800f528 <_Index2Color_M4444I>:
 800f528:	4b0a      	ldr	r3, [pc, #40]	; (800f554 <_Index2Color_M4444I+0x2c>)
 800f52a:	f000 020f 	and.w	r2, r0, #15
 800f52e:	5c99      	ldrb	r1, [r3, r2]
 800f530:	f3c0 2203 	ubfx	r2, r0, #8, #4
 800f534:	5c9a      	ldrb	r2, [r3, r2]
 800f536:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800f53a:	f3c0 1103 	ubfx	r1, r0, #4, #4
 800f53e:	f3c0 3003 	ubfx	r0, r0, #12, #4
 800f542:	5c59      	ldrb	r1, [r3, r1]
 800f544:	5c18      	ldrb	r0, [r3, r0]
 800f546:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800f54a:	43c0      	mvns	r0, r0
 800f54c:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	08013338 	.word	0x08013338

0800f558 <_GetIndexMask_M4444I>:
 800f558:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f55c:	4770      	bx	lr
	...

0800f560 <_Color2IndexBulk_M4444I>:
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	4c16      	ldr	r4, [pc, #88]	; (800f5c0 <_Color2IndexBulk_M4444I+0x60>)
 800f566:	6824      	ldr	r4, [r4, #0]
 800f568:	4684      	mov	ip, r0
 800f56a:	460f      	mov	r7, r1
 800f56c:	4616      	mov	r6, r2
 800f56e:	4698      	mov	r8, r3
 800f570:	b114      	cbz	r4, 800f578 <_Color2IndexBulk_M4444I+0x18>
 800f572:	47a0      	blx	r4
 800f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f578:	f85c 5b04 	ldr.w	r5, [ip], #4
 800f57c:	b2e9      	uxtb	r1, r5
 800f57e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800f582:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800f586:	0e2d      	lsrs	r5, r5, #24
 800f588:	f5c5 7583 	rsb	r5, r5, #262	; 0x106
 800f58c:	2411      	movs	r4, #17
 800f58e:	3501      	adds	r5, #1
 800f590:	fbb5 f5f4 	udiv	r5, r5, r4
 800f594:	3108      	adds	r1, #8
 800f596:	fbb1 f1f4 	udiv	r1, r1, r4
 800f59a:	3208      	adds	r2, #8
 800f59c:	032d      	lsls	r5, r5, #12
 800f59e:	fbb2 f2f4 	udiv	r2, r2, r4
 800f5a2:	3308      	adds	r3, #8
 800f5a4:	eb05 2501 	add.w	r5, r5, r1, lsl #8
 800f5a8:	4415      	add	r5, r2
 800f5aa:	fbb3 f4f4 	udiv	r4, r3, r4
 800f5ae:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800f5b2:	3e01      	subs	r6, #1
 800f5b4:	803c      	strh	r4, [r7, #0]
 800f5b6:	4447      	add	r7, r8
 800f5b8:	d1de      	bne.n	800f578 <_Color2IndexBulk_M4444I+0x18>
 800f5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5be:	bf00      	nop
 800f5c0:	20022be0 	.word	0x20022be0

0800f5c4 <_Index2ColorBulk_M4444I>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	4d16      	ldr	r5, [pc, #88]	; (800f620 <_Index2ColorBulk_M4444I+0x5c>)
 800f5c8:	682d      	ldr	r5, [r5, #0]
 800f5ca:	4684      	mov	ip, r0
 800f5cc:	4614      	mov	r4, r2
 800f5ce:	461e      	mov	r6, r3
 800f5d0:	b10d      	cbz	r5, 800f5d6 <_Index2ColorBulk_M4444I+0x12>
 800f5d2:	47a8      	blx	r5
 800f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d6:	1e50      	subs	r0, r2, #1
 800f5d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f5dc:	3a01      	subs	r2, #1
 800f5de:	fb03 c000 	mla	r0, r3, r0, ip
 800f5e2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f5e6:	8805      	ldrh	r5, [r0, #0]
 800f5e8:	4a0e      	ldr	r2, [pc, #56]	; (800f624 <_Index2ColorBulk_M4444I+0x60>)
 800f5ea:	f005 030f 	and.w	r3, r5, #15
 800f5ee:	3c01      	subs	r4, #1
 800f5f0:	5cd7      	ldrb	r7, [r2, r3]
 800f5f2:	f3c5 2303 	ubfx	r3, r5, #8, #4
 800f5f6:	ebc6 0000 	rsb	r0, r6, r0
 800f5fa:	5cd3      	ldrb	r3, [r2, r3]
 800f5fc:	eb03 4707 	add.w	r7, r3, r7, lsl #16
 800f600:	ea4f 3315 	mov.w	r3, r5, lsr #12
 800f604:	f3c5 1503 	ubfx	r5, r5, #4, #4
 800f608:	5cd3      	ldrb	r3, [r2, r3]
 800f60a:	5d52      	ldrb	r2, [r2, r5]
 800f60c:	ea6f 0303 	mvn.w	r3, r3
 800f610:	eb07 6303 	add.w	r3, r7, r3, lsl #24
 800f614:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f618:	f841 3904 	str.w	r3, [r1], #-4
 800f61c:	d1e3      	bne.n	800f5e6 <_Index2ColorBulk_M4444I+0x22>
 800f61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f620:	20022bdc 	.word	0x20022bdc
 800f624:	08013338 	.word	0x08013338

0800f628 <GUICC_M4444I_SetCustColorConv>:
 800f628:	4b02      	ldr	r3, [pc, #8]	; (800f634 <GUICC_M4444I_SetCustColorConv+0xc>)
 800f62a:	6018      	str	r0, [r3, #0]
 800f62c:	4b02      	ldr	r3, [pc, #8]	; (800f638 <GUICC_M4444I_SetCustColorConv+0x10>)
 800f62e:	6019      	str	r1, [r3, #0]
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	20022be0 	.word	0x20022be0
 800f638:	20022bdc 	.word	0x20022bdc

0800f63c <_Color2Index_M1555I>:
 800f63c:	4b08      	ldr	r3, [pc, #32]	; (800f660 <_Color2Index_M1555I+0x24>)
 800f63e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f642:	b2c1      	uxtb	r1, r0
 800f644:	5c9a      	ldrb	r2, [r3, r2]
 800f646:	5c59      	ldrb	r1, [r3, r1]
 800f648:	eb02 2281 	add.w	r2, r2, r1, lsl #10
 800f64c:	43c1      	mvns	r1, r0
 800f64e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f652:	0fc9      	lsrs	r1, r1, #31
 800f654:	5c18      	ldrb	r0, [r3, r0]
 800f656:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 800f65a:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 800f65e:	4770      	bx	lr
 800f660:	08013138 	.word	0x08013138

0800f664 <_Index2Color_M1555I>:
 800f664:	4b0b      	ldr	r3, [pc, #44]	; (800f694 <_Index2Color_M1555I+0x30>)
 800f666:	f000 021f 	and.w	r2, r0, #31
 800f66a:	b510      	push	{r4, lr}
 800f66c:	5c99      	ldrb	r1, [r3, r2]
 800f66e:	f3c0 2484 	ubfx	r4, r0, #10, #5
 800f672:	f3c0 1244 	ubfx	r2, r0, #5, #5
 800f676:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f67a:	5c9a      	ldrb	r2, [r3, r2]
 800f67c:	5d1b      	ldrb	r3, [r3, r4]
 800f67e:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 800f682:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800f686:	bf0c      	ite	eq
 800f688:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 800f68c:	2300      	movne	r3, #0
 800f68e:	4418      	add	r0, r3
 800f690:	bd10      	pop	{r4, pc}
 800f692:	bf00      	nop
 800f694:	08013018 	.word	0x08013018

0800f698 <_GetIndexMask_M1555I>:
 800f698:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f69c:	4770      	bx	lr
	...

0800f6a0 <_Color2IndexBulk_M1555I>:
 800f6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a2:	4c11      	ldr	r4, [pc, #68]	; (800f6e8 <_Color2IndexBulk_M1555I+0x48>)
 800f6a4:	6824      	ldr	r4, [r4, #0]
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	460e      	mov	r6, r1
 800f6aa:	4615      	mov	r5, r2
 800f6ac:	469c      	mov	ip, r3
 800f6ae:	b10c      	cbz	r4, 800f6b4 <_Color2IndexBulk_M1555I+0x14>
 800f6b0:	47a0      	blx	r4
 800f6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b4:	f857 4b04 	ldr.w	r4, [r7], #4
 800f6b8:	4a0c      	ldr	r2, [pc, #48]	; (800f6ec <_Color2IndexBulk_M1555I+0x4c>)
 800f6ba:	b2e3      	uxtb	r3, r4
 800f6bc:	3d01      	subs	r5, #1
 800f6be:	5cd1      	ldrb	r1, [r2, r3]
 800f6c0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f6c4:	5cd3      	ldrb	r3, [r2, r3]
 800f6c6:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 800f6ca:	ea6f 0104 	mvn.w	r1, r4
 800f6ce:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800f6d2:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 800f6d6:	5d12      	ldrb	r2, [r2, r4]
 800f6d8:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800f6dc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f6e0:	8033      	strh	r3, [r6, #0]
 800f6e2:	4466      	add	r6, ip
 800f6e4:	d1e6      	bne.n	800f6b4 <_Color2IndexBulk_M1555I+0x14>
 800f6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6e8:	20022be8 	.word	0x20022be8
 800f6ec:	08013138 	.word	0x08013138

0800f6f0 <_Index2ColorBulk_M1555I>:
 800f6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f2:	4d17      	ldr	r5, [pc, #92]	; (800f750 <_Index2ColorBulk_M1555I+0x60>)
 800f6f4:	682d      	ldr	r5, [r5, #0]
 800f6f6:	4684      	mov	ip, r0
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	461e      	mov	r6, r3
 800f6fc:	b10d      	cbz	r5, 800f702 <_Index2ColorBulk_M1555I+0x12>
 800f6fe:	47a8      	blx	r5
 800f700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f702:	1e50      	subs	r0, r2, #1
 800f704:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f708:	3a01      	subs	r2, #1
 800f70a:	fb03 c000 	mla	r0, r3, r0, ip
 800f70e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f712:	8802      	ldrh	r2, [r0, #0]
 800f714:	4d0f      	ldr	r5, [pc, #60]	; (800f754 <_Index2ColorBulk_M1555I+0x64>)
 800f716:	f002 031f 	and.w	r3, r2, #31
 800f71a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800f71e:	f815 c003 	ldrb.w	ip, [r5, r3]
 800f722:	f3c2 1344 	ubfx	r3, r2, #5, #5
 800f726:	ebc6 0000 	rsb	r0, r6, r0
 800f72a:	5cef      	ldrb	r7, [r5, r3]
 800f72c:	f3c2 2384 	ubfx	r3, r2, #10, #5
 800f730:	bf0c      	ite	eq
 800f732:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 800f736:	2200      	movne	r2, #0
 800f738:	5ceb      	ldrb	r3, [r5, r3]
 800f73a:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800f73e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800f742:	4413      	add	r3, r2
 800f744:	3c01      	subs	r4, #1
 800f746:	f841 3904 	str.w	r3, [r1], #-4
 800f74a:	d1e2      	bne.n	800f712 <_Index2ColorBulk_M1555I+0x22>
 800f74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f74e:	bf00      	nop
 800f750:	20022be4 	.word	0x20022be4
 800f754:	08013018 	.word	0x08013018

0800f758 <GUICC_M1555I_SetCustColorConv>:
 800f758:	4b02      	ldr	r3, [pc, #8]	; (800f764 <GUICC_M1555I_SetCustColorConv+0xc>)
 800f75a:	6018      	str	r0, [r3, #0]
 800f75c:	4b02      	ldr	r3, [pc, #8]	; (800f768 <GUICC_M1555I_SetCustColorConv+0x10>)
 800f75e:	6019      	str	r1, [r3, #0]
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	20022be8 	.word	0x20022be8
 800f768:	20022be4 	.word	0x20022be4

0800f76c <_Color2Index_88666I>:
 800f76c:	4b06      	ldr	r3, [pc, #24]	; (800f788 <_Color2Index_88666I+0x1c>)
 800f76e:	b510      	push	{r4, lr}
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4604      	mov	r4, r0
 800f774:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800f778:	4798      	blx	r3
 800f77a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800f77e:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 800f782:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800f786:	bd10      	pop	{r4, pc}
 800f788:	08012f90 	.word	0x08012f90

0800f78c <_Index2Color_88666I>:
 800f78c:	4b06      	ldr	r3, [pc, #24]	; (800f7a8 <_Index2Color_88666I+0x1c>)
 800f78e:	b510      	push	{r4, lr}
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	4604      	mov	r4, r0
 800f794:	b2c0      	uxtb	r0, r0
 800f796:	4798      	blx	r3
 800f798:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800f79c:	0424      	lsls	r4, r4, #16
 800f79e:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 800f7a2:	4320      	orrs	r0, r4
 800f7a4:	bd10      	pop	{r4, pc}
 800f7a6:	bf00      	nop
 800f7a8:	08012f90 	.word	0x08012f90

0800f7ac <_GetIndexMask_88666I>:
 800f7ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f7b0:	4770      	bx	lr
	...

0800f7b4 <_Color2IndexBulk_88666I>:
 800f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	4615      	mov	r5, r2
 800f7be:	4698      	mov	r8, r3
 800f7c0:	f856 7b04 	ldr.w	r7, [r6], #4
 800f7c4:	4b08      	ldr	r3, [pc, #32]	; (800f7e8 <_Color2IndexBulk_88666I+0x34>)
 800f7c6:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	4790      	blx	r2
 800f7ce:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
 800f7d2:	f087 477f 	eor.w	r7, r7, #4278190080	; 0xff000000
 800f7d6:	ea40 4017 	orr.w	r0, r0, r7, lsr #16
 800f7da:	3d01      	subs	r5, #1
 800f7dc:	8020      	strh	r0, [r4, #0]
 800f7de:	4444      	add	r4, r8
 800f7e0:	d1ee      	bne.n	800f7c0 <_Color2IndexBulk_88666I+0xc>
 800f7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e6:	bf00      	nop
 800f7e8:	08012f90 	.word	0x08012f90

0800f7ec <_Index2ColorBulk_88666I>:
 800f7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f0:	1e55      	subs	r5, r2, #1
 800f7f2:	4614      	mov	r4, r2
 800f7f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f7f8:	3a01      	subs	r2, #1
 800f7fa:	461e      	mov	r6, r3
 800f7fc:	fb03 0505 	mla	r5, r3, r5, r0
 800f800:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800f804:	f8b5 8000 	ldrh.w	r8, [r5]
 800f808:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <_Index2ColorBulk_88666I+0x48>)
 800f80a:	fa5f f088 	uxtb.w	r0, r8
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	4798      	blx	r3
 800f812:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 800f816:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800f81a:	f088 487f 	eor.w	r8, r8, #4278190080	; 0xff000000
 800f81e:	ea48 0000 	orr.w	r0, r8, r0
 800f822:	3c01      	subs	r4, #1
 800f824:	f847 0904 	str.w	r0, [r7], #-4
 800f828:	ebc6 0505 	rsb	r5, r6, r5
 800f82c:	d1ea      	bne.n	800f804 <_Index2ColorBulk_88666I+0x18>
 800f82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f832:	bf00      	nop
 800f834:	08012f90 	.word	0x08012f90

0800f838 <LCD_Color2Index_8666>:
 800f838:	b510      	push	{r4, lr}
 800f83a:	b2c3      	uxtb	r3, r0
 800f83c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800f840:	42a3      	cmp	r3, r4
 800f842:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f846:	d108      	bne.n	800f85a <LCD_Color2Index_8666+0x22>
 800f848:	428b      	cmp	r3, r1
 800f84a:	d106      	bne.n	800f85a <LCD_Color2Index_8666+0x22>
 800f84c:	f103 0008 	add.w	r0, r3, #8
 800f850:	2211      	movs	r2, #17
 800f852:	fbb0 f0f2 	udiv	r0, r0, r2
 800f856:	3078      	adds	r0, #120	; 0x78
 800f858:	bd10      	pop	{r4, pc}
 800f85a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800f85e:	22ff      	movs	r2, #255	; 0xff
 800f860:	347f      	adds	r4, #127	; 0x7f
 800f862:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f866:	fbb4 f4f2 	udiv	r4, r4, r2
 800f86a:	2006      	movs	r0, #6
 800f86c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f870:	317f      	adds	r1, #127	; 0x7f
 800f872:	fbb1 f1f2 	udiv	r1, r1, r2
 800f876:	4344      	muls	r4, r0
 800f878:	337f      	adds	r3, #127	; 0x7f
 800f87a:	2024      	movs	r0, #36	; 0x24
 800f87c:	fb00 4001 	mla	r0, r0, r1, r4
 800f880:	fbb3 f2f2 	udiv	r2, r3, r2
 800f884:	4410      	add	r0, r2
 800f886:	286b      	cmp	r0, #107	; 0x6b
 800f888:	bf88      	it	hi
 800f88a:	3028      	addhi	r0, #40	; 0x28
 800f88c:	bd10      	pop	{r4, pc}

0800f88e <_GetIndexMask_8666>:
 800f88e:	20ff      	movs	r0, #255	; 0xff
 800f890:	4770      	bx	lr
	...

0800f894 <LCD_Index2Color_8666>:
 800f894:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800f898:	2b0f      	cmp	r3, #15
 800f89a:	b510      	push	{r4, lr}
 800f89c:	d805      	bhi.n	800f8aa <LCD_Index2Color_8666+0x16>
 800f89e:	4b11      	ldr	r3, [pc, #68]	; (800f8e4 <LCD_Index2Color_8666+0x50>)
 800f8a0:	4358      	muls	r0, r3
 800f8a2:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800f8a6:	3008      	adds	r0, #8
 800f8a8:	bd10      	pop	{r4, pc}
 800f8aa:	286b      	cmp	r0, #107	; 0x6b
 800f8ac:	d902      	bls.n	800f8b4 <LCD_Index2Color_8666+0x20>
 800f8ae:	2893      	cmp	r0, #147	; 0x93
 800f8b0:	d915      	bls.n	800f8de <LCD_Index2Color_8666+0x4a>
 800f8b2:	3828      	subs	r0, #40	; 0x28
 800f8b4:	2306      	movs	r3, #6
 800f8b6:	fbb0 f1f3 	udiv	r1, r0, r3
 800f8ba:	2424      	movs	r4, #36	; 0x24
 800f8bc:	2233      	movs	r2, #51	; 0x33
 800f8be:	fbb0 f4f4 	udiv	r4, r0, r4
 800f8c2:	fb03 0011 	mls	r0, r3, r1, r0
 800f8c6:	4350      	muls	r0, r2
 800f8c8:	4354      	muls	r4, r2
 800f8ca:	eb00 4404 	add.w	r4, r0, r4, lsl #16
 800f8ce:	fbb1 f0f3 	udiv	r0, r1, r3
 800f8d2:	fb03 1010 	mls	r0, r3, r0, r1
 800f8d6:	4350      	muls	r0, r2
 800f8d8:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 800f8dc:	bd10      	pop	{r4, pc}
 800f8de:	2000      	movs	r0, #0
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	bf00      	nop
 800f8e4:	00111111 	.word	0x00111111

0800f8e8 <_Color2Index_1616I>:
 800f8e8:	4b07      	ldr	r3, [pc, #28]	; (800f908 <_Color2Index_1616I+0x20>)
 800f8ea:	b510      	push	{r4, lr}
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800f8f4:	4798      	blx	r3
 800f8f6:	0e24      	lsrs	r4, r4, #24
 800f8f8:	4b04      	ldr	r3, [pc, #16]	; (800f90c <_Color2Index_1616I+0x24>)
 800f8fa:	5d1b      	ldrb	r3, [r3, r4]
 800f8fc:	f1c3 030f 	rsb	r3, r3, #15
 800f900:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800f904:	bd10      	pop	{r4, pc}
 800f906:	bf00      	nop
 800f908:	08012fc0 	.word	0x08012fc0
 800f90c:	08013238 	.word	0x08013238

0800f910 <_Index2Color_1616I>:
 800f910:	4b06      	ldr	r3, [pc, #24]	; (800f92c <_Index2Color_1616I+0x1c>)
 800f912:	b510      	push	{r4, lr}
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	4604      	mov	r4, r0
 800f918:	b2c0      	uxtb	r0, r0
 800f91a:	4798      	blx	r3
 800f91c:	0924      	lsrs	r4, r4, #4
 800f91e:	4b04      	ldr	r3, [pc, #16]	; (800f930 <_Index2Color_1616I+0x20>)
 800f920:	5d1b      	ldrb	r3, [r3, r4]
 800f922:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f926:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800f92a:	bd10      	pop	{r4, pc}
 800f92c:	08012fc0 	.word	0x08012fc0
 800f930:	08013338 	.word	0x08013338

0800f934 <_GetIndexMask_1616I>:
 800f934:	20ff      	movs	r0, #255	; 0xff
 800f936:	4770      	bx	lr

0800f938 <_Color2IndexBulk_1616I>:
 800f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93c:	4606      	mov	r6, r0
 800f93e:	460c      	mov	r4, r1
 800f940:	4615      	mov	r5, r2
 800f942:	4698      	mov	r8, r3
 800f944:	f856 7b04 	ldr.w	r7, [r6], #4
 800f948:	4b08      	ldr	r3, [pc, #32]	; (800f96c <_Color2IndexBulk_1616I+0x34>)
 800f94a:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	4790      	blx	r2
 800f952:	0e3f      	lsrs	r7, r7, #24
 800f954:	4b06      	ldr	r3, [pc, #24]	; (800f970 <_Color2IndexBulk_1616I+0x38>)
 800f956:	5ddb      	ldrb	r3, [r3, r7]
 800f958:	f1c3 030f 	rsb	r3, r3, #15
 800f95c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800f960:	3d01      	subs	r5, #1
 800f962:	7020      	strb	r0, [r4, #0]
 800f964:	4444      	add	r4, r8
 800f966:	d1ed      	bne.n	800f944 <_Color2IndexBulk_1616I+0xc>
 800f968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f96c:	08012fc0 	.word	0x08012fc0
 800f970:	08013238 	.word	0x08013238

0800f974 <_Index2ColorBulk_1616I>:
 800f974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f978:	1e55      	subs	r5, r2, #1
 800f97a:	4614      	mov	r4, r2
 800f97c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f980:	3a01      	subs	r2, #1
 800f982:	461e      	mov	r6, r3
 800f984:	fb03 0505 	mla	r5, r3, r5, r0
 800f988:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800f98c:	f895 8000 	ldrb.w	r8, [r5]
 800f990:	4b0a      	ldr	r3, [pc, #40]	; (800f9bc <_Index2ColorBulk_1616I+0x48>)
 800f992:	4640      	mov	r0, r8
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	4798      	blx	r3
 800f998:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800f99c:	4b08      	ldr	r3, [pc, #32]	; (800f9c0 <_Index2ColorBulk_1616I+0x4c>)
 800f99e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f9a2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f9a6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800f9aa:	3c01      	subs	r4, #1
 800f9ac:	f847 0904 	str.w	r0, [r7], #-4
 800f9b0:	ebc6 0505 	rsb	r5, r6, r5
 800f9b4:	d1ea      	bne.n	800f98c <_Index2ColorBulk_1616I+0x18>
 800f9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ba:	bf00      	nop
 800f9bc:	08012fc0 	.word	0x08012fc0
 800f9c0:	08013338 	.word	0x08013338

0800f9c4 <_Color2Index_16>:
 800f9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9c6:	b2c5      	uxtb	r5, r0
 800f9c8:	1c6c      	adds	r4, r5, #1
 800f9ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f9ce:	1c59      	adds	r1, r3, #1
 800f9d0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800f9d4:	2c54      	cmp	r4, #84	; 0x54
 800f9d6:	f100 0201 	add.w	r2, r0, #1
 800f9da:	bf94      	ite	ls
 800f9dc:	2400      	movls	r4, #0
 800f9de:	2401      	movhi	r4, #1
 800f9e0:	2954      	cmp	r1, #84	; 0x54
 800f9e2:	bf94      	ite	ls
 800f9e4:	2100      	movls	r1, #0
 800f9e6:	2101      	movhi	r1, #1
 800f9e8:	2a54      	cmp	r2, #84	; 0x54
 800f9ea:	bf94      	ite	ls
 800f9ec:	2200      	movls	r2, #0
 800f9ee:	2201      	movhi	r2, #1
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	00d0      	lsls	r0, r2, #3
 800f9f4:	461f      	mov	r7, r3
 800f9f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f9fa:	188b      	adds	r3, r1, r2
 800f9fc:	4423      	add	r3, r4
 800f9fe:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800fa02:	b90c      	cbnz	r4, 800fa08 <_Color2Index_16+0x44>
 800fa04:	b901      	cbnz	r1, 800fa08 <_Color2Index_16+0x44>
 800fa06:	b152      	cbz	r2, 800fa1e <_Color2Index_16+0x5a>
 800fa08:	19ba      	adds	r2, r7, r6
 800fa0a:	4415      	add	r5, r2
 800fa0c:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 800fa10:	4415      	add	r5, r2
 800fa12:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 800fa16:	fbb5 f3f3 	udiv	r3, r5, r3
 800fa1a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800fa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa20 <_Index2Color_16>:
 800fa20:	b530      	push	{r4, r5, lr}
 800fa22:	f3c0 0240 	ubfx	r2, r0, #1, #1
 800fa26:	f3c0 0580 	ubfx	r5, r0, #2, #1
 800fa2a:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 800fa2e:	ea02 0300 	and.w	r3, r2, r0
 800fa32:	ea05 0400 	and.w	r4, r5, r0
 800fa36:	4008      	ands	r0, r1
 800fa38:	ebc0 11c1 	rsb	r1, r0, r1, lsl #7
 800fa3c:	ebc4 15c5 	rsb	r5, r4, r5, lsl #7
 800fa40:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
 800fa44:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 800fa48:	ebc3 12c2 	rsb	r2, r3, r2, lsl #7
 800fa4c:	0400      	lsls	r0, r0, #16
 800fa4e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800fa52:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 800fa56:	4318      	orrs	r0, r3
 800fa58:	bd30      	pop	{r4, r5, pc}

0800fa5a <_GetIndexMask_16>:
 800fa5a:	200f      	movs	r0, #15
 800fa5c:	4770      	bx	lr

0800fa5e <WM__GetPrevSibling>:
 800fa5e:	b538      	push	{r3, r4, r5, lr}
 800fa60:	4605      	mov	r5, r0
 800fa62:	f000 f80f 	bl	800fa84 <WM__GetFirstSibling>
 800fa66:	4604      	mov	r4, r0
 800fa68:	b154      	cbz	r4, 800fa80 <WM__GetPrevSibling+0x22>
 800fa6a:	42ac      	cmp	r4, r5
 800fa6c:	d007      	beq.n	800fa7e <WM__GetPrevSibling+0x20>
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f7ff f940 	bl	800ecf4 <GUI_ALLOC_h2p>
 800fa74:	6a03      	ldr	r3, [r0, #32]
 800fa76:	42ab      	cmp	r3, r5
 800fa78:	d002      	beq.n	800fa80 <WM__GetPrevSibling+0x22>
 800fa7a:	461c      	mov	r4, r3
 800fa7c:	e7f4      	b.n	800fa68 <WM__GetPrevSibling+0xa>
 800fa7e:	2400      	movs	r4, #0
 800fa80:	4620      	mov	r0, r4
 800fa82:	bd38      	pop	{r3, r4, r5, pc}

0800fa84 <WM__GetFirstSibling>:
 800fa84:	b508      	push	{r3, lr}
 800fa86:	f7f9 fc27 	bl	80092d8 <WM_GetParent>
 800fa8a:	b118      	cbz	r0, 800fa94 <WM__GetFirstSibling+0x10>
 800fa8c:	f7ff f932 	bl	800ecf4 <GUI_ALLOC_h2p>
 800fa90:	69c0      	ldr	r0, [r0, #28]
 800fa92:	bd08      	pop	{r3, pc}
 800fa94:	bd08      	pop	{r3, pc}
	...

0800fa98 <WM__IsInModalArea>:
 800fa98:	4b12      	ldr	r3, [pc, #72]	; (800fae4 <WM__IsInModalArea+0x4c>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	b570      	push	{r4, r5, r6, lr}
 800faa0:	4604      	mov	r4, r0
 800faa2:	da0f      	bge.n	800fac4 <WM__IsInModalArea+0x2c>
 800faa4:	4e10      	ldr	r6, [pc, #64]	; (800fae8 <WM__IsInModalArea+0x50>)
 800faa6:	4d11      	ldr	r5, [pc, #68]	; (800faec <WM__IsInModalArea+0x54>)
 800faa8:	6833      	ldr	r3, [r6, #0]
 800faaa:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800faae:	4620      	mov	r0, r4
 800fab0:	6859      	ldr	r1, [r3, #4]
 800fab2:	f7f9 fbe2 	bl	800927a <WM__IsAncestor>
 800fab6:	6833      	ldr	r3, [r6, #0]
 800fab8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fabc:	686a      	ldr	r2, [r5, #4]
 800fabe:	686b      	ldr	r3, [r5, #4]
 800fac0:	b942      	cbnz	r2, 800fad4 <WM__IsInModalArea+0x3c>
 800fac2:	e00c      	b.n	800fade <WM__IsInModalArea+0x46>
 800fac4:	4a0a      	ldr	r2, [pc, #40]	; (800faf0 <WM__IsInModalArea+0x58>)
 800fac6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800faca:	f7f9 fbd6 	bl	800927a <WM__IsAncestor>
 800face:	2800      	cmp	r0, #0
 800fad0:	d1e8      	bne.n	800faa4 <WM__IsInModalArea+0xc>
 800fad2:	bd70      	pop	{r4, r5, r6, pc}
 800fad4:	b918      	cbnz	r0, 800fade <WM__IsInModalArea+0x46>
 800fad6:	1ae3      	subs	r3, r4, r3
 800fad8:	4258      	negs	r0, r3
 800fada:	4158      	adcs	r0, r3
 800fadc:	bd70      	pop	{r4, r5, r6, pc}
 800fade:	2001      	movs	r0, #1
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	bf00      	nop
 800fae4:	2000003c 	.word	0x2000003c
 800fae8:	20022f6c 	.word	0x20022f6c
 800faec:	200230bc 	.word	0x200230bc
 800faf0:	20022f4c 	.word	0x20022f4c

0800faf4 <WM__SendPIDMessage>:
 800faf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faf6:	4606      	mov	r6, r0
 800faf8:	460c      	mov	r4, r1
 800fafa:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800fafc:	b085      	sub	sp, #20
 800fafe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb02:	230d      	movs	r3, #13
 800fb04:	9602      	str	r6, [sp, #8]
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	4637      	mov	r7, r6
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	f7f9 fbe2 	bl	80092d4 <WM_IsWindow>
 800fb10:	b150      	cbz	r0, 800fb28 <WM__SendPIDMessage+0x34>
 800fb12:	4638      	mov	r0, r7
 800fb14:	f7f9 fbe0 	bl	80092d8 <WM_GetParent>
 800fb18:	4607      	mov	r7, r0
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d0f5      	beq.n	800fb0a <WM__SendPIDMessage+0x16>
 800fb1e:	4669      	mov	r1, sp
 800fb20:	9403      	str	r4, [sp, #12]
 800fb22:	f001 fa12 	bl	8010f4a <WM__SendMessageIfEnabled>
 800fb26:	e7f0      	b.n	800fb0a <WM__SendPIDMessage+0x16>
 800fb28:	4630      	mov	r0, r6
 800fb2a:	4621      	mov	r1, r4
 800fb2c:	f001 fa0d 	bl	8010f4a <WM__SendMessageIfEnabled>
 800fb30:	b005      	add	sp, #20
 800fb32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb34 <WM__SendTouchMessage>:
 800fb34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb36:	68cc      	ldr	r4, [r1, #12]
 800fb38:	4606      	mov	r6, r0
 800fb3a:	460d      	mov	r5, r1
 800fb3c:	b194      	cbz	r4, 800fb64 <WM__SendTouchMessage+0x30>
 800fb3e:	f7ff f8e3 	bl	800ed08 <GUI_ALLOC_LockH>
 800fb42:	ab02      	add	r3, sp, #8
 800fb44:	4602      	mov	r2, r0
 800fb46:	f843 0d04 	str.w	r0, [r3, #-4]!
 800fb4a:	6821      	ldr	r1, [r4, #0]
 800fb4c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fb50:	1a09      	subs	r1, r1, r0
 800fb52:	6021      	str	r1, [r4, #0]
 800fb54:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800fb58:	6862      	ldr	r2, [r4, #4]
 800fb5a:	1a52      	subs	r2, r2, r1
 800fb5c:	6062      	str	r2, [r4, #4]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff f8e0 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800fb64:	4630      	mov	r0, r6
 800fb66:	4629      	mov	r1, r5
 800fb68:	f7ff ffc4 	bl	800faf4 <WM__SendPIDMessage>
 800fb6c:	b002      	add	sp, #8
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}

0800fb70 <WM_HandlePID>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	b097      	sub	sp, #92	; 0x5c
 800fb76:	ae06      	add	r6, sp, #24
 800fb78:	f04f 080c 	mov.w	r8, #12
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	4642      	mov	r2, r8
 800fb80:	4630      	mov	r0, r6
 800fb82:	f001 fe7b 	bl	801187c <memset>
 800fb86:	f7fd fd29 	bl	800d5dc <GUI_PID_IsEmpty>
 800fb8a:	b108      	cbz	r0, 800fb90 <WM_HandlePID+0x20>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	e1aa      	b.n	800fee6 <WM_HandlePID+0x376>
 800fb90:	ac09      	add	r4, sp, #36	; 0x24
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7fd fca6 	bl	800d4e4 <GUI_PID_GetState>
 800fb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb9a:	4dad      	ldr	r5, [pc, #692]	; (800fe50 <WM_HandlePID+0x2e0>)
 800fb9c:	4fad      	ldr	r7, [pc, #692]	; (800fe54 <WM_HandlePID+0x2e4>)
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	d112      	bne.n	800fbc8 <WM_HandlePID+0x58>
 800fba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fba4:	3301      	adds	r3, #1
 800fba6:	d11e      	bne.n	800fbe6 <WM_HandlePID+0x76>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800fbae:	fb08 f803 	mul.w	r8, r8, r3
 800fbb2:	eb07 0308 	add.w	r3, r7, r8
 800fbb6:	7a19      	ldrb	r1, [r3, #8]
 800fbb8:	4291      	cmp	r1, r2
 800fbba:	d0e7      	beq.n	800fb8c <WM_HandlePID+0x1c>
 800fbbc:	f857 2008 	ldr.w	r2, [r7, r8]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	9209      	str	r2, [sp, #36]	; 0x24
 800fbc4:	930a      	str	r3, [sp, #40]	; 0x28
 800fbc6:	e00e      	b.n	800fbe6 <WM_HandlePID+0x76>
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	db0c      	blt.n	800fbe6 <WM_HandlePID+0x76>
 800fbcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbce:	2a00      	cmp	r2, #0
 800fbd0:	db09      	blt.n	800fbe6 <WM_HandlePID+0x76>
 800fbd2:	49a1      	ldr	r1, [pc, #644]	; (800fe58 <WM_HandlePID+0x2e8>)
 800fbd4:	f9b1 1000 	ldrsh.w	r1, [r1]
 800fbd8:	440b      	add	r3, r1
 800fbda:	9309      	str	r3, [sp, #36]	; 0x24
 800fbdc:	4b9f      	ldr	r3, [pc, #636]	; (800fe5c <WM_HandlePID+0x2ec>)
 800fbde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbe2:	441a      	add	r2, r3
 800fbe4:	920a      	str	r2, [sp, #40]	; 0x28
 800fbe6:	a804      	add	r0, sp, #16
 800fbe8:	f000 fa12 	bl	8010010 <WM__AddCriticalHandle>
 800fbec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	bf98      	it	ls
 800fbf4:	602b      	strls	r3, [r5, #0]
 800fbf6:	6828      	ldr	r0, [r5, #0]
 800fbf8:	a901      	add	r1, sp, #4
 800fbfa:	aa02      	add	r2, sp, #8
 800fbfc:	f7fd fc2a 	bl	800d454 <GUI_GetLayerPosEx>
 800fc00:	9b01      	ldr	r3, [sp, #4]
 800fc02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc04:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc06:	1ac0      	subs	r0, r0, r3
 800fc08:	9b02      	ldr	r3, [sp, #8]
 800fc0a:	9009      	str	r0, [sp, #36]	; 0x24
 800fc0c:	1ac9      	subs	r1, r1, r3
 800fc0e:	682b      	ldr	r3, [r5, #0]
 800fc10:	910a      	str	r1, [sp, #40]	; 0x28
 800fc12:	220c      	movs	r2, #12
 800fc14:	435a      	muls	r2, r3
 800fc16:	18bb      	adds	r3, r7, r2
 800fc18:	58ba      	ldr	r2, [r7, r2]
 800fc1a:	4282      	cmp	r2, r0
 800fc1c:	d108      	bne.n	800fc30 <WM_HandlePID+0xc0>
 800fc1e:	685a      	ldr	r2, [r3, #4]
 800fc20:	428a      	cmp	r2, r1
 800fc22:	d105      	bne.n	800fc30 <WM_HandlePID+0xc0>
 800fc24:	7a1a      	ldrb	r2, [r3, #8]
 800fc26:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	f000 8156 	beq.w	800fedc <WM_HandlePID+0x36c>
 800fc30:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800fc34:	f001 f8c2 	bl	8010dbc <GUI_CURSOR_SetPositionEx>
 800fc38:	4b89      	ldr	r3, [pc, #548]	; (800fe60 <WM_HandlePID+0x2f0>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	b113      	cbz	r3, 800fc44 <WM_HandlePID+0xd4>
 800fc3e:	4620      	mov	r0, r4
 800fc40:	2100      	movs	r1, #0
 800fc42:	4798      	blx	r3
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	4a87      	ldr	r2, [pc, #540]	; (800fe64 <WM_HandlePID+0x2f4>)
 800fc48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fc4c:	b918      	cbnz	r0, 800fc56 <WM_HandlePID+0xe6>
 800fc4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc50:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc52:	f000 f9a7 	bl	800ffa4 <WM_Screen2hWin>
 800fc56:	4b84      	ldr	r3, [pc, #528]	; (800fe68 <WM_HandlePID+0x2f8>)
 800fc58:	9005      	str	r0, [sp, #20]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	b113      	cbz	r3, 800fc64 <WM_HandlePID+0xf4>
 800fc5e:	9905      	ldr	r1, [sp, #20]
 800fc60:	4620      	mov	r0, r4
 800fc62:	4798      	blx	r3
 800fc64:	4981      	ldr	r1, [pc, #516]	; (800fe6c <WM_HandlePID+0x2fc>)
 800fc66:	682b      	ldr	r3, [r5, #0]
 800fc68:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800fe50 <WM_HandlePID+0x2e0>
 800fc6c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800fc70:	4688      	mov	r8, r1
 800fc72:	685a      	ldr	r2, [r3, #4]
 800fc74:	9805      	ldr	r0, [sp, #20]
 800fc76:	b312      	cbz	r2, 800fcbe <WM_HandlePID+0x14e>
 800fc78:	4282      	cmp	r2, r0
 800fc7a:	d020      	beq.n	800fcbe <WM_HandlePID+0x14e>
 800fc7c:	6858      	ldr	r0, [r3, #4]
 800fc7e:	f7ff ff0b 	bl	800fa98 <WM__IsInModalArea>
 800fc82:	b1e0      	cbz	r0, 800fcbe <WM_HandlePID+0x14e>
 800fc84:	f8d9 3000 	ldr.w	r3, [r9]
 800fc88:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fc8c:	6858      	ldr	r0, [r3, #4]
 800fc8e:	f7f9 faeb 	bl	8009268 <WM__IsEnabled>
 800fc92:	b1a0      	cbz	r0, 800fcbe <WM_HandlePID+0x14e>
 800fc94:	2312      	movs	r3, #18
 800fc96:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800fc9a:	9312      	str	r3, [sp, #72]	; 0x48
 800fc9c:	f8d9 3000 	ldr.w	r3, [r9]
 800fca0:	9615      	str	r6, [sp, #84]	; 0x54
 800fca2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fca6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800fcaa:	6858      	ldr	r0, [r3, #4]
 800fcac:	a912      	add	r1, sp, #72	; 0x48
 800fcae:	f7ff ff41 	bl	800fb34 <WM__SendTouchMessage>
 800fcb2:	f8d9 3000 	ldr.w	r3, [r9]
 800fcb6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
 800fcbe:	9805      	ldr	r0, [sp, #20]
 800fcc0:	f7ff feea 	bl	800fa98 <WM__IsInModalArea>
 800fcc4:	b908      	cbnz	r0, 800fcca <WM_HandlePID+0x15a>
 800fcc6:	2600      	movs	r6, #0
 800fcc8:	e0fb      	b.n	800fec2 <WM_HandlePID+0x352>
 800fcca:	682b      	ldr	r3, [r5, #0]
 800fccc:	9905      	ldr	r1, [sp, #20]
 800fcce:	f8df a180 	ldr.w	sl, [pc, #384]	; 800fe50 <WM_HandlePID+0x2e0>
 800fcd2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800fe54 <WM_HandlePID+0x2e4>
 800fcd6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800fcda:	f04f 080c 	mov.w	r8, #12
 800fcde:	fb08 7303 	mla	r3, r8, r3, r7
 800fce2:	6051      	str	r1, [r2, #4]
 800fce4:	7a1a      	ldrb	r2, [r3, #8]
 800fce6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d062      	beq.n	800fdb4 <WM_HandlePID+0x244>
 800fcee:	9b05      	ldr	r3, [sp, #20]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d05f      	beq.n	800fdb4 <WM_HandlePID+0x244>
 800fcf4:	9805      	ldr	r0, [sp, #20]
 800fcf6:	f7ff f807 	bl	800ed08 <GUI_ALLOC_LockH>
 800fcfa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fcfe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800fd02:	f8da 3000 	ldr.w	r3, [sl]
 800fd06:	9003      	str	r0, [sp, #12]
 800fd08:	fb08 9303 	mla	r3, r8, r3, r9
 800fd0c:	7a1b      	ldrb	r3, [r3, #8]
 800fd0e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 800fd12:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd18:	1a9b      	subs	r3, r3, r2
 800fd1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd1c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd22:	eb0d 0008 	add.w	r0, sp, r8
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	9310      	str	r3, [sp, #64]	; 0x40
 800fd2a:	f7fe fffb 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800fd2e:	f8da e000 	ldr.w	lr, [sl]
 800fd32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800fe70 <WM_HandlePID+0x300>
 800fd36:	ab0f      	add	r3, sp, #60	; 0x3c
 800fd38:	9315      	str	r3, [sp, #84]	; 0x54
 800fd3a:	2311      	movs	r3, #17
 800fd3c:	9312      	str	r3, [sp, #72]	; 0x48
 800fd3e:	fb08 930e 	mla	r3, r8, lr, r9
 800fd42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd46:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800fd4a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800fd4e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800fd52:	721a      	strb	r2, [r3, #8]
 800fd54:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800fd58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800fd5c:	b133      	cbz	r3, 800fd6c <WM_HandlePID+0x1fc>
 800fd5e:	eb0a 030e 	add.w	r3, sl, lr
 800fd62:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fd66:	9a05      	ldr	r2, [sp, #20]
 800fd68:	605a      	str	r2, [r3, #4]
 800fd6a:	e000      	b.n	800fd6e <WM_HandlePID+0x1fe>
 800fd6c:	4699      	mov	r9, r3
 800fd6e:	eb0a 030e 	add.w	r3, sl, lr
 800fd72:	a912      	add	r1, sp, #72	; 0x48
 800fd74:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800fd78:	9805      	ldr	r0, [sp, #20]
 800fd7a:	f001 f8e6 	bl	8010f4a <WM__SendMessageIfEnabled>
 800fd7e:	682b      	ldr	r3, [r5, #0]
 800fd80:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 800fd84:	6851      	ldr	r1, [r2, #4]
 800fd86:	458b      	cmp	fp, r1
 800fd88:	bf1c      	itt	ne
 800fd8a:	6852      	ldrne	r2, [r2, #4]
 800fd8c:	9205      	strne	r2, [sp, #20]
 800fd8e:	220c      	movs	r2, #12
 800fd90:	fb02 7303 	mla	r3, r2, r3, r7
 800fd94:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800fd98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd9c:	f1b9 0f00 	cmp.w	r9, #0
 800fda0:	d008      	beq.n	800fdb4 <WM_HandlePID+0x244>
 800fda2:	4648      	mov	r0, r9
 800fda4:	f7f9 fa96 	bl	80092d4 <WM_IsWindow>
 800fda8:	b120      	cbz	r0, 800fdb4 <WM_HandlePID+0x244>
 800fdaa:	682b      	ldr	r3, [r5, #0]
 800fdac:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 800fdb0:	f8c3 9004 	str.w	r9, [r3, #4]
 800fdb4:	682a      	ldr	r2, [r5, #0]
 800fdb6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fdba:	210c      	movs	r1, #12
 800fdbc:	4351      	muls	r1, r2
 800fdbe:	1878      	adds	r0, r7, r1
 800fdc0:	f890 8008 	ldrb.w	r8, [r0, #8]
 800fdc4:	ea53 0808 	orrs.w	r8, r3, r8
 800fdc8:	d064      	beq.n	800fe94 <WM_HandlePID+0x324>
 800fdca:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800fe70 <WM_HandlePID+0x300>
 800fdce:	f44f 7e10 	mov.w	lr, #576	; 0x240
 800fdd2:	00d2      	lsls	r2, r2, #3
 800fdd4:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800fdd8:	eb08 0e02 	add.w	lr, r8, r2
 800fddc:	f8de 9004 	ldr.w	r9, [lr, #4]
 800fde0:	f8dd c014 	ldr.w	ip, [sp, #20]
 800fde4:	45e1      	cmp	r9, ip
 800fde6:	d01c      	beq.n	800fe22 <WM_HandlePID+0x2b2>
 800fde8:	f8de e004 	ldr.w	lr, [lr, #4]
 800fdec:	f1be 0f00 	cmp.w	lr, #0
 800fdf0:	d017      	beq.n	800fe22 <WM_HandlePID+0x2b2>
 800fdf2:	b113      	cbz	r3, 800fdfa <WM_HandlePID+0x28a>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9315      	str	r3, [sp, #84]	; 0x54
 800fdf8:	e009      	b.n	800fe0e <WM_HandlePID+0x29e>
 800fdfa:	f8df e058 	ldr.w	lr, [pc, #88]	; 800fe54 <WM_HandlePID+0x2e4>
 800fdfe:	f88d 3020 	strb.w	r3, [sp, #32]
 800fe02:	f85e 1001 	ldr.w	r1, [lr, r1]
 800fe06:	9106      	str	r1, [sp, #24]
 800fe08:	6841      	ldr	r1, [r0, #4]
 800fe0a:	9107      	str	r1, [sp, #28]
 800fe0c:	9615      	str	r6, [sp, #84]	; 0x54
 800fe0e:	4442      	add	r2, r8
 800fe10:	a912      	add	r1, sp, #72	; 0x48
 800fe12:	6850      	ldr	r0, [r2, #4]
 800fe14:	f7ff fe8e 	bl	800fb34 <WM__SendTouchMessage>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fe1e:	2200      	movs	r2, #0
 800fe20:	605a      	str	r2, [r3, #4]
 800fe22:	682b      	ldr	r3, [r5, #0]
 800fe24:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 800fe28:	220c      	movs	r2, #12
 800fe2a:	fb02 7203 	mla	r2, r2, r3, r7
 800fe2e:	f882 e008 	strb.w	lr, [r2, #8]
 800fe32:	9a05      	ldr	r2, [sp, #20]
 800fe34:	2a00      	cmp	r2, #0
 800fe36:	d043      	beq.n	800fec0 <WM_HandlePID+0x350>
 800fe38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800fe3c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800fe40:	f1be 0f00 	cmp.w	lr, #0
 800fe44:	d016      	beq.n	800fe74 <WM_HandlePID+0x304>
 800fe46:	9a05      	ldr	r2, [sp, #20]
 800fe48:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fe4c:	e01b      	b.n	800fe86 <WM_HandlePID+0x316>
 800fe4e:	bf00      	nop
 800fe50:	20022f6c 	.word	0x20022f6c
 800fe54:	20022bf4 	.word	0x20022bf4
 800fe58:	20022fb4 	.word	0x20022fb4
 800fe5c:	20022fa8 	.word	0x20022fa8
 800fe60:	20022bec 	.word	0x20022bec
 800fe64:	20022f88 	.word	0x20022f88
 800fe68:	20022bf0 	.word	0x20022bf0
 800fe6c:	2002309c 	.word	0x2002309c
 800fe70:	200230ac 	.word	0x200230ac
 800fe74:	4b1d      	ldr	r3, [pc, #116]	; (800feec <WM_HandlePID+0x37c>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	b10b      	cbz	r3, 800fe7e <WM_HandlePID+0x30e>
 800fe7a:	f7f9 fa29 	bl	80092d0 <WM_ReleaseCapture>
 800fe7e:	682b      	ldr	r3, [r5, #0]
 800fe80:	2200      	movs	r2, #0
 800fe82:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fe86:	605a      	str	r2, [r3, #4]
 800fe88:	9805      	ldr	r0, [sp, #20]
 800fe8a:	9615      	str	r6, [sp, #84]	; 0x54
 800fe8c:	a912      	add	r1, sp, #72	; 0x48
 800fe8e:	f7ff fe51 	bl	800fb34 <WM__SendTouchMessage>
 800fe92:	e015      	b.n	800fec0 <WM_HandlePID+0x350>
 800fe94:	9b05      	ldr	r3, [sp, #20]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f43f af15 	beq.w	800fcc6 <WM_HandlePID+0x156>
 800fe9c:	9805      	ldr	r0, [sp, #20]
 800fe9e:	f7f9 f9e3 	bl	8009268 <WM__IsEnabled>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	f43f af0f 	beq.w	800fcc6 <WM_HandlePID+0x156>
 800fea8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800feac:	2310      	movs	r3, #16
 800feae:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800feb2:	9805      	ldr	r0, [sp, #20]
 800feb4:	9312      	str	r3, [sp, #72]	; 0x48
 800feb6:	a912      	add	r1, sp, #72	; 0x48
 800feb8:	9615      	str	r6, [sp, #84]	; 0x54
 800feba:	f7ff fe3b 	bl	800fb34 <WM__SendTouchMessage>
 800febe:	e702      	b.n	800fcc6 <WM_HandlePID+0x156>
 800fec0:	2601      	movs	r6, #1
 800fec2:	682b      	ldr	r3, [r5, #0]
 800fec4:	220c      	movs	r2, #12
 800fec6:	fb02 7703 	mla	r7, r2, r3, r7
 800feca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800fece:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800fed2:	4620      	mov	r0, r4
 800fed4:	4619      	mov	r1, r3
 800fed6:	f000 f875 	bl	800ffc4 <WM_PID__SetPrevState>
 800feda:	e000      	b.n	800fede <WM_HandlePID+0x36e>
 800fedc:	2600      	movs	r6, #0
 800fede:	a804      	add	r0, sp, #16
 800fee0:	f000 f89e 	bl	8010020 <WM__RemoveCriticalHandle>
 800fee4:	4630      	mov	r0, r6
 800fee6:	b017      	add	sp, #92	; 0x5c
 800fee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feec:	20022f70 	.word	0x20022f70

0800fef0 <WM_SendToParent>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4605      	mov	r5, r0
 800fef4:	460c      	mov	r4, r1
 800fef6:	b141      	cbz	r1, 800ff0a <WM_SendToParent+0x1a>
 800fef8:	f7f9 f9ee 	bl	80092d8 <WM_GetParent>
 800fefc:	b128      	cbz	r0, 800ff0a <WM_SendToParent+0x1a>
 800fefe:	60a5      	str	r5, [r4, #8]
 800ff00:	4621      	mov	r1, r4
 800ff02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff06:	f7f9 b991 	b.w	800922c <WM__SendMessage>
 800ff0a:	bd38      	pop	{r3, r4, r5, pc}

0800ff0c <WM__IsInWindow>:
 800ff0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ff0e:	f013 0302 	ands.w	r3, r3, #2
 800ff12:	d012      	beq.n	800ff3a <WM__IsInWindow+0x2e>
 800ff14:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ff18:	4299      	cmp	r1, r3
 800ff1a:	db10      	blt.n	800ff3e <WM__IsInWindow+0x32>
 800ff1c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ff20:	4299      	cmp	r1, r3
 800ff22:	dc0c      	bgt.n	800ff3e <WM__IsInWindow+0x32>
 800ff24:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	db08      	blt.n	800ff3e <WM__IsInWindow+0x32>
 800ff2c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ff30:	4282      	cmp	r2, r0
 800ff32:	bfcc      	ite	gt
 800ff34:	2000      	movgt	r0, #0
 800ff36:	2001      	movle	r0, #1
 800ff38:	4770      	bx	lr
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	4770      	bx	lr
 800ff3e:	2000      	movs	r0, #0
 800ff40:	4770      	bx	lr

0800ff42 <_Screen2hWin>:
 800ff42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff46:	460e      	mov	r6, r1
 800ff48:	4617      	mov	r7, r2
 800ff4a:	4698      	mov	r8, r3
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	b320      	cbz	r0, 800ff9a <_Screen2hWin+0x58>
 800ff50:	f7fe feda 	bl	800ed08 <GUI_ALLOC_LockH>
 800ff54:	4639      	mov	r1, r7
 800ff56:	4642      	mov	r2, r8
 800ff58:	4604      	mov	r4, r0
 800ff5a:	9001      	str	r0, [sp, #4]
 800ff5c:	f7ff ffd6 	bl	800ff0c <WM__IsInWindow>
 800ff60:	4681      	mov	r9, r0
 800ff62:	b920      	cbnz	r0, 800ff6e <_Screen2hWin+0x2c>
 800ff64:	a801      	add	r0, sp, #4
 800ff66:	f7fe fedd 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800ff6a:	4648      	mov	r0, r9
 800ff6c:	e016      	b.n	800ff9c <_Screen2hWin+0x5a>
 800ff6e:	69e4      	ldr	r4, [r4, #28]
 800ff70:	b91c      	cbnz	r4, 800ff7a <_Screen2hWin+0x38>
 800ff72:	a801      	add	r0, sp, #4
 800ff74:	f7fe fed6 	bl	800ed24 <GUI_ALLOC_UnlockH>
 800ff78:	e00f      	b.n	800ff9a <_Screen2hWin+0x58>
 800ff7a:	42b4      	cmp	r4, r6
 800ff7c:	d0f9      	beq.n	800ff72 <_Screen2hWin+0x30>
 800ff7e:	4620      	mov	r0, r4
 800ff80:	4631      	mov	r1, r6
 800ff82:	463a      	mov	r2, r7
 800ff84:	4643      	mov	r3, r8
 800ff86:	f7ff ffdc 	bl	800ff42 <_Screen2hWin>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	bf18      	it	ne
 800ff8e:	4605      	movne	r5, r0
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7fe feaf 	bl	800ecf4 <GUI_ALLOC_h2p>
 800ff96:	6a04      	ldr	r4, [r0, #32]
 800ff98:	e7ea      	b.n	800ff70 <_Screen2hWin+0x2e>
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	b003      	add	sp, #12
 800ff9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ffa4 <WM_Screen2hWin>:
 800ffa4:	b570      	push	{r4, r5, r6, lr}
 800ffa6:	4b06      	ldr	r3, [pc, #24]	; (800ffc0 <WM_Screen2hWin+0x1c>)
 800ffa8:	460c      	mov	r4, r1
 800ffaa:	4605      	mov	r5, r0
 800ffac:	6818      	ldr	r0, [r3, #0]
 800ffae:	f000 f813 	bl	800ffd8 <WM_GetDesktopWindowEx>
 800ffb2:	462a      	mov	r2, r5
 800ffb4:	4623      	mov	r3, r4
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffbc:	f7ff bfc1 	b.w	800ff42 <_Screen2hWin>
 800ffc0:	20022f6c 	.word	0x20022f6c

0800ffc4 <WM_PID__SetPrevState>:
 800ffc4:	4b03      	ldr	r3, [pc, #12]	; (800ffd4 <WM_PID__SetPrevState+0x10>)
 800ffc6:	220c      	movs	r2, #12
 800ffc8:	fb02 3301 	mla	r3, r2, r1, r3
 800ffcc:	c807      	ldmia	r0, {r0, r1, r2}
 800ffce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ffd2:	4770      	bx	lr
 800ffd4:	20022c0c 	.word	0x20022c0c

0800ffd8 <WM_GetDesktopWindowEx>:
 800ffd8:	2801      	cmp	r0, #1
 800ffda:	bf9a      	itte	ls
 800ffdc:	4b02      	ldrls	r3, [pc, #8]	; (800ffe8 <WM_GetDesktopWindowEx+0x10>)
 800ffde:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ffe2:	2000      	movhi	r0, #0
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	20022f4c 	.word	0x20022f4c

0800ffec <WM__GetClientRectEx>:
 800ffec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffee:	460d      	mov	r5, r1
 800fff0:	b158      	cbz	r0, 801000a <WM__GetClientRectEx+0x1e>
 800fff2:	b151      	cbz	r1, 801000a <WM__GetClientRectEx+0x1e>
 800fff4:	f7fe fe88 	bl	800ed08 <GUI_ALLOC_LockH>
 800fff8:	ac02      	add	r4, sp, #8
 800fffa:	4629      	mov	r1, r5
 800fffc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010000:	f7f9 fc65 	bl	80098ce <WM__GetClientRectWin>
 8010004:	4620      	mov	r0, r4
 8010006:	f7fe fe8d 	bl	800ed24 <GUI_ALLOC_UnlockH>
 801000a:	b003      	add	sp, #12
 801000c:	bd30      	pop	{r4, r5, pc}
	...

08010010 <WM__AddCriticalHandle>:
 8010010:	4b02      	ldr	r3, [pc, #8]	; (801001c <WM__AddCriticalHandle+0xc>)
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	6002      	str	r2, [r0, #0]
 8010016:	6018      	str	r0, [r3, #0]
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	20022f80 	.word	0x20022f80

08010020 <WM__RemoveCriticalHandle>:
 8010020:	4a09      	ldr	r2, [pc, #36]	; (8010048 <WM__RemoveCriticalHandle+0x28>)
 8010022:	6813      	ldr	r3, [r2, #0]
 8010024:	b510      	push	{r4, lr}
 8010026:	4614      	mov	r4, r2
 8010028:	b16b      	cbz	r3, 8010046 <WM__RemoveCriticalHandle+0x26>
 801002a:	2200      	movs	r2, #0
 801002c:	4283      	cmp	r3, r0
 801002e:	d105      	bne.n	801003c <WM__RemoveCriticalHandle+0x1c>
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	b10a      	cbz	r2, 8010038 <WM__RemoveCriticalHandle+0x18>
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	bd10      	pop	{r4, pc}
 8010038:	6023      	str	r3, [r4, #0]
 801003a:	bd10      	pop	{r4, pc}
 801003c:	6819      	ldr	r1, [r3, #0]
 801003e:	b111      	cbz	r1, 8010046 <WM__RemoveCriticalHandle+0x26>
 8010040:	461a      	mov	r2, r3
 8010042:	460b      	mov	r3, r1
 8010044:	e7f2      	b.n	801002c <WM__RemoveCriticalHandle+0xc>
 8010046:	bd10      	pop	{r4, pc}
 8010048:	20022f80 	.word	0x20022f80

0801004c <WM_BringToBottom>:
 801004c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010050:	4604      	mov	r4, r0
 8010052:	b087      	sub	sp, #28
 8010054:	2800      	cmp	r0, #0
 8010056:	d039      	beq.n	80100cc <WM_BringToBottom+0x80>
 8010058:	f7fe fe56 	bl	800ed08 <GUI_ALLOC_LockH>
 801005c:	4603      	mov	r3, r0
 801005e:	9001      	str	r0, [sp, #4]
 8010060:	c803      	ldmia	r0, {r0, r1}
 8010062:	ad04      	add	r5, sp, #16
 8010064:	e885 0003 	stmia.w	r5, {r0, r1}
 8010068:	a801      	add	r0, sp, #4
 801006a:	6a1e      	ldr	r6, [r3, #32]
 801006c:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8010070:	f7fe fe58 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8010074:	4620      	mov	r0, r4
 8010076:	f7ff fcf2 	bl	800fa5e <WM__GetPrevSibling>
 801007a:	4607      	mov	r7, r0
 801007c:	b330      	cbz	r0, 80100cc <WM_BringToBottom+0x80>
 801007e:	4620      	mov	r0, r4
 8010080:	f7f9 f92a 	bl	80092d8 <WM_GetParent>
 8010084:	f019 0f02 	tst.w	r9, #2
 8010088:	4680      	mov	r8, r0
 801008a:	d004      	beq.n	8010096 <WM_BringToBottom+0x4a>
 801008c:	4628      	mov	r0, r5
 801008e:	4641      	mov	r1, r8
 8010090:	4632      	mov	r2, r6
 8010092:	f7f9 fc0e 	bl	80098b2 <WM__InvalidateRectEx>
 8010096:	4620      	mov	r0, r4
 8010098:	f7fe fe36 	bl	800ed08 <GUI_ALLOC_LockH>
 801009c:	9001      	str	r0, [sp, #4]
 801009e:	4640      	mov	r0, r8
 80100a0:	f7fe fe32 	bl	800ed08 <GUI_ALLOC_LockH>
 80100a4:	9003      	str	r0, [sp, #12]
 80100a6:	4638      	mov	r0, r7
 80100a8:	f7fe fe2e 	bl	800ed08 <GUI_ALLOC_LockH>
 80100ac:	9b03      	ldr	r3, [sp, #12]
 80100ae:	9a01      	ldr	r2, [sp, #4]
 80100b0:	69d9      	ldr	r1, [r3, #28]
 80100b2:	6206      	str	r6, [r0, #32]
 80100b4:	9002      	str	r0, [sp, #8]
 80100b6:	6211      	str	r1, [r2, #32]
 80100b8:	a801      	add	r0, sp, #4
 80100ba:	61dc      	str	r4, [r3, #28]
 80100bc:	f7fe fe32 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80100c0:	a803      	add	r0, sp, #12
 80100c2:	f7fe fe2f 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80100c6:	a802      	add	r0, sp, #8
 80100c8:	f7fe fe2c 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80100cc:	b007      	add	sp, #28
 80100ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080100d4 <GUI_MEMDEV__WriteToActiveAlpha>:
 80100d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d8:	b091      	sub	sp, #68	; 0x44
 80100da:	460e      	mov	r6, r1
 80100dc:	4614      	mov	r4, r2
 80100de:	900d      	str	r0, [sp, #52]	; 0x34
 80100e0:	f7fe fe12 	bl	800ed08 <GUI_ALLOC_LockH>
 80100e4:	4602      	mov	r2, r0
 80100e6:	a810      	add	r0, sp, #64	; 0x40
 80100e8:	6813      	ldr	r3, [r2, #0]
 80100ea:	4d5b      	ldr	r5, [pc, #364]	; (8010258 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	f840 2d08 	str.w	r2, [r0, #-8]!
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 80100f8:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 80100fc:	9309      	str	r3, [sp, #36]	; 0x24
 80100fe:	f7fe fe11 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8010102:	682b      	ldr	r3, [r5, #0]
 8010104:	4f55      	ldr	r7, [pc, #340]	; (801025c <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8010106:	7c5b      	ldrb	r3, [r3, #17]
 8010108:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801010c:	68c3      	ldr	r3, [r0, #12]
 801010e:	2108      	movs	r1, #8
 8010110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010112:	4798      	blx	r3
 8010114:	682b      	ldr	r3, [r5, #0]
 8010116:	7c5b      	ldrb	r3, [r3, #17]
 8010118:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801011c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010120:	2817      	cmp	r0, #23
 8010122:	bf88      	it	hi
 8010124:	2020      	movhi	r0, #32
 8010126:	9008      	str	r0, [sp, #32]
 8010128:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801012c:	f8d8 2000 	ldr.w	r2, [r8]
 8010130:	910a      	str	r1, [sp, #40]	; 0x28
 8010132:	2000      	movs	r0, #0
 8010134:	920b      	str	r2, [sp, #44]	; 0x2c
 8010136:	f7fc fa4f 	bl	800c5d8 <GUI__AllocAlphaBuffer>
 801013a:	2800      	cmp	r0, #0
 801013c:	f040 8089 	bne.w	8010252 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010140:	682a      	ldr	r2, [r5, #0]
 8010142:	fa0f f78b 	sxth.w	r7, fp
 8010146:	19f5      	adds	r5, r6, r7
 8010148:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 801014c:	3d01      	subs	r5, #1
 801014e:	1aed      	subs	r5, r5, r3
 8010150:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8010154:	2d00      	cmp	r5, #0
 8010156:	bfcc      	ite	gt
 8010158:	ebc5 0507 	rsbgt	r5, r5, r7
 801015c:	463d      	movle	r5, r7
 801015e:	42b3      	cmp	r3, r6
 8010160:	bfc3      	ittte	gt
 8010162:	ebc6 0103 	rsbgt	r1, r6, r3
 8010166:	ebc1 0505 	rsbgt	r5, r1, r5
 801016a:	461e      	movgt	r6, r3
 801016c:	2100      	movle	r1, #0
 801016e:	2d00      	cmp	r5, #0
 8010170:	dd6f      	ble.n	8010252 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010172:	fa0f f389 	sxth.w	r3, r9
 8010176:	18e0      	adds	r0, r4, r3
 8010178:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 801017c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8010180:	3801      	subs	r0, #1
 8010182:	ebcc 0000 	rsb	r0, ip, r0
 8010186:	2800      	cmp	r0, #0
 8010188:	bfc8      	it	gt
 801018a:	ebc0 0303 	rsbgt	r3, r0, r3
 801018e:	4294      	cmp	r4, r2
 8010190:	bfbd      	ittte	lt
 8010192:	ebc4 0a02 	rsblt	sl, r4, r2
 8010196:	ebca 0303 	rsblt	r3, sl, r3
 801019a:	4614      	movlt	r4, r2
 801019c:	f04f 0a00 	movge.w	sl, #0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	dd56      	ble.n	8010252 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80101a4:	fb07 1a0a 	mla	sl, r7, sl, r1
 80101a8:	18e3      	adds	r3, r4, r3
 80101aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80101ae:	930c      	str	r3, [sp, #48]	; 0x30
 80101b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80101b2:	f7f9 ff25 	bl	800a000 <GUI_MEMDEV_GetDataPtr>
 80101b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	ab0f      	add	r3, sp, #60	; 0x3c
 80101bc:	eb00 020a 	add.w	r2, r0, sl
 80101c0:	9301      	str	r3, [sp, #4]
 80101c2:	4630      	mov	r0, r6
 80101c4:	4621      	mov	r1, r4
 80101c6:	462b      	mov	r3, r5
 80101c8:	f7fc f920 	bl	800c40c <GUI__DoAlphaBlending>
 80101cc:	4681      	mov	r9, r0
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d03f      	beq.n	8010252 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80101d2:	4b23      	ldr	r3, [pc, #140]	; (8010260 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 80101d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80101d6:	4299      	cmp	r1, r3
 80101d8:	d01e      	beq.n	8010218 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80101da:	4629      	mov	r1, r5
 80101dc:	9a08      	ldr	r2, [sp, #32]
 80101de:	4643      	mov	r3, r8
 80101e0:	f000 fc83 	bl	8010aea <GUI__CompactPixelIndicesEx>
 80101e4:	b9c0      	cbnz	r0, 8010218 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80101e6:	f8d8 c010 	ldr.w	ip, [r8, #16]
 80101ea:	f1bc 0f00 	cmp.w	ip, #0
 80101ee:	d006      	beq.n	80101fe <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 80101f0:	4648      	mov	r0, r9
 80101f2:	4649      	mov	r1, r9
 80101f4:	fa0f f28b 	sxth.w	r2, fp
 80101f8:	2304      	movs	r3, #4
 80101fa:	47e0      	blx	ip
 80101fc:	e00c      	b.n	8010218 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80101fe:	464a      	mov	r2, r9
 8010200:	463b      	mov	r3, r7
 8010202:	6810      	ldr	r0, [r2, #0]
 8010204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010206:	9206      	str	r2, [sp, #24]
 8010208:	9307      	str	r3, [sp, #28]
 801020a:	4788      	blx	r1
 801020c:	9b07      	ldr	r3, [sp, #28]
 801020e:	9a06      	ldr	r2, [sp, #24]
 8010210:	3b01      	subs	r3, #1
 8010212:	f842 0b04 	str.w	r0, [r2], #4
 8010216:	d1f4      	bne.n	8010202 <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8010218:	9a08      	ldr	r2, [sp, #32]
 801021a:	9202      	str	r2, [sp, #8]
 801021c:	2301      	movs	r3, #1
 801021e:	2200      	movs	r2, #0
 8010220:	f104 0c01 	add.w	ip, r4, #1
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	9203      	str	r2, [sp, #12]
 801022a:	9205      	str	r2, [sp, #20]
 801022c:	f8cd 9010 	str.w	r9, [sp, #16]
 8010230:	4630      	mov	r0, r6
 8010232:	4621      	mov	r1, r4
 8010234:	462a      	mov	r2, r5
 8010236:	f8cd c01c 	str.w	ip, [sp, #28]
 801023a:	f7fb fd33 	bl	800bca4 <LCD_DrawBitmap>
 801023e:	2304      	movs	r3, #4
 8010240:	fb1b aa03 	smlabb	sl, fp, r3, sl
 8010244:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801024a:	459c      	cmp	ip, r3
 801024c:	d001      	beq.n	8010252 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801024e:	4664      	mov	r4, ip
 8010250:	e7ae      	b.n	80101b0 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8010252:	b011      	add	sp, #68	; 0x44
 8010254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010258:	2000002c 	.word	0x2000002c
 801025c:	20022fcc 	.word	0x20022fcc
 8010260:	0800f36b 	.word	0x0800f36b

08010264 <GUI_USAGE_DecUseCnt>:
 8010264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010266:	4605      	mov	r5, r0
 8010268:	f7fe fd4e 	bl	800ed08 <GUI_ALLOC_LockH>
 801026c:	4602      	mov	r2, r0
 801026e:	a802      	add	r0, sp, #8
 8010270:	8994      	ldrh	r4, [r2, #12]
 8010272:	f840 2d04 	str.w	r2, [r0, #-4]!
 8010276:	3c01      	subs	r4, #1
 8010278:	b2a4      	uxth	r4, r4
 801027a:	8194      	strh	r4, [r2, #12]
 801027c:	f7fe fd52 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8010280:	b914      	cbnz	r4, 8010288 <GUI_USAGE_DecUseCnt+0x24>
 8010282:	4628      	mov	r0, r5
 8010284:	f7fe fd6e 	bl	800ed64 <GUI_ALLOC_Free>
 8010288:	b003      	add	sp, #12
 801028a:	bd30      	pop	{r4, r5, pc}

0801028c <GUI_USAGE_AddRect>:
 801028c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010290:	4605      	mov	r5, r0
 8010292:	4688      	mov	r8, r1
 8010294:	4617      	mov	r7, r2
 8010296:	4699      	mov	r9, r3
 8010298:	68a8      	ldr	r0, [r5, #8]
 801029a:	464b      	mov	r3, r9
 801029c:	6846      	ldr	r6, [r0, #4]
 801029e:	4641      	mov	r1, r8
 80102a0:	4628      	mov	r0, r5
 80102a2:	1c54      	adds	r4, r2, #1
 80102a4:	47b0      	blx	r6
 80102a6:	9b08      	ldr	r3, [sp, #32]
 80102a8:	443b      	add	r3, r7
 80102aa:	42a3      	cmp	r3, r4
 80102ac:	d001      	beq.n	80102b2 <GUI_USAGE_AddRect+0x26>
 80102ae:	4622      	mov	r2, r4
 80102b0:	e7f2      	b.n	8010298 <GUI_USAGE_AddRect+0xc>
 80102b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080102b8 <LCD_SelectLCD>:
 80102b8:	b510      	push	{r4, lr}
 80102ba:	4b0d      	ldr	r3, [pc, #52]	; (80102f0 <LCD_SelectLCD+0x38>)
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	7c51      	ldrb	r1, [r2, #17]
 80102c0:	4a0c      	ldr	r2, [pc, #48]	; (80102f4 <LCD_SelectLCD+0x3c>)
 80102c2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80102c6:	461c      	mov	r4, r3
 80102c8:	b140      	cbz	r0, 80102dc <LCD_SelectLCD+0x24>
 80102ca:	68c3      	ldr	r3, [r0, #12]
 80102cc:	b113      	cbz	r3, 80102d4 <LCD_SelectLCD+0x1c>
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b04      	cmp	r3, #4
 80102d2:	d001      	beq.n	80102d8 <LCD_SelectLCD+0x20>
 80102d4:	6800      	ldr	r0, [r0, #0]
 80102d6:	e7f7      	b.n	80102c8 <LCD_SelectLCD+0x10>
 80102d8:	f7fe f870 	bl	800e3bc <GUI_DEVICE_Unlink>
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	2200      	movs	r2, #0
 80102e0:	661a      	str	r2, [r3, #96]	; 0x60
 80102e2:	f103 0208 	add.w	r2, r3, #8
 80102e6:	615a      	str	r2, [r3, #20]
 80102e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102ec:	f7fb bde6 	b.w	800bebc <LCD_SetClipRectMax>
 80102f0:	2000002c 	.word	0x2000002c
 80102f4:	20022fcc 	.word	0x20022fcc

080102f8 <LCD_ReadRectEx>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	b087      	sub	sp, #28
 80102fe:	4617      	mov	r7, r2
 8010300:	9304      	str	r3, [sp, #16]
 8010302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010304:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010306:	68da      	ldr	r2, [r3, #12]
 8010308:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801030a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801030e:	4606      	mov	r6, r0
 8010310:	460d      	mov	r5, r1
 8010312:	b973      	cbnz	r3, 8010332 <LCD_ReadRectEx+0x3a>
 8010314:	4b71      	ldr	r3, [pc, #452]	; (80104dc <LCD_ReadRectEx+0x1e4>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	7c58      	ldrb	r0, [r3, #17]
 801031a:	f7fb fac3 	bl	800b8a4 <GUI_GetBitsPerPixelEx>
 801031e:	2808      	cmp	r0, #8
 8010320:	4682      	mov	sl, r0
 8010322:	dd15      	ble.n	8010350 <LCD_ReadRectEx+0x58>
 8010324:	2810      	cmp	r0, #16
 8010326:	bfcc      	ite	gt
 8010328:	f04f 0904 	movgt.w	r9, #4
 801032c:	f04f 0902 	movle.w	r9, #2
 8010330:	e010      	b.n	8010354 <LCD_ReadRectEx+0x5c>
 8010332:	a811      	add	r0, sp, #68	; 0x44
 8010334:	2101      	movs	r1, #1
 8010336:	4798      	blx	r3
 8010338:	4684      	mov	ip, r0
 801033a:	2800      	cmp	r0, #0
 801033c:	d0ea      	beq.n	8010314 <LCD_ReadRectEx+0x1c>
 801033e:	9b04      	ldr	r3, [sp, #16]
 8010340:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010342:	e88d 0018 	stmia.w	sp, {r3, r4}
 8010346:	4631      	mov	r1, r6
 8010348:	462a      	mov	r2, r5
 801034a:	463b      	mov	r3, r7
 801034c:	47e0      	blx	ip
 801034e:	e0c1      	b.n	80104d4 <LCD_ReadRectEx+0x1dc>
 8010350:	f04f 0901 	mov.w	r9, #1
 8010354:	f04f 0b00 	mov.w	fp, #0
 8010358:	9b04      	ldr	r3, [sp, #16]
 801035a:	429d      	cmp	r5, r3
 801035c:	f300 80ba 	bgt.w	80104d4 <LCD_ReadRectEx+0x1dc>
 8010360:	f1b9 0f02 	cmp.w	r9, #2
 8010364:	d009      	beq.n	801037a <LCD_ReadRectEx+0x82>
 8010366:	f1b9 0f04 	cmp.w	r9, #4
 801036a:	d004      	beq.n	8010376 <LCD_ReadRectEx+0x7e>
 801036c:	f1b9 0f01 	cmp.w	r9, #1
 8010370:	f040 80ae 	bne.w	80104d0 <LCD_ReadRectEx+0x1d8>
 8010374:	e003      	b.n	801037e <LCD_ReadRectEx+0x86>
 8010376:	46b4      	mov	ip, r6
 8010378:	e09b      	b.n	80104b2 <LCD_ReadRectEx+0x1ba>
 801037a:	46b4      	mov	ip, r6
 801037c:	e08a      	b.n	8010494 <LCD_ReadRectEx+0x19c>
 801037e:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8010382:	2a07      	cmp	r2, #7
 8010384:	f200 80a4 	bhi.w	80104d0 <LCD_ReadRectEx+0x1d8>
 8010388:	e8df f002 	tbb	[pc, r2]
 801038c:	0606080a 	.word	0x0606080a
 8010390:	04040404 	.word	0x04040404
 8010394:	46b4      	mov	ip, r6
 8010396:	e066      	b.n	8010466 <LCD_ReadRectEx+0x16e>
 8010398:	46b4      	mov	ip, r6
 801039a:	e047      	b.n	801042c <LCD_ReadRectEx+0x134>
 801039c:	46b4      	mov	ip, r6
 801039e:	e022      	b.n	80103e6 <LCD_ReadRectEx+0xee>
 80103a0:	46b4      	mov	ip, r6
 80103a2:	45bc      	cmp	ip, r7
 80103a4:	f300 8094 	bgt.w	80104d0 <LCD_ReadRectEx+0x1d8>
 80103a8:	4661      	mov	r1, ip
 80103aa:	462a      	mov	r2, r5
 80103ac:	f8cd c00c 	str.w	ip, [sp, #12]
 80103b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80103b2:	47c0      	blx	r8
 80103b4:	f1cb 0207 	rsb	r2, fp, #7
 80103b8:	fa00 f202 	lsl.w	r2, r0, r2
 80103bc:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80103c0:	7820      	ldrb	r0, [r4, #0]
 80103c2:	fa41 f10b 	asr.w	r1, r1, fp
 80103c6:	4001      	ands	r1, r0
 80103c8:	430a      	orrs	r2, r1
 80103ca:	7022      	strb	r2, [r4, #0]
 80103cc:	f10b 0301 	add.w	r3, fp, #1
 80103d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80103d4:	f023 0207 	bic.w	r2, r3, #7
 80103d8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80103dc:	fa43 fb02 	asr.w	fp, r3, r2
 80103e0:	f10c 0c01 	add.w	ip, ip, #1
 80103e4:	e7dd      	b.n	80103a2 <LCD_ReadRectEx+0xaa>
 80103e6:	45bc      	cmp	ip, r7
 80103e8:	dc72      	bgt.n	80104d0 <LCD_ReadRectEx+0x1d8>
 80103ea:	4661      	mov	r1, ip
 80103ec:	462a      	mov	r2, r5
 80103ee:	f8cd c00c 	str.w	ip, [sp, #12]
 80103f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80103f4:	47c0      	blx	r8
 80103f6:	ea4f 024b 	mov.w	r2, fp, lsl #1
 80103fa:	f1c2 0106 	rsb	r1, r2, #6
 80103fe:	fa00 f101 	lsl.w	r1, r0, r1
 8010402:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8010406:	fa40 f202 	asr.w	r2, r0, r2
 801040a:	7820      	ldrb	r0, [r4, #0]
 801040c:	4002      	ands	r2, r0
 801040e:	4311      	orrs	r1, r2
 8010410:	7021      	strb	r1, [r4, #0]
 8010412:	f10b 0301 	add.w	r3, fp, #1
 8010416:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801041a:	f023 0203 	bic.w	r2, r3, #3
 801041e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8010422:	fa43 fb02 	asr.w	fp, r3, r2
 8010426:	f10c 0c01 	add.w	ip, ip, #1
 801042a:	e7dc      	b.n	80103e6 <LCD_ReadRectEx+0xee>
 801042c:	45bc      	cmp	ip, r7
 801042e:	dc4f      	bgt.n	80104d0 <LCD_ReadRectEx+0x1d8>
 8010430:	4661      	mov	r1, ip
 8010432:	462a      	mov	r2, r5
 8010434:	f8cd c00c 	str.w	ip, [sp, #12]
 8010438:	9811      	ldr	r0, [sp, #68]	; 0x44
 801043a:	47c0      	blx	r8
 801043c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8010440:	f1c2 0104 	rsb	r1, r2, #4
 8010444:	fa00 f101 	lsl.w	r1, r0, r1
 8010448:	200f      	movs	r0, #15
 801044a:	fa00 f202 	lsl.w	r2, r0, r2
 801044e:	7820      	ldrb	r0, [r4, #0]
 8010450:	4002      	ands	r2, r0
 8010452:	4311      	orrs	r1, r2
 8010454:	7021      	strb	r1, [r4, #0]
 8010456:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801045a:	445c      	add	r4, fp
 801045c:	f10c 0c01 	add.w	ip, ip, #1
 8010460:	f08b 0b01 	eor.w	fp, fp, #1
 8010464:	e7e2      	b.n	801042c <LCD_ReadRectEx+0x134>
 8010466:	4273      	negs	r3, r6
 8010468:	1ba2      	subs	r2, r4, r6
 801046a:	45bc      	cmp	ip, r7
 801046c:	9305      	str	r3, [sp, #20]
 801046e:	4462      	add	r2, ip
 8010470:	dc0e      	bgt.n	8010490 <LCD_ReadRectEx+0x198>
 8010472:	4661      	mov	r1, ip
 8010474:	462a      	mov	r2, r5
 8010476:	f8cd c00c 	str.w	ip, [sp, #12]
 801047a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801047c:	47c0      	blx	r8
 801047e:	9a05      	ldr	r2, [sp, #20]
 8010480:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010484:	4422      	add	r2, r4
 8010486:	f802 000c 	strb.w	r0, [r2, ip]
 801048a:	f10c 0c01 	add.w	ip, ip, #1
 801048e:	e7ea      	b.n	8010466 <LCD_ReadRectEx+0x16e>
 8010490:	4614      	mov	r4, r2
 8010492:	e01d      	b.n	80104d0 <LCD_ReadRectEx+0x1d8>
 8010494:	45bc      	cmp	ip, r7
 8010496:	dc1b      	bgt.n	80104d0 <LCD_ReadRectEx+0x1d8>
 8010498:	4661      	mov	r1, ip
 801049a:	f8cd c00c 	str.w	ip, [sp, #12]
 801049e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80104a0:	462a      	mov	r2, r5
 80104a2:	47c0      	blx	r8
 80104a4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80104a8:	f824 0b02 	strh.w	r0, [r4], #2
 80104ac:	f10c 0c01 	add.w	ip, ip, #1
 80104b0:	e7f0      	b.n	8010494 <LCD_ReadRectEx+0x19c>
 80104b2:	45bc      	cmp	ip, r7
 80104b4:	dc0c      	bgt.n	80104d0 <LCD_ReadRectEx+0x1d8>
 80104b6:	4661      	mov	r1, ip
 80104b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80104bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80104be:	462a      	mov	r2, r5
 80104c0:	47c0      	blx	r8
 80104c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80104c6:	f844 0b04 	str.w	r0, [r4], #4
 80104ca:	f10c 0c01 	add.w	ip, ip, #1
 80104ce:	e7f0      	b.n	80104b2 <LCD_ReadRectEx+0x1ba>
 80104d0:	3501      	adds	r5, #1
 80104d2:	e741      	b.n	8010358 <LCD_ReadRectEx+0x60>
 80104d4:	b007      	add	sp, #28
 80104d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104da:	bf00      	nop
 80104dc:	2000002c 	.word	0x2000002c

080104e0 <GUI_ReadRectEx>:
 80104e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e2:	4d16      	ldr	r5, [pc, #88]	; (801053c <GUI_ReadRectEx+0x5c>)
 80104e4:	9e05      	ldr	r6, [sp, #20]
 80104e6:	682d      	ldr	r5, [r5, #0]
 80104e8:	9c06      	ldr	r4, [sp, #24]
 80104ea:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 80104ee:	42b8      	cmp	r0, r7
 80104f0:	bfb8      	it	lt
 80104f2:	4638      	movlt	r0, r7
 80104f4:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 80104f8:	42ba      	cmp	r2, r7
 80104fa:	bfa8      	it	ge
 80104fc:	463a      	movge	r2, r7
 80104fe:	4282      	cmp	r2, r0
 8010500:	db1b      	blt.n	801053a <GUI_ReadRectEx+0x5a>
 8010502:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8010506:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801050a:	42b9      	cmp	r1, r7
 801050c:	bfb8      	it	lt
 801050e:	4639      	movlt	r1, r7
 8010510:	42ab      	cmp	r3, r5
 8010512:	bfa8      	it	ge
 8010514:	462b      	movge	r3, r5
 8010516:	428b      	cmp	r3, r1
 8010518:	db0f      	blt.n	801053a <GUI_ReadRectEx+0x5a>
 801051a:	68e5      	ldr	r5, [r4, #12]
 801051c:	682d      	ldr	r5, [r5, #0]
 801051e:	f035 0704 	bics.w	r7, r5, #4
 8010522:	d105      	bne.n	8010530 <GUI_ReadRectEx+0x50>
 8010524:	9605      	str	r6, [sp, #20]
 8010526:	9406      	str	r4, [sp, #24]
 8010528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801052c:	f7ff bee4 	b.w	80102f8 <LCD_ReadRectEx>
 8010530:	6825      	ldr	r5, [r4, #0]
 8010532:	2d00      	cmp	r5, #0
 8010534:	d0f6      	beq.n	8010524 <GUI_ReadRectEx+0x44>
 8010536:	462c      	mov	r4, r5
 8010538:	e7ef      	b.n	801051a <GUI_ReadRectEx+0x3a>
 801053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801053c:	2000002c 	.word	0x2000002c

08010540 <LCD_GetNumLayers>:
 8010540:	b510      	push	{r4, lr}
 8010542:	2000      	movs	r0, #0
 8010544:	f7fd ff02 	bl	800e34c <GUI_DEVICE__GetpDriver>
 8010548:	1c04      	adds	r4, r0, #0
 801054a:	f04f 0001 	mov.w	r0, #1
 801054e:	bf18      	it	ne
 8010550:	2401      	movne	r4, #1
 8010552:	f7fd fefb 	bl	800e34c <GUI_DEVICE__GetpDriver>
 8010556:	b100      	cbz	r0, 801055a <LCD_GetNumLayers+0x1a>
 8010558:	3401      	adds	r4, #1
 801055a:	4620      	mov	r0, r4
 801055c:	bd10      	pop	{r4, pc}

0801055e <GUI__sqrt32>:
 801055e:	b510      	push	{r4, lr}
 8010560:	2110      	movs	r1, #16
 8010562:	2300      	movs	r3, #0
 8010564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010568:	189c      	adds	r4, r3, r2
 801056a:	4284      	cmp	r4, r0
 801056c:	bf9c      	itt	ls
 801056e:	18a3      	addls	r3, r4, r2
 8010570:	ebc4 0000 	rsbls	r0, r4, r0
 8010574:	3901      	subs	r1, #1
 8010576:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801057a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801057e:	d1f3      	bne.n	8010568 <GUI__sqrt32+0xa>
 8010580:	4618      	mov	r0, r3
 8010582:	bd10      	pop	{r4, pc}

08010584 <GUI__ExpandPixelIndices>:
 8010584:	2a08      	cmp	r2, #8
 8010586:	b570      	push	{r4, r5, r6, lr}
 8010588:	dd0d      	ble.n	80105a6 <GUI__ExpandPixelIndices+0x22>
 801058a:	2a10      	cmp	r2, #16
 801058c:	dd00      	ble.n	8010590 <GUI__ExpandPixelIndices+0xc>
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	0049      	lsls	r1, r1, #1
 8010592:	4408      	add	r0, r1
 8010594:	1843      	adds	r3, r0, r1
 8010596:	1a41      	subs	r1, r0, r1
 8010598:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
 801059c:	f843 2d04 	str.w	r2, [r3, #-4]!
 80105a0:	4288      	cmp	r0, r1
 80105a2:	d1f9      	bne.n	8010598 <GUI__ExpandPixelIndices+0x14>
 80105a4:	bd70      	pop	{r4, r5, r6, pc}
 80105a6:	3a01      	subs	r2, #1
 80105a8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80105ac:	2a07      	cmp	r2, #7
 80105ae:	d856      	bhi.n	801065e <GUI__ExpandPixelIndices+0xda>
 80105b0:	e8df f002 	tbb	[pc, r2]
 80105b4:	34341b04 	.word	0x34341b04
 80105b8:	4c4c4c4c 	.word	0x4c4c4c4c
 80105bc:	424a      	negs	r2, r1
 80105be:	1e4c      	subs	r4, r1, #1
 80105c0:	f002 0207 	and.w	r2, r2, #7
 80105c4:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 80105c8:	7805      	ldrb	r5, [r0, #0]
 80105ca:	2401      	movs	r4, #1
 80105cc:	4094      	lsls	r4, r2
 80105ce:	402c      	ands	r4, r5
 80105d0:	4114      	asrs	r4, r2
 80105d2:	3201      	adds	r2, #1
 80105d4:	f843 4d04 	str.w	r4, [r3, #-4]!
 80105d8:	3901      	subs	r1, #1
 80105da:	f022 0407 	bic.w	r4, r2, #7
 80105de:	eba0 00e2 	sub.w	r0, r0, r2, asr #3
 80105e2:	fa42 f204 	asr.w	r2, r2, r4
 80105e6:	d1ef      	bne.n	80105c8 <GUI__ExpandPixelIndices+0x44>
 80105e8:	bd70      	pop	{r4, r5, r6, pc}
 80105ea:	424a      	negs	r2, r1
 80105ec:	1e4c      	subs	r4, r1, #1
 80105ee:	f002 0203 	and.w	r2, r2, #3
 80105f2:	eb00 00a4 	add.w	r0, r0, r4, asr #2
 80105f6:	0054      	lsls	r4, r2, #1
 80105f8:	7806      	ldrb	r6, [r0, #0]
 80105fa:	2503      	movs	r5, #3
 80105fc:	40a5      	lsls	r5, r4
 80105fe:	4035      	ands	r5, r6
 8010600:	3201      	adds	r2, #1
 8010602:	fa45 f404 	asr.w	r4, r5, r4
 8010606:	f843 4d04 	str.w	r4, [r3, #-4]!
 801060a:	3901      	subs	r1, #1
 801060c:	f022 0403 	bic.w	r4, r2, #3
 8010610:	eba0 00a2 	sub.w	r0, r0, r2, asr #2
 8010614:	fa42 f204 	asr.w	r2, r2, r4
 8010618:	d1ed      	bne.n	80105f6 <GUI__ExpandPixelIndices+0x72>
 801061a:	bd70      	pop	{r4, r5, r6, pc}
 801061c:	1e4c      	subs	r4, r1, #1
 801061e:	f001 0201 	and.w	r2, r1, #1
 8010622:	eb00 0064 	add.w	r0, r0, r4, asr #1
 8010626:	0094      	lsls	r4, r2, #2
 8010628:	7806      	ldrb	r6, [r0, #0]
 801062a:	250f      	movs	r5, #15
 801062c:	40a5      	lsls	r5, r4
 801062e:	4035      	ands	r5, r6
 8010630:	3201      	adds	r2, #1
 8010632:	fa45 f404 	asr.w	r4, r5, r4
 8010636:	f843 4d04 	str.w	r4, [r3, #-4]!
 801063a:	3901      	subs	r1, #1
 801063c:	f022 0401 	bic.w	r4, r2, #1
 8010640:	eba0 0062 	sub.w	r0, r0, r2, asr #1
 8010644:	fa42 f204 	asr.w	r2, r2, r4
 8010648:	d1ed      	bne.n	8010626 <GUI__ExpandPixelIndices+0xa2>
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	4408      	add	r0, r1
 801064e:	1a41      	subs	r1, r0, r1
 8010650:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 8010654:	f843 2d04 	str.w	r2, [r3, #-4]!
 8010658:	4288      	cmp	r0, r1
 801065a:	d1f9      	bne.n	8010650 <GUI__ExpandPixelIndices+0xcc>
 801065c:	bd70      	pop	{r4, r5, r6, pc}
 801065e:	bd70      	pop	{r4, r5, r6, pc}

08010660 <GUI__ExpandPixelIndicesEx>:
 8010660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010664:	1e0c      	subs	r4, r1, #0
 8010666:	4605      	mov	r5, r0
 8010668:	f340 80b3 	ble.w	80107d2 <GUI__ExpandPixelIndicesEx+0x172>
 801066c:	2a08      	cmp	r2, #8
 801066e:	685f      	ldr	r7, [r3, #4]
 8010670:	dd04      	ble.n	801067c <GUI__ExpandPixelIndicesEx+0x1c>
 8010672:	2a10      	cmp	r2, #16
 8010674:	f340 8098 	ble.w	80107a8 <GUI__ExpandPixelIndicesEx+0x148>
 8010678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801067c:	3a01      	subs	r2, #1
 801067e:	2a07      	cmp	r2, #7
 8010680:	f200 80a7 	bhi.w	80107d2 <GUI__ExpandPixelIndicesEx+0x172>
 8010684:	e8df f002 	tbb	[pc, r2]
 8010688:	58a52d04 	.word	0x58a52d04
 801068c:	83a5a5a5 	.word	0x83a5a5a5
 8010690:	1e66      	subs	r6, r4, #1
 8010692:	10f2      	asrs	r2, r6, #3
 8010694:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8010698:	3b01      	subs	r3, #1
 801069a:	eb05 0802 	add.w	r8, r5, r2
 801069e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80106a2:	f006 0607 	and.w	r6, r6, #7
 80106a6:	f815 a002 	ldrb.w	sl, [r5, r2]
 80106aa:	2580      	movs	r5, #128	; 0x80
 80106ac:	4135      	asrs	r5, r6
 80106ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80106b2:	b2ed      	uxtb	r5, r5
 80106b4:	f1c6 0307 	rsb	r3, r6, #7
 80106b8:	ea0a 0005 	and.w	r0, sl, r5
 80106bc:	4118      	asrs	r0, r3
 80106be:	47b8      	blx	r7
 80106c0:	f849 0904 	str.w	r0, [r9], #-4
 80106c4:	b936      	cbnz	r6, 80106d4 <GUI__ExpandPixelIndicesEx+0x74>
 80106c6:	f898 a000 	ldrb.w	sl, [r8]
 80106ca:	2501      	movs	r5, #1
 80106cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80106d0:	2607      	movs	r6, #7
 80106d2:	e002      	b.n	80106da <GUI__ExpandPixelIndicesEx+0x7a>
 80106d4:	006d      	lsls	r5, r5, #1
 80106d6:	3e01      	subs	r6, #1
 80106d8:	b2ed      	uxtb	r5, r5
 80106da:	3c01      	subs	r4, #1
 80106dc:	d1ea      	bne.n	80106b4 <GUI__ExpandPixelIndicesEx+0x54>
 80106de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106e2:	1e66      	subs	r6, r4, #1
 80106e4:	10b2      	asrs	r2, r6, #2
 80106e6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80106ea:	3b01      	subs	r3, #1
 80106ec:	f006 0603 	and.w	r6, r6, #3
 80106f0:	eb05 0802 	add.w	r8, r5, r2
 80106f4:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80106f8:	f815 a002 	ldrb.w	sl, [r5, r2]
 80106fc:	0073      	lsls	r3, r6, #1
 80106fe:	25c0      	movs	r5, #192	; 0xc0
 8010700:	411d      	asrs	r5, r3
 8010702:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010706:	b2ed      	uxtb	r5, r5
 8010708:	0073      	lsls	r3, r6, #1
 801070a:	f1c3 0306 	rsb	r3, r3, #6
 801070e:	ea0a 0005 	and.w	r0, sl, r5
 8010712:	4118      	asrs	r0, r3
 8010714:	47b8      	blx	r7
 8010716:	f849 0904 	str.w	r0, [r9], #-4
 801071a:	b936      	cbnz	r6, 801072a <GUI__ExpandPixelIndicesEx+0xca>
 801071c:	2503      	movs	r5, #3
 801071e:	f898 a000 	ldrb.w	sl, [r8]
 8010722:	462e      	mov	r6, r5
 8010724:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010728:	e002      	b.n	8010730 <GUI__ExpandPixelIndicesEx+0xd0>
 801072a:	00ad      	lsls	r5, r5, #2
 801072c:	3e01      	subs	r6, #1
 801072e:	b2ed      	uxtb	r5, r5
 8010730:	3c01      	subs	r4, #1
 8010732:	d1e9      	bne.n	8010708 <GUI__ExpandPixelIndicesEx+0xa8>
 8010734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010738:	1e66      	subs	r6, r4, #1
 801073a:	1072      	asrs	r2, r6, #1
 801073c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8010740:	3b01      	subs	r3, #1
 8010742:	f006 0601 	and.w	r6, r6, #1
 8010746:	eb05 0802 	add.w	r8, r5, r2
 801074a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801074e:	f815 a002 	ldrb.w	sl, [r5, r2]
 8010752:	00b3      	lsls	r3, r6, #2
 8010754:	25f0      	movs	r5, #240	; 0xf0
 8010756:	411d      	asrs	r5, r3
 8010758:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801075c:	b2ed      	uxtb	r5, r5
 801075e:	00b3      	lsls	r3, r6, #2
 8010760:	f1c3 0304 	rsb	r3, r3, #4
 8010764:	ea0a 0005 	and.w	r0, sl, r5
 8010768:	4118      	asrs	r0, r3
 801076a:	47b8      	blx	r7
 801076c:	f849 0904 	str.w	r0, [r9], #-4
 8010770:	b936      	cbnz	r6, 8010780 <GUI__ExpandPixelIndicesEx+0x120>
 8010772:	f898 a000 	ldrb.w	sl, [r8]
 8010776:	250f      	movs	r5, #15
 8010778:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801077c:	2601      	movs	r6, #1
 801077e:	e002      	b.n	8010786 <GUI__ExpandPixelIndicesEx+0x126>
 8010780:	012d      	lsls	r5, r5, #4
 8010782:	b2ed      	uxtb	r5, r5
 8010784:	2600      	movs	r6, #0
 8010786:	3c01      	subs	r4, #1
 8010788:	d1e9      	bne.n	801075e <GUI__ExpandPixelIndicesEx+0xfe>
 801078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801078e:	192e      	adds	r6, r5, r4
 8010790:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8010794:	1b34      	subs	r4, r6, r4
 8010796:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 801079a:	47b8      	blx	r7
 801079c:	42a6      	cmp	r6, r4
 801079e:	f845 0d04 	str.w	r0, [r5, #-4]!
 80107a2:	d1f8      	bne.n	8010796 <GUI__ExpandPixelIndicesEx+0x136>
 80107a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a8:	695e      	ldr	r6, [r3, #20]
 80107aa:	b12e      	cbz	r6, 80107b8 <GUI__ExpandPixelIndicesEx+0x158>
 80107ac:	4629      	mov	r1, r5
 80107ae:	4622      	mov	r2, r4
 80107b0:	2302      	movs	r3, #2
 80107b2:	47b0      	blx	r6
 80107b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b8:	0064      	lsls	r4, r4, #1
 80107ba:	4425      	add	r5, r4
 80107bc:	192e      	adds	r6, r5, r4
 80107be:	1b2c      	subs	r4, r5, r4
 80107c0:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 80107c4:	47b8      	blx	r7
 80107c6:	42a5      	cmp	r5, r4
 80107c8:	f846 0d04 	str.w	r0, [r6, #-4]!
 80107cc:	d1f8      	bne.n	80107c0 <GUI__ExpandPixelIndicesEx+0x160>
 80107ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080107d6 <GUI__CompactPixelIndices>:
 80107d6:	2a08      	cmp	r2, #8
 80107d8:	b510      	push	{r4, lr}
 80107da:	dd0e      	ble.n	80107fa <GUI__CompactPixelIndices+0x24>
 80107dc:	2a10      	cmp	r2, #16
 80107de:	dc0a      	bgt.n	80107f6 <GUI__CompactPixelIndices+0x20>
 80107e0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80107e4:	4603      	mov	r3, r0
 80107e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80107ea:	f823 2b02 	strh.w	r2, [r3], #2
 80107ee:	428b      	cmp	r3, r1
 80107f0:	d1f9      	bne.n	80107e6 <GUI__CompactPixelIndices+0x10>
 80107f2:	2001      	movs	r0, #1
 80107f4:	bd10      	pop	{r4, pc}
 80107f6:	2000      	movs	r0, #0
 80107f8:	bd10      	pop	{r4, pc}
 80107fa:	2a02      	cmp	r2, #2
 80107fc:	d06d      	beq.n	80108da <GUI__CompactPixelIndices+0x104>
 80107fe:	2a04      	cmp	r2, #4
 8010800:	d054      	beq.n	80108ac <GUI__CompactPixelIndices+0xd6>
 8010802:	2a01      	cmp	r2, #1
 8010804:	f040 8095 	bne.w	8010932 <GUI__CompactPixelIndices+0x15c>
 8010808:	4604      	mov	r4, r0
 801080a:	6803      	ldr	r3, [r0, #0]
 801080c:	2901      	cmp	r1, #1
 801080e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010812:	b2db      	uxtb	r3, r3
 8010814:	d047      	beq.n	80108a6 <GUI__CompactPixelIndices+0xd0>
 8010816:	6842      	ldr	r2, [r0, #4]
 8010818:	2902      	cmp	r1, #2
 801081a:	f002 0201 	and.w	r2, r2, #1
 801081e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8010822:	d102      	bne.n	801082a <GUI__CompactPixelIndices+0x54>
 8010824:	f100 0208 	add.w	r2, r0, #8
 8010828:	e03e      	b.n	80108a8 <GUI__CompactPixelIndices+0xd2>
 801082a:	6882      	ldr	r2, [r0, #8]
 801082c:	2903      	cmp	r1, #3
 801082e:	f002 0201 	and.w	r2, r2, #1
 8010832:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8010836:	d102      	bne.n	801083e <GUI__CompactPixelIndices+0x68>
 8010838:	f100 020c 	add.w	r2, r0, #12
 801083c:	e034      	b.n	80108a8 <GUI__CompactPixelIndices+0xd2>
 801083e:	68c2      	ldr	r2, [r0, #12]
 8010840:	2904      	cmp	r1, #4
 8010842:	f002 0201 	and.w	r2, r2, #1
 8010846:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801084a:	d102      	bne.n	8010852 <GUI__CompactPixelIndices+0x7c>
 801084c:	f100 0210 	add.w	r2, r0, #16
 8010850:	e02a      	b.n	80108a8 <GUI__CompactPixelIndices+0xd2>
 8010852:	6902      	ldr	r2, [r0, #16]
 8010854:	2905      	cmp	r1, #5
 8010856:	f002 0201 	and.w	r2, r2, #1
 801085a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801085e:	d102      	bne.n	8010866 <GUI__CompactPixelIndices+0x90>
 8010860:	f100 0214 	add.w	r2, r0, #20
 8010864:	e020      	b.n	80108a8 <GUI__CompactPixelIndices+0xd2>
 8010866:	6942      	ldr	r2, [r0, #20]
 8010868:	2906      	cmp	r1, #6
 801086a:	f002 0201 	and.w	r2, r2, #1
 801086e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8010872:	d102      	bne.n	801087a <GUI__CompactPixelIndices+0xa4>
 8010874:	f100 0218 	add.w	r2, r0, #24
 8010878:	e016      	b.n	80108a8 <GUI__CompactPixelIndices+0xd2>
 801087a:	6982      	ldr	r2, [r0, #24]
 801087c:	3907      	subs	r1, #7
 801087e:	f002 0201 	and.w	r2, r2, #1
 8010882:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8010886:	d102      	bne.n	801088e <GUI__CompactPixelIndices+0xb8>
 8010888:	f100 021c 	add.w	r2, r0, #28
 801088c:	e005      	b.n	801089a <GUI__CompactPixelIndices+0xc4>
 801088e:	f100 0220 	add.w	r2, r0, #32
 8010892:	69c0      	ldr	r0, [r0, #28]
 8010894:	f000 0001 	and.w	r0, r0, #1
 8010898:	4303      	orrs	r3, r0
 801089a:	f804 3b01 	strb.w	r3, [r4], #1
 801089e:	2900      	cmp	r1, #0
 80108a0:	d0a7      	beq.n	80107f2 <GUI__CompactPixelIndices+0x1c>
 80108a2:	4610      	mov	r0, r2
 80108a4:	e7b1      	b.n	801080a <GUI__CompactPixelIndices+0x34>
 80108a6:	1d02      	adds	r2, r0, #4
 80108a8:	2100      	movs	r1, #0
 80108aa:	e7f6      	b.n	801089a <GUI__CompactPixelIndices+0xc4>
 80108ac:	4602      	mov	r2, r0
 80108ae:	6803      	ldr	r3, [r0, #0]
 80108b0:	2901      	cmp	r1, #1
 80108b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	d102      	bne.n	80108c0 <GUI__CompactPixelIndices+0xea>
 80108ba:	1d04      	adds	r4, r0, #4
 80108bc:	2100      	movs	r1, #0
 80108be:	e006      	b.n	80108ce <GUI__CompactPixelIndices+0xf8>
 80108c0:	f100 0408 	add.w	r4, r0, #8
 80108c4:	6840      	ldr	r0, [r0, #4]
 80108c6:	f000 000f 	and.w	r0, r0, #15
 80108ca:	4303      	orrs	r3, r0
 80108cc:	3902      	subs	r1, #2
 80108ce:	f802 3b01 	strb.w	r3, [r2], #1
 80108d2:	2900      	cmp	r1, #0
 80108d4:	d08d      	beq.n	80107f2 <GUI__CompactPixelIndices+0x1c>
 80108d6:	4620      	mov	r0, r4
 80108d8:	e7e9      	b.n	80108ae <GUI__CompactPixelIndices+0xd8>
 80108da:	4604      	mov	r4, r0
 80108dc:	6803      	ldr	r3, [r0, #0]
 80108de:	2901      	cmp	r1, #1
 80108e0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	d021      	beq.n	801092c <GUI__CompactPixelIndices+0x156>
 80108e8:	6842      	ldr	r2, [r0, #4]
 80108ea:	2902      	cmp	r1, #2
 80108ec:	f002 0203 	and.w	r2, r2, #3
 80108f0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80108f4:	d102      	bne.n	80108fc <GUI__CompactPixelIndices+0x126>
 80108f6:	f100 0208 	add.w	r2, r0, #8
 80108fa:	e018      	b.n	801092e <GUI__CompactPixelIndices+0x158>
 80108fc:	6882      	ldr	r2, [r0, #8]
 80108fe:	2903      	cmp	r1, #3
 8010900:	f002 0203 	and.w	r2, r2, #3
 8010904:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8010908:	d102      	bne.n	8010910 <GUI__CompactPixelIndices+0x13a>
 801090a:	f100 020c 	add.w	r2, r0, #12
 801090e:	e00e      	b.n	801092e <GUI__CompactPixelIndices+0x158>
 8010910:	f100 0210 	add.w	r2, r0, #16
 8010914:	68c0      	ldr	r0, [r0, #12]
 8010916:	f000 0003 	and.w	r0, r0, #3
 801091a:	4303      	orrs	r3, r0
 801091c:	3904      	subs	r1, #4
 801091e:	f804 3b01 	strb.w	r3, [r4], #1
 8010922:	2900      	cmp	r1, #0
 8010924:	f43f af65 	beq.w	80107f2 <GUI__CompactPixelIndices+0x1c>
 8010928:	4610      	mov	r0, r2
 801092a:	e7d7      	b.n	80108dc <GUI__CompactPixelIndices+0x106>
 801092c:	1d02      	adds	r2, r0, #4
 801092e:	2100      	movs	r1, #0
 8010930:	e7f5      	b.n	801091e <GUI__CompactPixelIndices+0x148>
 8010932:	2300      	movs	r3, #0
 8010934:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8010938:	54c2      	strb	r2, [r0, r3]
 801093a:	3301      	adds	r3, #1
 801093c:	428b      	cmp	r3, r1
 801093e:	d1f9      	bne.n	8010934 <GUI__CompactPixelIndices+0x15e>
 8010940:	e757      	b.n	80107f2 <GUI__CompactPixelIndices+0x1c>

08010942 <GUI__ConvertColor2Index>:
 8010942:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010946:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801094a:	681e      	ldr	r6, [r3, #0]
 801094c:	f1b8 0f00 	cmp.w	r8, #0
 8010950:	bf08      	it	eq
 8010952:	4680      	moveq	r8, r0
 8010954:	2a08      	cmp	r2, #8
 8010956:	4604      	mov	r4, r0
 8010958:	460d      	mov	r5, r1
 801095a:	dd05      	ble.n	8010968 <GUI__ConvertColor2Index+0x26>
 801095c:	2a10      	cmp	r2, #16
 801095e:	f340 80b6 	ble.w	8010ace <GUI__ConvertColor2Index+0x18c>
 8010962:	2000      	movs	r0, #0
 8010964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010968:	3a01      	subs	r2, #1
 801096a:	2a07      	cmp	r2, #7
 801096c:	f200 80a4 	bhi.w	8010ab8 <GUI__ConvertColor2Index+0x176>
 8010970:	e8df f002 	tbb	[pc, r2]
 8010974:	87a26111 	.word	0x87a26111
 8010978:	92a2a2a2 	.word	0x92a2a2a2
 801097c:	69e0      	ldr	r0, [r4, #28]
 801097e:	47b0      	blx	r6
 8010980:	4338      	orrs	r0, r7
 8010982:	f104 0920 	add.w	r9, r4, #32
 8010986:	b2c7      	uxtb	r7, r0
 8010988:	3d08      	subs	r5, #8
 801098a:	f808 7b01 	strb.w	r7, [r8], #1
 801098e:	2d00      	cmp	r5, #0
 8010990:	f000 8092 	beq.w	8010ab8 <GUI__ConvertColor2Index+0x176>
 8010994:	464c      	mov	r4, r9
 8010996:	6820      	ldr	r0, [r4, #0]
 8010998:	47b0      	blx	r6
 801099a:	2d01      	cmp	r5, #1
 801099c:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 80109a0:	b2c7      	uxtb	r7, r0
 80109a2:	f000 808c 	beq.w	8010abe <GUI__ConvertColor2Index+0x17c>
 80109a6:	6860      	ldr	r0, [r4, #4]
 80109a8:	47b0      	blx	r6
 80109aa:	2d02      	cmp	r5, #2
 80109ac:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 80109b0:	b2c7      	uxtb	r7, r0
 80109b2:	d102      	bne.n	80109ba <GUI__ConvertColor2Index+0x78>
 80109b4:	f104 0908 	add.w	r9, r4, #8
 80109b8:	e083      	b.n	8010ac2 <GUI__ConvertColor2Index+0x180>
 80109ba:	68a0      	ldr	r0, [r4, #8]
 80109bc:	47b0      	blx	r6
 80109be:	2d03      	cmp	r5, #3
 80109c0:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 80109c4:	b2c7      	uxtb	r7, r0
 80109c6:	d102      	bne.n	80109ce <GUI__ConvertColor2Index+0x8c>
 80109c8:	f104 090c 	add.w	r9, r4, #12
 80109cc:	e079      	b.n	8010ac2 <GUI__ConvertColor2Index+0x180>
 80109ce:	68e0      	ldr	r0, [r4, #12]
 80109d0:	47b0      	blx	r6
 80109d2:	2d04      	cmp	r5, #4
 80109d4:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 80109d8:	b2c7      	uxtb	r7, r0
 80109da:	d102      	bne.n	80109e2 <GUI__ConvertColor2Index+0xa0>
 80109dc:	f104 0910 	add.w	r9, r4, #16
 80109e0:	e06f      	b.n	8010ac2 <GUI__ConvertColor2Index+0x180>
 80109e2:	6920      	ldr	r0, [r4, #16]
 80109e4:	47b0      	blx	r6
 80109e6:	2d05      	cmp	r5, #5
 80109e8:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 80109ec:	b2c7      	uxtb	r7, r0
 80109ee:	d102      	bne.n	80109f6 <GUI__ConvertColor2Index+0xb4>
 80109f0:	f104 0914 	add.w	r9, r4, #20
 80109f4:	e065      	b.n	8010ac2 <GUI__ConvertColor2Index+0x180>
 80109f6:	6960      	ldr	r0, [r4, #20]
 80109f8:	47b0      	blx	r6
 80109fa:	2d06      	cmp	r5, #6
 80109fc:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8010a00:	b2c7      	uxtb	r7, r0
 8010a02:	d102      	bne.n	8010a0a <GUI__ConvertColor2Index+0xc8>
 8010a04:	f104 0918 	add.w	r9, r4, #24
 8010a08:	e05b      	b.n	8010ac2 <GUI__ConvertColor2Index+0x180>
 8010a0a:	69a0      	ldr	r0, [r4, #24]
 8010a0c:	47b0      	blx	r6
 8010a0e:	2d07      	cmp	r5, #7
 8010a10:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8010a14:	b2c7      	uxtb	r7, r0
 8010a16:	d1b1      	bne.n	801097c <GUI__ConvertColor2Index+0x3a>
 8010a18:	f104 091c 	add.w	r9, r4, #28
 8010a1c:	e051      	b.n	8010ac2 <GUI__ConvertColor2Index+0x180>
 8010a1e:	68e0      	ldr	r0, [r4, #12]
 8010a20:	47b0      	blx	r6
 8010a22:	4338      	orrs	r0, r7
 8010a24:	f104 0910 	add.w	r9, r4, #16
 8010a28:	b2c7      	uxtb	r7, r0
 8010a2a:	3d04      	subs	r5, #4
 8010a2c:	f808 7b01 	strb.w	r7, [r8], #1
 8010a30:	2d00      	cmp	r5, #0
 8010a32:	d041      	beq.n	8010ab8 <GUI__ConvertColor2Index+0x176>
 8010a34:	464c      	mov	r4, r9
 8010a36:	6820      	ldr	r0, [r4, #0]
 8010a38:	47b0      	blx	r6
 8010a3a:	2d01      	cmp	r5, #1
 8010a3c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8010a40:	b2c7      	uxtb	r7, r0
 8010a42:	d040      	beq.n	8010ac6 <GUI__ConvertColor2Index+0x184>
 8010a44:	6860      	ldr	r0, [r4, #4]
 8010a46:	47b0      	blx	r6
 8010a48:	2d02      	cmp	r5, #2
 8010a4a:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8010a4e:	b2c7      	uxtb	r7, r0
 8010a50:	d102      	bne.n	8010a58 <GUI__ConvertColor2Index+0x116>
 8010a52:	f104 0908 	add.w	r9, r4, #8
 8010a56:	e038      	b.n	8010aca <GUI__ConvertColor2Index+0x188>
 8010a58:	68a0      	ldr	r0, [r4, #8]
 8010a5a:	47b0      	blx	r6
 8010a5c:	2d03      	cmp	r5, #3
 8010a5e:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8010a62:	b2c7      	uxtb	r7, r0
 8010a64:	d1db      	bne.n	8010a1e <GUI__ConvertColor2Index+0xdc>
 8010a66:	f104 090c 	add.w	r9, r4, #12
 8010a6a:	e02e      	b.n	8010aca <GUI__ConvertColor2Index+0x188>
 8010a6c:	6860      	ldr	r0, [r4, #4]
 8010a6e:	47b0      	blx	r6
 8010a70:	4338      	orrs	r0, r7
 8010a72:	f104 0908 	add.w	r9, r4, #8
 8010a76:	b2c7      	uxtb	r7, r0
 8010a78:	3d02      	subs	r5, #2
 8010a7a:	f808 7b01 	strb.w	r7, [r8], #1
 8010a7e:	b1dd      	cbz	r5, 8010ab8 <GUI__ConvertColor2Index+0x176>
 8010a80:	464c      	mov	r4, r9
 8010a82:	6820      	ldr	r0, [r4, #0]
 8010a84:	47b0      	blx	r6
 8010a86:	2d01      	cmp	r5, #1
 8010a88:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010a8c:	b2c7      	uxtb	r7, r0
 8010a8e:	d1ed      	bne.n	8010a6c <GUI__ConvertColor2Index+0x12a>
 8010a90:	f104 0904 	add.w	r9, r4, #4
 8010a94:	2500      	movs	r5, #0
 8010a96:	e7f0      	b.n	8010a7a <GUI__ConvertColor2Index+0x138>
 8010a98:	691f      	ldr	r7, [r3, #16]
 8010a9a:	b12f      	cbz	r7, 8010aa8 <GUI__ConvertColor2Index+0x166>
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	4641      	mov	r1, r8
 8010aa0:	462a      	mov	r2, r5
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	47b8      	blx	r7
 8010aa6:	e007      	b.n	8010ab8 <GUI__ConvertColor2Index+0x176>
 8010aa8:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8010aac:	47b0      	blx	r6
 8010aae:	f808 0007 	strb.w	r0, [r8, r7]
 8010ab2:	3701      	adds	r7, #1
 8010ab4:	42bd      	cmp	r5, r7
 8010ab6:	d1f7      	bne.n	8010aa8 <GUI__ConvertColor2Index+0x166>
 8010ab8:	2001      	movs	r0, #1
 8010aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010abe:	f104 0904 	add.w	r9, r4, #4
 8010ac2:	2500      	movs	r5, #0
 8010ac4:	e761      	b.n	801098a <GUI__ConvertColor2Index+0x48>
 8010ac6:	f104 0904 	add.w	r9, r4, #4
 8010aca:	2500      	movs	r5, #0
 8010acc:	e7ae      	b.n	8010a2c <GUI__ConvertColor2Index+0xea>
 8010ace:	691f      	ldr	r7, [r3, #16]
 8010ad0:	b11f      	cbz	r7, 8010ada <GUI__ConvertColor2Index+0x198>
 8010ad2:	4641      	mov	r1, r8
 8010ad4:	462a      	mov	r2, r5
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	e7e4      	b.n	8010aa4 <GUI__ConvertColor2Index+0x162>
 8010ada:	f854 0b04 	ldr.w	r0, [r4], #4
 8010ade:	47b0      	blx	r6
 8010ae0:	3d01      	subs	r5, #1
 8010ae2:	f828 0b02 	strh.w	r0, [r8], #2
 8010ae6:	d1f8      	bne.n	8010ada <GUI__ConvertColor2Index+0x198>
 8010ae8:	e7e6      	b.n	8010ab8 <GUI__ConvertColor2Index+0x176>

08010aea <GUI__CompactPixelIndicesEx>:
 8010aea:	b513      	push	{r0, r1, r4, lr}
 8010aec:	2400      	movs	r4, #0
 8010aee:	9400      	str	r4, [sp, #0]
 8010af0:	f7ff ff27 	bl	8010942 <GUI__ConvertColor2Index>
 8010af4:	b002      	add	sp, #8
 8010af6:	bd10      	pop	{r4, pc}

08010af8 <_GetCharCode>:
 8010af8:	7800      	ldrb	r0, [r0, #0]
 8010afa:	4770      	bx	lr

08010afc <_GetCharSize>:
 8010afc:	2001      	movs	r0, #1
 8010afe:	4770      	bx	lr

08010b00 <_CalcSizeOfChar>:
 8010b00:	2001      	movs	r0, #1
 8010b02:	4770      	bx	lr

08010b04 <_Encode>:
 8010b04:	7001      	strb	r1, [r0, #0]
 8010b06:	2001      	movs	r0, #1
 8010b08:	4770      	bx	lr
	...

08010b0c <GUI_UC__GetCharCodeInc>:
 8010b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0e:	4e08      	ldr	r6, [pc, #32]	; (8010b30 <GUI_UC__GetCharCodeInc+0x24>)
 8010b10:	6804      	ldr	r4, [r0, #0]
 8010b12:	6833      	ldr	r3, [r6, #0]
 8010b14:	4605      	mov	r5, r0
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4620      	mov	r0, r4
 8010b1a:	4798      	blx	r3
 8010b1c:	6833      	ldr	r3, [r6, #0]
 8010b1e:	4607      	mov	r7, r0
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	4620      	mov	r0, r4
 8010b24:	4798      	blx	r3
 8010b26:	4420      	add	r0, r4
 8010b28:	6028      	str	r0, [r5, #0]
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20022fc4 	.word	0x20022fc4

08010b34 <GUI_UC__NumChars2NumBytes>:
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	4604      	mov	r4, r0
 8010b38:	460e      	mov	r6, r1
 8010b3a:	2500      	movs	r5, #0
 8010b3c:	b146      	cbz	r6, 8010b50 <GUI_UC__NumChars2NumBytes+0x1c>
 8010b3e:	4b05      	ldr	r3, [pc, #20]	; (8010b54 <GUI_UC__NumChars2NumBytes+0x20>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4620      	mov	r0, r4
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	4798      	blx	r3
 8010b48:	3e01      	subs	r6, #1
 8010b4a:	4404      	add	r4, r0
 8010b4c:	4405      	add	r5, r0
 8010b4e:	e7f5      	b.n	8010b3c <GUI_UC__NumChars2NumBytes+0x8>
 8010b50:	4628      	mov	r0, r5
 8010b52:	bd70      	pop	{r4, r5, r6, pc}
 8010b54:	20022fc4 	.word	0x20022fc4

08010b58 <GUI_SetOrg>:
 8010b58:	460a      	mov	r2, r1
 8010b5a:	4908      	ldr	r1, [pc, #32]	; (8010b7c <GUI_SetOrg+0x24>)
 8010b5c:	b510      	push	{r4, lr}
 8010b5e:	8008      	strh	r0, [r1, #0]
 8010b60:	4907      	ldr	r1, [pc, #28]	; (8010b80 <GUI_SetOrg+0x28>)
 8010b62:	800a      	strh	r2, [r1, #0]
 8010b64:	4907      	ldr	r1, [pc, #28]	; (8010b84 <GUI_SetOrg+0x2c>)
 8010b66:	6809      	ldr	r1, [r1, #0]
 8010b68:	4603      	mov	r3, r0
 8010b6a:	7c48      	ldrb	r0, [r1, #17]
 8010b6c:	4906      	ldr	r1, [pc, #24]	; (8010b88 <GUI_SetOrg+0x30>)
 8010b6e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8010b72:	68c1      	ldr	r1, [r0, #12]
 8010b74:	6a0c      	ldr	r4, [r1, #32]
 8010b76:	4619      	mov	r1, r3
 8010b78:	47a0      	blx	r4
 8010b7a:	bd10      	pop	{r4, pc}
 8010b7c:	20022fb4 	.word	0x20022fb4
 8010b80:	20022fa8 	.word	0x20022fa8
 8010b84:	2000002c 	.word	0x2000002c
 8010b88:	20022fcc 	.word	0x20022fcc

08010b8c <GUI_GetFontSizeY>:
 8010b8c:	f000 b9ea 	b.w	8010f64 <GUI__GetFontSizeY>

08010b90 <_Add>:
 8010b90:	4a0d      	ldr	r2, [pc, #52]	; (8010bc8 <_Add+0x38>)
 8010b92:	6813      	ldr	r3, [r2, #0]
 8010b94:	2b0b      	cmp	r3, #11
 8010b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b98:	4615      	mov	r5, r2
 8010b9a:	dc14      	bgt.n	8010bc6 <_Add+0x36>
 8010b9c:	4c0b      	ldr	r4, [pc, #44]	; (8010bcc <_Add+0x3c>)
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8010ba4:	4626      	mov	r6, r4
 8010ba6:	b152      	cbz	r2, 8010bbe <_Add+0x2e>
 8010ba8:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 8010bac:	fa0f fc84 	sxth.w	ip, r4
 8010bb0:	4584      	cmp	ip, r0
 8010bb2:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 8010bb6:	db02      	blt.n	8010bbe <_Add+0x2e>
 8010bb8:	804c      	strh	r4, [r1, #2]
 8010bba:	463a      	mov	r2, r7
 8010bbc:	e7f3      	b.n	8010ba6 <_Add+0x16>
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 8010bc4:	602b      	str	r3, [r5, #0]
 8010bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bc8:	20022c24 	.word	0x20022c24
 8010bcc:	20022c28 	.word	0x20022c28

08010bd0 <GL_FillPolygon>:
 8010bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8010d90 <GL_FillPolygon+0x1c0>
 8010bd8:	9101      	str	r1, [sp, #4]
 8010bda:	4692      	mov	sl, r2
 8010bdc:	4606      	mov	r6, r0
 8010bde:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8010be2:	2200      	movs	r2, #0
 8010be4:	9901      	ldr	r1, [sp, #4]
 8010be6:	428a      	cmp	r2, r1
 8010be8:	da0b      	bge.n	8010c02 <GL_FillPolygon+0x32>
 8010bea:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8010bee:	3201      	adds	r2, #1
 8010bf0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8010bf4:	428c      	cmp	r4, r1
 8010bf6:	bfa8      	it	ge
 8010bf8:	460c      	movge	r4, r1
 8010bfa:	4589      	cmp	r9, r1
 8010bfc:	bfb8      	it	lt
 8010bfe:	4689      	movlt	r9, r1
 8010c00:	e7f0      	b.n	8010be4 <GL_FillPolygon+0x14>
 8010c02:	4960      	ldr	r1, [pc, #384]	; (8010d84 <GL_FillPolygon+0x1b4>)
 8010c04:	680a      	ldr	r2, [r1, #0]
 8010c06:	6952      	ldr	r2, [r2, #20]
 8010c08:	468b      	mov	fp, r1
 8010c0a:	b15a      	cbz	r2, 8010c24 <GL_FillPolygon+0x54>
 8010c0c:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8010c10:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010c14:	1ac9      	subs	r1, r1, r3
 8010c16:	1ad2      	subs	r2, r2, r3
 8010c18:	4589      	cmp	r9, r1
 8010c1a:	bfa8      	it	ge
 8010c1c:	4689      	movge	r9, r1
 8010c1e:	4294      	cmp	r4, r2
 8010c20:	bfb8      	it	lt
 8010c22:	4614      	movlt	r4, r2
 8010c24:	eb04 0803 	add.w	r8, r4, r3
 8010c28:	454c      	cmp	r4, r9
 8010c2a:	f300 80a7 	bgt.w	8010d7c <GL_FillPolygon+0x1ac>
 8010c2e:	4b56      	ldr	r3, [pc, #344]	; (8010d88 <GL_FillPolygon+0x1b8>)
 8010c30:	2700      	movs	r7, #0
 8010c32:	601f      	str	r7, [r3, #0]
 8010c34:	4635      	mov	r5, r6
 8010c36:	9901      	ldr	r1, [sp, #4]
 8010c38:	428f      	cmp	r7, r1
 8010c3a:	da55      	bge.n	8010ce8 <GL_FillPolygon+0x118>
 8010c3c:	9b01      	ldr	r3, [sp, #4]
 8010c3e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010c42:	1e59      	subs	r1, r3, #1
 8010c44:	428f      	cmp	r7, r1
 8010c46:	bfb4      	ite	lt
 8010c48:	f107 0c01 	addlt.w	ip, r7, #1
 8010c4c:	f04f 0c00 	movge.w	ip, #0
 8010c50:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8010c54:	eb06 030c 	add.w	r3, r6, ip
 8010c58:	42a2      	cmp	r2, r4
 8010c5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c5e:	d136      	bne.n	8010cce <GL_FillPolygon+0xfe>
 8010c60:	42a3      	cmp	r3, r4
 8010c62:	d002      	beq.n	8010c6a <GL_FillPolygon+0x9a>
 8010c64:	463a      	mov	r2, r7
 8010c66:	2000      	movs	r0, #0
 8010c68:	e01b      	b.n	8010ca2 <GL_FillPolygon+0xd2>
 8010c6a:	f9b5 e000 	ldrsh.w	lr, [r5]
 8010c6e:	f936 200c 	ldrsh.w	r2, [r6, ip]
 8010c72:	f8db 3000 	ldr.w	r3, [fp]
 8010c76:	44d6      	add	lr, sl
 8010c78:	4452      	add	r2, sl
 8010c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c7c:	4596      	cmp	lr, r2
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	da02      	bge.n	8010c88 <GL_FillPolygon+0xb8>
 8010c82:	4670      	mov	r0, lr
 8010c84:	4641      	mov	r1, r8
 8010c86:	e020      	b.n	8010cca <GL_FillPolygon+0xfa>
 8010c88:	4610      	mov	r0, r2
 8010c8a:	4641      	mov	r1, r8
 8010c8c:	4672      	mov	r2, lr
 8010c8e:	e01c      	b.n	8010cca <GL_FillPolygon+0xfa>
 8010c90:	b152      	cbz	r2, 8010ca8 <GL_FillPolygon+0xd8>
 8010c92:	3a01      	subs	r2, #1
 8010c94:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 8010c98:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 8010c9c:	45a4      	cmp	ip, r4
 8010c9e:	d105      	bne.n	8010cac <GL_FillPolygon+0xdc>
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	4288      	cmp	r0, r1
 8010ca4:	dbf4      	blt.n	8010c90 <GL_FillPolygon+0xc0>
 8010ca6:	e01c      	b.n	8010ce2 <GL_FillPolygon+0x112>
 8010ca8:	460a      	mov	r2, r1
 8010caa:	e7f3      	b.n	8010c94 <GL_FillPolygon+0xc4>
 8010cac:	ebc4 0c0c 	rsb	ip, r4, ip
 8010cb0:	1b1b      	subs	r3, r3, r4
 8010cb2:	ea9c 0f03 	teq	ip, r3
 8010cb6:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010cba:	d44d      	bmi.n	8010d58 <GL_FillPolygon+0x188>
 8010cbc:	f8db 3000 	ldr.w	r3, [fp]
 8010cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cc2:	4450      	add	r0, sl
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4641      	mov	r1, r8
 8010cc8:	4602      	mov	r2, r0
 8010cca:	4798      	blx	r3
 8010ccc:	e009      	b.n	8010ce2 <GL_FillPolygon+0x112>
 8010cce:	42a3      	cmp	r3, r4
 8010cd0:	d007      	beq.n	8010ce2 <GL_FillPolygon+0x112>
 8010cd2:	db44      	blt.n	8010d5e <GL_FillPolygon+0x18e>
 8010cd4:	42a2      	cmp	r2, r4
 8010cd6:	dd27      	ble.n	8010d28 <GL_FillPolygon+0x158>
 8010cd8:	42a3      	cmp	r3, r4
 8010cda:	dd42      	ble.n	8010d62 <GL_FillPolygon+0x192>
 8010cdc:	e001      	b.n	8010ce2 <GL_FillPolygon+0x112>
 8010cde:	42a3      	cmp	r3, r4
 8010ce0:	dd49      	ble.n	8010d76 <GL_FillPolygon+0x1a6>
 8010ce2:	3701      	adds	r7, #1
 8010ce4:	3504      	adds	r5, #4
 8010ce6:	e7a6      	b.n	8010c36 <GL_FillPolygon+0x66>
 8010ce8:	2500      	movs	r5, #0
 8010cea:	4628      	mov	r0, r5
 8010cec:	462f      	mov	r7, r5
 8010cee:	4b26      	ldr	r3, [pc, #152]	; (8010d88 <GL_FillPolygon+0x1b8>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	429f      	cmp	r7, r3
 8010cf4:	da14      	bge.n	8010d20 <GL_FillPolygon+0x150>
 8010cf6:	4b25      	ldr	r3, [pc, #148]	; (8010d8c <GL_FillPolygon+0x1bc>)
 8010cf8:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 8010cfc:	b15d      	cbz	r5, 8010d16 <GL_FillPolygon+0x146>
 8010cfe:	f8db 2000 	ldr.w	r2, [fp]
 8010d02:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010d04:	4450      	add	r0, sl
 8010d06:	f8d2 c000 	ldr.w	ip, [r2]
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	eb0a 0203 	add.w	r2, sl, r3
 8010d10:	4641      	mov	r1, r8
 8010d12:	47e0      	blx	ip
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	f085 0501 	eor.w	r5, r5, #1
 8010d1a:	3701      	adds	r7, #1
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	e7e6      	b.n	8010cee <GL_FillPolygon+0x11e>
 8010d20:	3401      	adds	r4, #1
 8010d22:	f108 0801 	add.w	r8, r8, #1
 8010d26:	e77f      	b.n	8010c28 <GL_FillPolygon+0x58>
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	dcd8      	bgt.n	8010cde <GL_FillPolygon+0x10e>
 8010d2c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010d30:	f936 000c 	ldrsh.w	r0, [r6, ip]
 8010d34:	ebc2 0e04 	rsb	lr, r2, r4
 8010d38:	1a40      	subs	r0, r0, r1
 8010d3a:	fb0e f000 	mul.w	r0, lr, r0
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	ebc2 0303 	rsb	r3, r2, r3
 8010d44:	bfdb      	ittet	le
 8010d46:	105a      	asrle	r2, r3, #1
 8010d48:	f1c2 0201 	rsble	r2, r2, #1
 8010d4c:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 8010d50:	1880      	addle	r0, r0, r2
 8010d52:	fb90 f0f3 	sdiv	r0, r0, r3
 8010d56:	4408      	add	r0, r1
 8010d58:	f7ff ff1a 	bl	8010b90 <_Add>
 8010d5c:	e7c1      	b.n	8010ce2 <GL_FillPolygon+0x112>
 8010d5e:	42a2      	cmp	r2, r4
 8010d60:	dbbf      	blt.n	8010ce2 <GL_FillPolygon+0x112>
 8010d62:	429a      	cmp	r2, r3
 8010d64:	ddbd      	ble.n	8010ce2 <GL_FillPolygon+0x112>
 8010d66:	4696      	mov	lr, r2
 8010d68:	f936 100c 	ldrsh.w	r1, [r6, ip]
 8010d6c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010d70:	461a      	mov	r2, r3
 8010d72:	4673      	mov	r3, lr
 8010d74:	e7de      	b.n	8010d34 <GL_FillPolygon+0x164>
 8010d76:	42a2      	cmp	r2, r4
 8010d78:	daf5      	bge.n	8010d66 <GL_FillPolygon+0x196>
 8010d7a:	e7b2      	b.n	8010ce2 <GL_FillPolygon+0x112>
 8010d7c:	b003      	add	sp, #12
 8010d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d82:	bf00      	nop
 8010d84:	2000002c 	.word	0x2000002c
 8010d88:	20022c24 	.word	0x20022c24
 8010d8c:	20022c28 	.word	0x20022c28
 8010d90:	ffffc001 	.word	0xffffc001

08010d94 <GL_DrawPoint>:
 8010d94:	b508      	push	{r3, lr}
 8010d96:	4b08      	ldr	r3, [pc, #32]	; (8010db8 <GL_DrawPoint+0x24>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	7e1a      	ldrb	r2, [r3, #24]
 8010d9c:	2a01      	cmp	r2, #1
 8010d9e:	d103      	bne.n	8010da8 <GL_DrawPoint+0x14>
 8010da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	4798      	blx	r3
 8010da6:	bd08      	pop	{r3, pc}
 8010da8:	2302      	movs	r3, #2
 8010daa:	3a01      	subs	r2, #1
 8010dac:	fb92 f2f3 	sdiv	r2, r2, r3
 8010db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010db4:	f000 b836 	b.w	8010e24 <GL_FillCircle>
 8010db8:	2000002c 	.word	0x2000002c

08010dbc <GUI_CURSOR_SetPositionEx>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	4606      	mov	r6, r0
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	4614      	mov	r4, r2
 8010dc6:	f7fc fb3b 	bl	800d440 <GUI_GetCursorLayer>
 8010dca:	4f15      	ldr	r7, [pc, #84]	; (8010e20 <GUI_CURSOR_SetPositionEx+0x64>)
 8010dcc:	2314      	movs	r3, #20
 8010dce:	b148      	cbz	r0, 8010de4 <GUI_CURSOR_SetPositionEx+0x28>
 8010dd0:	435c      	muls	r4, r3
 8010dd2:	593b      	ldr	r3, [r7, r4]
 8010dd4:	6859      	ldr	r1, [r3, #4]
 8010dd6:	689a      	ldr	r2, [r3, #8]
 8010dd8:	1a71      	subs	r1, r6, r1
 8010dda:	1aaa      	subs	r2, r5, r2
 8010ddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010de0:	f7fc bb58 	b.w	800d494 <GUI_SetLayerPosEx>
 8010de4:	fb03 7304 	mla	r3, r3, r4, r7
 8010de8:	f103 0208 	add.w	r2, r3, #8
 8010dec:	689b      	ldr	r3, [r3, #8]
 8010dee:	42b3      	cmp	r3, r6
 8010df0:	d102      	bne.n	8010df8 <GUI_CURSOR_SetPositionEx+0x3c>
 8010df2:	6853      	ldr	r3, [r2, #4]
 8010df4:	42ab      	cmp	r3, r5
 8010df6:	d011      	beq.n	8010e1c <GUI_CURSOR_SetPositionEx+0x60>
 8010df8:	2314      	movs	r3, #20
 8010dfa:	4363      	muls	r3, r4
 8010dfc:	18fa      	adds	r2, r7, r3
 8010dfe:	6910      	ldr	r0, [r2, #16]
 8010e00:	b138      	cbz	r0, 8010e12 <GUI_CURSOR_SetPositionEx+0x56>
 8010e02:	4a07      	ldr	r2, [pc, #28]	; (8010e20 <GUI_CURSOR_SetPositionEx+0x64>)
 8010e04:	58d3      	ldr	r3, [r2, r3]
 8010e06:	6859      	ldr	r1, [r3, #4]
 8010e08:	689a      	ldr	r2, [r3, #8]
 8010e0a:	1a71      	subs	r1, r6, r1
 8010e0c:	1aaa      	subs	r2, r5, r2
 8010e0e:	f000 fa09 	bl	8011224 <GUI_SPRITE_SetPosition>
 8010e12:	2314      	movs	r3, #20
 8010e14:	fb03 7404 	mla	r4, r3, r4, r7
 8010e18:	60a6      	str	r6, [r4, #8]
 8010e1a:	60e5      	str	r5, [r4, #12]
 8010e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20022c40 	.word	0x20022c40

08010e24 <GL_FillCircle>:
 8010e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e28:	f240 29c3 	movw	r9, #707	; 0x2c3
 8010e2c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8010ee4 <GL_FillCircle+0xc0>
 8010e30:	fb09 f902 	mul.w	r9, r9, r2
 8010e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010e38:	fb99 f9f3 	sdiv	r9, r9, r3
 8010e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8010e40:	f04f 0b02 	mov.w	fp, #2
 8010e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e46:	4606      	mov	r6, r0
 8010e48:	fb92 fbfb 	sdiv	fp, r2, fp
 8010e4c:	1a80      	subs	r0, r0, r2
 8010e4e:	4614      	mov	r4, r2
 8010e50:	fb02 bb02 	mla	fp, r2, r2, fp
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	18b2      	adds	r2, r6, r2
 8010e58:	460f      	mov	r7, r1
 8010e5a:	4798      	blx	r3
 8010e5c:	f109 0901 	add.w	r9, r9, #1
 8010e60:	2501      	movs	r5, #1
 8010e62:	454d      	cmp	r5, r9
 8010e64:	dc3a      	bgt.n	8010edc <GL_FillCircle+0xb8>
 8010e66:	fb04 f304 	mul.w	r3, r4, r4
 8010e6a:	fb05 3305 	mla	r3, r5, r5, r3
 8010e6e:	455b      	cmp	r3, fp
 8010e70:	dd1b      	ble.n	8010eaa <GL_FillCircle+0x86>
 8010e72:	454c      	cmp	r4, r9
 8010e74:	dd18      	ble.n	8010ea8 <GL_FillCircle+0x84>
 8010e76:	f8d8 2000 	ldr.w	r2, [r8]
 8010e7a:	1c73      	adds	r3, r6, #1
 8010e7c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010e7e:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
 8010e82:	1b5b      	subs	r3, r3, r5
 8010e84:	44aa      	add	sl, r5
 8010e86:	f8d2 c000 	ldr.w	ip, [r2]
 8010e8a:	9301      	str	r3, [sp, #4]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	1939      	adds	r1, r7, r4
 8010e90:	4652      	mov	r2, sl
 8010e92:	47e0      	blx	ip
 8010e94:	f8d8 2000 	ldr.w	r2, [r8]
 8010e98:	9b01      	ldr	r3, [sp, #4]
 8010e9a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f8d2 c000 	ldr.w	ip, [r2]
 8010ea2:	1b39      	subs	r1, r7, r4
 8010ea4:	4652      	mov	r2, sl
 8010ea6:	47e0      	blx	ip
 8010ea8:	3c01      	subs	r4, #1
 8010eaa:	f8d8 2000 	ldr.w	r2, [r8]
 8010eae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010eb0:	1b33      	subs	r3, r6, r4
 8010eb2:	eb06 0a04 	add.w	sl, r6, r4
 8010eb6:	f8d2 c000 	ldr.w	ip, [r2]
 8010eba:	9301      	str	r3, [sp, #4]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	19e9      	adds	r1, r5, r7
 8010ec0:	4652      	mov	r2, sl
 8010ec2:	47e0      	blx	ip
 8010ec4:	f8d8 2000 	ldr.w	r2, [r8]
 8010ec8:	9b01      	ldr	r3, [sp, #4]
 8010eca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010ecc:	1b79      	subs	r1, r7, r5
 8010ece:	f8d2 c000 	ldr.w	ip, [r2]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	4652      	mov	r2, sl
 8010ed6:	47e0      	blx	ip
 8010ed8:	3501      	adds	r5, #1
 8010eda:	e7c2      	b.n	8010e62 <GL_FillCircle+0x3e>
 8010edc:	b003      	add	sp, #12
 8010ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee2:	bf00      	nop
 8010ee4:	2000002c 	.word	0x2000002c

08010ee8 <GUI_CalcColorDist>:
 8010ee8:	b2cb      	uxtb	r3, r1
 8010eea:	b2c2      	uxtb	r2, r0
 8010eec:	1ad2      	subs	r2, r2, r3
 8010eee:	b292      	uxth	r2, r2
 8010ef0:	b293      	uxth	r3, r2
 8010ef2:	b530      	push	{r4, r5, lr}
 8010ef4:	041c      	lsls	r4, r3, #16
 8010ef6:	bf48      	it	mi
 8010ef8:	4253      	negmi	r3, r2
 8010efa:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8010efe:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010f02:	ebc5 0202 	rsb	r2, r5, r2
 8010f06:	bf48      	it	mi
 8010f08:	b29b      	uxthmi	r3, r3
 8010f0a:	b292      	uxth	r2, r2
 8010f0c:	0c09      	lsrs	r1, r1, #16
 8010f0e:	fb13 f403 	smulbb	r4, r3, r3
 8010f12:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8010f16:	b293      	uxth	r3, r2
 8010f18:	041d      	lsls	r5, r3, #16
 8010f1a:	b289      	uxth	r1, r1
 8010f1c:	b288      	uxth	r0, r1
 8010f1e:	bf44      	itt	mi
 8010f20:	4253      	negmi	r3, r2
 8010f22:	b29b      	uxthmi	r3, r3
 8010f24:	0402      	lsls	r2, r0, #16
 8010f26:	bf48      	it	mi
 8010f28:	4248      	negmi	r0, r1
 8010f2a:	fb13 4303 	smlabb	r3, r3, r3, r4
 8010f2e:	bf48      	it	mi
 8010f30:	b280      	uxthmi	r0, r0
 8010f32:	fb00 3000 	mla	r0, r0, r0, r3
 8010f36:	bd30      	pop	{r4, r5, pc}

08010f38 <LCD_Index2Color_M888>:
 8010f38:	b2c2      	uxtb	r2, r0
 8010f3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f42:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010f46:	4318      	orrs	r0, r3
 8010f48:	4770      	bx	lr

08010f4a <WM__SendMessageIfEnabled>:
 8010f4a:	b538      	push	{r3, r4, r5, lr}
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	460d      	mov	r5, r1
 8010f50:	f7f8 f98a 	bl	8009268 <WM__IsEnabled>
 8010f54:	b128      	cbz	r0, 8010f62 <WM__SendMessageIfEnabled+0x18>
 8010f56:	4620      	mov	r0, r4
 8010f58:	4629      	mov	r1, r5
 8010f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f5e:	f7f8 b965 	b.w	800922c <WM__SendMessage>
 8010f62:	bd38      	pop	{r3, r4, r5, pc}

08010f64 <GUI__GetFontSizeY>:
 8010f64:	4b03      	ldr	r3, [pc, #12]	; (8010f74 <GUI__GetFontSizeY+0x10>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	69db      	ldr	r3, [r3, #28]
 8010f6a:	7e18      	ldrb	r0, [r3, #24]
 8010f6c:	7edb      	ldrb	r3, [r3, #27]
 8010f6e:	4358      	muls	r0, r3
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	2000002c 	.word	0x2000002c

08010f78 <_CreateBuffer>:
 8010f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f7a:	6943      	ldr	r3, [r0, #20]
 8010f7c:	4605      	mov	r5, r0
 8010f7e:	8818      	ldrh	r0, [r3, #0]
 8010f80:	300d      	adds	r0, #13
 8010f82:	0080      	lsls	r0, r0, #2
 8010f84:	460e      	mov	r6, r1
 8010f86:	f7fe f8f1 	bl	800f16c <GUI_ALLOC_AllocNoInit>
 8010f8a:	4607      	mov	r7, r0
 8010f8c:	b908      	cbnz	r0, 8010f92 <_CreateBuffer+0x1a>
 8010f8e:	2000      	movs	r0, #0
 8010f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f92:	f7fd feb9 	bl	800ed08 <GUI_ALLOC_LockH>
 8010f96:	682b      	ldr	r3, [r5, #0]
 8010f98:	4604      	mov	r4, r0
 8010f9a:	6998      	ldr	r0, [r3, #24]
 8010f9c:	f7fd f9d6 	bl	800e34c <GUI_DEVICE__GetpDriver>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d0f4      	beq.n	8010f8e <_CreateBuffer+0x16>
 8010fa4:	68c3      	ldr	r3, [r0, #12]
 8010fa6:	2108      	movs	r1, #8
 8010fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010faa:	4798      	blx	r3
 8010fac:	2802      	cmp	r0, #2
 8010fae:	dd0b      	ble.n	8010fc8 <_CreateBuffer+0x50>
 8010fb0:	2804      	cmp	r0, #4
 8010fb2:	dd06      	ble.n	8010fc2 <_CreateBuffer+0x4a>
 8010fb4:	2808      	cmp	r0, #8
 8010fb6:	dd06      	ble.n	8010fc6 <_CreateBuffer+0x4e>
 8010fb8:	2811      	cmp	r0, #17
 8010fba:	bfb4      	ite	lt
 8010fbc:	2010      	movlt	r0, #16
 8010fbe:	2020      	movge	r0, #32
 8010fc0:	e002      	b.n	8010fc8 <_CreateBuffer+0x50>
 8010fc2:	2004      	movs	r0, #4
 8010fc4:	e000      	b.n	8010fc8 <_CreateBuffer+0x50>
 8010fc6:	2008      	movs	r0, #8
 8010fc8:	2808      	cmp	r0, #8
 8010fca:	61a0      	str	r0, [r4, #24]
 8010fcc:	dd04      	ble.n	8010fd8 <_CreateBuffer+0x60>
 8010fce:	2810      	cmp	r0, #16
 8010fd0:	bfcc      	ite	gt
 8010fd2:	2304      	movgt	r3, #4
 8010fd4:	2302      	movle	r3, #2
 8010fd6:	e000      	b.n	8010fda <_CreateBuffer+0x62>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	696a      	ldr	r2, [r5, #20]
 8010fdc:	6123      	str	r3, [r4, #16]
 8010fde:	8812      	ldrh	r2, [r2, #0]
 8010fe0:	61e2      	str	r2, [r4, #28]
 8010fe2:	4353      	muls	r3, r2
 8010fe4:	6163      	str	r3, [r4, #20]
 8010fe6:	f7fe f82d 	bl	800f044 <GUI_ALLOC_GetMaxSize>
 8010fea:	6963      	ldr	r3, [r4, #20]
 8010fec:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8010ff0:	4283      	cmp	r3, r0
 8010ff2:	f04f 0200 	mov.w	r2, #0
 8010ff6:	bfc8      	it	gt
 8010ff8:	6160      	strgt	r0, [r4, #20]
 8010ffa:	2e01      	cmp	r6, #1
 8010ffc:	60e2      	str	r2, [r4, #12]
 8010ffe:	bf18      	it	ne
 8011000:	69e2      	ldrne	r2, [r4, #28]
 8011002:	60a7      	str	r7, [r4, #8]
 8011004:	bf18      	it	ne
 8011006:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 801100a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801100e:	bf18      	it	ne
 8011010:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	bf18      	it	ne
 8011018:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 801101c:	6063      	str	r3, [r4, #4]
 801101e:	4620      	mov	r0, r4
 8011020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011022 <_GetBkIndex.isra.0>:
 8011022:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011026:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 801102a:	4540      	cmp	r0, r8
 801102c:	4606      	mov	r6, r0
 801102e:	460d      	mov	r5, r1
 8011030:	4691      	mov	r9, r2
 8011032:	461c      	mov	r4, r3
 8011034:	da04      	bge.n	8011040 <_GetBkIndex.isra.0+0x1e>
 8011036:	f8d9 0000 	ldr.w	r0, [r9]
 801103a:	bb28      	cbnz	r0, 8011088 <_GetBkIndex.isra.0+0x66>
 801103c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011040:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011044:	4298      	cmp	r0, r3
 8011046:	dcf6      	bgt.n	8011036 <_GetBkIndex.isra.0+0x14>
 8011048:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 801104c:	42b9      	cmp	r1, r7
 801104e:	dbf2      	blt.n	8011036 <_GetBkIndex.isra.0+0x14>
 8011050:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011054:	4299      	cmp	r1, r3
 8011056:	dcee      	bgt.n	8011036 <_GetBkIndex.isra.0+0x14>
 8011058:	ebc8 0800 	rsb	r8, r8, r0
 801105c:	1bcf      	subs	r7, r1, r7
 801105e:	6960      	ldr	r0, [r4, #20]
 8011060:	4641      	mov	r1, r8
 8011062:	463a      	mov	r2, r7
 8011064:	f000 fba4 	bl	80117b0 <GUI_GetBitmapPixelIndex>
 8011068:	2800      	cmp	r0, #0
 801106a:	d0e4      	beq.n	8011036 <_GetBkIndex.isra.0+0x14>
 801106c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011070:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011074:	1a8a      	subs	r2, r1, r2
 8011076:	fb02 7707 	mla	r7, r2, r7, r7
 801107a:	f104 0320 	add.w	r3, r4, #32
 801107e:	44b8      	add	r8, r7
 8011080:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011088:	68c3      	ldr	r3, [r0, #12]
 801108a:	4631      	mov	r1, r6
 801108c:	695b      	ldr	r3, [r3, #20]
 801108e:	462a      	mov	r2, r5
 8011090:	4798      	blx	r3
 8011092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011096 <_GetBkIndexAlpha.isra.2>:
 8011096:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801109a:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 801109e:	42b0      	cmp	r0, r6
 80110a0:	4680      	mov	r8, r0
 80110a2:	460f      	mov	r7, r1
 80110a4:	4691      	mov	r9, r2
 80110a6:	461d      	mov	r5, r3
 80110a8:	db14      	blt.n	80110d4 <_GetBkIndexAlpha.isra.2+0x3e>
 80110aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80110ae:	4298      	cmp	r0, r3
 80110b0:	dc10      	bgt.n	80110d4 <_GetBkIndexAlpha.isra.2+0x3e>
 80110b2:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 80110b6:	42a1      	cmp	r1, r4
 80110b8:	db0c      	blt.n	80110d4 <_GetBkIndexAlpha.isra.2+0x3e>
 80110ba:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80110be:	4299      	cmp	r1, r3
 80110c0:	dc08      	bgt.n	80110d4 <_GetBkIndexAlpha.isra.2+0x3e>
 80110c2:	1b86      	subs	r6, r0, r6
 80110c4:	6968      	ldr	r0, [r5, #20]
 80110c6:	1b0c      	subs	r4, r1, r4
 80110c8:	b130      	cbz	r0, 80110d8 <_GetBkIndexAlpha.isra.2+0x42>
 80110ca:	4631      	mov	r1, r6
 80110cc:	4622      	mov	r2, r4
 80110ce:	f000 fb6f 	bl	80117b0 <GUI_GetBitmapPixelIndex>
 80110d2:	e003      	b.n	80110dc <_GetBkIndexAlpha.isra.2+0x46>
 80110d4:	2400      	movs	r4, #0
 80110d6:	4626      	mov	r6, r4
 80110d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80110dc:	0e00      	lsrs	r0, r0, #24
 80110de:	28ff      	cmp	r0, #255	; 0xff
 80110e0:	d109      	bne.n	80110f6 <_GetBkIndexAlpha.isra.2+0x60>
 80110e2:	f8d9 0000 	ldr.w	r0, [r9]
 80110e6:	b190      	cbz	r0, 801110e <_GetBkIndexAlpha.isra.2+0x78>
 80110e8:	68c3      	ldr	r3, [r0, #12]
 80110ea:	4641      	mov	r1, r8
 80110ec:	695b      	ldr	r3, [r3, #20]
 80110ee:	463a      	mov	r2, r7
 80110f0:	4798      	blx	r3
 80110f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80110fa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80110fe:	1a8a      	subs	r2, r1, r2
 8011100:	fb02 4404 	mla	r4, r2, r4, r4
 8011104:	f105 0320 	add.w	r3, r5, #32
 8011108:	4426      	add	r6, r4
 801110a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08011114 <_GetDeviceRect>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4a0c      	ldr	r2, [pc, #48]	; (8011148 <_GetDeviceRect+0x34>)
 8011118:	6983      	ldr	r3, [r0, #24]
 801111a:	56d2      	ldrsb	r2, [r2, r3]
 801111c:	2a01      	cmp	r2, #1
 801111e:	4605      	mov	r5, r0
 8011120:	460c      	mov	r4, r1
 8011122:	dd0d      	ble.n	8011140 <_GetDeviceRect+0x2c>
 8011124:	2200      	movs	r2, #0
 8011126:	804a      	strh	r2, [r1, #2]
 8011128:	800a      	strh	r2, [r1, #0]
 801112a:	4618      	mov	r0, r3
 801112c:	f7fa fb9c 	bl	800b868 <LCD_GetXSizeEx>
 8011130:	3801      	subs	r0, #1
 8011132:	80a0      	strh	r0, [r4, #4]
 8011134:	69a8      	ldr	r0, [r5, #24]
 8011136:	f7fa fb9a 	bl	800b86e <LCD_GetYSizeEx>
 801113a:	3801      	subs	r0, #1
 801113c:	80e0      	strh	r0, [r4, #6]
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	68c3      	ldr	r3, [r0, #12]
 8011142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011144:	4798      	blx	r3
 8011146:	bd38      	pop	{r3, r4, r5, pc}
 8011148:	20022f9c 	.word	0x20022f9c

0801114c <_FlushBuffer.isra.5>:
 801114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801114e:	460c      	mov	r4, r1
 8011150:	68c9      	ldr	r1, [r1, #12]
 8011152:	b087      	sub	sp, #28
 8011154:	2900      	cmp	r1, #0
 8011156:	d030      	beq.n	80111ba <_FlushBuffer.isra.5+0x6e>
 8011158:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 801115c:	6822      	ldr	r2, [r4, #0]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d103      	bne.n	801116a <_FlushBuffer.isra.5+0x1e>
 8011162:	4615      	mov	r5, r2
 8011164:	6062      	str	r2, [r4, #4]
 8011166:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8011168:	e009      	b.n	801117e <_FlushBuffer.isra.5+0x32>
 801116a:	69e3      	ldr	r3, [r4, #28]
 801116c:	6865      	ldr	r5, [r4, #4]
 801116e:	6a27      	ldr	r7, [r4, #32]
 8011170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011174:	3b01      	subs	r3, #1
 8011176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801117a:	3504      	adds	r5, #4
 801117c:	6063      	str	r3, [r4, #4]
 801117e:	6806      	ldr	r6, [r0, #0]
 8011180:	b1b6      	cbz	r6, 80111b0 <_FlushBuffer.isra.5+0x64>
 8011182:	69a2      	ldr	r2, [r4, #24]
 8011184:	4628      	mov	r0, r5
 8011186:	f7ff fb26 	bl	80107d6 <GUI__CompactPixelIndices>
 801118a:	2301      	movs	r3, #1
 801118c:	68f2      	ldr	r2, [r6, #12]
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	69a3      	ldr	r3, [r4, #24]
 8011192:	9301      	str	r3, [sp, #4]
 8011194:	9503      	str	r5, [sp, #12]
 8011196:	6963      	ldr	r3, [r4, #20]
 8011198:	9302      	str	r3, [sp, #8]
 801119a:	2500      	movs	r5, #0
 801119c:	9504      	str	r5, [sp, #16]
 801119e:	9505      	str	r5, [sp, #20]
 80111a0:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80111a4:	68e3      	ldr	r3, [r4, #12]
 80111a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	47e0      	blx	ip
 80111ae:	e000      	b.n	80111b2 <_FlushBuffer.isra.5+0x66>
 80111b0:	2501      	movs	r5, #1
 80111b2:	2300      	movs	r3, #0
 80111b4:	60e3      	str	r3, [r4, #12]
 80111b6:	b2e8      	uxtb	r0, r5
 80111b8:	e000      	b.n	80111bc <_FlushBuffer.isra.5+0x70>
 80111ba:	4608      	mov	r0, r1
 80111bc:	b007      	add	sp, #28
 80111be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080111c0 <_SetBkIndexBuffered>:
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c2:	9c06      	ldr	r4, [sp, #24]
 80111c4:	460d      	mov	r5, r1
 80111c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111c8:	428d      	cmp	r5, r1
 80111ca:	4606      	mov	r6, r0
 80111cc:	4617      	mov	r7, r2
 80111ce:	d105      	bne.n	80111dc <_SetBkIndexBuffered+0x1c>
 80111d0:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80111d4:	6a21      	ldr	r1, [r4, #32]
 80111d6:	4411      	add	r1, r2
 80111d8:	4288      	cmp	r0, r1
 80111da:	d003      	beq.n	80111e4 <_SetBkIndexBuffered+0x24>
 80111dc:	4618      	mov	r0, r3
 80111de:	4621      	mov	r1, r4
 80111e0:	f7ff ffb4 	bl	801114c <_FlushBuffer.isra.5>
 80111e4:	6863      	ldr	r3, [r4, #4]
 80111e6:	601f      	str	r7, [r3, #0]
 80111e8:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80111ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80111f0:	6063      	str	r3, [r4, #4]
 80111f2:	68e3      	ldr	r3, [r4, #12]
 80111f4:	b90b      	cbnz	r3, 80111fa <_SetBkIndexBuffered+0x3a>
 80111f6:	62a6      	str	r6, [r4, #40]	; 0x28
 80111f8:	62e5      	str	r5, [r4, #44]	; 0x2c
 80111fa:	3301      	adds	r3, #1
 80111fc:	60e3      	str	r3, [r4, #12]
 80111fe:	6226      	str	r6, [r4, #32]
 8011200:	6265      	str	r5, [r4, #36]	; 0x24
 8011202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011204 <_ReleaseBuffer.isra.6>:
 8011204:	b513      	push	{r0, r1, r4, lr}
 8011206:	9101      	str	r1, [sp, #4]
 8011208:	f7ff ffa0 	bl	801114c <_FlushBuffer.isra.5>
 801120c:	a802      	add	r0, sp, #8
 801120e:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8011212:	6894      	ldr	r4, [r2, #8]
 8011214:	f7fd fd86 	bl	800ed24 <GUI_ALLOC_UnlockH>
 8011218:	4620      	mov	r0, r4
 801121a:	f7fd fda3 	bl	800ed64 <GUI_ALLOC_Free>
 801121e:	b002      	add	sp, #8
 8011220:	bd10      	pop	{r4, pc}
	...

08011224 <GUI_SPRITE_SetPosition>:
 8011224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011228:	b0a7      	sub	sp, #156	; 0x9c
 801122a:	9116      	str	r1, [sp, #88]	; 0x58
 801122c:	9217      	str	r2, [sp, #92]	; 0x5c
 801122e:	2800      	cmp	r0, #0
 8011230:	f000 8275 	beq.w	801171e <GUI_SPRITE_SetPosition+0x4fa>
 8011234:	f7fd fd68 	bl	800ed08 <GUI_ALLOC_LockH>
 8011238:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801123a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801123e:	6801      	ldr	r1, [r0, #0]
 8011240:	9023      	str	r0, [sp, #140]	; 0x8c
 8011242:	429a      	cmp	r2, r3
 8011244:	9106      	str	r1, [sp, #24]
 8011246:	d106      	bne.n	8011256 <GUI_SPRITE_SetPosition+0x32>
 8011248:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801124c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8011250:	459e      	cmp	lr, r3
 8011252:	f000 8239 	beq.w	80116c8 <GUI_SPRITE_SetPosition+0x4a4>
 8011256:	2000      	movs	r0, #0
 8011258:	f7f9 fc2e 	bl	800aab8 <GUI_MEMDEV_Select>
 801125c:	4ba0      	ldr	r3, [pc, #640]	; (80114e0 <GUI_SPRITE_SetPosition+0x2bc>)
 801125e:	9906      	ldr	r1, [sp, #24]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	6989      	ldr	r1, [r1, #24]
 8011264:	7c5a      	ldrb	r2, [r3, #17]
 8011266:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8011268:	9108      	str	r1, [sp, #32]
 801126a:	4291      	cmp	r1, r2
 801126c:	bf18      	it	ne
 801126e:	7459      	strbne	r1, [r3, #17]
 8011270:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011274:	9310      	str	r3, [sp, #64]	; 0x40
 8011276:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801127a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801127e:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8011282:	921a      	str	r2, [sp, #104]	; 0x68
 8011284:	ebce 0303 	rsb	r3, lr, r3
 8011288:	1c59      	adds	r1, r3, #1
 801128a:	9307      	str	r3, [sp, #28]
 801128c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8011290:	901f      	str	r0, [sp, #124]	; 0x7c
 8011292:	1b9b      	subs	r3, r3, r6
 8011294:	1c5a      	adds	r2, r3, #1
 8011296:	930e      	str	r3, [sp, #56]	; 0x38
 8011298:	8a2b      	ldrh	r3, [r5, #16]
 801129a:	910d      	str	r1, [sp, #52]	; 0x34
 801129c:	079b      	lsls	r3, r3, #30
 801129e:	921e      	str	r2, [sp, #120]	; 0x78
 80112a0:	f140 81f7 	bpl.w	8011692 <GUI_SPRITE_SetPosition+0x46e>
 80112a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80112a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80112a8:	696b      	ldr	r3, [r5, #20]
 80112aa:	9311      	str	r3, [sp, #68]	; 0x44
 80112ac:	ebce 0a01 	rsb	sl, lr, r1
 80112b0:	f1ba 0f00 	cmp.w	sl, #0
 80112b4:	ebc6 0902 	rsb	r9, r6, r2
 80112b8:	dc0c      	bgt.n	80112d4 <GUI_SPRITE_SetPosition+0xb0>
 80112ba:	9b07      	ldr	r3, [sp, #28]
 80112bc:	930a      	str	r3, [sp, #40]	; 0x28
 80112be:	469e      	mov	lr, r3
 80112c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112c4:	44d6      	add	lr, sl
 80112c6:	2100      	movs	r1, #0
 80112c8:	f8cd e01c 	str.w	lr, [sp, #28]
 80112cc:	911c      	str	r1, [sp, #112]	; 0x70
 80112ce:	9214      	str	r2, [sp, #80]	; 0x50
 80112d0:	9204      	str	r2, [sp, #16]
 80112d2:	e009      	b.n	80112e8 <GUI_SPRITE_SetPosition+0xc4>
 80112d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112d6:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 80112da:	f04f 0e01 	mov.w	lr, #1
 80112de:	2100      	movs	r1, #0
 80112e0:	9314      	str	r3, [sp, #80]	; 0x50
 80112e2:	f8cd e010 	str.w	lr, [sp, #16]
 80112e6:	910a      	str	r1, [sp, #40]	; 0x28
 80112e8:	f1b9 0f00 	cmp.w	r9, #0
 80112ec:	dc0c      	bgt.n	8011308 <GUI_SPRITE_SetPosition+0xe4>
 80112ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80112f0:	4622      	mov	r2, r4
 80112f2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80112f6:	444a      	add	r2, r9
 80112f8:	2300      	movs	r3, #0
 80112fa:	920e      	str	r2, [sp, #56]	; 0x38
 80112fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80112fe:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 8011302:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8011306:	e006      	b.n	8011316 <GUI_SPRITE_SetPosition+0xf2>
 8011308:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801130a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 801130e:	2301      	movs	r3, #1
 8011310:	9215      	str	r2, [sp, #84]	; 0x54
 8011312:	9309      	str	r3, [sp, #36]	; 0x24
 8011314:	2400      	movs	r4, #0
 8011316:	9806      	ldr	r0, [sp, #24]
 8011318:	a924      	add	r1, sp, #144	; 0x90
 801131a:	f7ff fefb 	bl	8011114 <_GetDeviceRect>
 801131e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8011320:	9904      	ldr	r1, [sp, #16]
 8011322:	f7ff fe29 	bl	8010f78 <_CreateBuffer>
 8011326:	9012      	str	r0, [sp, #72]	; 0x48
 8011328:	2800      	cmp	r0, #0
 801132a:	f000 81b2 	beq.w	8011692 <GUI_SPRITE_SetPosition+0x46e>
 801132e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8011330:	9904      	ldr	r1, [sp, #16]
 8011332:	f7ff fe21 	bl	8010f78 <_CreateBuffer>
 8011336:	9013      	str	r0, [sp, #76]	; 0x4c
 8011338:	2800      	cmp	r0, #0
 801133a:	f000 81a5 	beq.w	8011688 <GUI_SPRITE_SetPosition+0x464>
 801133e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011340:	68d8      	ldr	r0, [r3, #12]
 8011342:	4426      	add	r6, r4
 8011344:	b990      	cbnz	r0, 801136c <GUI_SPRITE_SetPosition+0x148>
 8011346:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801134a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801134c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801134e:	9019      	str	r0, [sp, #100]	; 0x64
 8011350:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8011354:	434b      	muls	r3, r1
 8011356:	9321      	str	r3, [sp, #132]	; 0x84
 8011358:	fb0e 2304 	mla	r3, lr, r4, r2
 801135c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011360:	930c      	str	r3, [sp, #48]	; 0x30
 8011362:	9b04      	ldr	r3, [sp, #16]
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	444e      	add	r6, r9
 8011368:	9320      	str	r3, [sp, #128]	; 0x80
 801136a:	e0db      	b.n	8011524 <GUI_SPRITE_SetPosition+0x300>
 801136c:	f7fd fccc 	bl	800ed08 <GUI_ALLOC_LockH>
 8011370:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8011374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011378:	9022      	str	r0, [sp, #136]	; 0x88
 801137a:	ea4f 038e 	mov.w	r3, lr, lsl #2
 801137e:	434b      	muls	r3, r1
 8011380:	9319      	str	r3, [sp, #100]	; 0x64
 8011382:	fb0e 2304 	mla	r3, lr, r4, r2
 8011386:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801138a:	930b      	str	r3, [sp, #44]	; 0x2c
 801138c:	9b04      	ldr	r3, [sp, #16]
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	444e      	add	r6, r9
 8011392:	931d      	str	r3, [sp, #116]	; 0x74
 8011394:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011396:	428c      	cmp	r4, r1
 8011398:	f000 809e 	beq.w	80114d8 <GUI_SPRITE_SetPosition+0x2b4>
 801139c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80113a0:	4574      	cmp	r4, lr
 80113a2:	db05      	blt.n	80113b0 <GUI_SPRITE_SetPosition+0x18c>
 80113a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80113a6:	428c      	cmp	r4, r1
 80113a8:	bfcc      	ite	gt
 80113aa:	2300      	movgt	r3, #0
 80113ac:	2301      	movle	r3, #1
 80113ae:	e000      	b.n	80113b2 <GUI_SPRITE_SetPosition+0x18e>
 80113b0:	2300      	movs	r3, #0
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	9318      	str	r3, [sp, #96]	; 0x60
 80113b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80113b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80113bc:	9105      	str	r1, [sp, #20]
 80113be:	ebc9 0206 	rsb	r2, r9, r6
 80113c2:	441f      	add	r7, r3
 80113c4:	920c      	str	r2, [sp, #48]	; 0x30
 80113c6:	4457      	add	r7, sl
 80113c8:	461d      	mov	r5, r3
 80113ca:	9914      	ldr	r1, [sp, #80]	; 0x50
 80113cc:	428d      	cmp	r5, r1
 80113ce:	d07a      	beq.n	80114c6 <GUI_SPRITE_SetPosition+0x2a2>
 80113d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80113d2:	4629      	mov	r1, r5
 80113d4:	4622      	mov	r2, r4
 80113d6:	f000 f9eb 	bl	80117b0 <GUI_GetBitmapPixelIndex>
 80113da:	900f      	str	r0, [sp, #60]	; 0x3c
 80113dc:	2800      	cmp	r0, #0
 80113de:	d069      	beq.n	80114b4 <GUI_SPRITE_SetPosition+0x290>
 80113e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80113e2:	4295      	cmp	r5, r2
 80113e4:	ebca 0c07 	rsb	ip, sl, r7
 80113e8:	db07      	blt.n	80113fa <GUI_SPRITE_SetPosition+0x1d6>
 80113ea:	9b07      	ldr	r3, [sp, #28]
 80113ec:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80113f0:	429d      	cmp	r5, r3
 80113f2:	bfc8      	it	gt
 80113f4:	f04f 0b00 	movgt.w	fp, #0
 80113f8:	e001      	b.n	80113fe <GUI_SPRITE_SetPosition+0x1da>
 80113fa:	f04f 0b00 	mov.w	fp, #0
 80113fe:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8011402:	429f      	cmp	r7, r3
 8011404:	fa5f fb8b 	uxtb.w	fp, fp
 8011408:	db17      	blt.n	801143a <GUI_SPRITE_SetPosition+0x216>
 801140a:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801140e:	429e      	cmp	r6, r3
 8011410:	db13      	blt.n	801143a <GUI_SPRITE_SetPosition+0x216>
 8011412:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8011416:	429f      	cmp	r7, r3
 8011418:	dc0f      	bgt.n	801143a <GUI_SPRITE_SetPosition+0x216>
 801141a:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801141e:	429e      	cmp	r6, r3
 8011420:	dc0b      	bgt.n	801143a <GUI_SPRITE_SetPosition+0x216>
 8011422:	4638      	mov	r0, r7
 8011424:	4631      	mov	r1, r6
 8011426:	9a06      	ldr	r2, [sp, #24]
 8011428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801142a:	f8cd c00c 	str.w	ip, [sp, #12]
 801142e:	f7ff fdf8 	bl	8011022 <_GetBkIndex.isra.0>
 8011432:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011436:	4680      	mov	r8, r0
 8011438:	e001      	b.n	801143e <GUI_SPRITE_SetPosition+0x21a>
 801143a:	f04f 0800 	mov.w	r8, #0
 801143e:	f1bb 0f00 	cmp.w	fp, #0
 8011442:	d00d      	beq.n	8011460 <GUI_SPRITE_SetPosition+0x23c>
 8011444:	ebb5 010a 	subs.w	r1, r5, sl
 8011448:	d415      	bmi.n	8011476 <GUI_SPRITE_SetPosition+0x252>
 801144a:	ebb4 0209 	subs.w	r2, r4, r9
 801144e:	d412      	bmi.n	8011476 <GUI_SPRITE_SetPosition+0x252>
 8011450:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011452:	f8cd c00c 	str.w	ip, [sp, #12]
 8011456:	f000 f9ab 	bl	80117b0 <GUI_GetBitmapPixelIndex>
 801145a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801145e:	b950      	cbnz	r0, 8011476 <GUI_SPRITE_SetPosition+0x252>
 8011460:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8011464:	459c      	cmp	ip, r3
 8011466:	db06      	blt.n	8011476 <GUI_SPRITE_SetPosition+0x252>
 8011468:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801146c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8011470:	459e      	cmp	lr, r3
 8011472:	f280 812d 	bge.w	80116d0 <GUI_SPRITE_SetPosition+0x4ac>
 8011476:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801147a:	429f      	cmp	r7, r3
 801147c:	db17      	blt.n	80114ae <GUI_SPRITE_SetPosition+0x28a>
 801147e:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8011482:	429e      	cmp	r6, r3
 8011484:	db13      	blt.n	80114ae <GUI_SPRITE_SetPosition+0x28a>
 8011486:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801148a:	429f      	cmp	r7, r3
 801148c:	dc0f      	bgt.n	80114ae <GUI_SPRITE_SetPosition+0x28a>
 801148e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8011492:	429e      	cmp	r6, r3
 8011494:	dc0b      	bgt.n	80114ae <GUI_SPRITE_SetPosition+0x28a>
 8011496:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801149a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 801149e:	9100      	str	r1, [sp, #0]
 80114a0:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 80114a4:	9b06      	ldr	r3, [sp, #24]
 80114a6:	4638      	mov	r0, r7
 80114a8:	4631      	mov	r1, r6
 80114aa:	f7ff fe89 	bl	80111c0 <_SetBkIndexBuffered>
 80114ae:	9905      	ldr	r1, [sp, #20]
 80114b0:	f8c1 8020 	str.w	r8, [r1, #32]
 80114b4:	9b05      	ldr	r3, [sp, #20]
 80114b6:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 80114ba:	9a04      	ldr	r2, [sp, #16]
 80114bc:	4473      	add	r3, lr
 80114be:	4415      	add	r5, r2
 80114c0:	9305      	str	r3, [sp, #20]
 80114c2:	4417      	add	r7, r2
 80114c4:	e781      	b.n	80113ca <GUI_SPRITE_SetPosition+0x1a6>
 80114c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c8:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 80114cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114ce:	4473      	add	r3, lr
 80114d0:	4414      	add	r4, r2
 80114d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80114d4:	4416      	add	r6, r2
 80114d6:	e75d      	b.n	8011394 <GUI_SPRITE_SetPosition+0x170>
 80114d8:	a822      	add	r0, sp, #136	; 0x88
 80114da:	f7fd fc23 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80114de:	e0ce      	b.n	801167e <GUI_SPRITE_SetPosition+0x45a>
 80114e0:	2000002c 	.word	0x2000002c
 80114e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80114e6:	4294      	cmp	r4, r2
 80114e8:	db20      	blt.n	801152c <GUI_SPRITE_SetPosition+0x308>
 80114ea:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80114ee:	4574      	cmp	r4, lr
 80114f0:	bfcc      	ite	gt
 80114f2:	2300      	movgt	r3, #0
 80114f4:	2301      	movle	r3, #1
 80114f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	931d      	str	r3, [sp, #116]	; 0x74
 80114fe:	ebc9 0106 	rsb	r1, r9, r6
 8011502:	4417      	add	r7, r2
 8011504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011506:	910f      	str	r1, [sp, #60]	; 0x3c
 8011508:	4457      	add	r7, sl
 801150a:	9305      	str	r3, [sp, #20]
 801150c:	4615      	mov	r5, r2
 801150e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011510:	428d      	cmp	r5, r1
 8011512:	d10d      	bne.n	8011530 <GUI_SPRITE_SetPosition+0x30c>
 8011514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011516:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 801151a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801151c:	4473      	add	r3, lr
 801151e:	4414      	add	r4, r2
 8011520:	930c      	str	r3, [sp, #48]	; 0x30
 8011522:	4416      	add	r6, r2
 8011524:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011526:	428c      	cmp	r4, r1
 8011528:	d1dc      	bne.n	80114e4 <GUI_SPRITE_SetPosition+0x2c0>
 801152a:	e0a8      	b.n	801167e <GUI_SPRITE_SetPosition+0x45a>
 801152c:	2300      	movs	r3, #0
 801152e:	e7e2      	b.n	80114f6 <GUI_SPRITE_SetPosition+0x2d2>
 8011530:	4629      	mov	r1, r5
 8011532:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011534:	4622      	mov	r2, r4
 8011536:	f000 f93b 	bl	80117b0 <GUI_GetBitmapPixelIndex>
 801153a:	0e01      	lsrs	r1, r0, #24
 801153c:	29ff      	cmp	r1, #255	; 0xff
 801153e:	9018      	str	r0, [sp, #96]	; 0x60
 8011540:	910b      	str	r1, [sp, #44]	; 0x2c
 8011542:	f000 8093 	beq.w	801166c <GUI_SPRITE_SetPosition+0x448>
 8011546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011548:	4295      	cmp	r5, r2
 801154a:	ebca 0c07 	rsb	ip, sl, r7
 801154e:	db07      	blt.n	8011560 <GUI_SPRITE_SetPosition+0x33c>
 8011550:	9b07      	ldr	r3, [sp, #28]
 8011552:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8011556:	429d      	cmp	r5, r3
 8011558:	bfc8      	it	gt
 801155a:	f04f 0b00 	movgt.w	fp, #0
 801155e:	e001      	b.n	8011564 <GUI_SPRITE_SetPosition+0x340>
 8011560:	f04f 0b00 	mov.w	fp, #0
 8011564:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8011568:	429f      	cmp	r7, r3
 801156a:	fa5f fb8b 	uxtb.w	fp, fp
 801156e:	db22      	blt.n	80115b6 <GUI_SPRITE_SetPosition+0x392>
 8011570:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8011574:	429e      	cmp	r6, r3
 8011576:	db1e      	blt.n	80115b6 <GUI_SPRITE_SetPosition+0x392>
 8011578:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801157c:	429f      	cmp	r7, r3
 801157e:	dc1a      	bgt.n	80115b6 <GUI_SPRITE_SetPosition+0x392>
 8011580:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8011584:	429e      	cmp	r6, r3
 8011586:	dc16      	bgt.n	80115b6 <GUI_SPRITE_SetPosition+0x392>
 8011588:	4631      	mov	r1, r6
 801158a:	9a06      	ldr	r2, [sp, #24]
 801158c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801158e:	f8cd c00c 	str.w	ip, [sp, #12]
 8011592:	4638      	mov	r0, r7
 8011594:	f7ff fd7f 	bl	8011096 <_GetBkIndexAlpha.isra.2>
 8011598:	f8dd e020 	ldr.w	lr, [sp, #32]
 801159c:	4b61      	ldr	r3, [pc, #388]	; (8011724 <GUI_SPRITE_SetPosition+0x500>)
 801159e:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	4680      	mov	r8, r0
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80115ac:	4798      	blx	r3
 80115ae:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80115b2:	9019      	str	r0, [sp, #100]	; 0x64
 80115b4:	e001      	b.n	80115ba <GUI_SPRITE_SetPosition+0x396>
 80115b6:	f04f 0800 	mov.w	r8, #0
 80115ba:	f1bb 0f00 	cmp.w	fp, #0
 80115be:	d00f      	beq.n	80115e0 <GUI_SPRITE_SetPosition+0x3bc>
 80115c0:	ebb5 010a 	subs.w	r1, r5, sl
 80115c4:	d416      	bmi.n	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 80115c6:	ebb4 0209 	subs.w	r2, r4, r9
 80115ca:	d413      	bmi.n	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 80115cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80115ce:	f8cd c00c 	str.w	ip, [sp, #12]
 80115d2:	f000 f8ed 	bl	80117b0 <GUI_GetBitmapPixelIndex>
 80115d6:	0e00      	lsrs	r0, r0, #24
 80115d8:	28ff      	cmp	r0, #255	; 0xff
 80115da:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80115de:	d109      	bne.n	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 80115e0:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80115e4:	459c      	cmp	ip, r3
 80115e6:	db05      	blt.n	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 80115e8:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80115ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80115ee:	4299      	cmp	r1, r3
 80115f0:	f280 8082 	bge.w	80116f8 <GUI_SPRITE_SetPosition+0x4d4>
 80115f4:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80115f8:	429f      	cmp	r7, r3
 80115fa:	db34      	blt.n	8011666 <GUI_SPRITE_SetPosition+0x442>
 80115fc:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8011600:	429e      	cmp	r6, r3
 8011602:	db30      	blt.n	8011666 <GUI_SPRITE_SetPosition+0x442>
 8011604:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8011608:	429f      	cmp	r7, r3
 801160a:	dc2c      	bgt.n	8011666 <GUI_SPRITE_SetPosition+0x442>
 801160c:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8011610:	429e      	cmp	r6, r3
 8011612:	dc28      	bgt.n	8011666 <GUI_SPRITE_SetPosition+0x442>
 8011614:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8011618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801161a:	f8df b108 	ldr.w	fp, [pc, #264]	; 8011724 <GUI_SPRITE_SetPosition+0x500>
 801161e:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 8011622:	b191      	cbz	r1, 801164a <GUI_SPRITE_SetPosition+0x426>
 8011624:	9a08      	ldr	r2, [sp, #32]
 8011626:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 801162a:	691b      	ldr	r3, [r3, #16]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	4798      	blx	r3
 8011630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011632:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011634:	43da      	mvns	r2, r3
 8011636:	b2d2      	uxtb	r2, r2
 8011638:	f7fa fdf8 	bl	800c22c <GUI__MixColors>
 801163c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8011640:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	e004      	b.n	8011654 <GUI_SPRITE_SetPosition+0x430>
 801164a:	9908      	ldr	r1, [sp, #32]
 801164c:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8011650:	691b      	ldr	r3, [r3, #16]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	4798      	blx	r3
 8011656:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	4602      	mov	r2, r0
 801165c:	4631      	mov	r1, r6
 801165e:	4638      	mov	r0, r7
 8011660:	9b06      	ldr	r3, [sp, #24]
 8011662:	f7ff fdad 	bl	80111c0 <_SetBkIndexBuffered>
 8011666:	9905      	ldr	r1, [sp, #20]
 8011668:	f8c1 8020 	str.w	r8, [r1, #32]
 801166c:	9b05      	ldr	r3, [sp, #20]
 801166e:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8011672:	9a04      	ldr	r2, [sp, #16]
 8011674:	4473      	add	r3, lr
 8011676:	4415      	add	r5, r2
 8011678:	9305      	str	r3, [sp, #20]
 801167a:	4417      	add	r7, r2
 801167c:	e747      	b.n	801150e <GUI_SPRITE_SetPosition+0x2ea>
 801167e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011680:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	f7ff fdbe 	bl	8011204 <_ReleaseBuffer.isra.6>
 8011688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801168a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801168c:	6818      	ldr	r0, [r3, #0]
 801168e:	f7ff fdb9 	bl	8011204 <_ReleaseBuffer.isra.6>
 8011692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011694:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011696:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011698:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801169c:	809a      	strh	r2, [r3, #4]
 801169e:	440a      	add	r2, r1
 80116a0:	3a01      	subs	r2, #1
 80116a2:	f8a3 e006 	strh.w	lr, [r3, #6]
 80116a6:	811a      	strh	r2, [r3, #8]
 80116a8:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 80116ac:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 80116b0:	9908      	ldr	r1, [sp, #32]
 80116b2:	4472      	add	r2, lr
 80116b4:	815a      	strh	r2, [r3, #10]
 80116b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80116b8:	4291      	cmp	r1, r2
 80116ba:	d002      	beq.n	80116c2 <GUI_SPRITE_SetPosition+0x49e>
 80116bc:	4b1a      	ldr	r3, [pc, #104]	; (8011728 <GUI_SPRITE_SetPosition+0x504>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	745a      	strb	r2, [r3, #17]
 80116c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80116c4:	f7f9 f9f8 	bl	800aab8 <GUI_MEMDEV_Select>
 80116c8:	a823      	add	r0, sp, #140	; 0x8c
 80116ca:	f7fd fb2b 	bl	800ed24 <GUI_ALLOC_UnlockH>
 80116ce:	e026      	b.n	801171e <GUI_SPRITE_SetPosition+0x4fa>
 80116d0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80116d4:	459c      	cmp	ip, r3
 80116d6:	f73f aece 	bgt.w	8011476 <GUI_SPRITE_SetPosition+0x252>
 80116da:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80116de:	459e      	cmp	lr, r3
 80116e0:	f73f aec9 	bgt.w	8011476 <GUI_SPRITE_SetPosition+0x252>
 80116e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80116e6:	9b05      	ldr	r3, [sp, #20]
 80116e8:	9100      	str	r1, [sp, #0]
 80116ea:	6a1a      	ldr	r2, [r3, #32]
 80116ec:	9b06      	ldr	r3, [sp, #24]
 80116ee:	4660      	mov	r0, ip
 80116f0:	4671      	mov	r1, lr
 80116f2:	f7ff fd65 	bl	80111c0 <_SetBkIndexBuffered>
 80116f6:	e6be      	b.n	8011476 <GUI_SPRITE_SetPosition+0x252>
 80116f8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80116fc:	459c      	cmp	ip, r3
 80116fe:	f73f af79 	bgt.w	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 8011702:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8011706:	4299      	cmp	r1, r3
 8011708:	f73f af74 	bgt.w	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 801170c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801170e:	9b05      	ldr	r3, [sp, #20]
 8011710:	9200      	str	r2, [sp, #0]
 8011712:	6a1a      	ldr	r2, [r3, #32]
 8011714:	9b06      	ldr	r3, [sp, #24]
 8011716:	4660      	mov	r0, ip
 8011718:	f7ff fd52 	bl	80111c0 <_SetBkIndexBuffered>
 801171c:	e76a      	b.n	80115f4 <GUI_SPRITE_SetPosition+0x3d0>
 801171e:	b027      	add	sp, #156	; 0x9c
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	20022fcc 	.word	0x20022fcc
 8011728:	2000002c 	.word	0x2000002c

0801172c <GUI_GetBitmapPixelIndexEx>:
 801172c:	b510      	push	{r4, lr}
 801172e:	2804      	cmp	r0, #4
 8011730:	9c02      	ldr	r4, [sp, #8]
 8011732:	d025      	beq.n	8011780 <GUI_GetBitmapPixelIndexEx+0x54>
 8011734:	dc0f      	bgt.n	8011756 <GUI_GetBitmapPixelIndexEx+0x2a>
 8011736:	2801      	cmp	r0, #1
 8011738:	d017      	beq.n	801176a <GUI_GetBitmapPixelIndexEx+0x3e>
 801173a:	2802      	cmp	r0, #2
 801173c:	d136      	bne.n	80117ac <GUI_GetBitmapPixelIndexEx+0x80>
 801173e:	0898      	lsrs	r0, r3, #2
 8011740:	fb04 2101 	mla	r1, r4, r1, r2
 8011744:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8011748:	5c08      	ldrb	r0, [r1, r0]
 801174a:	f003 0306 	and.w	r3, r3, #6
 801174e:	40d8      	lsrs	r0, r3
 8011750:	f000 0003 	and.w	r0, r0, #3
 8011754:	bd10      	pop	{r4, pc}
 8011756:	2810      	cmp	r0, #16
 8011758:	d01c      	beq.n	8011794 <GUI_GetBitmapPixelIndexEx+0x68>
 801175a:	2820      	cmp	r0, #32
 801175c:	d020      	beq.n	80117a0 <GUI_GetBitmapPixelIndexEx+0x74>
 801175e:	2808      	cmp	r0, #8
 8011760:	d124      	bne.n	80117ac <GUI_GetBitmapPixelIndexEx+0x80>
 8011762:	fb04 2101 	mla	r1, r4, r1, r2
 8011766:	5cc8      	ldrb	r0, [r1, r3]
 8011768:	bd10      	pop	{r4, pc}
 801176a:	08d8      	lsrs	r0, r3, #3
 801176c:	fb04 2101 	mla	r1, r4, r1, r2
 8011770:	43db      	mvns	r3, r3
 8011772:	5c08      	ldrb	r0, [r1, r0]
 8011774:	f003 0307 	and.w	r3, r3, #7
 8011778:	40d8      	lsrs	r0, r3
 801177a:	f000 0001 	and.w	r0, r0, #1
 801177e:	bd10      	pop	{r4, pc}
 8011780:	0858      	lsrs	r0, r3, #1
 8011782:	fb04 2101 	mla	r1, r4, r1, r2
 8011786:	07db      	lsls	r3, r3, #31
 8011788:	5c08      	ldrb	r0, [r1, r0]
 801178a:	bf4c      	ite	mi
 801178c:	f000 000f 	andmi.w	r0, r0, #15
 8011790:	0900      	lsrpl	r0, r0, #4
 8011792:	bd10      	pop	{r4, pc}
 8011794:	1049      	asrs	r1, r1, #1
 8011796:	fb04 3301 	mla	r3, r4, r1, r3
 801179a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801179e:	bd10      	pop	{r4, pc}
 80117a0:	1089      	asrs	r1, r1, #2
 80117a2:	fb04 3301 	mla	r3, r4, r1, r3
 80117a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80117aa:	bd10      	pop	{r4, pc}
 80117ac:	2000      	movs	r0, #0
 80117ae:	bd10      	pop	{r4, pc}

080117b0 <GUI_GetBitmapPixelIndex>:
 80117b0:	b513      	push	{r0, r1, r4, lr}
 80117b2:	460b      	mov	r3, r1
 80117b4:	4604      	mov	r4, r0
 80117b6:	b130      	cbz	r0, 80117c6 <GUI_GetBitmapPixelIndex+0x16>
 80117b8:	88c0      	ldrh	r0, [r0, #6]
 80117ba:	88a1      	ldrh	r1, [r4, #4]
 80117bc:	9200      	str	r2, [sp, #0]
 80117be:	68a2      	ldr	r2, [r4, #8]
 80117c0:	f7ff ffb4 	bl	801172c <GUI_GetBitmapPixelIndexEx>
 80117c4:	e7ff      	b.n	80117c6 <GUI_GetBitmapPixelIndex+0x16>
 80117c6:	b002      	add	sp, #8
 80117c8:	bd10      	pop	{r4, pc}
	...

080117cc <__libc_init_array>:
 80117cc:	b570      	push	{r4, r5, r6, lr}
 80117ce:	4e0d      	ldr	r6, [pc, #52]	; (8011804 <__libc_init_array+0x38>)
 80117d0:	4c0d      	ldr	r4, [pc, #52]	; (8011808 <__libc_init_array+0x3c>)
 80117d2:	1ba4      	subs	r4, r4, r6
 80117d4:	10a4      	asrs	r4, r4, #2
 80117d6:	2500      	movs	r5, #0
 80117d8:	42a5      	cmp	r5, r4
 80117da:	d109      	bne.n	80117f0 <__libc_init_array+0x24>
 80117dc:	4e0b      	ldr	r6, [pc, #44]	; (801180c <__libc_init_array+0x40>)
 80117de:	4c0c      	ldr	r4, [pc, #48]	; (8011810 <__libc_init_array+0x44>)
 80117e0:	f000 f854 	bl	801188c <_init>
 80117e4:	1ba4      	subs	r4, r4, r6
 80117e6:	10a4      	asrs	r4, r4, #2
 80117e8:	2500      	movs	r5, #0
 80117ea:	42a5      	cmp	r5, r4
 80117ec:	d105      	bne.n	80117fa <__libc_init_array+0x2e>
 80117ee:	bd70      	pop	{r4, r5, r6, pc}
 80117f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80117f4:	4798      	blx	r3
 80117f6:	3501      	adds	r5, #1
 80117f8:	e7ee      	b.n	80117d8 <__libc_init_array+0xc>
 80117fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80117fe:	4798      	blx	r3
 8011800:	3501      	adds	r5, #1
 8011802:	e7f2      	b.n	80117ea <__libc_init_array+0x1e>
 8011804:	08013360 	.word	0x08013360
 8011808:	08013360 	.word	0x08013360
 801180c:	08013360 	.word	0x08013360
 8011810:	08013364 	.word	0x08013364

08011814 <memcmp>:
 8011814:	b510      	push	{r4, lr}
 8011816:	3901      	subs	r1, #1
 8011818:	4402      	add	r2, r0
 801181a:	4290      	cmp	r0, r2
 801181c:	d101      	bne.n	8011822 <memcmp+0xe>
 801181e:	2000      	movs	r0, #0
 8011820:	bd10      	pop	{r4, pc}
 8011822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011826:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801182a:	42a3      	cmp	r3, r4
 801182c:	d0f5      	beq.n	801181a <memcmp+0x6>
 801182e:	1b18      	subs	r0, r3, r4
 8011830:	bd10      	pop	{r4, pc}

08011832 <memcpy>:
 8011832:	b510      	push	{r4, lr}
 8011834:	1e43      	subs	r3, r0, #1
 8011836:	440a      	add	r2, r1
 8011838:	4291      	cmp	r1, r2
 801183a:	d100      	bne.n	801183e <memcpy+0xc>
 801183c:	bd10      	pop	{r4, pc}
 801183e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011846:	e7f7      	b.n	8011838 <memcpy+0x6>

08011848 <memmove>:
 8011848:	4288      	cmp	r0, r1
 801184a:	b510      	push	{r4, lr}
 801184c:	eb01 0302 	add.w	r3, r1, r2
 8011850:	d803      	bhi.n	801185a <memmove+0x12>
 8011852:	1e42      	subs	r2, r0, #1
 8011854:	4299      	cmp	r1, r3
 8011856:	d10c      	bne.n	8011872 <memmove+0x2a>
 8011858:	bd10      	pop	{r4, pc}
 801185a:	4298      	cmp	r0, r3
 801185c:	d2f9      	bcs.n	8011852 <memmove+0xa>
 801185e:	1881      	adds	r1, r0, r2
 8011860:	1ad2      	subs	r2, r2, r3
 8011862:	42d3      	cmn	r3, r2
 8011864:	d100      	bne.n	8011868 <memmove+0x20>
 8011866:	bd10      	pop	{r4, pc}
 8011868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801186c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011870:	e7f7      	b.n	8011862 <memmove+0x1a>
 8011872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011876:	f802 4f01 	strb.w	r4, [r2, #1]!
 801187a:	e7eb      	b.n	8011854 <memmove+0xc>

0801187c <memset>:
 801187c:	4402      	add	r2, r0
 801187e:	4603      	mov	r3, r0
 8011880:	4293      	cmp	r3, r2
 8011882:	d100      	bne.n	8011886 <memset+0xa>
 8011884:	4770      	bx	lr
 8011886:	f803 1b01 	strb.w	r1, [r3], #1
 801188a:	e7f9      	b.n	8011880 <memset+0x4>

0801188c <_init>:
 801188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188e:	bf00      	nop
 8011890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011892:	bc08      	pop	{r3}
 8011894:	469e      	mov	lr, r3
 8011896:	4770      	bx	lr

08011898 <_fini>:
 8011898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189a:	bf00      	nop
 801189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801189e:	bc08      	pop	{r3}
 80118a0:	469e      	mov	lr, r3
 80118a2:	4770      	bx	lr
