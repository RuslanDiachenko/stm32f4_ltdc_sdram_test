
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f2c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029bc  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a94  08006a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  08006aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  8 .bss          000001b8  20000028  20000028  00020028  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200001e0  200001e0  00020028  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 11 .debug_info   000160e9  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b1e  00000000  00000000  00036141  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c00  00000000  00000000  00038c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000aa0  00000000  00000000  00039860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006185  00000000  00000000  0003a300  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f86  00000000  00000000  00040485  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004440b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f90  00000000  00000000  00044488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080040c0 	.word	0x080040c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080040c0 	.word	0x080040c0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f947 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f003 fac6 	bl	8003ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f95f 	bl	8000822 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f927 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000024 	.word	0x20000024
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000048 	.word	0x20000048

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000048 	.word	0x20000048

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <NVIC_EnableIRQ+0x30>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da0b      	bge.n	80006e8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	490d      	ldr	r1, [pc, #52]	; (8000708 <NVIC_SetPriority+0x4c>)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	3b04      	subs	r3, #4
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e6:	e009      	b.n	80006fc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	4908      	ldr	r1, [pc, #32]	; (800070c <NVIC_SetPriority+0x50>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000e100 	.word	0xe000e100

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf28      	it	cs
 800072e:	2304      	movcs	r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3304      	adds	r3, #4
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3b03      	subs	r3, #3
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	2201      	movs	r2, #1
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	401a      	ands	r2, r3
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000756:	2101      	movs	r1, #1
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	1e59      	subs	r1, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000798:	f7ff ff90 	bl	80006bc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff2f 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff44 	bl	800066c <NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff90 	bl	8000710 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5f 	bl	80006bc <NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff37 	bl	8000688 <NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e03b      	b.n	80008c4 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d106      	bne.n	8000866 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f003 f955 	bl	8003b10 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2202      	movs	r2, #2
 800086a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	6852      	ldr	r2, [r2, #4]
 8000880:	430a      	orrs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800088e:	f022 0107 	bic.w	r1, r2, #7
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6892      	ldr	r2, [r2, #8]
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	68c9      	ldr	r1, [r1, #12]
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d101      	bne.n	80008e8 <HAL_DMA2D_Start+0x1c>
 80008e4:	2302      	movs	r3, #2
 80008e6:	e018      	b.n	800091a <HAL_DMA2D_Start+0x4e>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2201      	movs	r2, #1
 80008ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2202      	movs	r2, #2
 80008f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f000 fa98 	bl	8000e38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	f042 0201 	orr.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0U;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b00      	cmp	r3, #0
 8000940:	d056      	beq.n	80009f0 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8000942:	f7ff fe41 	bl	80005c8 <HAL_GetTick>
 8000946:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8000948:	e04b      	b.n	80009e2 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000958:	2b00      	cmp	r3, #0
 800095a:	d023      	beq.n	80009a4 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	2b00      	cmp	r3, #0
 8000964:	d005      	beq.n	8000972 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096a:	f043 0202 	orr.w	r2, r3, #2
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d005      	beq.n	8000988 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000980:	f043 0201 	orr.w	r2, r3, #1
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2221      	movs	r2, #33	; 0x21
 800098e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2204      	movs	r2, #4
 8000994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0a2      	b.n	8000aea <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009aa:	d01a      	beq.n	80009e2 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <HAL_DMA2D_PollForTransfer+0xa0>
 80009b2:	f7ff fe09 	bl	80005c8 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d90f      	bls.n	80009e2 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c6:	f043 0220 	orr.w	r2, r3, #32
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2203      	movs	r2, #3
 80009d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80009de:	2303      	movs	r3, #3
 80009e0:	e083      	b.n	8000aea <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0ac      	beq.n	800094a <HAL_DMA2D_PollForTransfer+0x28>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 0320 	and.w	r3, r3, #32
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d106      	bne.n	8000a0c <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d061      	beq.n	8000ad0 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a0c:	f7ff fddc 	bl	80005c8 <HAL_GetTick>
 8000a10:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8000a12:	e056      	b.n	8000ac2 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d02e      	beq.n	8000a84 <HAL_DMA2D_PollForTransfer+0x162>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a34:	f043 0204 	orr.w	r2, r3, #4
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4a:	f043 0202 	orr.w	r2, r3, #2
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d005      	beq.n	8000a68 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2229      	movs	r2, #41	; 0x29
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2204      	movs	r2, #4
 8000a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e032      	b.n	8000aea <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a8a:	d01a      	beq.n	8000ac2 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <HAL_DMA2D_PollForTransfer+0x180>
 8000a92:	f7ff fd99 	bl	80005c8 <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d90f      	bls.n	8000ac2 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa6:	f043 0220 	orr.w	r2, r3, #32
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e013      	b.n	8000aea <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0a1      	beq.n	8000a14 <HAL_DMA2D_PollForTransfer+0xf2>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2212      	movs	r2, #18
 8000ad6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d026      	beq.n	8000b62 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d021      	beq.n	8000b62 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b2c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f003 0320 	and.w	r3, r3, #32
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d026      	beq.n	8000bba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d021      	beq.n	8000bba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b84:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b92:	f043 0202 	orr.w	r2, r3, #2
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d026      	beq.n	8000c12 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d021      	beq.n	8000c12 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bdc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2208      	movs	r2, #8
 8000be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bea:	f043 0204 	orr.w	r2, r3, #4
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d013      	beq.n	8000c44 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00e      	beq.n	8000c44 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	6812      	ldr	r2, [r2, #0]
 8000c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c34:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f853 	bl	8000cea <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d024      	beq.n	8000c98 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01f      	beq.n	8000c98 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c66:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d01f      	beq.n	8000ce2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d01a      	beq.n	8000ce2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f80e 	bl	8000cfe <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	3318      	adds	r3, #24
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_DMA2D_ConfigLayer+0x30>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e070      	b.n	8000e26 <HAL_DMA2D_ConfigLayer+0x112>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b0a      	cmp	r3, #10
 8000d5a:	d003      	beq.n	8000d64 <HAL_DMA2D_ConfigLayer+0x50>
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b09      	cmp	r3, #9
 8000d62:	d10c      	bne.n	8000d7e <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e00a      	b.n	8000d94 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	061b      	lsls	r3, r3, #24
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d11e      	bne.n	8000dd8 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_DMA2D_ConfigLayer+0x120>)
 8000da6:	400b      	ands	r3, r1
 8000da8:	68f9      	ldr	r1, [r7, #12]
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b0a      	cmp	r3, #10
 8000dbe:	d003      	beq.n	8000dc8 <HAL_DMA2D_ConfigLayer+0xb4>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b09      	cmp	r3, #9
 8000dc6:	d125      	bne.n	8000e14 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	68d2      	ldr	r2, [r2, #12]
 8000dd0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
 8000dd6:	e01d      	b.n	8000e14 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	69d9      	ldr	r1, [r3, #28]
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_DMA2D_ConfigLayer+0x120>)
 8000de4:	400b      	ands	r3, r1
 8000de6:	68f9      	ldr	r1, [r7, #12]
 8000de8:	430b      	orrs	r3, r1
 8000dea:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d003      	beq.n	8000e06 <HAL_DMA2D_ConfigLayer+0xf2>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b09      	cmp	r3, #9
 8000e04:	d106      	bne.n	8000e14 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	68d2      	ldr	r2, [r2, #12]
 8000e0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000e12:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	00fcfff0 	.word	0x00fcfff0

08000e38 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	6812      	ldr	r2, [r2, #0]
 8000e62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e64:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	0410      	lsls	r0, r2, #16
 8000e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e6e:	4302      	orrs	r2, r0
 8000e70:	430a      	orrs	r2, r1
 8000e72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000e84:	d174      	bne.n	8000f70 <DMA2D_SetConfig+0x138>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000e8c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000e94:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e9c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d108      	bne.n	8000ebe <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebc:	e053      	b.n	8000f66 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d106      	bne.n	8000ed4 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	e048      	b.n	8000f66 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d111      	bne.n	8000f00 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19U);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	0cdb      	lsrs	r3, r3, #19
 8000ee0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	0a9b      	lsrs	r3, r3, #10
 8000ee6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	015a      	lsls	r2, r3, #5
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	02db      	lsls	r3, r3, #11
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
 8000efe:	e032      	b.n	8000f66 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d117      	bne.n	8000f38 <DMA2D_SetConfig+0x100>
    {
      tmp1 = (tmp1 >> 31U);
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	0fdb      	lsrs	r3, r3, #31
 8000f0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	0cdb      	lsrs	r3, r3, #19
 8000f12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	0adb      	lsrs	r3, r3, #11
 8000f18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	015a      	lsls	r2, r3, #5
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	03db      	lsls	r3, r3, #15
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
 8000f36:	e016      	b.n	8000f66 <DMA2D_SetConfig+0x12e>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	0f1b      	lsrs	r3, r3, #28
 8000f3c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	0d1b      	lsrs	r3, r3, #20
 8000f42:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	0b1b      	lsrs	r3, r3, #12
 8000f48:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	011a      	lsls	r2, r3, #4
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	031b      	lsls	r3, r3, #12
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8000f6e:	e003      	b.n	8000f78 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	60da      	str	r2, [r3, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	372c      	adds	r7, #44	; 0x2c
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e177      	b.n	8001290 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8166 	bne.w	800128a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x4a>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d123      	bne.n	8001016 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	69b9      	ldr	r1, [r7, #24]
 8001012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0203 	and.w	r2, r3, #3
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d00b      	beq.n	800106a <HAL_GPIO_Init+0xe6>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	2b11      	cmp	r3, #17
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b12      	cmp	r3, #18
 8001068:	d130      	bne.n	80010cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80c0 	beq.w	800128a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4a65      	ldr	r2, [pc, #404]	; (80012a4 <HAL_GPIO_Init+0x320>)
 8001110:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_GPIO_Init+0x320>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_GPIO_Init+0x320>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001126:	4a60      	ldr	r2, [pc, #384]	; (80012a8 <HAL_GPIO_Init+0x324>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a57      	ldr	r2, [pc, #348]	; (80012ac <HAL_GPIO_Init+0x328>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d037      	beq.n	80011c2 <HAL_GPIO_Init+0x23e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a56      	ldr	r2, [pc, #344]	; (80012b0 <HAL_GPIO_Init+0x32c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d031      	beq.n	80011be <HAL_GPIO_Init+0x23a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a55      	ldr	r2, [pc, #340]	; (80012b4 <HAL_GPIO_Init+0x330>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d02b      	beq.n	80011ba <HAL_GPIO_Init+0x236>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_GPIO_Init+0x334>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x232>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a53      	ldr	r2, [pc, #332]	; (80012bc <HAL_GPIO_Init+0x338>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x22e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x33c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x22a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a51      	ldr	r2, [pc, #324]	; (80012c4 <HAL_GPIO_Init+0x340>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <HAL_GPIO_Init+0x344>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x348>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_GPIO_Init+0x34c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x21a>
 800119a:	2309      	movs	r3, #9
 800119c:	e012      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 800119e:	230a      	movs	r3, #10
 80011a0:	e010      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011a2:	2308      	movs	r3, #8
 80011a4:	e00e      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4934      	ldr	r1, [pc, #208]	; (80012a8 <HAL_GPIO_Init+0x324>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <HAL_GPIO_Init+0x350>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001206:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <HAL_GPIO_Init+0x350>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_GPIO_Init+0x350>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001230:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <HAL_GPIO_Init+0x350>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_GPIO_Init+0x350>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_GPIO_Init+0x350>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_GPIO_Init+0x350>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_GPIO_Init+0x350>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f ae84 	bls.w	8000fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	3724      	adds	r7, #36	; 0x24
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40022400 	.word	0x40022400
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0bf      	b.n	80014a6 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f002 fc10 	bl	8003b60 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	6992      	ldr	r2, [r2, #24]
 8001352:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001356:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	6991      	ldr	r1, [r2, #24]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6850      	ldr	r0, [r2, #4]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6892      	ldr	r2, [r2, #8]
 800136a:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001370:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6912      	ldr	r2, [r2, #16]
 8001376:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001378:	430a      	orrs	r2, r1
 800137a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6899      	ldr	r1, [r3, #8]
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <HAL_LTDC_Init+0x1a4>)
 8001388:	400b      	ands	r3, r1
 800138a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	6891      	ldr	r1, [r2, #8]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6990      	ldr	r0, [r2, #24]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4302      	orrs	r2, r0
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68d9      	ldr	r1, [r3, #12]
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <HAL_LTDC_Init+0x1a4>)
 80013b6:	400b      	ands	r3, r1
 80013b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	68d1      	ldr	r1, [r2, #12]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6a10      	ldr	r0, [r2, #32]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4302      	orrs	r2, r0
 80013d4:	430a      	orrs	r2, r1
 80013d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6919      	ldr	r1, [r3, #16]
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_LTDC_Init+0x1a4>)
 80013e4:	400b      	ands	r3, r1
 80013e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	041b      	lsls	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	6911      	ldr	r1, [r2, #16]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4302      	orrs	r2, r0
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6959      	ldr	r1, [r3, #20]
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_LTDC_Init+0x1a4>)
 8001412:	400b      	ands	r3, r1
 8001414:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	6951      	ldr	r1, [r2, #20]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4302      	orrs	r2, r0
 8001430:	430a      	orrs	r2, r1
 8001432:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001452:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4302      	orrs	r2, r0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800146e:	4302      	orrs	r2, r0
 8001470:	430a      	orrs	r2, r1
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800147e:	f042 0206 	orr.w	r2, r2, #6
 8001482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	6992      	ldr	r2, [r2, #24]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	f000f800 	.word	0xf000f800

080014b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_LTDC_ConfigLayer+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e02c      	b.n	8001528 <HAL_LTDC_ConfigLayer+0x74>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2202      	movs	r2, #2
 80014da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2134      	movs	r1, #52	; 0x34
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f847 	bl	800159c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2201      	movs	r2, #1
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bdb0      	pop	{r4, r5, r7, pc}

08001530 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_LTDC_SetAddress+0x1a>
 8001546:	2302      	movs	r3, #2
 8001548:	e024      	b.n	8001594 <HAL_LTDC_SetAddress+0x64>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2234      	movs	r2, #52	; 0x34
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	3338      	adds	r3, #56	; 0x38
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f811 	bl	800159c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	0c1b      	lsrs	r3, r3, #16
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	4413      	add	r3, r2
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4413      	add	r3, r2
 80015d6:	3384      	adds	r3, #132	; 0x84
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	01db      	lsls	r3, r3, #7
 80015e4:	440b      	add	r3, r1
 80015e6:	3384      	adds	r3, #132	; 0x84
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80015ee:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	01db      	lsls	r3, r3, #7
 80015fa:	4413      	add	r3, r2
 80015fc:	3384      	adds	r3, #132	; 0x84
 80015fe:	4619      	mov	r1, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	4413      	add	r3, r2
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001628:	4413      	add	r3, r2
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	01db      	lsls	r3, r3, #7
 8001638:	4413      	add	r3, r2
 800163a:	3384      	adds	r3, #132	; 0x84
 800163c:	461a      	mov	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	440b      	add	r3, r1
 800164a:	3384      	adds	r3, #132	; 0x84
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001652:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	4413      	add	r3, r2
 8001660:	3384      	adds	r3, #132	; 0x84
 8001662:	4619      	mov	r1, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001672:	4413      	add	r3, r2
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	4413      	add	r3, r2
 8001688:	3384      	adds	r3, #132	; 0x84
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	01db      	lsls	r3, r3, #7
 8001696:	440b      	add	r3, r1
 8001698:	3384      	adds	r3, #132	; 0x84
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f023 0307 	bic.w	r3, r3, #7
 80016a0:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	4413      	add	r3, r2
 80016ae:	3384      	adds	r3, #132	; 0x84
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	4413      	add	r3, r2
 80016e0:	3384      	adds	r3, #132	; 0x84
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	01db      	lsls	r3, r3, #7
 80016ee:	4413      	add	r3, r2
 80016f0:	3384      	adds	r3, #132	; 0x84
 80016f2:	461a      	mov	r2, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	4413      	add	r3, r2
 8001704:	3384      	adds	r3, #132	; 0x84
 8001706:	4619      	mov	r1, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800170e:	461a      	mov	r2, r3
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	431a      	orrs	r2, r3
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	431a      	orrs	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	01db      	lsls	r3, r3, #7
 8001728:	4413      	add	r3, r2
 800172a:	3384      	adds	r3, #132	; 0x84
 800172c:	461a      	mov	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	440b      	add	r3, r1
 800173a:	3384      	adds	r3, #132	; 0x84
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001742:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	4413      	add	r3, r2
 8001750:	3384      	adds	r3, #132	; 0x84
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4413      	add	r3, r2
 8001766:	3384      	adds	r3, #132	; 0x84
 8001768:	461a      	mov	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	01db      	lsls	r3, r3, #7
 8001774:	440b      	add	r3, r1
 8001776:	3384      	adds	r3, #132	; 0x84
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	01db      	lsls	r3, r3, #7
 800178e:	4413      	add	r3, r2
 8001790:	3384      	adds	r3, #132	; 0x84
 8001792:	4619      	mov	r1, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4313      	orrs	r3, r2
 800179e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	01db      	lsls	r3, r3, #7
 80017aa:	4413      	add	r3, r2
 80017ac:	3384      	adds	r3, #132	; 0x84
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	01db      	lsls	r3, r3, #7
 80017ba:	4413      	add	r3, r2
 80017bc:	3384      	adds	r3, #132	; 0x84
 80017be:	461a      	mov	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	01db      	lsls	r3, r3, #7
 80017ce:	4413      	add	r3, r2
 80017d0:	3384      	adds	r3, #132	; 0x84
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 80017e2:	2304      	movs	r3, #4
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e01b      	b.n	8001820 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 80017f0:	2303      	movs	r3, #3
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	e014      	b.n	8001820 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d00b      	beq.n	8001816 <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d007      	beq.n	8001816 <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800180a:	2b03      	cmp	r3, #3
 800180c:	d003      	beq.n	8001816 <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001812:	2b07      	cmp	r3, #7
 8001814:	d102      	bne.n	800181c <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 8001816:	2302      	movs	r3, #2
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e001      	b.n	8001820 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 800181c:	2301      	movs	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	01db      	lsls	r3, r3, #7
 800182a:	4413      	add	r3, r2
 800182c:	3384      	adds	r3, #132	; 0x84
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	01db      	lsls	r3, r3, #7
 800183a:	440b      	add	r3, r1
 800183c:	3384      	adds	r3, #132	; 0x84
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001844:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	4413      	add	r3, r2
 8001852:	3384      	adds	r3, #132	; 0x84
 8001854:	4618      	mov	r0, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1acb      	subs	r3, r1, r3
 800186c:	69f9      	ldr	r1, [r7, #28]
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	3303      	adds	r3, #3
 8001874:	4313      	orrs	r3, r2
 8001876:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	01db      	lsls	r3, r3, #7
 8001882:	4413      	add	r3, r2
 8001884:	3384      	adds	r3, #132	; 0x84
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	01db      	lsls	r3, r3, #7
 8001892:	440b      	add	r3, r1
 8001894:	3384      	adds	r3, #132	; 0x84
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800189c:	f023 0307 	bic.w	r3, r3, #7
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	01db      	lsls	r3, r3, #7
 80018ac:	4413      	add	r3, r2
 80018ae:	3384      	adds	r3, #132	; 0x84
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	01db      	lsls	r3, r3, #7
 80018c2:	4413      	add	r3, r2
 80018c4:	3384      	adds	r3, #132	; 0x84
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	440b      	add	r3, r1
 80018d4:	3384      	adds	r3, #132	; 0x84
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6013      	str	r3, [r2, #0]
}
 80018de:	bf00      	nop
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_PWREx_EnableOverDrive+0x90>)
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_PWREx_EnableOverDrive+0x90>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_PWREx_EnableOverDrive+0x90>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_PWREx_EnableOverDrive+0x94>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7fe fe56 	bl	80005c8 <HAL_GetTick>
 800191c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800191e:	e009      	b.n	8001934 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001920:	f7fe fe52 	bl	80005c8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800192e:	d901      	bls.n	8001934 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e01f      	b.n	8001974 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_PWREx_EnableOverDrive+0x98>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d1ee      	bne.n	8001920 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7fe fe3e 	bl	80005c8 <HAL_GetTick>
 800194c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800194e:	e009      	b.n	8001964 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001950:	f7fe fe3a 	bl	80005c8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800195e:	d901      	bls.n	8001964 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e007      	b.n	8001974 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_PWREx_EnableOverDrive+0x98>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001970:	d1ee      	bne.n	8001950 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	420e0040 	.word	0x420e0040
 8001984:	40007000 	.word	0x40007000
 8001988:	420e0044 	.word	0x420e0044

0800198c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e22d      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d075      	beq.n	8001a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019aa:	4ba3      	ldr	r3, [pc, #652]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4ba0      	ldr	r3, [pc, #640]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d112      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	4b9d      	ldr	r3, [pc, #628]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b99      	ldr	r3, [pc, #612]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d05b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d157      	bne.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e208      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x74>
 80019f2:	4a91      	ldr	r2, [pc, #580]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	4b90      	ldr	r3, [pc, #576]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4a8b      	ldr	r2, [pc, #556]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	4b8a      	ldr	r3, [pc, #552]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4a88      	ldr	r2, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	4b87      	ldr	r3, [pc, #540]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a24:	4a84      	ldr	r2, [pc, #528]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	4b84      	ldr	r3, [pc, #528]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4a81      	ldr	r2, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe fdc0 	bl	80005c8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7fe fdbc 	bl	80005c8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1cd      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe fdac 	bl	80005c8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7fe fda8 	bl	80005c8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1b9      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e18d      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4956      	ldr	r1, [pc, #344]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x2b0>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7fe fd61 	bl	80005c8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7fe fd5d 	bl	80005c8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e16e      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4943      	ldr	r1, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x2b0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7fe fd40 	bl	80005c8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fd3c 	bl	80005c8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e14d      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d030      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x2b4>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7fe fd20 	bl	80005c8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7fe fd1c 	bl	80005c8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e12d      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x200>
 8001baa:	e015      	b.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x2b4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe fd09 	bl	80005c8 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7fe fd05 	bl	80005c8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e116      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a0 	beq.w	8001d26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x2b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d121      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_RCC_OscConfig+0x2b8>)
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_RCC_OscConfig+0x2b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7fe fccb 	bl	80005c8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e011      	b.n	8001c5a <HAL_RCC_OscConfig+0x2ce>
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	42470000 	.word	0x42470000
 8001c40:	42470e80 	.word	0x42470e80
 8001c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe fcbe 	bl	80005c8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0cf      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001c6e:	4a66      	ldr	r2, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001c70:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	e01c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x32a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x312>
 8001c84:	4a60      	ldr	r2, [pc, #384]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001c86:	4b60      	ldr	r3, [pc, #384]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x32a>
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001ca0:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4a57      	ldr	r2, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001cac:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fc83 	bl	80005c8 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe fc7f 	bl	80005c8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e08e      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ee      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x33a>
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe fc6d 	bl	80005c8 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7fe fc69 	bl	80005c8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e078      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ee      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001d1c:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d064      	beq.n	8001df8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d05c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d141      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_RCC_OscConfig+0x480>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe fc3e 	bl	80005c8 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe fc3a 	bl	80005c8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e04b      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6e:	4926      	ldr	r1, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	019b      	lsls	r3, r3, #6
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_OscConfig+0x480>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe fc13 	bl	80005c8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe fc0f 	bl	80005c8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e020      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x41a>
 8001dc4:	e018      	b.n	8001df8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_OscConfig+0x480>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fbfc 	bl	80005c8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe fbf8 	bl	80005c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x47c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x448>
 8001df2:	e001      	b.n	8001df8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40007000 	.word	0x40007000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	42470060 	.word	0x42470060

08001e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0ca      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d20c      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 020f 	and.w	r2, r3, #15
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b6      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	494f      	ldr	r1, [pc, #316]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d044      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d119      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07d      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06d      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e065      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 0203 	bic.w	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fb62 	bl	80005c8 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe fb5e 	bl	80005c8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e04d      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 020f 	and.w	r2, r3, #15
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d90c      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e030      	b.n	8001fba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f82:	4911      	ldr	r1, [pc, #68]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f81d 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	fa21 f303 	lsr.w	r3, r1, r3
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7fe fac4 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08006a84 	.word	0x08006a84
 8001fd0:	20000024 	.word	0x20000024

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	617a      	str	r2, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001fe8:	2200      	movs	r2, #0
 8001fea:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fec:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fee:	6892      	ldr	r2, [r2, #8]
 8001ff0:	f002 020c 	and.w	r2, r2, #12
 8001ff4:	2a04      	cmp	r2, #4
 8001ff6:	d007      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff8:	2a08      	cmp	r2, #8
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x3a>
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	f040 8090 	bne.w	8002122 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCC_GetSysClockFreq+0x164>)
 8002004:	613b      	str	r3, [r7, #16]
       break;
 8002006:	e08f      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_GetSysClockFreq+0x168>)
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	e08c      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800200e:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_RCC_GetSysClockFreq+0x160>)
 8002010:	6852      	ldr	r2, [r2, #4]
 8002012:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002016:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002018:	4a46      	ldr	r2, [pc, #280]	; (8002134 <HAL_RCC_GetSysClockFreq+0x160>)
 800201a:	6852      	ldr	r2, [r2, #4]
 800201c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002020:	2a00      	cmp	r2, #0
 8002022:	d023      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_GetSysClockFreq+0x160>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	f04f 0400 	mov.w	r4, #0
 800202e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	ea03 0301 	and.w	r3, r3, r1
 800203a:	ea04 0402 	and.w	r4, r4, r2
 800203e:	4a3f      	ldr	r2, [pc, #252]	; (800213c <HAL_RCC_GetSysClockFreq+0x168>)
 8002040:	fb02 f104 	mul.w	r1, r2, r4
 8002044:	2200      	movs	r2, #0
 8002046:	fb02 f203 	mul.w	r2, r2, r3
 800204a:	440a      	add	r2, r1
 800204c:	493b      	ldr	r1, [pc, #236]	; (800213c <HAL_RCC_GetSysClockFreq+0x168>)
 800204e:	fba3 0101 	umull	r0, r1, r3, r1
 8002052:	1853      	adds	r3, r2, r1
 8002054:	4619      	mov	r1, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	461a      	mov	r2, r3
 800205e:	4623      	mov	r3, r4
 8002060:	f7fe f8c4 	bl	80001ec <__aeabi_uldivmod>
 8002064:	4603      	mov	r3, r0
 8002066:	460c      	mov	r4, r1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e04c      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206c:	4a31      	ldr	r2, [pc, #196]	; (8002134 <HAL_RCC_GetSysClockFreq+0x160>)
 800206e:	6852      	ldr	r2, [r2, #4]
 8002070:	0992      	lsrs	r2, r2, #6
 8002072:	4611      	mov	r1, r2
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f240 15ff 	movw	r5, #511	; 0x1ff
 800207c:	f04f 0600 	mov.w	r6, #0
 8002080:	ea05 0501 	and.w	r5, r5, r1
 8002084:	ea06 0602 	and.w	r6, r6, r2
 8002088:	4629      	mov	r1, r5
 800208a:	4632      	mov	r2, r6
 800208c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002090:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002094:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002098:	4651      	mov	r1, sl
 800209a:	465a      	mov	r2, fp
 800209c:	46aa      	mov	sl, r5
 800209e:	46b3      	mov	fp, r6
 80020a0:	4655      	mov	r5, sl
 80020a2:	465e      	mov	r6, fp
 80020a4:	1b4d      	subs	r5, r1, r5
 80020a6:	eb62 0606 	sbc.w	r6, r2, r6
 80020aa:	4629      	mov	r1, r5
 80020ac:	4632      	mov	r2, r6
 80020ae:	0194      	lsls	r4, r2, #6
 80020b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020b4:	018b      	lsls	r3, r1, #6
 80020b6:	1a5b      	subs	r3, r3, r1
 80020b8:	eb64 0402 	sbc.w	r4, r4, r2
 80020bc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80020c0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80020c4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80020c8:	4643      	mov	r3, r8
 80020ca:	464c      	mov	r4, r9
 80020cc:	4655      	mov	r5, sl
 80020ce:	465e      	mov	r6, fp
 80020d0:	18ed      	adds	r5, r5, r3
 80020d2:	eb46 0604 	adc.w	r6, r6, r4
 80020d6:	462b      	mov	r3, r5
 80020d8:	4634      	mov	r4, r6
 80020da:	02a2      	lsls	r2, r4, #10
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	029b      	lsls	r3, r3, #10
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	e897 0018 	ldmia.w	r7, {r3, r4}
 80020ee:	4618      	mov	r0, r3
 80020f0:	4621      	mov	r1, r4
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f04f 0400 	mov.w	r4, #0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	f7fe f876 	bl	80001ec <__aeabi_uldivmod>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0x160>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0c1b      	lsrs	r3, r3, #16
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	3301      	adds	r3, #1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	613b      	str	r3, [r7, #16]
      break;
 8002120:	e002      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetSysClockFreq+0x164>)
 8002124:	613b      	str	r3, [r7, #16]
      break;
 8002126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002128:	693b      	ldr	r3, [r7, #16]
}
 800212a:	4618      	mov	r0, r3
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	00f42400 	.word	0x00f42400
 800213c:	017d7840 	.word	0x017d7840

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002164:	2b00      	cmp	r3, #0
 8002166:	d061      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002168:	4ba3      	ldr	r3, [pc, #652]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800216e:	f7fe fa2b 	bl	80005c8 <HAL_GetTick>
 8002172:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002176:	f7fe fa27 	bl	80005c8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e177      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002188:	4b9c      	ldr	r3, [pc, #624]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80021a0:	4996      	ldr	r1, [pc, #600]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	019a      	lsls	r2, r3, #6
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01f      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021c0:	4b8e      	ldr	r3, [pc, #568]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c6:	0f1b      	lsrs	r3, r3, #28
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80021ce:	498b      	ldr	r1, [pc, #556]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	019a      	lsls	r2, r3, #6
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	061b      	lsls	r3, r3, #24
 80021dc:	431a      	orrs	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	071b      	lsls	r3, r3, #28
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021e8:	4984      	ldr	r1, [pc, #528]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021ea:	4b84      	ldr	r3, [pc, #528]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f0:	f023 021f 	bic.w	r2, r3, #31
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002200:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002206:	f7fe f9df 	bl	80005c8 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800220e:	f7fe f9db 	bl	80005c8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e12b      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002240:	2b00      	cmp	r3, #0
 8002242:	d079      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002244:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800224a:	f7fe f9bd 	bl	80005c8 <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002252:	f7fe f9b9 	bl	80005c8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e109      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002264:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002270:	d0ef      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d020      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	0f1b      	lsrs	r3, r3, #28
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800228c:	495b      	ldr	r1, [pc, #364]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	019a      	lsls	r2, r3, #6
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	431a      	orrs	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	071b      	lsls	r3, r3, #28
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022a6:	4955      	ldr	r1, [pc, #340]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022a8:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01e      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80022da:	4948      	ldr	r1, [pc, #288]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	019a      	lsls	r2, r3, #6
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	071b      	lsls	r3, r3, #28
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022f4:	4941      	ldr	r1, [pc, #260]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002310:	f7fe f95a 	bl	80005c8 <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002318:	f7fe f956 	bl	80005c8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0a6      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002336:	d1ef      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 808d 	beq.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002362:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800236e:	f7fe f92b 	bl	80005c8 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7fe f927 	bl	80005c8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e077      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d039      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d032      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023c8:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01e      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe f8f5 	bl	80005c8 <HAL_GetTick>
 80023de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e014      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe f8f1 	bl	80005c8 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d90b      	bls.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e03f      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80023f8:	42470068 	.word	0x42470068
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470070 	.word	0x42470070
 8002404:	40007000 	.word	0x40007000
 8002408:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0e4      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002424:	d10d      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8002426:	4916      	ldr	r1, [pc, #88]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
 8002440:	e005      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800244c:	6093      	str	r3, [r2, #8]
 800244e:	490c      	ldr	r1, [pc, #48]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	4313      	orrs	r3, r2
 800245e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002474:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	424711e0 	.word	0x424711e0

08002488 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e025      	b.n	80024e8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f001 fd37 	bl	8003f24 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 fa81 	bl	80029d0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	461a      	mov	r2, r3
 80024d8:	6839      	ldr	r1, [r7, #0]
 80024da:	f000 faec 	bl	8002ab6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d101      	bne.n	800250c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
 800250a:	e018      	b.n	800253e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fb49 	bl	8002bb4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d104      	bne.n	8002534 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002532:	e003      	b.n	800253c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d101      	bne.n	8002560 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	e00e      	b.n	800257e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fb5c 	bl	8002c2c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e055      	b.n	8002644 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f001 fbe2 	bl	8003d7c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6851      	ldr	r1, [r2, #4]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6912      	ldr	r2, [r2, #16]
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6952      	ldr	r2, [r2, #20]
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6992      	ldr	r2, [r2, #24]
 80025f4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	69d2      	ldr	r2, [r2, #28]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6a12      	ldr	r2, [r2, #32]
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6992      	ldr	r2, [r2, #24]
 8002616:	0c12      	lsrs	r2, r2, #16
 8002618:	f002 0104 	and.w	r1, r2, #4
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	69d2      	ldr	r2, [r2, #28]
 800262e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002632:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_SPI_Transmit+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e123      	b.n	80028ba <HAL_SPI_Transmit+0x26e>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800267a:	f7fd ffa5 	bl	80005c8 <HAL_GetTick>
 800267e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d002      	beq.n	8002692 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800268c:	2302      	movs	r3, #2
 800268e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002690:	e10a      	b.n	80028a8 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_SPI_Transmit+0x52>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026a2:	e101      	b.n	80028a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ea:	d107      	bne.n	80026fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d007      	beq.n	800271a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002722:	d147      	bne.n	80027b4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_SPI_Transmit+0xea>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d138      	bne.n	80027a8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	8812      	ldrh	r2, [r2, #0]
 800273e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3302      	adds	r3, #2
 8002744:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002754:	e028      	b.n	80027a8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b02      	cmp	r3, #2
 8002762:	d10f      	bne.n	8002784 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3302      	adds	r3, #2
 8002772:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36
 8002782:	e011      	b.n	80027a8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_SPI_Transmit+0x156>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002790:	d00a      	beq.n	80027a8 <HAL_SPI_Transmit+0x15c>
 8002792:	f7fd ff19 	bl	80005c8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027a6:	e07f      	b.n	80028a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1d1      	bne.n	8002756 <HAL_SPI_Transmit+0x10a>
 80027b2:	e048      	b.n	8002846 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_SPI_Transmit+0x17a>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d13a      	bne.n	800283c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027e6:	e029      	b.n	800283c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d110      	bne.n	8002818 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	; 0x36
 8002816:	e011      	b.n	800283c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_SPI_Transmit+0x1ea>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002824:	d00a      	beq.n	800283c <HAL_SPI_Transmit+0x1f0>
 8002826:	f7fd fecf 	bl	80005c8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	77fb      	strb	r3, [r7, #31]
          goto error;
 800283a:	e035      	b.n	80028a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1d0      	bne.n	80027e8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	2102      	movs	r1, #2
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f836 	bl	80028c2 <SPI_WaitFlagStateUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002860:	e022      	b.n	80028a8 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f894 	bl	8002994 <SPI_CheckFlag_BSY>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800287c:	e014      	b.n	80028a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80028d0:	e04d      	b.n	800296e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d8:	d049      	beq.n	800296e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80028e0:	f7fd fe72 	bl	80005c8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad2      	subs	r2, r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d33e      	bcc.n	800296e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	6852      	ldr	r2, [r2, #4]
 80028fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028fe:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002908:	d111      	bne.n	800292e <SPI_WaitFlagStateUntilTimeout+0x6c>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002912:	d004      	beq.n	800291e <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291c:	d107      	bne.n	800292e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002936:	d110      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002946:	400b      	ands	r3, r1
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e00e      	b.n	800298c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d101      	bne.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800297e:	2201      	movs	r2, #1
 8002980:	e000      	b.n	8002984 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002982:	2200      	movs	r2, #0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d1a3      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff ff89 	bl	80028c2 <SPI_WaitFlagStateUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	f043 0220 	orr.w	r2, r3, #32
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e000      	b.n	80029c8 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d029      	beq.n	8002a3e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029fa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002a04:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8002a0a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8002a10:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8002a16:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8002a1c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8002a22:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8002a28:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8002a2e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e034      	b.n	8002aa8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a4a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002a54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002a5a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a72:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002a7c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8002a82:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8002a88:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8002a8e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8002a94:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d02e      	beq.n	8002b2e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002adc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002aec:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002af6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002b00:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002b0a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002b14:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e03b      	b.n	8002ba6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b3e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002b50:	4313      	orrs	r3, r2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b64:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002b74:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8002b7e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002b88:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002b92:	4313      	orrs	r3, r2
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002bd0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8002bda:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002bec:	f7fd fcec 	bl	80005c8 <HAL_GetTick>
 8002bf0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002bf2:	e010      	b.n	8002c16 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfa:	d00c      	beq.n	8002c16 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <FMC_SDRAM_SendCommand+0x5e>
 8002c02:	f7fd fce1 	bl	80005c8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d901      	bls.n	8002c16 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e006      	b.n	8002c24 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e8      	bne.n	8002bf4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8002c56:	20ca      	movs	r0, #202	; 0xca
 8002c58:	f000 f944 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8002c5c:	20c3      	movs	r0, #195	; 0xc3
 8002c5e:	f000 f96b 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x08);
 8002c62:	2008      	movs	r0, #8
 8002c64:	f000 f968 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x50);
 8002c68:	2050      	movs	r0, #80	; 0x50
 8002c6a:	f000 f965 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 8002c6e:	20cf      	movs	r0, #207	; 0xcf
 8002c70:	f000 f938 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f000 f95f 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8002c7a:	20c1      	movs	r0, #193	; 0xc1
 8002c7c:	f000 f95c 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x30);
 8002c80:	2030      	movs	r0, #48	; 0x30
 8002c82:	f000 f959 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8002c86:	20ed      	movs	r0, #237	; 0xed
 8002c88:	f000 f92c 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8002c8c:	2064      	movs	r0, #100	; 0x64
 8002c8e:	f000 f953 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x03);
 8002c92:	2003      	movs	r0, #3
 8002c94:	f000 f950 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x12);
 8002c98:	2012      	movs	r0, #18
 8002c9a:	f000 f94d 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x81);
 8002c9e:	2081      	movs	r0, #129	; 0x81
 8002ca0:	f000 f94a 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 8002ca4:	20e8      	movs	r0, #232	; 0xe8
 8002ca6:	f000 f91d 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8002caa:	2085      	movs	r0, #133	; 0x85
 8002cac:	f000 f944 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f000 f941 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x78);
 8002cb6:	2078      	movs	r0, #120	; 0x78
 8002cb8:	f000 f93e 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8002cbc:	20cb      	movs	r0, #203	; 0xcb
 8002cbe:	f000 f911 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8002cc2:	2039      	movs	r0, #57	; 0x39
 8002cc4:	f000 f938 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	f000 f935 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f000 f932 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x34);
 8002cd4:	2034      	movs	r0, #52	; 0x34
 8002cd6:	f000 f92f 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x02);
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f000 f92c 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 8002ce0:	20f7      	movs	r0, #247	; 0xf7
 8002ce2:	f000 f8ff 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8002ce6:	2020      	movs	r0, #32
 8002ce8:	f000 f926 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8002cec:	20ea      	movs	r0, #234	; 0xea
 8002cee:	f000 f8f9 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 f920 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f000 f91d 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 8002cfe:	20b1      	movs	r0, #177	; 0xb1
 8002d00:	f000 f8f0 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f000 f917 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8002d0a:	201b      	movs	r0, #27
 8002d0c:	f000 f914 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8002d10:	20b6      	movs	r0, #182	; 0xb6
 8002d12:	f000 f8e7 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002d16:	200a      	movs	r0, #10
 8002d18:	f000 f90e 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0xA2);
 8002d1c:	20a2      	movs	r0, #162	; 0xa2
 8002d1e:	f000 f90b 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 8002d22:	20c0      	movs	r0, #192	; 0xc0
 8002d24:	f000 f8de 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8002d28:	2010      	movs	r0, #16
 8002d2a:	f000 f905 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8002d2e:	20c1      	movs	r0, #193	; 0xc1
 8002d30:	f000 f8d8 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8002d34:	2010      	movs	r0, #16
 8002d36:	f000 f8ff 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8002d3a:	20c5      	movs	r0, #197	; 0xc5
 8002d3c:	f000 f8d2 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 8002d40:	2045      	movs	r0, #69	; 0x45
 8002d42:	f000 f8f9 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x15);
 8002d46:	2015      	movs	r0, #21
 8002d48:	f000 f8f6 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 8002d4c:	20c7      	movs	r0, #199	; 0xc7
 8002d4e:	f000 f8c9 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8002d52:	2090      	movs	r0, #144	; 0x90
 8002d54:	f000 f8f0 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8002d58:	2036      	movs	r0, #54	; 0x36
 8002d5a:	f000 f8c3 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8002d5e:	20c8      	movs	r0, #200	; 0xc8
 8002d60:	f000 f8ea 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8002d64:	20f2      	movs	r0, #242	; 0xf2
 8002d66:	f000 f8bd 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f000 f8e4 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8002d70:	20b0      	movs	r0, #176	; 0xb0
 8002d72:	f000 f8b7 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8002d76:	20c2      	movs	r0, #194	; 0xc2
 8002d78:	f000 f8de 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8002d7c:	20b6      	movs	r0, #182	; 0xb6
 8002d7e:	f000 f8b1 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002d82:	200a      	movs	r0, #10
 8002d84:	f000 f8d8 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0xA7);
 8002d88:	20a7      	movs	r0, #167	; 0xa7
 8002d8a:	f000 f8d5 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x27);
 8002d8e:	2027      	movs	r0, #39	; 0x27
 8002d90:	f000 f8d2 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x04);
 8002d94:	2004      	movs	r0, #4
 8002d96:	f000 f8cf 	bl	8002f38 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8002d9a:	202a      	movs	r0, #42	; 0x2a
 8002d9c:	f000 f8a2 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 f8c9 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f000 f8c6 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 f8c3 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8002db2:	20ef      	movs	r0, #239	; 0xef
 8002db4:	f000 f8c0 	bl	8002f38 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8002db8:	202b      	movs	r0, #43	; 0x2b
 8002dba:	f000 f893 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f000 f8ba 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f000 f8b7 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x01);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f000 f8b4 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8002dd0:	203f      	movs	r0, #63	; 0x3f
 8002dd2:	f000 f8b1 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8002dd6:	20f6      	movs	r0, #246	; 0xf6
 8002dd8:	f000 f884 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f000 f8ab 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f000 f8a8 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x06);
 8002de8:	2006      	movs	r0, #6
 8002dea:	f000 f8a5 	bl	8002f38 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8002dee:	202c      	movs	r0, #44	; 0x2c
 8002df0:	f000 f878 	bl	8002ee4 <LCD_WriteCommand>
	HAL_Delay(100);
 8002df4:	2064      	movs	r0, #100	; 0x64
 8002df6:	f7fd fbf3 	bl	80005e0 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8002dfa:	2026      	movs	r0, #38	; 0x26
 8002dfc:	f000 f872 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f000 f899 	bl	8002f38 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8002e06:	20e0      	movs	r0, #224	; 0xe0
 8002e08:	f000 f86c 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8002e0c:	200f      	movs	r0, #15
 8002e0e:	f000 f893 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x29);
 8002e12:	2029      	movs	r0, #41	; 0x29
 8002e14:	f000 f890 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x24);
 8002e18:	2024      	movs	r0, #36	; 0x24
 8002e1a:	f000 f88d 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8002e1e:	200c      	movs	r0, #12
 8002e20:	f000 f88a 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8002e24:	200e      	movs	r0, #14
 8002e26:	f000 f887 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x09);
 8002e2a:	2009      	movs	r0, #9
 8002e2c:	f000 f884 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8002e30:	204e      	movs	r0, #78	; 0x4e
 8002e32:	f000 f881 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x78);
 8002e36:	2078      	movs	r0, #120	; 0x78
 8002e38:	f000 f87e 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8002e3c:	203c      	movs	r0, #60	; 0x3c
 8002e3e:	f000 f87b 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x09);
 8002e42:	2009      	movs	r0, #9
 8002e44:	f000 f878 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x13);
 8002e48:	2013      	movs	r0, #19
 8002e4a:	f000 f875 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x05);
 8002e4e:	2005      	movs	r0, #5
 8002e50:	f000 f872 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x17);
 8002e54:	2017      	movs	r0, #23
 8002e56:	f000 f86f 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x11);
 8002e5a:	2011      	movs	r0, #17
 8002e5c:	f000 f86c 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f000 f869 	bl	8002f38 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8002e66:	20e1      	movs	r0, #225	; 0xe1
 8002e68:	f000 f83c 	bl	8002ee4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f000 f863 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x16);
 8002e72:	2016      	movs	r0, #22
 8002e74:	f000 f860 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8002e78:	201b      	movs	r0, #27
 8002e7a:	f000 f85d 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x04);
 8002e7e:	2004      	movs	r0, #4
 8002e80:	f000 f85a 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x11);
 8002e84:	2011      	movs	r0, #17
 8002e86:	f000 f857 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x07);
 8002e8a:	2007      	movs	r0, #7
 8002e8c:	f000 f854 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x31);
 8002e90:	2031      	movs	r0, #49	; 0x31
 8002e92:	f000 f851 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x33);
 8002e96:	2033      	movs	r0, #51	; 0x33
 8002e98:	f000 f84e 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x42);
 8002e9c:	2042      	movs	r0, #66	; 0x42
 8002e9e:	f000 f84b 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x05);
 8002ea2:	2005      	movs	r0, #5
 8002ea4:	f000 f848 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8002ea8:	200c      	movs	r0, #12
 8002eaa:	f000 f845 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8002eae:	200a      	movs	r0, #10
 8002eb0:	f000 f842 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x28);
 8002eb4:	2028      	movs	r0, #40	; 0x28
 8002eb6:	f000 f83f 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8002eba:	202f      	movs	r0, #47	; 0x2f
 8002ebc:	f000 f83c 	bl	8002f38 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8002ec0:	200f      	movs	r0, #15
 8002ec2:	f000 f839 	bl	8002f38 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8002ec6:	2011      	movs	r0, #17
 8002ec8:	f000 f80c 	bl	8002ee4 <LCD_WriteCommand>
	HAL_Delay(100);
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	f7fd fb87 	bl	80005e0 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8002ed2:	2029      	movs	r0, #41	; 0x29
 8002ed4:	f000 f806 	bl	8002ee4 <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8002ed8:	202c      	movs	r0, #44	; 0x2c
 8002eda:	f000 f803 	bl	8002ee4 <LCD_WriteCommand>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	733b      	strb	r3, [r7, #12]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002efc:	480b      	ldr	r0, [pc, #44]	; (8002f2c <LCD_WriteCommand+0x48>)
 8002efe:	f7fe f9eb 	bl	80012d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2104      	movs	r1, #4
 8002f06:	480a      	ldr	r0, [pc, #40]	; (8002f30 <LCD_WriteCommand+0x4c>)
 8002f08:	f7fe f9e6 	bl	80012d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8002f0c:	f107 010c 	add.w	r1, r7, #12
 8002f10:	2364      	movs	r3, #100	; 0x64
 8002f12:	2201      	movs	r2, #1
 8002f14:	4807      	ldr	r0, [pc, #28]	; (8002f34 <LCD_WriteCommand+0x50>)
 8002f16:	f7ff fb99 	bl	800264c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	4804      	ldr	r0, [pc, #16]	; (8002f30 <LCD_WriteCommand+0x4c>)
 8002f20:	f7fe f9da 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40020800 	.word	0x40020800
 8002f34:	2000005c 	.word	0x2000005c

08002f38 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	733b      	strb	r3, [r7, #12]
 8002f46:	2300      	movs	r3, #0
 8002f48:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f50:	480b      	ldr	r0, [pc, #44]	; (8002f80 <LCD_WriteData+0x48>)
 8002f52:	f7fe f9c1 	bl	80012d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2104      	movs	r1, #4
 8002f5a:	480a      	ldr	r0, [pc, #40]	; (8002f84 <LCD_WriteData+0x4c>)
 8002f5c:	f7fe f9bc 	bl	80012d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8002f60:	f107 010c 	add.w	r1, r7, #12
 8002f64:	2364      	movs	r3, #100	; 0x64
 8002f66:	2201      	movs	r2, #1
 8002f68:	4807      	ldr	r0, [pc, #28]	; (8002f88 <LCD_WriteData+0x50>)
 8002f6a:	f7ff fb6f 	bl	800264c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2104      	movs	r1, #4
 8002f72:	4804      	ldr	r0, [pc, #16]	; (8002f84 <LCD_WriteData+0x4c>)
 8002f74:	f7fe f9b0 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40020800 	.word	0x40020800
 8002f88:	2000005c 	.word	0x2000005c

08002f8c <LCD_FillScreen>:

void LCD_FillScreen(uint32_t color)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	6078      	str	r0, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <LCD_FillScreen+0x50>)
 8002f96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f9a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <LCD_FillScreen+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8002fa2:	480e      	ldr	r0, [pc, #56]	; (8002fdc <LCD_FillScreen+0x50>)
 8002fa4:	f7fd fc49 	bl	800083a <HAL_DMA2D_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d112      	bne.n	8002fd4 <LCD_FillScreen+0x48>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <LCD_FillScreen+0x54>)
 8002fb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <LCD_FillScreen+0x54>)
 8002fb4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <LCD_FillScreen+0x54>)
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4806      	ldr	r0, [pc, #24]	; (8002fdc <LCD_FillScreen+0x50>)
 8002fc2:	f7fd fc83 	bl	80008cc <HAL_DMA2D_Start>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <LCD_FillScreen+0x48>
				hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8002fcc:	210a      	movs	r1, #10
 8002fce:	4803      	ldr	r0, [pc, #12]	; (8002fdc <LCD_FillScreen+0x50>)
 8002fd0:	f7fd fca7 	bl	8000922 <HAL_DMA2D_PollForTransfer>
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
	for (uint32_t i = 0; i < (n); i++)
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
	}*/
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2000015c 	.word	0x2000015c
 8002fe0:	200000b4 	.word	0x200000b4

08002fe4 <LCD_Test>:

void LCD_Test(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
	uint32_t color = 0x00;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <LCD_Test+0x60>)
 8002ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff2:	4a14      	ldr	r2, [pc, #80]	; (8003044 <LCD_Test+0x60>)
 8002ff4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < (n); i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	e016      	b.n	8003030 <LCD_Test+0x4c>
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <LCD_Test+0x60>)
 8003004:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	440b      	add	r3, r1
 8003010:	461a      	mov	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6013      	str	r3, [r2, #0]
		color++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
		if (color == 0xFFFFFF)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <LCD_Test+0x46>
		{
			color = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < (n); i++)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3301      	adds	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d3e4      	bcc.n	8003002 <LCD_Test+0x1e>
		}
	}
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	200000b4 	.word	0x200000b4

08003048 <LCD_DrawPixel>:
    }
    while (x <= 0);
}

void LCD_DrawPixel(uint32_t x, uint32_t y, uint32_t color)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <LCD_DrawPixel+0x64>)
 8003056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800305a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <LCD_DrawPixel+0x64>)
 800305e:	2200      	movs	r2, #0
 8003060:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003062:	4812      	ldr	r0, [pc, #72]	; (80030ac <LCD_DrawPixel+0x64>)
 8003064:	f7fd fbe9 	bl	800083a <HAL_DMA2D_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11a      	bne.n	80030a4 <LCD_DrawPixel+0x5c>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <LCD_DrawPixel+0x68>)
 8003070:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <LCD_DrawPixel+0x68>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	fb02 f203 	mul.w	r2, r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	441a      	add	r2, r3
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	18ca      	adds	r2, r1, r3
 8003088:	2301      	movs	r3, #1
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2301      	movs	r3, #1
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4806      	ldr	r0, [pc, #24]	; (80030ac <LCD_DrawPixel+0x64>)
 8003092:	f7fd fc1b 	bl	80008cc <HAL_DMA2D_Start>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d103      	bne.n	80030a4 <LCD_DrawPixel+0x5c>
				, 1, 1) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800309c:	210a      	movs	r1, #10
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <LCD_DrawPixel+0x64>)
 80030a0:	f7fd fc3f 	bl	8000922 <HAL_DMA2D_PollForTransfer>
		}
	}
	//*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))) = color;
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2000015c 	.word	0x2000015c
 80030b0:	200000b4 	.word	0x200000b4

080030b4 <LCD_FontsInit>:
		}
	}
}

void LCD_FontsInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	lcdProp.BackColor = LCD_COLOR_BLACK;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <LCD_FontsInit+0x24>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
	lcdProp.TextColor = LCD_COLOR_GREEN;
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <LCD_FontsInit+0x24>)
 80030c0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80030c4:	601a      	str	r2, [r3, #0]
	lcdProp.pFont = &Font16;
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <LCD_FontsInit+0x24>)
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <LCD_FontsInit+0x28>)
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	2000004c 	.word	0x2000004c
 80030dc:	20000008 	.word	0x20000008

080030e0 <LCD_SetFont>:

void LCD_SetFont(sFONT *fonts)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	lcdProp.pFont = fonts;
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <LCD_SetFont+0x1c>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6093      	str	r3, [r2, #8]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2000004c 	.word	0x2000004c

08003100 <LCD_SetTextColor>:

void LCD_SetTextColor(uint32_t color)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	lcdProp.TextColor = color;
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <LCD_SetTextColor+0x1c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6013      	str	r3, [r2, #0]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000004c 	.word	0x2000004c

08003120 <LCD_SetBackColor>:

void LCD_SetBackColor(uint32_t color)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	lcdProp.BackColor = color;
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <LCD_SetBackColor+0x1c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6053      	str	r3, [r2, #4]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000004c 	.word	0x2000004c

08003140 <LCD_DrawChar>:

void LCD_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
 800314a:	460b      	mov	r3, r1
 800314c:	80bb      	strh	r3, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	70fb      	strb	r3, [r7, #3]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  ch = &lcdProp.pFont->table[(c-' ') * lcdProp.pFont->Height * ((lcdProp.pFont->Width + 7) / 8)];
 8003152:	4b4e      	ldr	r3, [pc, #312]	; (800328c <LCD_DrawChar+0x14c>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	3b20      	subs	r3, #32
 800315c:	494b      	ldr	r1, [pc, #300]	; (800328c <LCD_DrawChar+0x14c>)
 800315e:	6889      	ldr	r1, [r1, #8]
 8003160:	88c9      	ldrh	r1, [r1, #6]
 8003162:	fb01 f103 	mul.w	r1, r1, r3
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <LCD_DrawChar+0x14c>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	889b      	ldrh	r3, [r3, #4]
 800316c:	3307      	adds	r3, #7
 800316e:	2b00      	cmp	r3, #0
 8003170:	da00      	bge.n	8003174 <LCD_DrawChar+0x34>
 8003172:	3307      	adds	r3, #7
 8003174:	10db      	asrs	r3, r3, #3
 8003176:	fb03 f301 	mul.w	r3, r3, r1
 800317a:	4413      	add	r3, r2
 800317c:	4a44      	ldr	r2, [pc, #272]	; (8003290 <LCD_DrawChar+0x150>)
 800317e:	6013      	str	r3, [r2, #0]
  height = lcdProp.pFont->Height;
 8003180:	4b42      	ldr	r3, [pc, #264]	; (800328c <LCD_DrawChar+0x14c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	88db      	ldrh	r3, [r3, #6]
 8003186:	827b      	strh	r3, [r7, #18]
  width = lcdProp.pFont->Width;
 8003188:	4b40      	ldr	r3, [pc, #256]	; (800328c <LCD_DrawChar+0x14c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	889b      	ldrh	r3, [r3, #4]
 800318e:	823b      	strh	r3, [r7, #16]
  offset = 8*((width + 7)/8) - width;
 8003190:	8a3b      	ldrh	r3, [r7, #16]
 8003192:	3307      	adds	r3, #7
 8003194:	2b00      	cmp	r3, #0
 8003196:	da00      	bge.n	800319a <LCD_DrawChar+0x5a>
 8003198:	3307      	adds	r3, #7
 800319a:	10db      	asrs	r3, r3, #3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	8a3b      	ldrh	r3, [r7, #16]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	73fb      	strb	r3, [r7, #15]

  for (uint32_t i = 0; i < height; i++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e064      	b.n	800327a <LCD_DrawChar+0x13a>
  {
	  pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <LCD_DrawChar+0x150>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	8a3b      	ldrh	r3, [r7, #16]
 80031b6:	3307      	adds	r3, #7
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da00      	bge.n	80031be <LCD_DrawChar+0x7e>
 80031bc:	3307      	adds	r3, #7
 80031be:	10db      	asrs	r3, r3, #3
 80031c0:	4619      	mov	r1, r3
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	fb03 f301 	mul.w	r3, r3, r1
 80031c8:	4413      	add	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
	  switch ((width + 7)/8)
 80031cc:	8a3b      	ldrh	r3, [r7, #16]
 80031ce:	3307      	adds	r3, #7
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da00      	bge.n	80031d6 <LCD_DrawChar+0x96>
 80031d4:	3307      	adds	r3, #7
 80031d6:	10db      	asrs	r3, r3, #3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d002      	beq.n	80031e2 <LCD_DrawChar+0xa2>
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d004      	beq.n	80031ea <LCD_DrawChar+0xaa>
 80031e0:	e00c      	b.n	80031fc <LCD_DrawChar+0xbc>
	  {
	  	  case 1:
	  		  line = pchar[0];
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	61fb      	str	r3, [r7, #28]
	  		  break;
 80031e8:	e016      	b.n	8003218 <LCD_DrawChar+0xd8>
	  	  case 2:
	  		  line = (pchar[0] << 8) | pchar[1];
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	3201      	adds	r2, #1
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61fb      	str	r3, [r7, #28]
	  		  break;
 80031fa:	e00d      	b.n	8003218 <LCD_DrawChar+0xd8>
	  	  case 3:
	  	  default:
	  		  line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3301      	adds	r3, #1
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	4313      	orrs	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	3202      	adds	r2, #2
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	61fb      	str	r3, [r7, #28]
	  		  break;
 8003216:	bf00      	nop
	  }

	  for (uint32_t j = 0; j < width; j++)
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e023      	b.n	8003266 <LCD_DrawChar+0x126>
	  {
		  if (line & (1 << (width- j + offset- 1)))
 800321e:	8a3a      	ldrh	r2, [r7, #16]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	4413      	add	r3, r2
 8003228:	3b01      	subs	r3, #1
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	461a      	mov	r2, r3
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <LCD_DrawChar+0x10e>
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.TextColor);
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	18d0      	adds	r0, r2, r3
 8003240:	88b9      	ldrh	r1, [r7, #4]
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <LCD_DrawChar+0x14c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	f7ff fefe 	bl	8003048 <LCD_DrawPixel>
 800324c:	e008      	b.n	8003260 <LCD_DrawChar+0x120>
		  }
		  else
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.BackColor);
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	18d0      	adds	r0, r2, r3
 8003254:	88b9      	ldrh	r1, [r7, #4]
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <LCD_DrawChar+0x14c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	f7ff fef4 	bl	8003048 <LCD_DrawPixel>
	  for (uint32_t j = 0; j < width; j++)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	8a3a      	ldrh	r2, [r7, #16]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	429a      	cmp	r2, r3
 800326c:	d8d7      	bhi.n	800321e <LCD_DrawChar+0xde>
		  }
	  }
	  y++;
 800326e:	88bb      	ldrh	r3, [r7, #4]
 8003270:	3301      	adds	r3, #1
 8003272:	80bb      	strh	r3, [r7, #4]
  for (uint32_t i = 0; i < height; i++)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3301      	adds	r3, #1
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	8a7a      	ldrh	r2, [r7, #18]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	429a      	cmp	r2, r3
 8003280:	d896      	bhi.n	80031b0 <LCD_DrawChar+0x70>
  }
}
 8003282:	bf00      	nop
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000004c 	.word	0x2000004c
 8003290:	20000058 	.word	0x20000058

08003294 <LCD_DrawString>:

void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	60ba      	str	r2, [r7, #8]
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	81fb      	strh	r3, [r7, #14]
 80032a2:	460b      	mov	r3, r1
 80032a4:	81bb      	strh	r3, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 80032aa:	2301      	movs	r3, #1
 80032ac:	83fb      	strh	r3, [r7, #30]
 80032ae:	2300      	movs	r3, #0
 80032b0:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = Text;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	617b      	str	r3, [r7, #20]
	while (*ptr++) size++;
 80032be:	e002      	b.n	80032c6 <LCD_DrawString+0x32>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	3301      	adds	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	617a      	str	r2, [r7, #20]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f6      	bne.n	80032c0 <LCD_DrawString+0x2c>
	xsize = (X_SIZE/lcdProp.pFont->Width);
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <LCD_DrawString+0x118>)
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <LCD_DrawString+0x11c>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	889b      	ldrh	r3, [r3, #4]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	613b      	str	r3, [r7, #16]

	switch (Mode)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d002      	beq.n	80032f0 <LCD_DrawString+0x5c>
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d00e      	beq.n	800330c <LCD_DrawString+0x78>
 80032ee:	e01b      	b.n	8003328 <LCD_DrawString+0x94>
	{
		case CENTER_MODE:
			ref_column = Xpos + ((xsize - size) * lcdProp.pFont->Width) / 2;
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <LCD_DrawString+0x11c>)
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	8892      	ldrh	r2, [r2, #4]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	89fb      	ldrh	r3, [r7, #14]
 8003306:	4413      	add	r3, r2
 8003308:	83fb      	strh	r3, [r7, #30]
			break;
 800330a:	e010      	b.n	800332e <LCD_DrawString+0x9a>
		case RIGHT_MODE:
			ref_column = - Xpos + ((xsize - size) * lcdProp.pFont->Width);
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <LCD_DrawString+0x11c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	889b      	ldrh	r3, [r3, #4]
 800331a:	fb12 f303 	smulbb	r3, r2, r3
 800331e:	b29a      	uxth	r2, r3
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	83fb      	strh	r3, [r7, #30]
			break;
 8003326:	e002      	b.n	800332e <LCD_DrawString+0x9a>
		case LEFT_MODE:
		default:
			ref_column = Xpos;
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	83fb      	strh	r3, [r7, #30]
			break;
 800332c:	bf00      	nop
	}

	if ((ref_column < 1) || (ref_column >= 0x8000))
 800332e:	8bfb      	ldrh	r3, [r7, #30]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <LCD_DrawString+0xa8>
 8003334:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da15      	bge.n	8003368 <LCD_DrawString+0xd4>
	{
		ref_column = 1;
 800333c:	2301      	movs	r3, #1
 800333e:	83fb      	strh	r3, [r7, #30]
	}
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8003340:	e012      	b.n	8003368 <LCD_DrawString+0xd4>
	{
		LCD_DrawChar(ref_column, Ypos, *Text);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	89b9      	ldrh	r1, [r7, #12]
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fef8 	bl	8003140 <LCD_DrawChar>
		ref_column += lcdProp.pFont->Width;
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <LCD_DrawString+0x11c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	889a      	ldrh	r2, [r3, #4]
 8003356:	8bfb      	ldrh	r3, [r7, #30]
 8003358:	4413      	add	r3, r2
 800335a:	83fb      	strh	r3, [r7, #30]
		Text++;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	3301      	adds	r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
		i++;
 8003362:	8bbb      	ldrh	r3, [r7, #28]
 8003364:	3301      	adds	r3, #1
 8003366:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <LCD_DrawString+0x118>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	8bbb      	ldrh	r3, [r7, #28]
 800337e:	490c      	ldr	r1, [pc, #48]	; (80033b0 <LCD_DrawString+0x11c>)
 8003380:	6889      	ldr	r1, [r1, #8]
 8003382:	8889      	ldrh	r1, [r1, #4]
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ac3      	subs	r3, r0, r3
 800338a:	b29b      	uxth	r3, r3
 800338c:	4908      	ldr	r1, [pc, #32]	; (80033b0 <LCD_DrawString+0x11c>)
 800338e:	6889      	ldr	r1, [r1, #8]
 8003390:	8889      	ldrh	r1, [r1, #4]
 8003392:	428b      	cmp	r3, r1
 8003394:	bfac      	ite	ge
 8003396:	2301      	movge	r3, #1
 8003398:	2300      	movlt	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4013      	ands	r3, r2
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ce      	bne.n	8003342 <LCD_DrawString+0xae>
	}
}
 80033a4:	bf00      	nop
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000020 	.word	0x20000020
 80033b0:	2000004c 	.word	0x2000004c

080033b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t *dma2d_in1;
	uint8_t *dma2d_in2;

	dma2d_in1 = (uint8_t *) ((uint32_t)(3) * LCD_FRAME_BUFFER);
 80033ba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80033be:	607b      	str	r3, [r7, #4]
	dma2d_in2 = (uint8_t *) ((uint32_t)(4) * LCD_FRAME_BUFFER);
 80033c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c4:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c6:	f7fd f899 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033ca:	f000 f899 	bl	8003500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ce:	f000 fa67 	bl	80038a0 <MX_GPIO_Init>
  MX_SPI5_Init();
 80033d2:	f000 f9e7 	bl	80037a4 <MX_SPI5_Init>
  MX_FMC_Init();
 80033d6:	f000 fa1b 	bl	8003810 <MX_FMC_Init>
  MX_DMA2D_Init();
 80033da:	f000 f91b 	bl	8003614 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 80033de:	483c      	ldr	r0, [pc, #240]	; (80034d0 <main+0x11c>)
 80033e0:	f000 fb06 	bl	80039f0 <SDRAM_init>
  LCD_PowerOn();
 80033e4:	f7ff fc35 	bl	8002c52 <LCD_PowerOn>
  MX_LTDC_Init();
 80033e8:	f000 f95c 	bl	80036a4 <MX_LTDC_Init>
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	4939      	ldr	r1, [pc, #228]	; (80034d4 <main+0x120>)
 80033f0:	4839      	ldr	r0, [pc, #228]	; (80034d8 <main+0x124>)
 80033f2:	f7fe f89d 	bl	8001530 <HAL_LTDC_SetAddress>


  LCD_FillScreen(0xFF0000);
 80033f6:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80033fa:	f7ff fdc7 	bl	8002f8c <LCD_FillScreen>
  HAL_Delay(2000);
 80033fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003402:	f7fd f8ed 	bl	80005e0 <HAL_Delay>
  LCD_FillScreen(0x0FF0FF);
 8003406:	4835      	ldr	r0, [pc, #212]	; (80034dc <main+0x128>)
 8003408:	f7ff fdc0 	bl	8002f8c <LCD_FillScreen>
  HAL_Delay(1000);
 800340c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003410:	f7fd f8e6 	bl	80005e0 <HAL_Delay>
  LCD_Test();
 8003414:	f7ff fde6 	bl	8002fe4 <LCD_Test>
  HAL_Delay(1000);
 8003418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800341c:	f7fd f8e0 	bl	80005e0 <HAL_Delay>
  LCD_FillScreen(LCD_COLOR_BLACK);
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff fdb3 	bl	8002f8c <LCD_FillScreen>
  LCD_FontsInit();
 8003426:	f7ff fe45 	bl	80030b4 <LCD_FontsInit>
  LCD_SetFont(&Font24);
 800342a:	482d      	ldr	r0, [pc, #180]	; (80034e0 <main+0x12c>)
 800342c:	f7ff fe58 	bl	80030e0 <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_YELLOW);
 8003430:	482c      	ldr	r0, [pc, #176]	; (80034e4 <main+0x130>)
 8003432:	f7ff fe65 	bl	8003100 <LCD_SetTextColor>
  LCD_SetBackColor(LCD_COLOR_BLUE);
 8003436:	20ff      	movs	r0, #255	; 0xff
 8003438:	f7ff fe72 	bl	8003120 <LCD_SetBackColor>
  LCD_DrawChar(10, 10, (uint8_t) 'T');
 800343c:	2254      	movs	r2, #84	; 0x54
 800343e:	210a      	movs	r1, #10
 8003440:	200a      	movs	r0, #10
 8003442:	f7ff fe7d 	bl	8003140 <LCD_DrawChar>
  LCD_DrawChar(27, 10, (uint8_t) 'e');
 8003446:	2265      	movs	r2, #101	; 0x65
 8003448:	210a      	movs	r1, #10
 800344a:	201b      	movs	r0, #27
 800344c:	f7ff fe78 	bl	8003140 <LCD_DrawChar>
  LCD_DrawChar(44, 10, (uint8_t) 's');
 8003450:	2273      	movs	r2, #115	; 0x73
 8003452:	210a      	movs	r1, #10
 8003454:	202c      	movs	r0, #44	; 0x2c
 8003456:	f7ff fe73 	bl	8003140 <LCD_DrawChar>
  LCD_DrawChar(61, 10, (uint8_t) 't');
 800345a:	2274      	movs	r2, #116	; 0x74
 800345c:	210a      	movs	r1, #10
 800345e:	203d      	movs	r0, #61	; 0x3d
 8003460:	f7ff fe6e 	bl	8003140 <LCD_DrawChar>

  LCD_SetFont(&Font16);
 8003464:	4820      	ldr	r0, [pc, #128]	; (80034e8 <main+0x134>)
 8003466:	f7ff fe3b 	bl	80030e0 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800346a:	2080      	movs	r0, #128	; 0x80
 800346c:	f7ff fe58 	bl	8003120 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8003470:	481e      	ldr	r0, [pc, #120]	; (80034ec <main+0x138>)
 8003472:	f7ff fe45 	bl	8003100 <LCD_SetTextColor>
  LCD_DrawString(10, 30, (uint8_t *)"Left 16", LEFT_MODE);
 8003476:	2303      	movs	r3, #3
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <main+0x13c>)
 800347a:	211e      	movs	r1, #30
 800347c:	200a      	movs	r0, #10
 800347e:	f7ff ff09 	bl	8003294 <LCD_DrawString>

  LCD_SetFont(&Font8);
 8003482:	481c      	ldr	r0, [pc, #112]	; (80034f4 <main+0x140>)
 8003484:	f7ff fe2c 	bl	80030e0 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKCYAN);
 8003488:	f248 0080 	movw	r0, #32896	; 0x8080
 800348c:	f7ff fe48 	bl	8003120 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8003490:	f04f 10ff 	mov.w	r0, #16711935	; 0xff00ff
 8003494:	f7ff fe34 	bl	8003100 <LCD_SetTextColor>
  LCD_DrawString(10, 50, (uint8_t *)"Right 8", RIGHT_MODE);
 8003498:	2302      	movs	r3, #2
 800349a:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <main+0x144>)
 800349c:	2132      	movs	r1, #50	; 0x32
 800349e:	200a      	movs	r0, #10
 80034a0:	f7ff fef8 	bl	8003294 <LCD_DrawString>

  LCD_SetFont(&Font24);
 80034a4:	480e      	ldr	r0, [pc, #56]	; (80034e0 <main+0x12c>)
 80034a6:	f7ff fe1b 	bl	80030e0 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_BLACK);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7ff fe38 	bl	8003120 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_CYAN);
 80034b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80034b4:	f7ff fe24 	bl	8003100 <LCD_SetTextColor>
  LCD_DrawString(10, 100, (uint8_t *)"Center 24", CENTER_MODE);
 80034b8:	2301      	movs	r3, #1
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <main+0x148>)
 80034bc:	2164      	movs	r1, #100	; 0x64
 80034be:	200a      	movs	r0, #10
 80034c0:	f7ff fee8 	bl	8003294 <LCD_DrawString>
  HAL_Delay(2000);
 80034c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034c8:	f7fd f88a 	bl	80005e0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <main+0x118>
 80034ce:	bf00      	nop
 80034d0:	2000019c 	.word	0x2000019c
 80034d4:	d0050000 	.word	0xd0050000
 80034d8:	200000b4 	.word	0x200000b4
 80034dc:	000ff0ff 	.word	0x000ff0ff
 80034e0:	20000010 	.word	0x20000010
 80034e4:	00ffff00 	.word	0x00ffff00
 80034e8:	20000008 	.word	0x20000008
 80034ec:	00ff8080 	.word	0x00ff8080
 80034f0:	080040d8 	.word	0x080040d8
 80034f4:	20000018 	.word	0x20000018
 80034f8:	080040e0 	.word	0x080040e0
 80034fc:	080040e8 	.word	0x080040e8

08003500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0a0      	sub	sp, #128	; 0x80
 8003504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003506:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800350a:	2230      	movs	r2, #48	; 0x30
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fdce 	bl	80040b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003524:	f107 030c 	add.w	r3, r7, #12
 8003528:	2230      	movs	r2, #48	; 0x30
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fdbf 	bl	80040b0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4a35      	ldr	r2, [pc, #212]	; (800360c <SystemClock_Config+0x10c>)
 8003538:	4b34      	ldr	r3, [pc, #208]	; (800360c <SystemClock_Config+0x10c>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b32      	ldr	r3, [pc, #200]	; (800360c <SystemClock_Config+0x10c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <SystemClock_Config+0x110>)
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <SystemClock_Config+0x110>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <SystemClock_Config+0x110>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800356a:	2302      	movs	r3, #2
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800356e:	2301      	movs	r3, #1
 8003570:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003572:	2310      	movs	r3, #16
 8003574:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003576:	2302      	movs	r3, #2
 8003578:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800357a:	2300      	movs	r3, #0
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800357e:	2308      	movs	r3, #8
 8003580:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003582:	23b4      	movs	r3, #180	; 0xb4
 8003584:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003586:	2302      	movs	r3, #2
 8003588:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800358a:	2304      	movs	r3, #4
 800358c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800358e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f9fa 	bl	800198c <HAL_RCC_OscConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800359e:	f000 fa1f 	bl	80039e0 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035a2:	f7fe f9a3 	bl	80018ec <HAL_PWREx_EnableOverDrive>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80035ac:	f000 fa18 	bl	80039e0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035b0:	230f      	movs	r3, #15
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b4:	2302      	movs	r3, #2
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b8:	2300      	movs	r3, #0
 80035ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035cc:	2105      	movs	r1, #5
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fc1e 	bl	8001e10 <HAL_RCC_ClockConfig>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <SystemClock_Config+0xde>
  {
    Error_Handler();
 80035da:	f000 fa01 	bl	80039e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035de:	2308      	movs	r3, #8
 80035e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80035e2:	233c      	movs	r3, #60	; 0x3c
 80035e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80035e6:	2305      	movs	r3, #5
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80035ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fda3 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8003600:	f000 f9ee 	bl	80039e0 <Error_Handler>
  }
}
 8003604:	bf00      	nop
 8003606:	3780      	adds	r7, #128	; 0x80
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	40007000 	.word	0x40007000

08003614 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <MX_DMA2D_Init+0x88>)
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <MX_DMA2D_Init+0x8c>)
 800361c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <MX_DMA2D_Init+0x88>)
 8003620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003624:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <MX_DMA2D_Init+0x88>)
 8003628:	2201      	movs	r2, #1
 800362a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <MX_DMA2D_Init+0x88>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_DMA2D_Init+0x88>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB888;
 8003638:	4b18      	ldr	r3, [pc, #96]	; (800369c <MX_DMA2D_Init+0x88>)
 800363a:	2201      	movs	r2, #1
 800363c:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <MX_DMA2D_Init+0x88>)
 8003640:	2201      	movs	r2, #1
 8003642:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <MX_DMA2D_Init+0x88>)
 8003646:	2200      	movs	r2, #0
 8003648:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <MX_DMA2D_Init+0x88>)
 800364c:	2200      	movs	r2, #0
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <MX_DMA2D_Init+0x88>)
 8003652:	2201      	movs	r2, #1
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <MX_DMA2D_Init+0x88>)
 8003658:	2201      	movs	r2, #1
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <MX_DMA2D_Init+0x88>)
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003662:	480e      	ldr	r0, [pc, #56]	; (800369c <MX_DMA2D_Init+0x88>)
 8003664:	f7fd f8e9 	bl	800083a <HAL_DMA2D_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 800366e:	f000 f9b7 	bl	80039e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8003672:	2100      	movs	r1, #0
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <MX_DMA2D_Init+0x88>)
 8003676:	f7fd fb4d 	bl	8000d14 <HAL_DMA2D_ConfigLayer>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8003680:	f000 f9ae 	bl	80039e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003684:	2101      	movs	r1, #1
 8003686:	4805      	ldr	r0, [pc, #20]	; (800369c <MX_DMA2D_Init+0x88>)
 8003688:	f7fd fb44 	bl	8000d14 <HAL_DMA2D_ConfigLayer>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8003692:	f000 f9a5 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000015c 	.word	0x2000015c
 80036a0:	4002b000 	.word	0x4002b000

080036a4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	2234      	movs	r2, #52	; 0x34
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fcfd 	bl	80040b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <MX_LTDC_Init+0xf8>)
 80036b8:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <MX_LTDC_Init+0xfc>)
 80036ba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80036bc:	4b37      	ldr	r3, [pc, #220]	; (800379c <MX_LTDC_Init+0xf8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80036c2:	4b36      	ldr	r3, [pc, #216]	; (800379c <MX_LTDC_Init+0xf8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <MX_LTDC_Init+0xf8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80036ce:	4b33      	ldr	r3, [pc, #204]	; (800379c <MX_LTDC_Init+0xf8>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 80036d4:	4b31      	ldr	r3, [pc, #196]	; (800379c <MX_LTDC_Init+0xf8>)
 80036d6:	2208      	movs	r2, #8
 80036d8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <MX_LTDC_Init+0xf8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80036e0:	4b2e      	ldr	r3, [pc, #184]	; (800379c <MX_LTDC_Init+0xf8>)
 80036e2:	221d      	movs	r2, #29
 80036e4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <MX_LTDC_Init+0xf8>)
 80036e8:	2203      	movs	r2, #3
 80036ea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <MX_LTDC_Init+0xf8>)
 80036ee:	f240 120d 	movw	r2, #269	; 0x10d
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <MX_LTDC_Init+0xf8>)
 80036f6:	f240 1243 	movw	r2, #323	; 0x143
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <MX_LTDC_Init+0xf8>)
 80036fe:	f240 1217 	movw	r2, #279	; 0x117
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <MX_LTDC_Init+0xf8>)
 8003706:	f240 1247 	movw	r2, #327	; 0x147
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <MX_LTDC_Init+0xf8>)
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <MX_LTDC_Init+0xf8>)
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <MX_LTDC_Init+0xf8>)
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003724:	481d      	ldr	r0, [pc, #116]	; (800379c <MX_LTDC_Init+0xf8>)
 8003726:	f7fd fdf1 	bl	800130c <HAL_LTDC_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003730:	f000 f956 	bl	80039e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8003738:	23f0      	movs	r3, #240	; 0xf0
 800373a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8003740:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003744:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8003746:	2301      	movs	r3, #1
 8003748:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800374a:	23ff      	movs	r3, #255	; 0xff
 800374c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003756:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003758:	2305      	movs	r3, #5
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8003760:	23f0      	movs	r3, #240	; 0xf0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8003764:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	2200      	movs	r2, #0
 8003780:	4619      	mov	r1, r3
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <MX_LTDC_Init+0xf8>)
 8003784:	f7fd fe96 	bl	80014b4 <HAL_LTDC_ConfigLayer>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800378e:	f000 f927 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003792:	bf00      	nop
 8003794:	3738      	adds	r7, #56	; 0x38
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200000b4 	.word	0x200000b4
 80037a0:	40016800 	.word	0x40016800

080037a4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <MX_SPI5_Init+0x64>)
 80037aa:	4a18      	ldr	r2, [pc, #96]	; (800380c <MX_SPI5_Init+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <MX_SPI5_Init+0x64>)
 80037b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <MX_SPI5_Init+0x64>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <MX_SPI5_Init+0x64>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_SPI5_Init+0x64>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <MX_SPI5_Init+0x64>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_SPI5_Init+0x64>)
 80037d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <MX_SPI5_Init+0x64>)
 80037d8:	2218      	movs	r2, #24
 80037da:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <MX_SPI5_Init+0x64>)
 80037de:	2200      	movs	r2, #0
 80037e0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <MX_SPI5_Init+0x64>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <MX_SPI5_Init+0x64>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <MX_SPI5_Init+0x64>)
 80037f0:	220a      	movs	r2, #10
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80037f4:	4804      	ldr	r0, [pc, #16]	; (8003808 <MX_SPI5_Init+0x64>)
 80037f6:	f7fe fec6 	bl	8002586 <HAL_SPI_Init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003800:	f000 f8ee 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	2000005c 	.word	0x2000005c
 800380c:	40015000 	.word	0x40015000

08003810 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <MX_FMC_Init+0x88>)
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <MX_FMC_Init+0x8c>)
 800381a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <MX_FMC_Init+0x88>)
 800381e:	2201      	movs	r2, #1
 8003820:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003822:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <MX_FMC_Init+0x88>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <MX_FMC_Init+0x88>)
 800382a:	2204      	movs	r2, #4
 800382c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <MX_FMC_Init+0x88>)
 8003830:	2210      	movs	r2, #16
 8003832:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <MX_FMC_Init+0x88>)
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <MX_FMC_Init+0x88>)
 800383c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003840:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <MX_FMC_Init+0x88>)
 8003844:	2200      	movs	r2, #0
 8003846:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <MX_FMC_Init+0x88>)
 800384a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_FMC_Init+0x88>)
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <MX_FMC_Init+0x88>)
 8003858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800385e:	2302      	movs	r3, #2
 8003860:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003862:	2307      	movs	r3, #7
 8003864:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003866:	2304      	movs	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800386a:	2307      	movs	r3, #7
 800386c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800386e:	2302      	movs	r3, #2
 8003870:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003872:	2302      	movs	r3, #2
 8003874:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003876:	2302      	movs	r3, #2
 8003878:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4806      	ldr	r0, [pc, #24]	; (8003898 <MX_FMC_Init+0x88>)
 8003880:	f7fe fe02 	bl	8002488 <HAL_SDRAM_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 800388a:	f000 f8a9 	bl	80039e0 <Error_Handler>
  }

}
 800388e:	bf00      	nop
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000019c 	.word	0x2000019c
 800389c:	a0000140 	.word	0xa0000140

080038a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038bc:	4b45      	ldr	r3, [pc, #276]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f043 0320 	orr.w	r3, r3, #32
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038f4:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <MX_GPIO_Init+0x134>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <MX_GPIO_Init+0x134>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <MX_GPIO_Init+0x134>)
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <MX_GPIO_Init+0x134>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <MX_GPIO_Init+0x134>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f043 0310 	orr.w	r3, r3, #16
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <MX_GPIO_Init+0x134>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800397a:	2201      	movs	r2, #1
 800397c:	2104      	movs	r1, #4
 800397e:	4816      	ldr	r0, [pc, #88]	; (80039d8 <MX_GPIO_Init+0x138>)
 8003980:	f7fd fcaa 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8003984:	2200      	movs	r2, #0
 8003986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800398a:	4814      	ldr	r0, [pc, #80]	; (80039dc <MX_GPIO_Init+0x13c>)
 800398c:	f7fd fca4 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 8003990:	2304      	movs	r3, #4
 8003992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800399c:	2302      	movs	r3, #2
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	4619      	mov	r1, r3
 80039a6:	480c      	ldr	r0, [pc, #48]	; (80039d8 <MX_GPIO_Init+0x138>)
 80039a8:	f7fd faec 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 80039ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b2:	2301      	movs	r3, #1
 80039b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ba:	2302      	movs	r3, #2
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4619      	mov	r1, r3
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_GPIO_Init+0x13c>)
 80039c6:	f7fd fadd 	bl	8000f84 <HAL_GPIO_Init>

}
 80039ca:	bf00      	nop
 80039cc:	3730      	adds	r7, #48	; 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00

080039e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80039fc:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <SDRAM_init+0xcc>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <SDRAM_init+0xcc>)
 8003a04:	2208      	movs	r2, #8
 8003a06:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8003a08:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <SDRAM_init+0xcc>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <SDRAM_init+0xcc>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8003a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a18:	4928      	ldr	r1, [pc, #160]	; (8003abc <SDRAM_init+0xcc>)
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fd68 	bl	80024f0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8003a20:	200a      	movs	r0, #10
 8003a22:	f7fc fddd 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <SDRAM_init+0xcc>)
 8003a28:	2202      	movs	r2, #2
 8003a2a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a2c:	4b23      	ldr	r3, [pc, #140]	; (8003abc <SDRAM_init+0xcc>)
 8003a2e:	2208      	movs	r2, #8
 8003a30:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <SDRAM_init+0xcc>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <SDRAM_init+0xcc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8003a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a42:	491e      	ldr	r1, [pc, #120]	; (8003abc <SDRAM_init+0xcc>)
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe fd53 	bl	80024f0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	f7fc fdc8 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <SDRAM_init+0xcc>)
 8003a52:	2203      	movs	r2, #3
 8003a54:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <SDRAM_init+0xcc>)
 8003a58:	2208      	movs	r2, #8
 8003a5a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <SDRAM_init+0xcc>)
 8003a5e:	2204      	movs	r2, #4
 8003a60:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <SDRAM_init+0xcc>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8003a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6c:	4913      	ldr	r1, [pc, #76]	; (8003abc <SDRAM_init+0xcc>)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe fd3e 	bl	80024f0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8003a74:	200a      	movs	r0, #10
 8003a76:	f7fc fdb3 	bl	80005e0 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8003a7a:	f240 2331 	movw	r3, #561	; 0x231
 8003a7e:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <SDRAM_init+0xcc>)
 8003a82:	2204      	movs	r2, #4
 8003a84:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <SDRAM_init+0xcc>)
 8003a88:	2208      	movs	r2, #8
 8003a8a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <SDRAM_init+0xcc>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <SDRAM_init+0xcc>)
 8003a96:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8003a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9c:	4907      	ldr	r1, [pc, #28]	; (8003abc <SDRAM_init+0xcc>)
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fd26 	bl	80024f0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8003aa4:	200a      	movs	r0, #10
 8003aa6:	f7fc fd9b 	bl	80005e0 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8003aaa:	f240 516a 	movw	r1, #1386	; 0x56a
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe fd49 	bl	8002546 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200001d0 	.word	0x200001d0

08003ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_MspInit+0x4c>)
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_MspInit+0x4c>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_MspInit+0x4c>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_DMA2D_MspInit+0x48>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d115      	bne.n	8003b4e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <HAL_DMA2D_MspInit+0x4c>)
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_DMA2D_MspInit+0x4c>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b30:	6313      	str	r3, [r2, #48]	; 0x30
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_DMA2D_MspInit+0x4c>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	205a      	movs	r0, #90	; 0x5a
 8003b44:	f7fc fe43 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b48:	205a      	movs	r0, #90	; 0x5a
 8003b4a:	f7fc fe5c 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	4002b000 	.word	0x4002b000
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08e      	sub	sp, #56	; 0x38
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a77      	ldr	r2, [pc, #476]	; (8003d5c <HAL_LTDC_MspInit+0x1fc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f040 80e8 	bne.w	8003d54 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003b8a:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b92:	6453      	str	r3, [r2, #68]	; 0x44
 8003b94:	4b72      	ldr	r3, [pc, #456]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003ba6:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f043 0320 	orr.w	r3, r3, #32
 8003bae:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb0:	4b6b      	ldr	r3, [pc, #428]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bc2:	4b67      	ldr	r3, [pc, #412]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6313      	str	r3, [r2, #48]	; 0x30
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	4a60      	ldr	r2, [pc, #384]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bde:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	6313      	str	r3, [r2, #48]	; 0x30
 8003be8:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	4a59      	ldr	r2, [pc, #356]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bfa:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c02:	6313      	str	r3, [r2, #48]	; 0x30
 8003c04:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	4a52      	ldr	r2, [pc, #328]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c16:	4b52      	ldr	r3, [pc, #328]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	4a4b      	ldr	r2, [pc, #300]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c32:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3c:	4b48      	ldr	r3, [pc, #288]	; (8003d60 <HAL_LTDC_MspInit+0x200>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c56:	2302      	movs	r3, #2
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c5a:	230e      	movs	r3, #14
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c62:	4619      	mov	r1, r3
 8003c64:	483f      	ldr	r0, [pc, #252]	; (8003d64 <HAL_LTDC_MspInit+0x204>)
 8003c66:	f7fd f98d 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8003c6a:	f641 0358 	movw	r3, #6232	; 0x1858
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c7c:	230e      	movs	r3, #14
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c84:	4619      	mov	r1, r3
 8003c86:	4838      	ldr	r0, [pc, #224]	; (8003d68 <HAL_LTDC_MspInit+0x208>)
 8003c88:	f7fd f97c 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003c9c:	2309      	movs	r3, #9
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4831      	ldr	r0, [pc, #196]	; (8003d6c <HAL_LTDC_MspInit+0x20c>)
 8003ca8:	f7fd f96c 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8003cac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cbe:	230e      	movs	r3, #14
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4828      	ldr	r0, [pc, #160]	; (8003d6c <HAL_LTDC_MspInit+0x20c>)
 8003cca:	f7fd f95b 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003cce:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ce0:	230e      	movs	r3, #14
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4821      	ldr	r0, [pc, #132]	; (8003d70 <HAL_LTDC_MspInit+0x210>)
 8003cec:	f7fd f94a 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8003cf0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d02:	230e      	movs	r3, #14
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4819      	ldr	r0, [pc, #100]	; (8003d74 <HAL_LTDC_MspInit+0x214>)
 8003d0e:	f7fd f939 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003d12:	2348      	movs	r3, #72	; 0x48
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d22:	230e      	movs	r3, #14
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4812      	ldr	r0, [pc, #72]	; (8003d78 <HAL_LTDC_MspInit+0x218>)
 8003d2e:	f7fd f929 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003d32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d40:	2302      	movs	r3, #2
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d44:	2309      	movs	r3, #9
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4808      	ldr	r0, [pc, #32]	; (8003d70 <HAL_LTDC_MspInit+0x210>)
 8003d50:	f7fd f918 	bl	8000f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003d54:	bf00      	nop
 8003d56:	3738      	adds	r7, #56	; 0x38
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40016800 	.word	0x40016800
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40021400 	.word	0x40021400
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00

08003d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_SPI_MspInit+0x84>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d12c      	bne.n	8003df8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_SPI_MspInit+0x88>)
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_SPI_MspInit+0x88>)
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <HAL_SPI_MspInit+0x88>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <HAL_SPI_MspInit+0x88>)
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <HAL_SPI_MspInit+0x88>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f043 0320 	orr.w	r3, r3, #32
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_SPI_MspInit+0x88>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003dd6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de4:	2303      	movs	r3, #3
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003de8:	2305      	movs	r3, #5
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	4619      	mov	r1, r3
 8003df2:	4805      	ldr	r0, [pc, #20]	; (8003e08 <HAL_SPI_MspInit+0x8c>)
 8003df4:	f7fd f8c6 	bl	8000f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003df8:	bf00      	nop
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40015000 	.word	0x40015000
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40021400 	.word	0x40021400

08003e0c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8003e12:	4b3c      	ldr	r3, [pc, #240]	; (8003f04 <HAL_FMC_MspInit+0xf8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d16f      	bne.n	8003efa <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_FMC_MspInit+0xf8>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e20:	2300      	movs	r3, #0
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <HAL_FMC_MspInit+0xfc>)
 8003e26:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_FMC_MspInit+0xfc>)
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6393      	str	r3, [r2, #56]	; 0x38
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_FMC_MspInit+0xfc>)
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003e3c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003e40:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e4e:	230c      	movs	r3, #12
 8003e50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	482d      	ldr	r0, [pc, #180]	; (8003f0c <HAL_FMC_MspInit+0x100>)
 8003e58:	f7fd f894 	bl	8000f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4826      	ldr	r0, [pc, #152]	; (8003f10 <HAL_FMC_MspInit+0x104>)
 8003e76:	f7fd f885 	bl	8000f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8003e7a:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e8c:	230c      	movs	r3, #12
 8003e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	481f      	ldr	r0, [pc, #124]	; (8003f14 <HAL_FMC_MspInit+0x108>)
 8003e96:	f7fd f875 	bl	8000f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8003e9a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003e9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003eac:	230c      	movs	r3, #12
 8003eae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4818      	ldr	r0, [pc, #96]	; (8003f18 <HAL_FMC_MspInit+0x10c>)
 8003eb6:	f7fd f865 	bl	8000f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8003eba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ebe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ecc:	230c      	movs	r3, #12
 8003ece:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4811      	ldr	r0, [pc, #68]	; (8003f1c <HAL_FMC_MspInit+0x110>)
 8003ed6:	f7fd f855 	bl	8000f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003eda:	2360      	movs	r3, #96	; 0x60
 8003edc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003eea:	230c      	movs	r3, #12
 8003eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	480b      	ldr	r0, [pc, #44]	; (8003f20 <HAL_FMC_MspInit+0x114>)
 8003ef4:	f7fd f846 	bl	8000f84 <HAL_GPIO_Init>
 8003ef8:	e000      	b.n	8003efc <HAL_FMC_MspInit+0xf0>
    return;
 8003efa:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000044 	.word	0x20000044
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40021800 	.word	0x40021800
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40020400 	.word	0x40020400

08003f24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003f2c:	f7ff ff6e 	bl	8003e0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f4a:	e7fe      	b.n	8003f4a <HardFault_Handler+0x4>

08003f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f50:	e7fe      	b.n	8003f50 <MemManage_Handler+0x4>

08003f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f56:	e7fe      	b.n	8003f56 <BusFault_Handler+0x4>

08003f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f5c:	e7fe      	b.n	8003f5c <UsageFault_Handler+0x4>

08003f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f8c:	f7fc fb08 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <DMA2D_IRQHandler+0x10>)
 8003f9a:	f7fc fdaa 	bl	8000af2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000015c 	.word	0x2000015c

08003fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fac:	4a16      	ldr	r2, [pc, #88]	; (8004008 <SystemInit+0x60>)
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <SystemInit+0x60>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <SystemInit+0x64>)
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <SystemInit+0x64>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <SystemInit+0x64>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003fce:	4a0f      	ldr	r2, [pc, #60]	; (800400c <SystemInit+0x64>)
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <SystemInit+0x64>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <SystemInit+0x64>)
 8003fe0:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <SystemInit+0x68>)
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003fe4:	4a09      	ldr	r2, [pc, #36]	; (800400c <SystemInit+0x64>)
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <SystemInit+0x64>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <SystemInit+0x64>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ff6:	4b04      	ldr	r3, [pc, #16]	; (8004008 <SystemInit+0x60>)
 8003ff8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ffc:	609a      	str	r2, [r3, #8]
#endif
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00
 800400c:	40023800 	.word	0x40023800
 8004010:	24003010 	.word	0x24003010

08004014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800404c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800401a:	e003      	b.n	8004024 <LoopCopyDataInit>

0800401c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800401e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004022:	3104      	adds	r1, #4

08004024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004024:	480b      	ldr	r0, [pc, #44]	; (8004054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800402a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800402c:	d3f6      	bcc.n	800401c <CopyDataInit>
  ldr  r2, =_sbss
 800402e:	4a0b      	ldr	r2, [pc, #44]	; (800405c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004030:	e002      	b.n	8004038 <LoopFillZerobss>

08004032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004034:	f842 3b04 	str.w	r3, [r2], #4

08004038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800403a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800403c:	d3f9      	bcc.n	8004032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800403e:	f7ff ffb3 	bl	8003fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004042:	f000 f811 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004046:	f7ff f9b5 	bl	80033b4 <main>
  bx  lr    
 800404a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800404c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004050:	08006aa4 	.word	0x08006aa4
  ldr  r0, =_sdata
 8004054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004058:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 800405c:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8004060:	200001e0 	.word	0x200001e0

08004064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004064:	e7fe      	b.n	8004064 <ADC_IRQHandler>
	...

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4e0d      	ldr	r6, [pc, #52]	; (80040a0 <__libc_init_array+0x38>)
 800406c:	4c0d      	ldr	r4, [pc, #52]	; (80040a4 <__libc_init_array+0x3c>)
 800406e:	1ba4      	subs	r4, r4, r6
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	2500      	movs	r5, #0
 8004074:	42a5      	cmp	r5, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	4e0b      	ldr	r6, [pc, #44]	; (80040a8 <__libc_init_array+0x40>)
 800407a:	4c0c      	ldr	r4, [pc, #48]	; (80040ac <__libc_init_array+0x44>)
 800407c:	f000 f820 	bl	80040c0 <_init>
 8004080:	1ba4      	subs	r4, r4, r6
 8004082:	10a4      	asrs	r4, r4, #2
 8004084:	2500      	movs	r5, #0
 8004086:	42a5      	cmp	r5, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004090:	4798      	blx	r3
 8004092:	3501      	adds	r5, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800409a:	4798      	blx	r3
 800409c:	3501      	adds	r5, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	08006a9c 	.word	0x08006a9c
 80040a4:	08006a9c 	.word	0x08006a9c
 80040a8:	08006a9c 	.word	0x08006a9c
 80040ac:	08006aa0 	.word	0x08006aa0

080040b0 <memset>:
 80040b0:	4402      	add	r2, r0
 80040b2:	4603      	mov	r3, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
