
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001114c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048dc  080112f8  080112f8  000212f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015bd4  08015bd4  00025bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015bdc  08015bdc  00025bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015be0  08015be0  00025be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08015be4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003006c  2**0
                  CONTENTS
  8 .bss          0001bda8  2000006c  2000006c  0003006c  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2001be14  2001be14  0003006c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003006c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002d816  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003b67  00000000  00000000  0005d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010e8  00000000  00000000  00061420  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f50  00000000  00000000  00062508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008d1f  00000000  00000000  00063458  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007598  00000000  00000000  0006c177  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  0007370f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004550  00000000  00000000  000737fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080112e0 	.word	0x080112e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000070 	.word	0x20000070
 80001e8:	080112e0 	.word	0x080112e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f92d 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f005 f920 	bl	8005774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f937 	bl	80007d2 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f90d 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000068 	.word	0x20000068
 8000598:	20000060 	.word	0x20000060
 800059c:	2000005c 	.word	0x2000005c

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000060 	.word	0x20000060
 80005c4:	2001ba84 	.word	0x2001ba84

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2001ba84 	.word	0x2001ba84

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000060 	.word	0x20000060

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	da0b      	bge.n	80006b4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <NVIC_SetPriority+0x4c>)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	3b04      	subs	r3, #4
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b2:	e009      	b.n	80006c8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <NVIC_SetPriority+0x50>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	e000e100 	.word	0xe000e100

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	2201      	movs	r2, #1
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	401a      	ands	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000722:	2101      	movs	r1, #1
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	1e59      	subs	r1, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000764:	f7ff ff90 	bl	8000688 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff49 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5e 	bl	800066c <NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_CRC_Init>:
  * @param  hcrc pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e011      	b.n	8000820 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	795b      	ldrb	r3, [r3, #5]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d105      	bne.n	8000812 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f004 ffd9 	bl	80057c4 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2202      	movs	r2, #2
 8000816:	715a      	strb	r2, [r3, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2201      	movs	r2, #1
 800081c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e03b      	b.n	80008b2 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f833 	bl	80008ba <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2202      	movs	r2, #2
 8000858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	6852      	ldr	r2, [r2, #4]
 800086e:	430a      	orrs	r2, r1
 8000870:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800087c:	f022 0107 	bic.w	r1, r2, #7
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	6892      	ldr	r2, [r2, #8]
 8000884:	430a      	orrs	r2, r1
 8000886:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000896:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	68c9      	ldr	r1, [r1, #12]
 800089e:	430b      	orrs	r3, r1
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d026      	beq.n	800093e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d021      	beq.n	800093e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000908:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800090e:	f043 0201 	orr.w	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2201      	movs	r2, #1
 800091c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2204      	movs	r2, #4
 8000922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b00      	cmp	r3, #0
 8000946:	d026      	beq.n	8000996 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d021      	beq.n	8000996 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	6812      	ldr	r2, [r2, #0]
 800095c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000960:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2220      	movs	r2, #32
 8000968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096e:	f043 0202 	orr.w	r2, r3, #2
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2204      	movs	r2, #4
 800097a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	2b00      	cmp	r3, #0
 800099e:	d026      	beq.n	80009ee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d021      	beq.n	80009ee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2208      	movs	r2, #8
 80009c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c6:	f043 0204 	orr.w	r2, r3, #4
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2204      	movs	r2, #4
 80009d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d013      	beq.n	8000a20 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00e      	beq.n	8000a20 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2204      	movs	r2, #4
 8000a18:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f853 	bl	8000ac6 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d024      	beq.n	8000a74 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d01f      	beq.n	8000a74 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a42:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2202      	movs	r2, #2
 8000a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d01f      	beq.n	8000abe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d01a      	beq.n	8000abe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f80e 	bl	8000ada <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	3318      	adds	r3, #24
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d101      	bne.n	8000b20 <HAL_DMA2D_ConfigLayer+0x30>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e070      	b.n	8000c02 <HAL_DMA2D_ConfigLayer+0x112>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b0a      	cmp	r3, #10
 8000b36:	d003      	beq.n	8000b40 <HAL_DMA2D_ConfigLayer+0x50>
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b09      	cmp	r3, #9
 8000b3e:	d10c      	bne.n	8000b5a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	041b      	lsls	r3, r3, #16
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e00a      	b.n	8000b70 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	431a      	orrs	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	061b      	lsls	r3, r3, #24
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d11e      	bne.n	8000bb4 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HAL_DMA2D_ConfigLayer+0x120>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	68f9      	ldr	r1, [r7, #12]
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b0a      	cmp	r3, #10
 8000b9a:	d003      	beq.n	8000ba4 <HAL_DMA2D_ConfigLayer+0xb4>
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d125      	bne.n	8000bf0 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	68d2      	ldr	r2, [r2, #12]
 8000bac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8000bb2:	e01d      	b.n	8000bf0 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	69d9      	ldr	r1, [r3, #28]
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_DMA2D_ConfigLayer+0x120>)
 8000bc0:	400b      	ands	r3, r1
 8000bc2:	68f9      	ldr	r1, [r7, #12]
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b0a      	cmp	r3, #10
 8000bd8:	d003      	beq.n	8000be2 <HAL_DMA2D_ConfigLayer+0xf2>
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b09      	cmp	r3, #9
 8000be0:	d106      	bne.n	8000bf0 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	68d2      	ldr	r2, [r2, #12]
 8000bea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000bee:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	00fcfff0 	.word	0x00fcfff0

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e177      	b.n	8000f20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8166 	bne.w	8000f1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x4a>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d123      	bne.n	8000ca6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	69b9      	ldr	r1, [r7, #24]
 8000ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0203 	and.w	r2, r3, #3
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00b      	beq.n	8000cfa <HAL_GPIO_Init+0xe6>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cee:	2b11      	cmp	r3, #17
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d130      	bne.n	8000d5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80c0 	beq.w	8000f1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4a65      	ldr	r2, [pc, #404]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000da0:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a60      	ldr	r2, [pc, #384]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d037      	beq.n	8000e52 <HAL_GPIO_Init+0x23e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x32c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d031      	beq.n	8000e4e <HAL_GPIO_Init+0x23a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d02b      	beq.n	8000e4a <HAL_GPIO_Init+0x236>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a54      	ldr	r2, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d025      	beq.n	8000e46 <HAL_GPIO_Init+0x232>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a53      	ldr	r2, [pc, #332]	; (8000f4c <HAL_GPIO_Init+0x338>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d01f      	beq.n	8000e42 <HAL_GPIO_Init+0x22e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x33c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d019      	beq.n	8000e3e <HAL_GPIO_Init+0x22a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a51      	ldr	r2, [pc, #324]	; (8000f54 <HAL_GPIO_Init+0x340>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x344>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x222>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x348>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x21e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <HAL_GPIO_Init+0x34c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	e012      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e2e:	230a      	movs	r3, #10
 8000e30:	e010      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00e      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e00c      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	e00a      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e3e:	2305      	movs	r3, #5
 8000e40:	e008      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e42:	2304      	movs	r3, #4
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e004      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e52:	2300      	movs	r3, #0
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	f002 0203 	and.w	r2, r2, #3
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	4093      	lsls	r3, r2
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e64:	4934      	ldr	r1, [pc, #208]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e72:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e96:	4a33      	ldr	r2, [pc, #204]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec0:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f14:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	f67f ae84 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3724      	adds	r7, #36	; 0x24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40022000 	.word	0x40022000
 8000f60:	40022400 	.word	0x40022400
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0c8      	b.n	8001148 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f004 fc1c 	bl	8005808 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fe8:	f002 f862 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8000fec:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	4a57      	ldr	r2, [pc, #348]	; (8001150 <HAL_I2C_Init+0x1b4>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9b      	lsrs	r3, r3, #18
 8000ff8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4952      	ldr	r1, [pc, #328]	; (8001154 <HAL_I2C_Init+0x1b8>)
 800100c:	428b      	cmp	r3, r1
 800100e:	d802      	bhi.n	8001016 <HAL_I2C_Init+0x7a>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	e009      	b.n	800102a <HAL_I2C_Init+0x8e>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800101c:	fb01 f303 	mul.w	r3, r1, r3
 8001020:	494d      	ldr	r1, [pc, #308]	; (8001158 <HAL_I2C_Init+0x1bc>)
 8001022:	fba1 1303 	umull	r1, r3, r1, r3
 8001026:	099b      	lsrs	r3, r3, #6
 8001028:	3301      	adds	r3, #1
 800102a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a47      	ldr	r2, [pc, #284]	; (8001154 <HAL_I2C_Init+0x1b8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d812      	bhi.n	8001060 <HAL_I2C_Init+0xc4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	2b03      	cmp	r3, #3
 800104c:	d906      	bls.n	800105c <HAL_I2C_Init+0xc0>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	e045      	b.n	80010e8 <HAL_I2C_Init+0x14c>
 800105c:	2304      	movs	r3, #4
 800105e:	e043      	b.n	80010e8 <HAL_I2C_Init+0x14c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10f      	bne.n	8001088 <HAL_I2C_Init+0xec>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	e010      	b.n	80010aa <HAL_I2C_Init+0x10e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	009a      	lsls	r2, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2C_Init+0x116>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e01a      	b.n	80010e8 <HAL_I2C_Init+0x14c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10a      	bne.n	80010d0 <HAL_I2C_Init+0x134>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ce:	e00b      	b.n	80010e8 <HAL_I2C_Init+0x14c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	009a      	lsls	r2, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	69d1      	ldr	r1, [r2, #28]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6a12      	ldr	r2, [r2, #32]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6911      	ldr	r1, [r2, #16]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68d2      	ldr	r2, [r2, #12]
 8001106:	430a      	orrs	r2, r1
 8001108:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6951      	ldr	r1, [r2, #20]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6992      	ldr	r2, [r2, #24]
 8001116:	430a      	orrs	r2, r1
 8001118:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	f042 0201 	orr.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2220      	movs	r2, #32
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	431bde83 	.word	0x431bde83
 8001154:	000186a0 	.word	0x000186a0
 8001158:	10624dd3 	.word	0x10624dd3

0800115c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	461a      	mov	r2, r3
 8001168:	460b      	mov	r3, r1
 800116a:	817b      	strh	r3, [r7, #10]
 800116c:	4613      	mov	r3, r2
 800116e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001174:	f7ff fa28 	bl	80005c8 <HAL_GetTick>
 8001178:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b20      	cmp	r3, #32
 8001184:	f040 80ee 	bne.w	8001364 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2319      	movs	r3, #25
 800118e:	2201      	movs	r2, #1
 8001190:	4977      	ldr	r1, [pc, #476]	; (8001370 <HAL_I2C_Master_Transmit+0x214>)
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 fc6c 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800119e:	2302      	movs	r3, #2
 80011a0:	e0e1      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_I2C_Master_Transmit+0x54>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e0da      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d007      	beq.n	80011d6 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f042 0201 	orr.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011e4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2221      	movs	r2, #33	; 0x21
 80011ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2210      	movs	r2, #16
 80011f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	893a      	ldrh	r2, [r7, #8]
 8001206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <HAL_I2C_Master_Transmit+0x218>)
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001212:	b29a      	uxth	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001218:	8979      	ldrh	r1, [r7, #10]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	6a3a      	ldr	r2, [r7, #32]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 fadc 	bl	80017dc <I2C_MasterRequestWrite>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00f      	beq.n	800124a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b04      	cmp	r3, #4
 8001230:	d105      	bne.n	800123e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e093      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e08d      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001260:	e066      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	6a39      	ldr	r1, [r7, #32]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 fcc1 	bl	8001bee <I2C_WaitOnTXEFlagUntilTimeout>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00f      	beq.n	8001292 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b04      	cmp	r3, #4
 8001278:	d109      	bne.n	800128e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001288:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06b      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e069      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	1c58      	adds	r0, r3, #1
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	6248      	str	r0, [r1, #36]	; 0x24
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d119      	bne.n	8001300 <HAL_I2C_Master_Transmit+0x1a4>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d015      	beq.n	8001300 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	1c58      	adds	r0, r3, #1
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	6248      	str	r0, [r1, #36]	; 0x24
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	6a39      	ldr	r1, [r7, #32]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fcaf 	bl	8001c68 <I2C_WaitOnBTFFlagUntilTimeout>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00f      	beq.n	8001330 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	2b04      	cmp	r3, #4
 8001316:	d109      	bne.n	800132c <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001326:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e01c      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e01a      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d194      	bne.n	8001262 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2220      	movs	r2, #32
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	e000      	b.n	8001366 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001364:	2302      	movs	r3, #2
  }
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	00100002 	.word	0x00100002
 8001374:	ffff0000 	.word	0xffff0000

08001378 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	817b      	strh	r3, [r7, #10]
 8001388:	4613      	mov	r3, r2
 800138a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001390:	f7ff f91a 	bl	80005c8 <HAL_GetTick>
 8001394:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b20      	cmp	r3, #32
 80013a0:	f040 8215 	bne.w	80017ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2319      	movs	r3, #25
 80013aa:	2201      	movs	r2, #1
 80013ac:	4985      	ldr	r1, [pc, #532]	; (80015c4 <HAL_I2C_Master_Receive+0x24c>)
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fb5e 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80013ba:	2302      	movs	r3, #2
 80013bc:	e208      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_I2C_Master_Receive+0x54>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e201      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d007      	beq.n	80013f2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f042 0201 	orr.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001400:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2222      	movs	r2, #34	; 0x22
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2210      	movs	r2, #16
 800140e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	893a      	ldrh	r2, [r7, #8]
 8001422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a68      	ldr	r2, [pc, #416]	; (80015c8 <HAL_I2C_Master_Receive+0x250>)
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29a      	uxth	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001434:	8979      	ldrh	r1, [r7, #10]
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 fa50 	bl	80018e0 <I2C_MasterRequestRead>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00f      	beq.n	8001466 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b04      	cmp	r3, #4
 800144c:	d105      	bne.n	800145a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1ba      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1b4      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146a:	2b00      	cmp	r3, #0
 800146c:	d113      	bne.n	8001496 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	623b      	str	r3, [r7, #32]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e188      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11b      	bne.n	80014d6 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e168      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d11b      	bne.n	8001516 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	e148      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 800153c:	e134      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	2b03      	cmp	r3, #3
 8001544:	f200 80eb 	bhi.w	800171e <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154c:	2b01      	cmp	r3, #1
 800154e:	d127      	bne.n	80015a0 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fbc4 	bl	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	2b20      	cmp	r3, #32
 8001566:	d101      	bne.n	800156c <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e131      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e12f      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	6251      	str	r1, [r2, #36]	; 0x24
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	6912      	ldr	r2, [r2, #16]
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800159e:	e103      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d14a      	bne.n	800163e <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ae:	2200      	movs	r2, #0
 80015b0:	4906      	ldr	r1, [pc, #24]	; (80015cc <HAL_I2C_Master_Receive+0x254>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 fa5c 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e106      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
 80015c2:	bf00      	nop
 80015c4:	00100002 	.word	0x00100002
 80015c8:	ffff0000 	.word	0xffff0000
 80015cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6251      	str	r1, [r2, #36]	; 0x24
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	6912      	ldr	r2, [r2, #16]
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6251      	str	r1, [r2, #36]	; 0x24
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	6912      	ldr	r2, [r2, #16]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800163c:	e0b4      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001644:	2200      	movs	r2, #0
 8001646:	4964      	ldr	r1, [pc, #400]	; (80017d8 <HAL_I2C_Master_Receive+0x460>)
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fa11 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0bb      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	1c59      	adds	r1, r3, #1
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6251      	str	r1, [r2, #36]	; 0x24
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	6912      	ldr	r2, [r2, #16]
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168c:	b29b      	uxth	r3, r3
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169c:	2200      	movs	r2, #0
 800169e:	494e      	ldr	r1, [pc, #312]	; (80017d8 <HAL_I2C_Master_Receive+0x460>)
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f9e5 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e08f      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	1c59      	adds	r1, r3, #1
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6251      	str	r1, [r2, #36]	; 0x24
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	6912      	ldr	r2, [r2, #16]
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	6251      	str	r1, [r2, #36]	; 0x24
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	6912      	ldr	r2, [r2, #16]
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	3b01      	subs	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800171c:	e044      	b.n	80017a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fadd 	bl	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b20      	cmp	r3, #32
 8001734:	d101      	bne.n	800173a <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e04a      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e048      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	1c59      	adds	r1, r3, #1
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	6251      	str	r1, [r2, #36]	; 0x24
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	6912      	ldr	r2, [r2, #16]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b04      	cmp	r3, #4
 8001778:	d116      	bne.n	80017a8 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6251      	str	r1, [r2, #36]	; 0x24
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	6912      	ldr	r2, [r2, #16]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f aec6 	bne.w	800153e <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
  }
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	00010004 	.word	0x00010004

080017dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	460b      	mov	r3, r1
 80017ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d006      	beq.n	8001806 <I2C_MasterRequestWrite+0x2a>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <I2C_MasterRequestWrite+0x2a>
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001804:	d108      	bne.n	8001818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e00b      	b.n	8001830 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	2b12      	cmp	r3, #18
 800181e:	d107      	bne.n	8001830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800182e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f917 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e040      	b.n	80018ce <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001854:	d107      	bne.n	8001866 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	897a      	ldrh	r2, [r7, #10]
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	e021      	b.n	80018aa <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	897a      	ldrh	r2, [r7, #10]
 800186c:	11d2      	asrs	r2, r2, #7
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 0206 	and.w	r2, r2, #6
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f062 020f 	orn	r2, r2, #15
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4915      	ldr	r1, [pc, #84]	; (80018d8 <I2C_MasterRequestWrite+0xfc>)
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f944 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d007      	beq.n	80018a0 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2b04      	cmp	r3, #4
 8001896:	d101      	bne.n	800189c <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e018      	b.n	80018ce <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e016      	b.n	80018ce <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	897a      	ldrh	r2, [r7, #10]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	490b      	ldr	r1, [pc, #44]	; (80018dc <I2C_MasterRequestWrite+0x100>)
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 f92e 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d101      	bne.n	80018c8 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e002      	b.n	80018ce <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e000      	b.n	80018ce <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	00010008 	.word	0x00010008
 80018dc:	00010002 	.word	0x00010002

080018e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001904:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d006      	beq.n	800191a <I2C_MasterRequestRead+0x3a>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d003      	beq.n	800191a <I2C_MasterRequestRead+0x3a>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001918:	d108      	bne.n	800192c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e00b      	b.n	8001944 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	2b11      	cmp	r3, #17
 8001932:	d107      	bne.n	8001944 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f88d 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e07f      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001968:	d108      	bne.n	800197c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	897a      	ldrh	r2, [r7, #10]
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	e05f      	b.n	8001a3c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	897a      	ldrh	r2, [r7, #10]
 8001982:	11d2      	asrs	r2, r2, #7
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f002 0206 	and.w	r2, r2, #6
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f062 020f 	orn	r2, r2, #15
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4933      	ldr	r1, [pc, #204]	; (8001a68 <I2C_MasterRequestRead+0x188>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f8b9 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d101      	bne.n	80019b2 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e056      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e054      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	897a      	ldrh	r2, [r7, #10]
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4929      	ldr	r1, [pc, #164]	; (8001a6c <I2C_MasterRequestRead+0x18c>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f8a3 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d101      	bne.n	80019de <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e040      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e03e      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f82b 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e01d      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	897a      	ldrh	r2, [r7, #10]
 8001a2a:	11d2      	asrs	r2, r2, #7
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f002 0206 	and.w	r2, r2, #6
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f062 020e 	orn	r2, r2, #14
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	490a      	ldr	r1, [pc, #40]	; (8001a6c <I2C_MasterRequestRead+0x18c>)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f865 	bl	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d101      	bne.n	8001a5a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e002      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e000      	b.n	8001a60 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	00010008 	.word	0x00010008
 8001a6c:	00010002 	.word	0x00010002

08001a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001a80:	e01f      	b.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a88:	d01b      	beq.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a90:	f7fe fd9a 	bl	80005c8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad2      	subs	r2, r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d910      	bls.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e023      	b.n	8001b0a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10d      	bne.n	8001ae8 <I2C_WaitOnFlagUntilTimeout+0x78>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	e00c      	b.n	8001b02 <I2C_WaitOnFlagUntilTimeout+0x92>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4013      	ands	r3, r2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d0bc      	beq.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b20:	e040      	b.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d11c      	bne.n	8001b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b4a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e03c      	b.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b72:	d017      	beq.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001b7a:	f7fe fd25 	bl	80005c8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d90c      	bls.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e020      	b.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	0c1b      	lsrs	r3, r3, #16
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10c      	bne.n	8001bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e00b      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d19e      	bne.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bfa:	e029      	b.n	8001c50 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f8ba 	bl	8001d76 <I2C_IsAcknowledgeFailed>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e029      	b.n	8001c60 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c12:	d01d      	beq.n	8001c50 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c1a:	f7fe fcd5 	bl	80005c8 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1ad2      	subs	r2, r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d912      	bls.n	8001c50 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b80      	cmp	r3, #128	; 0x80
 8001c5c:	d1ce      	bne.n	8001bfc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c74:	e029      	b.n	8001cca <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f87d 	bl	8001d76 <I2C_IsAcknowledgeFailed>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e029      	b.n	8001cda <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c8c:	d01d      	beq.n	8001cca <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c94:	f7fe fc98 	bl	80005c8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	1ad2      	subs	r2, r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d912      	bls.n	8001cca <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e007      	b.n	8001cda <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d1ce      	bne.n	8001c76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cee:	e036      	b.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d114      	bne.n	8001d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f06f 0210 	mvn.w	r2, #16
 8001d06:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e022      	b.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8001d2e:	f7fe fc4b 	bl	80005c8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1ad2      	subs	r2, r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d90f      	bls.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f043 0220 	orr.w	r2, r3, #32
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e007      	b.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d1c1      	bne.n	8001cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8c:	d114      	bne.n	8001db8 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d96:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d129      	bne.n	8001e30 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dfe:	f022 0210 	bic.w	r2, r2, #16
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d12a      	bne.n	8001eae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	f023 030f 	bic.w	r3, r3, #15
 8001e7e:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	89fb      	ldrh	r3, [r7, #14]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	89fa      	ldrh	r2, [r7, #14]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 8001eae:	2302      	movs	r3, #2
  }
}  
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0bf      	b.n	8002056 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8d2 	bl	8002094 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	6992      	ldr	r2, [r2, #24]
 8001f02:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001f06:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6991      	ldr	r1, [r2, #24]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6850      	ldr	r0, [r2, #4]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6892      	ldr	r2, [r2, #8]
 8001f1a:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f20:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6912      	ldr	r2, [r2, #16]
 8001f26:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_LTDC_Init+0x1a4>)
 8001f38:	400b      	ands	r3, r1
 8001f3a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6891      	ldr	r1, [r2, #8]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6990      	ldr	r0, [r2, #24]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4302      	orrs	r2, r0
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68d9      	ldr	r1, [r3, #12]
 8001f64:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_LTDC_Init+0x1a4>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	68d1      	ldr	r1, [r2, #12]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6a10      	ldr	r0, [r2, #32]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4302      	orrs	r2, r0
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_LTDC_Init+0x1a4>)
 8001f94:	400b      	ands	r3, r1
 8001f96:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	6911      	ldr	r1, [r2, #16]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4302      	orrs	r2, r0
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6959      	ldr	r1, [r3, #20]
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_LTDC_Init+0x1a4>)
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	6951      	ldr	r1, [r2, #20]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4302      	orrs	r2, r0
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002002:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002012:	68b8      	ldr	r0, [r7, #8]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4302      	orrs	r2, r0
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800201e:	4302      	orrs	r2, r0
 8002020:	430a      	orrs	r2, r1
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800202e:	f042 0206 	orr.w	r2, r2, #6
 8002032:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	6992      	ldr	r2, [r2, #24]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	f000f800 	.word	0xf000f800

08002064 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f81b 	bl	80020a8 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_LTDC_ConfigLayer+0x1a>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e02c      	b.n	8002130 <HAL_LTDC_ConfigLayer+0x74>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2134      	movs	r1, #52	; 0x34
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f9f0 	bl	80024f6 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2201      	movs	r2, #1
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bdb0      	pop	{r4, r5, r7, pc}

08002138 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_LTDC_ConfigColorKeying+0x1a>
 800214e:	2302      	movs	r3, #2
 8002150:	e031      	b.n	80021b6 <HAL_LTDC_ConfigColorKeying+0x7e>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	4413      	add	r3, r2
 800216e:	3384      	adds	r3, #132	; 0x84
 8002170:	461a      	mov	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	440b      	add	r3, r1
 800217e:	3384      	adds	r3, #132	; 0x84
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002186:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	4413      	add	r3, r2
 8002194:	3384      	adds	r3, #132	; 0x84
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b089      	sub	sp, #36	; 0x24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_LTDC_ConfigCLUT+0x28>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e059      	b.n	800229e <HAL_LTDC_ConfigCLUT+0xdc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	e041      	b.n	8002284 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2134      	movs	r1, #52	; 0x34
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3348      	adds	r3, #72	; 0x48
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b06      	cmp	r3, #6
 8002212:	d114      	bne.n	800223e <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4413      	add	r3, r2
 800221c:	061a      	lsls	r2, r3, #24
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800222e:	431a      	orrs	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002238:	4313      	orrs	r3, r2
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	e010      	b.n	8002260 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	061a      	lsls	r2, r3, #24
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	431a      	orrs	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002252:	431a      	orrs	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800225c:	4313      	orrs	r3, r2
 800225e:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	3304      	adds	r3, #4
 8002264:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	01db      	lsls	r3, r3, #7
 8002274:	4413      	add	r3, r2
 8002276:	3384      	adds	r3, #132	; 0x84
 8002278:	461a      	mov	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	3301      	adds	r3, #1
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d3b9      	bcc.n	8002200 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_LTDC_EnableColorKeying+0x18>
 80022be:	2302      	movs	r3, #2
 80022c0:	e027      	b.n	8002312 <HAL_LTDC_EnableColorKeying+0x68>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	01db      	lsls	r3, r3, #7
 80022dc:	4413      	add	r3, r2
 80022de:	3384      	adds	r3, #132	; 0x84
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4619      	mov	r1, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	01db      	lsls	r3, r3, #7
 80022ec:	440b      	add	r3, r1
 80022ee:	3384      	adds	r3, #132	; 0x84
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_LTDC_DisableColorKeying+0x18>
 8002332:	2302      	movs	r3, #2
 8002334:	e027      	b.n	8002386 <HAL_LTDC_DisableColorKeying+0x68>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	4413      	add	r3, r2
 8002352:	3384      	adds	r3, #132	; 0x84
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	01db      	lsls	r3, r3, #7
 8002360:	440b      	add	r3, r1
 8002362:	3384      	adds	r3, #132	; 0x84
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0302 	bic.w	r3, r3, #2
 800236a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_LTDC_SetWindowPosition+0x1c>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e033      	b.n	8002416 <HAL_LTDC_SetWindowPosition+0x84>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2234      	movs	r2, #52	; 0x34
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	3338      	adds	r3, #56	; 0x38
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	441a      	add	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	441a      	add	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f87d 	bl	80024f6 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_LTDC_SetAlpha+0x1a>
 8002434:	2302      	movs	r3, #2
 8002436:	e024      	b.n	8002482 <HAL_LTDC_SetAlpha+0x64>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2234      	movs	r2, #52	; 0x34
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	3338      	adds	r3, #56	; 0x38
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6979      	ldr	r1, [r7, #20]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f847 	bl	80024f6 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_LTDC_SetAddress+0x1a>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e024      	b.n	80024ee <HAL_LTDC_SetAddress+0x64>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2234      	movs	r2, #52	; 0x34
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	3338      	adds	r3, #56	; 0x38
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f811 	bl	80024f6 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b089      	sub	sp, #36	; 0x24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	4413      	add	r3, r2
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	4413      	add	r3, r2
 8002530:	3384      	adds	r3, #132	; 0x84
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	01db      	lsls	r3, r3, #7
 800253e:	440b      	add	r3, r1
 8002540:	3384      	adds	r3, #132	; 0x84
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002548:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4413      	add	r3, r2
 8002556:	3384      	adds	r3, #132	; 0x84
 8002558:	4619      	mov	r1, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256a:	4413      	add	r3, r2
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002582:	4413      	add	r3, r2
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	01db      	lsls	r3, r3, #7
 8002592:	4413      	add	r3, r2
 8002594:	3384      	adds	r3, #132	; 0x84
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	01db      	lsls	r3, r3, #7
 80025a2:	440b      	add	r3, r1
 80025a4:	3384      	adds	r3, #132	; 0x84
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80025ac:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	01db      	lsls	r3, r3, #7
 80025b8:	4413      	add	r3, r2
 80025ba:	3384      	adds	r3, #132	; 0x84
 80025bc:	4619      	mov	r1, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025cc:	4413      	add	r3, r2
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	4413      	add	r3, r2
 80025e2:	3384      	adds	r3, #132	; 0x84
 80025e4:	461a      	mov	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	01db      	lsls	r3, r3, #7
 80025f0:	440b      	add	r3, r1
 80025f2:	3384      	adds	r3, #132	; 0x84
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f023 0307 	bic.w	r3, r3, #7
 80025fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	01db      	lsls	r3, r3, #7
 8002606:	4413      	add	r3, r2
 8002608:	3384      	adds	r3, #132	; 0x84
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	01db      	lsls	r3, r3, #7
 8002638:	4413      	add	r3, r2
 800263a:	3384      	adds	r3, #132	; 0x84
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	4413      	add	r3, r2
 800264a:	3384      	adds	r3, #132	; 0x84
 800264c:	461a      	mov	r2, r3
 800264e:	2300      	movs	r3, #0
 8002650:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	01db      	lsls	r3, r3, #7
 800265c:	4413      	add	r3, r2
 800265e:	3384      	adds	r3, #132	; 0x84
 8002660:	4619      	mov	r1, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002668:	461a      	mov	r2, r3
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	431a      	orrs	r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	431a      	orrs	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	01db      	lsls	r3, r3, #7
 8002682:	4413      	add	r3, r2
 8002684:	3384      	adds	r3, #132	; 0x84
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	01db      	lsls	r3, r3, #7
 8002692:	440b      	add	r3, r1
 8002694:	3384      	adds	r3, #132	; 0x84
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800269c:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	01db      	lsls	r3, r3, #7
 80026a8:	4413      	add	r3, r2
 80026aa:	3384      	adds	r3, #132	; 0x84
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	4413      	add	r3, r2
 80026c0:	3384      	adds	r3, #132	; 0x84
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	01db      	lsls	r3, r3, #7
 80026ce:	440b      	add	r3, r1
 80026d0:	3384      	adds	r3, #132	; 0x84
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026d8:	f023 0307 	bic.w	r3, r3, #7
 80026dc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	4413      	add	r3, r2
 80026ea:	3384      	adds	r3, #132	; 0x84
 80026ec:	4619      	mov	r1, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	01db      	lsls	r3, r3, #7
 8002704:	4413      	add	r3, r2
 8002706:	3384      	adds	r3, #132	; 0x84
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	01db      	lsls	r3, r3, #7
 8002714:	4413      	add	r3, r2
 8002716:	3384      	adds	r3, #132	; 0x84
 8002718:	461a      	mov	r2, r3
 800271a:	2300      	movs	r3, #0
 800271c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	01db      	lsls	r3, r3, #7
 8002728:	4413      	add	r3, r2
 800272a:	3384      	adds	r3, #132	; 0x84
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 800273c:	2304      	movs	r3, #4
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	e01b      	b.n	800277a <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 800274a:	2303      	movs	r3, #3
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e014      	b.n	800277a <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d00b      	beq.n	8002770 <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800275c:	2b02      	cmp	r3, #2
 800275e:	d007      	beq.n	8002770 <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002764:	2b03      	cmp	r3, #3
 8002766:	d003      	beq.n	8002770 <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800276c:	2b07      	cmp	r3, #7
 800276e:	d102      	bne.n	8002776 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 8002770:	2302      	movs	r3, #2
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	e001      	b.n	800277a <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	01db      	lsls	r3, r3, #7
 8002784:	4413      	add	r3, r2
 8002786:	3384      	adds	r3, #132	; 0x84
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	01db      	lsls	r3, r3, #7
 8002794:	440b      	add	r3, r1
 8002796:	3384      	adds	r3, #132	; 0x84
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800279e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	01db      	lsls	r3, r3, #7
 80027aa:	4413      	add	r3, r2
 80027ac:	3384      	adds	r3, #132	; 0x84
 80027ae:	4618      	mov	r0, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	041a      	lsls	r2, r3, #16
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1acb      	subs	r3, r1, r3
 80027c6:	69f9      	ldr	r1, [r7, #28]
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	3303      	adds	r3, #3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	01db      	lsls	r3, r3, #7
 80027dc:	4413      	add	r3, r2
 80027de:	3384      	adds	r3, #132	; 0x84
 80027e0:	461a      	mov	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	01db      	lsls	r3, r3, #7
 80027ec:	440b      	add	r3, r1
 80027ee:	3384      	adds	r3, #132	; 0x84
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	01db      	lsls	r3, r3, #7
 8002806:	4413      	add	r3, r2
 8002808:	3384      	adds	r3, #132	; 0x84
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	01db      	lsls	r3, r3, #7
 800281c:	4413      	add	r3, r2
 800281e:	3384      	adds	r3, #132	; 0x84
 8002820:	461a      	mov	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	01db      	lsls	r3, r3, #7
 800282c:	440b      	add	r3, r1
 800282e:	3384      	adds	r3, #132	; 0x84
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7fd feaa 	bl	80005c8 <HAL_GetTick>
 8002874:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002876:	e009      	b.n	800288c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002878:	f7fd fea6 	bl	80005c8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002886:	d901      	bls.n	800288c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e01f      	b.n	80028cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_PWREx_EnableOverDrive+0x98>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d1ee      	bne.n	8002878 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a0:	f7fd fe92 	bl	80005c8 <HAL_GetTick>
 80028a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028a6:	e009      	b.n	80028bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a8:	f7fd fe8e 	bl	80005c8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b6:	d901      	bls.n	80028bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e007      	b.n	80028cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_PWREx_EnableOverDrive+0x98>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028c8:	d1ee      	bne.n	80028a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	420e0040 	.word	0x420e0040
 80028dc:	40007000 	.word	0x40007000
 80028e0:	420e0044 	.word	0x420e0044

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e22d      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d075      	beq.n	80029ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002902:	4ba3      	ldr	r3, [pc, #652]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d00c      	beq.n	8002928 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4ba0      	ldr	r3, [pc, #640]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d112      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291a:	4b9d      	ldr	r3, [pc, #628]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002926:	d10b      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	4b99      	ldr	r3, [pc, #612]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05b      	beq.n	80029ec <HAL_RCC_OscConfig+0x108>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d157      	bne.n	80029ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e208      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x74>
 800294a:	4a91      	ldr	r2, [pc, #580]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	4b90      	ldr	r3, [pc, #576]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x98>
 8002962:	4a8b      	ldr	r2, [pc, #556]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	4b8a      	ldr	r3, [pc, #552]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4a88      	ldr	r2, [pc, #544]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	4b87      	ldr	r3, [pc, #540]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 800297c:	4a84      	ldr	r2, [pc, #528]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800297e:	4b84      	ldr	r3, [pc, #528]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4a81      	ldr	r2, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fd fe14 	bl	80005c8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fd fe10 	bl	80005c8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1cd      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0xc0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fd fe00 	bl	80005c8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fd fdfc 	bl	80005c8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1b9      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0xe8>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029fa:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b5f      	ldr	r3, [pc, #380]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e18d      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4956      	ldr	r1, [pc, #344]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e03a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCC_OscConfig+0x2b0>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fd fdb5 	bl	80005c8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fd fdb1 	bl	80005c8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e16e      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4943      	ldr	r1, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a82:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_RCC_OscConfig+0x2b0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fd fd94 	bl	80005c8 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fd fd90 	bl	80005c8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e14d      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d030      	beq.n	8002b30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fd fd74 	bl	80005c8 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7fd fd70 	bl	80005c8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e12d      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x200>
 8002b02:	e015      	b.n	8002b30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7fd fd5d 	bl	80005c8 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fd fd59 	bl	80005c8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e116      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a0 	beq.w	8002c7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_OscConfig+0x2b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d121      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_RCC_OscConfig+0x2b8>)
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_RCC_OscConfig+0x2b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fd fd1f 	bl	80005c8 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e011      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2ce>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	42470000 	.word	0x42470000
 8002b98:	42470e80 	.word	0x42470e80
 8002b9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fd fd12 	bl	80005c8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cf      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
 8002bc6:	4a66      	ldr	r2, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bc8:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	e01c      	b.n	8002c0e <HAL_RCC_OscConfig+0x32a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x312>
 8002bdc:	4a60      	ldr	r2, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bde:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bea:	4b5d      	ldr	r3, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x32a>
 8002bf6:	4a5a      	ldr	r2, [pc, #360]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c04:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d015      	beq.n	8002c42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c16:	f7fd fcd7 	bl	80005c8 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fd fcd3 	bl	80005c8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e08e      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ee      	beq.n	8002c1e <HAL_RCC_OscConfig+0x33a>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fd fcc1 	bl	80005c8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fd fcbd 	bl	80005c8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e078      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d064      	beq.n	8002d50 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d05c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d141      	bne.n	8002d1e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_RCC_OscConfig+0x480>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fd fc92 	bl	80005c8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fd fc8e 	bl	80005c8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04b      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc6:	4926      	ldr	r1, [pc, #152]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	019b      	lsls	r3, r3, #6
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_RCC_OscConfig+0x480>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fd fc67 	bl	80005c8 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fd fc63 	bl	80005c8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e020      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x41a>
 8002d1c:	e018      	b.n	8002d50 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_RCC_OscConfig+0x480>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd fc50 	bl	80005c8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fd fc4c 	bl	80005c8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_RCC_OscConfig+0x47c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x448>
 8002d4a:	e001      	b.n	8002d50 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	40023800 	.word	0x40023800
 8002d64:	42470060 	.word	0x42470060

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0ca      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 020f 	and.w	r2, r3, #15
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 020f 	and.w	r2, r3, #15
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b6      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd6:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	494f      	ldr	r1, [pc, #316]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07d      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06d      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e065      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4936      	ldr	r1, [pc, #216]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 0203 	bic.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fd fbb6 	bl	80005c8 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fd fbb2 	bl	80005c8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04d      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_ClockConfig+0x1b4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d90c      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_ClockConfig+0x1b4>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_RCC_ClockConfig+0x1b4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e030      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4918      	ldr	r1, [pc, #96]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4911      	ldr	r1, [pc, #68]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f81d 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	5cd3      	ldrb	r3, [r2, r3]
 8002f02:	fa21 f303 	lsr.w	r3, r1, r3
 8002f06:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fb18 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08015bbc 	.word	0x08015bbc
 8002f28:	20000068 	.word	0x20000068

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f34:	2200      	movs	r2, #0
 8002f36:	60fa      	str	r2, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	617a      	str	r2, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002f40:	2200      	movs	r2, #0
 8002f42:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	f002 020c 	and.w	r2, r2, #12
 8002f4c:	2a04      	cmp	r2, #4
 8002f4e:	d007      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x34>
 8002f50:	2a08      	cmp	r2, #8
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	f040 8090 	bne.w	800307a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f5a:	4b4d      	ldr	r3, [pc, #308]	; (8003090 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f5c:	613b      	str	r3, [r7, #16]
       break;
 8002f5e:	e08f      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f62:	613b      	str	r3, [r7, #16]
      break;
 8002f64:	e08c      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f66:	4a49      	ldr	r2, [pc, #292]	; (800308c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f68:	6852      	ldr	r2, [r2, #4]
 8002f6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002f6e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f70:	4a46      	ldr	r2, [pc, #280]	; (800308c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f72:	6852      	ldr	r2, [r2, #4]
 8002f74:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002f78:	2a00      	cmp	r2, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	ea03 0301 	and.w	r3, r3, r1
 8002f92:	ea04 0402 	and.w	r4, r4, r2
 8002f96:	4a3f      	ldr	r2, [pc, #252]	; (8003094 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f98:	fb02 f104 	mul.w	r1, r2, r4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	fb02 f203 	mul.w	r2, r2, r3
 8002fa2:	440a      	add	r2, r1
 8002fa4:	493b      	ldr	r1, [pc, #236]	; (8003094 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fa6:	fba3 0101 	umull	r0, r1, r3, r1
 8002faa:	1853      	adds	r3, r2, r1
 8002fac:	4619      	mov	r1, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f04f 0400 	mov.w	r4, #0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	f7fd f918 	bl	80001ec <__aeabi_uldivmod>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e04c      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc4:	4a31      	ldr	r2, [pc, #196]	; (800308c <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc6:	6852      	ldr	r2, [r2, #4]
 8002fc8:	0992      	lsrs	r2, r2, #6
 8002fca:	4611      	mov	r1, r2
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002fd4:	f04f 0600 	mov.w	r6, #0
 8002fd8:	ea05 0501 	and.w	r5, r5, r1
 8002fdc:	ea06 0602 	and.w	r6, r6, r2
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002fe8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002fec:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	465a      	mov	r2, fp
 8002ff4:	46aa      	mov	sl, r5
 8002ff6:	46b3      	mov	fp, r6
 8002ff8:	4655      	mov	r5, sl
 8002ffa:	465e      	mov	r6, fp
 8002ffc:	1b4d      	subs	r5, r1, r5
 8002ffe:	eb62 0606 	sbc.w	r6, r2, r6
 8003002:	4629      	mov	r1, r5
 8003004:	4632      	mov	r2, r6
 8003006:	0194      	lsls	r4, r2, #6
 8003008:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800300c:	018b      	lsls	r3, r1, #6
 800300e:	1a5b      	subs	r3, r3, r1
 8003010:	eb64 0402 	sbc.w	r4, r4, r2
 8003014:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003018:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800301c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003020:	4643      	mov	r3, r8
 8003022:	464c      	mov	r4, r9
 8003024:	4655      	mov	r5, sl
 8003026:	465e      	mov	r6, fp
 8003028:	18ed      	adds	r5, r5, r3
 800302a:	eb46 0604 	adc.w	r6, r6, r4
 800302e:	462b      	mov	r3, r5
 8003030:	4634      	mov	r4, r6
 8003032:	02a2      	lsls	r2, r4, #10
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f04f 0400 	mov.w	r4, #0
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	f7fd f8ca 	bl	80001ec <__aeabi_uldivmod>
 8003058:	4603      	mov	r3, r0
 800305a:	460c      	mov	r4, r1
 800305c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_GetSysClockFreq+0x160>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	3301      	adds	r3, #1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	613b      	str	r3, [r7, #16]
      break;
 8003078:	e002      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetSysClockFreq+0x164>)
 800307c:	613b      	str	r3, [r7, #16]
      break;
 800307e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003080:	693b      	ldr	r3, [r7, #16]
}
 8003082:	4618      	mov	r0, r3
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	00f42400 	.word	0x00f42400
 8003094:	017d7840 	.word	0x017d7840

08003098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_GetHCLKFreq+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000068 	.word	0x20000068

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b4:	f7ff fff0 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030b8:	4601      	mov	r1, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0a9b      	lsrs	r3, r3, #10
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4a03      	ldr	r2, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	08015bcc 	.word	0x08015bcc

080030d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d061      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003100:	4ba3      	ldr	r3, [pc, #652]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003106:	f7fd fa5f 	bl	80005c8 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800310e:	f7fd fa5b 	bl	80005c8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e177      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003120:	4b9c      	ldr	r3, [pc, #624]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003138:	4996      	ldr	r1, [pc, #600]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003158:	4b8e      	ldr	r3, [pc, #568]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	0f1b      	lsrs	r3, r3, #28
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003166:	498b      	ldr	r1, [pc, #556]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	019a      	lsls	r2, r3, #6
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	431a      	orrs	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	071b      	lsls	r3, r3, #28
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003180:	4984      	ldr	r1, [pc, #528]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003182:	4b84      	ldr	r3, [pc, #528]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003188:	f023 021f 	bic.w	r2, r3, #31
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	3b01      	subs	r3, #1
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003198:	4b7d      	ldr	r3, [pc, #500]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800319e:	f7fd fa13 	bl	80005c8 <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031a6:	f7fd fa0f 	bl	80005c8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e12b      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b8:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d079      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031dc:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031e2:	f7fd f9f1 	bl	80005c8 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031ea:	f7fd f9ed 	bl	80005c8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e109      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031fc:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003208:	d0ef      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0f1b      	lsrs	r3, r3, #28
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003224:	495b      	ldr	r1, [pc, #364]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	431a      	orrs	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	071b      	lsls	r3, r3, #28
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800323e:	4955      	ldr	r1, [pc, #340]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003240:	4b54      	ldr	r3, [pc, #336]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003246:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	3b01      	subs	r3, #1
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	0e1b      	lsrs	r3, r3, #24
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003272:	4948      	ldr	r1, [pc, #288]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	019a      	lsls	r2, r3, #6
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800328c:	4941      	ldr	r1, [pc, #260]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800328e:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032a8:	f7fd f98e 	bl	80005c8 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032b0:	f7fd f98a 	bl	80005c8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0a6      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ce:	d1ef      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 808d 	beq.w	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032e4:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032fa:	4a28      	ldr	r2, [pc, #160]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003306:	f7fd f95f 	bl	80005c8 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fd f95b 	bl	80005c8 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e077      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003320:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003334:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d039      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	429a      	cmp	r2, r3
 8003348:	d032      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003360:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01e      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003372:	f7fd f929 	bl	80005c8 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e014      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd f925 	bl	80005c8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d90b      	bls.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e03f      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003390:	42470068 	.word	0x42470068
 8003394:	40023800 	.word	0x40023800
 8003398:	42470070 	.word	0x42470070
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0e4      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033bc:	d10d      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x302>
 80033be:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]
 80033d8:	e005      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033e4:	6093      	str	r3, [r2, #8]
 80033e6:	490c      	ldr	r1, [pc, #48]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	4313      	orrs	r3, r2
 80033f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003404:	4a05      	ldr	r2, [pc, #20]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800340c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	424711e0 	.word	0x424711e0

08003420 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e025      	b.n	8003480 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f81d 	bl	8003488 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 fa28 	bl	80038b6 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	f000 fa93 	bl	800399c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d101      	bne.n	80034b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
 80034b6:	e018      	b.n	80034ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fae6 	bl	8003a9a <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d104      	bne.n	80034e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2205      	movs	r2, #5
 80034da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80034de:	e003      	b.n	80034e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d101      	bne.n	800350c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	e00e      	b.n	800352a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 faf9 	bl	8003b12 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08a      	sub	sp, #40	; 0x28
 8003536:	af02      	add	r7, sp, #8
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_SPI_Transmit+0x26>
 8003554:	2302      	movs	r3, #2
 8003556:	e123      	b.n	80037a0 <HAL_SPI_Transmit+0x26e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003560:	f7fd f832 	bl	80005c8 <HAL_GetTick>
 8003564:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003576:	e10a      	b.n	800378e <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_SPI_Transmit+0x52>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003588:	e101      	b.n	800378e <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	d107      	bne.n	80035e2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d007      	beq.n	8003600 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003608:	d147      	bne.n	800369a <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_SPI_Transmit+0xea>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d138      	bne.n	800368e <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	8812      	ldrh	r2, [r2, #0]
 8003624:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3302      	adds	r3, #2
 800362a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800363a:	e028      	b.n	800368e <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d10f      	bne.n	800366a <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3302      	adds	r3, #2
 8003658:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	86da      	strh	r2, [r3, #54]	; 0x36
 8003668:	e011      	b.n	800368e <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_SPI_Transmit+0x156>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003676:	d00a      	beq.n	800368e <HAL_SPI_Transmit+0x15c>
 8003678:	f7fc ffa6 	bl	80005c8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800368c:	e07f      	b.n	800378e <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1d1      	bne.n	800363c <HAL_SPI_Transmit+0x10a>
 8003698:	e048      	b.n	800372c <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <HAL_SPI_Transmit+0x17a>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d13a      	bne.n	8003722 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	7812      	ldrb	r2, [r2, #0]
 80036b6:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036cc:	e029      	b.n	8003722 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d110      	bne.n	80036fe <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3301      	adds	r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80036fc:	e011      	b.n	8003722 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_SPI_Transmit+0x1ea>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370a:	d00a      	beq.n	8003722 <HAL_SPI_Transmit+0x1f0>
 800370c:	f7fc ff5c 	bl	80005c8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad2      	subs	r2, r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003720:	e035      	b.n	800378e <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1d0      	bne.n	80036ce <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2201      	movs	r2, #1
 8003734:	2102      	movs	r1, #2
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f836 	bl	80037a8 <SPI_WaitFlagStateUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003746:	e022      	b.n	800378e <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f894 	bl	800387a <SPI_CheckFlag_BSY>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003762:	e014      	b.n	800378e <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800379e:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80037b6:	e04d      	b.n	8003854 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037be:	d049      	beq.n	8003854 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80037c6:	f7fc feff 	bl	80005c8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d33e      	bcc.n	8003854 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6852      	ldr	r2, [r2, #4]
 80037e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037e4:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ee:	d111      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d004      	beq.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d107      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d110      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800382c:	400b      	ands	r3, r1
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383e:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e00e      	b.n	8003872 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	401a      	ands	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d101      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003864:	2201      	movs	r2, #1
 8003866:	e000      	b.n	800386a <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003868:	2200      	movs	r2, #0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d1a3      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af02      	add	r7, sp, #8
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff ff89 	bl	80037a8 <SPI_WaitFlagStateUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e000      	b.n	80038ae <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d029      	beq.n	8003924 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038e0:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80038ea:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80038f0:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80038f6:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80038fc:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003902:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8003908:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800390e:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003914:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e034      	b.n	800398e <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003930:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800393a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003940:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003954:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003958:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003962:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8003968:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800396e:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003974:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800397a:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4313      	orrs	r3, r2
 8003980:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d02e      	beq.n	8003a14 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039c2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80039d2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	3b01      	subs	r3, #1
 80039da:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80039dc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80039e6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80039f0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80039fa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e03b      	b.n	8003a8c <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a24:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003a36:	4313      	orrs	r3, r2
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a4a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003a5a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003a64:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003a6e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003ab6:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8003ac0:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003ad2:	f7fc fd79 	bl	80005c8 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003ad8:	e010      	b.n	8003afc <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae0:	d00c      	beq.n	8003afc <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <FMC_SDRAM_SendCommand+0x5e>
 8003ae8:	f7fc fd6e 	bl	80005c8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d901      	bls.n	8003afc <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e006      	b.n	8003b0a <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e8      	bne.n	8003ada <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <GUI_X_GetTime+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	2001ba88 	.word	0x2001ba88

08003b50 <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <GUI_X_Delay+0x2c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 8003b62:	bf00      	nop
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <GUI_X_Delay+0x2c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dcf9      	bgt.n	8003b64 <GUI_X_Delay+0x14>
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	2001ba88 	.word	0x2001ba88

08003b80 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 8003b94:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <GUI_X_Config+0x14>)
 8003b9a:	f003 fcf7 	bl	800758c <GUI_ALLOC_AssignMemory>

}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000254 	.word	0x20000254

08003ba8 <GRAPHICS_MainTask>:
  ******************************************************************************
  */
#include "GUI_App.h"
#include "GUI.h"

void GRAPHICS_MainTask(void) {
 8003ba8:	b598      	push	{r3, r4, r7, lr}
 8003baa:	af00      	add	r7, sp, #0

/* USER CODE BEGIN GRAPHICS_MainTask */
 /* User can implement his graphic application here */
  /* Hello Word example */
	GUI_SetBkColor(GUI_DARKBLUE);
 8003bac:	4811      	ldr	r0, [pc, #68]	; (8003bf4 <GRAPHICS_MainTask+0x4c>)
 8003bae:	f003 fe51 	bl	8007854 <GUI_SetBkColor>
    GUI_Clear();
 8003bb2:	f003 feff 	bl	80079b4 <GUI_Clear>
    GUI_SetColor(GUI_WHITE);
 8003bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bba:	f003 fe4d 	bl	8007858 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32_1);
 8003bbe:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <GRAPHICS_MainTask+0x50>)
 8003bc0:	f003 fe70 	bl	80078a4 <GUI_SetFont>
    GUI_DispStringAt("Hello world!", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);
 8003bc4:	f005 fb90 	bl	80092e8 <LCD_GetXSize>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	3b96      	subs	r3, #150	; 0x96
 8003bcc:	0fda      	lsrs	r2, r3, #31
 8003bce:	4413      	add	r3, r2
 8003bd0:	105b      	asrs	r3, r3, #1
 8003bd2:	461c      	mov	r4, r3
 8003bd4:	f005 fb9e 	bl	8009314 <LCD_GetYSize>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	3b14      	subs	r3, #20
 8003bdc:	0fda      	lsrs	r2, r3, #31
 8003bde:	4413      	add	r3, r2
 8003be0:	105b      	asrs	r3, r3, #1
 8003be2:	461a      	mov	r2, r3
 8003be4:	4621      	mov	r1, r4
 8003be6:	4805      	ldr	r0, [pc, #20]	; (8003bfc <GRAPHICS_MainTask+0x54>)
 8003be8:	f004 f9c2 	bl	8007f70 <GUI_DispStringAt>

/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
 8003bec:	2064      	movs	r0, #100	; 0x64
 8003bee:	f004 fa0d 	bl	800800c <GUI_Delay>
 8003bf2:	e7fb      	b.n	8003bec <GRAPHICS_MainTask+0x44>
 8003bf4:	ff000080 	.word	0xff000080
 8003bf8:	0801184c 	.word	0x0801184c
 8003bfc:	080112f8 	.word	0x080112f8

08003c00 <MX_LCD_Init>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;
// ili9341_Init();
 MyLCD_PowerOn();
 8003c06:	f001 fa61 	bl	80050cc <MyLCD_PowerOn>
/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8003c0a:	483b      	ldr	r0, [pc, #236]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c0c:	f7fe fa2a 	bl	8002064 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8003c10:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c12:	4a3a      	ldr	r2, [pc, #232]	; (8003cfc <MX_LCD_Init+0xfc>)
 8003c14:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003c16:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003c22:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003c28:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c30:	2208      	movs	r2, #8
 8003c32:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8003c34:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c3c:	221d      	movs	r2, #29
 8003c3e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c42:	2203      	movs	r2, #3
 8003c44:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8003c46:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c48:	f240 120d 	movw	r2, #269	; 0x10d
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c50:	f240 1243 	movw	r2, #323	; 0x143
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8003c56:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c58:	f240 1217 	movw	r2, #279	; 0x117
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c60:	f240 1247 	movw	r2, #327	; 0x147
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003c6e:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003c7e:	481e      	ldr	r0, [pc, #120]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003c80:	f7fe f91c 	bl	8001ebc <HAL_LTDC_Init>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_LCD_Init+0x8e>
  {
    Error_Handler( );
 8003c8a:	f001 fd6b 	bl	8005764 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8003c92:	23f0      	movs	r3, #240	; 0xf0
 8003c94:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8003c9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003c9e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003ca4:	23ff      	movs	r3, #255	; 0xff
 8003ca6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003cb2:	2305      	movs	r3, #5
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003cb6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8003cbc:	23f0      	movs	r3, #240	; 0xf0
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8003cc0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4806      	ldr	r0, [pc, #24]	; (8003cf8 <MX_LCD_Init+0xf8>)
 8003ce0:	f7fe f9ec 	bl	80020bc <HAL_LTDC_ConfigLayer>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_LCD_Init+0xee>
  {
    Error_Handler( );
 8003cea:	f001 fd3b 	bl	8005764 <Error_Handler>
  }

}
 8003cee:	bf00      	nop
 8003cf0:	3738      	adds	r7, #56	; 0x38
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2001ba8c 	.word	0x2001ba8c
 8003cfc:	40016800 	.word	0x40016800

08003d00 <MX_FMC_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
/* FMC initialization function */
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d08:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <MX_FMC_Init+0x8c>)
 8003d0a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003d12:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d20:	2210      	movs	r2, #16
 8003d22:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003d2a:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d2c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003d30:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d3e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003d52:	2307      	movs	r3, #7
 8003d54:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003d56:	2304      	movs	r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8003d5a:	2307      	movs	r3, #7
 8003d5c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003d62:	2302      	movs	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4806      	ldr	r0, [pc, #24]	; (8003d88 <MX_FMC_Init+0x88>)
 8003d70:	f7ff fb56 	bl	8003420 <HAL_SDRAM_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8003d7a:	f001 fcf3 	bl	8005764 <Error_Handler>
  }

}
 8003d7e:	bf00      	nop
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2001bb74 	.word	0x2001bb74
 8003d8c:	a0000140 	.word	0xa0000140

08003d90 <MX_SDRAM_InitEx>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK2;
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003da2:	2208      	movs	r2, #8
 8003da4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003dac:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003db6:	4924      	ldr	r1, [pc, #144]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003db8:	4824      	ldr	r0, [pc, #144]	; (8003e4c <MX_SDRAM_InitEx+0xbc>)
 8003dba:	f7ff fb6f 	bl	800349c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f7fc fc0e 	bl	80005e0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dcc:	2208      	movs	r2, #8
 8003dce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8003ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de0:	4919      	ldr	r1, [pc, #100]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003de2:	481a      	ldr	r0, [pc, #104]	; (8003e4c <MX_SDRAM_InitEx+0xbc>)
 8003de4:	f7ff fb5a 	bl	800349c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dea:	2203      	movs	r2, #3
 8003dec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003df0:	2208      	movs	r2, #8
 8003df2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 4;
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003df6:	2204      	movs	r2, #4
 8003df8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003dfa:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e04:	4910      	ldr	r1, [pc, #64]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003e06:	4811      	ldr	r0, [pc, #68]	; (8003e4c <MX_SDRAM_InitEx+0xbc>)
 8003e08:	f7ff fb48 	bl	800349c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003e0c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003e10:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003e14:	2204      	movs	r2, #4
 8003e16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003e28:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e2e:	4906      	ldr	r1, [pc, #24]	; (8003e48 <MX_SDRAM_InitEx+0xb8>)
 8003e30:	4806      	ldr	r0, [pc, #24]	; (8003e4c <MX_SDRAM_InitEx+0xbc>)
 8003e32:	f7ff fb33 	bl	800349c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8003e36:	f240 516a 	movw	r1, #1386	; 0x56a
 8003e3a:	4804      	ldr	r0, [pc, #16]	; (8003e4c <MX_SDRAM_InitEx+0xbc>)
 8003e3c:	f7ff fb59 	bl	80034f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	2001ba54 	.word	0x2001ba54
 8003e4c:	2001bb74 	.word	0x2001bb74

08003e50 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) 
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
/* Configure the DMA2D default mode */ 

  hdma2d.Instance = DMA2D;
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <MX_DMA2D_Init+0x8c>)
 8003e58:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e60:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB888;
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003e86:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003e9e:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003ea0:	f7fc fcc2 	bl	8000828 <HAL_DMA2D_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_DMA2D_Init+0x5e>
  {
    Error_Handler( );
 8003eaa:	f001 fc5b 	bl	8005764 <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003eb2:	f7fc fe1d 	bl	8000af0 <HAL_DMA2D_ConfigLayer>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_DMA2D_Init+0x70>
  {
    Error_Handler( );
 8003ebc:	f001 fc52 	bl	8005764 <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <MX_DMA2D_Init+0x88>)
 8003ec4:	f7fc fe14 	bl	8000af0 <HAL_DMA2D_ConfigLayer>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_DMA2D_Init+0x82>
  {
    Error_Handler( );
 8003ece:	f001 fc49 	bl	8005764 <Error_Handler>
  }

}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2001bb34 	.word	0x2001bb34
 8003edc:	4002b000 	.word	0x4002b000

08003ee0 <_Color2IndexBulk_M8888I_DMA2D>:
}                                                                                                              \
static void _Index2ColorBulk_##PFIX##_DMA2D(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex) { \
  _DMA_Index2ColorBulk(pIndex, pColor, NumItems, SizeOfIndex, PIXELFORMAT);                                    \
}

DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	70fb      	strb	r3, [r7, #3]
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fae3 	bl	80044c6 <_DMA_Color2IndexBulk>
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_Index2ColorBulk_M8888I_DMA2D>:
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	70fb      	strb	r3, [r7, #3]
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fabc 	bl	80044a0 <_DMA_Index2ColorBulk>
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	70fb      	strb	r3, [r7, #3]
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fabb 	bl	80044c6 <_DMA_Color2IndexBulk>
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_Index2ColorBulk_M888_DMA2D>:
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	70fb      	strb	r3, [r7, #3]
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fa94 	bl	80044a0 <_DMA_Index2ColorBulk>
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	70fb      	strb	r3, [r7, #3]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	2302      	movs	r3, #2
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fa93 	bl	80044c6 <_DMA_Color2IndexBulk>
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_Index2ColorBulk_M565_DMA2D>:
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	70fb      	strb	r3, [r7, #3]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	2302      	movs	r3, #2
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa6c 	bl	80044a0 <_DMA_Index2ColorBulk>
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	70fb      	strb	r3, [r7, #3]
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa6b 	bl	80044c6 <_DMA_Color2IndexBulk>
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_Index2ColorBulk_M1555I_DMA2D>:
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	70fb      	strb	r3, [r7, #3]
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	2303      	movs	r3, #3
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fa44 	bl	80044a0 <_DMA_Index2ColorBulk>
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	70fb      	strb	r3, [r7, #3]
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	2304      	movs	r3, #4
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa43 	bl	80044c6 <_DMA_Color2IndexBulk>
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_Index2ColorBulk_M4444I_DMA2D>:
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	70fb      	strb	r3, [r7, #3]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	2304      	movs	r3, #4
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fa1c 	bl	80044a0 <_DMA_Index2ColorBulk>
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_DMA_ExecOperation>:

/*********************************************************************
*
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <_DMA_ExecOperation+0x28>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <_DMA_ExecOperation+0x1c>
    return;
  
  while(TransferInProgress) {
 800407e:	bf00      	nop
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <_DMA_ExecOperation+0x28>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1fa      	bne.n	8004080 <_DMA_ExecOperation+0x10>
 800408a:	e000      	b.n	800408e <_DMA_ExecOperation+0x1e>
    return;
 800408c:	bf00      	nop
  }
}
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2001ba80 	.word	0x2001ba80

0800409c <GetPixelformat>:
/**
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static U32 GetPixelformat(U32 LayerIndex) {
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  

  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <GetPixelformat+0x12>
    return 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e0af      	b.n	800420e <GetPixelformat+0x172>
  }

  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 80040ae:	4a5b      	ldr	r2, [pc, #364]	; (800421c <GetPixelformat+0x180>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b6:	4a5a      	ldr	r2, [pc, #360]	; (8004220 <GetPixelformat+0x184>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4956      	ldr	r1, [pc, #344]	; (800421c <GetPixelformat+0x180>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040ca:	4956      	ldr	r1, [pc, #344]	; (8004224 <GetPixelformat+0x188>)
 80040cc:	428b      	cmp	r3, r1
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	4619      	mov	r1, r3
 80040dc:	4a4f      	ldr	r2, [pc, #316]	; (800421c <GetPixelformat+0x180>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e4:	4a50      	ldr	r2, [pc, #320]	; (8004228 <GetPixelformat+0x18c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	430b      	orrs	r3, r1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <GetPixelformat+0x5e>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e089      	b.n	800420e <GetPixelformat+0x172>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 80040fa:	4a48      	ldr	r2, [pc, #288]	; (800421c <GetPixelformat+0x180>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004102:	4a4a      	ldr	r2, [pc, #296]	; (800422c <GetPixelformat+0x190>)
 8004104:	4293      	cmp	r3, r2
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4943      	ldr	r1, [pc, #268]	; (800421c <GetPixelformat+0x180>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004116:	4946      	ldr	r1, [pc, #280]	; (8004230 <GetPixelformat+0x194>)
 8004118:	428b      	cmp	r3, r1
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <GetPixelformat+0x92>
    return LTDC_PIXEL_FORMAT_RGB888;
 800412a:	2301      	movs	r3, #1
 800412c:	e06f      	b.n	800420e <GetPixelformat+0x172>
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 800412e:	4a3b      	ldr	r2, [pc, #236]	; (800421c <GetPixelformat+0x180>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004136:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <GetPixelformat+0x198>)
 8004138:	4293      	cmp	r3, r2
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4936      	ldr	r1, [pc, #216]	; (800421c <GetPixelformat+0x180>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800414a:	493b      	ldr	r1, [pc, #236]	; (8004238 <GetPixelformat+0x19c>)
 800414c:	428b      	cmp	r3, r1
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <GetPixelformat+0xc6>
    return LTDC_PIXEL_FORMAT_RGB565;
 800415e:	2302      	movs	r3, #2
 8004160:	e055      	b.n	800420e <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 8004162:	4a2e      	ldr	r2, [pc, #184]	; (800421c <GetPixelformat+0x180>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	4a34      	ldr	r2, [pc, #208]	; (800423c <GetPixelformat+0x1a0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <GetPixelformat+0xd8>
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8004170:	2303      	movs	r3, #3
 8004172:	e04c      	b.n	800420e <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <GetPixelformat+0x180>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417c:	4a30      	ldr	r2, [pc, #192]	; (8004240 <GetPixelformat+0x1a4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <GetPixelformat+0xea>
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8004182:	2304      	movs	r3, #4
 8004184:	e043      	b.n	800420e <GetPixelformat+0x172>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 8004186:	4a25      	ldr	r2, [pc, #148]	; (800421c <GetPixelformat+0x180>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <GetPixelformat+0x1a8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4920      	ldr	r1, [pc, #128]	; (800421c <GetPixelformat+0x180>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041a2:	4929      	ldr	r1, [pc, #164]	; (8004248 <GetPixelformat+0x1ac>)
 80041a4:	428b      	cmp	r3, r1
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <GetPixelformat+0x180>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	4a23      	ldr	r2, [pc, #140]	; (800424c <GetPixelformat+0x1b0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	430b      	orrs	r3, r1
 80041ca:	4914      	ldr	r1, [pc, #80]	; (800421c <GetPixelformat+0x180>)
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041d2:	491f      	ldr	r1, [pc, #124]	; (8004250 <GetPixelformat+0x1b4>)
 80041d4:	428a      	cmp	r2, r1
 80041d6:	bf0c      	ite	eq
 80041d8:	2201      	moveq	r2, #1
 80041da:	2200      	movne	r2, #0
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	4313      	orrs	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <GetPixelformat+0x14c>
    return LTDC_PIXEL_FORMAT_L8;
 80041e4:	2305      	movs	r3, #5
 80041e6:	e012      	b.n	800420e <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <GetPixelformat+0x180>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <GetPixelformat+0x1b8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <GetPixelformat+0x15e>
    return LTDC_PIXEL_FORMAT_AL44;
 80041f6:	2306      	movs	r3, #6
 80041f8:	e009      	b.n	800420e <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <GetPixelformat+0x180>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <GetPixelformat+0x1bc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <GetPixelformat+0x170>
    return LTDC_PIXEL_FORMAT_AL88;
 8004208:	2307      	movs	r3, #7
 800420a:	e000      	b.n	800420e <GetPixelformat+0x172>
  }
  while (1); // Error
 800420c:	e7fe      	b.n	800420c <GetPixelformat+0x170>
} 
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000064 	.word	0x20000064
 8004220:	080113cc 	.word	0x080113cc
 8004224:	0801145c 	.word	0x0801145c
 8004228:	08011414 	.word	0x08011414
 800422c:	08011444 	.word	0x08011444
 8004230:	080113fc 	.word	0x080113fc
 8004234:	080113e4 	.word	0x080113e4
 8004238:	0801142c 	.word	0x0801142c
 800423c:	0801139c 	.word	0x0801139c
 8004240:	080113b4 	.word	0x080113b4
 8004244:	08011324 	.word	0x08011324
 8004248:	0801133c 	.word	0x0801133c
 800424c:	08011354 	.word	0x08011354
 8004250:	0801136c 	.word	0x0801136c
 8004254:	0801130c 	.word	0x0801130c
 8004258:	08011384 	.word	0x08011384

0800425c <TransferComplete>:
  * @note   This example shows a simple way to report end of DMA2D transfer, and
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  TransferInProgress = 0; 
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <TransferComplete+0x1c>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2001ba80 	.word	0x2001ba80

0800427c <DMA2D_Init>:
  * @brief  Initialize the DMA2D.
  * @param  None
  * @retval None
  */
void DMA2D_Init(void) 
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
   /* Configure the DMA2D transfer complete callback mode */ 
	hdma2d.XferCpltCallback  = TransferComplete;	
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <DMA2D_Init+0x30>)
 8004282:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <DMA2D_Init+0x34>)
 8004284:	611a      	str	r2, [r3, #16]
	
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004286:	4809      	ldr	r0, [pc, #36]	; (80042ac <DMA2D_Init+0x30>)
 8004288:	f7fc face 	bl	8000828 <HAL_DMA2D_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <DMA2D_Init+0x1a>
  {
    Error_Handler( );
 8004292:	f001 fa67 	bl	8005764 <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004296:	2101      	movs	r1, #1
 8004298:	4804      	ldr	r0, [pc, #16]	; (80042ac <DMA2D_Init+0x30>)
 800429a:	f7fc fc29 	bl	8000af0 <HAL_DMA2D_ConfigLayer>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <DMA2D_Init+0x2c>
  {
    Error_Handler( );
 80042a4:	f001 fa5e 	bl	8005764 <Error_Handler>
  }

}
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2001bb34 	.word	0x2001bb34
 80042b0:	0800425d 	.word	0x0800425d

080042b4 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  _DMA_ExecOperation();
 80042c2:	f7ff fed5 	bl	8004070 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <DMA2D_CopyBuffer+0x6c>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff fee5 	bl	800409c <GetPixelformat>
 80042d2:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 80042dc:	4a11      	ldr	r2, [pc, #68]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 80042e2:	4a10      	ldr	r2, [pc, #64]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 80042ee:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 80042f4:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	b289      	uxth	r1, r1
 8004304:	430b      	orrs	r3, r1
 8004306:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8004308:	4a06      	ldr	r2, [pc, #24]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <DMA2D_CopyBuffer+0x70>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 8004314:	f7ff feac 	bl	8004070 <_DMA_ExecOperation>

}
 8004318:	bf00      	nop
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	2001ba80 	.word	0x2001ba80
 8004324:	4002b000 	.word	0x4002b000

08004328 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 8004336:	f7ff fe9b 	bl	8004070 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <DMA2D_CopyBufferWithAlpha+0x84>)
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff feab 	bl	800409c <GetPixelformat>
 8004346:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 800434a:	4a1a      	ldr	r2, [pc, #104]	; (80043b4 <DMA2D_CopyBufferWithAlpha+0x8c>)
 800434c:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8004354:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6153      	str	r3, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 800436c:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	6193      	str	r3, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004374:	2200      	movs	r2, #0
 8004376:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	6a39      	ldr	r1, [r7, #32]
 800438c:	b289      	uxth	r1, r1
 800438e:	430b      	orrs	r3, r1
 8004390:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <DMA2D_CopyBufferWithAlpha+0x88>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800439e:	f7ff fe67 	bl	8004070 <_DMA_ExecOperation>
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2001ba80 	.word	0x2001ba80
 80043b0:	4002b000 	.word	0x4002b000
 80043b4:	00020200 	.word	0x00020200

080043b8 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  _DMA_ExecOperation();
 80043c6:	f7ff fe53 	bl	8004070 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <DMA2D_FillBuffer+0x68>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff fe63 	bl	800409c <GetPixelformat>
 80043d6:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <DMA2D_FillBuffer+0x70>)
 80043dc:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 80043de:	4a11      	ldr	r2, [pc, #68]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 80043ea:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 80043f0:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80043f6:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	b289      	uxth	r1, r1
 8004400:	430b      	orrs	r3, r1
 8004402:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 8004404:	4a07      	ldr	r2, [pc, #28]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <DMA2D_FillBuffer+0x6c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 8004414:	f7ff fe2c 	bl	8004070 <_DMA_ExecOperation>
}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	2001ba80 	.word	0x2001ba80
 8004424:	4002b000 	.word	0x4002b000
 8004428:	00030200 	.word	0x00030200

0800442c <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]

  /* Set up mode */
  _DMA_ExecOperation();
 800443a:	f7ff fe19 	bl	8004070 <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <_DMA_ConvertColor+0x6c>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <_DMA_ConvertColor+0x70>)
 8004446:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800444a:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <_DMA_ConvertColor+0x70>)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <_DMA_ConvertColor+0x70>)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <_DMA_ConvertColor+0x70>)
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <_DMA_ConvertColor+0x70>)
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <_DMA_ConvertColor+0x70>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 800446a:	4a0c      	ldr	r2, [pc, #48]	; (800449c <_DMA_ConvertColor+0x70>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <_DMA_ConvertColor+0x70>)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <_DMA_ConvertColor+0x70>)
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <_DMA_ConvertColor+0x70>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6013      	str	r3, [r2, #0]
  
  _DMA_ExecOperation();
 800448c:	f7ff fdf0 	bl	8004070 <_DMA_ExecOperation>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	2001ba80 	.word	0x2001ba80
 800449c:	4002b000 	.word	0x4002b000

080044a0 <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	70fb      	strb	r3, [r7, #3]
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ffb7 	bl	800442c <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af02      	add	r7, sp, #8
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	70fb      	strb	r3, [r7, #3]
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2200      	movs	r2, #0
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff ffa4 	bl	800442c <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 80044f4:	4912      	ldr	r1, [pc, #72]	; (8004540 <GetBufferSize+0x54>)
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	330c      	adds	r3, #12
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	480e      	ldr	r0, [pc, #56]	; (8004540 <GetBufferSize+0x54>)
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4403      	add	r3, r0
 8004514:	3310      	adds	r3, #16
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	fb03 f101 	mul.w	r1, r3, r1
 800451c:	4808      	ldr	r0, [pc, #32]	; (8004540 <GetBufferSize+0x54>)
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4403      	add	r3, r0
 800452a:	3314      	adds	r3, #20
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	fb03 f301 	mul.w	r3, r3, r1
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	2001ba64 	.word	0x2001ba64

08004544 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	b08d      	sub	sp, #52	; 0x34
 8004548:	af04      	add	r7, sp, #16
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ffca 	bl	80044ec <GetBufferSize>
 8004558:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800455a:	4926      	ldr	r1, [pc, #152]	; (80045f4 <LCD_LL_CopyBuffer+0xb0>)
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4619      	mov	r1, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	fb02 f303 	mul.w	r3, r2, r3
 8004574:	440b      	add	r3, r1
 8004576:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 8004578:	491e      	ldr	r1, [pc, #120]	; (80045f4 <LCD_LL_CopyBuffer+0xb0>)
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4619      	mov	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	440b      	add	r3, r1
 8004594:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	69bc      	ldr	r4, [r7, #24]
 800459a:	697d      	ldr	r5, [r7, #20]
 800459c:	4915      	ldr	r1, [pc, #84]	; (80045f4 <LCD_LL_CopyBuffer+0xb0>)
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	330c      	adds	r3, #12
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461e      	mov	r6, r3
 80045b0:	4910      	ldr	r1, [pc, #64]	; (80045f4 <LCD_LL_CopyBuffer+0xb0>)
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3310      	adds	r3, #16
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	9302      	str	r3, [sp, #8]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	9200      	str	r2, [sp, #0]
 80045ce:	4633      	mov	r3, r6
 80045d0:	462a      	mov	r2, r5
 80045d2:	4621      	mov	r1, r4
 80045d4:	f7ff fe6e 	bl	80042b4 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 80045d8:	4906      	ldr	r1, [pc, #24]	; (80045f4 <LCD_LL_CopyBuffer+0xb0>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3308      	adds	r3, #8
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]
}
 80045ec:	bf00      	nop
 80045ee:	3724      	adds	r7, #36	; 0x24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f4:	2001ba64 	.word	0x2001ba64

080045f8 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 80045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fa:	b08f      	sub	sp, #60	; 0x3c
 80045fc:	af04      	add	r7, sp, #16
 80045fe:	6178      	str	r0, [r7, #20]
 8004600:	6139      	str	r1, [r7, #16]
 8004602:	60fa      	str	r2, [r7, #12]
 8004604:	60bb      	str	r3, [r7, #8]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff6f 	bl	80044ec <GetBufferSize>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004610:	4942      	ldr	r1, [pc, #264]	; (800471c <LCD_LL_CopyRect+0x124>)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461c      	mov	r4, r3
 8004622:	493e      	ldr	r1, [pc, #248]	; (800471c <LCD_LL_CopyRect+0x124>)
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	330c      	adds	r3, #12
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	fb02 f203 	mul.w	r2, r2, r3
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	18d1      	adds	r1, r2, r3
 800463e:	4837      	ldr	r0, [pc, #220]	; (800471c <LCD_LL_CopyRect+0x124>)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4403      	add	r3, r0
 800464c:	3314      	adds	r3, #20
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	fb03 f301 	mul.w	r3, r3, r1
 8004654:	4618      	mov	r0, r3
 8004656:	4931      	ldr	r1, [pc, #196]	; (800471c <LCD_LL_CopyRect+0x124>)
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	3304      	adds	r3, #4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	fb03 f302 	mul.w	r3, r3, r2
 8004670:	4403      	add	r3, r0
 8004672:	4423      	add	r3, r4
 8004674:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8004676:	4929      	ldr	r1, [pc, #164]	; (800471c <LCD_LL_CopyRect+0x124>)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461c      	mov	r4, r3
 8004688:	4924      	ldr	r1, [pc, #144]	; (800471c <LCD_LL_CopyRect+0x124>)
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	330c      	adds	r3, #12
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800469c:	fb02 f203 	mul.w	r2, r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	18d1      	adds	r1, r2, r3
 80046a4:	481d      	ldr	r0, [pc, #116]	; (800471c <LCD_LL_CopyRect+0x124>)
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4403      	add	r3, r0
 80046b2:	3314      	adds	r3, #20
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	fb03 f301 	mul.w	r3, r3, r1
 80046ba:	4618      	mov	r0, r3
 80046bc:	4917      	ldr	r1, [pc, #92]	; (800471c <LCD_LL_CopyRect+0x124>)
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3304      	adds	r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	fb03 f302 	mul.w	r3, r3, r2
 80046d6:	4403      	add	r3, r0
 80046d8:	4423      	add	r3, r4
 80046da:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80046dc:	697c      	ldr	r4, [r7, #20]
 80046de:	6a3d      	ldr	r5, [r7, #32]
 80046e0:	69fe      	ldr	r6, [r7, #28]
 80046e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80046e8:	480c      	ldr	r0, [pc, #48]	; (800471c <LCD_LL_CopyRect+0x124>)
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4403      	add	r3, r0
 80046f6:	330c      	adds	r3, #12
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	9302      	str	r3, [sp, #8]
 8004704:	9201      	str	r2, [sp, #4]
 8004706:	9100      	str	r1, [sp, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4632      	mov	r2, r6
 800470c:	4629      	mov	r1, r5
 800470e:	4620      	mov	r0, r4
 8004710:	f7ff fdd0 	bl	80042b4 <DMA2D_CopyBuffer>
}
 8004714:	bf00      	nop
 8004716:	372c      	adds	r7, #44	; 0x2c
 8004718:	46bd      	mov	sp, r7
 800471a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471c:	2001ba64 	.word	0x2001ba64

08004720 <LCD_LL_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void LCD_LL_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004722:	b08b      	sub	sp, #44	; 0x2c
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800472e:	f002 ffbf 	bl	80076b0 <GUI_GetDrawMode>
 8004732:	4603      	mov	r3, r0
 8004734:	2b01      	cmp	r3, #1
 8004736:	d110      	bne.n	800475a <LCD_LL_FillRect+0x3a>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8004738:	2200      	movs	r2, #0
 800473a:	2119      	movs	r1, #25
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f005 f847 	bl	80097d0 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f004 f8eb 	bl	8008924 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800474e:	4a32      	ldr	r2, [pc, #200]	; (8004818 <LCD_LL_FillRect+0xf8>)
 8004750:	2119      	movs	r1, #25
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f005 f83c 	bl	80097d0 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }	
}
 8004758:	e059      	b.n	800480e <LCD_LL_FillRect+0xee>
    xSize = x1 - x0 + 1;
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8004764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	3301      	adds	r3, #1
 800476c:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff febb 	bl	80044ec <GetBufferSize>
 8004776:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004778:	4928      	ldr	r1, [pc, #160]	; (800481c <LCD_LL_FillRect+0xfc>)
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461c      	mov	r4, r3
 800478a:	4924      	ldr	r1, [pc, #144]	; (800481c <LCD_LL_FillRect+0xfc>)
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	330c      	adds	r3, #12
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	fb02 f203 	mul.w	r2, r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	18d1      	adds	r1, r2, r3
 80047a6:	481d      	ldr	r0, [pc, #116]	; (800481c <LCD_LL_FillRect+0xfc>)
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4403      	add	r3, r0
 80047b4:	3314      	adds	r3, #20
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	fb03 f301 	mul.w	r3, r3, r1
 80047bc:	4618      	mov	r0, r3
 80047be:	4917      	ldr	r1, [pc, #92]	; (800481c <LCD_LL_FillRect+0xfc>)
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3308      	adds	r3, #8
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	fb03 f302 	mul.w	r3, r3, r2
 80047d8:	4403      	add	r3, r0
 80047da:	4423      	add	r3, r4
 80047dc:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	693c      	ldr	r4, [r7, #16]
 80047e2:	69fd      	ldr	r5, [r7, #28]
 80047e4:	69be      	ldr	r6, [r7, #24]
 80047e6:	490d      	ldr	r1, [pc, #52]	; (800481c <LCD_LL_FillRect+0xfc>)
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	330c      	adds	r3, #12
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	9200      	str	r2, [sp, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	462a      	mov	r2, r5
 8004808:	4621      	mov	r1, r4
 800480a:	f7ff fdd5 	bl	80043b8 <DMA2D_FillBuffer>
}
 800480e:	bf00      	nop
 8004810:	3724      	adds	r7, #36	; 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004816:	bf00      	nop
 8004818:	08004721 	.word	0x08004721
 800481c:	2001ba64 	.word	0x2001ba64

08004820 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
	
  _DMA_ExecOperation();
 800482e:	f7ff fc1f 	bl	8004070 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <DMA2D_DrawBitmapL8+0x68>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8004838:	4b14      	ldr	r3, [pc, #80]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 800483a:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800483e:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8004840:	4a12      	ldr	r2, [pc, #72]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 800484c:	4a0f      	ldr	r2, [pc, #60]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8004852:	4a0e      	ldr	r2, [pc, #56]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 800485a:	2205      	movs	r2, #5
 800485c:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 8004864:	4909      	ldr	r1, [pc, #36]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	041a      	lsls	r2, r3, #16
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	4313      	orrs	r3, r2
 800486e:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 8004870:	4a06      	ldr	r2, [pc, #24]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <DMA2D_DrawBitmapL8+0x6c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 800487c:	f7ff fbf8 	bl	8004070 <_DMA_ExecOperation>
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	2001ba80 	.word	0x2001ba80
 800488c:	4002b000 	.word	0x4002b000

08004890 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]

  _DMA_ExecOperation();
 800489e:	f7ff fbe7 	bl	8004070 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <_DMA_DrawAlphaBitmap+0x80>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048aa:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <_DMA_DrawAlphaBitmap+0x88>)
 80048ac:	601a      	str	r2, [r3, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 80048ae:	4a19      	ldr	r2, [pc, #100]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	6113      	str	r3, [r2, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	6193      	str	r3, [r2, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 80048e4:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	041b      	lsls	r3, r3, #16
 80048ea:	4619      	mov	r1, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6453      	str	r3, [r2, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80048f4:	4a07      	ldr	r2, [pc, #28]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_DMA_DrawAlphaBitmap+0x84>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();  
 8004904:	f7ff fbb4 	bl	8004070 <_DMA_ExecOperation>
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	2001ba80 	.word	0x2001ba80
 8004914:	4002b000 	.word	0x4002b000
 8004918:	00020200 	.word	0x00020200

0800491c <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b08f      	sub	sp, #60	; 0x3c
 8004920:	af04      	add	r7, sp, #16
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fbb5 	bl	800409c <GetPixelformat>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24
  BufferSize = GetBufferSize(LayerIndex);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fdd8 	bl	80044ec <GetBufferSize>
 800493c:	6238      	str	r0, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800493e:	492c      	ldr	r1, [pc, #176]	; (80049f0 <_LCD_DrawBitmapAlpha+0xd4>)
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461c      	mov	r4, r3
 8004950:	4927      	ldr	r1, [pc, #156]	; (80049f0 <_LCD_DrawBitmapAlpha+0xd4>)
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	330c      	adds	r3, #12
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	fb02 f203 	mul.w	r2, r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	18d1      	adds	r1, r2, r3
 800496c:	4820      	ldr	r0, [pc, #128]	; (80049f0 <_LCD_DrawBitmapAlpha+0xd4>)
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4403      	add	r3, r0
 800497a:	3314      	adds	r3, #20
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	fb03 f301 	mul.w	r3, r3, r1
 8004982:	4618      	mov	r0, r3
 8004984:	491a      	ldr	r1, [pc, #104]	; (80049f0 <_LCD_DrawBitmapAlpha+0xd4>)
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3308      	adds	r3, #8
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	fb03 f302 	mul.w	r3, r3, r2
 800499e:	4403      	add	r3, r0
 80049a0:	4423      	add	r3, r4
 80049a2:	61fb      	str	r3, [r7, #28]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da00      	bge.n	80049ac <_LCD_DrawBitmapAlpha+0x90>
 80049aa:	3303      	adds	r3, #3
 80049ac:	109b      	asrs	r3, r3, #2
 80049ae:	461a      	mov	r2, r3
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	61bb      	str	r3, [r7, #24]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 80049b6:	490e      	ldr	r1, [pc, #56]	; (80049f0 <_LCD_DrawBitmapAlpha+0xd4>)
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	330c      	adds	r3, #12
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 80049ce:	69f8      	ldr	r0, [r7, #28]
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	9302      	str	r3, [sp, #8]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	f7ff ff55 	bl	8004890 <_DMA_DrawAlphaBitmap>
}
 80049e6:	bf00      	nop
 80049e8:	372c      	adds	r7, #44	; 0x2c
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}
 80049ee:	bf00      	nop
 80049f0:	2001ba64 	.word	0x2001ba64

080049f4 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af04      	add	r7, sp, #16
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	da00      	bge.n	8004a0a <_LCD_DrawMemdevAlpha+0x16>
 8004a08:	3303      	adds	r3, #3
 8004a0a:	109b      	asrs	r3, r3, #2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	617b      	str	r3, [r7, #20]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	da00      	bge.n	8004a1c <_LCD_DrawMemdevAlpha+0x28>
 8004a1a:	3303      	adds	r3, #3
 8004a1c:	109b      	asrs	r3, r3, #2
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	613b      	str	r3, [r7, #16]
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8004a26:	2300      	movs	r3, #0
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff ff29 	bl	8004890 <_DMA_DrawAlphaBitmap>
}
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004a48:	b5b0      	push	{r4, r5, r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af04      	add	r7, sp, #16
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fd47 	bl	80044ec <GetBufferSize>
 8004a5e:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004a60:	492c      	ldr	r1, [pc, #176]	; (8004b14 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461c      	mov	r4, r3
 8004a72:	4928      	ldr	r1, [pc, #160]	; (8004b14 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	330c      	adds	r3, #12
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	fb02 f203 	mul.w	r2, r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	18d1      	adds	r1, r2, r3
 8004a8e:	4821      	ldr	r0, [pc, #132]	; (8004b14 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4403      	add	r3, r0
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	fb03 f301 	mul.w	r3, r3, r1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	491b      	ldr	r1, [pc, #108]	; (8004b14 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fb03 f302 	mul.w	r3, r3, r2
 8004ac0:	4403      	add	r3, r0
 8004ac2:	4423      	add	r3, r4
 8004ac4:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	0fda      	lsrs	r2, r3, #31
 8004aca:	4413      	add	r3, r2
 8004acc:	105b      	asrs	r3, r3, #1
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004ad6:	490f      	ldr	r1, [pc, #60]	; (8004b14 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	69bc      	ldr	r4, [r7, #24]
 8004af2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6939      	ldr	r1, [r7, #16]
 8004afa:	9102      	str	r1, [sp, #8]
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	462b      	mov	r3, r5
 8004b02:	4622      	mov	r2, r4
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	f7ff fbd5 	bl	80042b4 <DMA2D_CopyBuffer>
}
 8004b0a:	bf00      	nop
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bdb0      	pop	{r4, r5, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	2001ba64 	.word	0x2001ba64

08004b18 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b08c      	sub	sp, #48	; 0x30
 8004b1c:	af04      	add	r7, sp, #16
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fcdf 	bl	80044ec <GetBufferSize>
 8004b2e:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004b30:	492c      	ldr	r1, [pc, #176]	; (8004be4 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461c      	mov	r4, r3
 8004b42:	4928      	ldr	r1, [pc, #160]	; (8004be4 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	330c      	adds	r3, #12
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	fb02 f203 	mul.w	r2, r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	18d1      	adds	r1, r2, r3
 8004b5e:	4821      	ldr	r0, [pc, #132]	; (8004be4 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4403      	add	r3, r0
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	fb03 f301 	mul.w	r3, r3, r1
 8004b74:	4618      	mov	r0, r3
 8004b76:	491b      	ldr	r1, [pc, #108]	; (8004be4 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3308      	adds	r3, #8
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	fb03 f302 	mul.w	r3, r3, r2
 8004b90:	4403      	add	r3, r0
 8004b92:	4423      	add	r3, r4
 8004b94:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da00      	bge.n	8004b9e <LCD_LL_DrawBitmap32bpp+0x86>
 8004b9c:	3303      	adds	r3, #3
 8004b9e:	109b      	asrs	r3, r3, #2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	69bc      	ldr	r4, [r7, #24]
 8004bc4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	9102      	str	r1, [sp, #8]
 8004bce:	9201      	str	r2, [sp, #4]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	462b      	mov	r3, r5
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	f7ff fba6 	bl	8004328 <DMA2D_CopyBufferWithAlpha>
}
 8004bdc:	bf00      	nop
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdb0      	pop	{r4, r5, r7, pc}
 8004be4:	2001ba64 	.word	0x2001ba64

08004be8 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b08f      	sub	sp, #60	; 0x3c
 8004bec:	af04      	add	r7, sp, #16
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fc77 	bl	80044ec <GetBufferSize>
 8004bfe:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004c00:	492c      	ldr	r1, [pc, #176]	; (8004cb4 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461c      	mov	r4, r3
 8004c12:	4928      	ldr	r1, [pc, #160]	; (8004cb4 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	330c      	adds	r3, #12
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	fb02 f203 	mul.w	r2, r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	18d1      	adds	r1, r2, r3
 8004c2e:	4821      	ldr	r0, [pc, #132]	; (8004cb4 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4403      	add	r3, r0
 8004c3c:	3314      	adds	r3, #20
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	fb03 f301 	mul.w	r3, r3, r1
 8004c44:	4618      	mov	r0, r3
 8004c46:	491b      	ldr	r1, [pc, #108]	; (8004cb4 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3308      	adds	r3, #8
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	fb03 f302 	mul.w	r3, r3, r2
 8004c60:	4403      	add	r3, r0
 8004c62:	4423      	add	r3, r4
 8004c64:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8004c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004c6e:	4911      	ldr	r1, [pc, #68]	; (8004cb4 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4613      	mov	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	61bb      	str	r3, [r7, #24]
  PixelFormat = GetPixelformat(LayerIndex);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fa07 	bl	800409c <GetPixelformat>
 8004c8e:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8004c90:	6a39      	ldr	r1, [r7, #32]
 8004c92:	69f8      	ldr	r0, [r7, #28]
 8004c94:	69bc      	ldr	r4, [r7, #24]
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c9a:	9202      	str	r2, [sp, #8]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6838      	ldr	r0, [r7, #0]
 8004ca8:	f7ff fdba 	bl	8004820 <DMA2D_DrawBitmapL8>
}
 8004cac:	bf00      	nop
 8004cae:	372c      	adds	r7, #44	; 0x2c
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}
 8004cb4:	2001ba64 	.word	0x2001ba64

08004cb8 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4951      	ldr	r1, [pc, #324]	; (8004e08 <LCD_X_Config+0x150>)
 8004cc4:	4851      	ldr	r0, [pc, #324]	; (8004e0c <LCD_X_Config+0x154>)
 8004cc6:	f003 f82b 	bl	8007d20 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f004 fafc 	bl	80092c8 <LCD_GetSwapXYEx>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00c      	beq.n	8004cf0 <LCD_X_Config+0x38>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004cd6:	22f0      	movs	r2, #240	; 0xf0
 8004cd8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f004 fdab 	bl	8009838 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004ce2:	22f0      	movs	r2, #240	; 0xf0
 8004ce4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f004 fdd7 	bl	800989c <LCD_SetVSizeEx>
 8004cee:	e00b      	b.n	8004d08 <LCD_X_Config+0x50>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8004cf0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004cf4:	21f0      	movs	r1, #240	; 0xf0
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f004 fd9e 	bl	8009838 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004cfc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d00:	21f0      	movs	r1, #240	; 0xf0
 8004d02:	2000      	movs	r0, #0
 8004d04:	f004 fdca 	bl	800989c <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8004d08:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <LCD_X_Config+0x158>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8004d0e:	2300      	movs	r3, #0
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e059      	b.n	8004dc8 <LCD_X_Config+0x110>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8004d14:	4a3f      	ldr	r2, [pc, #252]	; (8004e14 <LCD_X_Config+0x15c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d1c:	483c      	ldr	r0, [pc, #240]	; (8004e10 <LCD_X_Config+0x158>)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4403      	add	r3, r0
 8004d2a:	3318      	adds	r3, #24
 8004d2c:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8004d2e:	4938      	ldr	r1, [pc, #224]	; (8004e10 <LCD_X_Config+0x158>)
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d42:	601a      	str	r2, [r3, #0]

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f004 fa7e 	bl	8009248 <LCD_GetBitsPerPixelEx>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	10d9      	asrs	r1, r3, #3
 8004d50:	482f      	ldr	r0, [pc, #188]	; (8004e10 <LCD_X_Config+0x158>)
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4403      	add	r3, r0
 8004d5e:	3314      	adds	r3, #20
 8004d60:	6019      	str	r1, [r3, #0]
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <LCD_X_Config+0x160>)
 8004d66:	2121      	movs	r1, #33	; 0x21
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f004 fd31 	bl	80097d0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <LCD_X_Config+0x164>)
 8004d72:	2123      	movs	r1, #35	; 0x23
 8004d74:	4618      	mov	r0, r3
 8004d76:	f004 fd2b 	bl	80097d0 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <LCD_X_Config+0x168>)
 8004d7e:	2119      	movs	r1, #25
 8004d80:	4618      	mov	r0, r3
 8004d82:	f004 fd25 	bl	80097d0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <LCD_X_Config+0x16c>)
 8004d8a:	2125      	movs	r1, #37	; 0x25
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f004 fd1f 	bl	80097d0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <LCD_X_Config+0x170>)
 8004d96:	2124      	movs	r1, #36	; 0x24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f004 fd19 	bl	80097d0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <LCD_X_Config+0x174>)
 8004da2:	2128      	movs	r1, #40	; 0x28
 8004da4:	4618      	mov	r0, r3
 8004da6:	f004 fd13 	bl	80097d0 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4918      	ldr	r1, [pc, #96]	; (8004e10 <LCD_X_Config+0x158>)
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f004 fd55 	bl	800986c <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0a2      	beq.n	8004d14 <LCD_X_Config+0x5c>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 8004dce:	4918      	ldr	r1, [pc, #96]	; (8004e30 <LCD_X_Config+0x178>)
 8004dd0:	4818      	ldr	r0, [pc, #96]	; (8004e34 <LCD_X_Config+0x17c>)
 8004dd2:	f001 fa63 	bl	800629c <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 8004dd6:	4918      	ldr	r1, [pc, #96]	; (8004e38 <LCD_X_Config+0x180>)
 8004dd8:	4818      	ldr	r0, [pc, #96]	; (8004e3c <LCD_X_Config+0x184>)
 8004dda:	f001 fcd1 	bl	8006780 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 8004dde:	4918      	ldr	r1, [pc, #96]	; (8004e40 <LCD_X_Config+0x188>)
 8004de0:	4818      	ldr	r0, [pc, #96]	; (8004e44 <LCD_X_Config+0x18c>)
 8004de2:	f001 fb0d 	bl	8006400 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 8004de6:	4918      	ldr	r1, [pc, #96]	; (8004e48 <LCD_X_Config+0x190>)
 8004de8:	4818      	ldr	r0, [pc, #96]	; (8004e4c <LCD_X_Config+0x194>)
 8004dea:	f001 fcef 	bl	80067cc <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 8004dee:	4918      	ldr	r1, [pc, #96]	; (8004e50 <LCD_X_Config+0x198>)
 8004df0:	4818      	ldr	r0, [pc, #96]	; (8004e54 <LCD_X_Config+0x19c>)
 8004df2:	f001 fb25 	bl	8006440 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8004df6:	4918      	ldr	r1, [pc, #96]	; (8004e58 <LCD_X_Config+0x1a0>)
 8004df8:	4818      	ldr	r0, [pc, #96]	; (8004e5c <LCD_X_Config+0x1a4>)
 8004dfa:	f003 fb71 	bl	80084e0 <GUI_SetFuncDrawAlpha>
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	080113fc 	.word	0x080113fc
 8004e0c:	08011818 	.word	0x08011818
 8004e10:	2001ba64 	.word	0x2001ba64
 8004e14:	20000064 	.word	0x20000064
 8004e18:	08004545 	.word	0x08004545
 8004e1c:	080045f9 	.word	0x080045f9
 8004e20:	08004721 	.word	0x08004721
 8004e24:	08004be9 	.word	0x08004be9
 8004e28:	08004a49 	.word	0x08004a49
 8004e2c:	08004b19 	.word	0x08004b19
 8004e30:	08003ff9 	.word	0x08003ff9
 8004e34:	08003fd1 	.word	0x08003fd1
 8004e38:	08003fa9 	.word	0x08003fa9
 8004e3c:	08003f81 	.word	0x08003f81
 8004e40:	08004049 	.word	0x08004049
 8004e44:	08004021 	.word	0x08004021
 8004e48:	08003f59 	.word	0x08003f59
 8004e4c:	08003f31 	.word	0x08003f31
 8004e50:	08003f09 	.word	0x08003f09
 8004e54:	08003ee1 	.word	0x08003ee1
 8004e58:	0800491d 	.word	0x0800491d
 8004e5c:	080049f5 	.word	0x080049f5

08004e60 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b08b      	sub	sp, #44	; 0x2c
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 int r = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	3b03      	subs	r3, #3
 8004e74:	2b0b      	cmp	r3, #11
 8004e76:	f200 80fa 	bhi.w	800506e <LCD_X_DisplayDriver+0x20e>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <LCD_X_DisplayDriver+0x20>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004eb1 	.word	0x08004eb1
 8004e84:	08004f19 	.word	0x08004f19
 8004e88:	08004f27 	.word	0x08004f27
 8004e8c:	08004f39 	.word	0x08004f39
 8004e90:	08004fc9 	.word	0x08004fc9
 8004e94:	08004fb3 	.word	0x08004fb3
 8004e98:	08004f4b 	.word	0x08004f4b
 8004e9c:	08005017 	.word	0x08005017
 8004ea0:	0800506f 	.word	0x0800506f
 8004ea4:	08005027 	.word	0x08005027
 8004ea8:	08005043 	.word	0x08005043
 8004eac:	08004f01 	.word	0x08004f01
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8004eb0:	4973      	ldr	r1, [pc, #460]	; (8005080 <LCD_X_DisplayDriver+0x220>)
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6858      	ldr	r0, [r3, #4]
 8004ec4:	4c6e      	ldr	r4, [pc, #440]	; (8005080 <LCD_X_DisplayDriver+0x220>)
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4423      	add	r3, r4
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	fb03 f000 	mul.w	r0, r3, r0
 8004eda:	4c69      	ldr	r4, [pc, #420]	; (8005080 <LCD_X_DisplayDriver+0x220>)
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4423      	add	r3, r4
 8004ee8:	3314      	adds	r3, #20
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	fb03 f300 	mul.w	r3, r3, r0
 8004ef0:	440b      	add	r3, r1
 8004ef2:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	6a39      	ldr	r1, [r7, #32]
 8004ef8:	4862      	ldr	r0, [pc, #392]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004efa:	f7fd fac6 	bl	800248a <HAL_LTDC_SetAddress>
    break;
 8004efe:	e0b9      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_SHOWBUFFER: 
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	485e      	ldr	r0, [pc, #376]	; (8005080 <LCD_X_DisplayDriver+0x220>)
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4403      	add	r3, r0
 8004f12:	3304      	adds	r3, #4
 8004f14:	6019      	str	r1, [r3, #0]
    break;
 8004f16:	e0ad      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETLUTENTRY: 
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4859      	ldr	r0, [pc, #356]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f20:	f7fd f94f 	bl	80021c2 <HAL_LTDC_ConfigCLUT>
    break;
 8004f24:	e0a6      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_ON: 
    __HAL_LTDC_ENABLE(&hltdc);
 8004f26:	4b57      	ldr	r3, [pc, #348]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a56      	ldr	r2, [pc, #344]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6992      	ldr	r2, [r2, #24]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	619a      	str	r2, [r3, #24]
    break;
 8004f36:	e09d      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_OFF: 
    __HAL_LTDC_DISABLE(&hltdc);
 8004f38:	4b52      	ldr	r3, [pc, #328]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a51      	ldr	r2, [pc, #324]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	6992      	ldr	r2, [r2, #24]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	619a      	str	r2, [r3, #24]
    break;
 8004f48:	e094      	b.n	8005074 <LCD_X_DisplayDriver+0x214>
    
  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d113      	bne.n	8004f7a <LCD_X_DisplayDriver+0x11a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8004f52:	4b4c      	ldr	r3, [pc, #304]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	01db      	lsls	r3, r3, #7
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3384      	adds	r3, #132	; 0x84
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b48      	ldr	r3, [pc, #288]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	01db      	lsls	r3, r3, #7
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3384      	adds	r3, #132	; 0x84
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	e012      	b.n	8004fa0 <LCD_X_DisplayDriver+0x140>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8004f7a:	4b42      	ldr	r3, [pc, #264]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	01db      	lsls	r3, r3, #7
 8004f84:	4413      	add	r3, r2
 8004f86:	3384      	adds	r3, #132	; 0x84
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	01db      	lsls	r3, r3, #7
 8004f94:	440b      	add	r3, r1
 8004f96:	3384      	adds	r3, #132	; 0x84
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8004fa0:	4b38      	ldr	r3, [pc, #224]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a37      	ldr	r2, [pc, #220]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8004fb0:	e060      	b.n	8005074 <LCD_X_DisplayDriver+0x214>
    
  case LCD_X_SETPOS: 
    HAL_LTDC_SetWindowPosition(&hltdc, 
                               ((LCD_X_SETPOS_INFO *)pData)->xPos, 
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8004fb6:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos, 
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4830      	ldr	r0, [pc, #192]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8004fc2:	f7fd f9e6 	bl	8002392 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8004fc6:	e055      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8004fc8:	f107 0214 	add.w	r2, r7, #20
 8004fcc:	f107 0318 	add.w	r3, r7, #24
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f002 fff6 	bl	8007fc4 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	4828      	ldr	r0, [pc, #160]	; (8005080 <LCD_X_DisplayDriver+0x220>)
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4403      	add	r3, r0
 8004fea:	330c      	adds	r3, #12
 8004fec:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	4823      	ldr	r0, [pc, #140]	; (8005080 <LCD_X_DisplayDriver+0x220>)
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4403      	add	r3, r0
 8005000:	3310      	adds	r3, #16
 8005002:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	4619      	mov	r1, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	481d      	ldr	r0, [pc, #116]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8005010:	f7fd f9bf 	bl	8002392 <HAL_LTDC_SetWindowPosition>
    break;
 8005014:	e02e      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4619      	mov	r1, r3
 800501e:	4819      	ldr	r0, [pc, #100]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8005020:	f7fd f9fd 	bl	800241e <HAL_LTDC_SetAlpha>
    break;
 8005024:	e026      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <LCD_X_DisplayDriver+0x1d8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	4814      	ldr	r0, [pc, #80]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8005032:	f7fd f93a 	bl	80022aa <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
    }
    break;
 8005036:	e01d      	b.n	8005074 <LCD_X_DisplayDriver+0x214>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	4812      	ldr	r0, [pc, #72]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 800503c:	f7fd f96f 	bl	800231e <HAL_LTDC_DisableColorKeying>
    break;
 8005040:	e018      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8005052:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800505e:	4313      	orrs	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]
    
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	4807      	ldr	r0, [pc, #28]	; (8005084 <LCD_X_DisplayDriver+0x224>)
 8005068:	f7fd f866 	bl	8002138 <HAL_LTDC_ConfigColorKeying>
    break;
 800506c:	e002      	b.n	8005074 <LCD_X_DisplayDriver+0x214>

  default:
    r = -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r; 
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005076:	4618      	mov	r0, r3
 8005078:	372c      	adds	r7, #44	; 0x2c
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	bf00      	nop
 8005080:	2001ba64 	.word	0x2001ba64
 8005084:	2001ba8c 	.word	0x2001ba8c

08005088 <GRAPHICS_IncTick>:
void GRAPHICS_IncTick(void){
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  
   OS_TimeMS++;
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <GRAPHICS_IncTick+0x18>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a03      	ldr	r2, [pc, #12]	; (80050a0 <GRAPHICS_IncTick+0x18>)
 8005094:	6013      	str	r3, [r2, #0]
} 
 8005096:	bf00      	nop
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	2001ba88 	.word	0x2001ba88

080050a4 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  MX_FMC_Init(); 
 80050a8:	f7fe fe2a 	bl	8003d00 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 80050ac:	f7fe fe70 	bl	8003d90 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 80050b0:	f7fe fda6 	bl	8003c00 <MX_LCD_Init>
  MX_DMA2D_Init();
 80050b4:	f7fe fecc 	bl	8003e50 <MX_DMA2D_Init>
  DMA2D_Init();
 80050b8:	f7ff f8e0 	bl	800427c <DMA2D_Init>
//  SDRAM_init(&hsdram1);
//  HAL_LTDC_SetAddress(&hltdc,(uint32_t) 0xD0000000 + 0x50000,0);
}
 80050bc:	bf00      	nop
 80050be:	bd80      	pop	{r7, pc}

080050c0 <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Initialize the GUI */
  GUI_Init();
 80050c4:	f002 fcee 	bl	8007aa4 <GUI_Init>

  /* Activate the use of memory device feature */
     /* USER CODE BEGIN WM_SetCreateFlags */
      //WM_SetCreateFlags(WM_CF_MEMDEV);
    /* USER CODE END WM_SetCreateFlags */
}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}

080050cc <MyLCD_PowerOn>:
MyLCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void MyLCD_PowerOn(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
	MyLCD_WriteCommand(0xCA);
 80050d0:	20ca      	movs	r0, #202	; 0xca
 80050d2:	f000 f943 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC3);
 80050d6:	20c3      	movs	r0, #195	; 0xc3
 80050d8:	f000 f96a 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x08);
 80050dc:	2008      	movs	r0, #8
 80050de:	f000 f967 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x50);
 80050e2:	2050      	movs	r0, #80	; 0x50
 80050e4:	f000 f964 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWERB);
 80050e8:	20cf      	movs	r0, #207	; 0xcf
 80050ea:	f000 f937 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 80050ee:	2000      	movs	r0, #0
 80050f0:	f000 f95e 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0xC1);
 80050f4:	20c1      	movs	r0, #193	; 0xc1
 80050f6:	f000 f95b 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x30);
 80050fa:	2030      	movs	r0, #48	; 0x30
 80050fc:	f000 f958 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER_SEQ);
 8005100:	20ed      	movs	r0, #237	; 0xed
 8005102:	f000 f92b 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x64);
 8005106:	2064      	movs	r0, #100	; 0x64
 8005108:	f000 f952 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x03);
 800510c:	2003      	movs	r0, #3
 800510e:	f000 f94f 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x12);
 8005112:	2012      	movs	r0, #18
 8005114:	f000 f94c 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x81);
 8005118:	2081      	movs	r0, #129	; 0x81
 800511a:	f000 f949 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DTCA);
 800511e:	20e8      	movs	r0, #232	; 0xe8
 8005120:	f000 f91c 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x85);
 8005124:	2085      	movs	r0, #133	; 0x85
 8005126:	f000 f943 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 800512a:	2000      	movs	r0, #0
 800512c:	f000 f940 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x78);
 8005130:	2078      	movs	r0, #120	; 0x78
 8005132:	f000 f93d 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWERA);
 8005136:	20cb      	movs	r0, #203	; 0xcb
 8005138:	f000 f910 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x39);
 800513c:	2039      	movs	r0, #57	; 0x39
 800513e:	f000 f937 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x2C);
 8005142:	202c      	movs	r0, #44	; 0x2c
 8005144:	f000 f934 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8005148:	2000      	movs	r0, #0
 800514a:	f000 f931 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x34);
 800514e:	2034      	movs	r0, #52	; 0x34
 8005150:	f000 f92e 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x02);
 8005154:	2002      	movs	r0, #2
 8005156:	f000 f92b 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_PRC);
 800515a:	20f7      	movs	r0, #247	; 0xf7
 800515c:	f000 f8fe 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x20);
 8005160:	2020      	movs	r0, #32
 8005162:	f000 f925 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DTCB);
 8005166:	20ea      	movs	r0, #234	; 0xea
 8005168:	f000 f8f8 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 800516c:	2000      	movs	r0, #0
 800516e:	f000 f91f 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8005172:	2000      	movs	r0, #0
 8005174:	f000 f91c 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_FRC);
 8005178:	20b1      	movs	r0, #177	; 0xb1
 800517a:	f000 f8ef 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 800517e:	2000      	movs	r0, #0
 8005180:	f000 f916 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x1B);
 8005184:	201b      	movs	r0, #27
 8005186:	f000 f913 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DFC);
 800518a:	20b6      	movs	r0, #182	; 0xb6
 800518c:	f000 f8e6 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0A);
 8005190:	200a      	movs	r0, #10
 8005192:	f000 f90d 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0xA2);
 8005196:	20a2      	movs	r0, #162	; 0xa2
 8005198:	f000 f90a 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER1);
 800519c:	20c0      	movs	r0, #192	; 0xc0
 800519e:	f000 f8dd 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x10);
 80051a2:	2010      	movs	r0, #16
 80051a4:	f000 f904 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER2);
 80051a8:	20c1      	movs	r0, #193	; 0xc1
 80051aa:	f000 f8d7 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x10);
 80051ae:	2010      	movs	r0, #16
 80051b0:	f000 f8fe 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_VCOM1);
 80051b4:	20c5      	movs	r0, #197	; 0xc5
 80051b6:	f000 f8d1 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x45);
 80051ba:	2045      	movs	r0, #69	; 0x45
 80051bc:	f000 f8f8 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x15);
 80051c0:	2015      	movs	r0, #21
 80051c2:	f000 f8f5 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_VCOM2);
 80051c6:	20c7      	movs	r0, #199	; 0xc7
 80051c8:	f000 f8c8 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x90);
 80051cc:	2090      	movs	r0, #144	; 0x90
 80051ce:	f000 f8ef 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_MAC);
 80051d2:	2036      	movs	r0, #54	; 0x36
 80051d4:	f000 f8c2 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC8);
 80051d8:	20c8      	movs	r0, #200	; 0xc8
 80051da:	f000 f8e9 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_3GAMMA_EN);
 80051de:	20f2      	movs	r0, #242	; 0xf2
 80051e0:	f000 f8bc 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 80051e4:	2000      	movs	r0, #0
 80051e6:	f000 f8e3 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_RGB_INTERFACE);
 80051ea:	20b0      	movs	r0, #176	; 0xb0
 80051ec:	f000 f8b6 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC2);
 80051f0:	20c2      	movs	r0, #194	; 0xc2
 80051f2:	f000 f8dd 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DFC);
 80051f6:	20b6      	movs	r0, #182	; 0xb6
 80051f8:	f000 f8b0 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0A);
 80051fc:	200a      	movs	r0, #10
 80051fe:	f000 f8d7 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0xA7);
 8005202:	20a7      	movs	r0, #167	; 0xa7
 8005204:	f000 f8d4 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x27);
 8005208:	2027      	movs	r0, #39	; 0x27
 800520a:	f000 f8d1 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x04);
 800520e:	2004      	movs	r0, #4
 8005210:	f000 f8ce 	bl	80053b0 <MyLCD_WriteData>

	/* colomn address set */
	MyLCD_WriteCommand(MyLCD_COLUMN_ADDR);
 8005214:	202a      	movs	r0, #42	; 0x2a
 8005216:	f000 f8a1 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 800521a:	2000      	movs	r0, #0
 800521c:	f000 f8c8 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8005220:	2000      	movs	r0, #0
 8005222:	f000 f8c5 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8005226:	2000      	movs	r0, #0
 8005228:	f000 f8c2 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0xEF);
 800522c:	20ef      	movs	r0, #239	; 0xef
 800522e:	f000 f8bf 	bl	80053b0 <MyLCD_WriteData>
	/* Page Address Set */
	MyLCD_WriteCommand(MyLCD_PAGE_ADDR);
 8005232:	202b      	movs	r0, #43	; 0x2b
 8005234:	f000 f892 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8005238:	2000      	movs	r0, #0
 800523a:	f000 f8b9 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 800523e:	2000      	movs	r0, #0
 8005240:	f000 f8b6 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x01);
 8005244:	2001      	movs	r0, #1
 8005246:	f000 f8b3 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x3F);
 800524a:	203f      	movs	r0, #63	; 0x3f
 800524c:	f000 f8b0 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_INTERFACE);
 8005250:	20f6      	movs	r0, #246	; 0xf6
 8005252:	f000 f883 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x01);
 8005256:	2001      	movs	r0, #1
 8005258:	f000 f8aa 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 800525c:	2000      	movs	r0, #0
 800525e:	f000 f8a7 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x06);
 8005262:	2006      	movs	r0, #6
 8005264:	f000 f8a4 	bl	80053b0 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_GRAM);
 8005268:	202c      	movs	r0, #44	; 0x2c
 800526a:	f000 f877 	bl	800535c <MyLCD_WriteCommand>
	HAL_Delay(100);
 800526e:	2064      	movs	r0, #100	; 0x64
 8005270:	f7fb f9b6 	bl	80005e0 <HAL_Delay>

	MyLCD_WriteCommand(MyLCD_GAMMA);
 8005274:	2026      	movs	r0, #38	; 0x26
 8005276:	f000 f871 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x01);
 800527a:	2001      	movs	r0, #1
 800527c:	f000 f898 	bl	80053b0 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_PGAMMA);
 8005280:	20e0      	movs	r0, #224	; 0xe0
 8005282:	f000 f86b 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0F);
 8005286:	200f      	movs	r0, #15
 8005288:	f000 f892 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x29);
 800528c:	2029      	movs	r0, #41	; 0x29
 800528e:	f000 f88f 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x24);
 8005292:	2024      	movs	r0, #36	; 0x24
 8005294:	f000 f88c 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x0C);
 8005298:	200c      	movs	r0, #12
 800529a:	f000 f889 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x0E);
 800529e:	200e      	movs	r0, #14
 80052a0:	f000 f886 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x09);
 80052a4:	2009      	movs	r0, #9
 80052a6:	f000 f883 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x4E);
 80052aa:	204e      	movs	r0, #78	; 0x4e
 80052ac:	f000 f880 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x78);
 80052b0:	2078      	movs	r0, #120	; 0x78
 80052b2:	f000 f87d 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x3C);
 80052b6:	203c      	movs	r0, #60	; 0x3c
 80052b8:	f000 f87a 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x09);
 80052bc:	2009      	movs	r0, #9
 80052be:	f000 f877 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x13);
 80052c2:	2013      	movs	r0, #19
 80052c4:	f000 f874 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x05);
 80052c8:	2005      	movs	r0, #5
 80052ca:	f000 f871 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x17);
 80052ce:	2017      	movs	r0, #23
 80052d0:	f000 f86e 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x11);
 80052d4:	2011      	movs	r0, #17
 80052d6:	f000 f86b 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 80052da:	2000      	movs	r0, #0
 80052dc:	f000 f868 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_NGAMMA);
 80052e0:	20e1      	movs	r0, #225	; 0xe1
 80052e2:	f000 f83b 	bl	800535c <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f000 f862 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x16);
 80052ec:	2016      	movs	r0, #22
 80052ee:	f000 f85f 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x1B);
 80052f2:	201b      	movs	r0, #27
 80052f4:	f000 f85c 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x04);
 80052f8:	2004      	movs	r0, #4
 80052fa:	f000 f859 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x11);
 80052fe:	2011      	movs	r0, #17
 8005300:	f000 f856 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x07);
 8005304:	2007      	movs	r0, #7
 8005306:	f000 f853 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x31);
 800530a:	2031      	movs	r0, #49	; 0x31
 800530c:	f000 f850 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x33);
 8005310:	2033      	movs	r0, #51	; 0x33
 8005312:	f000 f84d 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x42);
 8005316:	2042      	movs	r0, #66	; 0x42
 8005318:	f000 f84a 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x05);
 800531c:	2005      	movs	r0, #5
 800531e:	f000 f847 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x0C);
 8005322:	200c      	movs	r0, #12
 8005324:	f000 f844 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x0A);
 8005328:	200a      	movs	r0, #10
 800532a:	f000 f841 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x28);
 800532e:	2028      	movs	r0, #40	; 0x28
 8005330:	f000 f83e 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x2F);
 8005334:	202f      	movs	r0, #47	; 0x2f
 8005336:	f000 f83b 	bl	80053b0 <MyLCD_WriteData>
	MyLCD_WriteData(0x0F);
 800533a:	200f      	movs	r0, #15
 800533c:	f000 f838 	bl	80053b0 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_SLEEP_OUT);
 8005340:	2011      	movs	r0, #17
 8005342:	f000 f80b 	bl	800535c <MyLCD_WriteCommand>
	HAL_Delay(100);
 8005346:	2064      	movs	r0, #100	; 0x64
 8005348:	f7fb f94a 	bl	80005e0 <HAL_Delay>
	MyLCD_WriteCommand(MyLCD_DISPLAY_ON);
 800534c:	2029      	movs	r0, #41	; 0x29
 800534e:	f000 f805 	bl	800535c <MyLCD_WriteCommand>
	/* GRAM start writing */
	MyLCD_WriteCommand(MyLCD_GRAM);
 8005352:	202c      	movs	r0, #44	; 0x2c
 8005354:	f000 f802 	bl	800535c <MyLCD_WriteCommand>
}
 8005358:	bf00      	nop
 800535a:	bd80      	pop	{r7, pc}

0800535c <MyLCD_WriteCommand>:

void MyLCD_WriteCommand(uint8_t com)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	733b      	strb	r3, [r7, #12]
 800536a:	2300      	movs	r3, #0
 800536c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 800536e:	2200      	movs	r2, #0
 8005370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005374:	480b      	ldr	r0, [pc, #44]	; (80053a4 <MyLCD_WriteCommand+0x48>)
 8005376:	f7fb fdf7 	bl	8000f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 800537a:	2200      	movs	r2, #0
 800537c:	2104      	movs	r1, #4
 800537e:	480a      	ldr	r0, [pc, #40]	; (80053a8 <MyLCD_WriteCommand+0x4c>)
 8005380:	f7fb fdf2 	bl	8000f68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8005384:	f107 010c 	add.w	r1, r7, #12
 8005388:	2364      	movs	r3, #100	; 0x64
 800538a:	2201      	movs	r2, #1
 800538c:	4807      	ldr	r0, [pc, #28]	; (80053ac <MyLCD_WriteCommand+0x50>)
 800538e:	f7fe f8d0 	bl	8003532 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8005392:	2201      	movs	r2, #1
 8005394:	2104      	movs	r1, #4
 8005396:	4804      	ldr	r0, [pc, #16]	; (80053a8 <MyLCD_WriteCommand+0x4c>)
 8005398:	f7fb fde6 	bl	8000f68 <HAL_GPIO_WritePin>
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40020c00 	.word	0x40020c00
 80053a8:	40020800 	.word	0x40020800
 80053ac:	2001bbfc 	.word	0x2001bbfc

080053b0 <MyLCD_WriteData>:

void MyLCD_WriteData(uint8_t data)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	733b      	strb	r3, [r7, #12]
 80053be:	2300      	movs	r3, #0
 80053c0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 80053c2:	2201      	movs	r2, #1
 80053c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053c8:	480b      	ldr	r0, [pc, #44]	; (80053f8 <MyLCD_WriteData+0x48>)
 80053ca:	f7fb fdcd 	bl	8000f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2104      	movs	r1, #4
 80053d2:	480a      	ldr	r0, [pc, #40]	; (80053fc <MyLCD_WriteData+0x4c>)
 80053d4:	f7fb fdc8 	bl	8000f68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 80053d8:	f107 010c 	add.w	r1, r7, #12
 80053dc:	2364      	movs	r3, #100	; 0x64
 80053de:	2201      	movs	r2, #1
 80053e0:	4807      	ldr	r0, [pc, #28]	; (8005400 <MyLCD_WriteData+0x50>)
 80053e2:	f7fe f8a6 	bl	8003532 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80053e6:	2201      	movs	r2, #1
 80053e8:	2104      	movs	r1, #4
 80053ea:	4804      	ldr	r0, [pc, #16]	; (80053fc <MyLCD_WriteData+0x4c>)
 80053ec:	f7fb fdbc 	bl	8000f68 <HAL_GPIO_WritePin>
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40020c00 	.word	0x40020c00
 80053fc:	40020800 	.word	0x40020800
 8005400:	2001bbfc 	.word	0x2001bbfc

08005404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t *dma2d_in1;
	uint8_t *dma2d_in2;

	dma2d_in1 = (uint8_t *) ((uint32_t)(3) * LCD_FRAME_BUFFER);
 800540a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
	dma2d_in2 = (uint8_t *) ((uint32_t)(4) * LCD_FRAME_BUFFER);
 8005410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005414:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005416:	f7fb f871 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800541a:	f000 f817 	bl	800544c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800541e:	f000 f8f3 	bl	8005608 <MX_GPIO_Init>
  MX_I2C3_Init();
 8005422:	f000 f8b1 	bl	8005588 <MX_I2C3_Init>
  MX_CRC_Init();
 8005426:	f000 f89b 	bl	8005560 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  TP_Config();
 800542a:	f000 fb7b 	bl	8005b24 <TP_Config>

  tp_state_t tp_state;
  char str[20] = {0};
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 800543c:	f7ff fe32 	bl	80050a4 <GRAPHICS_HW_Init>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8005440:	f7ff fe3e 	bl	80050c0 <GRAPHICS_Init>
  
  /* Graphic application */  
  GRAPHICS_MainTask();
 8005444:	f7fe fbb0 	bl	8003ba8 <GRAPHICS_MainTask>
    
  /* Infinite loop */
  for(;;);
 8005448:	e7fe      	b.n	8005448 <main+0x44>
	...

0800544c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b0a0      	sub	sp, #128	; 0x80
 8005450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005452:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005456:	2230      	movs	r2, #48	; 0x30
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f00b ff37 	bl	80112ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005460:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	2230      	movs	r2, #48	; 0x30
 8005476:	2100      	movs	r1, #0
 8005478:	4618      	mov	r0, r3
 800547a:	f00b ff28 	bl	80112ce <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	4a35      	ldr	r2, [pc, #212]	; (8005558 <SystemClock_Config+0x10c>)
 8005484:	4b34      	ldr	r3, [pc, #208]	; (8005558 <SystemClock_Config+0x10c>)
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548c:	6413      	str	r3, [r2, #64]	; 0x40
 800548e:	4b32      	ldr	r3, [pc, #200]	; (8005558 <SystemClock_Config+0x10c>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	4a2f      	ldr	r2, [pc, #188]	; (800555c <SystemClock_Config+0x110>)
 80054a0:	4b2e      	ldr	r3, [pc, #184]	; (800555c <SystemClock_Config+0x110>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4b2c      	ldr	r3, [pc, #176]	; (800555c <SystemClock_Config+0x110>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054b6:	2302      	movs	r3, #2
 80054b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054ba:	2301      	movs	r3, #1
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054be:	2310      	movs	r3, #16
 80054c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054c2:	2302      	movs	r3, #2
 80054c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054c6:	2300      	movs	r3, #0
 80054c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80054ca:	2308      	movs	r3, #8
 80054cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80054ce:	23b4      	movs	r3, #180	; 0xb4
 80054d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054d2:	2302      	movs	r3, #2
 80054d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80054d6:	2304      	movs	r3, #4
 80054d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fd fa00 	bl	80028e4 <HAL_RCC_OscConfig>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80054ea:	f000 f93b 	bl	8005764 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80054ee:	f7fd f9a9 	bl	8002844 <HAL_PWREx_EnableOverDrive>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80054f8:	f000 f934 	bl	8005764 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054fc:	230f      	movs	r3, #15
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005500:	2302      	movs	r3, #2
 8005502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005504:	2300      	movs	r3, #0
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005508:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800550e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005518:	2105      	movs	r1, #5
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fc24 	bl	8002d68 <HAL_RCC_ClockConfig>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005526:	f000 f91d 	bl	8005764 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800552a:	2308      	movs	r3, #8
 800552c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800552e:	233c      	movs	r3, #60	; 0x3c
 8005530:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005532:	2302      	movs	r3, #2
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800553a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	4618      	mov	r0, r3
 8005542:	f7fd fdc9 	bl	80030d8 <HAL_RCCEx_PeriphCLKConfig>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800554c:	f000 f90a 	bl	8005764 <Error_Handler>
  }
}
 8005550:	bf00      	nop
 8005552:	3780      	adds	r7, #128	; 0x80
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	40007000 	.word	0x40007000

08005560 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <MX_CRC_Init+0x20>)
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <MX_CRC_Init+0x24>)
 8005568:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800556a:	4805      	ldr	r0, [pc, #20]	; (8005580 <MX_CRC_Init+0x20>)
 800556c:	f7fb f93d 	bl	80007ea <HAL_CRC_Init>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005576:	f000 f8f5 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	2001bc54 	.word	0x2001bc54
 8005584:	40023000 	.word	0x40023000

08005588 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <MX_I2C3_Init+0x74>)
 800558e:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <MX_I2C3_Init+0x78>)
 8005590:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <MX_I2C3_Init+0x74>)
 8005594:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <MX_I2C3_Init+0x7c>)
 8005596:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <MX_I2C3_Init+0x74>)
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 800559e:	4b17      	ldr	r3, [pc, #92]	; (80055fc <MX_I2C3_Init+0x74>)
 80055a0:	2282      	movs	r2, #130	; 0x82
 80055a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <MX_I2C3_Init+0x74>)
 80055a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <MX_I2C3_Init+0x74>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <MX_I2C3_Init+0x74>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055b8:	4b10      	ldr	r3, [pc, #64]	; (80055fc <MX_I2C3_Init+0x74>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <MX_I2C3_Init+0x74>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <MX_I2C3_Init+0x74>)
 80055c6:	f7fb fce9 	bl	8000f9c <HAL_I2C_Init>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80055d0:	f000 f8c8 	bl	8005764 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80055d4:	2100      	movs	r1, #0
 80055d6:	4809      	ldr	r0, [pc, #36]	; (80055fc <MX_I2C3_Init+0x74>)
 80055d8:	f7fc fbf5 	bl	8001dc6 <HAL_I2CEx_ConfigAnalogFilter>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80055e2:	f000 f8bf 	bl	8005764 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80055e6:	2100      	movs	r1, #0
 80055e8:	4804      	ldr	r0, [pc, #16]	; (80055fc <MX_I2C3_Init+0x74>)
 80055ea:	f7fc fc28 	bl	8001e3e <HAL_I2CEx_ConfigDigitalFilter>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80055f4:	f000 f8b6 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	2001bba8 	.word	0x2001bba8
 8005600:	40005c00 	.word	0x40005c00
 8005604:	000186a0 	.word	0x000186a0

08005608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560e:	f107 031c 	add.w	r3, r7, #28
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	4a4c      	ldr	r2, [pc, #304]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005624:	4b4b      	ldr	r3, [pc, #300]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	f043 0320 	orr.w	r3, r3, #32
 800562c:	6313      	str	r3, [r2, #48]	; 0x30
 800562e:	4b49      	ldr	r3, [pc, #292]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	4a45      	ldr	r2, [pc, #276]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005640:	4b44      	ldr	r3, [pc, #272]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	6313      	str	r3, [r2, #48]	; 0x30
 800564a:	4b42      	ldr	r3, [pc, #264]	; (8005754 <MX_GPIO_Init+0x14c>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	4a3e      	ldr	r2, [pc, #248]	; (8005754 <MX_GPIO_Init+0x14c>)
 800565c:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <MX_GPIO_Init+0x14c>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	4a37      	ldr	r2, [pc, #220]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005678:	4b36      	ldr	r3, [pc, #216]	; (8005754 <MX_GPIO_Init+0x14c>)
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	6313      	str	r3, [r2, #48]	; 0x30
 8005682:	4b34      	ldr	r3, [pc, #208]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4a30      	ldr	r2, [pc, #192]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005694:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <MX_GPIO_Init+0x14c>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	4a29      	ldr	r2, [pc, #164]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	f043 0310 	orr.w	r3, r3, #16
 80056b8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ba:	4b26      	ldr	r3, [pc, #152]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	607b      	str	r3, [r7, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4a22      	ldr	r2, [pc, #136]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056cc:	4b21      	ldr	r3, [pc, #132]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	f043 0308 	orr.w	r3, r3, #8
 80056d4:	6313      	str	r3, [r2, #48]	; 0x30
 80056d6:	4b1f      	ldr	r3, [pc, #124]	; (8005754 <MX_GPIO_Init+0x14c>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80056e2:	2201      	movs	r2, #1
 80056e4:	2104      	movs	r1, #4
 80056e6:	481c      	ldr	r0, [pc, #112]	; (8005758 <MX_GPIO_Init+0x150>)
 80056e8:	f7fb fc3e 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LTDC_RDX_Pin|LTDC_WRX_Pin, GPIO_PIN_RESET);
 80056ec:	2200      	movs	r2, #0
 80056ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80056f2:	481a      	ldr	r0, [pc, #104]	; (800575c <MX_GPIO_Init+0x154>)
 80056f4:	f7fb fc38 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 80056f8:	2304      	movs	r3, #4
 80056fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056fc:	2301      	movs	r3, #1
 80056fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2300      	movs	r3, #0
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005704:	2302      	movs	r3, #2
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8005708:	f107 031c 	add.w	r3, r7, #28
 800570c:	4619      	mov	r1, r3
 800570e:	4812      	ldr	r0, [pc, #72]	; (8005758 <MX_GPIO_Init+0x150>)
 8005710:	f7fb fa80 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTDC_RDX_Pin LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_RDX_Pin|LTDC_WRX_Pin;
 8005714:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800571a:	2301      	movs	r3, #1
 800571c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571e:	2300      	movs	r3, #0
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005722:	2302      	movs	r3, #2
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005726:	f107 031c 	add.w	r3, r7, #28
 800572a:	4619      	mov	r1, r3
 800572c:	480b      	ldr	r0, [pc, #44]	; (800575c <MX_GPIO_Init+0x154>)
 800572e:	f7fb fa71 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8005732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005738:	2300      	movs	r3, #0
 800573a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8005740:	f107 031c 	add.w	r3, r7, #28
 8005744:	4619      	mov	r1, r3
 8005746:	4806      	ldr	r0, [pc, #24]	; (8005760 <MX_GPIO_Init+0x158>)
 8005748:	f7fb fa64 	bl	8000c14 <HAL_GPIO_Init>

}
 800574c:	bf00      	nop
 800574e:	3730      	adds	r7, #48	; 0x30
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40023800 	.word	0x40023800
 8005758:	40020800 	.word	0x40020800
 800575c:	40020c00 	.word	0x40020c00
 8005760:	40020000 	.word	0x40020000

08005764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	4a10      	ldr	r2, [pc, #64]	; (80057c0 <HAL_MspInit+0x4c>)
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <HAL_MspInit+0x4c>)
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005788:	6453      	str	r3, [r2, #68]	; 0x44
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <HAL_MspInit+0x4c>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <HAL_MspInit+0x4c>)
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <HAL_MspInit+0x4c>)
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6413      	str	r3, [r2, #64]	; 0x40
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_MspInit+0x4c>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40023800 	.word	0x40023800

080057c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <HAL_CRC_MspInit+0x3c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d10d      	bne.n	80057f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <HAL_CRC_MspInit+0x40>)
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_CRC_MspInit+0x40>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057e4:	6313      	str	r3, [r2, #48]	; 0x30
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <HAL_CRC_MspInit+0x40>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40023000 	.word	0x40023000
 8005804:	40023800 	.word	0x40023800

08005808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	605a      	str	r2, [r3, #4]
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a29      	ldr	r2, [pc, #164]	; (80058cc <HAL_I2C_MspInit+0xc4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d14b      	bne.n	80058c2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 8005830:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	f043 0304 	orr.w	r3, r3, #4
 8005838:	6313      	str	r3, [r2, #48]	; 0x30
 800583a:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 800584c:	4b20      	ldr	r3, [pc, #128]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6313      	str	r3, [r2, #48]	; 0x30
 8005856:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005868:	2312      	movs	r3, #18
 800586a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800586c:	2301      	movs	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005870:	2303      	movs	r3, #3
 8005872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005874:	2304      	movs	r3, #4
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	4619      	mov	r1, r3
 800587e:	4815      	ldr	r0, [pc, #84]	; (80058d4 <HAL_I2C_MspInit+0xcc>)
 8005880:	f7fb f9c8 	bl	8000c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800588a:	2312      	movs	r3, #18
 800588c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005892:	2303      	movs	r3, #3
 8005894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005896:	2304      	movs	r3, #4
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	4619      	mov	r1, r3
 80058a0:	480d      	ldr	r0, [pc, #52]	; (80058d8 <HAL_I2C_MspInit+0xd0>)
 80058a2:	f7fb f9b7 	bl	8000c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058b4:	6413      	str	r3, [r2, #64]	; 0x40
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_I2C_MspInit+0xc8>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80058c2:	bf00      	nop
 80058c4:	3728      	adds	r7, #40	; 0x28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40005c00 	.word	0x40005c00
 80058d0:	40023800 	.word	0x40023800
 80058d4:	40020800 	.word	0x40020800
 80058d8:	40020000 	.word	0x40020000

080058dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80058e0:	bf00      	nop
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058ea:	b480      	push	{r7}
 80058ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ee:	e7fe      	b.n	80058ee <HardFault_Handler+0x4>

080058f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058f4:	e7fe      	b.n	80058f4 <MemManage_Handler+0x4>

080058f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058f6:	b480      	push	{r7}
 80058f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058fa:	e7fe      	b.n	80058fa <BusFault_Handler+0x4>

080058fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005900:	e7fe      	b.n	8005900 <UsageFault_Handler+0x4>

08005902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005922:	bf00      	nop
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005930:	f7fa fe36 	bl	80005a0 <HAL_IncTick>
  GRAPHICS_IncTick();
 8005934:	f7ff fba8 	bl	8005088 <GRAPHICS_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005938:	bf00      	nop
 800593a:	bd80      	pop	{r7, pc}

0800593c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005940:	4802      	ldr	r0, [pc, #8]	; (800594c <DMA2D_IRQHandler+0x10>)
 8005942:	f7fa ffc4 	bl	80008ce <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	2001bb34 	.word	0x2001bb34

08005950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <SystemInit+0x60>)
 8005956:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <SystemInit+0x60>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005964:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <SystemInit+0x64>)
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <SystemInit+0x64>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <SystemInit+0x64>)
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005976:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <SystemInit+0x64>)
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <SystemInit+0x64>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005984:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <SystemInit+0x64>)
 8005988:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <SystemInit+0x68>)
 800598a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <SystemInit+0x64>)
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <SystemInit+0x64>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005996:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <SystemInit+0x64>)
 800599a:	2200      	movs	r2, #0
 800599c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800599e:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <SystemInit+0x60>)
 80059a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059a4:	609a      	str	r2, [r3, #8]
#endif
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000ed00 	.word	0xe000ed00
 80059b4:	40023800 	.word	0x40023800
 80059b8:	24003010 	.word	0x24003010

080059bc <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 80059c2:	2300      	movs	r3, #0
 80059c4:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 80059c6:	2303      	movs	r3, #3
 80059c8:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 80059ca:	2302      	movs	r3, #2
 80059cc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80059ce:	1d3a      	adds	r2, r7, #4
 80059d0:	2364      	movs	r3, #100	; 0x64
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	2302      	movs	r3, #2
 80059d6:	2182      	movs	r1, #130	; 0x82
 80059d8:	480b      	ldr	r0, [pc, #44]	; (8005a08 <touchReset+0x4c>)
 80059da:	f7fb fbbf 	bl	800115c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80059de:	2014      	movs	r0, #20
 80059e0:	f7fa fdfe 	bl	80005e0 <HAL_Delay>
	sendBuf[1] = 0x00;
 80059e4:	2300      	movs	r3, #0
 80059e6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80059e8:	1d3a      	adds	r2, r7, #4
 80059ea:	2364      	movs	r3, #100	; 0x64
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2302      	movs	r3, #2
 80059f0:	2182      	movs	r1, #130	; 0x82
 80059f2:	4805      	ldr	r0, [pc, #20]	; (8005a08 <touchReset+0x4c>)
 80059f4:	f7fb fbb2 	bl	800115c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80059f8:	2014      	movs	r0, #20
 80059fa:	f7fa fdf1 	bl	80005e0 <HAL_Delay>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2001bba8 	.word	0x2001bba8

08005a0c <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	4603      	mov	r3, r0
 8005a14:	460a      	mov	r2, r1
 8005a16:	71fb      	strb	r3, [r7, #7]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8005a20:	2300      	movs	r3, #0
 8005a22:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8005a24:	2304      	movs	r3, #4
 8005a26:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005a28:	f107 020c 	add.w	r2, r7, #12
 8005a2c:	2364      	movs	r3, #100	; 0x64
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2301      	movs	r3, #1
 8005a32:	2182      	movs	r1, #130	; 0x82
 8005a34:	4817      	ldr	r0, [pc, #92]	; (8005a94 <fnctCmd+0x88>)
 8005a36:	f7fb fb91 	bl	800115c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005a3a:	f107 020c 	add.w	r2, r7, #12
 8005a3e:	2364      	movs	r3, #100	; 0x64
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2301      	movs	r3, #1
 8005a44:	2182      	movs	r1, #130	; 0x82
 8005a46:	4813      	ldr	r0, [pc, #76]	; (8005a94 <fnctCmd+0x88>)
 8005a48:	f7fb fc96 	bl	8001378 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8005a4c:	7b3b      	ldrb	r3, [r7, #12]
 8005a4e:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8005a50:	79bb      	ldrb	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8005a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	b25a      	sxtb	r2, r3
 8005a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a62:	4013      	ands	r3, r2
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	73fb      	strb	r3, [r7, #15]
 8005a68:	e003      	b.n	8005a72 <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8005a72:	2304      	movs	r3, #4
 8005a74:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005a7a:	f107 020c 	add.w	r2, r7, #12
 8005a7e:	2364      	movs	r3, #100	; 0x64
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	2302      	movs	r3, #2
 8005a84:	2182      	movs	r1, #130	; 0x82
 8005a86:	4803      	ldr	r0, [pc, #12]	; (8005a94 <fnctCmd+0x88>)
 8005a88:	f7fb fb68 	bl	800115c <HAL_I2C_Master_Transmit>
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	2001bba8 	.word	0x2001bba8

08005a98 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	71fb      	strb	r3, [r7, #7]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8005aac:	2300      	movs	r3, #0
 8005aae:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 8005ab0:	2317      	movs	r3, #23
 8005ab2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005ab4:	f107 020c 	add.w	r2, r7, #12
 8005ab8:	2364      	movs	r3, #100	; 0x64
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2301      	movs	r3, #1
 8005abe:	2182      	movs	r1, #130	; 0x82
 8005ac0:	4817      	ldr	r0, [pc, #92]	; (8005b20 <ioAFConfig+0x88>)
 8005ac2:	f7fb fb4b 	bl	800115c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8005ac6:	f107 020c 	add.w	r2, r7, #12
 8005aca:	2364      	movs	r3, #100	; 0x64
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2301      	movs	r3, #1
 8005ad0:	2182      	movs	r1, #130	; 0x82
 8005ad2:	4813      	ldr	r0, [pc, #76]	; (8005b20 <ioAFConfig+0x88>)
 8005ad4:	f7fb fc50 	bl	8001378 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8005ad8:	7b3b      	ldrb	r3, [r7, #12]
 8005ada:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8005adc:	79bb      	ldrb	r3, [r7, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e008      	b.n	8005afe <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8005aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	b25a      	sxtb	r2, r3
 8005af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af8:	4013      	ands	r3, r2
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 8005afe:	2317      	movs	r3, #23
 8005b00:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005b06:	f107 020c 	add.w	r2, r7, #12
 8005b0a:	2364      	movs	r3, #100	; 0x64
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2302      	movs	r3, #2
 8005b10:	2182      	movs	r1, #130	; 0x82
 8005b12:	4803      	ldr	r0, [pc, #12]	; (8005b20 <ioAFConfig+0x88>)
 8005b14:	f7fb fb22 	bl	800115c <HAL_I2C_Master_Transmit>
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	2001bba8 	.word	0x2001bba8

08005b24 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af02      	add	r7, sp, #8
	touchReset();
 8005b2a:	f7ff ff47 	bl	80059bc <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 8005b2e:	2101      	movs	r1, #1
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7ff ff6b 	bl	8005a0c <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8005b36:	2101      	movs	r1, #1
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f7ff ff67 	bl	8005a0c <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 8005b3e:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <TP_Config+0x120>)
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005b44:	1d3a      	adds	r2, r7, #4
 8005b46:	2364      	movs	r3, #100	; 0x64
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	2182      	movs	r1, #130	; 0x82
 8005b4e:	483e      	ldr	r0, [pc, #248]	; (8005c48 <TP_Config+0x124>)
 8005b50:	f7fb fb04 	bl	800115c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8005b54:	2014      	movs	r0, #20
 8005b56:	f7fa fd43 	bl	80005e0 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 8005b5a:	2321      	movs	r3, #33	; 0x21
 8005b5c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005b62:	1d3a      	adds	r2, r7, #4
 8005b64:	2364      	movs	r3, #100	; 0x64
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2302      	movs	r3, #2
 8005b6a:	2182      	movs	r1, #130	; 0x82
 8005b6c:	4836      	ldr	r0, [pc, #216]	; (8005c48 <TP_Config+0x124>)
 8005b6e:	f7fb faf5 	bl	800115c <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8005b72:	2100      	movs	r1, #0
 8005b74:	201e      	movs	r0, #30
 8005b76:	f7ff ff8f 	bl	8005a98 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8005b7a:	2341      	movs	r3, #65	; 0x41
 8005b7c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 8005b7e:	239a      	movs	r3, #154	; 0x9a
 8005b80:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005b82:	1d3a      	adds	r2, r7, #4
 8005b84:	2364      	movs	r3, #100	; 0x64
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2302      	movs	r3, #2
 8005b8a:	2182      	movs	r1, #130	; 0x82
 8005b8c:	482e      	ldr	r0, [pc, #184]	; (8005c48 <TP_Config+0x124>)
 8005b8e:	f7fb fae5 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 8005b92:	234a      	movs	r3, #74	; 0x4a
 8005b94:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005b96:	2301      	movs	r3, #1
 8005b98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005b9a:	1d3a      	adds	r2, r7, #4
 8005b9c:	2364      	movs	r3, #100	; 0x64
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	2182      	movs	r1, #130	; 0x82
 8005ba4:	4828      	ldr	r0, [pc, #160]	; (8005c48 <TP_Config+0x124>)
 8005ba6:	f7fb fad9 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8005baa:	234b      	movs	r3, #75	; 0x4b
 8005bac:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005bb2:	1d3a      	adds	r2, r7, #4
 8005bb4:	2364      	movs	r3, #100	; 0x64
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	2302      	movs	r3, #2
 8005bba:	2182      	movs	r1, #130	; 0x82
 8005bbc:	4822      	ldr	r0, [pc, #136]	; (8005c48 <TP_Config+0x124>)
 8005bbe:	f7fb facd 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8005bc2:	234b      	movs	r3, #75	; 0x4b
 8005bc4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005bca:	1d3a      	adds	r2, r7, #4
 8005bcc:	2364      	movs	r3, #100	; 0x64
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	2182      	movs	r1, #130	; 0x82
 8005bd4:	481c      	ldr	r0, [pc, #112]	; (8005c48 <TP_Config+0x124>)
 8005bd6:	f7fb fac1 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 8005bda:	2356      	movs	r3, #86	; 0x56
 8005bdc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005bde:	2301      	movs	r3, #1
 8005be0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005be2:	1d3a      	adds	r2, r7, #4
 8005be4:	2364      	movs	r3, #100	; 0x64
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	2302      	movs	r3, #2
 8005bea:	2182      	movs	r1, #130	; 0x82
 8005bec:	4816      	ldr	r0, [pc, #88]	; (8005c48 <TP_Config+0x124>)
 8005bee:	f7fb fab5 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8005bf2:	2358      	movs	r3, #88	; 0x58
 8005bf4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005bfa:	1d3a      	adds	r2, r7, #4
 8005bfc:	2364      	movs	r3, #100	; 0x64
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	2302      	movs	r3, #2
 8005c02:	2182      	movs	r1, #130	; 0x82
 8005c04:	4810      	ldr	r0, [pc, #64]	; (8005c48 <TP_Config+0x124>)
 8005c06:	f7fb faa9 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 8005c0a:	2340      	movs	r3, #64	; 0x40
 8005c0c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005c12:	1d3a      	adds	r2, r7, #4
 8005c14:	2364      	movs	r3, #100	; 0x64
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2302      	movs	r3, #2
 8005c1a:	2182      	movs	r1, #130	; 0x82
 8005c1c:	480a      	ldr	r0, [pc, #40]	; (8005c48 <TP_Config+0x124>)
 8005c1e:	f7fb fa9d 	bl	800115c <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8005c22:	230b      	movs	r3, #11
 8005c24:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8005c26:	23ff      	movs	r3, #255	; 0xff
 8005c28:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005c2a:	1d3a      	adds	r2, r7, #4
 8005c2c:	2364      	movs	r3, #100	; 0x64
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2302      	movs	r3, #2
 8005c32:	2182      	movs	r1, #130	; 0x82
 8005c34:	4804      	ldr	r0, [pc, #16]	; (8005c48 <TP_Config+0x124>)
 8005c36:	f7fb fa91 	bl	800115c <HAL_I2C_Master_Transmit>

}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08011308 	.word	0x08011308
 8005c48:	2001bba8 	.word	0x2001bba8

08005c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c84 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c52:	e003      	b.n	8005c5c <LoopCopyDataInit>

08005c54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c5a:	3104      	adds	r1, #4

08005c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c5c:	480b      	ldr	r0, [pc, #44]	; (8005c8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005c60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c64:	d3f6      	bcc.n	8005c54 <CopyDataInit>
  ldr  r2, =_sbss
 8005c66:	4a0b      	ldr	r2, [pc, #44]	; (8005c94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005c68:	e002      	b.n	8005c70 <LoopFillZerobss>

08005c6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c6c:	f842 3b04 	str.w	r3, [r2], #4

08005c70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005c72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005c74:	d3f9      	bcc.n	8005c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005c76:	f7ff fe6b 	bl	8005950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c7a:	f00b fadf 	bl	801123c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c7e:	f7ff fbc1 	bl	8005404 <main>
  bx  lr    
 8005c82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005c84:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005c88:	08015be4 	.word	0x08015be4
  ldr  r0, =_sdata
 8005c8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005c90:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8005c94:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8005c98:	2001be14 	.word	0x2001be14

08005c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c9c:	e7fe      	b.n	8005c9c <ADC_IRQHandler>
	...

08005ca0 <_Color2Index_1616I>:
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <_Color2Index_1616I+0x1c>)
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005cac:	4798      	blx	r3
 8005cae:	0e24      	lsrs	r4, r4, #24
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <_Color2Index_1616I+0x20>)
 8005cb2:	5d1b      	ldrb	r3, [r3, r4]
 8005cb4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	08015a74 	.word	0x08015a74
 8005cc0:	0801169c 	.word	0x0801169c

08005cc4 <_Index2Color_1616I>:
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <_Index2Color_1616I+0x18>)
 8005cc6:	b510      	push	{r4, lr}
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4604      	mov	r4, r0
 8005ccc:	b2c0      	uxtb	r0, r0
 8005cce:	4798      	blx	r3
 8005cd0:	0924      	lsrs	r4, r4, #4
 8005cd2:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <_Index2Color_1616I+0x1c>)
 8005cd4:	5d1b      	ldrb	r3, [r3, r4]
 8005cd6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005cda:	bd10      	pop	{r4, pc}
 8005cdc:	08015a74 	.word	0x08015a74
 8005ce0:	080117fc 	.word	0x080117fc

08005ce4 <_GetIndexMask_1616I>:
 8005ce4:	20ff      	movs	r0, #255	; 0xff
 8005ce6:	4770      	bx	lr

08005ce8 <_Color2IndexBulk_1616I>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4c0c      	ldr	r4, [pc, #48]	; (8005d20 <_Color2IndexBulk_1616I+0x38>)
 8005cee:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8005d24 <_Color2IndexBulk_1616I+0x3c>
 8005cf2:	6827      	ldr	r7, [r4, #0]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	4689      	mov	r9, r1
 8005cf8:	4692      	mov	sl, r2
 8005cfa:	461e      	mov	r6, r3
 8005cfc:	f855 4b04 	ldr.w	r4, [r5], #4
 8005d00:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 8005d04:	0e24      	lsrs	r4, r4, #24
 8005d06:	47b8      	blx	r7
 8005d08:	f818 3004 	ldrb.w	r3, [r8, r4]
 8005d0c:	f1ba 0a01 	subs.w	sl, sl, #1
 8005d10:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8005d14:	f889 0000 	strb.w	r0, [r9]
 8005d18:	44b1      	add	r9, r6
 8005d1a:	d1ef      	bne.n	8005cfc <_Color2IndexBulk_1616I+0x14>
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d20:	08015a74 	.word	0x08015a74
 8005d24:	0801169c 	.word	0x0801169c

08005d28 <_Index2ColorBulk_1616I>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	4c0f      	ldr	r4, [pc, #60]	; (8005d6c <_Index2ColorBulk_1616I+0x44>)
 8005d2e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005d70 <_Index2ColorBulk_1616I+0x48>
 8005d32:	6867      	ldr	r7, [r4, #4]
 8005d34:	f102 4a80 	add.w	sl, r2, #1073741824	; 0x40000000
 8005d38:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d3c:	1e55      	subs	r5, r2, #1
 8005d3e:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 8005d42:	fb03 0905 	mla	r9, r3, r5, r0
 8005d46:	425e      	negs	r6, r3
 8005d48:	e000      	b.n	8005d4c <_Index2ColorBulk_1616I+0x24>
 8005d4a:	3d01      	subs	r5, #1
 8005d4c:	f899 4000 	ldrb.w	r4, [r9]
 8005d50:	4620      	mov	r0, r4
 8005d52:	0924      	lsrs	r4, r4, #4
 8005d54:	47b8      	blx	r7
 8005d56:	f818 4004 	ldrb.w	r4, [r8, r4]
 8005d5a:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8005d5e:	44b1      	add	r9, r6
 8005d60:	f84a 0904 	str.w	r0, [sl], #-4
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	d1f0      	bne.n	8005d4a <_Index2ColorBulk_1616I+0x22>
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	08015a74 	.word	0x08015a74
 8005d70:	080117fc 	.word	0x080117fc

08005d74 <_Color2Index_822216>:
 8005d74:	4a10      	ldr	r2, [pc, #64]	; (8005db8 <_Color2Index_822216+0x44>)
 8005d76:	0e03      	lsrs	r3, r0, #24
 8005d78:	fba2 3203 	umull	r3, r2, r2, r3
 8005d7c:	b410      	push	{r4}
 8005d7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005d82:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005d86:	429c      	cmp	r4, r3
 8005d88:	ea4f 1112 	mov.w	r1, r2, lsr #4
 8005d8c:	b2c2      	uxtb	r2, r0
 8005d8e:	d00d      	beq.n	8005dac <_Color2Index_822216+0x38>
 8005d90:	09d0      	lsrs	r0, r2, #7
 8005d92:	09da      	lsrs	r2, r3, #7
 8005d94:	ea42 0380 	orr.w	r3, r2, r0, lsl #2
 8005d98:	f043 0308 	orr.w	r3, r3, #8
 8005d9c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005da0:	09e0      	lsrs	r0, r4, #7
 8005da2:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 8005da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	42a2      	cmp	r2, r4
 8005dae:	d1ef      	bne.n	8005d90 <_Color2Index_822216+0x1c>
 8005db0:	0108      	lsls	r0, r1, #4
 8005db2:	ea40 1052 	orr.w	r0, r0, r2, lsr #5
 8005db6:	e7f6      	b.n	8005da6 <_Color2Index_822216+0x32>
 8005db8:	f0f0f0f1 	.word	0xf0f0f0f1

08005dbc <_Index2Color_822216>:
 8005dbc:	0703      	lsls	r3, r0, #28
 8005dbe:	d516      	bpl.n	8005dee <_Index2Color_822216+0x32>
 8005dc0:	f000 0201 	and.w	r2, r0, #1
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <_Index2Color_822216+0x58>)
 8005dc8:	bf06      	itte	eq
 8005dca:	f04f 22ff 	moveq.w	r2, #4278255360	; 0xff00ff00
 8005dce:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 8005dd2:	f46f 027f 	mvnne.w	r2, #16711680	; 0xff0000
 8005dd6:	f010 0f02 	tst.w	r0, #2
 8005dda:	bf18      	it	ne
 8005ddc:	4613      	movne	r3, r2
 8005dde:	f010 0f04 	tst.w	r0, #4
 8005de2:	bf0c      	ite	eq
 8005de4:	2000      	moveq	r0, #0
 8005de6:	f44f 007f 	movne.w	r0, #16711680	; 0xff0000
 8005dea:	4318      	orrs	r0, r3
 8005dec:	4770      	bx	lr
 8005dee:	f000 0107 	and.w	r1, r0, #7
 8005df2:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8005df6:	0849      	lsrs	r1, r1, #1
 8005df8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005dfc:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 8005e00:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005e04:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8005e08:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8005e0c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	ff0000ff 	.word	0xff0000ff

08005e18 <_GetIndexMask_822216>:
 8005e18:	20ff      	movs	r0, #255	; 0xff
 8005e1a:	4770      	bx	lr

08005e1c <_Color2Index_84444>:
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	0f80      	lsrs	r0, r0, #30
 8005e20:	d011      	beq.n	8005e46 <_Color2Index_84444+0x2a>
 8005e22:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005e26:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	d00b      	beq.n	8005e48 <_Color2Index_84444+0x2c>
 8005e30:	099b      	lsrs	r3, r3, #6
 8005e32:	0992      	lsrs	r2, r2, #6
 8005e34:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8005e38:	0989      	lsrs	r1, r1, #6
 8005e3a:	0180      	lsls	r0, r0, #6
 8005e3c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005e40:	f400 507f 	and.w	r0, r0, #16320	; 0x3fc0
 8005e44:	4318      	orrs	r0, r3
 8005e46:	4770      	bx	lr
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	d1f1      	bne.n	8005e30 <_Color2Index_84444+0x14>
 8005e4c:	091a      	lsrs	r2, r3, #4
 8005e4e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8005e52:	4770      	bx	lr

08005e54 <_GetIndexMask_84444>:
 8005e54:	20ff      	movs	r0, #255	; 0xff
 8005e56:	4770      	bx	lr

08005e58 <_Index2Color_84444>:
 8005e58:	283f      	cmp	r0, #63	; 0x3f
 8005e5a:	d804      	bhi.n	8005e66 <_Index2Color_84444+0xe>
 8005e5c:	280f      	cmp	r0, #15
 8005e5e:	d826      	bhi.n	8005eae <_Index2Color_84444+0x56>
 8005e60:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005e64:	4770      	bx	lr
 8005e66:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8005e6a:	f3c0 1301 	ubfx	r3, r0, #4, #2
 8005e6e:	f000 0103 	and.w	r1, r0, #3
 8005e72:	0980      	lsrs	r0, r0, #6
 8005e74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005e78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e84:	b410      	push	{r4}
 8005e86:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8005e8a:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 8005e8e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8005e92:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8005e96:	b2e4      	uxtb	r4, r4
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	b2c8      	uxtb	r0, r1
 8005e9c:	061b      	lsls	r3, r3, #24
 8005e9e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005ea2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005ea6:	4310      	orrs	r0, r2
 8005ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	f000 030f 	and.w	r3, r0, #15
 8005eb2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8005eb6:	0900      	lsrs	r0, r0, #4
 8005eb8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ec0:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 8005ec4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8005ec8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <LCD_Color2Index_8666>:
 8005ed0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005ed4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	b500      	push	{lr}
 8005edc:	b2c0      	uxtb	r0, r0
 8005ede:	d01f      	beq.n	8005f20 <LCD_Color2Index_8666+0x50>
 8005ee0:	4914      	ldr	r1, [pc, #80]	; (8005f34 <LCD_Color2Index_8666+0x64>)
 8005ee2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ee6:	307f      	adds	r0, #127	; 0x7f
 8005ee8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005eec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005ef0:	fba1 e000 	umull	lr, r0, r1, r0
 8005ef4:	337f      	adds	r3, #127	; 0x7f
 8005ef6:	327f      	adds	r2, #127	; 0x7f
 8005ef8:	fba1 e303 	umull	lr, r3, r1, r3
 8005efc:	09c0      	lsrs	r0, r0, #7
 8005efe:	fba1 1202 	umull	r1, r2, r1, r2
 8005f02:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005f06:	09d2      	lsrs	r2, r2, #7
 8005f08:	09db      	lsrs	r3, r3, #7
 8005f0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005f0e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8005f12:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005f16:	286b      	cmp	r0, #107	; 0x6b
 8005f18:	bf88      	it	hi
 8005f1a:	3028      	addhi	r0, #40	; 0x28
 8005f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f20:	4290      	cmp	r0, r2
 8005f22:	d1dd      	bne.n	8005ee0 <LCD_Color2Index_8666+0x10>
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <LCD_Color2Index_8666+0x68>)
 8005f26:	3008      	adds	r0, #8
 8005f28:	fba3 3000 	umull	r3, r0, r3, r0
 8005f2c:	0900      	lsrs	r0, r0, #4
 8005f2e:	3078      	adds	r0, #120	; 0x78
 8005f30:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f34:	80808081 	.word	0x80808081
 8005f38:	f0f0f0f1 	.word	0xf0f0f0f1

08005f3c <_GetIndexMask_8666>:
 8005f3c:	20ff      	movs	r0, #255	; 0xff
 8005f3e:	4770      	bx	lr

08005f40 <LCD_Index2Color_8666>:
 8005f40:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	b510      	push	{r4, lr}
 8005f48:	d92a      	bls.n	8005fa0 <LCD_Index2Color_8666+0x60>
 8005f4a:	286b      	cmp	r0, #107	; 0x6b
 8005f4c:	d902      	bls.n	8005f54 <LCD_Index2Color_8666+0x14>
 8005f4e:	2893      	cmp	r0, #147	; 0x93
 8005f50:	d932      	bls.n	8005fb8 <LCD_Index2Color_8666+0x78>
 8005f52:	3828      	subs	r0, #40	; 0x28
 8005f54:	4919      	ldr	r1, [pc, #100]	; (8005fbc <LCD_Index2Color_8666+0x7c>)
 8005f56:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <LCD_Index2Color_8666+0x80>)
 8005f58:	fba1 4200 	umull	r4, r2, r1, r0
 8005f5c:	0892      	lsrs	r2, r2, #2
 8005f5e:	fba1 4102 	umull	r4, r1, r1, r2
 8005f62:	fba3 e300 	umull	lr, r3, r3, r0
 8005f66:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8005f6a:	0889      	lsrs	r1, r1, #2
 8005f6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005f70:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8005f74:	08db      	lsrs	r3, r3, #3
 8005f76:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 8005f7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005f7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005f82:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8005f86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005f8a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8005f8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8005f92:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8005f96:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8005f9a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8005f9e:	bd10      	pop	{r4, pc}
 8005fa0:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8005fa4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8005fa8:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 8005fac:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8005fb0:	3008      	adds	r0, #8
 8005fb2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8005fb6:	bd10      	pop	{r4, pc}
 8005fb8:	2000      	movs	r0, #0
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	aaaaaaab 	.word	0xaaaaaaab
 8005fc0:	38e38e39 	.word	0x38e38e39

08005fc4 <_GetIndexMask_8666_1>:
 8005fc4:	20ff      	movs	r0, #255	; 0xff
 8005fc6:	4770      	bx	lr

08005fc8 <_Color2Index_8666_1>:
 8005fc8:	b500      	push	{lr}
 8005fca:	b320      	cbz	r0, 8006016 <_Color2Index_8666_1+0x4e>
 8005fcc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005fd0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	b2c0      	uxtb	r0, r0
 8005fd8:	d022      	beq.n	8006020 <_Color2Index_8666_1+0x58>
 8005fda:	4916      	ldr	r1, [pc, #88]	; (8006034 <_Color2Index_8666_1+0x6c>)
 8005fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fe0:	307f      	adds	r0, #127	; 0x7f
 8005fe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fe6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fea:	fba1 e000 	umull	lr, r0, r1, r0
 8005fee:	337f      	adds	r3, #127	; 0x7f
 8005ff0:	327f      	adds	r2, #127	; 0x7f
 8005ff2:	fba1 e303 	umull	lr, r3, r1, r3
 8005ff6:	09c0      	lsrs	r0, r0, #7
 8005ff8:	fba1 1202 	umull	r1, r2, r1, r2
 8005ffc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	09d2      	lsrs	r2, r2, #7
 8006004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800600c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8006010:	286b      	cmp	r0, #107	; 0x6b
 8006012:	d902      	bls.n	800601a <_Color2Index_8666_1+0x52>
 8006014:	301c      	adds	r0, #28
 8006016:	f85d fb04 	ldr.w	pc, [sp], #4
 800601a:	300c      	adds	r0, #12
 800601c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006020:	4290      	cmp	r0, r2
 8006022:	d1da      	bne.n	8005fda <_Color2Index_8666_1+0x12>
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <_Color2Index_8666_1+0x70>)
 8006026:	3008      	adds	r0, #8
 8006028:	fba3 3000 	umull	r3, r0, r3, r0
 800602c:	0900      	lsrs	r0, r0, #4
 800602e:	3078      	adds	r0, #120	; 0x78
 8006030:	f85d fb04 	ldr.w	pc, [sp], #4
 8006034:	80808081 	.word	0x80808081
 8006038:	f0f0f0f1 	.word	0xf0f0f0f1

0800603c <_Index2Color_8666_1>:
 800603c:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8006040:	2b0f      	cmp	r3, #15
 8006042:	d92e      	bls.n	80060a2 <_Index2Color_8666_1+0x66>
 8006044:	f1a0 010c 	sub.w	r1, r0, #12
 8006048:	29e7      	cmp	r1, #231	; 0xe7
 800604a:	d828      	bhi.n	800609e <_Index2Color_8666_1+0x62>
 800604c:	2877      	cmp	r0, #119	; 0x77
 800604e:	b510      	push	{r4, lr}
 8006050:	4c19      	ldr	r4, [pc, #100]	; (80060b8 <_Index2Color_8666_1+0x7c>)
 8006052:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <_Index2Color_8666_1+0x80>)
 8006054:	bf88      	it	hi
 8006056:	f1a0 011c 	subhi.w	r1, r0, #28
 800605a:	fba4 0201 	umull	r0, r2, r4, r1
 800605e:	0892      	lsrs	r2, r2, #2
 8006060:	fba4 0402 	umull	r0, r4, r4, r2
 8006064:	fba3 e301 	umull	lr, r3, r3, r1
 8006068:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800606c:	08a4      	lsrs	r4, r4, #2
 800606e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006072:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800607c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006080:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006084:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8006088:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800608c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8006090:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8006094:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8006098:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 800609c:	bd10      	pop	{r4, pc}
 800609e:	2000      	movs	r0, #0
 80060a0:	4770      	bx	lr
 80060a2:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 80060a6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80060aa:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 80060ae:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80060b2:	3008      	adds	r0, #8
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	aaaaaaab 	.word	0xaaaaaaab
 80060bc:	38e38e39 	.word	0x38e38e39

080060c0 <_Color2Index_88666I>:
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <_Color2Index_88666I+0x18>)
 80060c2:	b510      	push	{r4, lr}
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4604      	mov	r4, r0
 80060c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80060cc:	4798      	blx	r3
 80060ce:	0c24      	lsrs	r4, r4, #16
 80060d0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80060d4:	4320      	orrs	r0, r4
 80060d6:	bd10      	pop	{r4, pc}
 80060d8:	08011354 	.word	0x08011354

080060dc <_Index2Color_88666I>:
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <_Index2Color_88666I+0x18>)
 80060de:	b510      	push	{r4, lr}
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4604      	mov	r4, r0
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	4798      	blx	r3
 80060e8:	0424      	lsls	r4, r4, #16
 80060ea:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80060ee:	4320      	orrs	r0, r4
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	08011354 	.word	0x08011354

080060f8 <_GetIndexMask_88666I>:
 80060f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop

08006100 <_Color2IndexBulk_88666I>:
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4c0b      	ldr	r4, [pc, #44]	; (8006134 <_Color2IndexBulk_88666I+0x34>)
 8006106:	f8d4 8000 	ldr.w	r8, [r4]
 800610a:	4606      	mov	r6, r0
 800610c:	4689      	mov	r9, r1
 800610e:	4615      	mov	r5, r2
 8006110:	461f      	mov	r7, r3
 8006112:	f856 4b04 	ldr.w	r4, [r6], #4
 8006116:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800611a:	47c0      	blx	r8
 800611c:	0c24      	lsrs	r4, r4, #16
 800611e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8006122:	4320      	orrs	r0, r4
 8006124:	3d01      	subs	r5, #1
 8006126:	f8a9 0000 	strh.w	r0, [r9]
 800612a:	44b9      	add	r9, r7
 800612c:	d1f1      	bne.n	8006112 <_Color2IndexBulk_88666I+0x12>
 800612e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006132:	bf00      	nop
 8006134:	08011354 	.word	0x08011354

08006138 <_Index2ColorBulk_88666I>:
 8006138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800613c:	4c0e      	ldr	r4, [pc, #56]	; (8006178 <_Index2ColorBulk_88666I+0x40>)
 800613e:	f102 4980 	add.w	r9, r2, #1073741824	; 0x40000000
 8006142:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006146:	1e55      	subs	r5, r2, #1
 8006148:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800614c:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 8006150:	fb03 0605 	mla	r6, r3, r5, r0
 8006154:	425f      	negs	r7, r3
 8006156:	e000      	b.n	800615a <_Index2ColorBulk_88666I+0x22>
 8006158:	3d01      	subs	r5, #1
 800615a:	8834      	ldrh	r4, [r6, #0]
 800615c:	b2e0      	uxtb	r0, r4
 800615e:	47c0      	blx	r8
 8006160:	0424      	lsls	r4, r4, #16
 8006162:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8006166:	4320      	orrs	r0, r4
 8006168:	443e      	add	r6, r7
 800616a:	f849 0904 	str.w	r0, [r9], #-4
 800616e:	2d00      	cmp	r5, #0
 8006170:	d1f2      	bne.n	8006158 <_Index2ColorBulk_88666I+0x20>
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	bf00      	nop
 8006178:	08011354 	.word	0x08011354

0800617c <_Color2Index_M1555I>:
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <_Color2Index_M1555I+0x28>)
 800617e:	b2c3      	uxtb	r3, r0
 8006180:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8006184:	b410      	push	{r4}
 8006186:	5cd3      	ldrb	r3, [r2, r3]
 8006188:	5c51      	ldrb	r1, [r2, r1]
 800618a:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800618e:	0fc0      	lsrs	r0, r0, #31
 8006190:	eb03 30c0 	add.w	r0, r3, r0, lsl #15
 8006194:	5d13      	ldrb	r3, [r2, r4]
 8006196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800619a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800619e:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 80061a2:	4770      	bx	lr
 80061a4:	0801159c 	.word	0x0801159c

080061a8 <_Index2Color_M1555I>:
 80061a8:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <_Index2Color_M1555I+0x2c>)
 80061aa:	f000 031f 	and.w	r3, r0, #31
 80061ae:	f3c0 1144 	ubfx	r1, r0, #5, #5
 80061b2:	b410      	push	{r4}
 80061b4:	5cd3      	ldrb	r3, [r2, r3]
 80061b6:	5c51      	ldrb	r1, [r2, r1]
 80061b8:	f3c0 2484 	ubfx	r4, r0, #10, #5
 80061bc:	f340 30c0 	sbfx	r0, r0, #15, #1
 80061c0:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 80061c4:	5d13      	ldrb	r3, [r2, r4]
 80061c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ca:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 80061ce:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 80061d2:	4770      	bx	lr
 80061d4:	080117dc 	.word	0x080117dc

080061d8 <_GetIndexMask_M1555I>:
 80061d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop

080061e0 <_Color2IndexBulk_M1555I>:
 80061e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e2:	4c13      	ldr	r4, [pc, #76]	; (8006230 <_Color2IndexBulk_M1555I+0x50>)
 80061e4:	f8d4 e000 	ldr.w	lr, [r4]
 80061e8:	f1be 0f00 	cmp.w	lr, #0
 80061ec:	d003      	beq.n	80061f6 <_Color2IndexBulk_M1555I+0x16>
 80061ee:	46f4      	mov	ip, lr
 80061f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80061f4:	4760      	bx	ip
 80061f6:	4606      	mov	r6, r0
 80061f8:	480e      	ldr	r0, [pc, #56]	; (8006234 <_Color2IndexBulk_M1555I+0x54>)
 80061fa:	460c      	mov	r4, r1
 80061fc:	4615      	mov	r5, r2
 80061fe:	461f      	mov	r7, r3
 8006200:	f856 1b04 	ldr.w	r1, [r6], #4
 8006204:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8006208:	b2cb      	uxtb	r3, r1
 800620a:	5c82      	ldrb	r2, [r0, r2]
 800620c:	5cc3      	ldrb	r3, [r0, r3]
 800620e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 8006212:	eb02 2283 	add.w	r2, r2, r3, lsl #10
 8006216:	0fcb      	lsrs	r3, r1, #31
 8006218:	f810 100e 	ldrb.w	r1, [r0, lr]
 800621c:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8006220:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006224:	3d01      	subs	r5, #1
 8006226:	8023      	strh	r3, [r4, #0]
 8006228:	443c      	add	r4, r7
 800622a:	d1e9      	bne.n	8006200 <_Color2IndexBulk_M1555I+0x20>
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	bf00      	nop
 8006230:	20000088 	.word	0x20000088
 8006234:	0801159c 	.word	0x0801159c

08006238 <_Index2ColorBulk_M1555I>:
 8006238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623a:	4c16      	ldr	r4, [pc, #88]	; (8006294 <_Index2ColorBulk_M1555I+0x5c>)
 800623c:	6864      	ldr	r4, [r4, #4]
 800623e:	b11c      	cbz	r4, 8006248 <_Index2ColorBulk_M1555I+0x10>
 8006240:	46a4      	mov	ip, r4
 8006242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006246:	4760      	bx	ip
 8006248:	468c      	mov	ip, r1
 800624a:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 800624e:	3901      	subs	r1, #1
 8006250:	3a01      	subs	r2, #1
 8006252:	fb03 0002 	mla	r0, r3, r2, r0
 8006256:	4f10      	ldr	r7, [pc, #64]	; (8006298 <_Index2ColorBulk_M1555I+0x60>)
 8006258:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 800625c:	425b      	negs	r3, r3
 800625e:	e000      	b.n	8006262 <_Index2ColorBulk_M1555I+0x2a>
 8006260:	3a01      	subs	r2, #1
 8006262:	8805      	ldrh	r5, [r0, #0]
 8006264:	f005 061f 	and.w	r6, r5, #31
 8006268:	f3c5 1444 	ubfx	r4, r5, #5, #5
 800626c:	5dbe      	ldrb	r6, [r7, r6]
 800626e:	5d3c      	ldrb	r4, [r7, r4]
 8006270:	f3c5 2e84 	ubfx	lr, r5, #10, #5
 8006274:	f345 35c0 	sbfx	r5, r5, #15, #1
 8006278:	eb06 6505 	add.w	r5, r6, r5, lsl #24
 800627c:	f817 600e 	ldrb.w	r6, [r7, lr]
 8006280:	eb05 2404 	add.w	r4, r5, r4, lsl #8
 8006284:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 8006288:	4418      	add	r0, r3
 800628a:	f841 4904 	str.w	r4, [r1], #-4
 800628e:	2a00      	cmp	r2, #0
 8006290:	d1e6      	bne.n	8006260 <_Index2ColorBulk_M1555I+0x28>
 8006292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006294:	20000088 	.word	0x20000088
 8006298:	080117dc 	.word	0x080117dc

0800629c <GUICC_M1555I_SetCustColorConv>:
 800629c:	4b01      	ldr	r3, [pc, #4]	; (80062a4 <GUICC_M1555I_SetCustColorConv+0x8>)
 800629e:	e883 0003 	stmia.w	r3, {r0, r1}
 80062a2:	4770      	bx	lr
 80062a4:	20000088 	.word	0x20000088

080062a8 <_Color2Index_M4444I>:
 80062a8:	0e01      	lsrs	r1, r0, #24
 80062aa:	b430      	push	{r4, r5}
 80062ac:	4d0e      	ldr	r5, [pc, #56]	; (80062e8 <_Color2Index_M4444I+0x40>)
 80062ae:	b2c4      	uxtb	r4, r0
 80062b0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80062b4:	3408      	adds	r4, #8
 80062b6:	3108      	adds	r1, #8
 80062b8:	fba5 3404 	umull	r3, r4, r5, r4
 80062bc:	fba5 3101 	umull	r3, r1, r5, r1
 80062c0:	3208      	adds	r2, #8
 80062c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80062c6:	0924      	lsrs	r4, r4, #4
 80062c8:	fba5 0202 	umull	r0, r2, r5, r2
 80062cc:	0909      	lsrs	r1, r1, #4
 80062ce:	3308      	adds	r3, #8
 80062d0:	eb04 3101 	add.w	r1, r4, r1, lsl #12
 80062d4:	fba5 0303 	umull	r0, r3, r5, r3
 80062d8:	0912      	lsrs	r2, r2, #4
 80062da:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 80062de:	f023 000f 	bic.w	r0, r3, #15
 80062e2:	4410      	add	r0, r2
 80062e4:	bc30      	pop	{r4, r5}
 80062e6:	4770      	bx	lr
 80062e8:	f0f0f0f1 	.word	0xf0f0f0f1

080062ec <_Index2Color_M4444I>:
 80062ec:	490b      	ldr	r1, [pc, #44]	; (800631c <_Index2Color_M4444I+0x30>)
 80062ee:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80062f2:	f3c0 3303 	ubfx	r3, r0, #12, #4
 80062f6:	b410      	push	{r4}
 80062f8:	5c8a      	ldrb	r2, [r1, r2]
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f000 040f 	and.w	r4, r0, #15
 8006300:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006304:	5d0c      	ldrb	r4, [r1, r4]
 8006306:	5c08      	ldrb	r0, [r1, r0]
 8006308:	0412      	lsls	r2, r2, #16
 800630a:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 800630e:	4423      	add	r3, r4
 8006310:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8006314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	080117fc 	.word	0x080117fc

08006320 <_GetIndexMask_M4444I>:
 8006320:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop

08006328 <_Color2IndexBulk_M4444I>:
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	4c19      	ldr	r4, [pc, #100]	; (8006390 <_Color2IndexBulk_M4444I+0x68>)
 800632c:	f8d4 e000 	ldr.w	lr, [r4]
 8006330:	f1be 0f00 	cmp.w	lr, #0
 8006334:	d003      	beq.n	800633e <_Color2IndexBulk_M4444I+0x16>
 8006336:	46f4      	mov	ip, lr
 8006338:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800633c:	4760      	bx	ip
 800633e:	f8df e054 	ldr.w	lr, [pc, #84]	; 8006394 <_Color2IndexBulk_M4444I+0x6c>
 8006342:	4606      	mov	r6, r0
 8006344:	460c      	mov	r4, r1
 8006346:	4615      	mov	r5, r2
 8006348:	461f      	mov	r7, r3
 800634a:	f856 3b04 	ldr.w	r3, [r6], #4
 800634e:	b2d8      	uxtb	r0, r3
 8006350:	0e19      	lsrs	r1, r3, #24
 8006352:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006356:	3008      	adds	r0, #8
 8006358:	3108      	adds	r1, #8
 800635a:	fbae c000 	umull	ip, r0, lr, r0
 800635e:	fbae c101 	umull	ip, r1, lr, r1
 8006362:	3208      	adds	r2, #8
 8006364:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006368:	0900      	lsrs	r0, r0, #4
 800636a:	0909      	lsrs	r1, r1, #4
 800636c:	fbae c202 	umull	ip, r2, lr, r2
 8006370:	3308      	adds	r3, #8
 8006372:	eb00 3101 	add.w	r1, r0, r1, lsl #12
 8006376:	0912      	lsrs	r2, r2, #4
 8006378:	fbae 0303 	umull	r0, r3, lr, r3
 800637c:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8006380:	f023 030f 	bic.w	r3, r3, #15
 8006384:	4413      	add	r3, r2
 8006386:	3d01      	subs	r5, #1
 8006388:	8023      	strh	r3, [r4, #0]
 800638a:	443c      	add	r4, r7
 800638c:	d1dd      	bne.n	800634a <_Color2IndexBulk_M4444I+0x22>
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006390:	20000090 	.word	0x20000090
 8006394:	f0f0f0f1 	.word	0xf0f0f0f1

08006398 <_Index2ColorBulk_M4444I>:
 8006398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639a:	4c17      	ldr	r4, [pc, #92]	; (80063f8 <_Index2ColorBulk_M4444I+0x60>)
 800639c:	6864      	ldr	r4, [r4, #4]
 800639e:	b11c      	cbz	r4, 80063a8 <_Index2ColorBulk_M4444I+0x10>
 80063a0:	46a4      	mov	ip, r4
 80063a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80063a6:	4760      	bx	ip
 80063a8:	468c      	mov	ip, r1
 80063aa:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80063ae:	3901      	subs	r1, #1
 80063b0:	3a01      	subs	r2, #1
 80063b2:	fb03 0002 	mla	r0, r3, r2, r0
 80063b6:	4f11      	ldr	r7, [pc, #68]	; (80063fc <_Index2ColorBulk_M4444I+0x64>)
 80063b8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80063bc:	425b      	negs	r3, r3
 80063be:	e000      	b.n	80063c2 <_Index2ColorBulk_M4444I+0x2a>
 80063c0:	3a01      	subs	r2, #1
 80063c2:	8806      	ldrh	r6, [r0, #0]
 80063c4:	ea4f 3e16 	mov.w	lr, r6, lsr #12
 80063c8:	f006 050f 	and.w	r5, r6, #15
 80063cc:	f3c6 2403 	ubfx	r4, r6, #8, #4
 80063d0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80063d4:	5d7d      	ldrb	r5, [r7, r5]
 80063d6:	5d3c      	ldrb	r4, [r7, r4]
 80063d8:	f3c6 1603 	ubfx	r6, r6, #4, #4
 80063dc:	eb05 650e 	add.w	r5, r5, lr, lsl #24
 80063e0:	5dbe      	ldrb	r6, [r7, r6]
 80063e2:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 80063e6:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 80063ea:	4418      	add	r0, r3
 80063ec:	f841 4904 	str.w	r4, [r1], #-4
 80063f0:	2a00      	cmp	r2, #0
 80063f2:	d1e5      	bne.n	80063c0 <_Index2ColorBulk_M4444I+0x28>
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000090 	.word	0x20000090
 80063fc:	080117fc 	.word	0x080117fc

08006400 <GUICC_M4444I_SetCustColorConv>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <GUICC_M4444I_SetCustColorConv+0x8>)
 8006402:	e883 0003 	stmia.w	r3, {r0, r1}
 8006406:	4770      	bx	lr
 8006408:	20000090 	.word	0x20000090

0800640c <_Color2Index_M8888I>:
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop

08006410 <_GetIndexMask_M8888I>:
 8006410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop

08006418 <_Color2IndexBulk_M8888I>:
 8006418:	b410      	push	{r4}
 800641a:	f850 4b04 	ldr.w	r4, [r0], #4
 800641e:	600c      	str	r4, [r1, #0]
 8006420:	3a01      	subs	r2, #1
 8006422:	4419      	add	r1, r3
 8006424:	d1f9      	bne.n	800641a <_Color2IndexBulk_M8888I+0x2>
 8006426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800642a:	4770      	bx	lr

0800642c <_Index2ColorBulk_M8888I>:
 800642c:	b410      	push	{r4}
 800642e:	6804      	ldr	r4, [r0, #0]
 8006430:	f841 4b04 	str.w	r4, [r1], #4
 8006434:	3a01      	subs	r2, #1
 8006436:	4418      	add	r0, r3
 8006438:	d1f9      	bne.n	800642e <_Index2ColorBulk_M8888I+0x2>
 800643a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800643e:	4770      	bx	lr

08006440 <GUICC_M8888I_SetCustColorConv>:
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop

08006444 <LCD_Index2Color_565>:
 8006444:	b430      	push	{r4, r5}
 8006446:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 800644a:	4908      	ldr	r1, [pc, #32]	; (800646c <LCD_Index2Color_565+0x28>)
 800644c:	4c08      	ldr	r4, [pc, #32]	; (8006470 <LCD_Index2Color_565+0x2c>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	f000 051f 	and.w	r5, r0, #31
 8006454:	f3c0 1245 	ubfx	r2, r0, #5, #6
 8006458:	5d48      	ldrb	r0, [r1, r5]
 800645a:	5ca2      	ldrb	r2, [r4, r2]
 800645c:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8006460:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8006464:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8006468:	bc30      	pop	{r4, r5}
 800646a:	4770      	bx	lr
 800646c:	080117dc 	.word	0x080117dc
 8006470:	0801179c 	.word	0x0801179c

08006474 <_Color2Index_565>:
 8006474:	b410      	push	{r4}
 8006476:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800647a:	b2c4      	uxtb	r4, r0
 800647c:	4a06      	ldr	r2, [pc, #24]	; (8006498 <_Color2Index_565+0x24>)
 800647e:	4907      	ldr	r1, [pc, #28]	; (800649c <_Color2Index_565+0x28>)
 8006480:	5cd3      	ldrb	r3, [r2, r3]
 8006482:	5d12      	ldrb	r2, [r2, r4]
 8006484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006488:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800648c:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8006490:	5c08      	ldrb	r0, [r1, r0]
 8006492:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8006496:	4770      	bx	lr
 8006498:	0801159c 	.word	0x0801159c
 800649c:	0801149c 	.word	0x0801149c

080064a0 <_GetIndexMask_565>:
 80064a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <_Color2IndexBulk>:
 80064a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064aa:	4f0c      	ldr	r7, [pc, #48]	; (80064dc <_Color2IndexBulk+0x34>)
 80064ac:	f8df e030 	ldr.w	lr, [pc, #48]	; 80064e0 <_Color2IndexBulk+0x38>
 80064b0:	f850 4b04 	ldr.w	r4, [r0], #4
 80064b4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80064b8:	fa5f fc84 	uxtb.w	ip, r4
 80064bc:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80064c0:	5d7d      	ldrb	r5, [r7, r5]
 80064c2:	f817 400c 	ldrb.w	r4, [r7, ip]
 80064c6:	f81e 6006 	ldrb.w	r6, [lr, r6]
 80064ca:	eb05 24c4 	add.w	r4, r5, r4, lsl #11
 80064ce:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 80064d2:	3a01      	subs	r2, #1
 80064d4:	800c      	strh	r4, [r1, #0]
 80064d6:	4419      	add	r1, r3
 80064d8:	d1ea      	bne.n	80064b0 <_Color2IndexBulk+0x8>
 80064da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064dc:	0801159c 	.word	0x0801159c
 80064e0:	0801149c 	.word	0x0801149c

080064e4 <_Index2ColorBulk>:
 80064e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e6:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 80064ea:	3c01      	subs	r4, #1
 80064ec:	3a01      	subs	r2, #1
 80064ee:	fb03 0002 	mla	r0, r3, r2, r0
 80064f2:	4f0f      	ldr	r7, [pc, #60]	; (8006530 <_Index2ColorBulk+0x4c>)
 80064f4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006534 <_Index2ColorBulk+0x50>
 80064f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064fc:	425b      	negs	r3, r3
 80064fe:	e000      	b.n	8006502 <_Index2ColorBulk+0x1e>
 8006500:	3a01      	subs	r2, #1
 8006502:	8804      	ldrh	r4, [r0, #0]
 8006504:	0ae5      	lsrs	r5, r4, #11
 8006506:	f004 0c1f 	and.w	ip, r4, #31
 800650a:	f3c4 1645 	ubfx	r6, r4, #5, #6
 800650e:	5d7d      	ldrb	r5, [r7, r5]
 8006510:	f817 400c 	ldrb.w	r4, [r7, ip]
 8006514:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8006518:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 800651c:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8006520:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8006524:	4418      	add	r0, r3
 8006526:	f841 4904 	str.w	r4, [r1], #-4
 800652a:	2a00      	cmp	r2, #0
 800652c:	d1e8      	bne.n	8006500 <_Index2ColorBulk+0x1c>
 800652e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006530:	080117dc 	.word	0x080117dc
 8006534:	0801179c 	.word	0x0801179c

08006538 <_Color2Index_888>:
 8006538:	0403      	lsls	r3, r0, #16
 800653a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800653e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006542:	4313      	orrs	r3, r2
 8006544:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8006548:	4318      	orrs	r0, r3
 800654a:	4770      	bx	lr

0800654c <_GetIndexMask_888>:
 800654c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop

08006554 <_Color2IndexBulk>:
 8006554:	b470      	push	{r4, r5, r6}
 8006556:	f850 4b04 	ldr.w	r4, [r0], #4
 800655a:	0425      	lsls	r5, r4, #16
 800655c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8006560:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8006564:	4335      	orrs	r5, r6
 8006566:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800656a:	432c      	orrs	r4, r5
 800656c:	3a01      	subs	r2, #1
 800656e:	600c      	str	r4, [r1, #0]
 8006570:	4419      	add	r1, r3
 8006572:	d1f0      	bne.n	8006556 <_Color2IndexBulk+0x2>
 8006574:	bc70      	pop	{r4, r5, r6}
 8006576:	4770      	bx	lr

08006578 <_Index2ColorBulk>:
 8006578:	b470      	push	{r4, r5, r6}
 800657a:	6804      	ldr	r4, [r0, #0]
 800657c:	0425      	lsls	r5, r4, #16
 800657e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8006582:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8006586:	4335      	orrs	r5, r6
 8006588:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 800658c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8006590:	432c      	orrs	r4, r5
 8006592:	3a01      	subs	r2, #1
 8006594:	4418      	add	r0, r3
 8006596:	f841 4b04 	str.w	r4, [r1], #4
 800659a:	d1ee      	bne.n	800657a <_Index2ColorBulk+0x2>
 800659c:	bc70      	pop	{r4, r5, r6}
 800659e:	4770      	bx	lr

080065a0 <_Color2Index_8888>:
 80065a0:	43c2      	mvns	r2, r0
 80065a2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80065a6:	0403      	lsls	r3, r0, #16
 80065a8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80065ac:	430a      	orrs	r2, r1
 80065ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80065b8:	4318      	orrs	r0, r3
 80065ba:	4770      	bx	lr

080065bc <_GetIndexMask_8888>:
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop

080065c4 <_Color2IndexBulk>:
 80065c4:	b4f0      	push	{r4, r5, r6, r7}
 80065c6:	f850 4b04 	ldr.w	r4, [r0], #4
 80065ca:	43e6      	mvns	r6, r4
 80065cc:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80065d0:	0425      	lsls	r5, r4, #16
 80065d2:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 80065d6:	433e      	orrs	r6, r7
 80065d8:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 80065dc:	4335      	orrs	r5, r6
 80065de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80065e2:	432c      	orrs	r4, r5
 80065e4:	3a01      	subs	r2, #1
 80065e6:	600c      	str	r4, [r1, #0]
 80065e8:	4419      	add	r1, r3
 80065ea:	d1ec      	bne.n	80065c6 <_Color2IndexBulk+0x2>
 80065ec:	bcf0      	pop	{r4, r5, r6, r7}
 80065ee:	4770      	bx	lr

080065f0 <_Index2ColorBulk>:
 80065f0:	b4f0      	push	{r4, r5, r6, r7}
 80065f2:	6804      	ldr	r4, [r0, #0]
 80065f4:	43e6      	mvns	r6, r4
 80065f6:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80065fa:	0425      	lsls	r5, r4, #16
 80065fc:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8006600:	433e      	orrs	r6, r7
 8006602:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8006606:	4335      	orrs	r5, r6
 8006608:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800660c:	432c      	orrs	r4, r5
 800660e:	3a01      	subs	r2, #1
 8006610:	4418      	add	r0, r3
 8006612:	f841 4b04 	str.w	r4, [r1], #4
 8006616:	d1ec      	bne.n	80065f2 <_Index2ColorBulk+0x2>
 8006618:	bcf0      	pop	{r4, r5, r6, r7}
 800661a:	4770      	bx	lr

0800661c <LCD_Index2Color_8888>:
 800661c:	43c2      	mvns	r2, r0
 800661e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8006622:	0403      	lsls	r3, r0, #16
 8006624:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006628:	430a      	orrs	r2, r1
 800662a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800662e:	4313      	orrs	r3, r2
 8006630:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8006634:	4318      	orrs	r0, r3
 8006636:	4770      	bx	lr

08006638 <LCD_Index2Color_888>:
 8006638:	0403      	lsls	r3, r0, #16
 800663a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800663e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006642:	4313      	orrs	r3, r2
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006648:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800664c:	4318      	orrs	r0, r3
 800664e:	4770      	bx	lr

08006650 <LCD_Index2Color_M565>:
 8006650:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8006654:	4909      	ldr	r1, [pc, #36]	; (800667c <LCD_Index2Color_M565+0x2c>)
 8006656:	b410      	push	{r4}
 8006658:	5cca      	ldrb	r2, [r1, r3]
 800665a:	4c09      	ldr	r4, [pc, #36]	; (8006680 <LCD_Index2Color_M565+0x30>)
 800665c:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8006660:	f000 001f 	and.w	r0, r0, #31
 8006664:	5ce3      	ldrb	r3, [r4, r3]
 8006666:	5c08      	ldrb	r0, [r1, r0]
 8006668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800666c:	0412      	lsls	r2, r2, #16
 800666e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8006672:	4418      	add	r0, r3
 8006674:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	080117dc 	.word	0x080117dc
 8006680:	0801179c 	.word	0x0801179c

08006684 <_Color2Index_M565>:
 8006684:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006688:	4a07      	ldr	r2, [pc, #28]	; (80066a8 <_Color2Index_M565+0x24>)
 800668a:	b410      	push	{r4}
 800668c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8006690:	4c06      	ldr	r4, [pc, #24]	; (80066ac <_Color2Index_M565+0x28>)
 8006692:	5cd3      	ldrb	r3, [r2, r3]
 8006694:	5c61      	ldrb	r1, [r4, r1]
 8006696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800669a:	b2c0      	uxtb	r0, r0
 800669c:	02db      	lsls	r3, r3, #11
 800669e:	5c10      	ldrb	r0, [r2, r0]
 80066a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80066a4:	4418      	add	r0, r3
 80066a6:	4770      	bx	lr
 80066a8:	0801159c 	.word	0x0801159c
 80066ac:	0801149c 	.word	0x0801149c

080066b0 <_GetIndexMask_M565>:
 80066b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop

080066b8 <_Color2IndexBulk>:
 80066b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ba:	4c12      	ldr	r4, [pc, #72]	; (8006704 <_Color2IndexBulk+0x4c>)
 80066bc:	f8d4 e000 	ldr.w	lr, [r4]
 80066c0:	f1be 0f00 	cmp.w	lr, #0
 80066c4:	d003      	beq.n	80066ce <_Color2IndexBulk+0x16>
 80066c6:	46f4      	mov	ip, lr
 80066c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80066cc:	4760      	bx	ip
 80066ce:	4606      	mov	r6, r0
 80066d0:	f8df e038 	ldr.w	lr, [pc, #56]	; 800670c <_Color2IndexBulk+0x54>
 80066d4:	480c      	ldr	r0, [pc, #48]	; (8006708 <_Color2IndexBulk+0x50>)
 80066d6:	460c      	mov	r4, r1
 80066d8:	4615      	mov	r5, r2
 80066da:	461f      	mov	r7, r3
 80066dc:	f856 1b04 	ldr.w	r1, [r6], #4
 80066e0:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80066e4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80066e8:	5c82      	ldrb	r2, [r0, r2]
 80066ea:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80066ee:	b2c9      	uxtb	r1, r1
 80066f0:	02d2      	lsls	r2, r2, #11
 80066f2:	5c41      	ldrb	r1, [r0, r1]
 80066f4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80066f8:	440b      	add	r3, r1
 80066fa:	3d01      	subs	r5, #1
 80066fc:	8023      	strh	r3, [r4, #0]
 80066fe:	443c      	add	r4, r7
 8006700:	d1ec      	bne.n	80066dc <_Color2IndexBulk+0x24>
 8006702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006704:	20000098 	.word	0x20000098
 8006708:	0801159c 	.word	0x0801159c
 800670c:	0801149c 	.word	0x0801149c

08006710 <_Index2ColorBulk>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	4c17      	ldr	r4, [pc, #92]	; (8006774 <_Index2ColorBulk+0x64>)
 8006716:	6864      	ldr	r4, [r4, #4]
 8006718:	b11c      	cbz	r4, 8006722 <_Index2ColorBulk+0x12>
 800671a:	46a4      	mov	ip, r4
 800671c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006720:	4760      	bx	ip
 8006722:	4688      	mov	r8, r1
 8006724:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8006728:	3901      	subs	r1, #1
 800672a:	3a01      	subs	r2, #1
 800672c:	fb03 0002 	mla	r0, r3, r2, r0
 8006730:	4f11      	ldr	r7, [pc, #68]	; (8006778 <_Index2ColorBulk+0x68>)
 8006732:	f8df e048 	ldr.w	lr, [pc, #72]	; 800677c <_Index2ColorBulk+0x6c>
 8006736:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800673a:	425b      	negs	r3, r3
 800673c:	e000      	b.n	8006740 <_Index2ColorBulk+0x30>
 800673e:	3a01      	subs	r2, #1
 8006740:	8804      	ldrh	r4, [r0, #0]
 8006742:	f004 051f 	and.w	r5, r4, #31
 8006746:	ea4f 2cd4 	mov.w	ip, r4, lsr #11
 800674a:	f3c4 1645 	ubfx	r6, r4, #5, #6
 800674e:	5d7d      	ldrb	r5, [r7, r5]
 8006750:	f817 400c 	ldrb.w	r4, [r7, ip]
 8006754:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8006758:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 800675c:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8006760:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8006764:	4418      	add	r0, r3
 8006766:	f841 4904 	str.w	r4, [r1], #-4
 800676a:	2a00      	cmp	r2, #0
 800676c:	d1e7      	bne.n	800673e <_Index2ColorBulk+0x2e>
 800676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006772:	bf00      	nop
 8006774:	20000098 	.word	0x20000098
 8006778:	080117dc 	.word	0x080117dc
 800677c:	0801179c 	.word	0x0801179c

08006780 <GUICC_M565_SetCustColorConv>:
 8006780:	4b01      	ldr	r3, [pc, #4]	; (8006788 <GUICC_M565_SetCustColorConv+0x8>)
 8006782:	e883 0003 	stmia.w	r3, {r0, r1}
 8006786:	4770      	bx	lr
 8006788:	20000098 	.word	0x20000098

0800678c <_Color2Index_M888>:
 800678c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <_GetIndexMask_M888>:
 8006794:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <_Color2IndexBulk>:
 800679c:	b410      	push	{r4}
 800679e:	f850 4b04 	ldr.w	r4, [r0], #4
 80067a2:	3a01      	subs	r2, #1
 80067a4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80067a8:	600c      	str	r4, [r1, #0]
 80067aa:	4419      	add	r1, r3
 80067ac:	d1f7      	bne.n	800679e <_Color2IndexBulk+0x2>
 80067ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <_Index2ColorBulk>:
 80067b4:	b410      	push	{r4}
 80067b6:	6804      	ldr	r4, [r0, #0]
 80067b8:	3a01      	subs	r2, #1
 80067ba:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 80067be:	f841 4b04 	str.w	r4, [r1], #4
 80067c2:	4418      	add	r0, r3
 80067c4:	d1f7      	bne.n	80067b6 <_Index2ColorBulk+0x2>
 80067c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <GUICC_M888_SetCustColorConv>:
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop

080067d0 <_Color2Index_M8888>:
 80067d0:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <_GetIndexMask_M8888>:
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <_Color2IndexBulk>:
 80067e0:	b410      	push	{r4}
 80067e2:	f850 4b04 	ldr.w	r4, [r0], #4
 80067e6:	3a01      	subs	r2, #1
 80067e8:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 80067ec:	600c      	str	r4, [r1, #0]
 80067ee:	4419      	add	r1, r3
 80067f0:	d1f7      	bne.n	80067e2 <_Color2IndexBulk+0x2>
 80067f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <_Index2ColorBulk>:
 80067f8:	b410      	push	{r4}
 80067fa:	6804      	ldr	r4, [r0, #0]
 80067fc:	3a01      	subs	r2, #1
 80067fe:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8006802:	f841 4b04 	str.w	r4, [r1], #4
 8006806:	4418      	add	r0, r3
 8006808:	d1f7      	bne.n	80067fa <_Index2ColorBulk+0x2>
 800680a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800680e:	4770      	bx	lr

08006810 <_Index2Color_M8888>:
 8006810:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <LCD_Index2Color_M8888I>:
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <LCD_Index2Color_M888>:
 800681c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop

08006824 <_AddFreeMemory>:
 8006824:	4bc0      	ldr	r3, [pc, #768]	; (8006b28 <_AddFreeMemory+0x304>)
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800682c:	3a01      	subs	r2, #1
 800682e:	4422      	add	r2, r4
 8006830:	180d      	adds	r5, r1, r0
 8006832:	42aa      	cmp	r2, r5
 8006834:	d303      	bcc.n	800683e <_AddFreeMemory+0x1a>
 8006836:	580a      	ldr	r2, [r1, r0]
 8006838:	2a00      	cmp	r2, #0
 800683a:	f000 80a1 	beq.w	8006980 <_AddFreeMemory+0x15c>
 800683e:	428c      	cmp	r4, r1
 8006840:	d205      	bcs.n	800684e <_AddFreeMemory+0x2a>
 8006842:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006846:	1a8a      	subs	r2, r1, r2
 8006848:	6814      	ldr	r4, [r2, #0]
 800684a:	2c00      	cmp	r4, #0
 800684c:	d04a      	beq.n	80068e4 <_AddFreeMemory+0xc0>
 800684e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8006852:	4ab5      	ldr	r2, [pc, #724]	; (8006b28 <_AddFreeMemory+0x304>)
 8006854:	42a0      	cmp	r0, r4
 8006856:	f080 811e 	bcs.w	8006a96 <_AddFreeMemory+0x272>
 800685a:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800685e:	42a0      	cmp	r0, r4
 8006860:	f080 811b 	bcs.w	8006a9a <_AddFreeMemory+0x276>
 8006864:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8006868:	42a0      	cmp	r0, r4
 800686a:	f080 8118 	bcs.w	8006a9e <_AddFreeMemory+0x27a>
 800686e:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 8006872:	42a0      	cmp	r0, r4
 8006874:	f080 8115 	bcs.w	8006aa2 <_AddFreeMemory+0x27e>
 8006878:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 800687c:	42a0      	cmp	r0, r4
 800687e:	f080 8112 	bcs.w	8006aa6 <_AddFreeMemory+0x282>
 8006882:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8006886:	42a0      	cmp	r0, r4
 8006888:	f080 810f 	bcs.w	8006aaa <_AddFreeMemory+0x286>
 800688c:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8006890:	42a0      	cmp	r0, r4
 8006892:	f080 810c 	bcs.w	8006aae <_AddFreeMemory+0x28a>
 8006896:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 800689a:	42a0      	cmp	r0, r4
 800689c:	f080 8109 	bcs.w	8006ab2 <_AddFreeMemory+0x28e>
 80068a0:	6f94      	ldr	r4, [r2, #120]	; 0x78
 80068a2:	42a0      	cmp	r0, r4
 80068a4:	f080 8107 	bcs.w	8006ab6 <_AddFreeMemory+0x292>
 80068a8:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80068aa:	4290      	cmp	r0, r2
 80068ac:	f080 8105 	bcs.w	8006aba <_AddFreeMemory+0x296>
 80068b0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80068b2:	4a9d      	ldr	r2, [pc, #628]	; (8006b28 <_AddFreeMemory+0x304>)
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	f080 8102 	bcs.w	8006abe <_AddFreeMemory+0x29a>
 80068ba:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80068bc:	42a0      	cmp	r0, r4
 80068be:	f080 8100 	bcs.w	8006ac2 <_AddFreeMemory+0x29e>
 80068c2:	6d94      	ldr	r4, [r2, #88]	; 0x58
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	f080 80fe 	bcs.w	8006ac6 <_AddFreeMemory+0x2a2>
 80068ca:	6d14      	ldr	r4, [r2, #80]	; 0x50
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	f080 80fc 	bcs.w	8006aca <_AddFreeMemory+0x2a6>
 80068d2:	6c94      	ldr	r4, [r2, #72]	; 0x48
 80068d4:	42a0      	cmp	r0, r4
 80068d6:	f080 80fa 	bcs.w	8006ace <_AddFreeMemory+0x2aa>
 80068da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068dc:	4290      	cmp	r0, r2
 80068de:	f080 80a6 	bcs.w	8006a2e <_AddFreeMemory+0x20a>
 80068e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e4:	6851      	ldr	r1, [r2, #4]
 80068e6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80068ea:	4c8f      	ldr	r4, [pc, #572]	; (8006b28 <_AddFreeMemory+0x304>)
 80068ec:	42a9      	cmp	r1, r5
 80068ee:	4408      	add	r0, r1
 80068f0:	f080 80f9 	bcs.w	8006ae6 <_AddFreeMemory+0x2c2>
 80068f4:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80068f8:	42a9      	cmp	r1, r5
 80068fa:	f080 8106 	bcs.w	8006b0a <_AddFreeMemory+0x2e6>
 80068fe:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8006902:	42a9      	cmp	r1, r5
 8006904:	f080 80ff 	bcs.w	8006b06 <_AddFreeMemory+0x2e2>
 8006908:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 800690c:	42a9      	cmp	r1, r5
 800690e:	f080 80f8 	bcs.w	8006b02 <_AddFreeMemory+0x2de>
 8006912:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8006916:	42a9      	cmp	r1, r5
 8006918:	f080 80fc 	bcs.w	8006b14 <_AddFreeMemory+0x2f0>
 800691c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8006920:	42a9      	cmp	r1, r5
 8006922:	f080 80ff 	bcs.w	8006b24 <_AddFreeMemory+0x300>
 8006926:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800692a:	42a9      	cmp	r1, r5
 800692c:	f080 80f8 	bcs.w	8006b20 <_AddFreeMemory+0x2fc>
 8006930:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8006934:	42a1      	cmp	r1, r4
 8006936:	f080 80f1 	bcs.w	8006b1c <_AddFreeMemory+0x2f8>
 800693a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800693c:	4c7a      	ldr	r4, [pc, #488]	; (8006b28 <_AddFreeMemory+0x304>)
 800693e:	42a9      	cmp	r1, r5
 8006940:	f080 80ea 	bcs.w	8006b18 <_AddFreeMemory+0x2f4>
 8006944:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006946:	42a9      	cmp	r1, r5
 8006948:	f080 8113 	bcs.w	8006b72 <_AddFreeMemory+0x34e>
 800694c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800694e:	42a9      	cmp	r1, r5
 8006950:	f080 810d 	bcs.w	8006b6e <_AddFreeMemory+0x34a>
 8006954:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006956:	42a9      	cmp	r1, r5
 8006958:	f080 8107 	bcs.w	8006b6a <_AddFreeMemory+0x346>
 800695c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800695e:	42a9      	cmp	r1, r5
 8006960:	f080 8101 	bcs.w	8006b66 <_AddFreeMemory+0x342>
 8006964:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8006966:	42a9      	cmp	r1, r5
 8006968:	f080 80fb 	bcs.w	8006b62 <_AddFreeMemory+0x33e>
 800696c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800696e:	42a9      	cmp	r1, r5
 8006970:	f080 8104 	bcs.w	8006b7c <_AddFreeMemory+0x358>
 8006974:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8006976:	42a1      	cmp	r1, r4
 8006978:	f080 8081 	bcs.w	8006a7e <_AddFreeMemory+0x25a>
 800697c:	4611      	mov	r1, r2
 800697e:	e766      	b.n	800684e <_AddFreeMemory+0x2a>
 8006980:	686a      	ldr	r2, [r5, #4]
 8006982:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8006986:	42b2      	cmp	r2, r6
 8006988:	4410      	add	r0, r2
 800698a:	f080 80ae 	bcs.w	8006aea <_AddFreeMemory+0x2c6>
 800698e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8006992:	42b2      	cmp	r2, r6
 8006994:	f080 80b2 	bcs.w	8006afc <_AddFreeMemory+0x2d8>
 8006998:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 800699c:	42b2      	cmp	r2, r6
 800699e:	f080 80aa 	bcs.w	8006af6 <_AddFreeMemory+0x2d2>
 80069a2:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80069a6:	42b2      	cmp	r2, r6
 80069a8:	f080 80a2 	bcs.w	8006af0 <_AddFreeMemory+0x2cc>
 80069ac:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80069b0:	42b2      	cmp	r2, r6
 80069b2:	f080 80ac 	bcs.w	8006b0e <_AddFreeMemory+0x2ea>
 80069b6:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 80069ba:	42b2      	cmp	r2, r6
 80069bc:	f080 80bf 	bcs.w	8006b3e <_AddFreeMemory+0x31a>
 80069c0:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80069c4:	42b2      	cmp	r2, r6
 80069c6:	f080 80b7 	bcs.w	8006b38 <_AddFreeMemory+0x314>
 80069ca:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 80069ce:	42b2      	cmp	r2, r6
 80069d0:	f080 80af 	bcs.w	8006b32 <_AddFreeMemory+0x30e>
 80069d4:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 80069d6:	42ba      	cmp	r2, r7
 80069d8:	f080 80a8 	bcs.w	8006b2c <_AddFreeMemory+0x308>
 80069dc:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 80069de:	42ba      	cmp	r2, r7
 80069e0:	f080 80b9 	bcs.w	8006b56 <_AddFreeMemory+0x332>
 80069e4:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80069e6:	42ba      	cmp	r2, r7
 80069e8:	f080 80b2 	bcs.w	8006b50 <_AddFreeMemory+0x32c>
 80069ec:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80069ee:	42ba      	cmp	r2, r7
 80069f0:	f080 80ab 	bcs.w	8006b4a <_AddFreeMemory+0x326>
 80069f4:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 80069f6:	42ba      	cmp	r2, r7
 80069f8:	f080 80a4 	bcs.w	8006b44 <_AddFreeMemory+0x320>
 80069fc:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80069fe:	42ba      	cmp	r2, r7
 8006a00:	f080 80ac 	bcs.w	8006b5c <_AddFreeMemory+0x338>
 8006a04:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8006a06:	42ba      	cmp	r2, r7
 8006a08:	f080 80b5 	bcs.w	8006b76 <_AddFreeMemory+0x352>
 8006a0c:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8006a0e:	42b2      	cmp	r2, r6
 8006a10:	f4ff af15 	bcc.w	800683e <_AddFreeMemory+0x1a>
 8006a14:	f04f 0e00 	mov.w	lr, #0
 8006a18:	681e      	ldr	r6, [r3, #0]
 8006a1a:	68af      	ldr	r7, [r5, #8]
 8006a1c:	68ed      	ldr	r5, [r5, #12]
 8006a1e:	1ab2      	subs	r2, r6, r2
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	b107      	cbz	r7, 8006a26 <_AddFreeMemory+0x202>
 8006a24:	607d      	str	r5, [r7, #4]
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d058      	beq.n	8006adc <_AddFreeMemory+0x2b8>
 8006a2a:	602f      	str	r7, [r5, #0]
 8006a2c:	e707      	b.n	800683e <_AddFreeMemory+0x1a>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	3208      	adds	r2, #8
 8006a32:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8006a36:	180d      	adds	r5, r1, r0
 8006a38:	6864      	ldr	r4, [r4, #4]
 8006a3a:	608c      	str	r4, [r1, #8]
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	600e      	str	r6, [r1, #0]
 8006a40:	6048      	str	r0, [r1, #4]
 8006a42:	6109      	str	r1, [r1, #16]
 8006a44:	f101 0608 	add.w	r6, r1, #8
 8006a48:	f845 0c04 	str.w	r0, [r5, #-4]
 8006a4c:	b104      	cbz	r4, 8006a50 <_AddFreeMemory+0x22c>
 8006a4e:	6066      	str	r6, [r4, #4]
 8006a50:	2500      	movs	r5, #0
 8006a52:	608c      	str	r4, [r1, #8]
 8006a54:	60cd      	str	r5, [r1, #12]
 8006a56:	6819      	ldr	r1, [r3, #0]
 8006a58:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 8006a5c:	4c32      	ldr	r4, [pc, #200]	; (8006b28 <_AddFreeMemory+0x304>)
 8006a5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006a62:	4401      	add	r1, r0
 8006a64:	6056      	str	r6, [r2, #4]
 8006a66:	6019      	str	r1, [r3, #0]
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	f47f af3a 	bne.w	80068e2 <_AddFreeMemory+0xbe>
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	68a2      	ldr	r2, [r4, #8]
 8006a72:	1a59      	subs	r1, r3, r1
 8006a74:	4291      	cmp	r1, r2
 8006a76:	f67f af34 	bls.w	80068e2 <_AddFreeMemory+0xbe>
 8006a7a:	60a1      	str	r1, [r4, #8]
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	2700      	movs	r7, #0
 8006a80:	681c      	ldr	r4, [r3, #0]
 8006a82:	6895      	ldr	r5, [r2, #8]
 8006a84:	68d6      	ldr	r6, [r2, #12]
 8006a86:	1a61      	subs	r1, r4, r1
 8006a88:	6019      	str	r1, [r3, #0]
 8006a8a:	b105      	cbz	r5, 8006a8e <_AddFreeMemory+0x26a>
 8006a8c:	606e      	str	r6, [r5, #4]
 8006a8e:	b306      	cbz	r6, 8006ad2 <_AddFreeMemory+0x2ae>
 8006a90:	6035      	str	r5, [r6, #0]
 8006a92:	4611      	mov	r1, r2
 8006a94:	e6db      	b.n	800684e <_AddFreeMemory+0x2a>
 8006a96:	220f      	movs	r2, #15
 8006a98:	e7ca      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006a9a:	220e      	movs	r2, #14
 8006a9c:	e7c8      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006a9e:	220d      	movs	r2, #13
 8006aa0:	e7c6      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006aa2:	220c      	movs	r2, #12
 8006aa4:	e7c4      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006aa6:	220b      	movs	r2, #11
 8006aa8:	e7c2      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006aaa:	220a      	movs	r2, #10
 8006aac:	e7c0      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006aae:	2209      	movs	r2, #9
 8006ab0:	e7be      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	e7bc      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006ab6:	2207      	movs	r2, #7
 8006ab8:	e7ba      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006aba:	2206      	movs	r2, #6
 8006abc:	e7b8      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006abe:	2205      	movs	r2, #5
 8006ac0:	e7b6      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	e7b4      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	e7b2      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006aca:	2202      	movs	r2, #2
 8006acc:	e7b0      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006ace:	2201      	movs	r2, #1
 8006ad0:	e7ae      	b.n	8006a30 <_AddFreeMemory+0x20c>
 8006ad2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	647d      	str	r5, [r7, #68]	; 0x44
 8006ada:	e6b8      	b.n	800684e <_AddFreeMemory+0x2a>
 8006adc:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8006ae0:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 8006ae4:	e6ab      	b.n	800683e <_AddFreeMemory+0x1a>
 8006ae6:	270f      	movs	r7, #15
 8006ae8:	e7ca      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006aea:	f04f 0e0f 	mov.w	lr, #15
 8006aee:	e793      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006af0:	f04f 0e0c 	mov.w	lr, #12
 8006af4:	e790      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006af6:	f04f 0e0d 	mov.w	lr, #13
 8006afa:	e78d      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006afc:	f04f 0e0e 	mov.w	lr, #14
 8006b00:	e78a      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b02:	270c      	movs	r7, #12
 8006b04:	e7bc      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b06:	270d      	movs	r7, #13
 8006b08:	e7ba      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b0a:	270e      	movs	r7, #14
 8006b0c:	e7b8      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b0e:	f04f 0e0b 	mov.w	lr, #11
 8006b12:	e781      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b14:	270b      	movs	r7, #11
 8006b16:	e7b3      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b18:	2707      	movs	r7, #7
 8006b1a:	e7b1      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b1c:	2708      	movs	r7, #8
 8006b1e:	e7af      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b20:	2709      	movs	r7, #9
 8006b22:	e7ad      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b24:	270a      	movs	r7, #10
 8006b26:	e7ab      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b28:	2001bc5c 	.word	0x2001bc5c
 8006b2c:	f04f 0e07 	mov.w	lr, #7
 8006b30:	e772      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b32:	f04f 0e08 	mov.w	lr, #8
 8006b36:	e76f      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b38:	f04f 0e09 	mov.w	lr, #9
 8006b3c:	e76c      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b3e:	f04f 0e0a 	mov.w	lr, #10
 8006b42:	e769      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b44:	f04f 0e03 	mov.w	lr, #3
 8006b48:	e766      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b4a:	f04f 0e04 	mov.w	lr, #4
 8006b4e:	e763      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b50:	f04f 0e05 	mov.w	lr, #5
 8006b54:	e760      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b56:	f04f 0e06 	mov.w	lr, #6
 8006b5a:	e75d      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b5c:	f04f 0e02 	mov.w	lr, #2
 8006b60:	e75a      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b62:	2702      	movs	r7, #2
 8006b64:	e78c      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b66:	2703      	movs	r7, #3
 8006b68:	e78a      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b6a:	2704      	movs	r7, #4
 8006b6c:	e788      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b6e:	2705      	movs	r7, #5
 8006b70:	e786      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b72:	2706      	movs	r7, #6
 8006b74:	e784      	b.n	8006a80 <_AddFreeMemory+0x25c>
 8006b76:	f04f 0e01 	mov.w	lr, #1
 8006b7a:	e74d      	b.n	8006a18 <_AddFreeMemory+0x1f4>
 8006b7c:	2701      	movs	r7, #1
 8006b7e:	e77f      	b.n	8006a80 <_AddFreeMemory+0x25c>

08006b80 <_RemoveHoles>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d2c <_RemoveHoles+0x1ac>
 8006b88:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8006b8c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8006b90:	e893 0060 	ldmia.w	r3, {r5, r6}
 8006b94:	3f01      	subs	r7, #1
 8006b96:	b083      	sub	sp, #12
 8006b98:	4683      	mov	fp, r0
 8006b9a:	441f      	add	r7, r3
 8006b9c:	46c1      	mov	r9, r8
 8006b9e:	b135      	cbz	r5, 8006bae <_RemoveHoles+0x2e>
 8006ba0:	4433      	add	r3, r6
 8006ba2:	429f      	cmp	r7, r3
 8006ba4:	d906      	bls.n	8006bb4 <_RemoveHoles+0x34>
 8006ba6:	e893 0060 	ldmia.w	r3, {r5, r6}
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	d1f8      	bne.n	8006ba0 <_RemoveHoles+0x20>
 8006bae:	1999      	adds	r1, r3, r6
 8006bb0:	428f      	cmp	r7, r1
 8006bb2:	d803      	bhi.n	8006bbc <_RemoveHoles+0x3c>
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	599d      	ldr	r5, [r3, r6]
 8006bbe:	684c      	ldr	r4, [r1, #4]
 8006bc0:	b155      	cbz	r5, 8006bd8 <_RemoveHoles+0x58>
 8006bc2:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8006bc6:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 8006bca:	2801      	cmp	r0, #1
 8006bcc:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8006bd0:	d005      	beq.n	8006bde <_RemoveHoles+0x5e>
 8006bd2:	4626      	mov	r6, r4
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	e7e2      	b.n	8006b9e <_RemoveHoles+0x1e>
 8006bd8:	4626      	mov	r6, r4
 8006bda:	460b      	mov	r3, r1
 8006bdc:	e7e7      	b.n	8006bae <_RemoveHoles+0x2e>
 8006bde:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 8006be2:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 8006be6:	42b0      	cmp	r0, r6
 8006be8:	d976      	bls.n	8006cd8 <_RemoveHoles+0x158>
 8006bea:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 8006bee:	42b0      	cmp	r0, r6
 8006bf0:	d975      	bls.n	8006cde <_RemoveHoles+0x15e>
 8006bf2:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 8006bf6:	42b0      	cmp	r0, r6
 8006bf8:	d974      	bls.n	8006ce4 <_RemoveHoles+0x164>
 8006bfa:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8006bfe:	42b0      	cmp	r0, r6
 8006c00:	d973      	bls.n	8006cea <_RemoveHoles+0x16a>
 8006c02:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 8006c06:	4286      	cmp	r6, r0
 8006c08:	d278      	bcs.n	8006cfc <_RemoveHoles+0x17c>
 8006c0a:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 8006c0e:	4286      	cmp	r6, r0
 8006c10:	d277      	bcs.n	8006d02 <_RemoveHoles+0x182>
 8006c12:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 8006c16:	4286      	cmp	r6, r0
 8006c18:	d26a      	bcs.n	8006cf0 <_RemoveHoles+0x170>
 8006c1a:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 8006c1e:	4286      	cmp	r6, r0
 8006c20:	d269      	bcs.n	8006cf6 <_RemoveHoles+0x176>
 8006c22:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 8006c26:	4286      	cmp	r6, r0
 8006c28:	d274      	bcs.n	8006d14 <_RemoveHoles+0x194>
 8006c2a:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 8006c2e:	4286      	cmp	r6, r0
 8006c30:	d273      	bcs.n	8006d1a <_RemoveHoles+0x19a>
 8006c32:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 8006c36:	4286      	cmp	r6, r0
 8006c38:	d272      	bcs.n	8006d20 <_RemoveHoles+0x1a0>
 8006c3a:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8006c3e:	4286      	cmp	r6, r0
 8006c40:	d262      	bcs.n	8006d08 <_RemoveHoles+0x188>
 8006c42:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8006c46:	4286      	cmp	r6, r0
 8006c48:	d261      	bcs.n	8006d0e <_RemoveHoles+0x18e>
 8006c4a:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8006c4e:	4286      	cmp	r6, r0
 8006c50:	d269      	bcs.n	8006d26 <_RemoveHoles+0x1a6>
 8006c52:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 8006c56:	4286      	cmp	r6, r0
 8006c58:	d21f      	bcs.n	8006c9a <_RemoveHoles+0x11a>
 8006c5a:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8006c5e:	4286      	cmp	r6, r0
 8006c60:	d231      	bcs.n	8006cc6 <_RemoveHoles+0x146>
 8006c62:	6053      	str	r3, [r2, #4]
 8006c64:	4618      	mov	r0, r3
 8006c66:	4622      	mov	r2, r4
 8006c68:	f00a fb17 	bl	801129a <memmove>
 8006c6c:	4555      	cmp	r5, sl
 8006c6e:	4603      	mov	r3, r0
 8006c70:	d00b      	beq.n	8006c8a <_RemoveHoles+0x10a>
 8006c72:	441c      	add	r4, r3
 8006c74:	4630      	mov	r0, r6
 8006c76:	4621      	mov	r1, r4
 8006c78:	f7ff fdd4 	bl	8006824 <_AddFreeMemory>
 8006c7c:	f1bb 0f00 	cmp.w	fp, #0
 8006c80:	d001      	beq.n	8006c86 <_RemoveHoles+0x106>
 8006c82:	4558      	cmp	r0, fp
 8006c84:	d207      	bcs.n	8006c96 <_RemoveHoles+0x116>
 8006c86:	4623      	mov	r3, r4
 8006c88:	e78b      	b.n	8006ba2 <_RemoveHoles+0x22>
 8006c8a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8006c8e:	1b92      	subs	r2, r2, r6
 8006c90:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 8006c94:	e7ed      	b.n	8006c72 <_RemoveHoles+0xf2>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e78d      	b.n	8006bb6 <_RemoveHoles+0x36>
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	9001      	str	r0, [sp, #4]
 8006c9e:	f8d8 0000 	ldr.w	r0, [r8]
 8006ca2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8006ca6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006caa:	1b80      	subs	r0, r0, r6
 8006cac:	f8c8 0000 	str.w	r0, [r8]
 8006cb0:	f1be 0f00 	cmp.w	lr, #0
 8006cb4:	d001      	beq.n	8006cba <_RemoveHoles+0x13a>
 8006cb6:	f8ce c004 	str.w	ip, [lr, #4]
 8006cba:	f1bc 0f00 	cmp.w	ip, #0
 8006cbe:	d005      	beq.n	8006ccc <_RemoveHoles+0x14c>
 8006cc0:	f8cc e000 	str.w	lr, [ip]
 8006cc4:	e7cd      	b.n	8006c62 <_RemoveHoles+0xe2>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	9001      	str	r0, [sp, #4]
 8006cca:	e7e8      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006ccc:	9801      	ldr	r0, [sp, #4]
 8006cce:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8006cd2:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 8006cd6:	e7c4      	b.n	8006c62 <_RemoveHoles+0xe2>
 8006cd8:	200f      	movs	r0, #15
 8006cda:	9001      	str	r0, [sp, #4]
 8006cdc:	e7df      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006cde:	200e      	movs	r0, #14
 8006ce0:	9001      	str	r0, [sp, #4]
 8006ce2:	e7dc      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006ce4:	200d      	movs	r0, #13
 8006ce6:	9001      	str	r0, [sp, #4]
 8006ce8:	e7d9      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006cea:	200c      	movs	r0, #12
 8006cec:	9001      	str	r0, [sp, #4]
 8006cee:	e7d6      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006cf0:	2009      	movs	r0, #9
 8006cf2:	9001      	str	r0, [sp, #4]
 8006cf4:	e7d3      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006cf6:	2008      	movs	r0, #8
 8006cf8:	9001      	str	r0, [sp, #4]
 8006cfa:	e7d0      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006cfc:	200b      	movs	r0, #11
 8006cfe:	9001      	str	r0, [sp, #4]
 8006d00:	e7cd      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d02:	200a      	movs	r0, #10
 8006d04:	9001      	str	r0, [sp, #4]
 8006d06:	e7ca      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d08:	2004      	movs	r0, #4
 8006d0a:	9001      	str	r0, [sp, #4]
 8006d0c:	e7c7      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d0e:	2003      	movs	r0, #3
 8006d10:	9001      	str	r0, [sp, #4]
 8006d12:	e7c4      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d14:	2007      	movs	r0, #7
 8006d16:	9001      	str	r0, [sp, #4]
 8006d18:	e7c1      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d1a:	2006      	movs	r0, #6
 8006d1c:	9001      	str	r0, [sp, #4]
 8006d1e:	e7be      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d20:	2005      	movs	r0, #5
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	e7bb      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d26:	2002      	movs	r0, #2
 8006d28:	9001      	str	r0, [sp, #4]
 8006d2a:	e7b8      	b.n	8006c9e <_RemoveHoles+0x11e>
 8006d2c:	2001bc5c 	.word	0x2001bc5c

08006d30 <_Alloc>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	4cc0      	ldr	r4, [pc, #768]	; (8007038 <_Alloc+0x308>)
 8006d36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80f8 	beq.w	8006f32 <_Alloc+0x202>
 8006d42:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	4285      	cmp	r5, r0
 8006d48:	bf24      	itt	cs
 8006d4a:	1ce8      	addcs	r0, r5, #3
 8006d4c:	f020 0003 	biccs.w	r0, r0, #3
 8006d50:	f100 060c 	add.w	r6, r0, #12
 8006d54:	42b3      	cmp	r3, r6
 8006d56:	4db8      	ldr	r5, [pc, #736]	; (8007038 <_Alloc+0x308>)
 8006d58:	d202      	bcs.n	8006d60 <_Alloc+0x30>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	686b      	ldr	r3, [r5, #4]
 8006d62:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006d64:	4293      	cmp	r3, r2
 8006d66:	f240 8154 	bls.w	8007012 <_Alloc+0x2e2>
 8006d6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006d6e:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	eb02 0108 	add.w	r1, r2, r8
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	684b      	ldr	r3, [r1, #4]
 8006d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	d0e8      	beq.n	8006d5a <_Alloc+0x2a>
 8006d88:	4fab      	ldr	r7, [pc, #684]	; (8007038 <_Alloc+0x308>)
 8006d8a:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 8006d8e:	4576      	cmp	r6, lr
 8006d90:	f080 8121 	bcs.w	8006fd6 <_Alloc+0x2a6>
 8006d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d98:	429e      	cmp	r6, r3
 8006d9a:	f080 811e 	bcs.w	8006fda <_Alloc+0x2aa>
 8006d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006da2:	429e      	cmp	r6, r3
 8006da4:	f080 811b 	bcs.w	8006fde <_Alloc+0x2ae>
 8006da8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dac:	429e      	cmp	r6, r3
 8006dae:	f080 811a 	bcs.w	8006fe6 <_Alloc+0x2b6>
 8006db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db6:	429e      	cmp	r6, r3
 8006db8:	f080 8113 	bcs.w	8006fe2 <_Alloc+0x2b2>
 8006dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dc0:	429e      	cmp	r6, r3
 8006dc2:	f080 8114 	bcs.w	8006fee <_Alloc+0x2be>
 8006dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dca:	429e      	cmp	r6, r3
 8006dcc:	f080 810d 	bcs.w	8006fea <_Alloc+0x2ba>
 8006dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dd4:	429e      	cmp	r6, r3
 8006dd6:	f080 810e 	bcs.w	8006ff6 <_Alloc+0x2c6>
 8006dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ddc:	429e      	cmp	r6, r3
 8006dde:	f080 8108 	bcs.w	8006ff2 <_Alloc+0x2c2>
 8006de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de4:	429e      	cmp	r6, r3
 8006de6:	f080 810a 	bcs.w	8006ffe <_Alloc+0x2ce>
 8006dea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006dec:	429e      	cmp	r6, r3
 8006dee:	f080 8104 	bcs.w	8006ffa <_Alloc+0x2ca>
 8006df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df4:	429e      	cmp	r6, r3
 8006df6:	f080 8104 	bcs.w	8007002 <_Alloc+0x2d2>
 8006dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfc:	429e      	cmp	r6, r3
 8006dfe:	f080 8102 	bcs.w	8007006 <_Alloc+0x2d6>
 8006e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e04:	429e      	cmp	r6, r3
 8006e06:	f080 8102 	bcs.w	800700e <_Alloc+0x2de>
 8006e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0c:	429e      	cmp	r6, r3
 8006e0e:	f080 80fc 	bcs.w	800700a <_Alloc+0x2da>
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	429e      	cmp	r6, r3
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e1a:	bf28      	it	cs
 8006e1c:	2300      	movcs	r3, #0
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d812      	bhi.n	8006e48 <_Alloc+0x118>
 8006e22:	2100      	movs	r1, #0
 8006e24:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8006e28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006e2a:	b92b      	cbnz	r3, 8006e38 <_Alloc+0x108>
 8006e2c:	e007      	b.n	8006e3e <_Alloc+0x10e>
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	4296      	cmp	r6, r2
 8006e32:	d91d      	bls.n	8006e70 <_Alloc+0x140>
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	b113      	cbz	r3, 8006e3e <_Alloc+0x10e>
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f7      	bne.n	8006e2e <_Alloc+0xfe>
 8006e3e:	3101      	adds	r1, #1
 8006e40:	2910      	cmp	r1, #16
 8006e42:	f100 0008 	add.w	r0, r0, #8
 8006e46:	d1ef      	bne.n	8006e28 <_Alloc+0xf8>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff fe99 	bl	8006b80 <_RemoveHoles>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d09b      	beq.n	8006d8a <_Alloc+0x5a>
 8006e52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e58:	4490      	add	r8, r2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	6063      	str	r3, [r4, #4]
 8006e60:	f8c8 1004 	str.w	r1, [r8, #4]
 8006e64:	f802 6035 	strb.w	r6, [r2, r5, lsl #3]
 8006e68:	4630      	mov	r0, r6
 8006e6a:	6265      	str	r5, [r4, #36]	; 0x24
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e72:	1b97      	subs	r7, r2, r6
 8006e74:	f101 000c 	add.w	r0, r1, #12
 8006e78:	4287      	cmp	r7, r0
 8006e7a:	bf2c      	ite	cs
 8006e7c:	4630      	movcs	r0, r6
 8006e7e:	4610      	movcc	r0, r2
 8006e80:	4596      	cmp	lr, r2
 8006e82:	f240 80f5 	bls.w	8007070 <_Alloc+0x340>
 8006e86:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 8006e8a:	4e6b      	ldr	r6, [pc, #428]	; (8007038 <_Alloc+0x308>)
 8006e8c:	42ba      	cmp	r2, r7
 8006e8e:	f080 80f1 	bcs.w	8007074 <_Alloc+0x344>
 8006e92:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 8006e96:	42ba      	cmp	r2, r7
 8006e98:	f080 80e8 	bcs.w	800706c <_Alloc+0x33c>
 8006e9c:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8006ea0:	42ba      	cmp	r2, r7
 8006ea2:	f080 80cd 	bcs.w	8007040 <_Alloc+0x310>
 8006ea6:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 8006eaa:	42ba      	cmp	r2, r7
 8006eac:	f080 80d8 	bcs.w	8007060 <_Alloc+0x330>
 8006eb0:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8006eb4:	4297      	cmp	r7, r2
 8006eb6:	f240 80df 	bls.w	8007078 <_Alloc+0x348>
 8006eba:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8006ebe:	4297      	cmp	r7, r2
 8006ec0:	f240 80de 	bls.w	8007080 <_Alloc+0x350>
 8006ec4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8006ec8:	4297      	cmp	r7, r2
 8006eca:	f240 80d7 	bls.w	800707c <_Alloc+0x34c>
 8006ece:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8006ed0:	4297      	cmp	r7, r2
 8006ed2:	f240 80e5 	bls.w	80070a0 <_Alloc+0x370>
 8006ed6:	6f36      	ldr	r6, [r6, #112]	; 0x70
 8006ed8:	4296      	cmp	r6, r2
 8006eda:	f240 80df 	bls.w	800709c <_Alloc+0x36c>
 8006ede:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 8006ee0:	4f55      	ldr	r7, [pc, #340]	; (8007038 <_Alloc+0x308>)
 8006ee2:	4296      	cmp	r6, r2
 8006ee4:	f240 80d8 	bls.w	8007098 <_Alloc+0x368>
 8006ee8:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8006eea:	4296      	cmp	r6, r2
 8006eec:	f240 80d2 	bls.w	8007094 <_Alloc+0x364>
 8006ef0:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8006ef2:	42b2      	cmp	r2, r6
 8006ef4:	f080 80cc 	bcs.w	8007090 <_Alloc+0x360>
 8006ef8:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8006efa:	4296      	cmp	r6, r2
 8006efc:	f240 80c6 	bls.w	800708c <_Alloc+0x35c>
 8006f00:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8006f02:	42b2      	cmp	r2, r6
 8006f04:	f080 80c0 	bcs.w	8007088 <_Alloc+0x358>
 8006f08:	4291      	cmp	r1, r2
 8006f0a:	f240 80bb 	bls.w	8007084 <_Alloc+0x354>
 8006f0e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8006f10:	1819      	adds	r1, r3, r0
 8006f12:	44a0      	add	r8, r4
 8006f14:	4290      	cmp	r0, r2
 8006f16:	f04f 0400 	mov.w	r4, #0
 8006f1a:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f1e:	601d      	str	r5, [r3, #0]
 8006f20:	6058      	str	r0, [r3, #4]
 8006f22:	611b      	str	r3, [r3, #16]
 8006f24:	609c      	str	r4, [r3, #8]
 8006f26:	f841 0c04 	str.w	r0, [r1, #-4]
 8006f2a:	db7e      	blt.n	800702a <_Alloc+0x2fa>
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f32:	4b42      	ldr	r3, [pc, #264]	; (800703c <_Alloc+0x30c>)
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	6858      	ldr	r0, [r3, #4]
 8006f38:	2101      	movs	r1, #1
 8006f3a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8006f3e:	b90a      	cbnz	r2, 8006f44 <_Alloc+0x214>
 8006f40:	0882      	lsrs	r2, r0, #2
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	265a      	movs	r6, #90	; 0x5a
 8006f46:	6226      	str	r6, [r4, #32]
 8006f48:	2710      	movs	r7, #16
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	2640      	movs	r6, #64	; 0x40
 8006f4e:	6819      	ldr	r1, [r3, #0]
 8006f50:	6427      	str	r7, [r4, #64]	; 0x40
 8006f52:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f54:	6526      	str	r6, [r4, #80]	; 0x50
 8006f56:	2780      	movs	r7, #128	; 0x80
 8006f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f5c:	f44f 7600 	mov.w	r6, #512	; 0x200
 8006f60:	65a7      	str	r7, [r4, #88]	; 0x58
 8006f62:	6622      	str	r2, [r4, #96]	; 0x60
 8006f64:	66a6      	str	r6, [r4, #104]	; 0x68
 8006f66:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8006f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f6e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006f72:	f1a1 0314 	sub.w	r3, r1, #20
 8006f76:	6727      	str	r7, [r4, #112]	; 0x70
 8006f78:	67a2      	str	r2, [r4, #120]	; 0x78
 8006f7a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8006f7e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8006f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f86:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006f8a:	4403      	add	r3, r0
 8006f8c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
 8006f90:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006f94:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8006f98:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8006f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fa0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8006fa4:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
 8006fa8:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 8006fac:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	2601      	movs	r6, #1
 8006fb4:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8006fb8:	63a1      	str	r1, [r4, #56]	; 0x38
 8006fba:	6363      	str	r3, [r4, #52]	; 0x34
 8006fbc:	6122      	str	r2, [r4, #16]
 8006fbe:	60e0      	str	r0, [r4, #12]
 8006fc0:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 8006fc4:	605e      	str	r6, [r3, #4]
 8006fc6:	6266      	str	r6, [r4, #36]	; 0x24
 8006fc8:	6066      	str	r6, [r4, #4]
 8006fca:	f7ff fc2b 	bl	8006824 <_AddFreeMemory>
 8006fce:	f000 f869 	bl	80070a4 <_EnlargeBlocks>
 8006fd2:	6326      	str	r6, [r4, #48]	; 0x30
 8006fd4:	e6b5      	b.n	8006d42 <_Alloc+0x12>
 8006fd6:	210f      	movs	r1, #15
 8006fd8:	e724      	b.n	8006e24 <_Alloc+0xf4>
 8006fda:	210e      	movs	r1, #14
 8006fdc:	e722      	b.n	8006e24 <_Alloc+0xf4>
 8006fde:	210d      	movs	r1, #13
 8006fe0:	e720      	b.n	8006e24 <_Alloc+0xf4>
 8006fe2:	210b      	movs	r1, #11
 8006fe4:	e71e      	b.n	8006e24 <_Alloc+0xf4>
 8006fe6:	210c      	movs	r1, #12
 8006fe8:	e71c      	b.n	8006e24 <_Alloc+0xf4>
 8006fea:	2109      	movs	r1, #9
 8006fec:	e71a      	b.n	8006e24 <_Alloc+0xf4>
 8006fee:	210a      	movs	r1, #10
 8006ff0:	e718      	b.n	8006e24 <_Alloc+0xf4>
 8006ff2:	2107      	movs	r1, #7
 8006ff4:	e716      	b.n	8006e24 <_Alloc+0xf4>
 8006ff6:	2108      	movs	r1, #8
 8006ff8:	e714      	b.n	8006e24 <_Alloc+0xf4>
 8006ffa:	2105      	movs	r1, #5
 8006ffc:	e712      	b.n	8006e24 <_Alloc+0xf4>
 8006ffe:	2106      	movs	r1, #6
 8007000:	e710      	b.n	8006e24 <_Alloc+0xf4>
 8007002:	2104      	movs	r1, #4
 8007004:	e70e      	b.n	8006e24 <_Alloc+0xf4>
 8007006:	2103      	movs	r1, #3
 8007008:	e70c      	b.n	8006e24 <_Alloc+0xf4>
 800700a:	2101      	movs	r1, #1
 800700c:	e70a      	b.n	8006e24 <_Alloc+0xf4>
 800700e:	2102      	movs	r1, #2
 8007010:	e708      	b.n	8006e24 <_Alloc+0xf4>
 8007012:	3a01      	subs	r2, #1
 8007014:	632a      	str	r2, [r5, #48]	; 0x30
 8007016:	f000 f845 	bl	80070a4 <_EnlargeBlocks>
 800701a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800701c:	3301      	adds	r3, #1
 800701e:	632b      	str	r3, [r5, #48]	; 0x30
 8007020:	2800      	cmp	r0, #0
 8007022:	f47f ae9a 	bne.w	8006d5a <_Alloc+0x2a>
 8007026:	686b      	ldr	r3, [r5, #4]
 8007028:	e69f      	b.n	8006d6a <_Alloc+0x3a>
 800702a:	1a10      	subs	r0, r2, r0
 800702c:	f7ff fbfa 	bl	8006824 <_AddFreeMemory>
 8007030:	4628      	mov	r0, r5
 8007032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007036:	bf00      	nop
 8007038:	2001bc5c 	.word	0x2001bc5c
 800703c:	200000a0 	.word	0x200000a0
 8007040:	210c      	movs	r1, #12
 8007042:	6826      	ldr	r6, [r4, #0]
 8007044:	689f      	ldr	r7, [r3, #8]
 8007046:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800704a:	1ab6      	subs	r6, r6, r2
 800704c:	6026      	str	r6, [r4, #0]
 800704e:	b10f      	cbz	r7, 8007054 <_Alloc+0x324>
 8007050:	f8c7 e004 	str.w	lr, [r7, #4]
 8007054:	f1be 0f00 	cmp.w	lr, #0
 8007058:	d004      	beq.n	8007064 <_Alloc+0x334>
 800705a:	f8ce 7000 	str.w	r7, [lr]
 800705e:	e756      	b.n	8006f0e <_Alloc+0x1de>
 8007060:	210b      	movs	r1, #11
 8007062:	e7ee      	b.n	8007042 <_Alloc+0x312>
 8007064:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007068:	644f      	str	r7, [r1, #68]	; 0x44
 800706a:	e750      	b.n	8006f0e <_Alloc+0x1de>
 800706c:	210d      	movs	r1, #13
 800706e:	e7e8      	b.n	8007042 <_Alloc+0x312>
 8007070:	210f      	movs	r1, #15
 8007072:	e7e6      	b.n	8007042 <_Alloc+0x312>
 8007074:	210e      	movs	r1, #14
 8007076:	e7e4      	b.n	8007042 <_Alloc+0x312>
 8007078:	210a      	movs	r1, #10
 800707a:	e7e2      	b.n	8007042 <_Alloc+0x312>
 800707c:	2108      	movs	r1, #8
 800707e:	e7e0      	b.n	8007042 <_Alloc+0x312>
 8007080:	2109      	movs	r1, #9
 8007082:	e7de      	b.n	8007042 <_Alloc+0x312>
 8007084:	2100      	movs	r1, #0
 8007086:	e7dc      	b.n	8007042 <_Alloc+0x312>
 8007088:	2101      	movs	r1, #1
 800708a:	e7da      	b.n	8007042 <_Alloc+0x312>
 800708c:	2102      	movs	r1, #2
 800708e:	e7d8      	b.n	8007042 <_Alloc+0x312>
 8007090:	2103      	movs	r1, #3
 8007092:	e7d6      	b.n	8007042 <_Alloc+0x312>
 8007094:	2104      	movs	r1, #4
 8007096:	e7d4      	b.n	8007042 <_Alloc+0x312>
 8007098:	2105      	movs	r1, #5
 800709a:	e7d2      	b.n	8007042 <_Alloc+0x312>
 800709c:	2106      	movs	r1, #6
 800709e:	e7d0      	b.n	8007042 <_Alloc+0x312>
 80070a0:	2107      	movs	r1, #7
 80070a2:	e7ce      	b.n	8007042 <_Alloc+0x312>

080070a4 <_EnlargeBlocks>:
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a8:	4c2f      	ldr	r4, [pc, #188]	; (8007168 <_EnlargeBlocks+0xc4>)
 80070aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070ac:	b973      	cbnz	r3, 80070cc <_EnlargeBlocks+0x28>
 80070ae:	4b2f      	ldr	r3, [pc, #188]	; (800716c <_EnlargeBlocks+0xc8>)
 80070b0:	689d      	ldr	r5, [r3, #8]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	3508      	adds	r5, #8
 80070b6:	fbb3 f5f5 	udiv	r5, r3, r5
 80070ba:	3502      	adds	r5, #2
 80070bc:	00e8      	lsls	r0, r5, #3
 80070be:	f7ff fe37 	bl	8006d30 <_Alloc>
 80070c2:	4607      	mov	r7, r0
 80070c4:	b960      	cbnz	r0, 80070e0 <_EnlargeBlocks+0x3c>
 80070c6:	2001      	movs	r0, #1
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	1d1d      	adds	r5, r3, #4
 80070d0:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80070d4:	00e8      	lsls	r0, r5, #3
 80070d6:	f7ff fe2b 	bl	8006d30 <_Alloc>
 80070da:	4607      	mov	r7, r0
 80070dc:	2800      	cmp	r0, #0
 80070de:	d0f2      	beq.n	80070c6 <_EnlargeBlocks+0x22>
 80070e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e2:	6922      	ldr	r2, [r4, #16]
 80070e4:	4b22      	ldr	r3, [pc, #136]	; (8007170 <_EnlargeBlocks+0xcc>)
 80070e6:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80070f0:	00d2      	lsls	r2, r2, #3
 80070f2:	6846      	ldr	r6, [r0, #4]
 80070f4:	3608      	adds	r6, #8
 80070f6:	4630      	mov	r0, r6
 80070f8:	4798      	blx	r3
 80070fa:	6920      	ldr	r0, [r4, #16]
 80070fc:	6366      	str	r6, [r4, #52]	; 0x34
 80070fe:	1e69      	subs	r1, r5, #1
 8007100:	4288      	cmp	r0, r1
 8007102:	62e7      	str	r7, [r4, #44]	; 0x2c
 8007104:	d22e      	bcs.n	8007164 <_EnlargeBlocks+0xc0>
 8007106:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 800710a:	4603      	mov	r3, r0
 800710c:	3301      	adds	r3, #1
 800710e:	428b      	cmp	r3, r1
 8007110:	6053      	str	r3, [r2, #4]
 8007112:	f102 0208 	add.w	r2, r2, #8
 8007116:	d1f9      	bne.n	800710c <_EnlargeBlocks+0x68>
 8007118:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800711c:	2700      	movs	r7, #0
 800711e:	604f      	str	r7, [r1, #4]
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	6260      	str	r0, [r4, #36]	; 0x24
 8007124:	1a1b      	subs	r3, r3, r0
 8007126:	442b      	add	r3, r5
 8007128:	6125      	str	r5, [r4, #16]
 800712a:	6063      	str	r3, [r4, #4]
 800712c:	4c0e      	ldr	r4, [pc, #56]	; (8007168 <_EnlargeBlocks+0xc4>)
 800712e:	f1b8 0f00 	cmp.w	r8, #0
 8007132:	d014      	beq.n	800715e <_EnlargeBlocks+0xba>
 8007134:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 8007138:	442e      	add	r6, r5
 800713a:	6871      	ldr	r1, [r6, #4]
 800713c:	6848      	ldr	r0, [r1, #4]
 800713e:	f7ff fb71 	bl	8006824 <_AddFreeMemory>
 8007142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007148:	440d      	add	r5, r1
 800714a:	3301      	adds	r3, #1
 800714c:	6063      	str	r3, [r4, #4]
 800714e:	606a      	str	r2, [r5, #4]
 8007150:	f801 7038 	strb.w	r7, [r1, r8, lsl #3]
 8007154:	4638      	mov	r0, r7
 8007156:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 800715a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715e:	4640      	mov	r0, r8
 8007160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007164:	4601      	mov	r1, r0
 8007166:	e7d7      	b.n	8007118 <_EnlargeBlocks+0x74>
 8007168:	2001bc5c 	.word	0x2001bc5c
 800716c:	200000a0 	.word	0x200000a0
 8007170:	20000030 	.word	0x20000030

08007174 <GUI_ALLOC_FreeFixedBlock>:
 8007174:	b128      	cbz	r0, 8007182 <GUI_ALLOC_FreeFixedBlock+0xe>
 8007176:	4a03      	ldr	r2, [pc, #12]	; (8007184 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8007178:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800717a:	6003      	str	r3, [r0, #0]
 800717c:	b103      	cbz	r3, 8007180 <GUI_ALLOC_FreeFixedBlock+0xc>
 800717e:	6058      	str	r0, [r3, #4]
 8007180:	63d0      	str	r0, [r2, #60]	; 0x3c
 8007182:	4770      	bx	lr
 8007184:	2001bc5c 	.word	0x2001bc5c

08007188 <GUI_ALLOC_GetFixedBlock>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	4e89      	ldr	r6, [pc, #548]	; (80073b0 <GUI_ALLOC_GetFixedBlock+0x228>)
 800718c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8007190:	4604      	mov	r4, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d02f      	beq.n	80071f6 <GUI_ALLOC_GetFixedBlock+0x6e>
 8007196:	3403      	adds	r4, #3
 8007198:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800719a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800719c:	f024 0403 	bic.w	r4, r4, #3
 80071a0:	3404      	adds	r4, #4
 80071a2:	42a5      	cmp	r5, r4
 80071a4:	bf38      	it	cc
 80071a6:	4625      	movcc	r5, r4
 80071a8:	b162      	cbz	r2, 80071c4 <GUI_ALLOC_GetFixedBlock+0x3c>
 80071aa:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80071ae:	429d      	cmp	r5, r3
 80071b0:	4614      	mov	r4, r2
 80071b2:	d104      	bne.n	80071be <GUI_ALLOC_GetFixedBlock+0x36>
 80071b4:	e014      	b.n	80071e0 <GUI_ALLOC_GetFixedBlock+0x58>
 80071b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80071ba:	429d      	cmp	r5, r3
 80071bc:	d010      	beq.n	80071e0 <GUI_ALLOC_GetFixedBlock+0x58>
 80071be:	6824      	ldr	r4, [r4, #0]
 80071c0:	2c00      	cmp	r4, #0
 80071c2:	d1f8      	bne.n	80071b6 <GUI_ALLOC_GetFixedBlock+0x2e>
 80071c4:	68f3      	ldr	r3, [r6, #12]
 80071c6:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 80071c8:	441c      	add	r4, r3
 80071ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80071ce:	1a61      	subs	r1, r4, r1
 80071d0:	680b      	ldr	r3, [r1, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d165      	bne.n	80072a2 <GUI_ALLOC_GetFixedBlock+0x11a>
 80071d6:	684b      	ldr	r3, [r1, #4]
 80071d8:	429d      	cmp	r5, r3
 80071da:	dd6c      	ble.n	80072b6 <GUI_ALLOC_GetFixedBlock+0x12e>
 80071dc:	2400      	movs	r4, #0
 80071de:	e008      	b.n	80071f2 <GUI_ALLOC_GetFixedBlock+0x6a>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	b10b      	cbz	r3, 80071e8 <GUI_ALLOC_GetFixedBlock+0x60>
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	6059      	str	r1, [r3, #4]
 80071e8:	6861      	ldr	r1, [r4, #4]
 80071ea:	b101      	cbz	r1, 80071ee <GUI_ALLOC_GetFixedBlock+0x66>
 80071ec:	600b      	str	r3, [r1, #0]
 80071ee:	42a2      	cmp	r2, r4
 80071f0:	d053      	beq.n	800729a <GUI_ALLOC_GetFixedBlock+0x112>
 80071f2:	4620      	mov	r0, r4
 80071f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f6:	4b6f      	ldr	r3, [pc, #444]	; (80073b4 <GUI_ALLOC_GetFixedBlock+0x22c>)
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	6858      	ldr	r0, [r3, #4]
 80071fc:	2101      	movs	r1, #1
 80071fe:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 8007202:	b90a      	cbnz	r2, 8007208 <GUI_ALLOC_GetFixedBlock+0x80>
 8007204:	0882      	lsrs	r2, r0, #2
 8007206:	609a      	str	r2, [r3, #8]
 8007208:	255a      	movs	r5, #90	; 0x5a
 800720a:	6235      	str	r5, [r6, #32]
 800720c:	2710      	movs	r7, #16
 800720e:	2220      	movs	r2, #32
 8007210:	2540      	movs	r5, #64	; 0x40
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	6437      	str	r7, [r6, #64]	; 0x40
 8007216:	64b2      	str	r2, [r6, #72]	; 0x48
 8007218:	6535      	str	r5, [r6, #80]	; 0x50
 800721a:	2780      	movs	r7, #128	; 0x80
 800721c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007220:	f44f 7500 	mov.w	r5, #512	; 0x200
 8007224:	65b7      	str	r7, [r6, #88]	; 0x58
 8007226:	6632      	str	r2, [r6, #96]	; 0x60
 8007228:	66b5      	str	r5, [r6, #104]	; 0x68
 800722a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800722e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007232:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8007236:	f1a1 0314 	sub.w	r3, r1, #20
 800723a:	6737      	str	r7, [r6, #112]	; 0x70
 800723c:	67b2      	str	r2, [r6, #120]	; 0x78
 800723e:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
 8007242:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800724a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800724e:	4403      	add	r3, r0
 8007250:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
 8007254:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8007258:	f8c6 5098 	str.w	r5, [r6, #152]	; 0x98
 800725c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8007260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007264:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8007268:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
 800726c:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 8007270:	f8c6 50b0 	str.w	r5, [r6, #176]	; 0xb0
 8007274:	2202      	movs	r2, #2
 8007276:	2501      	movs	r5, #1
 8007278:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800727c:	63b1      	str	r1, [r6, #56]	; 0x38
 800727e:	6373      	str	r3, [r6, #52]	; 0x34
 8007280:	6132      	str	r2, [r6, #16]
 8007282:	60f0      	str	r0, [r6, #12]
 8007284:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 8007288:	605d      	str	r5, [r3, #4]
 800728a:	6275      	str	r5, [r6, #36]	; 0x24
 800728c:	6075      	str	r5, [r6, #4]
 800728e:	f7ff fac9 	bl	8006824 <_AddFreeMemory>
 8007292:	f7ff ff07 	bl	80070a4 <_EnlargeBlocks>
 8007296:	6335      	str	r5, [r6, #48]	; 0x30
 8007298:	e77d      	b.n	8007196 <GUI_ALLOC_GetFixedBlock+0xe>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	63f3      	str	r3, [r6, #60]	; 0x3c
 800729e:	4620      	mov	r0, r4
 80072a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a2:	2000      	movs	r0, #0
 80072a4:	f7ff fc6c 	bl	8006b80 <_RemoveHoles>
 80072a8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80072ac:	1a61      	subs	r1, r4, r1
 80072ae:	680b      	ldr	r3, [r1, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d193      	bne.n	80071dc <GUI_ALLOC_GetFixedBlock+0x54>
 80072b4:	e78f      	b.n	80071d6 <GUI_ALLOC_GetFixedBlock+0x4e>
 80072b6:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <GUI_ALLOC_GetFixedBlock+0x228>)
 80072bc:	1b58      	subs	r0, r3, r5
 80072be:	1d04      	adds	r4, r0, #4
 80072c0:	42bb      	cmp	r3, r7
 80072c2:	440c      	add	r4, r1
 80072c4:	d272      	bcs.n	80073ac <GUI_ALLOC_GetFixedBlock+0x224>
 80072c6:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 80072ca:	42bb      	cmp	r3, r7
 80072cc:	d26c      	bcs.n	80073a8 <GUI_ALLOC_GetFixedBlock+0x220>
 80072ce:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 80072d2:	42bb      	cmp	r3, r7
 80072d4:	d266      	bcs.n	80073a4 <GUI_ALLOC_GetFixedBlock+0x21c>
 80072d6:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 80072da:	42bb      	cmp	r3, r7
 80072dc:	d260      	bcs.n	80073a0 <GUI_ALLOC_GetFixedBlock+0x218>
 80072de:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 80072e2:	429f      	cmp	r7, r3
 80072e4:	d95a      	bls.n	800739c <GUI_ALLOC_GetFixedBlock+0x214>
 80072e6:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 80072ea:	42bb      	cmp	r3, r7
 80072ec:	d254      	bcs.n	8007398 <GUI_ALLOC_GetFixedBlock+0x210>
 80072ee:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 80072f2:	42bb      	cmp	r3, r7
 80072f4:	d24e      	bcs.n	8007394 <GUI_ALLOC_GetFixedBlock+0x20c>
 80072f6:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 80072fa:	42bb      	cmp	r3, r7
 80072fc:	d248      	bcs.n	8007390 <GUI_ALLOC_GetFixedBlock+0x208>
 80072fe:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007300:	4293      	cmp	r3, r2
 8007302:	d243      	bcs.n	800738c <GUI_ALLOC_GetFixedBlock+0x204>
 8007304:	6f37      	ldr	r7, [r6, #112]	; 0x70
 8007306:	4a2a      	ldr	r2, [pc, #168]	; (80073b0 <GUI_ALLOC_GetFixedBlock+0x228>)
 8007308:	42bb      	cmp	r3, r7
 800730a:	d23d      	bcs.n	8007388 <GUI_ALLOC_GetFixedBlock+0x200>
 800730c:	6e97      	ldr	r7, [r2, #104]	; 0x68
 800730e:	42bb      	cmp	r3, r7
 8007310:	d238      	bcs.n	8007384 <GUI_ALLOC_GetFixedBlock+0x1fc>
 8007312:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8007314:	42bb      	cmp	r3, r7
 8007316:	d233      	bcs.n	8007380 <GUI_ALLOC_GetFixedBlock+0x1f8>
 8007318:	6d97      	ldr	r7, [r2, #88]	; 0x58
 800731a:	42bb      	cmp	r3, r7
 800731c:	d22e      	bcs.n	800737c <GUI_ALLOC_GetFixedBlock+0x1f4>
 800731e:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8007320:	42bb      	cmp	r3, r7
 8007322:	d229      	bcs.n	8007378 <GUI_ALLOC_GetFixedBlock+0x1f0>
 8007324:	6c97      	ldr	r7, [r2, #72]	; 0x48
 8007326:	42bb      	cmp	r3, r7
 8007328:	d224      	bcs.n	8007374 <GUI_ALLOC_GetFixedBlock+0x1ec>
 800732a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800732c:	4293      	cmp	r3, r2
 800732e:	d20c      	bcs.n	800734a <GUI_ALLOC_GetFixedBlock+0x1c2>
 8007330:	68f2      	ldr	r2, [r6, #12]
 8007332:	6973      	ldr	r3, [r6, #20]
 8007334:	1b52      	subs	r2, r2, r5
 8007336:	442b      	add	r3, r5
 8007338:	60f2      	str	r2, [r6, #12]
 800733a:	6173      	str	r3, [r6, #20]
 800733c:	b910      	cbnz	r0, 8007344 <GUI_ALLOC_GetFixedBlock+0x1bc>
 800733e:	f844 5c04 	str.w	r5, [r4, #-4]
 8007342:	e756      	b.n	80071f2 <GUI_ALLOC_GetFixedBlock+0x6a>
 8007344:	f7ff fa6e 	bl	8006824 <_AddFreeMemory>
 8007348:	e7f9      	b.n	800733e <GUI_ALLOC_GetFixedBlock+0x1b6>
 800734a:	2200      	movs	r2, #0
 800734c:	6837      	ldr	r7, [r6, #0]
 800734e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8007352:	1afb      	subs	r3, r7, r3
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	68cb      	ldr	r3, [r1, #12]
 8007358:	f1be 0f00 	cmp.w	lr, #0
 800735c:	d001      	beq.n	8007362 <GUI_ALLOC_GetFixedBlock+0x1da>
 800735e:	f8ce 3004 	str.w	r3, [lr, #4]
 8007362:	b113      	cbz	r3, 800736a <GUI_ALLOC_GetFixedBlock+0x1e2>
 8007364:	f8c3 e000 	str.w	lr, [r3]
 8007368:	e7e2      	b.n	8007330 <GUI_ALLOC_GetFixedBlock+0x1a8>
 800736a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800736e:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 8007372:	e7dd      	b.n	8007330 <GUI_ALLOC_GetFixedBlock+0x1a8>
 8007374:	2201      	movs	r2, #1
 8007376:	e7e9      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007378:	2202      	movs	r2, #2
 800737a:	e7e7      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 800737c:	2203      	movs	r2, #3
 800737e:	e7e5      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007380:	2204      	movs	r2, #4
 8007382:	e7e3      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007384:	2205      	movs	r2, #5
 8007386:	e7e1      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007388:	2206      	movs	r2, #6
 800738a:	e7df      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 800738c:	2207      	movs	r2, #7
 800738e:	e7dd      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007390:	2208      	movs	r2, #8
 8007392:	e7db      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007394:	2209      	movs	r2, #9
 8007396:	e7d9      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 8007398:	220a      	movs	r2, #10
 800739a:	e7d7      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 800739c:	220b      	movs	r2, #11
 800739e:	e7d5      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 80073a0:	220c      	movs	r2, #12
 80073a2:	e7d3      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 80073a4:	220d      	movs	r2, #13
 80073a6:	e7d1      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 80073a8:	220e      	movs	r2, #14
 80073aa:	e7cf      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 80073ac:	220f      	movs	r2, #15
 80073ae:	e7cd      	b.n	800734c <GUI_ALLOC_GetFixedBlock+0x1c4>
 80073b0:	2001bc5c 	.word	0x2001bc5c
 80073b4:	200000a0 	.word	0x200000a0

080073b8 <GUI_ALLOC_AllocNoInit>:
 80073b8:	b900      	cbnz	r0, 80073bc <GUI_ALLOC_AllocNoInit+0x4>
 80073ba:	4770      	bx	lr
 80073bc:	f7ff bcb8 	b.w	8006d30 <_Alloc>

080073c0 <GUI_ALLOC_h2p>:
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <GUI_ALLOC_h2p+0x10>)
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80073c8:	6840      	ldr	r0, [r0, #4]
 80073ca:	3008      	adds	r0, #8
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	2001bc5c 	.word	0x2001bc5c

080073d4 <GUI_ALLOC_LockH>:
 80073d4:	4a07      	ldr	r2, [pc, #28]	; (80073f4 <GUI_ALLOC_LockH+0x20>)
 80073d6:	69d1      	ldr	r1, [r2, #28]
 80073d8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80073da:	3101      	adds	r1, #1
 80073dc:	61d1      	str	r1, [r2, #28]
 80073de:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 80073e2:	3201      	adds	r2, #1
 80073e4:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 80073e8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80073ec:	6858      	ldr	r0, [r3, #4]
 80073ee:	3008      	adds	r0, #8
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	2001bc5c 	.word	0x2001bc5c

080073f8 <GUI_ALLOC_UnlockH>:
 80073f8:	b430      	push	{r4, r5}
 80073fa:	6803      	ldr	r3, [r0, #0]
 80073fc:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <GUI_ALLOC_UnlockH+0x30>)
 80073fe:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8007402:	4604      	mov	r4, r0
 8007404:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8007406:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d903      	bls.n	8007416 <GUI_ALLOC_UnlockH+0x1e>
 800740e:	69d1      	ldr	r1, [r2, #28]
 8007410:	b109      	cbz	r1, 8007416 <GUI_ALLOC_UnlockH+0x1e>
 8007412:	3901      	subs	r1, #1
 8007414:	61d1      	str	r1, [r2, #28]
 8007416:	3b01      	subs	r3, #1
 8007418:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 800741c:	2200      	movs	r2, #0
 800741e:	4610      	mov	r0, r2
 8007420:	6022      	str	r2, [r4, #0]
 8007422:	bc30      	pop	{r4, r5}
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	2001bc5c 	.word	0x2001bc5c

0800742c <GUI_ALLOC_RequestSize>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	4c54      	ldr	r4, [pc, #336]	; (8007580 <GUI_ALLOC_RequestSize+0x154>)
 8007430:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007434:	2b00      	cmp	r3, #0
 8007436:	d051      	beq.n	80074dc <GUI_ALLOC_RequestSize+0xb0>
 8007438:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800743c:	4a50      	ldr	r2, [pc, #320]	; (8007580 <GUI_ALLOC_RequestSize+0x154>)
 800743e:	bb83      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007440:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8007444:	bb6b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007446:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 800744a:	bb53      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800744c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8007450:	bb3b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007452:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007456:	bb23      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007458:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800745c:	bb0b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800745e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007462:	b9f3      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007464:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8007468:	b9db      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800746a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800746c:	b9cb      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800746e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007470:	b9bb      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007472:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007474:	b9ab      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007476:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007478:	b99b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800747a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800747c:	b98b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800747e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007480:	b97b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007482:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007484:	b96b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 8007486:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007488:	b95b      	cbnz	r3, 80074a2 <GUI_ALLOC_RequestSize+0x76>
 800748a:	f06f 030b 	mvn.w	r3, #11
 800748e:	493d      	ldr	r1, [pc, #244]	; (8007584 <GUI_ALLOC_RequestSize+0x158>)
 8007490:	17da      	asrs	r2, r3, #31
 8007492:	fb81 1303 	smull	r1, r3, r1, r3
 8007496:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 800749a:	6a20      	ldr	r0, [r4, #32]
 800749c:	fb00 f003 	mul.w	r0, r0, r3
 80074a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0f8      	beq.n	800749a <GUI_ALLOC_RequestSize+0x6e>
 80074a8:	2200      	movs	r2, #0
 80074aa:	e001      	b.n	80074b0 <GUI_ALLOC_RequestSize+0x84>
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	b143      	cbz	r3, 80074c2 <GUI_ALLOC_RequestSize+0x96>
 80074b0:	6859      	ldr	r1, [r3, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	4291      	cmp	r1, r2
 80074b6:	4610      	mov	r0, r2
 80074b8:	bf84      	itt	hi
 80074ba:	460a      	movhi	r2, r1
 80074bc:	4610      	movhi	r0, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f4      	bne.n	80074ac <GUI_ALLOC_RequestSize+0x80>
 80074c2:	380c      	subs	r0, #12
 80074c4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80074c8:	4603      	mov	r3, r0
 80074ca:	d8e0      	bhi.n	800748e <GUI_ALLOC_RequestSize+0x62>
 80074cc:	6a22      	ldr	r2, [r4, #32]
 80074ce:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <GUI_ALLOC_RequestSize+0x158>)
 80074d0:	fb02 f000 	mul.w	r0, r2, r0
 80074d4:	fba3 2300 	umull	r2, r3, r3, r0
 80074d8:	0958      	lsrs	r0, r3, #5
 80074da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074dc:	4b2a      	ldr	r3, [pc, #168]	; (8007588 <GUI_ALLOC_RequestSize+0x15c>)
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	6858      	ldr	r0, [r3, #4]
 80074e2:	2101      	movs	r1, #1
 80074e4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80074e8:	b90a      	cbnz	r2, 80074ee <GUI_ALLOC_RequestSize+0xc2>
 80074ea:	0882      	lsrs	r2, r0, #2
 80074ec:	609a      	str	r2, [r3, #8]
 80074ee:	6819      	ldr	r1, [r3, #0]
 80074f0:	63a1      	str	r1, [r4, #56]	; 0x38
 80074f2:	265a      	movs	r6, #90	; 0x5a
 80074f4:	2210      	movs	r2, #16
 80074f6:	2520      	movs	r5, #32
 80074f8:	6226      	str	r6, [r4, #32]
 80074fa:	6422      	str	r2, [r4, #64]	; 0x40
 80074fc:	64a5      	str	r5, [r4, #72]	; 0x48
 80074fe:	2740      	movs	r7, #64	; 0x40
 8007500:	2680      	movs	r6, #128	; 0x80
 8007502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007506:	f44f 7500 	mov.w	r5, #512	; 0x200
 800750a:	f1a1 0314 	sub.w	r3, r1, #20
 800750e:	6527      	str	r7, [r4, #80]	; 0x50
 8007510:	65a6      	str	r6, [r4, #88]	; 0x58
 8007512:	6622      	str	r2, [r4, #96]	; 0x60
 8007514:	66a5      	str	r5, [r4, #104]	; 0x68
 8007516:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800751a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800751e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007522:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8007526:	4403      	add	r3, r0
 8007528:	6727      	str	r7, [r4, #112]	; 0x70
 800752a:	67a6      	str	r6, [r4, #120]	; 0x78
 800752c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8007530:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8007534:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8007538:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800753c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007540:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8007544:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8007548:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 800754c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8007550:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8007554:	2202      	movs	r2, #2
 8007556:	2501      	movs	r5, #1
 8007558:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800755c:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8007560:	6363      	str	r3, [r4, #52]	; 0x34
 8007562:	6122      	str	r2, [r4, #16]
 8007564:	60e0      	str	r0, [r4, #12]
 8007566:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 800756a:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800756e:	605d      	str	r5, [r3, #4]
 8007570:	6265      	str	r5, [r4, #36]	; 0x24
 8007572:	6065      	str	r5, [r4, #4]
 8007574:	f7ff f956 	bl	8006824 <_AddFreeMemory>
 8007578:	f7ff fd94 	bl	80070a4 <_EnlargeBlocks>
 800757c:	6325      	str	r5, [r4, #48]	; 0x30
 800757e:	e75b      	b.n	8007438 <GUI_ALLOC_RequestSize+0xc>
 8007580:	2001bc5c 	.word	0x2001bc5c
 8007584:	51eb851f 	.word	0x51eb851f
 8007588:	200000a0 	.word	0x200000a0

0800758c <GUI_ALLOC_AssignMemory>:
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <GUI_ALLOC_AssignMemory+0xc>)
 800758e:	f021 0103 	bic.w	r1, r1, #3
 8007592:	e883 0003 	stmia.w	r3, {r0, r1}
 8007596:	4770      	bx	lr
 8007598:	200000a0 	.word	0x200000a0

0800759c <GUI_ALLOC_Free>:
 800759c:	b900      	cbnz	r0, 80075a0 <GUI_ALLOC_Free+0x4>
 800759e:	4770      	bx	lr
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4c0a      	ldr	r4, [pc, #40]	; (80075cc <GUI_ALLOC_Free+0x30>)
 80075a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075a6:	00c6      	lsls	r6, r0, #3
 80075a8:	4433      	add	r3, r6
 80075aa:	4605      	mov	r5, r0
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	6848      	ldr	r0, [r1, #4]
 80075b0:	f7ff f938 	bl	8006824 <_AddFreeMemory>
 80075b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80075b6:	6863      	ldr	r3, [r4, #4]
 80075b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80075ba:	4416      	add	r6, r2
 80075bc:	3301      	adds	r3, #1
 80075be:	2000      	movs	r0, #0
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	6071      	str	r1, [r6, #4]
 80075c4:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 80075c8:	6265      	str	r5, [r4, #36]	; 0x24
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	2001bc5c 	.word	0x2001bc5c

080075d0 <GUI_ALLOC_AllocZero>:
 80075d0:	b908      	cbnz	r0, 80075d6 <GUI_ALLOC_AllocZero+0x6>
 80075d2:	2000      	movs	r0, #0
 80075d4:	4770      	bx	lr
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	4606      	mov	r6, r0
 80075da:	f7ff fba9 	bl	8006d30 <_Alloc>
 80075de:	4604      	mov	r4, r0
 80075e0:	b338      	cbz	r0, 8007632 <GUI_ALLOC_AllocZero+0x62>
 80075e2:	4d15      	ldr	r5, [pc, #84]	; (8007638 <GUI_ALLOC_AllocZero+0x68>)
 80075e4:	4915      	ldr	r1, [pc, #84]	; (800763c <GUI_ALLOC_AllocZero+0x6c>)
 80075e6:	69ea      	ldr	r2, [r5, #28]
 80075e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80075ea:	3201      	adds	r2, #1
 80075ec:	61ea      	str	r2, [r5, #28]
 80075ee:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 80075f2:	3201      	adds	r2, #1
 80075f4:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 80075f8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80075fc:	4632      	mov	r2, r6
 80075fe:	685e      	ldr	r6, [r3, #4]
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	f106 0008 	add.w	r0, r6, #8
 8007606:	2100      	movs	r1, #0
 8007608:	4798      	blx	r3
 800760a:	6831      	ldr	r1, [r6, #0]
 800760c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800760e:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d901      	bls.n	800761a <GUI_ALLOC_AllocZero+0x4a>
 8007616:	69e8      	ldr	r0, [r5, #28]
 8007618:	b920      	cbnz	r0, 8007624 <GUI_ALLOC_AllocZero+0x54>
 800761a:	3b01      	subs	r3, #1
 800761c:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8007620:	4620      	mov	r0, r4
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	3801      	subs	r0, #1
 8007626:	3b01      	subs	r3, #1
 8007628:	61e8      	str	r0, [r5, #28]
 800762a:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 800762e:	4620      	mov	r0, r4
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	2000      	movs	r0, #0
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	bf00      	nop
 8007638:	2001bc5c 	.word	0x2001bc5c
 800763c:	20000034 	.word	0x20000034

08007640 <GUI_CalcColorDist>:
 8007640:	b2c3      	uxtb	r3, r0
 8007642:	b2ca      	uxtb	r2, r1
 8007644:	1a9a      	subs	r2, r3, r2
 8007646:	b292      	uxth	r2, r2
 8007648:	b430      	push	{r4, r5}
 800764a:	b215      	sxth	r5, r2
 800764c:	2d00      	cmp	r5, #0
 800764e:	bfbc      	itt	lt
 8007650:	4252      	neglt	r2, r2
 8007652:	b215      	sxthlt	r5, r2
 8007654:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007658:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	b29b      	uxth	r3, r3
 8007660:	0c09      	lsrs	r1, r1, #16
 8007662:	b21a      	sxth	r2, r3
 8007664:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8007668:	2a00      	cmp	r2, #0
 800766a:	b289      	uxth	r1, r1
 800766c:	b20c      	sxth	r4, r1
 800766e:	bfbc      	itt	lt
 8007670:	425b      	neglt	r3, r3
 8007672:	b21a      	sxthlt	r2, r3
 8007674:	2c00      	cmp	r4, #0
 8007676:	bfbc      	itt	lt
 8007678:	4249      	neglt	r1, r1
 800767a:	b20c      	sxthlt	r4, r1
 800767c:	fb02 f202 	mul.w	r2, r2, r2
 8007680:	fb05 2005 	mla	r0, r5, r5, r2
 8007684:	b2a1      	uxth	r1, r4
 8007686:	fb01 0001 	mla	r0, r1, r1, r0
 800768a:	bc30      	pop	{r4, r5}
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop

08007690 <GUI_GetBkColor>:
 8007690:	b508      	push	{r3, lr}
 8007692:	f001 fd89 	bl	80091a8 <LCD_GetBkColorIndex>
 8007696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800769a:	f001 bcab 	b.w	8008ff4 <LCD_Index2Color>
 800769e:	bf00      	nop

080076a0 <GUI_GetColor>:
 80076a0:	b508      	push	{r3, lr}
 80076a2:	f001 fd89 	bl	80091b8 <LCD_GetColorIndex>
 80076a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80076aa:	f001 bca3 	b.w	8008ff4 <LCD_Index2Color>
 80076ae:	bf00      	nop

080076b0 <GUI_GetDrawMode>:
 80076b0:	4b01      	ldr	r3, [pc, #4]	; (80076b8 <GUI_GetDrawMode+0x8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	7c18      	ldrb	r0, [r3, #16]
 80076b6:	4770      	bx	lr
 80076b8:	20000018 	.word	0x20000018

080076bc <GUI_GetOrg>:
 80076bc:	4a04      	ldr	r2, [pc, #16]	; (80076d0 <GUI_GetOrg+0x14>)
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <GUI_GetOrg+0x18>)
 80076c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80076c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c8:	6002      	str	r2, [r0, #0]
 80076ca:	600b      	str	r3, [r1, #0]
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	2001bd44 	.word	0x2001bd44
 80076d4:	2001bd34 	.word	0x2001bd34

080076d8 <GUI_GetVersionString>:
 80076d8:	4804      	ldr	r0, [pc, #16]	; (80076ec <GUI_GetVersionString+0x14>)
 80076da:	2334      	movs	r3, #52	; 0x34
 80076dc:	2135      	movs	r1, #53	; 0x35
 80076de:	2261      	movs	r2, #97	; 0x61
 80076e0:	7001      	strb	r1, [r0, #0]
 80076e2:	7102      	strb	r2, [r0, #4]
 80076e4:	7083      	strb	r3, [r0, #2]
 80076e6:	70c3      	strb	r3, [r0, #3]
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000000 	.word	0x20000000

080076f0 <GUI_MergeRect>:
 80076f0:	b320      	cbz	r0, 800773c <GUI_MergeRect+0x4c>
 80076f2:	b321      	cbz	r1, 800773e <GUI_MergeRect+0x4e>
 80076f4:	b322      	cbz	r2, 8007740 <GUI_MergeRect+0x50>
 80076f6:	f9b2 c000 	ldrsh.w	ip, [r2]
 80076fa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80076fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007700:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007704:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8007708:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800770c:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8007710:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8007714:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8007718:	4565      	cmp	r5, ip
 800771a:	bfa8      	it	ge
 800771c:	4665      	movge	r5, ip
 800771e:	45a6      	cmp	lr, r4
 8007720:	4671      	mov	r1, lr
 8007722:	bfa8      	it	ge
 8007724:	4621      	movge	r1, r4
 8007726:	42ba      	cmp	r2, r7
 8007728:	bfb8      	it	lt
 800772a:	463a      	movlt	r2, r7
 800772c:	42b3      	cmp	r3, r6
 800772e:	bfb8      	it	lt
 8007730:	4633      	movlt	r3, r6
 8007732:	8005      	strh	r5, [r0, #0]
 8007734:	8041      	strh	r1, [r0, #2]
 8007736:	8082      	strh	r2, [r0, #4]
 8007738:	80c3      	strh	r3, [r0, #6]
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773c:	4770      	bx	lr
 800773e:	4611      	mov	r1, r2
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	684a      	ldr	r2, [r1, #4]
 8007744:	6042      	str	r2, [r0, #4]
 8007746:	6003      	str	r3, [r0, #0]
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <GUI_MoveRect>:
 800774c:	b178      	cbz	r0, 800776e <GUI_MoveRect+0x22>
 800774e:	b470      	push	{r4, r5, r6}
 8007750:	8806      	ldrh	r6, [r0, #0]
 8007752:	8844      	ldrh	r4, [r0, #2]
 8007754:	8885      	ldrh	r5, [r0, #4]
 8007756:	88c3      	ldrh	r3, [r0, #6]
 8007758:	b289      	uxth	r1, r1
 800775a:	b292      	uxth	r2, r2
 800775c:	440e      	add	r6, r1
 800775e:	4414      	add	r4, r2
 8007760:	4429      	add	r1, r5
 8007762:	8006      	strh	r6, [r0, #0]
 8007764:	8044      	strh	r4, [r0, #2]
 8007766:	bc70      	pop	{r4, r5, r6}
 8007768:	441a      	add	r2, r3
 800776a:	8081      	strh	r1, [r0, #4]
 800776c:	80c2      	strh	r2, [r0, #6]
 800776e:	4770      	bx	lr

08007770 <GUI_Exec>:
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	4f12      	ldr	r7, [pc, #72]	; (80077c0 <GUI_Exec+0x50>)
 8007776:	4e13      	ldr	r6, [pc, #76]	; (80077c4 <GUI_Exec+0x54>)
 8007778:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80077c8 <GUI_Exec+0x58>
 800777c:	2500      	movs	r5, #0
 800777e:	683c      	ldr	r4, [r7, #0]
 8007780:	b11c      	cbz	r4, 800778a <GUI_Exec+0x1a>
 8007782:	47a0      	blx	r4
 8007784:	1c04      	adds	r4, r0, #0
 8007786:	bf18      	it	ne
 8007788:	2401      	movne	r4, #1
 800778a:	f006 fea3 	bl	800e4d4 <WM_Exec>
 800778e:	6833      	ldr	r3, [r6, #0]
 8007790:	2800      	cmp	r0, #0
 8007792:	bf18      	it	ne
 8007794:	2401      	movne	r4, #1
 8007796:	b14b      	cbz	r3, 80077ac <GUI_Exec+0x3c>
 8007798:	4798      	blx	r3
 800779a:	b138      	cbz	r0, 80077ac <GUI_Exec+0x3c>
 800779c:	f8d8 3000 	ldr.w	r3, [r8]
 80077a0:	b113      	cbz	r3, 80077a8 <GUI_Exec+0x38>
 80077a2:	2401      	movs	r4, #1
 80077a4:	4798      	blx	r3
 80077a6:	b13c      	cbz	r4, 80077b8 <GUI_Exec+0x48>
 80077a8:	2501      	movs	r5, #1
 80077aa:	e7e8      	b.n	800777e <GUI_Exec+0xe>
 80077ac:	f8d8 3000 	ldr.w	r3, [r8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f7      	bne.n	80077a4 <GUI_Exec+0x34>
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d1f7      	bne.n	80077a8 <GUI_Exec+0x38>
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077be:	bf00      	nop
 80077c0:	2001bd40 	.word	0x2001bd40
 80077c4:	2001bd68 	.word	0x2001bd68
 80077c8:	2001bd60 	.word	0x2001bd60

080077cc <GUI_GotoXY>:
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <GUI_GotoXY+0xc>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	8458      	strh	r0, [r3, #34]	; 0x22
 80077d2:	8499      	strh	r1, [r3, #36]	; 0x24
 80077d4:	2000      	movs	r0, #0
 80077d6:	4770      	bx	lr
 80077d8:	20000018 	.word	0x20000018

080077dc <GUI_RectsIntersect>:
 80077dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80077e0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	dc14      	bgt.n	8007812 <GUI_RectsIntersect+0x36>
 80077e8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80077ec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	dc0e      	bgt.n	8007812 <GUI_RectsIntersect+0x36>
 80077f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80077f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	dc08      	bgt.n	8007812 <GUI_RectsIntersect+0x36>
 8007800:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007804:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007808:	4283      	cmp	r3, r0
 800780a:	bfcc      	ite	gt
 800780c:	2000      	movgt	r0, #0
 800780e:	2001      	movle	r0, #1
 8007810:	4770      	bx	lr
 8007812:	2000      	movs	r0, #0
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <GUI_SaveContext_W>:
 8007818:	b508      	push	{r3, lr}
 800781a:	4b03      	ldr	r3, [pc, #12]	; (8007828 <GUI_SaveContext_W+0x10>)
 800781c:	2274      	movs	r2, #116	; 0x74
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	f009 fd30 	bl	8011284 <memcpy>
 8007824:	bd08      	pop	{r3, pc}
 8007826:	bf00      	nop
 8007828:	20000018 	.word	0x20000018

0800782c <GUI_RestoreContext>:
 800782c:	b508      	push	{r3, lr}
 800782e:	4b03      	ldr	r3, [pc, #12]	; (800783c <GUI_RestoreContext+0x10>)
 8007830:	4601      	mov	r1, r0
 8007832:	2274      	movs	r2, #116	; 0x74
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f009 fd25 	bl	8011284 <memcpy>
 800783a:	bd08      	pop	{r3, pc}
 800783c:	20000018 	.word	0x20000018

08007840 <GUI_SelectLCD>:
 8007840:	b508      	push	{r3, lr}
 8007842:	f001 ff89 	bl	8009758 <LCD_SelectLCD>
 8007846:	f002 f843 	bl	80098d0 <LCD_UpdateColorIndices>
 800784a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800784e:	f006 bf83 	b.w	800e758 <WM_Activate>
 8007852:	bf00      	nop

08007854 <GUI_SetBkColor>:
 8007854:	f001 bbf4 	b.w	8009040 <LCD_SetBkColor>

08007858 <GUI_SetColor>:
 8007858:	f001 bbf8 	b.w	800904c <LCD_SetColor>

0800785c <GL_SetDefault>:
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <GL_SetDefault+0x34>)
 800785e:	b510      	push	{r4, lr}
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	4c0c      	ldr	r4, [pc, #48]	; (8007894 <GL_SetDefault+0x38>)
 8007864:	f001 fbec 	bl	8009040 <LCD_SetBkColor>
 8007868:	4b0b      	ldr	r3, [pc, #44]	; (8007898 <GL_SetDefault+0x3c>)
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	f001 fbee 	bl	800904c <LCD_SetColor>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	2201      	movs	r2, #1
 8007874:	2000      	movs	r0, #0
 8007876:	761a      	strb	r2, [r3, #24]
 8007878:	8598      	strh	r0, [r3, #44]	; 0x2c
 800787a:	8558      	strh	r0, [r3, #42]	; 0x2a
 800787c:	f000 ffec 	bl	8008858 <LCD_SetDrawMode>
 8007880:	4a06      	ldr	r2, [pc, #24]	; (800789c <GL_SetDefault+0x40>)
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	b102      	cbz	r2, 800788a <GL_SetDefault+0x2e>
 8007888:	61da      	str	r2, [r3, #28]
 800788a:	2200      	movs	r2, #0
 800788c:	769a      	strb	r2, [r3, #26]
 800788e:	bd10      	pop	{r4, pc}
 8007890:	20000014 	.word	0x20000014
 8007894:	20000018 	.word	0x20000018
 8007898:	20000010 	.word	0x20000010
 800789c:	2000000c 	.word	0x2000000c

080078a0 <GUI_SetDrawMode>:
 80078a0:	f000 bfda 	b.w	8008858 <LCD_SetDrawMode>

080078a4 <GUI_SetFont>:
 80078a4:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <GUI_SetFont+0x10>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4602      	mov	r2, r0
 80078aa:	69d8      	ldr	r0, [r3, #28]
 80078ac:	b102      	cbz	r2, 80078b0 <GUI_SetFont+0xc>
 80078ae:	61da      	str	r2, [r3, #28]
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000018 	.word	0x20000018

080078b8 <GUI_SetOrg>:
 80078b8:	b470      	push	{r4, r5, r6}
 80078ba:	4a09      	ldr	r2, [pc, #36]	; (80078e0 <GUI_SetOrg+0x28>)
 80078bc:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <GUI_SetOrg+0x2c>)
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	4e09      	ldr	r6, [pc, #36]	; (80078e8 <GUI_SetOrg+0x30>)
 80078c2:	7c52      	ldrb	r2, [r2, #17]
 80078c4:	4d09      	ldr	r5, [pc, #36]	; (80078ec <GUI_SetOrg+0x34>)
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	8030      	strh	r0, [r6, #0]
 80078cc:	68dc      	ldr	r4, [r3, #12]
 80078ce:	6a24      	ldr	r4, [r4, #32]
 80078d0:	460a      	mov	r2, r1
 80078d2:	802a      	strh	r2, [r5, #0]
 80078d4:	4601      	mov	r1, r0
 80078d6:	4618      	mov	r0, r3
 80078d8:	4623      	mov	r3, r4
 80078da:	bc70      	pop	{r4, r5, r6}
 80078dc:	4718      	bx	r3
 80078de:	bf00      	nop
 80078e0:	20000018 	.word	0x20000018
 80078e4:	2001bd6c 	.word	0x2001bd6c
 80078e8:	2001bd44 	.word	0x2001bd44
 80078ec:	2001bd34 	.word	0x2001bd34

080078f0 <_InitContext>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d19      	ldr	r5, [pc, #100]	; (8007958 <_InitContext+0x68>)
 80078f4:	4e19      	ldr	r6, [pc, #100]	; (800795c <_InitContext+0x6c>)
 80078f6:	692b      	ldr	r3, [r5, #16]
 80078f8:	4a19      	ldr	r2, [pc, #100]	; (8007960 <_InitContext+0x70>)
 80078fa:	4604      	mov	r4, r0
 80078fc:	f103 0108 	add.w	r1, r3, #8
 8007900:	1d18      	adds	r0, r3, #4
 8007902:	6726      	str	r6, [r4, #112]	; 0x70
 8007904:	63d8      	str	r0, [r3, #60]	; 0x3c
 8007906:	639b      	str	r3, [r3, #56]	; 0x38
 8007908:	641b      	str	r3, [r3, #64]	; 0x40
 800790a:	6161      	str	r1, [r4, #20]
 800790c:	7c5b      	ldrb	r3, [r3, #17]
 800790e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007912:	68c3      	ldr	r3, [r0, #12]
 8007914:	f104 0108 	add.w	r1, r4, #8
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	4798      	blx	r3
 800791c:	692b      	ldr	r3, [r5, #16]
 800791e:	4a11      	ldr	r2, [pc, #68]	; (8007964 <_InitContext+0x74>)
 8007920:	6869      	ldr	r1, [r5, #4]
 8007922:	6662      	str	r2, [r4, #100]	; 0x64
 8007924:	3308      	adds	r3, #8
 8007926:	2201      	movs	r2, #1
 8007928:	61e1      	str	r1, [r4, #28]
 800792a:	6163      	str	r3, [r4, #20]
 800792c:	7622      	strb	r2, [r4, #24]
 800792e:	76e2      	strb	r2, [r4, #27]
 8007930:	f007 f87a 	bl	800ea28 <WM_GetDesktopWindow>
 8007934:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007938:	2203      	movs	r2, #3
 800793a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 800793e:	6323      	str	r3, [r4, #48]	; 0x30
 8007940:	6363      	str	r3, [r4, #52]	; 0x34
 8007942:	64a0      	str	r0, [r4, #72]	; 0x48
 8007944:	68e8      	ldr	r0, [r5, #12]
 8007946:	f001 fb7b 	bl	8009040 <LCD_SetBkColor>
 800794a:	68a8      	ldr	r0, [r5, #8]
 800794c:	f001 fb7e 	bl	800904c <LCD_SetColor>
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <_InitContext+0x78>)
 8007952:	4a06      	ldr	r2, [pc, #24]	; (800796c <_InitContext+0x7c>)
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	20000008 	.word	0x20000008
 800795c:	20000134 	.word	0x20000134
 8007960:	2001bd6c 	.word	0x2001bd6c
 8007964:	08011474 	.word	0x08011474
 8007968:	2001bd64 	.word	0x2001bd64
 800796c:	0801148c 	.word	0x0801148c

08007970 <_OnExit>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0a      	ldr	r5, [pc, #40]	; (800799c <_OnExit+0x2c>)
 8007974:	4e0a      	ldr	r6, [pc, #40]	; (80079a0 <_OnExit+0x30>)
 8007976:	2400      	movs	r4, #0
 8007978:	4621      	mov	r1, r4
 800797a:	6833      	ldr	r3, [r6, #0]
 800797c:	67ec      	str	r4, [r5, #124]	; 0x7c
 800797e:	2274      	movs	r2, #116	; 0x74
 8007980:	4628      	mov	r0, r5
 8007982:	4798      	blx	r3
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	4807      	ldr	r0, [pc, #28]	; (80079a4 <_OnExit+0x34>)
 8007988:	4621      	mov	r1, r4
 800798a:	2208      	movs	r2, #8
 800798c:	4798      	blx	r3
 800798e:	4a06      	ldr	r2, [pc, #24]	; (80079a8 <_OnExit+0x38>)
 8007990:	4906      	ldr	r1, [pc, #24]	; (80079ac <_OnExit+0x3c>)
 8007992:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <_OnExit+0x40>)
 8007994:	7014      	strb	r4, [r2, #0]
 8007996:	610d      	str	r5, [r1, #16]
 8007998:	601c      	str	r4, [r3, #0]
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	200000b4 	.word	0x200000b4
 80079a0:	20000034 	.word	0x20000034
 80079a4:	2001bd6c 	.word	0x2001bd6c
 80079a8:	2001bd54 	.word	0x2001bd54
 80079ac:	20000008 	.word	0x20000008
 80079b0:	2001bd30 	.word	0x2001bd30

080079b4 <GUI_Clear>:
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	2100      	movs	r1, #0
 80079ba:	b082      	sub	sp, #8
 80079bc:	4608      	mov	r0, r1
 80079be:	f7ff ff05 	bl	80077cc <GUI_GotoXY>
 80079c2:	2004      	movs	r0, #4
 80079c4:	f000 ff48 	bl	8008858 <LCD_SetDrawMode>
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <GUI_Clear+0x70>)
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80079ce:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80079d0:	f5a5 577f 	sub.w	r7, r5, #16320	; 0x3fc0
 80079d4:	f5a4 567f 	sub.w	r6, r4, #16320	; 0x3fc0
 80079d8:	f505 557f 	add.w	r5, r5, #16320	; 0x3fc0
 80079dc:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 80079e0:	4680      	mov	r8, r0
 80079e2:	3f3f      	subs	r7, #63	; 0x3f
 80079e4:	353f      	adds	r5, #63	; 0x3f
 80079e6:	3e3f      	subs	r6, #63	; 0x3f
 80079e8:	343f      	adds	r4, #63	; 0x3f
 80079ea:	4668      	mov	r0, sp
 80079ec:	f8ad 7000 	strh.w	r7, [sp]
 80079f0:	f8ad 5004 	strh.w	r5, [sp, #4]
 80079f4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80079f8:	f8ad 4006 	strh.w	r4, [sp, #6]
 80079fc:	f006 fc42 	bl	800e284 <WM__InitIVRSearch>
 8007a00:	b148      	cbz	r0, 8007a16 <GUI_Clear+0x62>
 8007a02:	4623      	mov	r3, r4
 8007a04:	462a      	mov	r2, r5
 8007a06:	4631      	mov	r1, r6
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f000 ff8b 	bl	8008924 <LCD_FillRect>
 8007a0e:	f006 fb13 	bl	800e038 <WM__GetNextIVR>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d1f5      	bne.n	8007a02 <GUI_Clear+0x4e>
 8007a16:	4640      	mov	r0, r8
 8007a18:	f000 ff1e 	bl	8008858 <LCD_SetDrawMode>
 8007a1c:	b002      	add	sp, #8
 8007a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a22:	bf00      	nop
 8007a24:	20000008 	.word	0x20000008

08007a28 <GUI__Config>:
 8007a28:	b530      	push	{r4, r5, lr}
 8007a2a:	4d1a      	ldr	r5, [pc, #104]	; (8007a94 <GUI__Config+0x6c>)
 8007a2c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007a2e:	b085      	sub	sp, #20
 8007a30:	b10b      	cbz	r3, 8007a36 <GUI__Config+0xe>
 8007a32:	b005      	add	sp, #20
 8007a34:	bd30      	pop	{r4, r5, pc}
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <GUI__Config+0x70>)
 8007a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a3a:	466c      	mov	r4, sp
 8007a3c:	c407      	stmia	r4!, {r0, r1, r2}
 8007a3e:	a904      	add	r1, sp, #16
 8007a40:	f824 3b02 	strh.w	r3, [r4], #2
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	7023      	strb	r3, [r4, #0]
 8007a48:	f811 2d10 	ldrb.w	r2, [r1, #-16]!
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	67eb      	str	r3, [r5, #124]	; 0x7c
 8007a50:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8007a54:	f804 2b01 	strb.w	r2, [r4], #1
 8007a58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	d1f9      	bne.n	8007a54 <GUI__Config+0x2c>
 8007a60:	f7ff fe3a 	bl	80076d8 <GUI_GetVersionString>
 8007a64:	4623      	mov	r3, r4
 8007a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	f803 2b01 	strb.w	r2, [r3], #1
 8007a70:	7802      	ldrb	r2, [r0, #0]
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d1f7      	bne.n	8007a66 <GUI__Config+0x3e>
 8007a76:	704a      	strb	r2, [r1, #1]
 8007a78:	f7fc f88a 	bl	8003b90 <GUI_X_Config>
 8007a7c:	f7fd f91c 	bl	8004cb8 <LCD_X_Config>
 8007a80:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <GUI__Config+0x74>)
 8007a82:	4807      	ldr	r0, [pc, #28]	; (8007aa0 <GUI__Config+0x78>)
 8007a84:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8007a88:	b005      	add	sp, #20
 8007a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a8e:	f000 b885 	b.w	8007b9c <GUI__RegisterExit>
 8007a92:	bf00      	nop
 8007a94:	200000b4 	.word	0x200000b4
 8007a98:	0801147c 	.word	0x0801147c
 8007a9c:	08007971 	.word	0x08007971
 8007aa0:	20000148 	.word	0x20000148

08007aa4 <GUI_Init>:
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4a33      	ldr	r2, [pc, #204]	; (8007b78 <GUI_Init+0xd4>)
 8007aac:	4b32      	ldr	r3, [pc, #200]	; (8007b78 <GUI_Init+0xd4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f023 0301 	bic.w	r3, r3, #1
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	4b31      	ldr	r3, [pc, #196]	; (8007b7c <GUI_Init+0xd8>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	bf00      	nop
 8007abe:	4b2f      	ldr	r3, [pc, #188]	; (8007b7c <GUI_Init+0xd8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1fb      	bne.n	8007abe <GUI_Init+0x1a>
 8007ac6:	4b2e      	ldr	r3, [pc, #184]	; (8007b80 <GUI_Init+0xdc>)
 8007ac8:	4a2e      	ldr	r2, [pc, #184]	; (8007b84 <GUI_Init+0xe0>)
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	4b2c      	ldr	r3, [pc, #176]	; (8007b80 <GUI_Init+0xdc>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a2d      	ldr	r2, [pc, #180]	; (8007b88 <GUI_Init+0xe4>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d000      	beq.n	8007ad8 <GUI_Init+0x34>
 8007ad6:	e7fe      	b.n	8007ad6 <GUI_Init+0x32>
 8007ad8:	f7ff ffa6 	bl	8007a28 <GUI__Config>
 8007adc:	4b2b      	ldr	r3, [pc, #172]	; (8007b8c <GUI_Init+0xe8>)
 8007ade:	222e      	movs	r2, #46	; 0x2e
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	f7fc f84d 	bl	8003b80 <GUI_X_Init>
 8007ae6:	482a      	ldr	r0, [pc, #168]	; (8007b90 <GUI_Init+0xec>)
 8007ae8:	f7ff ff02 	bl	80078f0 <_InitContext>
 8007aec:	f001 f9ec 	bl	8008ec8 <emWin_LCD_Init>
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	f001 fcb9 	bl	8009468 <LCD_GetXSizeDisplay>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bf0c      	ite	eq
 8007afc:	2301      	moveq	r3, #1
 8007afe:	2300      	movne	r3, #0
 8007b00:	b2dc      	uxtb	r4, r3
 8007b02:	f001 fcb7 	bl	8009474 <LCD_GetYSizeDisplay>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4323      	orrs	r3, r4
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <GUI_Init+0x8a>
 8007b1a:	f001 fc51 	bl	80093c0 <LCD_GetXSizeMax>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	f001 fc68 	bl	80093f4 <LCD_GetYSizeMax>
 8007b24:	4603      	mov	r3, r0
 8007b26:	4619      	mov	r1, r3
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 fc97 	bl	800945c <LCD_SetDisplaySize>
 8007b2e:	2100      	movs	r1, #0
 8007b30:	2000      	movs	r0, #0
 8007b32:	f7ff fec1 	bl	80078b8 <GUI_SetOrg>
 8007b36:	f006 fe51 	bl	800e7dc <WM_Init>
 8007b3a:	4b16      	ldr	r3, [pc, #88]	; (8007b94 <GUI_Init+0xf0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d012      	beq.n	8007b68 <GUI_Init+0xc4>
 8007b42:	e00d      	b.n	8007b60 <GUI_Init+0xbc>
 8007b44:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <GUI_Init+0xf0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <GUI_Init+0xb2>
 8007b4e:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <GUI_Init+0xf0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4798      	blx	r3
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <GUI_Init+0xf0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	4a0d      	ldr	r2, [pc, #52]	; (8007b94 <GUI_Init+0xf0>)
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <GUI_Init+0xf0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1ed      	bne.n	8007b44 <GUI_Init+0xa0>
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <GUI_Init+0xf4>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd90      	pop	{r4, r7, pc}
 8007b78:	e0002000 	.word	0xe0002000
 8007b7c:	40023008 	.word	0x40023008
 8007b80:	40023000 	.word	0x40023000
 8007b84:	f407a5c2 	.word	0xf407a5c2
 8007b88:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b8c:	2001bd24 	.word	0x2001bd24
 8007b90:	200000b4 	.word	0x200000b4
 8007b94:	2000012c 	.word	0x2000012c
 8007b98:	2001bd4c 	.word	0x2001bd4c

08007b9c <GUI__RegisterExit>:
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <GUI__RegisterExit+0x24>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
 8007bac:	4a04      	ldr	r2, [pc, #16]	; (8007bc0 <GUI__RegisterExit+0x24>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000128 	.word	0x20000128

08007bc4 <GUI_DEVICE__GetpDriver>:
 8007bc4:	2801      	cmp	r0, #1
 8007bc6:	dc0e      	bgt.n	8007be6 <GUI_DEVICE__GetpDriver+0x22>
 8007bc8:	4b08      	ldr	r3, [pc, #32]	; (8007bec <GUI_DEVICE__GetpDriver+0x28>)
 8007bca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007bce:	b158      	cbz	r0, 8007be8 <GUI_DEVICE__GetpDriver+0x24>
 8007bd0:	68c3      	ldr	r3, [r0, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b91b      	cbnz	r3, 8007bde <GUI_DEVICE__GetpDriver+0x1a>
 8007bd6:	e008      	b.n	8007bea <GUI_DEVICE__GetpDriver+0x26>
 8007bd8:	68c3      	ldr	r3, [r0, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	b123      	cbz	r3, 8007be8 <GUI_DEVICE__GetpDriver+0x24>
 8007bde:	6800      	ldr	r0, [r0, #0]
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d1f9      	bne.n	8007bd8 <GUI_DEVICE__GetpDriver+0x14>
 8007be4:	4770      	bx	lr
 8007be6:	2000      	movs	r0, #0
 8007be8:	4770      	bx	lr
 8007bea:	4770      	bx	lr
 8007bec:	2001bd6c 	.word	0x2001bd6c

08007bf0 <GUI_DEVICE_Delete>:
 8007bf0:	f7ff bac0 	b.w	8007174 <GUI_ALLOC_FreeFixedBlock>

08007bf4 <GUI_DEVICE_Create>:
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	dc12      	bgt.n	8007c1e <GUI_DEVICE_Create+0x2a>
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	201c      	movs	r0, #28
 8007bfe:	4617      	mov	r7, r2
 8007c00:	460c      	mov	r4, r1
 8007c02:	461d      	mov	r5, r3
 8007c04:	f7ff fac0 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 8007c08:	b1b8      	cbz	r0, 8007c3a <GUI_DEVICE_Create+0x46>
 8007c0a:	b154      	cbz	r4, 8007c22 <GUI_DEVICE_Create+0x2e>
 8007c0c:	6104      	str	r4, [r0, #16]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6083      	str	r3, [r0, #8]
 8007c12:	6185      	str	r5, [r0, #24]
 8007c14:	8287      	strh	r7, [r0, #20]
 8007c16:	60c6      	str	r6, [r0, #12]
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	6043      	str	r3, [r0, #4]
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1e:	2000      	movs	r0, #0
 8007c20:	4770      	bx	lr
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <GUI_DEVICE_Create+0x4c>)
 8007c24:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007c28:	b90a      	cbnz	r2, 8007c2e <GUI_DEVICE_Create+0x3a>
 8007c2a:	e7f0      	b.n	8007c0e <GUI_DEVICE_Create+0x1a>
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1fb      	bne.n	8007c2c <GUI_DEVICE_Create+0x38>
 8007c34:	6913      	ldr	r3, [r2, #16]
 8007c36:	6103      	str	r3, [r0, #16]
 8007c38:	e7e9      	b.n	8007c0e <GUI_DEVICE_Create+0x1a>
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	2001bd6c 	.word	0x2001bd6c

08007c44 <GUI_DEVICE_Unlink>:
 8007c44:	4a0f      	ldr	r2, [pc, #60]	; (8007c84 <GUI_DEVICE_Unlink+0x40>)
 8007c46:	6981      	ldr	r1, [r0, #24]
 8007c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c4c:	4298      	cmp	r0, r3
 8007c4e:	d00a      	beq.n	8007c66 <GUI_DEVICE_Unlink+0x22>
 8007c50:	6842      	ldr	r2, [r0, #4]
 8007c52:	b10a      	cbz	r2, 8007c58 <GUI_DEVICE_Unlink+0x14>
 8007c54:	6803      	ldr	r3, [r0, #0]
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	6803      	ldr	r3, [r0, #0]
 8007c5a:	b103      	cbz	r3, 8007c5e <GUI_DEVICE_Unlink+0x1a>
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6003      	str	r3, [r0, #0]
 8007c62:	6043      	str	r3, [r0, #4]
 8007c64:	4770      	bx	lr
 8007c66:	6803      	ldr	r3, [r0, #0]
 8007c68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007c6c:	b12b      	cbz	r3, 8007c7a <GUI_DEVICE_Unlink+0x36>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	6842      	ldr	r2, [r0, #4]
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d1ee      	bne.n	8007c56 <GUI_DEVICE_Unlink+0x12>
 8007c78:	e7f0      	b.n	8007c5c <GUI_DEVICE_Unlink+0x18>
 8007c7a:	6842      	ldr	r2, [r0, #4]
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d1ea      	bne.n	8007c56 <GUI_DEVICE_Unlink+0x12>
 8007c80:	e7ed      	b.n	8007c5e <GUI_DEVICE_Unlink+0x1a>
 8007c82:	bf00      	nop
 8007c84:	2001bd6c 	.word	0x2001bd6c

08007c88 <GUI_DEVICE_Link>:
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d03c      	beq.n	8007d06 <GUI_DEVICE_Link+0x7e>
 8007c8c:	b470      	push	{r4, r5, r6}
 8007c8e:	6984      	ldr	r4, [r0, #24]
 8007c90:	2c01      	cmp	r4, #1
 8007c92:	dd03      	ble.n	8007c9c <GUI_DEVICE_Link+0x14>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4618      	mov	r0, r3
 8007c98:	bc70      	pop	{r4, r5, r6}
 8007c9a:	4770      	bx	lr
 8007c9c:	4b1e      	ldr	r3, [pc, #120]	; (8007d18 <GUI_DEVICE_Link+0x90>)
 8007c9e:	4d1f      	ldr	r5, [pc, #124]	; (8007d1c <GUI_DEVICE_Link+0x94>)
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	4294      	cmp	r4, r2
 8007ca4:	bfa4      	itt	ge
 8007ca6:	1c62      	addge	r2, r4, #1
 8007ca8:	701a      	strbge	r2, [r3, #0]
 8007caa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007cae:	b90b      	cbnz	r3, 8007cb4 <GUI_DEVICE_Link+0x2c>
 8007cb0:	e02f      	b.n	8007d12 <GUI_DEVICE_Link+0x8a>
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d1fb      	bne.n	8007cb2 <GUI_DEVICE_Link+0x2a>
 8007cba:	68c2      	ldr	r2, [r0, #12]
 8007cbc:	6811      	ldr	r1, [r2, #0]
 8007cbe:	e002      	b.n	8007cc6 <GUI_DEVICE_Link+0x3e>
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0e6      	beq.n	8007c94 <GUI_DEVICE_Link+0xc>
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	dbf8      	blt.n	8007cc0 <GUI_DEVICE_Link+0x38>
 8007cce:	d00d      	beq.n	8007cec <GUI_DEVICE_Link+0x64>
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	b1da      	cbz	r2, 8007d0c <GUI_DEVICE_Link+0x84>
 8007cd4:	6010      	str	r0, [r2, #0]
 8007cd6:	6042      	str	r2, [r0, #4]
 8007cd8:	4298      	cmp	r0, r3
 8007cda:	bf14      	ite	ne
 8007cdc:	461a      	movne	r2, r3
 8007cde:	2200      	moveq	r2, #0
 8007ce0:	6058      	str	r0, [r3, #4]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	6002      	str	r2, [r0, #0]
 8007ce6:	bc70      	pop	{r4, r5, r6}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	4770      	bx	lr
 8007cec:	8a82      	ldrh	r2, [r0, #20]
 8007cee:	2a01      	cmp	r2, #1
 8007cf0:	d1ee      	bne.n	8007cd0 <GUI_DEVICE_Link+0x48>
 8007cf2:	e004      	b.n	8007cfe <GUI_DEVICE_Link+0x76>
 8007cf4:	68d3      	ldr	r3, [r2, #12]
 8007cf6:	681e      	ldr	r6, [r3, #0]
 8007cf8:	42b1      	cmp	r1, r6
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	dce8      	bgt.n	8007cd0 <GUI_DEVICE_Link+0x48>
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d1f7      	bne.n	8007cf4 <GUI_DEVICE_Link+0x6c>
 8007d04:	e7e4      	b.n	8007cd0 <GUI_DEVICE_Link+0x48>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4618      	mov	r0, r3
 8007d0a:	4770      	bx	lr
 8007d0c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8007d10:	e7e2      	b.n	8007cd8 <GUI_DEVICE_Link+0x50>
 8007d12:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8007d16:	e7be      	b.n	8007c96 <GUI_DEVICE_Link+0xe>
 8007d18:	2001bd1e 	.word	0x2001bd1e
 8007d1c:	2001bd6c 	.word	0x2001bd6c

08007d20 <GUI_DEVICE_CreateAndLink>:
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	dc3b      	bgt.n	8007d9c <GUI_DEVICE_CreateAndLink+0x7c>
 8007d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d28:	4681      	mov	r9, r0
 8007d2a:	201c      	movs	r0, #28
 8007d2c:	4690      	mov	r8, r2
 8007d2e:	460f      	mov	r7, r1
 8007d30:	461e      	mov	r6, r3
 8007d32:	f7ff fa29 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 8007d36:	4605      	mov	r5, r0
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d07f      	beq.n	8007e3c <GUI_DEVICE_CreateAndLink+0x11c>
 8007d3c:	4a41      	ldr	r2, [pc, #260]	; (8007e44 <GUI_DEVICE_CreateAndLink+0x124>)
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	d031      	beq.n	8007da6 <GUI_DEVICE_CreateAndLink+0x86>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f8df e104 	ldr.w	lr, [pc, #260]	; 8007e4c <GUI_DEVICE_CreateAndLink+0x12c>
 8007d48:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	f89e 1000 	ldrb.w	r1, [lr]
 8007d52:	6107      	str	r7, [r0, #16]
 8007d54:	428e      	cmp	r6, r1
 8007d56:	6186      	str	r6, [r0, #24]
 8007d58:	f8a0 8014 	strh.w	r8, [r0, #20]
 8007d5c:	f8c0 900c 	str.w	r9, [r0, #12]
 8007d60:	6043      	str	r3, [r0, #4]
 8007d62:	6083      	str	r3, [r0, #8]
 8007d64:	db02      	blt.n	8007d6c <GUI_DEVICE_CreateAndLink+0x4c>
 8007d66:	1c73      	adds	r3, r6, #1
 8007d68:	f88e 3000 	strb.w	r3, [lr]
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	d05d      	beq.n	8007e2c <GUI_DEVICE_CreateAndLink+0x10c>
 8007d70:	4621      	mov	r1, r4
 8007d72:	684c      	ldr	r4, [r1, #4]
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	d1fb      	bne.n	8007d70 <GUI_DEVICE_CreateAndLink+0x50>
 8007d78:	f8d9 0000 	ldr.w	r0, [r9]
 8007d7c:	68cb      	ldr	r3, [r1, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4283      	cmp	r3, r0
 8007d82:	dd2c      	ble.n	8007dde <GUI_DEVICE_CreateAndLink+0xbe>
 8007d84:	6809      	ldr	r1, [r1, #0]
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d1f8      	bne.n	8007d7c <GUI_DEVICE_CreateAndLink+0x5c>
 8007d8a:	b948      	cbnz	r0, 8007da0 <GUI_DEVICE_CreateAndLink+0x80>
 8007d8c:	4b2e      	ldr	r3, [pc, #184]	; (8007e48 <GUI_DEVICE_CreateAndLink+0x128>)
 8007d8e:	3616      	adds	r6, #22
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4628      	mov	r0, r5
 8007d94:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8007d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	4770      	bx	lr
 8007da0:	4628      	mov	r0, r5
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d030      	beq.n	8007e10 <GUI_DEVICE_CreateAndLink+0xf0>
 8007dae:	4608      	mov	r0, r1
 8007db0:	e000      	b.n	8007db4 <GUI_DEVICE_CreateAndLink+0x94>
 8007db2:	4618      	mov	r0, r3
 8007db4:	6803      	ldr	r3, [r0, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1fb      	bne.n	8007db2 <GUI_DEVICE_CreateAndLink+0x92>
 8007dba:	f8df e090 	ldr.w	lr, [pc, #144]	; 8007e4c <GUI_DEVICE_CreateAndLink+0x12c>
 8007dbe:	6900      	ldr	r0, [r0, #16]
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	6128      	str	r0, [r5, #16]
 8007dc4:	f89e 0000 	ldrb.w	r0, [lr]
 8007dc8:	61ae      	str	r6, [r5, #24]
 8007dca:	4286      	cmp	r6, r0
 8007dcc:	f8a5 8014 	strh.w	r8, [r5, #20]
 8007dd0:	f8c5 900c 	str.w	r9, [r5, #12]
 8007dd4:	606b      	str	r3, [r5, #4]
 8007dd6:	60ab      	str	r3, [r5, #8]
 8007dd8:	dbcb      	blt.n	8007d72 <GUI_DEVICE_CreateAndLink+0x52>
 8007dda:	460c      	mov	r4, r1
 8007ddc:	e7c3      	b.n	8007d66 <GUI_DEVICE_CreateAndLink+0x46>
 8007dde:	d00a      	beq.n	8007df6 <GUI_DEVICE_CreateAndLink+0xd6>
 8007de0:	684b      	ldr	r3, [r1, #4]
 8007de2:	b343      	cbz	r3, 8007e36 <GUI_DEVICE_CreateAndLink+0x116>
 8007de4:	601d      	str	r5, [r3, #0]
 8007de6:	606b      	str	r3, [r5, #4]
 8007de8:	428d      	cmp	r5, r1
 8007dea:	bf14      	ite	ne
 8007dec:	460b      	movne	r3, r1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	604d      	str	r5, [r1, #4]
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	e7c9      	b.n	8007d8a <GUI_DEVICE_CreateAndLink+0x6a>
 8007df6:	f1b8 0f01 	cmp.w	r8, #1
 8007dfa:	d1f1      	bne.n	8007de0 <GUI_DEVICE_CreateAndLink+0xc0>
 8007dfc:	e004      	b.n	8007e08 <GUI_DEVICE_CreateAndLink+0xe8>
 8007dfe:	68d9      	ldr	r1, [r3, #12]
 8007e00:	680c      	ldr	r4, [r1, #0]
 8007e02:	4284      	cmp	r4, r0
 8007e04:	4619      	mov	r1, r3
 8007e06:	dbeb      	blt.n	8007de0 <GUI_DEVICE_CreateAndLink+0xc0>
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f7      	bne.n	8007dfe <GUI_DEVICE_CreateAndLink+0xde>
 8007e0e:	e7e7      	b.n	8007de0 <GUI_DEVICE_CreateAndLink+0xc0>
 8007e10:	f8df e038 	ldr.w	lr, [pc, #56]	; 8007e4c <GUI_DEVICE_CreateAndLink+0x12c>
 8007e14:	6001      	str	r1, [r0, #0]
 8007e16:	f89e 3000 	ldrb.w	r3, [lr]
 8007e1a:	6186      	str	r6, [r0, #24]
 8007e1c:	429e      	cmp	r6, r3
 8007e1e:	f8a0 8014 	strh.w	r8, [r0, #20]
 8007e22:	f8c0 900c 	str.w	r9, [r0, #12]
 8007e26:	6041      	str	r1, [r0, #4]
 8007e28:	6081      	str	r1, [r0, #8]
 8007e2a:	dad6      	bge.n	8007dda <GUI_DEVICE_CreateAndLink+0xba>
 8007e2c:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8007e30:	f8d9 0000 	ldr.w	r0, [r9]
 8007e34:	e7a9      	b.n	8007d8a <GUI_DEVICE_CreateAndLink+0x6a>
 8007e36:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8007e3a:	e7d5      	b.n	8007de8 <GUI_DEVICE_CreateAndLink+0xc8>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e42:	bf00      	nop
 8007e44:	2001bd6c 	.word	0x2001bd6c
 8007e48:	20000018 	.word	0x20000018
 8007e4c:	2001bd1e 	.word	0x2001bd1e

08007e50 <GUI_DispString.part.0>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	4e45      	ldr	r6, [pc, #276]	; (8007f6c <GUI_DispString.part.0+0x11c>)
 8007e56:	b083      	sub	sp, #12
 8007e58:	4604      	mov	r4, r0
 8007e5a:	f007 fa3d 	bl	800f2d8 <GUI_GetFontDistY>
 8007e5e:	6833      	ldr	r3, [r6, #0]
 8007e60:	4607      	mov	r7, r0
 8007e62:	f9b3 9022 	ldrsh.w	r9, [r3, #34]	; 0x22
 8007e66:	f007 fa1f 	bl	800f2a8 <GUI_GetYAdjust>
 8007e6a:	6832      	ldr	r2, [r6, #0]
 8007e6c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8007e6e:	fa1f fa80 	uxth.w	sl, r0
 8007e72:	ebca 0303 	rsb	r3, sl, r3
 8007e76:	b21b      	sxth	r3, r3
 8007e78:	8493      	strh	r3, [r2, #36]	; 0x24
 8007e7a:	7821      	ldrb	r1, [r4, #0]
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d04d      	beq.n	8007f1c <GUI_DispString.part.0+0xcc>
 8007e80:	b2bf      	uxth	r7, r7
 8007e82:	46b0      	mov	r8, r6
 8007e84:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f007 fa8d 	bl	800f3a8 <GUI__GetLineNumChars>
 8007e8e:	4601      	mov	r1, r0
 8007e90:	4683      	mov	fp, r0
 8007e92:	4620      	mov	r0, r4
 8007e94:	f007 fab2 	bl	800f3fc <GUI__GetLineDistX>
 8007e98:	6831      	ldr	r1, [r6, #0]
 8007e9a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d058      	beq.n	8007f56 <GUI_DispString.part.0+0x106>
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d05a      	beq.n	8007f5e <GUI_DispString.part.0+0x10e>
 8007ea8:	b285      	uxth	r5, r0
 8007eaa:	f04f 0e00 	mov.w	lr, #0
 8007eae:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8007eb0:	f9b1 3024 	ldrsh.w	r3, [r1, #36]	; 0x24
 8007eb4:	f8ad 3002 	strh.w	r3, [sp, #2]
 8007eb8:	ebce 0202 	rsb	r2, lr, r2
 8007ebc:	b292      	uxth	r2, r2
 8007ebe:	b210      	sxth	r0, r2
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8007ec6:	4496      	add	lr, r2
 8007ec8:	8448      	strh	r0, [r1, #34]	; 0x22
 8007eca:	443b      	add	r3, r7
 8007ecc:	466a      	mov	r2, sp
 8007ece:	4659      	mov	r1, fp
 8007ed0:	f8ad 0000 	strh.w	r0, [sp]
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007eda:	f8ad e004 	strh.w	lr, [sp, #4]
 8007ede:	f007 facf 	bl	800f480 <GUI__DispLine>
 8007ee2:	6833      	ldr	r3, [r6, #0]
 8007ee4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8007ee8:	849a      	strh	r2, [r3, #36]	; 0x24
 8007eea:	4659      	mov	r1, fp
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 f8b9 	bl	8008064 <GUI_UC__NumChars2NumBytes>
 8007ef2:	5c22      	ldrb	r2, [r4, r0]
 8007ef4:	2a0a      	cmp	r2, #10
 8007ef6:	eb04 0300 	add.w	r3, r4, r0
 8007efa:	d019      	beq.n	8007f30 <GUI_DispString.part.0+0xe0>
 8007efc:	2a0d      	cmp	r2, #13
 8007efe:	d017      	beq.n	8007f30 <GUI_DispString.part.0+0xe0>
 8007f00:	f8bd 0000 	ldrh.w	r0, [sp]
 8007f04:	f8d8 2000 	ldr.w	r2, [r8]
 8007f08:	4405      	add	r5, r0
 8007f0a:	8455      	strh	r5, [r2, #34]	; 0x22
 8007f0c:	7819      	ldrb	r1, [r3, #0]
 8007f0e:	b119      	cbz	r1, 8007f18 <GUI_DispString.part.0+0xc8>
 8007f10:	7859      	ldrb	r1, [r3, #1]
 8007f12:	1c5c      	adds	r4, r3, #1
 8007f14:	2900      	cmp	r1, #0
 8007f16:	d1b5      	bne.n	8007e84 <GUI_DispString.part.0+0x34>
 8007f18:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 8007f1c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f1e:	449a      	add	sl, r3
 8007f20:	f021 0303 	bic.w	r3, r1, #3
 8007f24:	f8a2 a024 	strh.w	sl, [r2, #36]	; 0x24
 8007f28:	8593      	strh	r3, [r2, #44]	; 0x2c
 8007f2a:	b003      	add	sp, #12
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	6832      	ldr	r2, [r6, #0]
 8007f32:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f34:	f001 0103 	and.w	r1, r1, #3
 8007f38:	3901      	subs	r1, #1
 8007f3a:	2901      	cmp	r1, #1
 8007f3c:	bf8a      	itet	hi
 8007f3e:	8c11      	ldrhhi	r1, [r2, #32]
 8007f40:	f8a2 9022 	strhls.w	r9, [r2, #34]	; 0x22
 8007f44:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	290a      	cmp	r1, #10
 8007f4a:	d1e0      	bne.n	8007f0e <GUI_DispString.part.0+0xbe>
 8007f4c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8007f4e:	4439      	add	r1, r7
 8007f50:	8491      	strh	r1, [r2, #36]	; 0x24
 8007f52:	7819      	ldrb	r1, [r3, #0]
 8007f54:	e7db      	b.n	8007f0e <GUI_DispString.part.0+0xbe>
 8007f56:	fa1f fe80 	uxth.w	lr, r0
 8007f5a:	4675      	mov	r5, lr
 8007f5c:	e7a7      	b.n	8007eae <GUI_DispString.part.0+0x5e>
 8007f5e:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8007f62:	f3c2 0e4f 	ubfx	lr, r2, #1, #16
 8007f66:	b285      	uxth	r5, r0
 8007f68:	e7a1      	b.n	8007eae <GUI_DispString.part.0+0x5e>
 8007f6a:	bf00      	nop
 8007f6c:	20000018 	.word	0x20000018

08007f70 <GUI_DispStringAt>:
 8007f70:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <GUI_DispStringAt+0x10>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	8459      	strh	r1, [r3, #34]	; 0x22
 8007f76:	849a      	strh	r2, [r3, #36]	; 0x24
 8007f78:	b108      	cbz	r0, 8007f7e <GUI_DispStringAt+0xe>
 8007f7a:	f7ff bf69 	b.w	8007e50 <GUI_DispString.part.0>
 8007f7e:	4770      	bx	lr
 8007f80:	20000018 	.word	0x20000018

08007f84 <GUI_StoreKey>:
 8007f84:	4b02      	ldr	r3, [pc, #8]	; (8007f90 <GUI_StoreKey+0xc>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	b902      	cbnz	r2, 8007f8c <GUI_StoreKey+0x8>
 8007f8a:	6018      	str	r0, [r3, #0]
 8007f8c:	f000 b888 	b.w	80080a0 <GUI_SignalEvent>
 8007f90:	20000150 	.word	0x20000150

08007f94 <GUI_PollKeyMsg>:
 8007f94:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <GUI_PollKeyMsg+0x28>)
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	6851      	ldr	r1, [r2, #4]
 8007f9a:	428b      	cmp	r3, r1
 8007f9c:	d00c      	beq.n	8007fb8 <GUI_PollKeyMsg+0x24>
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4c07      	ldr	r4, [pc, #28]	; (8007fc0 <GUI_PollKeyMsg+0x2c>)
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007fa8:	bf14      	ite	ne
 8007faa:	3308      	addne	r3, #8
 8007fac:	3b50      	subeq	r3, #80	; 0x50
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	f006 fdbc 	bl	800eb2c <WM_OnKey>
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	2000      	movs	r0, #0
 8007fba:	4770      	bx	lr
 8007fbc:	2000001c 	.word	0x2000001c
 8007fc0:	200001a4 	.word	0x200001a4

08007fc4 <GUI_GetLayerPosEx>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	f001 fbe7 	bl	800979c <LCD_GetPosEx>
 8007fce:	b110      	cbz	r0, 8007fd6 <GUI_GetLayerPosEx+0x12>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}

08007fd8 <GUI_SelectLayer>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4d0a      	ldr	r5, [pc, #40]	; (8008004 <GUI_SelectLayer+0x2c>)
 8007fdc:	682a      	ldr	r2, [r5, #0]
 8007fde:	2801      	cmp	r0, #1
 8007fe0:	7c56      	ldrb	r6, [r2, #17]
 8007fe2:	d901      	bls.n	8007fe8 <GUI_SelectLayer+0x10>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	f7ff fdeb 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d0f8      	beq.n	8007fe4 <GUI_SelectLayer+0xc>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	745c      	strb	r4, [r3, #17]
 8007ff6:	f7ff fc23 	bl	8007840 <GUI_SelectLCD>
 8007ffa:	4b03      	ldr	r3, [pc, #12]	; (8008008 <GUI_SelectLayer+0x30>)
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	601c      	str	r4, [r3, #0]
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	bf00      	nop
 8008004:	20000018 	.word	0x20000018
 8008008:	2001bdb0 	.word	0x2001bdb0

0800800c <GUI_Delay>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4605      	mov	r5, r0
 8008010:	f7fb fd92 	bl	8003b38 <GUI_X_GetTime>
 8008014:	4e08      	ldr	r6, [pc, #32]	; (8008038 <GUI_Delay+0x2c>)
 8008016:	4405      	add	r5, r0
 8008018:	e007      	b.n	800802a <GUI_Delay+0x1e>
 800801a:	f7ff fba9 	bl	8007770 <GUI_Exec>
 800801e:	6830      	ldr	r0, [r6, #0]
 8008020:	42a0      	cmp	r0, r4
 8008022:	bfa8      	it	ge
 8008024:	4620      	movge	r0, r4
 8008026:	f7fb fd93 	bl	8003b50 <GUI_X_Delay>
 800802a:	f7fb fd85 	bl	8003b38 <GUI_X_GetTime>
 800802e:	1a2c      	subs	r4, r5, r0
 8008030:	2c00      	cmp	r4, #0
 8008032:	dcf2      	bgt.n	800801a <GUI_Delay+0xe>
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	bf00      	nop
 8008038:	20000024 	.word	0x20000024

0800803c <GUI_UC__GetCharCodeInc>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	4e08      	ldr	r6, [pc, #32]	; (8008060 <GUI_UC__GetCharCodeInc+0x24>)
 8008040:	6804      	ldr	r4, [r0, #0]
 8008042:	6833      	ldr	r3, [r6, #0]
 8008044:	4605      	mov	r5, r0
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4620      	mov	r0, r4
 800804a:	4798      	blx	r3
 800804c:	6833      	ldr	r3, [r6, #0]
 800804e:	4607      	mov	r7, r0
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4620      	mov	r0, r4
 8008054:	4798      	blx	r3
 8008056:	4420      	add	r0, r4
 8008058:	6028      	str	r0, [r5, #0]
 800805a:	4638      	mov	r0, r7
 800805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805e:	bf00      	nop
 8008060:	2001bd64 	.word	0x2001bd64

08008064 <GUI_UC__NumChars2NumBytes>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	b169      	cbz	r1, 8008084 <GUI_UC__NumChars2NumBytes+0x20>
 8008068:	4f07      	ldr	r7, [pc, #28]	; (8008088 <GUI_UC__NumChars2NumBytes+0x24>)
 800806a:	4605      	mov	r5, r0
 800806c:	460c      	mov	r4, r1
 800806e:	2600      	movs	r6, #0
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	4628      	mov	r0, r5
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4798      	blx	r3
 8008078:	3c01      	subs	r4, #1
 800807a:	4405      	add	r5, r0
 800807c:	4406      	add	r6, r0
 800807e:	d1f7      	bne.n	8008070 <GUI_UC__NumChars2NumBytes+0xc>
 8008080:	4630      	mov	r0, r6
 8008082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008084:	460e      	mov	r6, r1
 8008086:	e7fb      	b.n	8008080 <GUI_UC__NumChars2NumBytes+0x1c>
 8008088:	2001bd64 	.word	0x2001bd64

0800808c <_GetCharCode>:
 800808c:	7800      	ldrb	r0, [r0, #0]
 800808e:	4770      	bx	lr

08008090 <_GetCharSize>:
 8008090:	2001      	movs	r0, #1
 8008092:	4770      	bx	lr

08008094 <_CalcSizeOfChar>:
 8008094:	2001      	movs	r0, #1
 8008096:	4770      	bx	lr

08008098 <_Encode>:
 8008098:	7001      	strb	r1, [r0, #0]
 800809a:	2001      	movs	r0, #1
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop

080080a0 <GUI_SignalEvent>:
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <GUI_SignalEvent+0xc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	b103      	cbz	r3, 80080a8 <GUI_SignalEvent+0x8>
 80080a6:	4718      	bx	r3
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	200001b0 	.word	0x200001b0

080080b0 <GUI__MixColorsBulk>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	b087      	sub	sp, #28
 80080b6:	4692      	mov	sl, r2
 80080b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080bc:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 80080c0:	9001      	str	r0, [sp, #4]
 80080c2:	9102      	str	r1, [sp, #8]
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	d035      	beq.n	8008134 <GUI__MixColorsBulk+0x84>
 80080c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080ca:	f8df b070 	ldr.w	fp, [pc, #112]	; 800813c <GUI__MixColorsBulk+0x8c>
 80080ce:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008140 <GUI__MixColorsBulk+0x90>
 80080d2:	0092      	lsls	r2, r2, #2
 80080d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	2300      	movs	r3, #0
 80080dc:	9205      	str	r2, [sp, #20]
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80080e2:	9e02      	ldr	r6, [sp, #8]
 80080e4:	9d01      	ldr	r5, [sp, #4]
 80080e6:	4657      	mov	r7, sl
 80080e8:	f855 0b04 	ldr.w	r0, [r5], #4
 80080ec:	f8db 3000 	ldr.w	r3, [fp]
 80080f0:	f856 1b04 	ldr.w	r1, [r6], #4
 80080f4:	0e02      	lsrs	r2, r0, #24
 80080f6:	fb09 f202 	mul.w	r2, r9, r2
 80080fa:	fba8 e202 	umull	lr, r2, r8, r2
 80080fe:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8008102:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8008106:	4798      	blx	r3
 8008108:	3c01      	subs	r4, #1
 800810a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800810e:	f847 0b04 	str.w	r0, [r7], #4
 8008112:	d1e9      	bne.n	80080e8 <GUI__MixColorsBulk+0x38>
 8008114:	9a01      	ldr	r2, [sp, #4]
 8008116:	9905      	ldr	r1, [sp, #20]
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	4610      	mov	r0, r2
 800811c:	4408      	add	r0, r1
 800811e:	9a02      	ldr	r2, [sp, #8]
 8008120:	9001      	str	r0, [sp, #4]
 8008122:	448a      	add	sl, r1
 8008124:	9904      	ldr	r1, [sp, #16]
 8008126:	440a      	add	r2, r1
 8008128:	9202      	str	r2, [sp, #8]
 800812a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800812c:	3301      	adds	r3, #1
 800812e:	429a      	cmp	r2, r3
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	d1d5      	bne.n	80080e0 <GUI__MixColorsBulk+0x30>
 8008134:	b007      	add	sp, #28
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	bf00      	nop
 800813c:	20000028 	.word	0x20000028
 8008140:	80808081 	.word	0x80808081

08008144 <GUI__MixColors>:
 8008144:	b4f0      	push	{r4, r5, r6, r7}
 8008146:	0e0b      	lsrs	r3, r1, #24
 8008148:	ea4f 6410 	mov.w	r4, r0, lsr #24
 800814c:	4b12      	ldr	r3, [pc, #72]	; (8008198 <GUI__MixColors+0x54>)
 800814e:	fb02 f204 	mul.w	r2, r2, r4
 8008152:	bf08      	it	eq
 8008154:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8008158:	fba3 3202 	umull	r3, r2, r3, r2
 800815c:	09d2      	lsrs	r2, r2, #7
 800815e:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8008162:	0a0d      	lsrs	r5, r1, #8
 8008164:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 8008168:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 800816c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8008170:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008174:	fb02 f106 	mul.w	r1, r2, r6
 8008178:	fb07 f005 	mul.w	r0, r7, r5
 800817c:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8008180:	fb07 1103 	mla	r1, r7, r3, r1
 8008184:	fb02 0004 	mla	r0, r2, r4, r0
 8008188:	0a09      	lsrs	r1, r1, #8
 800818a:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 800818e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8008192:	4308      	orrs	r0, r1
 8008194:	bcf0      	pop	{r4, r5, r6, r7}
 8008196:	4770      	bx	lr
 8008198:	80808081 	.word	0x80808081

0800819c <_OnExit>:
 800819c:	b510      	push	{r4, lr}
 800819e:	4c08      	ldr	r4, [pc, #32]	; (80081c0 <_OnExit+0x24>)
 80081a0:	6820      	ldr	r0, [r4, #0]
 80081a2:	f7fe ffe7 	bl	8007174 <GUI_ALLOC_FreeFixedBlock>
 80081a6:	6860      	ldr	r0, [r4, #4]
 80081a8:	f7fe ffe4 	bl	8007174 <GUI_ALLOC_FreeFixedBlock>
 80081ac:	68a0      	ldr	r0, [r4, #8]
 80081ae:	f7fe ffe1 	bl	8007174 <GUI_ALLOC_FreeFixedBlock>
 80081b2:	2300      	movs	r3, #0
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	60e3      	str	r3, [r4, #12]
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	200001b8 	.word	0x200001b8

080081c4 <GUI__DoAlphaBlending>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	4c96      	ldr	r4, [pc, #600]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80081ca:	b08f      	sub	sp, #60	; 0x3c
 80081cc:	461d      	mov	r5, r3
 80081ce:	6924      	ldr	r4, [r4, #16]
 80081d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081d2:	9005      	str	r0, [sp, #20]
 80081d4:	2600      	movs	r6, #0
 80081d6:	9107      	str	r1, [sp, #28]
 80081d8:	4693      	mov	fp, r2
 80081da:	601e      	str	r6, [r3, #0]
 80081dc:	2c00      	cmp	r4, #0
 80081de:	f000 80f0 	beq.w	80083c2 <GUI__DoAlphaBlending+0x1fe>
 80081e2:	4b90      	ldr	r3, [pc, #576]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80081e4:	68df      	ldr	r7, [r3, #12]
 80081e6:	461c      	mov	r4, r3
 80081e8:	b92f      	cbnz	r7, 80081f6 <GUI__DoAlphaBlending+0x32>
 80081ea:	4b8f      	ldr	r3, [pc, #572]	; (8008428 <GUI__DoAlphaBlending+0x264>)
 80081ec:	681f      	ldr	r7, [r3, #0]
 80081ee:	60e7      	str	r7, [r4, #12]
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f000 80f0 	beq.w	80083d6 <GUI__DoAlphaBlending+0x212>
 80081f6:	4b8b      	ldr	r3, [pc, #556]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80081f8:	4e8a      	ldr	r6, [pc, #552]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80ff 	beq.w	8008402 <GUI__DoAlphaBlending+0x23e>
 8008204:	4b87      	ldr	r3, [pc, #540]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 8008206:	4c87      	ldr	r4, [pc, #540]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80ea 	beq.w	80083e6 <GUI__DoAlphaBlending+0x222>
 8008212:	4a86      	ldr	r2, [pc, #536]	; (800842c <GUI__DoAlphaBlending+0x268>)
 8008214:	4b86      	ldr	r3, [pc, #536]	; (8008430 <GUI__DoAlphaBlending+0x26c>)
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	7c50      	ldrb	r0, [r2, #17]
 800821a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800821e:	9308      	str	r3, [sp, #32]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	930d      	str	r3, [sp, #52]	; 0x34
 8008224:	f001 f8a2 	bl	800936c <GUI_GetBitsPerPixelEx>
 8008228:	4b80      	ldr	r3, [pc, #512]	; (800842c <GUI__DoAlphaBlending+0x268>)
 800822a:	9004      	str	r0, [sp, #16]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	7c58      	ldrb	r0, [r3, #17]
 8008230:	f001 f8b6 	bl	80093a0 <GUI_GetpfIndex2ColorEx>
 8008234:	4b7f      	ldr	r3, [pc, #508]	; (8008434 <GUI__DoAlphaBlending+0x270>)
 8008236:	900b      	str	r0, [sp, #44]	; 0x2c
 8008238:	42af      	cmp	r7, r5
 800823a:	bfa8      	it	ge
 800823c:	462f      	movge	r7, r5
 800823e:	4298      	cmp	r0, r3
 8008240:	f000 80ce 	beq.w	80083e0 <GUI__DoAlphaBlending+0x21c>
 8008244:	4b7c      	ldr	r3, [pc, #496]	; (8008438 <GUI__DoAlphaBlending+0x274>)
 8008246:	1ac3      	subs	r3, r0, r3
 8008248:	bf18      	it	ne
 800824a:	2301      	movne	r3, #1
 800824c:	930a      	str	r3, [sp, #40]	; 0x28
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	443b      	add	r3, r7
 8008252:	930c      	str	r3, [sp, #48]	; 0x30
 8008254:	2600      	movs	r6, #0
 8008256:	3b01      	subs	r3, #1
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	4634      	mov	r4, r6
 800825c:	46ba      	mov	sl, r7
 800825e:	465f      	mov	r7, fp
 8008260:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008262:	f857 0b04 	ldr.w	r0, [r7], #4
 8008266:	4798      	blx	r3
 8008268:	ea4f 6810 	mov.w	r8, r0, lsr #24
 800826c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8008270:	4681      	mov	r9, r0
 8008272:	d047      	beq.n	8008304 <GUI__DoAlphaBlending+0x140>
 8008274:	2c00      	cmp	r4, #0
 8008276:	d12b      	bne.n	80082d0 <GUI__DoAlphaBlending+0x10c>
 8008278:	4b6c      	ldr	r3, [pc, #432]	; (800842c <GUI__DoAlphaBlending+0x268>)
 800827a:	9a05      	ldr	r2, [sp, #20]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008282:	1995      	adds	r5, r2, r6
 8008284:	42ab      	cmp	r3, r5
 8008286:	dd59      	ble.n	800833c <GUI__DoAlphaBlending+0x178>
 8008288:	1b5a      	subs	r2, r3, r5
 800828a:	9206      	str	r2, [sp, #24]
 800828c:	4614      	mov	r4, r2
 800828e:	461d      	mov	r5, r3
 8008290:	9b02      	ldr	r3, [sp, #8]
 8008292:	9907      	ldr	r1, [sp, #28]
 8008294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008296:	4434      	add	r4, r6
 8008298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	9400      	str	r4, [sp, #0]
 80082a2:	460b      	mov	r3, r1
 80082a4:	4628      	mov	r0, r5
 80082a6:	f001 fa27 	bl	80096f8 <GUI_ReadRectEx>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	2b17      	cmp	r3, #23
 80082ae:	dd7e      	ble.n	80083ae <GUI__DoAlphaBlending+0x1ea>
 80082b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d044      	beq.n	8008340 <GUI__DoAlphaBlending+0x17c>
 80082b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b8:	9606      	str	r6, [sp, #24]
 80082ba:	1b5d      	subs	r5, r3, r5
 80082bc:	462e      	mov	r6, r5
 80082be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	47a8      	blx	r5
 80082c4:	3e01      	subs	r6, #1
 80082c6:	f844 0b04 	str.w	r0, [r4], #4
 80082ca:	d1f9      	bne.n	80082c0 <GUI__DoAlphaBlending+0xfc>
 80082cc:	9e06      	ldr	r6, [sp, #24]
 80082ce:	2401      	movs	r4, #1
 80082d0:	4b54      	ldr	r3, [pc, #336]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80082d2:	69dd      	ldr	r5, [r3, #28]
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d138      	bne.n	800834a <GUI__DoAlphaBlending+0x186>
 80082d8:	fa5f f288 	uxtb.w	r2, r8
 80082dc:	f1b8 0f00 	cmp.w	r8, #0
 80082e0:	d11a      	bne.n	8008318 <GUI__DoAlphaBlending+0x154>
 80082e2:	9b02      	ldr	r3, [sp, #8]
 80082e4:	9a03      	ldr	r2, [sp, #12]
 80082e6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80082ea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80082ee:	f1ba 0a01 	subs.w	sl, sl, #1
 80082f2:	f106 0601 	add.w	r6, r6, #1
 80082f6:	46bb      	mov	fp, r7
 80082f8:	d1b1      	bne.n	800825e <GUI__DoAlphaBlending+0x9a>
 80082fa:	9c03      	ldr	r4, [sp, #12]
 80082fc:	4620      	mov	r0, r4
 80082fe:	b00f      	add	sp, #60	; 0x3c
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008306:	9a03      	ldr	r2, [sp, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 800830e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e7ea      	b.n	80082ee <GUI__DoAlphaBlending+0x12a>
 8008318:	9902      	ldr	r1, [sp, #8]
 800831a:	4b48      	ldr	r3, [pc, #288]	; (800843c <GUI__DoAlphaBlending+0x278>)
 800831c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f049 407f 	orr.w	r0, r9, #4278190080	; 0xff000000
 8008326:	4798      	blx	r3
 8008328:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800832a:	9a03      	ldr	r2, [sp, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8008332:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	e7d8      	b.n	80082ee <GUI__DoAlphaBlending+0x12a>
 800833c:	9406      	str	r4, [sp, #24]
 800833e:	e7a7      	b.n	8008290 <GUI__DoAlphaBlending+0xcc>
 8008340:	4b38      	ldr	r3, [pc, #224]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 8008342:	69dd      	ldr	r5, [r3, #28]
 8008344:	2401      	movs	r4, #1
 8008346:	2d00      	cmp	r5, #0
 8008348:	d0c6      	beq.n	80082d8 <GUI__DoAlphaBlending+0x114>
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	00b6      	lsls	r6, r6, #2
 800834e:	4433      	add	r3, r6
 8008350:	461c      	mov	r4, r3
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	441e      	add	r6, r3
 8008356:	4632      	mov	r2, r6
 8008358:	4621      	mov	r1, r4
 800835a:	4653      	mov	r3, sl
 800835c:	4658      	mov	r0, fp
 800835e:	47a8      	blx	r5
 8008360:	4657      	mov	r7, sl
 8008362:	f1ab 0204 	sub.w	r2, fp, #4
 8008366:	e007      	b.n	8008378 <GUI__DoAlphaBlending+0x1b4>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	6033      	str	r3, [r6, #0]
 800836c:	3f01      	subs	r7, #1
 800836e:	f104 0404 	add.w	r4, r4, #4
 8008372:	f106 0604 	add.w	r6, r6, #4
 8008376:	d00f      	beq.n	8008398 <GUI__DoAlphaBlending+0x1d4>
 8008378:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800837c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008380:	d0f2      	beq.n	8008368 <GUI__DoAlphaBlending+0x1a4>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8008388:	bf08      	it	eq
 800838a:	6033      	streq	r3, [r6, #0]
 800838c:	3f01      	subs	r7, #1
 800838e:	f104 0404 	add.w	r4, r4, #4
 8008392:	f106 0604 	add.w	r6, r6, #4
 8008396:	d1ef      	bne.n	8008378 <GUI__DoAlphaBlending+0x1b4>
 8008398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800839a:	9c03      	ldr	r4, [sp, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	4620      	mov	r0, r4
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	b00f      	add	sp, #60	; 0x3c
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	461a      	mov	r2, r3
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	4620      	mov	r0, r4
 80083b4:	ebc3 010a 	rsb	r1, r3, sl
 80083b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ba:	f000 f8a5 	bl	8008508 <GUI__ExpandPixelIndicesEx>
 80083be:	2401      	movs	r4, #1
 80083c0:	e786      	b.n	80082d0 <GUI__DoAlphaBlending+0x10c>
 80083c2:	4818      	ldr	r0, [pc, #96]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <GUI__DoAlphaBlending+0x27c>)
 80083c6:	4a17      	ldr	r2, [pc, #92]	; (8008424 <GUI__DoAlphaBlending+0x260>)
 80083c8:	f840 3f14 	str.w	r3, [r0, #20]!
 80083cc:	2301      	movs	r3, #1
 80083ce:	6113      	str	r3, [r2, #16]
 80083d0:	f7ff fbe4 	bl	8007b9c <GUI__RegisterExit>
 80083d4:	e705      	b.n	80081e2 <GUI__DoAlphaBlending+0x1e>
 80083d6:	f001 f827 	bl	8009428 <LCD_GetVXSizeMax>
 80083da:	4607      	mov	r7, r0
 80083dc:	60e0      	str	r0, [r4, #12]
 80083de:	e70a      	b.n	80081f6 <GUI__DoAlphaBlending+0x32>
 80083e0:	2300      	movs	r3, #0
 80083e2:	930a      	str	r3, [sp, #40]	; 0x28
 80083e4:	e733      	b.n	800824e <GUI__DoAlphaBlending+0x8a>
 80083e6:	68e0      	ldr	r0, [r4, #12]
 80083e8:	0080      	lsls	r0, r0, #2
 80083ea:	f7fe fecd 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 80083ee:	9003      	str	r0, [sp, #12]
 80083f0:	6060      	str	r0, [r4, #4]
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f47f af0d 	bne.w	8008212 <GUI__DoAlphaBlending+0x4e>
 80083f8:	2400      	movs	r4, #0
 80083fa:	4620      	mov	r0, r4
 80083fc:	b00f      	add	sp, #60	; 0x3c
 80083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008402:	00b8      	lsls	r0, r7, #2
 8008404:	f7fe fec0 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 8008408:	6030      	str	r0, [r6, #0]
 800840a:	b108      	cbz	r0, 8008410 <GUI__DoAlphaBlending+0x24c>
 800840c:	9002      	str	r0, [sp, #8]
 800840e:	e6f9      	b.n	8008204 <GUI__DoAlphaBlending+0x40>
 8008410:	6874      	ldr	r4, [r6, #4]
 8008412:	2c00      	cmp	r4, #0
 8008414:	d1f0      	bne.n	80083f8 <GUI__DoAlphaBlending+0x234>
 8008416:	68f0      	ldr	r0, [r6, #12]
 8008418:	0080      	lsls	r0, r0, #2
 800841a:	f7fe feb5 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800841e:	6070      	str	r0, [r6, #4]
 8008420:	e76c      	b.n	80082fc <GUI__DoAlphaBlending+0x138>
 8008422:	bf00      	nop
 8008424:	200001b8 	.word	0x200001b8
 8008428:	2001bd74 	.word	0x2001bd74
 800842c:	20000018 	.word	0x20000018
 8008430:	2001bd6c 	.word	0x2001bd6c
 8008434:	08006819 	.word	0x08006819
 8008438:	0800681d 	.word	0x0800681d
 800843c:	20000028 	.word	0x20000028
 8008440:	0800819d 	.word	0x0800819d

08008444 <GUI__AllocAlphaBuffer>:
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	b083      	sub	sp, #12
 8008448:	b9c0      	cbnz	r0, 800847c <GUI__AllocAlphaBuffer+0x38>
 800844a:	4c22      	ldr	r4, [pc, #136]	; (80084d4 <GUI__AllocAlphaBuffer+0x90>)
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	4605      	mov	r5, r0
 8008450:	b1cb      	cbz	r3, 8008486 <GUI__AllocAlphaBuffer+0x42>
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	4e1f      	ldr	r6, [pc, #124]	; (80084d4 <GUI__AllocAlphaBuffer+0x90>)
 8008456:	b918      	cbnz	r0, 8008460 <GUI__AllocAlphaBuffer+0x1c>
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <GUI__AllocAlphaBuffer+0x94>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	60f0      	str	r0, [r6, #12]
 800845e:	b1d8      	cbz	r0, 8008498 <GUI__AllocAlphaBuffer+0x54>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	4f1c      	ldr	r7, [pc, #112]	; (80084d4 <GUI__AllocAlphaBuffer+0x90>)
 8008464:	2600      	movs	r6, #0
 8008466:	b323      	cbz	r3, 80084b2 <GUI__AllocAlphaBuffer+0x6e>
 8008468:	6863      	ldr	r3, [r4, #4]
 800846a:	4f1a      	ldr	r7, [pc, #104]	; (80084d4 <GUI__AllocAlphaBuffer+0x90>)
 800846c:	b1c3      	cbz	r3, 80084a0 <GUI__AllocAlphaBuffer+0x5c>
 800846e:	b115      	cbz	r5, 8008476 <GUI__AllocAlphaBuffer+0x32>
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	4c18      	ldr	r4, [pc, #96]	; (80084d4 <GUI__AllocAlphaBuffer+0x90>)
 8008474:	b32b      	cbz	r3, 80084c2 <GUI__AllocAlphaBuffer+0x7e>
 8008476:	4630      	mov	r0, r6
 8008478:	b003      	add	sp, #12
 800847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847c:	4c15      	ldr	r4, [pc, #84]	; (80084d4 <GUI__AllocAlphaBuffer+0x90>)
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	ad01      	add	r5, sp, #4
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <GUI__AllocAlphaBuffer+0xe>
 8008486:	4620      	mov	r0, r4
 8008488:	4b14      	ldr	r3, [pc, #80]	; (80084dc <GUI__AllocAlphaBuffer+0x98>)
 800848a:	f840 3f14 	str.w	r3, [r0, #20]!
 800848e:	2301      	movs	r3, #1
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	f7ff fb83 	bl	8007b9c <GUI__RegisterExit>
 8008496:	e7dc      	b.n	8008452 <GUI__AllocAlphaBuffer+0xe>
 8008498:	f000 ffc6 	bl	8009428 <LCD_GetVXSizeMax>
 800849c:	60f0      	str	r0, [r6, #12]
 800849e:	e7df      	b.n	8008460 <GUI__AllocAlphaBuffer+0x1c>
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	0080      	lsls	r0, r0, #2
 80084a4:	f7fe fe70 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	bf08      	it	eq
 80084ac:	2601      	moveq	r6, #1
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	e7dd      	b.n	800846e <GUI__AllocAlphaBuffer+0x2a>
 80084b2:	0080      	lsls	r0, r0, #2
 80084b4:	f7fe fe68 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 80084b8:	fab0 f680 	clz	r6, r0
 80084bc:	6038      	str	r0, [r7, #0]
 80084be:	0976      	lsrs	r6, r6, #5
 80084c0:	e7d2      	b.n	8008468 <GUI__AllocAlphaBuffer+0x24>
 80084c2:	68e0      	ldr	r0, [r4, #12]
 80084c4:	0080      	lsls	r0, r0, #2
 80084c6:	f7fe fe5f 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	bf08      	it	eq
 80084ce:	2601      	moveq	r6, #1
 80084d0:	60a0      	str	r0, [r4, #8]
 80084d2:	e7d0      	b.n	8008476 <GUI__AllocAlphaBuffer+0x32>
 80084d4:	200001b8 	.word	0x200001b8
 80084d8:	2001bd74 	.word	0x2001bd74
 80084dc:	0800819d 	.word	0x0800819d

080084e0 <GUI_SetFuncDrawAlpha>:
 80084e0:	b410      	push	{r4}
 80084e2:	b148      	cbz	r0, 80084f8 <GUI_SetFuncDrawAlpha+0x18>
 80084e4:	b149      	cbz	r1, 80084fa <GUI_SetFuncDrawAlpha+0x1a>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2000      	movs	r0, #0
 80084ea:	4c05      	ldr	r4, [pc, #20]	; (8008500 <GUI_SetFuncDrawAlpha+0x20>)
 80084ec:	4a05      	ldr	r2, [pc, #20]	; (8008504 <GUI_SetFuncDrawAlpha+0x24>)
 80084ee:	6021      	str	r1, [r4, #0]
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	4601      	mov	r1, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	2001      	movs	r0, #1
 80084fe:	e7f4      	b.n	80084ea <GUI_SetFuncDrawAlpha+0xa>
 8008500:	2001bd7c 	.word	0x2001bd7c
 8008504:	2001bd80 	.word	0x2001bd80

08008508 <GUI__ExpandPixelIndicesEx>:
 8008508:	2900      	cmp	r1, #0
 800850a:	dd2a      	ble.n	8008562 <GUI__ExpandPixelIndicesEx+0x5a>
 800850c:	2a08      	cmp	r2, #8
 800850e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008512:	4604      	mov	r4, r0
 8008514:	685e      	ldr	r6, [r3, #4]
 8008516:	dd03      	ble.n	8008520 <GUI__ExpandPixelIndicesEx+0x18>
 8008518:	2a10      	cmp	r2, #16
 800851a:	dd0c      	ble.n	8008536 <GUI__ExpandPixelIndicesEx+0x2e>
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	1e53      	subs	r3, r2, #1
 8008522:	2b07      	cmp	r3, #7
 8008524:	d805      	bhi.n	8008532 <GUI__ExpandPixelIndicesEx+0x2a>
 8008526:	e8df f003 	tbb	[pc, r3]
 800852a:	532a      	.short	0x532a
 800852c:	04047c04 	.word	0x04047c04
 8008530:	1d04      	.short	0x1d04
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	695d      	ldr	r5, [r3, #20]
 8008538:	b135      	cbz	r5, 8008548 <GUI__ExpandPixelIndicesEx+0x40>
 800853a:	460a      	mov	r2, r1
 800853c:	46ac      	mov	ip, r5
 800853e:	4621      	mov	r1, r4
 8008540:	2302      	movs	r3, #2
 8008542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008546:	4760      	bx	ip
 8008548:	0049      	lsls	r1, r1, #1
 800854a:	440c      	add	r4, r1
 800854c:	1865      	adds	r5, r4, r1
 800854e:	1a67      	subs	r7, r4, r1
 8008550:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 8008554:	47b0      	blx	r6
 8008556:	42bc      	cmp	r4, r7
 8008558:	f845 0d04 	str.w	r0, [r5, #-4]!
 800855c:	d1f8      	bne.n	8008550 <GUI__ExpandPixelIndicesEx+0x48>
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	4770      	bx	lr
 8008564:	1865      	adds	r5, r4, r1
 8008566:	1a6f      	subs	r7, r5, r1
 8008568:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800856c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8008570:	47b0      	blx	r6
 8008572:	42bd      	cmp	r5, r7
 8008574:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008578:	d1f8      	bne.n	800856c <GUI__ExpandPixelIndicesEx+0x64>
 800857a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857e:	1e4f      	subs	r7, r1, #1
 8008580:	10fb      	asrs	r3, r7, #3
 8008582:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8008586:	f007 0a07 	and.w	sl, r7, #7
 800858a:	f04f 0880 	mov.w	r8, #128	; 0x80
 800858e:	3901      	subs	r1, #1
 8008590:	1e5a      	subs	r2, r3, #1
 8008592:	fa48 f80a 	asr.w	r8, r8, sl
 8008596:	f814 9003 	ldrb.w	r9, [r4, r3]
 800859a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 800859e:	fa5f f888 	uxtb.w	r8, r8
 80085a2:	4414      	add	r4, r2
 80085a4:	f1ca 0307 	rsb	r3, sl, #7
 80085a8:	ea08 0009 	and.w	r0, r8, r9
 80085ac:	4118      	asrs	r0, r3
 80085ae:	47b0      	blx	r6
 80085b0:	f845 0904 	str.w	r0, [r5], #-4
 80085b4:	f1ba 0f00 	cmp.w	sl, #0
 80085b8:	d15f      	bne.n	800867a <GUI__ExpandPixelIndicesEx+0x172>
 80085ba:	f894 9000 	ldrb.w	r9, [r4]
 80085be:	f04f 0801 	mov.w	r8, #1
 80085c2:	3c01      	subs	r4, #1
 80085c4:	f04f 0a07 	mov.w	sl, #7
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	d0b2      	beq.n	8008532 <GUI__ExpandPixelIndicesEx+0x2a>
 80085cc:	3f01      	subs	r7, #1
 80085ce:	e7e9      	b.n	80085a4 <GUI__ExpandPixelIndicesEx+0x9c>
 80085d0:	1e4f      	subs	r7, r1, #1
 80085d2:	f007 0903 	and.w	r9, r7, #3
 80085d6:	10bb      	asrs	r3, r7, #2
 80085d8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80085dc:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80085e0:	25c0      	movs	r5, #192	; 0xc0
 80085e2:	3901      	subs	r1, #1
 80085e4:	4105      	asrs	r5, r0
 80085e6:	1e5a      	subs	r2, r3, #1
 80085e8:	f814 8003 	ldrb.w	r8, [r4, r3]
 80085ec:	eb04 0a81 	add.w	sl, r4, r1, lsl #2
 80085f0:	b2ed      	uxtb	r5, r5
 80085f2:	4414      	add	r4, r2
 80085f4:	ea05 0308 	and.w	r3, r5, r8
 80085f8:	f1c0 0006 	rsb	r0, r0, #6
 80085fc:	fa43 f000 	asr.w	r0, r3, r0
 8008600:	47b0      	blx	r6
 8008602:	f84a 0904 	str.w	r0, [sl], #-4
 8008606:	f1b9 0f00 	cmp.w	r9, #0
 800860a:	d144      	bne.n	8008696 <GUI__ExpandPixelIndicesEx+0x18e>
 800860c:	2503      	movs	r5, #3
 800860e:	f894 8000 	ldrb.w	r8, [r4]
 8008612:	46a9      	mov	r9, r5
 8008614:	3c01      	subs	r4, #1
 8008616:	2f00      	cmp	r7, #0
 8008618:	d08b      	beq.n	8008532 <GUI__ExpandPixelIndicesEx+0x2a>
 800861a:	3f01      	subs	r7, #1
 800861c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8008620:	e7e8      	b.n	80085f4 <GUI__ExpandPixelIndicesEx+0xec>
 8008622:	1e4f      	subs	r7, r1, #1
 8008624:	f007 0801 	and.w	r8, r7, #1
 8008628:	107a      	asrs	r2, r7, #1
 800862a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800862e:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8008632:	23f0      	movs	r3, #240	; 0xf0
 8008634:	3901      	subs	r1, #1
 8008636:	4103      	asrs	r3, r0
 8008638:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800863c:	5ca5      	ldrb	r5, [r4, r2]
 800863e:	eb04 0981 	add.w	r9, r4, r1, lsl #2
 8008642:	fa5f fa83 	uxtb.w	sl, r3
 8008646:	4474      	add	r4, lr
 8008648:	ea0a 0305 	and.w	r3, sl, r5
 800864c:	f1c0 0004 	rsb	r0, r0, #4
 8008650:	fa43 f000 	asr.w	r0, r3, r0
 8008654:	47b0      	blx	r6
 8008656:	f849 0904 	str.w	r0, [r9], #-4
 800865a:	f1b8 0f00 	cmp.w	r8, #0
 800865e:	d113      	bne.n	8008688 <GUI__ExpandPixelIndicesEx+0x180>
 8008660:	7825      	ldrb	r5, [r4, #0]
 8008662:	f04f 0a0f 	mov.w	sl, #15
 8008666:	3c01      	subs	r4, #1
 8008668:	f04f 0801 	mov.w	r8, #1
 800866c:	2f00      	cmp	r7, #0
 800866e:	f43f af60 	beq.w	8008532 <GUI__ExpandPixelIndicesEx+0x2a>
 8008672:	3f01      	subs	r7, #1
 8008674:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8008678:	e7e6      	b.n	8008648 <GUI__ExpandPixelIndicesEx+0x140>
 800867a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800867e:	fa5f f888 	uxtb.w	r8, r8
 8008682:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008686:	e79f      	b.n	80085c8 <GUI__ExpandPixelIndicesEx+0xc0>
 8008688:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800868c:	fa5f fa83 	uxtb.w	sl, r3
 8008690:	f04f 0800 	mov.w	r8, #0
 8008694:	e7ea      	b.n	800866c <GUI__ExpandPixelIndicesEx+0x164>
 8008696:	00ad      	lsls	r5, r5, #2
 8008698:	b2ed      	uxtb	r5, r5
 800869a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800869e:	e7ba      	b.n	8008616 <GUI__ExpandPixelIndicesEx+0x10e>

080086a0 <GUI__IntersectRect>:
 80086a0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80086a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	bfb8      	it	lt
 80086ac:	8003      	strhlt	r3, [r0, #0]
 80086ae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80086b2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bfb8      	it	lt
 80086ba:	8043      	strhlt	r3, [r0, #2]
 80086bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80086c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	bfc8      	it	gt
 80086c8:	8083      	strhgt	r3, [r0, #4]
 80086ca:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80086ce:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	bfc8      	it	gt
 80086d6:	80c3      	strhgt	r3, [r0, #6]
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop

080086dc <GUI__IntersectRects>:
 80086dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086de:	f9b2 c000 	ldrsh.w	ip, [r2]
 80086e2:	f9b1 5000 	ldrsh.w	r5, [r1]
 80086e6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80086ea:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80086ee:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80086f2:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80086f6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80086fa:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
 80086fe:	45ac      	cmp	ip, r5
 8008700:	4661      	mov	r1, ip
 8008702:	bfb8      	it	lt
 8008704:	4629      	movlt	r1, r5
 8008706:	42a3      	cmp	r3, r4
 8008708:	bfb8      	it	lt
 800870a:	4623      	movlt	r3, r4
 800870c:	4572      	cmp	r2, lr
 800870e:	bfa8      	it	ge
 8008710:	4672      	movge	r2, lr
 8008712:	42b7      	cmp	r7, r6
 8008714:	463c      	mov	r4, r7
 8008716:	bfa8      	it	ge
 8008718:	4634      	movge	r4, r6
 800871a:	4291      	cmp	r1, r2
 800871c:	8001      	strh	r1, [r0, #0]
 800871e:	8043      	strh	r3, [r0, #2]
 8008720:	8082      	strh	r2, [r0, #4]
 8008722:	80c4      	strh	r4, [r0, #6]
 8008724:	dc04      	bgt.n	8008730 <GUI__IntersectRects+0x54>
 8008726:	42a3      	cmp	r3, r4
 8008728:	bfcc      	ite	gt
 800872a:	2000      	movgt	r0, #0
 800872c:	2001      	movle	r0, #1
 800872e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008730:	2000      	movs	r0, #0
 8008732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008734 <GUI__memset>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	4606      	mov	r6, r0
 8008738:	b14a      	cbz	r2, 800874e <GUI__memset+0x1a>
 800873a:	0784      	lsls	r4, r0, #30
 800873c:	b2c9      	uxtb	r1, r1
 800873e:	d008      	beq.n	8008752 <GUI__memset+0x1e>
 8008740:	e001      	b.n	8008746 <GUI__memset+0x12>
 8008742:	0783      	lsls	r3, r0, #30
 8008744:	d005      	beq.n	8008752 <GUI__memset+0x1e>
 8008746:	3a01      	subs	r2, #1
 8008748:	f800 1b01 	strb.w	r1, [r0], #1
 800874c:	d1f9      	bne.n	8008742 <GUI__memset+0xe>
 800874e:	4630      	mov	r0, r6
 8008750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008752:	0897      	lsrs	r7, r2, #2
 8008754:	463b      	mov	r3, r7
 8008756:	b357      	cbz	r7, 80087ae <GUI__memset+0x7a>
 8008758:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 800875c:	2f03      	cmp	r7, #3
 800875e:	f002 0203 	and.w	r2, r2, #3
 8008762:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8008766:	d916      	bls.n	8008796 <GUI__memset+0x62>
 8008768:	f100 0310 	add.w	r3, r0, #16
 800876c:	463d      	mov	r5, r7
 800876e:	3d04      	subs	r5, #4
 8008770:	2d03      	cmp	r5, #3
 8008772:	f843 4c10 	str.w	r4, [r3, #-16]
 8008776:	f843 4c0c 	str.w	r4, [r3, #-12]
 800877a:	f843 4c08 	str.w	r4, [r3, #-8]
 800877e:	f843 4c04 	str.w	r4, [r3, #-4]
 8008782:	f103 0310 	add.w	r3, r3, #16
 8008786:	dcf2      	bgt.n	800876e <GUI__memset+0x3a>
 8008788:	3f04      	subs	r7, #4
 800878a:	08bb      	lsrs	r3, r7, #2
 800878c:	1c5d      	adds	r5, r3, #1
 800878e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8008792:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 8008796:	b143      	cbz	r3, 80087aa <GUI__memset+0x76>
 8008798:	2b01      	cmp	r3, #1
 800879a:	6004      	str	r4, [r0, #0]
 800879c:	d003      	beq.n	80087a6 <GUI__memset+0x72>
 800879e:	2b02      	cmp	r3, #2
 80087a0:	6044      	str	r4, [r0, #4]
 80087a2:	bf18      	it	ne
 80087a4:	6084      	strne	r4, [r0, #8]
 80087a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d0cf      	beq.n	800874e <GUI__memset+0x1a>
 80087ae:	f008 fd8e 	bl	80112ce <memset>
 80087b2:	4630      	mov	r0, r6
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b6:	bf00      	nop

080087b8 <_SetBkColor>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4c0b      	ldr	r4, [pc, #44]	; (80087e8 <_SetBkColor+0x30>)
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80087c0:	4281      	cmp	r1, r0
 80087c2:	d00d      	beq.n	80087e0 <_SetBkColor+0x28>
 80087c4:	7c55      	ldrb	r5, [r2, #17]
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <_SetBkColor+0x34>)
 80087c8:	6350      	str	r0, [r2, #52]	; 0x34
 80087ca:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4798      	blx	r3
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	7c1a      	ldrb	r2, [r3, #16]
 80087d8:	0752      	lsls	r2, r2, #29
 80087da:	d402      	bmi.n	80087e2 <_SetBkColor+0x2a>
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	6018      	str	r0, [r3, #0]
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
 80087e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e4:	6018      	str	r0, [r3, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	20000018 	.word	0x20000018
 80087ec:	2001bd6c 	.word	0x2001bd6c

080087f0 <_SetColor>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4c0b      	ldr	r4, [pc, #44]	; (8008820 <_SetColor+0x30>)
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80087f8:	4281      	cmp	r1, r0
 80087fa:	d00d      	beq.n	8008818 <_SetColor+0x28>
 80087fc:	7c55      	ldrb	r5, [r2, #17]
 80087fe:	4909      	ldr	r1, [pc, #36]	; (8008824 <_SetColor+0x34>)
 8008800:	6310      	str	r0, [r2, #48]	; 0x30
 8008802:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4798      	blx	r3
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	7c1a      	ldrb	r2, [r3, #16]
 8008810:	0752      	lsls	r2, r2, #29
 8008812:	d402      	bmi.n	800881a <_SetColor+0x2a>
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	6018      	str	r0, [r3, #0]
 8008818:	bd38      	pop	{r3, r4, r5, pc}
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	6018      	str	r0, [r3, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20000018 	.word	0x20000018
 8008824:	2001bd6c 	.word	0x2001bd6c

08008828 <_SetDrawMode>:
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <_SetDrawMode+0x2c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	7c1a      	ldrb	r2, [r3, #16]
 800882e:	ea82 0100 	eor.w	r1, r2, r0
 8008832:	0749      	lsls	r1, r1, #29
 8008834:	d50a      	bpl.n	800884c <_SetDrawMode+0x24>
 8008836:	b470      	push	{r4, r5, r6}
 8008838:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800883a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800883c:	680e      	ldr	r6, [r1, #0]
 800883e:	6825      	ldr	r5, [r4, #0]
 8008840:	6026      	str	r6, [r4, #0]
 8008842:	600d      	str	r5, [r1, #0]
 8008844:	7418      	strb	r0, [r3, #16]
 8008846:	bc70      	pop	{r4, r5, r6}
 8008848:	4610      	mov	r0, r2
 800884a:	4770      	bx	lr
 800884c:	7418      	strb	r0, [r3, #16]
 800884e:	4610      	mov	r0, r2
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000018 	.word	0x20000018

08008858 <LCD_SetDrawMode>:
 8008858:	4b01      	ldr	r3, [pc, #4]	; (8008860 <LCD_SetDrawMode+0x8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	4718      	bx	r3
 8008860:	20000038 	.word	0x20000038

08008864 <LCD_DrawPixel>:
 8008864:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <LCD_DrawPixel+0x64>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800886c:	428a      	cmp	r2, r1
 800886e:	dc1d      	bgt.n	80088ac <LCD_DrawPixel+0x48>
 8008870:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008874:	4291      	cmp	r1, r2
 8008876:	dc19      	bgt.n	80088ac <LCD_DrawPixel+0x48>
 8008878:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800887c:	4282      	cmp	r2, r0
 800887e:	dc15      	bgt.n	80088ac <LCD_DrawPixel+0x48>
 8008880:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008884:	4290      	cmp	r0, r2
 8008886:	dc11      	bgt.n	80088ac <LCD_DrawPixel+0x48>
 8008888:	b430      	push	{r4, r5}
 800888a:	7c1a      	ldrb	r2, [r3, #16]
 800888c:	07d2      	lsls	r2, r2, #31
 800888e:	d40e      	bmi.n	80088ae <LCD_DrawPixel+0x4a>
 8008890:	4a0e      	ldr	r2, [pc, #56]	; (80088cc <LCD_DrawPixel+0x68>)
 8008892:	7c5c      	ldrb	r4, [r3, #17]
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68e5      	ldr	r5, [r4, #12]
 800889e:	69ad      	ldr	r5, [r5, #24]
 80088a0:	460a      	mov	r2, r1
 80088a2:	46ac      	mov	ip, r5
 80088a4:	4601      	mov	r1, r0
 80088a6:	4620      	mov	r0, r4
 80088a8:	bc30      	pop	{r4, r5}
 80088aa:	4760      	bx	ip
 80088ac:	4770      	bx	lr
 80088ae:	7c5a      	ldrb	r2, [r3, #17]
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <LCD_DrawPixel+0x68>)
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	68dc      	ldr	r4, [r3, #12]
 80088b8:	69e4      	ldr	r4, [r4, #28]
 80088ba:	460a      	mov	r2, r1
 80088bc:	4601      	mov	r1, r0
 80088be:	4618      	mov	r0, r3
 80088c0:	4623      	mov	r3, r4
 80088c2:	bc30      	pop	{r4, r5}
 80088c4:	4718      	bx	r3
 80088c6:	bf00      	nop
 80088c8:	20000018 	.word	0x20000018
 80088cc:	2001bd6c 	.word	0x2001bd6c

080088d0 <LCD_DrawHLine>:
 80088d0:	4b12      	ldr	r3, [pc, #72]	; (800891c <LCD_DrawHLine+0x4c>)
 80088d2:	b430      	push	{r4, r5}
 80088d4:	681c      	ldr	r4, [r3, #0]
 80088d6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80088da:	428b      	cmp	r3, r1
 80088dc:	dc0f      	bgt.n	80088fe <LCD_DrawHLine+0x2e>
 80088de:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80088e2:	4299      	cmp	r1, r3
 80088e4:	dc0b      	bgt.n	80088fe <LCD_DrawHLine+0x2e>
 80088e6:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	42a8      	cmp	r0, r5
 80088f0:	bfb8      	it	lt
 80088f2:	4628      	movlt	r0, r5
 80088f4:	429a      	cmp	r2, r3
 80088f6:	bfa8      	it	ge
 80088f8:	461a      	movge	r2, r3
 80088fa:	4290      	cmp	r0, r2
 80088fc:	dd01      	ble.n	8008902 <LCD_DrawHLine+0x32>
 80088fe:	bc30      	pop	{r4, r5}
 8008900:	4770      	bx	lr
 8008902:	4b07      	ldr	r3, [pc, #28]	; (8008920 <LCD_DrawHLine+0x50>)
 8008904:	7c64      	ldrb	r4, [r4, #17]
 8008906:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800890a:	68e5      	ldr	r5, [r4, #12]
 800890c:	68ad      	ldr	r5, [r5, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	46ac      	mov	ip, r5
 8008912:	460a      	mov	r2, r1
 8008914:	4601      	mov	r1, r0
 8008916:	4620      	mov	r0, r4
 8008918:	bc30      	pop	{r4, r5}
 800891a:	4760      	bx	ip
 800891c:	20000018 	.word	0x20000018
 8008920:	2001bd6c 	.word	0x2001bd6c

08008924 <LCD_FillRect>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4c15      	ldr	r4, [pc, #84]	; (800897c <LCD_FillRect+0x58>)
 8008928:	6824      	ldr	r4, [r4, #0]
 800892a:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800892e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008932:	42b0      	cmp	r0, r6
 8008934:	bfb8      	it	lt
 8008936:	4630      	movlt	r0, r6
 8008938:	42aa      	cmp	r2, r5
 800893a:	bfa8      	it	ge
 800893c:	462a      	movge	r2, r5
 800893e:	4282      	cmp	r2, r0
 8008940:	b082      	sub	sp, #8
 8008942:	db0b      	blt.n	800895c <LCD_FillRect+0x38>
 8008944:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 8008948:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800894c:	42b1      	cmp	r1, r6
 800894e:	bfb8      	it	lt
 8008950:	4631      	movlt	r1, r6
 8008952:	42ab      	cmp	r3, r5
 8008954:	bfa8      	it	ge
 8008956:	462b      	movge	r3, r5
 8008958:	4299      	cmp	r1, r3
 800895a:	dd01      	ble.n	8008960 <LCD_FillRect+0x3c>
 800895c:	b002      	add	sp, #8
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	7c65      	ldrb	r5, [r4, #17]
 8008962:	4c07      	ldr	r4, [pc, #28]	; (8008980 <LCD_FillRect+0x5c>)
 8008964:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8008968:	68e5      	ldr	r5, [r4, #12]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	460a      	mov	r2, r1
 8008970:	4601      	mov	r1, r0
 8008972:	4620      	mov	r0, r4
 8008974:	692c      	ldr	r4, [r5, #16]
 8008976:	47a0      	blx	r4
 8008978:	b002      	add	sp, #8
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	20000018 	.word	0x20000018
 8008980:	2001bd6c 	.word	0x2001bd6c

08008984 <LCD__DrawBitmap_1bpp>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	b091      	sub	sp, #68	; 0x44
 800898a:	4c82      	ldr	r4, [pc, #520]	; (8008b94 <LCD__DrawBitmap_1bpp+0x210>)
 800898c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800898e:	950e      	str	r5, [sp, #56]	; 0x38
 8008990:	462e      	mov	r6, r5
 8008992:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008994:	950c      	str	r5, [sp, #48]	; 0x30
 8008996:	6824      	ldr	r4, [r4, #0]
 8008998:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800899a:	9506      	str	r5, [sp, #24]
 800899c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800899e:	9508      	str	r5, [sp, #32]
 80089a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80089a4:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 80089a8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80089aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80089ac:	9205      	str	r2, [sp, #20]
 80089ae:	930d      	str	r3, [sp, #52]	; 0x34
 80089b0:	b12c      	cbz	r4, 80089be <LCD__DrawBitmap_1bpp+0x3a>
 80089b2:	6824      	ldr	r4, [r4, #0]
 80089b4:	46a4      	mov	ip, r4
 80089b6:	b011      	add	sp, #68	; 0x44
 80089b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	4760      	bx	ip
 80089be:	ea4a 0306 	orr.w	r3, sl, r6
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	4689      	mov	r9, r1
 80089c6:	f000 8091 	beq.w	8008aec <LCD__DrawBitmap_1bpp+0x168>
 80089ca:	f1ce 0308 	rsb	r3, lr, #8
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f340 8087 	ble.w	8008ae6 <LCD__DrawBitmap_1bpp+0x162>
 80089d8:	4b6f      	ldr	r3, [pc, #444]	; (8008b98 <LCD__DrawBitmap_1bpp+0x214>)
 80089da:	940a      	str	r4, [sp, #40]	; 0x28
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	9104      	str	r1, [sp, #16]
 80089e0:	46a0      	mov	r8, r4
 80089e2:	46f1      	mov	r9, lr
 80089e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089e6:	9904      	ldr	r1, [sp, #16]
 80089e8:	1853      	adds	r3, r2, r1
 80089ea:	461a      	mov	r2, r3
 80089ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ee:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80089f2:	3a01      	subs	r2, #1
 80089f4:	4293      	cmp	r3, r2
 80089f6:	9209      	str	r2, [sp, #36]	; 0x24
 80089f8:	dc68      	bgt.n	8008acc <LCD__DrawBitmap_1bpp+0x148>
 80089fa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80089fe:	428b      	cmp	r3, r1
 8008a00:	db64      	blt.n	8008acc <LCD__DrawBitmap_1bpp+0x148>
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dd61      	ble.n	8008acc <LCD__DrawBitmap_1bpp+0x148>
 8008a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a0a:	9f06      	ldr	r7, [sp, #24]
 8008a0c:	9707      	str	r7, [sp, #28]
 8008a0e:	2600      	movs	r6, #0
 8008a10:	4635      	mov	r5, r6
 8008a12:	eb03 040a 	add.w	r4, r3, sl
 8008a16:	e04c      	b.n	8008ab2 <LCD__DrawBitmap_1bpp+0x12e>
 8008a18:	9b02      	ldr	r3, [sp, #8]
 8008a1a:	ebc9 0606 	rsb	r6, r9, r6
 8008a1e:	fa48 f303 	asr.w	r3, r8, r3
 8008a22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8008a26:	fa08 f809 	lsl.w	r8, r8, r9
 8008a2a:	fa5f f888 	uxtb.w	r8, r8
 8008a2e:	d102      	bne.n	8008a36 <LCD__DrawBitmap_1bpp+0xb2>
 8008a30:	7c02      	ldrb	r2, [r0, #16]
 8008a32:	0792      	lsls	r2, r2, #30
 8008a34:	d438      	bmi.n	8008aa8 <LCD__DrawBitmap_1bpp+0x124>
 8008a36:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008a3a:	f8de 2000 	ldr.w	r2, [lr]
 8008a3e:	9203      	str	r2, [sp, #12]
 8008a40:	9a08      	ldr	r2, [sp, #32]
 8008a42:	b10a      	cbz	r2, 8008a48 <LCD__DrawBitmap_1bpp+0xc4>
 8008a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a48:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8008a4c:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8008a50:	f8ce 3000 	str.w	r3, [lr]
 8008a54:	1e62      	subs	r2, r4, #1
 8008a56:	4559      	cmp	r1, fp
 8008a58:	bfb8      	it	lt
 8008a5a:	4659      	movlt	r1, fp
 8008a5c:	4562      	cmp	r2, ip
 8008a5e:	4613      	mov	r3, r2
 8008a60:	bfa8      	it	ge
 8008a62:	4663      	movge	r3, ip
 8008a64:	428b      	cmp	r3, r1
 8008a66:	db1c      	blt.n	8008aa2 <LCD__DrawBitmap_1bpp+0x11e>
 8008a68:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008a6c:	9f04      	ldr	r7, [sp, #16]
 8008a6e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008a72:	42ba      	cmp	r2, r7
 8008a74:	bfb8      	it	lt
 8008a76:	463a      	movlt	r2, r7
 8008a78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a7a:	45bc      	cmp	ip, r7
 8008a7c:	bfa8      	it	ge
 8008a7e:	46bc      	movge	ip, r7
 8008a80:	4562      	cmp	r2, ip
 8008a82:	dc0e      	bgt.n	8008aa2 <LCD__DrawBitmap_1bpp+0x11e>
 8008a84:	7c40      	ldrb	r0, [r0, #17]
 8008a86:	4f45      	ldr	r7, [pc, #276]	; (8008b9c <LCD__DrawBitmap_1bpp+0x218>)
 8008a88:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008a8c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8008a90:	f8cd c000 	str.w	ip, [sp]
 8008a94:	f8de b010 	ldr.w	fp, [lr, #16]
 8008a98:	47d8      	blx	fp
 8008a9a:	4b3f      	ldr	r3, [pc, #252]	; (8008b98 <LCD__DrawBitmap_1bpp+0x214>)
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	f8ce 3000 	str.w	r3, [lr]
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	3501      	adds	r5, #1
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	4454      	add	r4, sl
 8008ab0:	d00c      	beq.n	8008acc <LCD__DrawBitmap_1bpp+0x148>
 8008ab2:	ebca 0104 	rsb	r1, sl, r4
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	d1ae      	bne.n	8008a18 <LCD__DrawBitmap_1bpp+0x94>
 8008aba:	9a07      	ldr	r2, [sp, #28]
 8008abc:	9e02      	ldr	r6, [sp, #8]
 8008abe:	f892 8000 	ldrb.w	r8, [r2]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	4633      	mov	r3, r6
 8008aca:	e7a8      	b.n	8008a1e <LCD__DrawBitmap_1bpp+0x9a>
 8008acc:	9a06      	ldr	r2, [sp, #24]
 8008ace:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad2:	440a      	add	r2, r1
 8008ad4:	9206      	str	r2, [sp, #24]
 8008ad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ad8:	9204      	str	r2, [sp, #16]
 8008ada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008adc:	3301      	adds	r3, #1
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae2:	f47f af7f 	bne.w	80089e4 <LCD__DrawBitmap_1bpp+0x60>
 8008ae6:	b011      	add	sp, #68	; 0x44
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <LCD__DrawBitmap_1bpp+0x214>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008af4:	1a53      	subs	r3, r2, r1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dd47      	ble.n	8008b8a <LCD__DrawBitmap_1bpp+0x206>
 8008afa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008afc:	1acc      	subs	r4, r1, r3
 8008afe:	2c00      	cmp	r4, #0
 8008b00:	ddf1      	ble.n	8008ae6 <LCD__DrawBitmap_1bpp+0x162>
 8008b02:	9e06      	ldr	r6, [sp, #24]
 8008b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b06:	fb01 6303 	mla	r3, r1, r3, r6
 8008b0a:	9306      	str	r3, [sp, #24]
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8008b12:	444b      	add	r3, r9
 8008b14:	3b01      	subs	r3, #1
 8008b16:	1a5b      	subs	r3, r3, r1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dd02      	ble.n	8008b22 <LCD__DrawBitmap_1bpp+0x19e>
 8008b1c:	1ae4      	subs	r4, r4, r3
 8008b1e:	2c00      	cmp	r4, #0
 8008b20:	dde1      	ble.n	8008ae6 <LCD__DrawBitmap_1bpp+0x162>
 8008b22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b24:	9e05      	ldr	r6, [sp, #20]
 8008b26:	198b      	adds	r3, r1, r6
 8008b28:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	1a5b      	subs	r3, r3, r1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dd01      	ble.n	8008b38 <LCD__DrawBitmap_1bpp+0x1b4>
 8008b34:	1af3      	subs	r3, r6, r3
 8008b36:	9305      	str	r3, [sp, #20]
 8008b38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b3a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8008b3e:	1b49      	subs	r1, r1, r5
 8008b40:	4299      	cmp	r1, r3
 8008b42:	da0d      	bge.n	8008b60 <LCD__DrawBitmap_1bpp+0x1dc>
 8008b44:	1a5b      	subs	r3, r3, r1
 8008b46:	9f06      	ldr	r7, [sp, #24]
 8008b48:	441d      	add	r5, r3
 8008b4a:	eb07 07e5 	add.w	r7, r7, r5, asr #3
 8008b4e:	9706      	str	r7, [sp, #24]
 8008b50:	9f05      	ldr	r7, [sp, #20]
 8008b52:	f023 0607 	bic.w	r6, r3, #7
 8008b56:	1afb      	subs	r3, r7, r3
 8008b58:	f005 0507 	and.w	r5, r5, #7
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	4431      	add	r1, r6
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	ddbf      	ble.n	8008ae6 <LCD__DrawBitmap_1bpp+0x162>
 8008b66:	7c40      	ldrb	r0, [r0, #17]
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <LCD__DrawBitmap_1bpp+0x218>)
 8008b6a:	9f08      	ldr	r7, [sp, #32]
 8008b6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008b70:	9b05      	ldr	r3, [sp, #20]
 8008b72:	68c6      	ldr	r6, [r0, #12]
 8008b74:	951e      	str	r5, [sp, #120]	; 0x78
 8008b76:	9d06      	ldr	r5, [sp, #24]
 8008b78:	951d      	str	r5, [sp, #116]	; 0x74
 8008b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b7c:	971f      	str	r7, [sp, #124]	; 0x7c
 8008b7e:	951c      	str	r5, [sp, #112]	; 0x70
 8008b80:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8008b84:	941a      	str	r4, [sp, #104]	; 0x68
 8008b86:	6874      	ldr	r4, [r6, #4]
 8008b88:	e714      	b.n	80089b4 <LCD__DrawBitmap_1bpp+0x30>
 8008b8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	4623      	mov	r3, r4
 8008b90:	e7bd      	b.n	8008b0e <LCD__DrawBitmap_1bpp+0x18a>
 8008b92:	bf00      	nop
 8008b94:	2001bd28 	.word	0x2001bd28
 8008b98:	20000018 	.word	0x20000018
 8008b9c:	2001bd6c 	.word	0x2001bd6c

08008ba0 <LCD_DrawBitmap>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	4cb6      	ldr	r4, [pc, #728]	; (8008e80 <LCD_DrawBitmap+0x2e0>)
 8008ba6:	b091      	sub	sp, #68	; 0x44
 8008ba8:	f8d4 e000 	ldr.w	lr, [r4]
 8008bac:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008bae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008bb0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008bb2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8008bb4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008bb8:	950d      	str	r5, [sp, #52]	; 0x34
 8008bba:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8008bbe:	960e      	str	r6, [sp, #56]	; 0x38
 8008bc0:	9707      	str	r7, [sp, #28]
 8008bc2:	9408      	str	r4, [sp, #32]
 8008bc4:	900f      	str	r0, [sp, #60]	; 0x3c
 8008bc6:	9205      	str	r2, [sp, #20]
 8008bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008bca:	f1be 0f00 	cmp.w	lr, #0
 8008bce:	d006      	beq.n	8008bde <LCD_DrawBitmap+0x3e>
 8008bd0:	f8de 4000 	ldr.w	r4, [lr]
 8008bd4:	46a4      	mov	ip, r4
 8008bd6:	b011      	add	sp, #68	; 0x44
 8008bd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	4760      	bx	ip
 8008bde:	ea4a 0305 	orr.w	r3, sl, r5
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	4689      	mov	r9, r1
 8008be6:	f000 8092 	beq.w	8008d0e <LCD_DrawBitmap+0x16e>
 8008bea:	f1cc 0308 	rsb	r3, ip, #8
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f340 8088 	ble.w	8008d08 <LCD_DrawBitmap+0x168>
 8008bf8:	4ba2      	ldr	r3, [pc, #648]	; (8008e84 <LCD_DrawBitmap+0x2e4>)
 8008bfa:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	9104      	str	r1, [sp, #16]
 8008c02:	46f0      	mov	r8, lr
 8008c04:	46e1      	mov	r9, ip
 8008c06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c08:	9904      	ldr	r1, [sp, #16]
 8008c0a:	1853      	adds	r3, r2, r1
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8008c14:	3a01      	subs	r2, #1
 8008c16:	4293      	cmp	r3, r2
 8008c18:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1a:	dc68      	bgt.n	8008cee <LCD_DrawBitmap+0x14e>
 8008c1c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8008c20:	428b      	cmp	r3, r1
 8008c22:	db64      	blt.n	8008cee <LCD_DrawBitmap+0x14e>
 8008c24:	9b05      	ldr	r3, [sp, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	dd61      	ble.n	8008cee <LCD_DrawBitmap+0x14e>
 8008c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c2c:	9f07      	ldr	r7, [sp, #28]
 8008c2e:	9706      	str	r7, [sp, #24]
 8008c30:	2600      	movs	r6, #0
 8008c32:	4635      	mov	r5, r6
 8008c34:	eb03 040a 	add.w	r4, r3, sl
 8008c38:	e04c      	b.n	8008cd4 <LCD_DrawBitmap+0x134>
 8008c3a:	9b02      	ldr	r3, [sp, #8]
 8008c3c:	ebc9 0606 	rsb	r6, r9, r6
 8008c40:	fa48 f303 	asr.w	r3, r8, r3
 8008c44:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8008c48:	fa08 f809 	lsl.w	r8, r8, r9
 8008c4c:	fa5f f888 	uxtb.w	r8, r8
 8008c50:	d102      	bne.n	8008c58 <LCD_DrawBitmap+0xb8>
 8008c52:	7c02      	ldrb	r2, [r0, #16]
 8008c54:	0792      	lsls	r2, r2, #30
 8008c56:	d438      	bmi.n	8008cca <LCD_DrawBitmap+0x12a>
 8008c58:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008c5c:	f8de 2000 	ldr.w	r2, [lr]
 8008c60:	9203      	str	r2, [sp, #12]
 8008c62:	9a08      	ldr	r2, [sp, #32]
 8008c64:	b10a      	cbz	r2, 8008c6a <LCD_DrawBitmap+0xca>
 8008c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c6a:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8008c6e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8008c72:	f8ce 3000 	str.w	r3, [lr]
 8008c76:	1e62      	subs	r2, r4, #1
 8008c78:	4559      	cmp	r1, fp
 8008c7a:	bfb8      	it	lt
 8008c7c:	4659      	movlt	r1, fp
 8008c7e:	4562      	cmp	r2, ip
 8008c80:	4613      	mov	r3, r2
 8008c82:	bfa8      	it	ge
 8008c84:	4663      	movge	r3, ip
 8008c86:	428b      	cmp	r3, r1
 8008c88:	db1c      	blt.n	8008cc4 <LCD_DrawBitmap+0x124>
 8008c8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008c8e:	9f04      	ldr	r7, [sp, #16]
 8008c90:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008c94:	42ba      	cmp	r2, r7
 8008c96:	bfb8      	it	lt
 8008c98:	463a      	movlt	r2, r7
 8008c9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c9c:	45bc      	cmp	ip, r7
 8008c9e:	bfa8      	it	ge
 8008ca0:	46bc      	movge	ip, r7
 8008ca2:	4562      	cmp	r2, ip
 8008ca4:	dc0e      	bgt.n	8008cc4 <LCD_DrawBitmap+0x124>
 8008ca6:	7c40      	ldrb	r0, [r0, #17]
 8008ca8:	4f77      	ldr	r7, [pc, #476]	; (8008e88 <LCD_DrawBitmap+0x2e8>)
 8008caa:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008cae:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8008cb2:	f8cd c000 	str.w	ip, [sp]
 8008cb6:	f8de b010 	ldr.w	fp, [lr, #16]
 8008cba:	47d8      	blx	fp
 8008cbc:	4b71      	ldr	r3, [pc, #452]	; (8008e84 <LCD_DrawBitmap+0x2e4>)
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	f8ce 3000 	str.w	r3, [lr]
 8008cca:	9b05      	ldr	r3, [sp, #20]
 8008ccc:	3501      	adds	r5, #1
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	4454      	add	r4, sl
 8008cd2:	d00c      	beq.n	8008cee <LCD_DrawBitmap+0x14e>
 8008cd4:	ebca 0104 	rsb	r1, sl, r4
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d1ae      	bne.n	8008c3a <LCD_DrawBitmap+0x9a>
 8008cdc:	9a06      	ldr	r2, [sp, #24]
 8008cde:	9e02      	ldr	r6, [sp, #8]
 8008ce0:	f892 8000 	ldrb.w	r8, [r2]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	9306      	str	r3, [sp, #24]
 8008cea:	4633      	mov	r3, r6
 8008cec:	e7a8      	b.n	8008c40 <LCD_DrawBitmap+0xa0>
 8008cee:	9a07      	ldr	r2, [sp, #28]
 8008cf0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	440a      	add	r2, r1
 8008cf6:	9207      	str	r2, [sp, #28]
 8008cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cfa:	9204      	str	r2, [sp, #16]
 8008cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cfe:	3301      	adds	r3, #1
 8008d00:	429a      	cmp	r2, r3
 8008d02:	930a      	str	r3, [sp, #40]	; 0x28
 8008d04:	f47f af7f 	bne.w	8008c06 <LCD_DrawBitmap+0x66>
 8008d08:	b011      	add	sp, #68	; 0x44
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	4b5d      	ldr	r3, [pc, #372]	; (8008e84 <LCD_DrawBitmap+0x2e4>)
 8008d10:	6819      	ldr	r1, [r3, #0]
 8008d12:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8008d16:	ebc9 0302 	rsb	r3, r9, r2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f340 80c2 	ble.w	8008ea4 <LCD_DrawBitmap+0x304>
 8008d20:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d22:	1ac4      	subs	r4, r0, r3
 8008d24:	2c00      	cmp	r4, #0
 8008d26:	ddef      	ble.n	8008d08 <LCD_DrawBitmap+0x168>
 8008d28:	fb06 7303 	mla	r3, r6, r3, r7
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d30:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8008d34:	444b      	add	r3, r9
 8008d36:	3b01      	subs	r3, #1
 8008d38:	1a1b      	subs	r3, r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dd02      	ble.n	8008d44 <LCD_DrawBitmap+0x1a4>
 8008d3e:	1ae4      	subs	r4, r4, r3
 8008d40:	2c00      	cmp	r4, #0
 8008d42:	dde1      	ble.n	8008d08 <LCD_DrawBitmap+0x168>
 8008d44:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008d46:	9d05      	ldr	r5, [sp, #20]
 8008d48:	1943      	adds	r3, r0, r5
 8008d4a:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	1a1b      	subs	r3, r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dd01      	ble.n	8008d5a <LCD_DrawBitmap+0x1ba>
 8008d56:	1aeb      	subs	r3, r5, r3
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8008d5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d60:	4285      	cmp	r5, r0
 8008d62:	db16      	blt.n	8008d92 <LCD_DrawBitmap+0x1f2>
 8008d64:	2300      	movs	r3, #0
 8008d66:	9e05      	ldr	r6, [sp, #20]
 8008d68:	2e00      	cmp	r6, #0
 8008d6a:	ddcd      	ble.n	8008d08 <LCD_DrawBitmap+0x168>
 8008d6c:	7c48      	ldrb	r0, [r1, #17]
 8008d6e:	4946      	ldr	r1, [pc, #280]	; (8008e88 <LCD_DrawBitmap+0x2e8>)
 8008d70:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008d74:	9908      	ldr	r1, [sp, #32]
 8008d76:	68c5      	ldr	r5, [r0, #12]
 8008d78:	931e      	str	r3, [sp, #120]	; 0x78
 8008d7a:	9b07      	ldr	r3, [sp, #28]
 8008d7c:	931d      	str	r3, [sp, #116]	; 0x74
 8008d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d80:	911f      	str	r1, [sp, #124]	; 0x7c
 8008d82:	931c      	str	r3, [sp, #112]	; 0x70
 8008d84:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8008d88:	941a      	str	r4, [sp, #104]	; 0x68
 8008d8a:	4633      	mov	r3, r6
 8008d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d8e:	686c      	ldr	r4, [r5, #4]
 8008d90:	e720      	b.n	8008bd4 <LCD_DrawBitmap+0x34>
 8008d92:	9e05      	ldr	r6, [sp, #20]
 8008d94:	1b43      	subs	r3, r0, r5
 8008d96:	1af6      	subs	r6, r6, r3
 8008d98:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8008d9c:	9605      	str	r6, [sp, #20]
 8008d9e:	2d1f      	cmp	r5, #31
 8008da0:	d8e1      	bhi.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008da2:	a601      	add	r6, pc, #4	; (adr r6, 8008da8 <LCD_DrawBitmap+0x208>)
 8008da4:	f856 f025 	ldr.w	pc, [r6, r5, lsl #2]
 8008da8:	08008e8d 	.word	0x08008e8d
 8008dac:	08008e69 	.word	0x08008e69
 8008db0:	08008d67 	.word	0x08008d67
 8008db4:	08008e51 	.word	0x08008e51
 8008db8:	08008d67 	.word	0x08008d67
 8008dbc:	08008d67 	.word	0x08008d67
 8008dc0:	08008d67 	.word	0x08008d67
 8008dc4:	08008e45 	.word	0x08008e45
 8008dc8:	08008d67 	.word	0x08008d67
 8008dcc:	08008d67 	.word	0x08008d67
 8008dd0:	08008d67 	.word	0x08008d67
 8008dd4:	08008d67 	.word	0x08008d67
 8008dd8:	08008d67 	.word	0x08008d67
 8008ddc:	08008d67 	.word	0x08008d67
 8008de0:	08008d67 	.word	0x08008d67
 8008de4:	08008e37 	.word	0x08008e37
 8008de8:	08008d67 	.word	0x08008d67
 8008dec:	08008d67 	.word	0x08008d67
 8008df0:	08008d67 	.word	0x08008d67
 8008df4:	08008d67 	.word	0x08008d67
 8008df8:	08008d67 	.word	0x08008d67
 8008dfc:	08008d67 	.word	0x08008d67
 8008e00:	08008d67 	.word	0x08008d67
 8008e04:	08008e29 	.word	0x08008e29
 8008e08:	08008d67 	.word	0x08008d67
 8008e0c:	08008d67 	.word	0x08008d67
 8008e10:	08008d67 	.word	0x08008d67
 8008e14:	08008d67 	.word	0x08008d67
 8008e18:	08008d67 	.word	0x08008d67
 8008e1c:	08008d67 	.word	0x08008d67
 8008e20:	08008d67 	.word	0x08008d67
 8008e24:	08008e29 	.word	0x08008e29
 8008e28:	9d07      	ldr	r5, [sp, #28]
 8008e2a:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e30:	9307      	str	r3, [sp, #28]
 8008e32:	2300      	movs	r3, #0
 8008e34:	e797      	b.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008e36:	9d07      	ldr	r5, [sp, #28]
 8008e38:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e3a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008e3e:	9307      	str	r3, [sp, #28]
 8008e40:	2300      	movs	r3, #0
 8008e42:	e790      	b.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008e44:	9d07      	ldr	r5, [sp, #28]
 8008e46:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e48:	441d      	add	r5, r3
 8008e4a:	9507      	str	r5, [sp, #28]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e78a      	b.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008e50:	9d07      	ldr	r5, [sp, #28]
 8008e52:	eb05 0563 	add.w	r5, r5, r3, asr #1
 8008e56:	9507      	str	r5, [sp, #28]
 8008e58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e5a:	f023 0001 	bic.w	r0, r3, #1
 8008e5e:	4405      	add	r5, r0
 8008e60:	950f      	str	r5, [sp, #60]	; 0x3c
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	e77e      	b.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008e68:	9d07      	ldr	r5, [sp, #28]
 8008e6a:	eb05 05a3 	add.w	r5, r5, r3, asr #2
 8008e6e:	9507      	str	r5, [sp, #28]
 8008e70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e72:	f023 0003 	bic.w	r0, r3, #3
 8008e76:	4405      	add	r5, r0
 8008e78:	950f      	str	r5, [sp, #60]	; 0x3c
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	e772      	b.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008e80:	2001bd28 	.word	0x2001bd28
 8008e84:	20000018 	.word	0x20000018
 8008e88:	2001bd6c 	.word	0x2001bd6c
 8008e8c:	9d07      	ldr	r5, [sp, #28]
 8008e8e:	eb05 05e3 	add.w	r5, r5, r3, asr #3
 8008e92:	9507      	str	r5, [sp, #28]
 8008e94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e96:	f023 0007 	bic.w	r0, r3, #7
 8008e9a:	4405      	add	r5, r0
 8008e9c:	950f      	str	r5, [sp, #60]	; 0x3c
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	e760      	b.n	8008d66 <LCD_DrawBitmap+0x1c6>
 8008ea4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008ea6:	464a      	mov	r2, r9
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	e741      	b.n	8008d30 <LCD_DrawBitmap+0x190>

08008eac <LCD_SetClipRectMax>:
 8008eac:	4a04      	ldr	r2, [pc, #16]	; (8008ec0 <LCD_SetClipRectMax+0x14>)
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <LCD_SetClipRectMax+0x18>)
 8008eb0:	6811      	ldr	r1, [r2, #0]
 8008eb2:	7c4a      	ldrb	r2, [r1, #17]
 8008eb4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008eb8:	68c3      	ldr	r3, [r0, #12]
 8008eba:	3108      	adds	r1, #8
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	4718      	bx	r3
 8008ec0:	20000018 	.word	0x20000018
 8008ec4:	2001bd6c 	.word	0x2001bd6c

08008ec8 <emWin_LCD_Init>:
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	4e3e      	ldr	r6, [pc, #248]	; (8008fc8 <emWin_LCD_Init+0x100>)
 8008ece:	4f3f      	ldr	r7, [pc, #252]	; (8008fcc <emWin_LCD_Init+0x104>)
 8008ed0:	6831      	ldr	r1, [r6, #0]
 8008ed2:	7c4b      	ldrb	r3, [r1, #17]
 8008ed4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8008ed8:	68c3      	ldr	r3, [r0, #12]
 8008eda:	b084      	sub	sp, #16
 8008edc:	3108      	adds	r1, #8
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	4798      	blx	r3
 8008ee2:	f000 f8c7 	bl	8009074 <LCD_InitColors>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d15c      	bne.n	8008fa6 <emWin_LCD_Init+0xde>
 8008eec:	4605      	mov	r5, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f7fe fe68 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8008ef4:	210c      	movs	r1, #12
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	3501      	adds	r5, #1
 8008efa:	eb0d 0001 	add.w	r0, sp, r1
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	b143      	cbz	r3, 8008f14 <emWin_LCD_Init+0x4c>
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	4798      	blx	r3
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d05a      	beq.n	8008fc4 <emWin_LCD_Init+0xfc>
 8008f0e:	9803      	ldr	r0, [sp, #12]
 8008f10:	4798      	blx	r3
 8008f12:	4304      	orrs	r4, r0
 8008f14:	2d02      	cmp	r5, #2
 8008f16:	d1ea      	bne.n	8008eee <emWin_LCD_Init+0x26>
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	d144      	bne.n	8008fa6 <emWin_LCD_Init+0xde>
 8008f1c:	f000 f904 	bl	8009128 <LCD_InitLUT>
 8008f20:	4b2b      	ldr	r3, [pc, #172]	; (8008fd0 <emWin_LCD_Init+0x108>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d038      	beq.n	8008f9e <emWin_LCD_Init+0xd6>
 8008f2c:	4d29      	ldr	r5, [pc, #164]	; (8008fd4 <emWin_LCD_Init+0x10c>)
 8008f2e:	2401      	movs	r4, #1
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7fe fe47 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8008f36:	4603      	mov	r3, r0
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	3c01      	subs	r4, #1
 8008f3e:	b363      	cbz	r3, 8008f9a <emWin_LCD_Init+0xd2>
 8008f40:	f7ff f84a 	bl	8007fd8 <GUI_SelectLayer>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	2004      	movs	r0, #4
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	4798      	blx	r3
 8008f4c:	6830      	ldr	r0, [r6, #0]
 8008f4e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008f52:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008f56:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8008f5a:	4563      	cmp	r3, ip
 8008f5c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008f60:	bfa8      	it	ge
 8008f62:	4663      	movge	r3, ip
 8008f64:	428b      	cmp	r3, r1
 8008f66:	db0a      	blt.n	8008f7e <emWin_LCD_Init+0xb6>
 8008f68:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8008f6c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008f70:	45e6      	cmp	lr, ip
 8008f72:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008f76:	bfa8      	it	ge
 8008f78:	46e6      	movge	lr, ip
 8008f7a:	4596      	cmp	lr, r2
 8008f7c:	da17      	bge.n	8008fae <emWin_LCD_Init+0xe6>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	2000      	movs	r0, #0
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4798      	blx	r3
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	210e      	movs	r1, #14
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	a803      	add	r0, sp, #12
 8008f90:	4798      	blx	r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	b108      	cbz	r0, 8008f9a <emWin_LCD_Init+0xd2>
 8008f96:	9803      	ldr	r0, [sp, #12]
 8008f98:	4798      	blx	r3
 8008f9a:	1c63      	adds	r3, r4, #1
 8008f9c:	d1c8      	bne.n	8008f30 <emWin_LCD_Init+0x68>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	b004      	add	sp, #16
 8008fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	b004      	add	sp, #16
 8008faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fae:	7c40      	ldrb	r0, [r0, #17]
 8008fb0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008fb4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8008fb8:	f8cd e000 	str.w	lr, [sp]
 8008fbc:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8008fc0:	47c0      	blx	r8
 8008fc2:	e7dc      	b.n	8008f7e <emWin_LCD_Init+0xb6>
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	e7ef      	b.n	8008fa8 <emWin_LCD_Init+0xe0>
 8008fc8:	20000018 	.word	0x20000018
 8008fcc:	2001bd6c 	.word	0x2001bd6c
 8008fd0:	20000014 	.word	0x20000014
 8008fd4:	20000038 	.word	0x20000038

08008fd8 <LCD_Color2Index>:
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <LCD_Color2Index+0x14>)
 8008fda:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <LCD_Color2Index+0x18>)
 8008fdc:	6812      	ldr	r2, [r2, #0]
 8008fde:	7c52      	ldrb	r2, [r2, #17]
 8008fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4718      	bx	r3
 8008fea:	bf00      	nop
 8008fec:	20000018 	.word	0x20000018
 8008ff0:	2001bd6c 	.word	0x2001bd6c

08008ff4 <LCD_Index2Color>:
 8008ff4:	4a04      	ldr	r2, [pc, #16]	; (8009008 <LCD_Index2Color+0x14>)
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <LCD_Index2Color+0x18>)
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	7c52      	ldrb	r2, [r2, #17]
 8008ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4718      	bx	r3
 8009006:	bf00      	nop
 8009008:	20000018 	.word	0x20000018
 800900c:	2001bd6c 	.word	0x2001bd6c

08009010 <LCD_SetColorIndex>:
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <LCD_SetColorIndex+0x14>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	7c1a      	ldrb	r2, [r3, #16]
 8009016:	0752      	lsls	r2, r2, #29
 8009018:	bf4c      	ite	mi
 800901a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800901c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800901e:	6018      	str	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000018 	.word	0x20000018

08009028 <LCD_SetBkColorIndex>:
 8009028:	4b04      	ldr	r3, [pc, #16]	; (800903c <LCD_SetBkColorIndex+0x14>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	7c1a      	ldrb	r2, [r3, #16]
 800902e:	0752      	lsls	r2, r2, #29
 8009030:	bf4c      	ite	mi
 8009032:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8009034:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8009036:	6018      	str	r0, [r3, #0]
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000018 	.word	0x20000018

08009040 <LCD_SetBkColor>:
 8009040:	4b01      	ldr	r3, [pc, #4]	; (8009048 <LCD_SetBkColor+0x8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4718      	bx	r3
 8009048:	20000038 	.word	0x20000038

0800904c <LCD_SetColor>:
 800904c:	4b01      	ldr	r3, [pc, #4]	; (8009054 <LCD_SetColor+0x8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4718      	bx	r3
 8009054:	20000038 	.word	0x20000038

08009058 <_OnExit>:
 8009058:	b510      	push	{r4, lr}
 800905a:	4c04      	ldr	r4, [pc, #16]	; (800906c <_OnExit+0x14>)
 800905c:	6820      	ldr	r0, [r4, #0]
 800905e:	f7fe f889 	bl	8007174 <GUI_ALLOC_FreeFixedBlock>
 8009062:	4a03      	ldr	r2, [pc, #12]	; (8009070 <_OnExit+0x18>)
 8009064:	2300      	movs	r3, #0
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	bd10      	pop	{r4, pc}
 800906c:	2001bd84 	.word	0x2001bd84
 8009070:	200001d8 	.word	0x200001d8

08009074 <LCD_InitColors>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d0b      	ldr	r5, [pc, #44]	; (80090a4 <LCD_InitColors+0x30>)
 8009078:	682c      	ldr	r4, [r5, #0]
 800907a:	b10c      	cbz	r4, 8009080 <LCD_InitColors+0xc>
 800907c:	2000      	movs	r0, #0
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <LCD_InitColors+0x34>)
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	0080      	lsls	r0, r0, #2
 8009086:	f7fe f87f 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800908a:	6028      	str	r0, [r5, #0]
 800908c:	b138      	cbz	r0, 800909e <LCD_InitColors+0x2a>
 800908e:	4807      	ldr	r0, [pc, #28]	; (80090ac <LCD_InitColors+0x38>)
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <LCD_InitColors+0x3c>)
 8009092:	f840 3f04 	str.w	r3, [r0, #4]!
 8009096:	f7fe fd81 	bl	8007b9c <GUI__RegisterExit>
 800909a:	4620      	mov	r0, r4
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	2001      	movs	r0, #1
 80090a0:	bd38      	pop	{r3, r4, r5, pc}
 80090a2:	bf00      	nop
 80090a4:	2001bd84 	.word	0x2001bd84
 80090a8:	2000003c 	.word	0x2000003c
 80090ac:	200001d8 	.word	0x200001d8
 80090b0:	08009059 	.word	0x08009059

080090b4 <LCD_GetpPalConvTableBM>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	b360      	cbz	r0, 8009114 <LCD_GetpPalConvTableBM+0x60>
 80090ba:	6885      	ldr	r5, [r0, #8]
 80090bc:	b365      	cbz	r5, 8009118 <LCD_GetpPalConvTableBM+0x64>
 80090be:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009124 <LCD_GetpPalConvTableBM+0x70>
 80090c2:	f8d8 6000 	ldr.w	r6, [r8]
 80090c6:	b306      	cbz	r6, 800910a <LCD_GetpPalConvTableBM+0x56>
 80090c8:	6807      	ldr	r7, [r0, #0]
 80090ca:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80090ce:	dc1f      	bgt.n	8009110 <LCD_GetpPalConvTableBM+0x5c>
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <LCD_GetpPalConvTableBM+0x68>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	429f      	cmp	r7, r3
 80090d6:	bfa8      	it	ge
 80090d8:	461f      	movge	r7, r3
 80090da:	2f00      	cmp	r7, #0
 80090dc:	4681      	mov	r9, r0
 80090de:	dd0d      	ble.n	80090fc <LCD_GetpPalConvTableBM+0x48>
 80090e0:	3d04      	subs	r5, #4
 80090e2:	2400      	movs	r4, #0
 80090e4:	e001      	b.n	80090ea <LCD_GetpPalConvTableBM+0x36>
 80090e6:	f8d8 6000 	ldr.w	r6, [r8]
 80090ea:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80090ee:	f7ff ff73 	bl	8008fd8 <LCD_Color2Index>
 80090f2:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80090f6:	3401      	adds	r4, #1
 80090f8:	42bc      	cmp	r4, r7
 80090fa:	d1f4      	bne.n	80090e6 <LCD_GetpPalConvTableBM+0x32>
 80090fc:	4b08      	ldr	r3, [pc, #32]	; (8009120 <LCD_GetpPalConvTableBM+0x6c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	b10b      	cbz	r3, 8009106 <LCD_GetpPalConvTableBM+0x52>
 8009102:	4648      	mov	r0, r9
 8009104:	4798      	blx	r3
 8009106:	f8d8 6000 	ldr.w	r6, [r8]
 800910a:	4630      	mov	r0, r6
 800910c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009110:	2600      	movs	r6, #0
 8009112:	e7fa      	b.n	800910a <LCD_GetpPalConvTableBM+0x56>
 8009114:	4606      	mov	r6, r0
 8009116:	e7f8      	b.n	800910a <LCD_GetpPalConvTableBM+0x56>
 8009118:	462e      	mov	r6, r5
 800911a:	e7f6      	b.n	800910a <LCD_GetpPalConvTableBM+0x56>
 800911c:	2000003c 	.word	0x2000003c
 8009120:	200001d8 	.word	0x200001d8
 8009124:	2001bd84 	.word	0x2001bd84

08009128 <LCD_InitLUT>:
 8009128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	f000 f9da 	bl	80094e4 <LCD_GetNumLayers>
 8009130:	f1b0 0900 	subs.w	r9, r0, #0
 8009134:	dd2f      	ble.n	8009196 <LCD_InitLUT+0x6e>
 8009136:	4f19      	ldr	r7, [pc, #100]	; (800919c <LCD_InitLUT+0x74>)
 8009138:	f8df b068 	ldr.w	fp, [pc, #104]	; 80091a4 <LCD_InitLUT+0x7c>
 800913c:	2500      	movs	r5, #0
 800913e:	4628      	mov	r0, r5
 8009140:	f7fe fd40 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009144:	b320      	cbz	r0, 8009190 <LCD_InitLUT+0x68>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	4628      	mov	r0, r5
 800914a:	f893 8011 	ldrb.w	r8, [r3, #17]
 800914e:	745d      	strb	r5, [r3, #17]
 8009150:	f000 f87a 	bl	8009248 <LCD_GetBitsPerPixelEx>
 8009154:	2808      	cmp	r0, #8
 8009156:	dc18      	bgt.n	800918a <LCD_InitLUT+0x62>
 8009158:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800915c:	4a10      	ldr	r2, [pc, #64]	; (80091a0 <LCD_InitLUT+0x78>)
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	4293      	cmp	r3, r2
 8009162:	d012      	beq.n	800918a <LCD_InitLUT+0x62>
 8009164:	4628      	mov	r0, r5
 8009166:	f000 f87f 	bl	8009268 <LCD_GetNumColorsEx>
 800916a:	1e06      	subs	r6, r0, #0
 800916c:	dd0d      	ble.n	800918a <LCD_InitLUT+0x62>
 800916e:	2400      	movs	r4, #0
 8009170:	fa5f fa84 	uxtb.w	sl, r4
 8009174:	4650      	mov	r0, sl
 8009176:	f7ff ff3d 	bl	8008ff4 <LCD_Index2Color>
 800917a:	3401      	adds	r4, #1
 800917c:	4602      	mov	r2, r0
 800917e:	4651      	mov	r1, sl
 8009180:	4628      	mov	r0, r5
 8009182:	f000 fb3f 	bl	8009804 <LCD_SetLUTEntryEx>
 8009186:	42a6      	cmp	r6, r4
 8009188:	d1f2      	bne.n	8009170 <LCD_InitLUT+0x48>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f883 8011 	strb.w	r8, [r3, #17]
 8009190:	3501      	adds	r5, #1
 8009192:	45a9      	cmp	r9, r5
 8009194:	d1d3      	bne.n	800913e <LCD_InitLUT+0x16>
 8009196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919a:	bf00      	nop
 800919c:	20000018 	.word	0x20000018
 80091a0:	08015a8c 	.word	0x08015a8c
 80091a4:	2001bd6c 	.word	0x2001bd6c

080091a8 <LCD_GetBkColorIndex>:
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <LCD_GetBkColorIndex+0xc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	20000018 	.word	0x20000018

080091b8 <LCD_GetColorIndex>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <LCD_GetColorIndex+0xc>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000018 	.word	0x20000018

080091c8 <LCD_GetXSizeEx>:
 80091c8:	2801      	cmp	r0, #1
 80091ca:	dd01      	ble.n	80091d0 <LCD_GetXSizeEx+0x8>
 80091cc:	2000      	movs	r0, #0
 80091ce:	4770      	bx	lr
 80091d0:	b510      	push	{r4, lr}
 80091d2:	f7fe fcf7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80091d6:	b128      	cbz	r0, 80091e4 <LCD_GetXSizeEx+0x1c>
 80091d8:	68c3      	ldr	r3, [r0, #12]
 80091da:	2101      	movs	r1, #1
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e2:	4718      	bx	r3
 80091e4:	2000      	movs	r0, #0
 80091e6:	bd10      	pop	{r4, pc}

080091e8 <LCD_GetYSizeEx>:
 80091e8:	2801      	cmp	r0, #1
 80091ea:	dd01      	ble.n	80091f0 <LCD_GetYSizeEx+0x8>
 80091ec:	2000      	movs	r0, #0
 80091ee:	4770      	bx	lr
 80091f0:	b510      	push	{r4, lr}
 80091f2:	f7fe fce7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80091f6:	b128      	cbz	r0, 8009204 <LCD_GetYSizeEx+0x1c>
 80091f8:	68c3      	ldr	r3, [r0, #12]
 80091fa:	2102      	movs	r1, #2
 80091fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009202:	4718      	bx	r3
 8009204:	2000      	movs	r0, #0
 8009206:	bd10      	pop	{r4, pc}

08009208 <LCD_GetVXSizeEx>:
 8009208:	2801      	cmp	r0, #1
 800920a:	dd01      	ble.n	8009210 <LCD_GetVXSizeEx+0x8>
 800920c:	2000      	movs	r0, #0
 800920e:	4770      	bx	lr
 8009210:	b510      	push	{r4, lr}
 8009212:	f7fe fcd7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009216:	b128      	cbz	r0, 8009224 <LCD_GetVXSizeEx+0x1c>
 8009218:	68c3      	ldr	r3, [r0, #12]
 800921a:	2103      	movs	r1, #3
 800921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009222:	4718      	bx	r3
 8009224:	2000      	movs	r0, #0
 8009226:	bd10      	pop	{r4, pc}

08009228 <LCD_GetVYSizeEx>:
 8009228:	2801      	cmp	r0, #1
 800922a:	dd01      	ble.n	8009230 <LCD_GetVYSizeEx+0x8>
 800922c:	2000      	movs	r0, #0
 800922e:	4770      	bx	lr
 8009230:	b510      	push	{r4, lr}
 8009232:	f7fe fcc7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009236:	b128      	cbz	r0, 8009244 <LCD_GetVYSizeEx+0x1c>
 8009238:	68c3      	ldr	r3, [r0, #12]
 800923a:	2104      	movs	r1, #4
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009242:	4718      	bx	r3
 8009244:	2000      	movs	r0, #0
 8009246:	bd10      	pop	{r4, pc}

08009248 <LCD_GetBitsPerPixelEx>:
 8009248:	2801      	cmp	r0, #1
 800924a:	dd01      	ble.n	8009250 <LCD_GetBitsPerPixelEx+0x8>
 800924c:	2000      	movs	r0, #0
 800924e:	4770      	bx	lr
 8009250:	b510      	push	{r4, lr}
 8009252:	f7fe fcb7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009256:	b128      	cbz	r0, 8009264 <LCD_GetBitsPerPixelEx+0x1c>
 8009258:	68c3      	ldr	r3, [r0, #12]
 800925a:	2108      	movs	r1, #8
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009262:	4718      	bx	r3
 8009264:	2000      	movs	r0, #0
 8009266:	bd10      	pop	{r4, pc}

08009268 <LCD_GetNumColorsEx>:
 8009268:	2801      	cmp	r0, #1
 800926a:	dd01      	ble.n	8009270 <LCD_GetNumColorsEx+0x8>
 800926c:	2000      	movs	r0, #0
 800926e:	4770      	bx	lr
 8009270:	b510      	push	{r4, lr}
 8009272:	f7fe fca7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009276:	b128      	cbz	r0, 8009284 <LCD_GetNumColorsEx+0x1c>
 8009278:	68c3      	ldr	r3, [r0, #12]
 800927a:	2109      	movs	r1, #9
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009282:	4718      	bx	r3
 8009284:	2000      	movs	r0, #0
 8009286:	bd10      	pop	{r4, pc}

08009288 <LCD_GetMirrorXEx>:
 8009288:	2801      	cmp	r0, #1
 800928a:	dd01      	ble.n	8009290 <LCD_GetMirrorXEx+0x8>
 800928c:	2000      	movs	r0, #0
 800928e:	4770      	bx	lr
 8009290:	b510      	push	{r4, lr}
 8009292:	f7fe fc97 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009296:	b128      	cbz	r0, 80092a4 <LCD_GetMirrorXEx+0x1c>
 8009298:	68c3      	ldr	r3, [r0, #12]
 800929a:	210c      	movs	r1, #12
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a2:	4718      	bx	r3
 80092a4:	2000      	movs	r0, #0
 80092a6:	bd10      	pop	{r4, pc}

080092a8 <LCD_GetMirrorYEx>:
 80092a8:	2801      	cmp	r0, #1
 80092aa:	dd01      	ble.n	80092b0 <LCD_GetMirrorYEx+0x8>
 80092ac:	2000      	movs	r0, #0
 80092ae:	4770      	bx	lr
 80092b0:	b510      	push	{r4, lr}
 80092b2:	f7fe fc87 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80092b6:	b128      	cbz	r0, 80092c4 <LCD_GetMirrorYEx+0x1c>
 80092b8:	68c3      	ldr	r3, [r0, #12]
 80092ba:	210d      	movs	r1, #13
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c2:	4718      	bx	r3
 80092c4:	2000      	movs	r0, #0
 80092c6:	bd10      	pop	{r4, pc}

080092c8 <LCD_GetSwapXYEx>:
 80092c8:	2801      	cmp	r0, #1
 80092ca:	dd01      	ble.n	80092d0 <LCD_GetSwapXYEx+0x8>
 80092cc:	2000      	movs	r0, #0
 80092ce:	4770      	bx	lr
 80092d0:	b510      	push	{r4, lr}
 80092d2:	f7fe fc77 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80092d6:	b128      	cbz	r0, 80092e4 <LCD_GetSwapXYEx+0x1c>
 80092d8:	68c3      	ldr	r3, [r0, #12]
 80092da:	210e      	movs	r1, #14
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e2:	4718      	bx	r3
 80092e4:	2000      	movs	r0, #0
 80092e6:	bd10      	pop	{r4, pc}

080092e8 <LCD_GetXSize>:
 80092e8:	4b09      	ldr	r3, [pc, #36]	; (8009310 <LCD_GetXSize+0x28>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	7c58      	ldrb	r0, [r3, #17]
 80092ee:	2801      	cmp	r0, #1
 80092f0:	dd01      	ble.n	80092f6 <LCD_GetXSize+0xe>
 80092f2:	2000      	movs	r0, #0
 80092f4:	4770      	bx	lr
 80092f6:	b510      	push	{r4, lr}
 80092f8:	f7fe fc64 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80092fc:	b128      	cbz	r0, 800930a <LCD_GetXSize+0x22>
 80092fe:	68c3      	ldr	r3, [r0, #12]
 8009300:	2101      	movs	r1, #1
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009308:	4718      	bx	r3
 800930a:	2000      	movs	r0, #0
 800930c:	bd10      	pop	{r4, pc}
 800930e:	bf00      	nop
 8009310:	20000018 	.word	0x20000018

08009314 <LCD_GetYSize>:
 8009314:	4b09      	ldr	r3, [pc, #36]	; (800933c <LCD_GetYSize+0x28>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	7c58      	ldrb	r0, [r3, #17]
 800931a:	2801      	cmp	r0, #1
 800931c:	dd01      	ble.n	8009322 <LCD_GetYSize+0xe>
 800931e:	2000      	movs	r0, #0
 8009320:	4770      	bx	lr
 8009322:	b510      	push	{r4, lr}
 8009324:	f7fe fc4e 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009328:	b128      	cbz	r0, 8009336 <LCD_GetYSize+0x22>
 800932a:	68c3      	ldr	r3, [r0, #12]
 800932c:	2102      	movs	r1, #2
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009334:	4718      	bx	r3
 8009336:	2000      	movs	r0, #0
 8009338:	bd10      	pop	{r4, pc}
 800933a:	bf00      	nop
 800933c:	20000018 	.word	0x20000018

08009340 <LCD_GetNumColors>:
 8009340:	4b09      	ldr	r3, [pc, #36]	; (8009368 <LCD_GetNumColors+0x28>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	7c58      	ldrb	r0, [r3, #17]
 8009346:	2801      	cmp	r0, #1
 8009348:	dd01      	ble.n	800934e <LCD_GetNumColors+0xe>
 800934a:	2000      	movs	r0, #0
 800934c:	4770      	bx	lr
 800934e:	b510      	push	{r4, lr}
 8009350:	f7fe fc38 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009354:	b128      	cbz	r0, 8009362 <LCD_GetNumColors+0x22>
 8009356:	68c3      	ldr	r3, [r0, #12]
 8009358:	2109      	movs	r1, #9
 800935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009360:	4718      	bx	r3
 8009362:	2000      	movs	r0, #0
 8009364:	bd10      	pop	{r4, pc}
 8009366:	bf00      	nop
 8009368:	20000018 	.word	0x20000018

0800936c <GUI_GetBitsPerPixelEx>:
 800936c:	4b03      	ldr	r3, [pc, #12]	; (800937c <GUI_GetBitsPerPixelEx+0x10>)
 800936e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009372:	68c3      	ldr	r3, [r0, #12]
 8009374:	2108      	movs	r1, #8
 8009376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009378:	4718      	bx	r3
 800937a:	bf00      	nop
 800937c:	2001bd6c 	.word	0x2001bd6c

08009380 <LCD_GetPalette>:
 8009380:	b510      	push	{r4, lr}
 8009382:	4b06      	ldr	r3, [pc, #24]	; (800939c <LCD_GetPalette+0x1c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	7c58      	ldrb	r0, [r3, #17]
 8009388:	f7fe fc1c 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 800938c:	b128      	cbz	r0, 800939a <LCD_GetPalette+0x1a>
 800938e:	68c3      	ldr	r3, [r0, #12]
 8009390:	2102      	movs	r1, #2
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009398:	4718      	bx	r3
 800939a:	bd10      	pop	{r4, pc}
 800939c:	20000018 	.word	0x20000018

080093a0 <GUI_GetpfIndex2ColorEx>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <GUI_GetpfIndex2ColorEx+0xc>)
 80093a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	6858      	ldr	r0, [r3, #4]
 80093aa:	4770      	bx	lr
 80093ac:	2001bd6c 	.word	0x2001bd6c

080093b0 <GUI_GetpfColor2IndexEx>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <GUI_GetpfColor2IndexEx+0xc>)
 80093b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	4770      	bx	lr
 80093bc:	2001bd6c 	.word	0x2001bd6c

080093c0 <LCD_GetXSizeMax>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	2501      	movs	r5, #1
 80093c4:	4628      	mov	r0, r5
 80093c6:	f7fe fbfd 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80093ca:	2400      	movs	r4, #0
 80093cc:	2101      	movs	r1, #1
 80093ce:	b178      	cbz	r0, 80093f0 <LCD_GetXSizeMax+0x30>
 80093d0:	68c3      	ldr	r3, [r0, #12]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	4798      	blx	r3
 80093d6:	4284      	cmp	r4, r0
 80093d8:	bfb8      	it	lt
 80093da:	4604      	movlt	r4, r0
 80093dc:	b90d      	cbnz	r5, 80093e2 <LCD_GetXSizeMax+0x22>
 80093de:	4620      	mov	r0, r4
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	2500      	movs	r5, #0
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7fe fbed 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80093ea:	2101      	movs	r1, #1
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d1ef      	bne.n	80093d0 <LCD_GetXSizeMax+0x10>
 80093f0:	e7f1      	b.n	80093d6 <LCD_GetXSizeMax+0x16>
 80093f2:	bf00      	nop

080093f4 <LCD_GetYSizeMax>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	2501      	movs	r5, #1
 80093f8:	4628      	mov	r0, r5
 80093fa:	f7fe fbe3 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80093fe:	2400      	movs	r4, #0
 8009400:	2102      	movs	r1, #2
 8009402:	b178      	cbz	r0, 8009424 <LCD_GetYSizeMax+0x30>
 8009404:	68c3      	ldr	r3, [r0, #12]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	4798      	blx	r3
 800940a:	4284      	cmp	r4, r0
 800940c:	bfb8      	it	lt
 800940e:	4604      	movlt	r4, r0
 8009410:	b90d      	cbnz	r5, 8009416 <LCD_GetYSizeMax+0x22>
 8009412:	4620      	mov	r0, r4
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	2500      	movs	r5, #0
 8009418:	4628      	mov	r0, r5
 800941a:	f7fe fbd3 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 800941e:	2102      	movs	r1, #2
 8009420:	2800      	cmp	r0, #0
 8009422:	d1ef      	bne.n	8009404 <LCD_GetYSizeMax+0x10>
 8009424:	e7f1      	b.n	800940a <LCD_GetYSizeMax+0x16>
 8009426:	bf00      	nop

08009428 <LCD_GetVXSizeMax>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	2501      	movs	r5, #1
 800942c:	4628      	mov	r0, r5
 800942e:	f7fe fbc9 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009432:	2400      	movs	r4, #0
 8009434:	2103      	movs	r1, #3
 8009436:	b178      	cbz	r0, 8009458 <LCD_GetVXSizeMax+0x30>
 8009438:	68c3      	ldr	r3, [r0, #12]
 800943a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943c:	4798      	blx	r3
 800943e:	4284      	cmp	r4, r0
 8009440:	bfb8      	it	lt
 8009442:	4604      	movlt	r4, r0
 8009444:	b90d      	cbnz	r5, 800944a <LCD_GetVXSizeMax+0x22>
 8009446:	4620      	mov	r0, r4
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	2500      	movs	r5, #0
 800944c:	4628      	mov	r0, r5
 800944e:	f7fe fbb9 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009452:	2103      	movs	r1, #3
 8009454:	2800      	cmp	r0, #0
 8009456:	d1ef      	bne.n	8009438 <LCD_GetVXSizeMax+0x10>
 8009458:	e7f1      	b.n	800943e <LCD_GetVXSizeMax+0x16>
 800945a:	bf00      	nop

0800945c <LCD_SetDisplaySize>:
 800945c:	4b01      	ldr	r3, [pc, #4]	; (8009464 <LCD_SetDisplaySize+0x8>)
 800945e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009462:	4770      	bx	lr
 8009464:	200001e4 	.word	0x200001e4

08009468 <LCD_GetXSizeDisplay>:
 8009468:	4b01      	ldr	r3, [pc, #4]	; (8009470 <LCD_GetXSizeDisplay+0x8>)
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	200001e4 	.word	0x200001e4

08009474 <LCD_GetYSizeDisplay>:
 8009474:	4b01      	ldr	r3, [pc, #4]	; (800947c <LCD_GetYSizeDisplay+0x8>)
 8009476:	6858      	ldr	r0, [r3, #4]
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	200001e4 	.word	0x200001e4

08009480 <LCD__GetBPPDevice>:
 8009480:	b1c8      	cbz	r0, 80094b6 <LCD__GetBPPDevice+0x36>
 8009482:	f030 0301 	bics.w	r3, r0, #1
 8009486:	d017      	beq.n	80094b8 <LCD__GetBPPDevice+0x38>
 8009488:	f030 0303 	bics.w	r3, r0, #3
 800948c:	d101      	bne.n	8009492 <LCD__GetBPPDevice+0x12>
 800948e:	2008      	movs	r0, #8
 8009490:	4770      	bx	lr
 8009492:	f030 0307 	bics.w	r3, r0, #7
 8009496:	d0fa      	beq.n	800948e <LCD__GetBPPDevice+0xe>
 8009498:	f030 030f 	bics.w	r3, r0, #15
 800949c:	d0f7      	beq.n	800948e <LCD__GetBPPDevice+0xe>
 800949e:	f030 031f 	bics.w	r3, r0, #31
 80094a2:	d0f4      	beq.n	800948e <LCD__GetBPPDevice+0xe>
 80094a4:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80094a8:	d0f1      	beq.n	800948e <LCD__GetBPPDevice+0xe>
 80094aa:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80094ae:	f023 0301 	bic.w	r3, r3, #1
 80094b2:	b91b      	cbnz	r3, 80094bc <LCD__GetBPPDevice+0x3c>
 80094b4:	2010      	movs	r0, #16
 80094b6:	4770      	bx	lr
 80094b8:	2001      	movs	r0, #1
 80094ba:	4770      	bx	lr
 80094bc:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80094c0:	f023 030f 	bic.w	r3, r3, #15
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0f5      	beq.n	80094b4 <LCD__GetBPPDevice+0x34>
 80094c8:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80094cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0ef      	beq.n	80094b4 <LCD__GetBPPDevice+0x34>
 80094d4:	0c00      	lsrs	r0, r0, #16
 80094d6:	0400      	lsls	r0, r0, #16
 80094d8:	2800      	cmp	r0, #0
 80094da:	bf0c      	ite	eq
 80094dc:	2010      	moveq	r0, #16
 80094de:	2020      	movne	r0, #32
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop

080094e4 <LCD_GetNumLayers>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	2000      	movs	r0, #0
 80094e8:	f7fe fb6c 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80094ec:	1c04      	adds	r4, r0, #0
 80094ee:	f04f 0001 	mov.w	r0, #1
 80094f2:	bf18      	it	ne
 80094f4:	2401      	movne	r4, #1
 80094f6:	f7fe fb65 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80094fa:	b100      	cbz	r0, 80094fe <LCD_GetNumLayers+0x1a>
 80094fc:	3401      	adds	r4, #1
 80094fe:	4620      	mov	r0, r4
 8009500:	bd10      	pop	{r4, pc}
 8009502:	bf00      	nop

08009504 <LCD_ReadRectEx>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	b085      	sub	sp, #20
 800950a:	4681      	mov	r9, r0
 800950c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800950e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009510:	68ed      	ldr	r5, [r5, #12]
 8009512:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8009516:	696f      	ldr	r7, [r5, #20]
 8009518:	4616      	mov	r6, r2
 800951a:	460d      	mov	r5, r1
 800951c:	469a      	mov	sl, r3
 800951e:	f1b8 0f00 	cmp.w	r8, #0
 8009522:	d00f      	beq.n	8009544 <LCD_ReadRectEx+0x40>
 8009524:	2101      	movs	r1, #1
 8009526:	a80f      	add	r0, sp, #60	; 0x3c
 8009528:	47c0      	blx	r8
 800952a:	4680      	mov	r8, r0
 800952c:	b150      	cbz	r0, 8009544 <LCD_ReadRectEx+0x40>
 800952e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009530:	9401      	str	r4, [sp, #4]
 8009532:	f8cd a000 	str.w	sl, [sp]
 8009536:	4633      	mov	r3, r6
 8009538:	462a      	mov	r2, r5
 800953a:	4649      	mov	r1, r9
 800953c:	47c0      	blx	r8
 800953e:	b005      	add	sp, #20
 8009540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009544:	4b6b      	ldr	r3, [pc, #428]	; (80096f4 <LCD_ReadRectEx+0x1f0>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	7c58      	ldrb	r0, [r3, #17]
 800954a:	f7ff ff0f 	bl	800936c <GUI_GetBitsPerPixelEx>
 800954e:	2808      	cmp	r0, #8
 8009550:	dc34      	bgt.n	80095bc <LCD_ReadRectEx+0xb8>
 8009552:	2301      	movs	r3, #1
 8009554:	4555      	cmp	r5, sl
 8009556:	dcf2      	bgt.n	800953e <LCD_ReadRectEx+0x3a>
 8009558:	2b02      	cmp	r3, #2
 800955a:	d00a      	beq.n	8009572 <LCD_ReadRectEx+0x6e>
 800955c:	2b04      	cmp	r3, #4
 800955e:	d01d      	beq.n	800959c <LCD_ReadRectEx+0x98>
 8009560:	2b01      	cmp	r3, #1
 8009562:	d030      	beq.n	80095c6 <LCD_ReadRectEx+0xc2>
 8009564:	3501      	adds	r5, #1
 8009566:	45aa      	cmp	sl, r5
 8009568:	daf6      	bge.n	8009558 <LCD_ReadRectEx+0x54>
 800956a:	e7e8      	b.n	800953e <LCD_ReadRectEx+0x3a>
 800956c:	3501      	adds	r5, #1
 800956e:	4555      	cmp	r5, sl
 8009570:	dce5      	bgt.n	800953e <LCD_ReadRectEx+0x3a>
 8009572:	45b1      	cmp	r9, r6
 8009574:	bfd8      	it	le
 8009576:	46c8      	movle	r8, r9
 8009578:	dcf8      	bgt.n	800956c <LCD_ReadRectEx+0x68>
 800957a:	4641      	mov	r1, r8
 800957c:	462a      	mov	r2, r5
 800957e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009580:	47b8      	blx	r7
 8009582:	f108 0801 	add.w	r8, r8, #1
 8009586:	4546      	cmp	r6, r8
 8009588:	f824 0b02 	strh.w	r0, [r4], #2
 800958c:	daf5      	bge.n	800957a <LCD_ReadRectEx+0x76>
 800958e:	3501      	adds	r5, #1
 8009590:	45aa      	cmp	sl, r5
 8009592:	daee      	bge.n	8009572 <LCD_ReadRectEx+0x6e>
 8009594:	e7d3      	b.n	800953e <LCD_ReadRectEx+0x3a>
 8009596:	3501      	adds	r5, #1
 8009598:	45aa      	cmp	sl, r5
 800959a:	dbd0      	blt.n	800953e <LCD_ReadRectEx+0x3a>
 800959c:	45b1      	cmp	r9, r6
 800959e:	bfd8      	it	le
 80095a0:	46c8      	movle	r8, r9
 80095a2:	f300 80a1 	bgt.w	80096e8 <LCD_ReadRectEx+0x1e4>
 80095a6:	4641      	mov	r1, r8
 80095a8:	462a      	mov	r2, r5
 80095aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80095ac:	47b8      	blx	r7
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	4546      	cmp	r6, r8
 80095b4:	f844 0b04 	str.w	r0, [r4], #4
 80095b8:	daf5      	bge.n	80095a6 <LCD_ReadRectEx+0xa2>
 80095ba:	e7ec      	b.n	8009596 <LCD_ReadRectEx+0x92>
 80095bc:	2811      	cmp	r0, #17
 80095be:	bfb4      	ite	lt
 80095c0:	2302      	movlt	r3, #2
 80095c2:	2304      	movge	r3, #4
 80095c4:	e7c6      	b.n	8009554 <LCD_ReadRectEx+0x50>
 80095c6:	1e43      	subs	r3, r0, #1
 80095c8:	9303      	str	r3, [sp, #12]
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	f8cd a008 	str.w	sl, [sp, #8]
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	2b07      	cmp	r3, #7
 80095d6:	f200 8081 	bhi.w	80096dc <LCD_ReadRectEx+0x1d8>
 80095da:	e8df f003 	tbb	[pc, r3]
 80095de:	5833      	.short	0x5833
 80095e0:	04041717 	.word	0x04041717
 80095e4:	0404      	.short	0x0404
 80095e6:	45b1      	cmp	r9, r6
 80095e8:	bfd8      	it	le
 80095ea:	46cb      	movle	fp, r9
 80095ec:	dc09      	bgt.n	8009602 <LCD_ReadRectEx+0xfe>
 80095ee:	4659      	mov	r1, fp
 80095f0:	462a      	mov	r2, r5
 80095f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80095f4:	47b8      	blx	r7
 80095f6:	f10b 0b01 	add.w	fp, fp, #1
 80095fa:	455e      	cmp	r6, fp
 80095fc:	f804 0b01 	strb.w	r0, [r4], #1
 8009600:	daf5      	bge.n	80095ee <LCD_ReadRectEx+0xea>
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	3501      	adds	r5, #1
 8009606:	42ab      	cmp	r3, r5
 8009608:	dae3      	bge.n	80095d2 <LCD_ReadRectEx+0xce>
 800960a:	e798      	b.n	800953e <LCD_ReadRectEx+0x3a>
 800960c:	45b1      	cmp	r9, r6
 800960e:	dcf8      	bgt.n	8009602 <LCD_ReadRectEx+0xfe>
 8009610:	46ca      	mov	sl, r9
 8009612:	f04f 0b0f 	mov.w	fp, #15
 8009616:	4651      	mov	r1, sl
 8009618:	462a      	mov	r2, r5
 800961a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800961c:	47b8      	blx	r7
 800961e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8009622:	7821      	ldrb	r1, [r4, #0]
 8009624:	f1c3 0204 	rsb	r2, r3, #4
 8009628:	fa0b f303 	lsl.w	r3, fp, r3
 800962c:	4090      	lsls	r0, r2
 800962e:	400b      	ands	r3, r1
 8009630:	f10a 0a01 	add.w	sl, sl, #1
 8009634:	4303      	orrs	r3, r0
 8009636:	4556      	cmp	r6, sl
 8009638:	7023      	strb	r3, [r4, #0]
 800963a:	4444      	add	r4, r8
 800963c:	f088 0801 	eor.w	r8, r8, #1
 8009640:	dae9      	bge.n	8009616 <LCD_ReadRectEx+0x112>
 8009642:	e7de      	b.n	8009602 <LCD_ReadRectEx+0xfe>
 8009644:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009648:	45b1      	cmp	r9, r6
 800964a:	dcda      	bgt.n	8009602 <LCD_ReadRectEx+0xfe>
 800964c:	46ca      	mov	sl, r9
 800964e:	4651      	mov	r1, sl
 8009650:	462a      	mov	r2, r5
 8009652:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009654:	47b8      	blx	r7
 8009656:	7821      	ldrb	r1, [r4, #0]
 8009658:	f64f 727f 	movw	r2, #65407	; 0xff7f
 800965c:	f1c8 0307 	rsb	r3, r8, #7
 8009660:	fa42 f208 	asr.w	r2, r2, r8
 8009664:	4098      	lsls	r0, r3
 8009666:	f10a 0a01 	add.w	sl, sl, #1
 800966a:	ea01 0302 	and.w	r3, r1, r2
 800966e:	f108 0201 	add.w	r2, r8, #1
 8009672:	4318      	orrs	r0, r3
 8009674:	f022 0807 	bic.w	r8, r2, #7
 8009678:	4556      	cmp	r6, sl
 800967a:	7020      	strb	r0, [r4, #0]
 800967c:	fa42 f808 	asr.w	r8, r2, r8
 8009680:	eb04 04e2 	add.w	r4, r4, r2, asr #3
 8009684:	dae3      	bge.n	800964e <LCD_ReadRectEx+0x14a>
 8009686:	3501      	adds	r5, #1
 8009688:	45ab      	cmp	fp, r5
 800968a:	dadd      	bge.n	8009648 <LCD_ReadRectEx+0x144>
 800968c:	e757      	b.n	800953e <LCD_ReadRectEx+0x3a>
 800968e:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 8009692:	45b1      	cmp	r9, r6
 8009694:	dcb5      	bgt.n	8009602 <LCD_ReadRectEx+0xfe>
 8009696:	46ca      	mov	sl, r9
 8009698:	4651      	mov	r1, sl
 800969a:	462a      	mov	r2, r5
 800969c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800969e:	47b8      	blx	r7
 80096a0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80096a4:	f894 e000 	ldrb.w	lr, [r4]
 80096a8:	f1c3 0206 	rsb	r2, r3, #6
 80096ac:	fa4b f303 	asr.w	r3, fp, r3
 80096b0:	f108 0101 	add.w	r1, r8, #1
 80096b4:	4090      	lsls	r0, r2
 80096b6:	ea0e 0303 	and.w	r3, lr, r3
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	4303      	orrs	r3, r0
 80096c0:	f021 0803 	bic.w	r8, r1, #3
 80096c4:	4556      	cmp	r6, sl
 80096c6:	7023      	strb	r3, [r4, #0]
 80096c8:	fa41 f808 	asr.w	r8, r1, r8
 80096cc:	eb04 04a1 	add.w	r4, r4, r1, asr #2
 80096d0:	dae2      	bge.n	8009698 <LCD_ReadRectEx+0x194>
 80096d2:	9b02      	ldr	r3, [sp, #8]
 80096d4:	3501      	adds	r5, #1
 80096d6:	42ab      	cmp	r3, r5
 80096d8:	dadb      	bge.n	8009692 <LCD_ReadRectEx+0x18e>
 80096da:	e730      	b.n	800953e <LCD_ReadRectEx+0x3a>
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	3501      	adds	r5, #1
 80096e0:	429d      	cmp	r5, r3
 80096e2:	f77f af76 	ble.w	80095d2 <LCD_ReadRectEx+0xce>
 80096e6:	e72a      	b.n	800953e <LCD_ReadRectEx+0x3a>
 80096e8:	3501      	adds	r5, #1
 80096ea:	4555      	cmp	r5, sl
 80096ec:	f77f af56 	ble.w	800959c <LCD_ReadRectEx+0x98>
 80096f0:	e725      	b.n	800953e <LCD_ReadRectEx+0x3a>
 80096f2:	bf00      	nop
 80096f4:	20000018 	.word	0x20000018

080096f8 <GUI_ReadRectEx>:
 80096f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fa:	4c16      	ldr	r4, [pc, #88]	; (8009754 <GUI_ReadRectEx+0x5c>)
 80096fc:	9e05      	ldr	r6, [sp, #20]
 80096fe:	6825      	ldr	r5, [r4, #0]
 8009700:	9c06      	ldr	r4, [sp, #24]
 8009702:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009706:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800970a:	4570      	cmp	r0, lr
 800970c:	bfb8      	it	lt
 800970e:	4670      	movlt	r0, lr
 8009710:	42ba      	cmp	r2, r7
 8009712:	bfa8      	it	ge
 8009714:	463a      	movge	r2, r7
 8009716:	4290      	cmp	r0, r2
 8009718:	dc1a      	bgt.n	8009750 <GUI_ReadRectEx+0x58>
 800971a:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800971e:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8009722:	42b9      	cmp	r1, r7
 8009724:	bfb8      	it	lt
 8009726:	4639      	movlt	r1, r7
 8009728:	42ab      	cmp	r3, r5
 800972a:	bfa8      	it	ge
 800972c:	462b      	movge	r3, r5
 800972e:	428b      	cmp	r3, r1
 8009730:	da03      	bge.n	800973a <GUI_ReadRectEx+0x42>
 8009732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009734:	6825      	ldr	r5, [r4, #0]
 8009736:	b12d      	cbz	r5, 8009744 <GUI_ReadRectEx+0x4c>
 8009738:	462c      	mov	r4, r5
 800973a:	68e5      	ldr	r5, [r4, #12]
 800973c:	682d      	ldr	r5, [r5, #0]
 800973e:	f035 0504 	bics.w	r5, r5, #4
 8009742:	d1f7      	bne.n	8009734 <GUI_ReadRectEx+0x3c>
 8009744:	9406      	str	r4, [sp, #24]
 8009746:	9605      	str	r6, [sp, #20]
 8009748:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800974c:	f7ff beda 	b.w	8009504 <LCD_ReadRectEx>
 8009750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009752:	bf00      	nop
 8009754:	20000018 	.word	0x20000018

08009758 <LCD_SelectLCD>:
 8009758:	b510      	push	{r4, lr}
 800975a:	4c0e      	ldr	r4, [pc, #56]	; (8009794 <LCD_SelectLCD+0x3c>)
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <LCD_SelectLCD+0x40>)
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	7c51      	ldrb	r1, [r2, #17]
 8009762:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009766:	b138      	cbz	r0, 8009778 <LCD_SelectLCD+0x20>
 8009768:	68c3      	ldr	r3, [r0, #12]
 800976a:	b113      	cbz	r3, 8009772 <LCD_SelectLCD+0x1a>
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b04      	cmp	r3, #4
 8009770:	d00b      	beq.n	800978a <LCD_SelectLCD+0x32>
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	2800      	cmp	r0, #0
 8009776:	d1f7      	bne.n	8009768 <LCD_SelectLCD+0x10>
 8009778:	2100      	movs	r1, #0
 800977a:	f102 0308 	add.w	r3, r2, #8
 800977e:	6611      	str	r1, [r2, #96]	; 0x60
 8009780:	6153      	str	r3, [r2, #20]
 8009782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009786:	f7ff bb91 	b.w	8008eac <LCD_SetClipRectMax>
 800978a:	f7fe fa5b 	bl	8007c44 <GUI_DEVICE_Unlink>
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	e7f2      	b.n	8009778 <LCD_SelectLCD+0x20>
 8009792:	bf00      	nop
 8009794:	20000018 	.word	0x20000018
 8009798:	2001bd6c 	.word	0x2001bd6c

0800979c <LCD_GetPosEx>:
 800979c:	b530      	push	{r4, r5, lr}
 800979e:	b083      	sub	sp, #12
 80097a0:	460c      	mov	r4, r1
 80097a2:	4615      	mov	r5, r2
 80097a4:	f7fe fa0e 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80097a8:	9001      	str	r0, [sp, #4]
 80097aa:	b170      	cbz	r0, 80097ca <LCD_GetPosEx+0x2e>
 80097ac:	68c3      	ldr	r3, [r0, #12]
 80097ae:	2104      	movs	r1, #4
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	eb0d 0001 	add.w	r0, sp, r1
 80097b6:	4798      	blx	r3
 80097b8:	4603      	mov	r3, r0
 80097ba:	b130      	cbz	r0, 80097ca <LCD_GetPosEx+0x2e>
 80097bc:	9801      	ldr	r0, [sp, #4]
 80097be:	462a      	mov	r2, r5
 80097c0:	4621      	mov	r1, r4
 80097c2:	4798      	blx	r3
 80097c4:	2000      	movs	r0, #0
 80097c6:	b003      	add	sp, #12
 80097c8:	bd30      	pop	{r4, r5, pc}
 80097ca:	2001      	movs	r0, #1
 80097cc:	b003      	add	sp, #12
 80097ce:	bd30      	pop	{r4, r5, pc}

080097d0 <LCD_SetDevFunc>:
 80097d0:	b530      	push	{r4, r5, lr}
 80097d2:	b083      	sub	sp, #12
 80097d4:	460c      	mov	r4, r1
 80097d6:	4615      	mov	r5, r2
 80097d8:	f7fe f9f4 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80097dc:	9001      	str	r0, [sp, #4]
 80097de:	b168      	cbz	r0, 80097fc <LCD_SetDevFunc+0x2c>
 80097e0:	68c3      	ldr	r3, [r0, #12]
 80097e2:	2116      	movs	r1, #22
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	a801      	add	r0, sp, #4
 80097e8:	4798      	blx	r3
 80097ea:	4603      	mov	r3, r0
 80097ec:	b130      	cbz	r0, 80097fc <LCD_SetDevFunc+0x2c>
 80097ee:	9801      	ldr	r0, [sp, #4]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4621      	mov	r1, r4
 80097f4:	4798      	blx	r3
 80097f6:	2000      	movs	r0, #0
 80097f8:	b003      	add	sp, #12
 80097fa:	bd30      	pop	{r4, r5, pc}
 80097fc:	2001      	movs	r0, #1
 80097fe:	b003      	add	sp, #12
 8009800:	bd30      	pop	{r4, r5, pc}
 8009802:	bf00      	nop

08009804 <LCD_SetLUTEntryEx>:
 8009804:	b530      	push	{r4, r5, lr}
 8009806:	b083      	sub	sp, #12
 8009808:	460c      	mov	r4, r1
 800980a:	4615      	mov	r5, r2
 800980c:	f7fe f9da 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009810:	9001      	str	r0, [sp, #4]
 8009812:	b168      	cbz	r0, 8009830 <LCD_SetLUTEntryEx+0x2c>
 8009814:	68c3      	ldr	r3, [r0, #12]
 8009816:	2110      	movs	r1, #16
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	a801      	add	r0, sp, #4
 800981c:	4798      	blx	r3
 800981e:	4603      	mov	r3, r0
 8009820:	b130      	cbz	r0, 8009830 <LCD_SetLUTEntryEx+0x2c>
 8009822:	9801      	ldr	r0, [sp, #4]
 8009824:	462a      	mov	r2, r5
 8009826:	4621      	mov	r1, r4
 8009828:	4798      	blx	r3
 800982a:	2000      	movs	r0, #0
 800982c:	b003      	add	sp, #12
 800982e:	bd30      	pop	{r4, r5, pc}
 8009830:	2001      	movs	r0, #1
 8009832:	b003      	add	sp, #12
 8009834:	bd30      	pop	{r4, r5, pc}
 8009836:	bf00      	nop

08009838 <LCD_SetSizeEx>:
 8009838:	b530      	push	{r4, r5, lr}
 800983a:	b083      	sub	sp, #12
 800983c:	460c      	mov	r4, r1
 800983e:	4615      	mov	r5, r2
 8009840:	f7fe f9c0 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009844:	9001      	str	r0, [sp, #4]
 8009846:	b168      	cbz	r0, 8009864 <LCD_SetSizeEx+0x2c>
 8009848:	68c3      	ldr	r3, [r0, #12]
 800984a:	210b      	movs	r1, #11
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	a801      	add	r0, sp, #4
 8009850:	4798      	blx	r3
 8009852:	4603      	mov	r3, r0
 8009854:	b130      	cbz	r0, 8009864 <LCD_SetSizeEx+0x2c>
 8009856:	9801      	ldr	r0, [sp, #4]
 8009858:	462a      	mov	r2, r5
 800985a:	4621      	mov	r1, r4
 800985c:	4798      	blx	r3
 800985e:	2000      	movs	r0, #0
 8009860:	b003      	add	sp, #12
 8009862:	bd30      	pop	{r4, r5, pc}
 8009864:	2001      	movs	r0, #1
 8009866:	b003      	add	sp, #12
 8009868:	bd30      	pop	{r4, r5, pc}
 800986a:	bf00      	nop

0800986c <LCD_SetVRAMAddrEx>:
 800986c:	b510      	push	{r4, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	460c      	mov	r4, r1
 8009872:	f7fe f9a7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8009876:	9001      	str	r0, [sp, #4]
 8009878:	b160      	cbz	r0, 8009894 <LCD_SetVRAMAddrEx+0x28>
 800987a:	68c3      	ldr	r3, [r0, #12]
 800987c:	2109      	movs	r1, #9
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	a801      	add	r0, sp, #4
 8009882:	4798      	blx	r3
 8009884:	4603      	mov	r3, r0
 8009886:	b128      	cbz	r0, 8009894 <LCD_SetVRAMAddrEx+0x28>
 8009888:	9801      	ldr	r0, [sp, #4]
 800988a:	4621      	mov	r1, r4
 800988c:	4798      	blx	r3
 800988e:	2000      	movs	r0, #0
 8009890:	b002      	add	sp, #8
 8009892:	bd10      	pop	{r4, pc}
 8009894:	2001      	movs	r0, #1
 8009896:	b002      	add	sp, #8
 8009898:	bd10      	pop	{r4, pc}
 800989a:	bf00      	nop

0800989c <LCD_SetVSizeEx>:
 800989c:	b530      	push	{r4, r5, lr}
 800989e:	b083      	sub	sp, #12
 80098a0:	460c      	mov	r4, r1
 80098a2:	4615      	mov	r5, r2
 80098a4:	f7fe f98e 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 80098a8:	9001      	str	r0, [sp, #4]
 80098aa:	b168      	cbz	r0, 80098c8 <LCD_SetVSizeEx+0x2c>
 80098ac:	68c3      	ldr	r3, [r0, #12]
 80098ae:	210a      	movs	r1, #10
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	a801      	add	r0, sp, #4
 80098b4:	4798      	blx	r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	b130      	cbz	r0, 80098c8 <LCD_SetVSizeEx+0x2c>
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	462a      	mov	r2, r5
 80098be:	4621      	mov	r1, r4
 80098c0:	4798      	blx	r3
 80098c2:	2000      	movs	r0, #0
 80098c4:	b003      	add	sp, #12
 80098c6:	bd30      	pop	{r4, r5, pc}
 80098c8:	2001      	movs	r0, #1
 80098ca:	b003      	add	sp, #12
 80098cc:	bd30      	pop	{r4, r5, pc}
 80098ce:	bf00      	nop

080098d0 <LCD_UpdateColorIndices>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	4c07      	ldr	r4, [pc, #28]	; (80098f0 <LCD_UpdateColorIndices+0x20>)
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098d8:	f7ff fb7e 	bl	8008fd8 <LCD_Color2Index>
 80098dc:	f7ff fb98 	bl	8009010 <LCD_SetColorIndex>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80098e4:	f7ff fb78 	bl	8008fd8 <LCD_Color2Index>
 80098e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ec:	f7ff bb9c 	b.w	8009028 <LCD_SetBkColorIndex>
 80098f0:	20000018 	.word	0x20000018

080098f4 <_GetRect>:
 80098f4:	6883      	ldr	r3, [r0, #8]
 80098f6:	699a      	ldr	r2, [r3, #24]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	2000      	movs	r0, #0
 80098fc:	3a01      	subs	r2, #1
 80098fe:	3b01      	subs	r3, #1
 8009900:	808a      	strh	r2, [r1, #4]
 8009902:	80cb      	strh	r3, [r1, #6]
 8009904:	8008      	strh	r0, [r1, #0]
 8009906:	8048      	strh	r0, [r1, #2]
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop

0800990c <_SetPixelIndex>:
 800990c:	b4f0      	push	{r4, r5, r6, r7}
 800990e:	6884      	ldr	r4, [r0, #8]
 8009910:	6a20      	ldr	r0, [r4, #32]
 8009912:	6825      	ldr	r5, [r4, #0]
 8009914:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8009918:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800991c:	fb02 6200 	mla	r2, r2, r0, r6
 8009920:	0892      	lsrs	r2, r2, #2
 8009922:	f001 0103 	and.w	r1, r1, #3
 8009926:	0097      	lsls	r7, r2, #2
 8009928:	2902      	cmp	r1, #2
 800992a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800992e:	eb07 0605 	add.w	r6, r7, r5
 8009932:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8009936:	d020      	beq.n	800997a <_SetPixelIndex+0x6e>
 8009938:	2903      	cmp	r1, #3
 800993a:	d018      	beq.n	800996e <_SetPixelIndex+0x62>
 800993c:	2901      	cmp	r1, #1
 800993e:	d005      	beq.n	800994c <_SetPixelIndex+0x40>
 8009940:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8009944:	4318      	orrs	r0, r3
 8009946:	6030      	str	r0, [r6, #0]
 8009948:	bcf0      	pop	{r4, r5, r6, r7}
 800994a:	4770      	bx	lr
 800994c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
 8009950:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8009954:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8009958:	1d3e      	adds	r6, r7, #4
 800995a:	6821      	ldr	r1, [r4, #0]
 800995c:	5870      	ldr	r0, [r6, r1]
 800995e:	0c00      	lsrs	r0, r0, #16
 8009960:	440e      	add	r6, r1
 8009962:	0400      	lsls	r0, r0, #16
 8009964:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
 8009968:	6030      	str	r0, [r6, #0]
 800996a:	bcf0      	pop	{r4, r5, r6, r7}
 800996c:	4770      	bx	lr
 800996e:	b2c2      	uxtb	r2, r0
 8009970:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 8009974:	6030      	str	r0, [r6, #0]
 8009976:	bcf0      	pop	{r4, r5, r6, r7}
 8009978:	4770      	bx	lr
 800997a:	b281      	uxth	r1, r0
 800997c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009980:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8009984:	1d3e      	adds	r6, r7, #4
 8009986:	6821      	ldr	r1, [r4, #0]
 8009988:	5870      	ldr	r0, [r6, r1]
 800998a:	440e      	add	r6, r1
 800998c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8009990:	ea40 4013 	orr.w	r0, r0, r3, lsr #16
 8009994:	6030      	str	r0, [r6, #0]
 8009996:	bcf0      	pop	{r4, r5, r6, r7}
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop

0800999c <_GetPixelIndex>:
 800999c:	b410      	push	{r4}
 800999e:	6880      	ldr	r0, [r0, #8]
 80099a0:	6a03      	ldr	r3, [r0, #32]
 80099a2:	6804      	ldr	r4, [r0, #0]
 80099a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80099a8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80099ac:	fb02 0203 	mla	r2, r2, r3, r0
 80099b0:	0892      	lsrs	r2, r2, #2
 80099b2:	f001 0103 	and.w	r1, r1, #3
 80099b6:	2902      	cmp	r1, #2
 80099b8:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80099bc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 80099c0:	d018      	beq.n	80099f4 <_GetPixelIndex+0x58>
 80099c2:	2903      	cmp	r1, #3
 80099c4:	d012      	beq.n	80099ec <_GetPixelIndex+0x50>
 80099c6:	2901      	cmp	r1, #1
 80099c8:	d004      	beq.n	80099d4 <_GetPixelIndex+0x38>
 80099ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80099ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	441c      	add	r4, r3
 80099d6:	6863      	ldr	r3, [r4, #4]
 80099d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80099e6:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80099ea:	4770      	bx	lr
 80099ec:	0a00      	lsrs	r0, r0, #8
 80099ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	441c      	add	r4, r3
 80099f6:	6863      	ldr	r3, [r4, #4]
 80099f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099fc:	041b      	lsls	r3, r3, #16
 80099fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a02:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
 8009a06:	4770      	bx	lr

08009a08 <_GetDevProp>:
 8009a08:	3901      	subs	r1, #1
 8009a0a:	6883      	ldr	r3, [r0, #8]
 8009a0c:	290d      	cmp	r1, #13
 8009a0e:	d816      	bhi.n	8009a3e <_GetDevProp+0x36>
 8009a10:	e8df f001 	tbb	[pc, r1]
 8009a14:	0d13110f 	.word	0x0d13110f
 8009a18:	0b151515 	.word	0x0b151515
 8009a1c:	07090907 	.word	0x07090907
 8009a20:	0707      	.short	0x0707
 8009a22:	2000      	movs	r0, #0
 8009a24:	4770      	bx	lr
 8009a26:	2001      	movs	r0, #1
 8009a28:	4770      	bx	lr
 8009a2a:	2018      	movs	r0, #24
 8009a2c:	4770      	bx	lr
 8009a2e:	69d8      	ldr	r0, [r3, #28]
 8009a30:	4770      	bx	lr
 8009a32:	6918      	ldr	r0, [r3, #16]
 8009a34:	4770      	bx	lr
 8009a36:	6958      	ldr	r0, [r3, #20]
 8009a38:	4770      	bx	lr
 8009a3a:	6998      	ldr	r0, [r3, #24]
 8009a3c:	4770      	bx	lr
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a42:	4770      	bx	lr

08009a44 <_GetDevData>:
 8009a44:	2901      	cmp	r1, #1
 8009a46:	4802      	ldr	r0, [pc, #8]	; (8009a50 <_GetDevData+0xc>)
 8009a48:	bf18      	it	ne
 8009a4a:	2000      	movne	r0, #0
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	08015a00 	.word	0x08015a00

08009a54 <_GetDevFunc>:
 8009a54:	3902      	subs	r1, #2
 8009a56:	2927      	cmp	r1, #39	; 0x27
 8009a58:	d847      	bhi.n	8009aea <_GetDevFunc+0x96>
 8009a5a:	e8df f001 	tbb	[pc, r1]
 8009a5e:	1a1c      	.short	0x1a1c
 8009a60:	46164618 	.word	0x46164618
 8009a64:	42441446 	.word	0x42441446
 8009a68:	3c3e4640 	.word	0x3c3e4640
 8009a6c:	3a464646 	.word	0x3a464646
 8009a70:	46343638 	.word	0x46343638
 8009a74:	46463046 	.word	0x46463046
 8009a78:	46464646 	.word	0x46464646
 8009a7c:	24282a2c 	.word	0x24282a2c
 8009a80:	46462046 	.word	0x46462046
 8009a84:	1e46      	.short	0x1e46
 8009a86:	481a      	ldr	r0, [pc, #104]	; (8009af0 <_GetDevFunc+0x9c>)
 8009a88:	4770      	bx	lr
 8009a8a:	481a      	ldr	r0, [pc, #104]	; (8009af4 <_GetDevFunc+0xa0>)
 8009a8c:	4770      	bx	lr
 8009a8e:	481a      	ldr	r0, [pc, #104]	; (8009af8 <_GetDevFunc+0xa4>)
 8009a90:	4770      	bx	lr
 8009a92:	481a      	ldr	r0, [pc, #104]	; (8009afc <_GetDevFunc+0xa8>)
 8009a94:	4770      	bx	lr
 8009a96:	481a      	ldr	r0, [pc, #104]	; (8009b00 <_GetDevFunc+0xac>)
 8009a98:	4770      	bx	lr
 8009a9a:	481a      	ldr	r0, [pc, #104]	; (8009b04 <_GetDevFunc+0xb0>)
 8009a9c:	4770      	bx	lr
 8009a9e:	6803      	ldr	r3, [r0, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009aa4:	4770      	bx	lr
 8009aa6:	6803      	ldr	r3, [r0, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009aac:	4770      	bx	lr
 8009aae:	4816      	ldr	r0, [pc, #88]	; (8009b08 <_GetDevFunc+0xb4>)
 8009ab0:	4770      	bx	lr
 8009ab2:	4816      	ldr	r0, [pc, #88]	; (8009b0c <_GetDevFunc+0xb8>)
 8009ab4:	4770      	bx	lr
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009abc:	4770      	bx	lr
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009ac4:	4770      	bx	lr
 8009ac6:	4812      	ldr	r0, [pc, #72]	; (8009b10 <_GetDevFunc+0xbc>)
 8009ac8:	4770      	bx	lr
 8009aca:	4812      	ldr	r0, [pc, #72]	; (8009b14 <_GetDevFunc+0xc0>)
 8009acc:	4770      	bx	lr
 8009ace:	4812      	ldr	r0, [pc, #72]	; (8009b18 <_GetDevFunc+0xc4>)
 8009ad0:	4770      	bx	lr
 8009ad2:	4812      	ldr	r0, [pc, #72]	; (8009b1c <_GetDevFunc+0xc8>)
 8009ad4:	4770      	bx	lr
 8009ad6:	4812      	ldr	r0, [pc, #72]	; (8009b20 <_GetDevFunc+0xcc>)
 8009ad8:	4770      	bx	lr
 8009ada:	4812      	ldr	r0, [pc, #72]	; (8009b24 <_GetDevFunc+0xd0>)
 8009adc:	4770      	bx	lr
 8009ade:	4812      	ldr	r0, [pc, #72]	; (8009b28 <_GetDevFunc+0xd4>)
 8009ae0:	4770      	bx	lr
 8009ae2:	4812      	ldr	r0, [pc, #72]	; (8009b2c <_GetDevFunc+0xd8>)
 8009ae4:	4770      	bx	lr
 8009ae6:	4812      	ldr	r0, [pc, #72]	; (8009b30 <_GetDevFunc+0xdc>)
 8009ae8:	4770      	bx	lr
 8009aea:	2000      	movs	r0, #0
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	0800a401 	.word	0x0800a401
 8009af4:	0800a3c1 	.word	0x0800a3c1
 8009af8:	0800a315 	.word	0x0800a315
 8009afc:	0800b4e9 	.word	0x0800b4e9
 8009b00:	0800a381 	.word	0x0800a381
 8009b04:	0800a2e9 	.word	0x0800a2e9
 8009b08:	0800a345 	.word	0x0800a345
 8009b0c:	0800a541 	.word	0x0800a541
 8009b10:	0800a479 	.word	0x0800a479
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009b4d 	.word	0x08009b4d
 8009b1c:	08009b65 	.word	0x08009b65
 8009b20:	08009b7d 	.word	0x08009b7d
 8009b24:	08009b89 	.word	0x08009b89
 8009b28:	0800a2b9 	.word	0x0800a2b9
 8009b2c:	0800a4e5 	.word	0x0800a4e5
 8009b30:	0800a441 	.word	0x0800a441

08009b34 <_SetChroma>:
 8009b34:	b500      	push	{lr}
 8009b36:	b083      	sub	sp, #12
 8009b38:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009b3c:	6980      	ldr	r0, [r0, #24]
 8009b3e:	466a      	mov	r2, sp
 8009b40:	210d      	movs	r1, #13
 8009b42:	f7fb f98d 	bl	8004e60 <LCD_X_DisplayDriver>
 8009b46:	b003      	add	sp, #12
 8009b48:	f85d fb04 	ldr.w	pc, [sp], #4

08009b4c <_SetChromaMode>:
 8009b4c:	b500      	push	{lr}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	aa02      	add	r2, sp, #8
 8009b52:	6980      	ldr	r0, [r0, #24]
 8009b54:	f842 1d04 	str.w	r1, [r2, #-4]!
 8009b58:	210c      	movs	r1, #12
 8009b5a:	f7fb f981 	bl	8004e60 <LCD_X_DisplayDriver>
 8009b5e:	b003      	add	sp, #12
 8009b60:	f85d fb04 	ldr.w	pc, [sp], #4

08009b64 <_SetAlphaMode>:
 8009b64:	b500      	push	{lr}
 8009b66:	b083      	sub	sp, #12
 8009b68:	aa02      	add	r2, sp, #8
 8009b6a:	6980      	ldr	r0, [r0, #24]
 8009b6c:	f842 1d04 	str.w	r1, [r2, #-4]!
 8009b70:	210b      	movs	r1, #11
 8009b72:	f7fb f975 	bl	8004e60 <LCD_X_DisplayDriver>
 8009b76:	b003      	add	sp, #12
 8009b78:	f85d fb04 	ldr.w	pc, [sp], #4

08009b7c <_Off>:
 8009b7c:	6980      	ldr	r0, [r0, #24]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2106      	movs	r1, #6
 8009b82:	f7fb b96d 	b.w	8004e60 <LCD_X_DisplayDriver>
 8009b86:	bf00      	nop

08009b88 <_On>:
 8009b88:	6980      	ldr	r0, [r0, #24]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2105      	movs	r1, #5
 8009b8e:	f7fb b967 	b.w	8004e60 <LCD_X_DisplayDriver>
 8009b92:	bf00      	nop

08009b94 <_SetOrg>:
 8009b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b98:	4604      	mov	r4, r0
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6980      	ldr	r0, [r0, #24]
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	4690      	mov	r8, r2
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	68a6      	ldr	r6, [r4, #8]
 8009baa:	f7ff fb6d 	bl	8009288 <LCD_GetMirrorXEx>
 8009bae:	4605      	mov	r5, r0
 8009bb0:	69a0      	ldr	r0, [r4, #24]
 8009bb2:	f7ff fb79 	bl	80092a8 <LCD_GetMirrorYEx>
 8009bb6:	4681      	mov	r9, r0
 8009bb8:	69a0      	ldr	r0, [r4, #24]
 8009bba:	f7ff fb85 	bl	80092c8 <LCD_GetSwapXYEx>
 8009bbe:	0080      	lsls	r0, r0, #2
 8009bc0:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8009bc4:	4328      	orrs	r0, r5
 8009bc6:	2807      	cmp	r0, #7
 8009bc8:	d810      	bhi.n	8009bec <_SetOrg+0x58>
 8009bca:	e8df f000 	tbb	[pc, r0]
 8009bce:	1a17      	.short	0x1a17
 8009bd0:	3a362a22 	.word	0x3a362a22
 8009bd4:	0442      	.short	0x0442
 8009bd6:	69f2      	ldr	r2, [r6, #28]
 8009bd8:	6970      	ldr	r0, [r6, #20]
 8009bda:	69b3      	ldr	r3, [r6, #24]
 8009bdc:	6931      	ldr	r1, [r6, #16]
 8009bde:	1a12      	subs	r2, r2, r0
 8009be0:	1a59      	subs	r1, r3, r1
 8009be2:	ebc8 0202 	rsb	r2, r8, r2
 8009be6:	1bcf      	subs	r7, r1, r7
 8009be8:	e88d 0084 	stmia.w	sp, {r2, r7}
 8009bec:	466a      	mov	r2, sp
 8009bee:	69a0      	ldr	r0, [r4, #24]
 8009bf0:	2103      	movs	r1, #3
 8009bf2:	f7fb f935 	bl	8004e60 <LCD_X_DisplayDriver>
 8009bf6:	b003      	add	sp, #12
 8009bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bfc:	e88d 0180 	stmia.w	sp, {r7, r8}
 8009c00:	e7f4      	b.n	8009bec <_SetOrg+0x58>
 8009c02:	69b3      	ldr	r3, [r6, #24]
 8009c04:	6931      	ldr	r1, [r6, #16]
 8009c06:	f8cd 8004 	str.w	r8, [sp, #4]
 8009c0a:	1a59      	subs	r1, r3, r1
 8009c0c:	1bcf      	subs	r7, r1, r7
 8009c0e:	9700      	str	r7, [sp, #0]
 8009c10:	e7ec      	b.n	8009bec <_SetOrg+0x58>
 8009c12:	69f3      	ldr	r3, [r6, #28]
 8009c14:	6972      	ldr	r2, [r6, #20]
 8009c16:	9700      	str	r7, [sp, #0]
 8009c18:	1a9a      	subs	r2, r3, r2
 8009c1a:	ebc8 0202 	rsb	r2, r8, r2
 8009c1e:	9201      	str	r2, [sp, #4]
 8009c20:	e7e4      	b.n	8009bec <_SetOrg+0x58>
 8009c22:	69b1      	ldr	r1, [r6, #24]
 8009c24:	6930      	ldr	r0, [r6, #16]
 8009c26:	69f3      	ldr	r3, [r6, #28]
 8009c28:	6972      	ldr	r2, [r6, #20]
 8009c2a:	1a09      	subs	r1, r1, r0
 8009c2c:	1a9a      	subs	r2, r3, r2
 8009c2e:	1bcf      	subs	r7, r1, r7
 8009c30:	ebc8 0202 	rsb	r2, r8, r2
 8009c34:	9700      	str	r7, [sp, #0]
 8009c36:	9201      	str	r2, [sp, #4]
 8009c38:	e7d8      	b.n	8009bec <_SetOrg+0x58>
 8009c3a:	f8cd 8000 	str.w	r8, [sp]
 8009c3e:	9701      	str	r7, [sp, #4]
 8009c40:	e7d4      	b.n	8009bec <_SetOrg+0x58>
 8009c42:	69f3      	ldr	r3, [r6, #28]
 8009c44:	6972      	ldr	r2, [r6, #20]
 8009c46:	9701      	str	r7, [sp, #4]
 8009c48:	1a9a      	subs	r2, r3, r2
 8009c4a:	ebc8 0202 	rsb	r2, r8, r2
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	e7cc      	b.n	8009bec <_SetOrg+0x58>
 8009c52:	69b3      	ldr	r3, [r6, #24]
 8009c54:	6931      	ldr	r1, [r6, #16]
 8009c56:	f8cd 8000 	str.w	r8, [sp]
 8009c5a:	1a59      	subs	r1, r3, r1
 8009c5c:	1bcf      	subs	r7, r1, r7
 8009c5e:	9701      	str	r7, [sp, #4]
 8009c60:	e7c4      	b.n	8009bec <_SetOrg+0x58>
 8009c62:	bf00      	nop

08009c64 <_FillRect>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	6884      	ldr	r4, [r0, #8]
 8009c6a:	b08f      	sub	sp, #60	; 0x3c
 8009c6c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8009c6e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009c70:	b156      	cbz	r6, 8009c88 <_FillRect+0x24>
 8009c72:	4cbb      	ldr	r4, [pc, #748]	; (8009f60 <_FillRect+0x2fc>)
 8009c74:	6980      	ldr	r0, [r0, #24]
 8009c76:	6824      	ldr	r4, [r4, #0]
 8009c78:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8009c7a:	6824      	ldr	r4, [r4, #0]
 8009c7c:	9401      	str	r4, [sp, #4]
 8009c7e:	9500      	str	r5, [sp, #0]
 8009c80:	47b0      	blx	r6
 8009c82:	b00f      	add	sp, #60	; 0x3c
 8009c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	469a      	mov	sl, r3
 8009c8a:	4bb5      	ldr	r3, [pc, #724]	; (8009f60 <_FillRect+0x2fc>)
 8009c8c:	460f      	mov	r7, r1
 8009c8e:	4696      	mov	lr, r2
 8009c90:	6a21      	ldr	r1, [r4, #32]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	ebce 0505 	rsb	r5, lr, r5
 8009c98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009c9c:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 8009ca0:	7c1a      	ldrb	r2, [r3, #16]
 8009ca2:	9503      	str	r5, [sp, #12]
 8009ca4:	ebc7 060a 	rsb	r6, r7, sl
 8009ca8:	fb01 000e 	mla	r0, r1, lr, r0
 8009cac:	ea4f 0aa1 	mov.w	sl, r1, asr #2
 8009cb0:	f007 0103 	and.w	r1, r7, #3
 8009cb4:	9f03      	ldr	r7, [sp, #12]
 8009cb6:	9608      	str	r6, [sp, #32]
 8009cb8:	07d2      	lsls	r2, r2, #31
 8009cba:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8009cbe:	f106 0801 	add.w	r8, r6, #1
 8009cc2:	f107 0b01 	add.w	fp, r7, #1
 8009cc6:	d54d      	bpl.n	8009d64 <_FillRect+0x100>
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	f000 814b 	beq.w	8009f64 <_FillRect+0x300>
 8009cce:	f1bb 0f00 	cmp.w	fp, #0
 8009cd2:	d0d6      	beq.n	8009c82 <_FillRect+0x1e>
 8009cd4:	4633      	mov	r3, r6
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	f000 8243 	beq.w	800a162 <_FillRect+0x4fe>
 8009cdc:	ea4f 728a 	mov.w	r2, sl, lsl #30
 8009ce0:	fb0a f507 	mul.w	r5, sl, r7
 8009ce4:	ebca 0c02 	rsb	ip, sl, r2
 8009ce8:	9504      	str	r5, [sp, #16]
 8009cea:	4405      	add	r5, r0
 8009cec:	9205      	str	r2, [sp, #20]
 8009cee:	465e      	mov	r6, fp
 8009cf0:	f8cd b018 	str.w	fp, [sp, #24]
 8009cf4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009cf8:	00aa      	lsls	r2, r5, #2
 8009cfa:	469b      	mov	fp, r3
 8009cfc:	e014      	b.n	8009d28 <_FillRect+0xc4>
 8009cfe:	2903      	cmp	r1, #3
 8009d00:	f083 407f 	eor.w	r0, r3, #4278190080	; 0xff000000
 8009d04:	f040 81ad 	bne.w	800a062 <_FillRect+0x3fe>
 8009d08:	46c6      	mov	lr, r8
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f083 23ff 	eor.w	r3, r3, #4278255360	; 0xff00ff00
 8009d10:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8009d14:	603b      	str	r3, [r7, #0]
 8009d16:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	4462      	add	r2, ip
 8009d1e:	ebca 0505 	rsb	r5, sl, r5
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	f000 8260 	beq.w	800a1e8 <_FillRect+0x584>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	2902      	cmp	r1, #2
 8009d2c:	eb02 0703 	add.w	r7, r2, r3
 8009d30:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8009d34:	58d3      	ldr	r3, [r2, r3]
 8009d36:	d1e2      	bne.n	8009cfe <_FillRect+0x9a>
 8009d38:	46c6      	mov	lr, r8
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8009d40:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8009d44:	603b      	str	r3, [r7, #0]
 8009d46:	3001      	adds	r0, #1
 8009d48:	f8d4 9000 	ldr.w	r9, [r4]
 8009d4c:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8009d50:	f1be 0e01 	subs.w	lr, lr, #1
 8009d54:	eb09 0780 	add.w	r7, r9, r0, lsl #2
 8009d58:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8009d5c:	d1d6      	bne.n	8009d0c <_FillRect+0xa8>
 8009d5e:	f849 3020 	str.w	r3, [r9, r0, lsl #2]
 8009d62:	e7db      	b.n	8009d1c <_FillRect+0xb8>
 8009d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	d05b      	beq.n	8009e2a <_FillRect+0x1c6>
 8009d72:	f1bb 0f00 	cmp.w	fp, #0
 8009d76:	d084      	beq.n	8009c82 <_FillRect+0x1e>
 8009d78:	461a      	mov	r2, r3
 8009d7a:	ea4f 6903 	mov.w	r9, r3, lsl #24
 8009d7e:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	9306      	str	r3, [sp, #24]
 8009d86:	0c13      	lsrs	r3, r2, #16
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	0213      	lsls	r3, r2, #8
 8009d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8e:	9b08      	ldr	r3, [sp, #32]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 81a6 	beq.w	800a0e2 <_FillRect+0x47e>
 8009d96:	ea4f 738a 	mov.w	r3, sl, lsl #30
 8009d9a:	fb0a f207 	mul.w	r2, sl, r7
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	ebca 0303 	rsb	r3, sl, r3
 8009da4:	1815      	adds	r5, r2, r0
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	9204      	str	r2, [sp, #16]
 8009daa:	465e      	mov	r6, fp
 8009dac:	00aa      	lsls	r2, r5, #2
 8009dae:	910a      	str	r1, [sp, #40]	; 0x28
 8009db0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009db4:	469e      	mov	lr, r3
 8009db6:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8009dba:	e015      	b.n	8009de8 <_FillRect+0x184>
 8009dbc:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8009dc0:	2903      	cmp	r1, #3
 8009dc2:	ea40 0009 	orr.w	r0, r0, r9
 8009dc6:	f040 8158 	bne.w	800a07a <_FillRect+0x416>
 8009dca:	4647      	mov	r7, r8
 8009dcc:	4628      	mov	r0, r5
 8009dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	3f01      	subs	r7, #1
 8009dd6:	f8cb 3000 	str.w	r3, [fp]
 8009dda:	3001      	adds	r0, #1
 8009ddc:	4472      	add	r2, lr
 8009dde:	ebca 0505 	rsb	r5, sl, r5
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	f000 821b 	beq.w	800a21e <_FillRect+0x5ba>
 8009de8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	2902      	cmp	r1, #2
 8009dee:	eb02 0b03 	add.w	fp, r2, r3
 8009df2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8009df6:	58d3      	ldr	r3, [r2, r3]
 8009df8:	d1e0      	bne.n	8009dbc <_FillRect+0x158>
 8009dfa:	4647      	mov	r7, r8
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	9906      	ldr	r1, [sp, #24]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	430b      	orrs	r3, r1
 8009e04:	f8cb 3000 	str.w	r3, [fp]
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f8d4 c000 	ldr.w	ip, [r4]
 8009e0e:	9907      	ldr	r1, [sp, #28]
 8009e10:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
 8009e14:	3f01      	subs	r7, #1
 8009e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e1a:	ea43 0301 	orr.w	r3, r3, r1
 8009e1e:	eb0c 0b80 	add.w	fp, ip, r0, lsl #2
 8009e22:	d1d4      	bne.n	8009dce <_FillRect+0x16a>
 8009e24:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
 8009e28:	e7d8      	b.n	8009ddc <_FillRect+0x178>
 8009e2a:	f1b8 0f03 	cmp.w	r8, #3
 8009e2e:	dd5b      	ble.n	8009ee8 <_FillRect+0x284>
 8009e30:	f1bb 0f00 	cmp.w	fp, #0
 8009e34:	f000 8227 	beq.w	800a286 <_FillRect+0x622>
 8009e38:	461a      	mov	r2, r3
 8009e3a:	ea4f 738a 	mov.w	r3, sl, lsl #30
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	f8cd 8020 	str.w	r8, [sp, #32]
 8009e46:	fb0a f303 	mul.w	r3, sl, r3
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	ea4f 6902 	mov.w	r9, r2, lsl #24
 8009e50:	4613      	mov	r3, r2
 8009e52:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8009e56:	0412      	lsls	r2, r2, #16
 8009e58:	9206      	str	r2, [sp, #24]
 8009e5a:	0c1a      	lsrs	r2, r3, #16
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	9207      	str	r2, [sp, #28]
 8009e62:	4643      	mov	r3, r8
 8009e64:	9904      	ldr	r1, [sp, #16]
 8009e66:	9a05      	ldr	r2, [sp, #20]
 8009e68:	9d07      	ldr	r5, [sp, #28]
 8009e6a:	eb01 0e00 	add.w	lr, r1, r0
 8009e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e70:	3b04      	subs	r3, #4
 8009e72:	ea49 0701 	orr.w	r7, r9, r1
 8009e76:	9906      	ldr	r1, [sp, #24]
 8009e78:	9006      	str	r0, [sp, #24]
 8009e7a:	089b      	lsrs	r3, r3, #2
 8009e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009e80:	ea4c 0601 	orr.w	r6, ip, r1
 8009e84:	ebca 0202 	rsb	r2, sl, r2
 8009e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e8c:	0092      	lsls	r2, r2, #2
 8009e8e:	f103 0903 	add.w	r9, r3, #3
 8009e92:	f1ca 0300 	rsb	r3, sl, #0
 8009e96:	430d      	orrs	r5, r1
 8009e98:	ea4f 088e 	mov.w	r8, lr, lsl #2
 8009e9c:	9305      	str	r3, [sp, #20]
 8009e9e:	4658      	mov	r0, fp
 8009ea0:	4694      	mov	ip, r2
 8009ea2:	eb09 010e 	add.w	r1, r9, lr
 8009ea6:	3801      	subs	r0, #1
 8009ea8:	0089      	lsls	r1, r1, #2
 8009eaa:	4643      	mov	r3, r8
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	50d7      	str	r7, [r2, r3]
 8009eb0:	6822      	ldr	r2, [r4, #0]
 8009eb2:	441a      	add	r2, r3
 8009eb4:	6056      	str	r6, [r2, #4]
 8009eb6:	6822      	ldr	r2, [r4, #0]
 8009eb8:	441a      	add	r2, r3
 8009eba:	330c      	adds	r3, #12
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	6095      	str	r5, [r2, #8]
 8009ec0:	d1f4      	bne.n	8009eac <_FillRect+0x248>
 8009ec2:	ebca 0e0e 	rsb	lr, sl, lr
 8009ec6:	44e0      	add	r8, ip
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d1ea      	bne.n	8009ea2 <_FillRect+0x23e>
 8009ecc:	9b05      	ldr	r3, [sp, #20]
 8009ece:	9a03      	ldr	r2, [sp, #12]
 8009ed0:	9904      	ldr	r1, [sp, #16]
 8009ed2:	9806      	ldr	r0, [sp, #24]
 8009ed4:	fb02 1303 	mla	r3, r2, r3, r1
 8009ed8:	3303      	adds	r3, #3
 8009eda:	4418      	add	r0, r3
 8009edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ede:	4403      	add	r3, r0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	f003 0803 	and.w	r8, r3, #3
 8009ee8:	f1b8 0f00 	cmp.w	r8, #0
 8009eec:	f43f aec9 	beq.w	8009c82 <_FillRect+0x1e>
 8009ef0:	f1bb 0f00 	cmp.w	fp, #0
 8009ef4:	f43f aec5 	beq.w	8009c82 <_FillRect+0x1e>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009efc:	fb0a f303 	mul.w	r3, sl, r3
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	ea4f 738a 	mov.w	r3, sl, lsl #30
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	ea4f 6902 	mov.w	r9, r2, lsl #24
 8009f0e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8009f12:	0c1b      	lsrs	r3, r3, #16
 8009f14:	0412      	lsls	r2, r2, #16
 8009f16:	9206      	str	r2, [sp, #24]
 8009f18:	9307      	str	r3, [sp, #28]
 8009f1a:	f1b8 0f01 	cmp.w	r8, #1
 8009f1e:	9b05      	ldr	r3, [sp, #20]
 8009f20:	f000 80b9 	beq.w	800a096 <_FillRect+0x432>
 8009f24:	f1b8 0f02 	cmp.w	r8, #2
 8009f28:	f000 8180 	beq.w	800a22c <_FillRect+0x5c8>
 8009f2c:	ebca 0103 	rsb	r1, sl, r3
 8009f30:	9b04      	ldr	r3, [sp, #16]
 8009f32:	9d06      	ldr	r5, [sp, #24]
 8009f34:	9e07      	ldr	r6, [sp, #28]
 8009f36:	4403      	add	r3, r0
 8009f38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009f3a:	0089      	lsls	r1, r1, #2
 8009f3c:	009a      	lsls	r2, r3, #2
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	ea49 0700 	orr.w	r7, r9, r0
 8009f44:	50d7      	str	r7, [r2, r3]
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	ea45 070c 	orr.w	r7, r5, ip
 8009f4e:	509f      	str	r7, [r3, r2]
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	f1bb 0b01 	subs.w	fp, fp, #1
 8009f58:	549e      	strb	r6, [r3, r2]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	d1ef      	bne.n	8009f3e <_FillRect+0x2da>
 8009f5e:	e690      	b.n	8009c82 <_FillRect+0x1e>
 8009f60:	20000018 	.word	0x20000018
 8009f64:	f1b8 0f03 	cmp.w	r8, #3
 8009f68:	dd48      	ble.n	8009ffc <_FillRect+0x398>
 8009f6a:	46c1      	mov	r9, r8
 8009f6c:	f1bb 0f00 	cmp.w	fp, #0
 8009f70:	f000 818e 	beq.w	800a290 <_FillRect+0x62c>
 8009f74:	ea4f 738a 	mov.w	r3, sl, lsl #30
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	fb0a f303 	mul.w	r3, sl, r3
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	f1a9 0304 	sub.w	r3, r9, #4
 8009f88:	ebca 0c02 	rsb	ip, sl, r2
 8009f8c:	089b      	lsrs	r3, r3, #2
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009f94:	9306      	str	r3, [sp, #24]
 8009f96:	1816      	adds	r6, r2, r0
 8009f98:	f103 0803 	add.w	r8, r3, #3
 8009f9c:	f1ca 0300 	rsb	r3, sl, #0
 8009fa0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009fa4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8009fa8:	9305      	str	r3, [sp, #20]
 8009faa:	465f      	mov	r7, fp
 8009fac:	4605      	mov	r5, r0
 8009fae:	eb08 0006 	add.w	r0, r8, r6
 8009fb2:	3f01      	subs	r7, #1
 8009fb4:	0080      	lsls	r0, r0, #2
 8009fb6:	4673      	mov	r3, lr
 8009fb8:	6821      	ldr	r1, [r4, #0]
 8009fba:	585a      	ldr	r2, [r3, r1]
 8009fbc:	43d2      	mvns	r2, r2
 8009fbe:	505a      	str	r2, [r3, r1]
 8009fc0:	6822      	ldr	r2, [r4, #0]
 8009fc2:	3204      	adds	r2, #4
 8009fc4:	58d1      	ldr	r1, [r2, r3]
 8009fc6:	43c9      	mvns	r1, r1
 8009fc8:	50d1      	str	r1, [r2, r3]
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	3208      	adds	r2, #8
 8009fce:	58d1      	ldr	r1, [r2, r3]
 8009fd0:	43c9      	mvns	r1, r1
 8009fd2:	50d1      	str	r1, [r2, r3]
 8009fd4:	330c      	adds	r3, #12
 8009fd6:	4283      	cmp	r3, r0
 8009fd8:	d1ee      	bne.n	8009fb8 <_FillRect+0x354>
 8009fda:	ebca 0606 	rsb	r6, sl, r6
 8009fde:	44e6      	add	lr, ip
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	d1e4      	bne.n	8009fae <_FillRect+0x34a>
 8009fe4:	9b05      	ldr	r3, [sp, #20]
 8009fe6:	9a03      	ldr	r2, [sp, #12]
 8009fe8:	9904      	ldr	r1, [sp, #16]
 8009fea:	fb02 1303 	mla	r3, r2, r3, r1
 8009fee:	3303      	adds	r3, #3
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	4418      	add	r0, r3
 8009ff4:	9b06      	ldr	r3, [sp, #24]
 8009ff6:	4418      	add	r0, r3
 8009ff8:	f009 0803 	and.w	r8, r9, #3
 8009ffc:	f1b8 0f00 	cmp.w	r8, #0
 800a000:	f43f ae3f 	beq.w	8009c82 <_FillRect+0x1e>
 800a004:	f1bb 0f00 	cmp.w	fp, #0
 800a008:	f43f ae3b 	beq.w	8009c82 <_FillRect+0x1e>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	fb0a f303 	mul.w	r3, sl, r3
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	ea4f 738a 	mov.w	r3, sl, lsl #30
 800a018:	9305      	str	r3, [sp, #20]
 800a01a:	f1b8 0f01 	cmp.w	r8, #1
 800a01e:	9b05      	ldr	r3, [sp, #20]
 800a020:	d04c      	beq.n	800a0bc <_FillRect+0x458>
 800a022:	f1b8 0f02 	cmp.w	r8, #2
 800a026:	f000 8116 	beq.w	800a256 <_FillRect+0x5f2>
 800a02a:	ebca 0503 	rsb	r5, sl, r3
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	4403      	add	r3, r0
 800a032:	00ad      	lsls	r5, r5, #2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	6821      	ldr	r1, [r4, #0]
 800a038:	585a      	ldr	r2, [r3, r1]
 800a03a:	43d2      	mvns	r2, r2
 800a03c:	505a      	str	r2, [r3, r1]
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	3204      	adds	r2, #4
 800a042:	f1bb 0b01 	subs.w	fp, fp, #1
 800a046:	58d1      	ldr	r1, [r2, r3]
 800a048:	ea6f 0101 	mvn.w	r1, r1
 800a04c:	50d1      	str	r1, [r2, r3]
 800a04e:	6822      	ldr	r2, [r4, #0]
 800a050:	f102 0208 	add.w	r2, r2, #8
 800a054:	58d1      	ldr	r1, [r2, r3]
 800a056:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800a05a:	50d1      	str	r1, [r2, r3]
 800a05c:	442b      	add	r3, r5
 800a05e:	d1ea      	bne.n	800a036 <_FillRect+0x3d2>
 800a060:	e60f      	b.n	8009c82 <_FillRect+0x1e>
 800a062:	6038      	str	r0, [r7, #0]
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	3304      	adds	r3, #4
 800a068:	189f      	adds	r7, r3, r2
 800a06a:	589b      	ldr	r3, [r3, r2]
 800a06c:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800a070:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800a074:	1c68      	adds	r0, r5, #1
 800a076:	46de      	mov	lr, fp
 800a078:	e660      	b.n	8009d3c <_FillRect+0xd8>
 800a07a:	f8cb 0000 	str.w	r0, [fp]
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a082:	9f08      	ldr	r7, [sp, #32]
 800a084:	3304      	adds	r3, #4
 800a086:	eb03 0b02 	add.w	fp, r3, r2
 800a08a:	589b      	ldr	r3, [r3, r2]
 800a08c:	0c1b      	lsrs	r3, r3, #16
 800a08e:	041b      	lsls	r3, r3, #16
 800a090:	430b      	orrs	r3, r1
 800a092:	1c68      	adds	r0, r5, #1
 800a094:	e6b3      	b.n	8009dfe <_FillRect+0x19a>
 800a096:	ebca 0a03 	rsb	sl, sl, r3
 800a09a:	9b04      	ldr	r3, [sp, #16]
 800a09c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a09e:	4403      	add	r3, r0
 800a0a0:	009a      	lsls	r2, r3, #2
 800a0a2:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800a0a6:	6821      	ldr	r1, [r4, #0]
 800a0a8:	5853      	ldr	r3, [r2, r1]
 800a0aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a0ae:	432b      	orrs	r3, r5
 800a0b0:	f1bb 0b01 	subs.w	fp, fp, #1
 800a0b4:	5053      	str	r3, [r2, r1]
 800a0b6:	4402      	add	r2, r0
 800a0b8:	d1f5      	bne.n	800a0a6 <_FillRect+0x442>
 800a0ba:	e5e2      	b.n	8009c82 <_FillRect+0x1e>
 800a0bc:	ebca 0a03 	rsb	sl, sl, r3
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	4403      	add	r3, r0
 800a0c4:	009a      	lsls	r2, r3, #2
 800a0c6:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800a0ca:	6821      	ldr	r1, [r4, #0]
 800a0cc:	5853      	ldr	r3, [r2, r1]
 800a0ce:	f083 13ff 	eor.w	r3, r3, #16711935	; 0xff00ff
 800a0d2:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800a0d6:	f1bb 0b01 	subs.w	fp, fp, #1
 800a0da:	5053      	str	r3, [r2, r1]
 800a0dc:	4402      	add	r2, r0
 800a0de:	d1f4      	bne.n	800a0ca <_FillRect+0x466>
 800a0e0:	e5cf      	b.n	8009c82 <_FillRect+0x1e>
 800a0e2:	fb0a f307 	mul.w	r3, sl, r7
 800a0e6:	1c5d      	adds	r5, r3, #1
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	ea4f 738a 	mov.w	r3, sl, lsl #30
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	ebca 0303 	rsb	r3, sl, r3
 800a0f4:	4405      	add	r5, r0
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	00aa      	lsls	r2, r5, #2
 800a0fa:	465e      	mov	r6, fp
 800a0fc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a100:	469e      	mov	lr, r3
 800a102:	e011      	b.n	800a128 <_FillRect+0x4c4>
 800a104:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800a108:	2903      	cmp	r1, #3
 800a10a:	ea40 0009 	orr.w	r0, r0, r9
 800a10e:	d120      	bne.n	800a152 <_FillRect+0x4ee>
 800a110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a112:	9508      	str	r5, [sp, #32]
 800a114:	b2ff      	uxtb	r7, r7
 800a116:	4307      	orrs	r7, r0
 800a118:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 800a11c:	601f      	str	r7, [r3, #0]
 800a11e:	4472      	add	r2, lr
 800a120:	ebca 0505 	rsb	r5, sl, r5
 800a124:	2e00      	cmp	r6, #0
 800a126:	d06c      	beq.n	800a202 <_FillRect+0x59e>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	1f18      	subs	r0, r3, #4
 800a12c:	2902      	cmp	r1, #2
 800a12e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800a132:	eb00 0302 	add.w	r3, r0, r2
 800a136:	5887      	ldr	r7, [r0, r2]
 800a138:	d1e4      	bne.n	800a104 <_FillRect+0x4a0>
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	9508      	str	r5, [sp, #32]
 800a13e:	b2bf      	uxth	r7, r7
 800a140:	431f      	orrs	r7, r3
 800a142:	5087      	str	r7, [r0, r2]
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a14a:	54d0      	strb	r0, [r2, r3]
 800a14c:	f04f 0b00 	mov.w	fp, #0
 800a150:	e7e5      	b.n	800a11e <_FillRect+0x4ba>
 800a152:	6018      	str	r0, [r3, #0]
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	9508      	str	r5, [sp, #32]
 800a158:	f04f 0b00 	mov.w	fp, #0
 800a15c:	f822 c003 	strh.w	ip, [r2, r3]
 800a160:	e7dd      	b.n	800a11e <_FillRect+0x4ba>
 800a162:	fb0a f307 	mul.w	r3, sl, r7
 800a166:	1c5d      	adds	r5, r3, #1
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	ea4f 738a 	mov.w	r3, sl, lsl #30
 800a16e:	4405      	add	r5, r0
 800a170:	ebca 0703 	rsb	r7, sl, r3
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	00aa      	lsls	r2, r5, #2
 800a178:	00bf      	lsls	r7, r7, #2
 800a17a:	465e      	mov	r6, fp
 800a17c:	e010      	b.n	800a1a0 <_FillRect+0x53c>
 800a17e:	2903      	cmp	r1, #3
 800a180:	f083 407f 	eor.w	r0, r3, #4278190080	; 0xff000000
 800a184:	d123      	bne.n	800a1ce <_FillRect+0x56a>
 800a186:	f083 23ff 	eor.w	r3, r3, #4278255360	; 0xff00ff00
 800a18a:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 800a18e:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800a192:	4628      	mov	r0, r5
 800a194:	f8ce 3000 	str.w	r3, [lr]
 800a198:	443a      	add	r2, r7
 800a19a:	ebca 0505 	rsb	r5, sl, r5
 800a19e:	b336      	cbz	r6, 800a1ee <_FillRect+0x58a>
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	3804      	subs	r0, #4
 800a1a4:	2902      	cmp	r1, #2
 800a1a6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800a1aa:	eb00 0e02 	add.w	lr, r0, r2
 800a1ae:	5883      	ldr	r3, [r0, r2]
 800a1b0:	d1e5      	bne.n	800a17e <_FillRect+0x51a>
 800a1b2:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 800a1b6:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 800a1ba:	5083      	str	r3, [r0, r2]
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	5813      	ldr	r3, [r2, r0]
 800a1c0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800a1c4:	5013      	str	r3, [r2, r0]
 800a1c6:	f04f 0900 	mov.w	r9, #0
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	e7e4      	b.n	800a198 <_FillRect+0x534>
 800a1ce:	f8ce 0000 	str.w	r0, [lr]
 800a1d2:	6820      	ldr	r0, [r4, #0]
 800a1d4:	5813      	ldr	r3, [r2, r0]
 800a1d6:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800a1da:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800a1de:	5013      	str	r3, [r2, r0]
 800a1e0:	f04f 0900 	mov.w	r9, #0
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	e7d7      	b.n	800a198 <_FillRect+0x534>
 800a1e8:	f8dd b018 	ldr.w	fp, [sp, #24]
 800a1ec:	46f1      	mov	r9, lr
 800a1ee:	f1b9 0f03 	cmp.w	r9, #3
 800a1f2:	f73f aec6 	bgt.w	8009f82 <_FillRect+0x31e>
 800a1f6:	f1b9 0f00 	cmp.w	r9, #0
 800a1fa:	f43f ad42 	beq.w	8009c82 <_FillRect+0x1e>
 800a1fe:	46c8      	mov	r8, r9
 800a200:	e70b      	b.n	800a01a <_FillRect+0x3b6>
 800a202:	9808      	ldr	r0, [sp, #32]
 800a204:	f8cd b020 	str.w	fp, [sp, #32]
 800a208:	9b08      	ldr	r3, [sp, #32]
 800a20a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a20e:	2b03      	cmp	r3, #3
 800a210:	f73f ae28 	bgt.w	8009e64 <_FillRect+0x200>
 800a214:	2b00      	cmp	r3, #0
 800a216:	f43f ad34 	beq.w	8009c82 <_FillRect+0x1e>
 800a21a:	4698      	mov	r8, r3
 800a21c:	e67d      	b.n	8009f1a <_FillRect+0x2b6>
 800a21e:	9708      	str	r7, [sp, #32]
 800a220:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a224:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 800a228:	463b      	mov	r3, r7
 800a22a:	e7f0      	b.n	800a20e <_FillRect+0x5aa>
 800a22c:	ebca 0a03 	rsb	sl, sl, r3
 800a230:	9b04      	ldr	r3, [sp, #16]
 800a232:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a234:	4403      	add	r3, r0
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	ea49 0105 	orr.w	r1, r9, r5
 800a242:	5099      	str	r1, [r3, r2]
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	3204      	adds	r2, #4
 800a248:	f1bb 0b01 	subs.w	fp, fp, #1
 800a24c:	f822 c003 	strh.w	ip, [r2, r3]
 800a250:	4403      	add	r3, r0
 800a252:	d1f3      	bne.n	800a23c <_FillRect+0x5d8>
 800a254:	e515      	b.n	8009c82 <_FillRect+0x1e>
 800a256:	ebca 0a03 	rsb	sl, sl, r3
 800a25a:	9b04      	ldr	r3, [sp, #16]
 800a25c:	4403      	add	r3, r0
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800a264:	6821      	ldr	r1, [r4, #0]
 800a266:	585a      	ldr	r2, [r3, r1]
 800a268:	43d2      	mvns	r2, r2
 800a26a:	505a      	str	r2, [r3, r1]
 800a26c:	6821      	ldr	r1, [r4, #0]
 800a26e:	3104      	adds	r1, #4
 800a270:	f1bb 0b01 	subs.w	fp, fp, #1
 800a274:	58ca      	ldr	r2, [r1, r3]
 800a276:	f482 427f 	eor.w	r2, r2, #65280	; 0xff00
 800a27a:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 800a27e:	50ca      	str	r2, [r1, r3]
 800a280:	4403      	add	r3, r0
 800a282:	d1ef      	bne.n	800a264 <_FillRect+0x600>
 800a284:	e4fd      	b.n	8009c82 <_FillRect+0x1e>
 800a286:	f8cd 8020 	str.w	r8, [sp, #32]
 800a28a:	4658      	mov	r0, fp
 800a28c:	4643      	mov	r3, r8
 800a28e:	e629      	b.n	8009ee4 <_FillRect+0x280>
 800a290:	4658      	mov	r0, fp
 800a292:	e6b1      	b.n	8009ff8 <_FillRect+0x394>

0800a294 <_DrawHLine>:
 800a294:	b500      	push	{lr}
 800a296:	b083      	sub	sp, #12
 800a298:	9200      	str	r2, [sp, #0]
 800a29a:	f7ff fce3 	bl	8009c64 <_FillRect>
 800a29e:	b003      	add	sp, #12
 800a2a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800a2a4 <_DrawVLine>:
 800a2a4:	b500      	push	{lr}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	f7ff fcda 	bl	8009c64 <_FillRect>
 800a2b0:	b003      	add	sp, #12
 800a2b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b6:	bf00      	nop

0800a2b8 <_Init>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	6884      	ldr	r4, [r0, #8]
 800a2bc:	4605      	mov	r5, r0
 800a2be:	b14c      	cbz	r4, 800a2d4 <_Init+0x1c>
 800a2c0:	69a8      	ldr	r0, [r5, #24]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	f7fa fdcb 	bl	8004e60 <LCD_X_DisplayDriver>
 800a2ca:	2c00      	cmp	r4, #0
 800a2cc:	bf08      	it	eq
 800a2ce:	f040 0001 	orreq.w	r0, r0, #1
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	204c      	movs	r0, #76	; 0x4c
 800a2d6:	f7fc ff57 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	60a8      	str	r0, [r5, #8]
 800a2de:	224c      	movs	r2, #76	; 0x4c
 800a2e0:	f7fe fa28 	bl	8008734 <GUI__memset>
 800a2e4:	68ac      	ldr	r4, [r5, #8]
 800a2e6:	e7eb      	b.n	800a2c0 <_Init+0x8>

0800a2e8 <_SetVRAM_BufferPTR>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	6884      	ldr	r4, [r0, #8]
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	b11c      	cbz	r4, 800a2f8 <_SetVRAM_BufferPTR+0x10>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	60a5      	str	r5, [r4, #8]
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	204c      	movs	r0, #76	; 0x4c
 800a2fc:	f7fc ff44 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a300:	4621      	mov	r1, r4
 800a302:	60b0      	str	r0, [r6, #8]
 800a304:	224c      	movs	r2, #76	; 0x4c
 800a306:	f7fe fa15 	bl	8008734 <GUI__memset>
 800a30a:	68b4      	ldr	r4, [r6, #8]
 800a30c:	2c00      	cmp	r4, #0
 800a30e:	d1ef      	bne.n	800a2f0 <_SetVRAM_BufferPTR+0x8>
 800a310:	bd70      	pop	{r4, r5, r6, pc}
 800a312:	bf00      	nop

0800a314 <_GetPos>:
 800a314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a316:	6884      	ldr	r4, [r0, #8]
 800a318:	460f      	mov	r7, r1
 800a31a:	4616      	mov	r6, r2
 800a31c:	b124      	cbz	r4, 800a328 <_GetPos+0x14>
 800a31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a320:	603b      	str	r3, [r7, #0]
 800a322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a324:	6033      	str	r3, [r6, #0]
 800a326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a328:	4605      	mov	r5, r0
 800a32a:	204c      	movs	r0, #76	; 0x4c
 800a32c:	f7fc ff2c 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a330:	4621      	mov	r1, r4
 800a332:	60a8      	str	r0, [r5, #8]
 800a334:	224c      	movs	r2, #76	; 0x4c
 800a336:	f7fe f9fd 	bl	8008734 <GUI__memset>
 800a33a:	68ac      	ldr	r4, [r5, #8]
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	d1ee      	bne.n	800a31e <_GetPos+0xa>
 800a340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a342:	bf00      	nop

0800a344 <_ShowBuffer>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	6885      	ldr	r5, [r0, #8]
 800a348:	b082      	sub	sp, #8
 800a34a:	2300      	movs	r3, #0
 800a34c:	4604      	mov	r4, r0
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	460e      	mov	r6, r1
 800a352:	b145      	cbz	r5, 800a366 <_ShowBuffer+0x22>
 800a354:	aa02      	add	r2, sp, #8
 800a356:	69a0      	ldr	r0, [r4, #24]
 800a358:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a35c:	210e      	movs	r1, #14
 800a35e:	f7fa fd7f 	bl	8004e60 <LCD_X_DisplayDriver>
 800a362:	b002      	add	sp, #8
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	204c      	movs	r0, #76	; 0x4c
 800a368:	f7fc ff0e 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a36c:	4629      	mov	r1, r5
 800a36e:	60a0      	str	r0, [r4, #8]
 800a370:	224c      	movs	r2, #76	; 0x4c
 800a372:	f7fe f9df 	bl	8008734 <GUI__memset>
 800a376:	68a3      	ldr	r3, [r4, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1eb      	bne.n	800a354 <_ShowBuffer+0x10>
 800a37c:	b002      	add	sp, #8
 800a37e:	bd70      	pop	{r4, r5, r6, pc}

0800a380 <_SetAlpha>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	6884      	ldr	r4, [r0, #8]
 800a384:	b082      	sub	sp, #8
 800a386:	2300      	movs	r3, #0
 800a388:	4605      	mov	r5, r0
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	460e      	mov	r6, r1
 800a38e:	b14c      	cbz	r4, 800a3a4 <_SetAlpha+0x24>
 800a390:	aa02      	add	r2, sp, #8
 800a392:	62e6      	str	r6, [r4, #44]	; 0x2c
 800a394:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a398:	69a8      	ldr	r0, [r5, #24]
 800a39a:	210a      	movs	r1, #10
 800a39c:	f7fa fd60 	bl	8004e60 <LCD_X_DisplayDriver>
 800a3a0:	b002      	add	sp, #8
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}
 800a3a4:	204c      	movs	r0, #76	; 0x4c
 800a3a6:	f7fc feef 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	60a8      	str	r0, [r5, #8]
 800a3ae:	224c      	movs	r2, #76	; 0x4c
 800a3b0:	f7fe f9c0 	bl	8008734 <GUI__memset>
 800a3b4:	68ac      	ldr	r4, [r5, #8]
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	d1ea      	bne.n	800a390 <_SetAlpha+0x10>
 800a3ba:	b002      	add	sp, #8
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	bf00      	nop

0800a3c0 <_SetVis>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	6884      	ldr	r4, [r0, #8]
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	460e      	mov	r6, r1
 800a3ce:	b14c      	cbz	r4, 800a3e4 <_SetVis+0x24>
 800a3d0:	aa02      	add	r2, sp, #8
 800a3d2:	6326      	str	r6, [r4, #48]	; 0x30
 800a3d4:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a3d8:	69a8      	ldr	r0, [r5, #24]
 800a3da:	2109      	movs	r1, #9
 800a3dc:	f7fa fd40 	bl	8004e60 <LCD_X_DisplayDriver>
 800a3e0:	b002      	add	sp, #8
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	204c      	movs	r0, #76	; 0x4c
 800a3e6:	f7fc fecf 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	60a8      	str	r0, [r5, #8]
 800a3ee:	224c      	movs	r2, #76	; 0x4c
 800a3f0:	f7fe f9a0 	bl	8008734 <GUI__memset>
 800a3f4:	68ac      	ldr	r4, [r5, #8]
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	d1ea      	bne.n	800a3d0 <_SetVis+0x10>
 800a3fa:	b002      	add	sp, #8
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	bf00      	nop

0800a400 <_SetVRAMAddr>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	6884      	ldr	r4, [r0, #8]
 800a404:	b082      	sub	sp, #8
 800a406:	2300      	movs	r3, #0
 800a408:	4606      	mov	r6, r0
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	460d      	mov	r5, r1
 800a40e:	b154      	cbz	r4, 800a426 <_SetVRAMAddr+0x26>
 800a410:	aa02      	add	r2, sp, #8
 800a412:	6025      	str	r5, [r4, #0]
 800a414:	6065      	str	r5, [r4, #4]
 800a416:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a41a:	69b0      	ldr	r0, [r6, #24]
 800a41c:	2102      	movs	r1, #2
 800a41e:	f7fa fd1f 	bl	8004e60 <LCD_X_DisplayDriver>
 800a422:	b002      	add	sp, #8
 800a424:	bd70      	pop	{r4, r5, r6, pc}
 800a426:	204c      	movs	r0, #76	; 0x4c
 800a428:	f7fc feae 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a42c:	4621      	mov	r1, r4
 800a42e:	60b0      	str	r0, [r6, #8]
 800a430:	224c      	movs	r2, #76	; 0x4c
 800a432:	f7fe f97f 	bl	8008734 <GUI__memset>
 800a436:	68b4      	ldr	r4, [r6, #8]
 800a438:	2c00      	cmp	r4, #0
 800a43a:	d1e9      	bne.n	800a410 <_SetVRAMAddr+0x10>
 800a43c:	b002      	add	sp, #8
 800a43e:	bd70      	pop	{r4, r5, r6, pc}

0800a440 <_SetVSize>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	6884      	ldr	r4, [r0, #8]
 800a444:	4605      	mov	r5, r0
 800a446:	460e      	mov	r6, r1
 800a448:	4617      	mov	r7, r2
 800a44a:	b14c      	cbz	r4, 800a460 <_SetVSize+0x20>
 800a44c:	69a8      	ldr	r0, [r5, #24]
 800a44e:	f7fe ff3b 	bl	80092c8 <LCD_GetSwapXYEx>
 800a452:	61a6      	str	r6, [r4, #24]
 800a454:	61e7      	str	r7, [r4, #28]
 800a456:	b908      	cbnz	r0, 800a45c <_SetVSize+0x1c>
 800a458:	6226      	str	r6, [r4, #32]
 800a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45c:	6227      	str	r7, [r4, #32]
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	204c      	movs	r0, #76	; 0x4c
 800a462:	f7fc fe91 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a466:	4621      	mov	r1, r4
 800a468:	60a8      	str	r0, [r5, #8]
 800a46a:	224c      	movs	r2, #76	; 0x4c
 800a46c:	f7fe f962 	bl	8008734 <GUI__memset>
 800a470:	68ac      	ldr	r4, [r5, #8]
 800a472:	2c00      	cmp	r4, #0
 800a474:	d1ea      	bne.n	800a44c <_SetVSize+0xc>
 800a476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a478 <_SetDevFunc>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	6885      	ldr	r5, [r0, #8]
 800a47c:	460c      	mov	r4, r1
 800a47e:	4617      	mov	r7, r2
 800a480:	b315      	cbz	r5, 800a4c8 <_SetDevFunc+0x50>
 800a482:	1ee3      	subs	r3, r4, #3
 800a484:	2b22      	cmp	r3, #34	; 0x22
 800a486:	d814      	bhi.n	800a4b2 <_SetDevFunc+0x3a>
 800a488:	e8df f003 	tbb	[pc, r3]
 800a48c:	13131312 	.word	0x13131312
 800a490:	13131313 	.word	0x13131313
 800a494:	13131313 	.word	0x13131313
 800a498:	13131313 	.word	0x13131313
 800a49c:	13131313 	.word	0x13131313
 800a4a0:	13161313 	.word	0x13161313
 800a4a4:	13131313 	.word	0x13131313
 800a4a8:	131a1813 	.word	0x131a1813
 800a4ac:	131c      	.short	0x131c
 800a4ae:	14          	.byte	0x14
 800a4af:	00          	.byte	0x00
 800a4b0:	64af      	str	r7, [r5, #72]	; 0x48
 800a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b4:	642f      	str	r7, [r5, #64]	; 0x40
 800a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b8:	636f      	str	r7, [r5, #52]	; 0x34
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	63ef      	str	r7, [r5, #60]	; 0x3c
 800a4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c0:	63af      	str	r7, [r5, #56]	; 0x38
 800a4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c4:	646f      	str	r7, [r5, #68]	; 0x44
 800a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	204c      	movs	r0, #76	; 0x4c
 800a4cc:	f7fc fe5c 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	60b0      	str	r0, [r6, #8]
 800a4d4:	224c      	movs	r2, #76	; 0x4c
 800a4d6:	f7fe f92d 	bl	8008734 <GUI__memset>
 800a4da:	68b5      	ldr	r5, [r6, #8]
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	d1d0      	bne.n	800a482 <_SetDevFunc+0xa>
 800a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e2:	bf00      	nop

0800a4e4 <_SetSize>:
 800a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e6:	6884      	ldr	r4, [r0, #8]
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	b1ac      	cbz	r4, 800a524 <_SetSize+0x40>
 800a4f8:	6a23      	ldr	r3, [r4, #32]
 800a4fa:	b153      	cbz	r3, 800a512 <_SetSize+0x2e>
 800a4fc:	6127      	str	r7, [r4, #16]
 800a4fe:	6166      	str	r6, [r4, #20]
 800a500:	466a      	mov	r2, sp
 800a502:	69a8      	ldr	r0, [r5, #24]
 800a504:	9700      	str	r7, [sp, #0]
 800a506:	2107      	movs	r1, #7
 800a508:	9601      	str	r6, [sp, #4]
 800a50a:	f7fa fca9 	bl	8004e60 <LCD_X_DisplayDriver>
 800a50e:	b003      	add	sp, #12
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a512:	69a8      	ldr	r0, [r5, #24]
 800a514:	f7fe fed8 	bl	80092c8 <LCD_GetSwapXYEx>
 800a518:	2800      	cmp	r0, #0
 800a51a:	bf0c      	ite	eq
 800a51c:	4638      	moveq	r0, r7
 800a51e:	4630      	movne	r0, r6
 800a520:	6220      	str	r0, [r4, #32]
 800a522:	e7eb      	b.n	800a4fc <_SetSize+0x18>
 800a524:	204c      	movs	r0, #76	; 0x4c
 800a526:	f7fc fe2f 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a52a:	4621      	mov	r1, r4
 800a52c:	60a8      	str	r0, [r5, #8]
 800a52e:	224c      	movs	r2, #76	; 0x4c
 800a530:	f7fe f900 	bl	8008734 <GUI__memset>
 800a534:	68ac      	ldr	r4, [r5, #8]
 800a536:	2c00      	cmp	r4, #0
 800a538:	d1de      	bne.n	800a4f8 <_SetSize+0x14>
 800a53a:	b003      	add	sp, #12
 800a53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53e:	bf00      	nop

0800a540 <_CopyBuffer>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	6884      	ldr	r4, [r0, #8]
 800a546:	4605      	mov	r5, r0
 800a548:	460e      	mov	r6, r1
 800a54a:	4617      	mov	r7, r2
 800a54c:	b334      	cbz	r4, 800a59c <_CopyBuffer+0x5c>
 800a54e:	42be      	cmp	r6, r7
 800a550:	d01c      	beq.n	800a58c <_CopyBuffer+0x4c>
 800a552:	68eb      	ldr	r3, [r5, #12]
 800a554:	2108      	movs	r1, #8
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	4628      	mov	r0, r5
 800a55a:	4798      	blx	r3
 800a55c:	69a1      	ldr	r1, [r4, #24]
 800a55e:	6963      	ldr	r3, [r4, #20]
 800a560:	68a2      	ldr	r2, [r4, #8]
 800a562:	fb03 f301 	mul.w	r3, r3, r1
 800a566:	fb00 f003 	mul.w	r0, r0, r3
 800a56a:	08c3      	lsrs	r3, r0, #3
 800a56c:	b182      	cbz	r2, 800a590 <_CopyBuffer+0x50>
 800a56e:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 800a572:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 800a576:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800a57a:	f1b8 0f00 	cmp.w	r8, #0
 800a57e:	d01a      	beq.n	800a5b6 <_CopyBuffer+0x76>
 800a580:	463a      	mov	r2, r7
 800a582:	4631      	mov	r1, r6
 800a584:	69a8      	ldr	r0, [r5, #24]
 800a586:	47c0      	blx	r8
 800a588:	f8c4 9000 	str.w	r9, [r4]
 800a58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a590:	6862      	ldr	r2, [r4, #4]
 800a592:	fb03 2106 	mla	r1, r3, r6, r2
 800a596:	fb03 2907 	mla	r9, r3, r7, r2
 800a59a:	e7ec      	b.n	800a576 <_CopyBuffer+0x36>
 800a59c:	204c      	movs	r0, #76	; 0x4c
 800a59e:	f7fc fdf3 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	60a8      	str	r0, [r5, #8]
 800a5a6:	224c      	movs	r2, #76	; 0x4c
 800a5a8:	f7fe f8c4 	bl	8008734 <GUI__memset>
 800a5ac:	68ac      	ldr	r4, [r5, #8]
 800a5ae:	2c00      	cmp	r4, #0
 800a5b0:	d1cd      	bne.n	800a54e <_CopyBuffer+0xe>
 800a5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b6:	4803      	ldr	r0, [pc, #12]	; (800a5c4 <_CopyBuffer+0x84>)
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6803      	ldr	r3, [r0, #0]
 800a5bc:	4648      	mov	r0, r9
 800a5be:	4798      	blx	r3
 800a5c0:	e7e2      	b.n	800a588 <_CopyBuffer+0x48>
 800a5c2:	bf00      	nop
 800a5c4:	20000030 	.word	0x20000030

0800a5c8 <_DrawBitmap>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	b095      	sub	sp, #84	; 0x54
 800a5ce:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800a5d0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800a5d2:	9504      	str	r5, [sp, #16]
 800a5d4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a5d6:	9501      	str	r5, [sp, #4]
 800a5d8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800a5da:	9506      	str	r5, [sp, #24]
 800a5dc:	3c01      	subs	r4, #1
 800a5de:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800a5e0:	9500      	str	r5, [sp, #0]
 800a5e2:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800a5e6:	9009      	str	r0, [sp, #36]	; 0x24
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	6885      	ldr	r5, [r0, #8]
 800a5ec:	2c1f      	cmp	r4, #31
 800a5ee:	f200 80d2 	bhi.w	800a796 <_DrawBitmap+0x1ce>
 800a5f2:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a5f6:	00d3      	.short	0x00d3
 800a5f8:	00d0021d 	.word	0x00d0021d
 800a5fc:	00d00297 	.word	0x00d00297
 800a600:	00d000d0 	.word	0x00d000d0
 800a604:	00d0030c 	.word	0x00d0030c
 800a608:	00d000d0 	.word	0x00d000d0
 800a60c:	00d000d0 	.word	0x00d000d0
 800a610:	00d000d0 	.word	0x00d000d0
 800a614:	00d000d0 	.word	0x00d000d0
 800a618:	00d000d0 	.word	0x00d000d0
 800a61c:	00d000d0 	.word	0x00d000d0
 800a620:	00d000d0 	.word	0x00d000d0
 800a624:	00d000d0 	.word	0x00d000d0
 800a628:	00d000d0 	.word	0x00d000d0
 800a62c:	00d000d0 	.word	0x00d000d0
 800a630:	00d000d0 	.word	0x00d000d0
 800a634:	0020      	.short	0x0020
 800a636:	9b04      	ldr	r3, [sp, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f340 80ac 	ble.w	800a796 <_DrawBitmap+0x1ce>
 800a63e:	6a2b      	ldr	r3, [r5, #32]
 800a640:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a644:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a648:	9303      	str	r3, [sp, #12]
 800a64a:	fb03 0302 	mla	r3, r3, r2, r0
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	f001 0303 	and.w	r3, r1, #3
 800a654:	9305      	str	r3, [sp, #20]
 800a656:	9b02      	ldr	r3, [sp, #8]
 800a658:	f04f 0e00 	mov.w	lr, #0
 800a65c:	3b01      	subs	r3, #1
 800a65e:	9308      	str	r3, [sp, #32]
 800a660:	46f1      	mov	r9, lr
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	9a05      	ldr	r2, [sp, #20]
 800a666:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	f000 8324 	beq.w	800acb8 <_DrawBitmap+0x6f0>
 800a670:	682e      	ldr	r6, [r5, #0]
 800a672:	ea4f 008e 	mov.w	r0, lr, lsl #2
 800a676:	2a02      	cmp	r2, #2
 800a678:	eb00 0406 	add.w	r4, r0, r6
 800a67c:	f856 302e 	ldr.w	r3, [r6, lr, lsl #2]
 800a680:	f000 8489 	beq.w	800af96 <_DrawBitmap+0x9ce>
 800a684:	2a03      	cmp	r2, #3
 800a686:	f040 843e 	bne.w	800af06 <_DrawBitmap+0x93e>
 800a68a:	9f02      	ldr	r7, [sp, #8]
 800a68c:	46d8      	mov	r8, fp
 800a68e:	f8d8 0000 	ldr.w	r0, [r8]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800a698:	3f01      	subs	r7, #1
 800a69a:	f10e 0e01 	add.w	lr, lr, #1
 800a69e:	6020      	str	r0, [r4, #0]
 800a6a0:	f108 0804 	add.w	r8, r8, #4
 800a6a4:	2f03      	cmp	r7, #3
 800a6a6:	dd39      	ble.n	800a71c <_DrawBitmap+0x154>
 800a6a8:	1f3b      	subs	r3, r7, #4
 800a6aa:	089f      	lsrs	r7, r3, #2
 800a6ac:	9306      	str	r3, [sp, #24]
 800a6ae:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800a6b2:	f10e 0303 	add.w	r3, lr, #3
 800a6b6:	ea4f 008e 	mov.w	r0, lr, lsl #2
 800a6ba:	eb02 0e03 	add.w	lr, r2, r3
 800a6be:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 800a6c2:	f108 0110 	add.w	r1, r8, #16
 800a6c6:	46ca      	mov	sl, r9
 800a6c8:	9707      	str	r7, [sp, #28]
 800a6ca:	f1a1 0210 	sub.w	r2, r1, #16
 800a6ce:	ca54      	ldmia	r2, {r2, r4, r6}
 800a6d0:	682f      	ldr	r7, [r5, #0]
 800a6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6d6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800a6da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a6de:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800a6e2:	503a      	str	r2, [r7, r0]
 800a6e4:	682a      	ldr	r2, [r5, #0]
 800a6e6:	f026 497f 	bic.w	r9, r6, #4278190080	; 0xff000000
 800a6ea:	4402      	add	r2, r0
 800a6ec:	ea4f 4609 	mov.w	r6, r9, lsl #16
 800a6f0:	ea46 2414 	orr.w	r4, r6, r4, lsr #8
 800a6f4:	6054      	str	r4, [r2, #4]
 800a6f6:	682a      	ldr	r2, [r5, #0]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	4402      	add	r2, r0
 800a6fc:	300c      	adds	r0, #12
 800a6fe:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800a702:	4560      	cmp	r0, ip
 800a704:	f101 0110 	add.w	r1, r1, #16
 800a708:	6093      	str	r3, [r2, #8]
 800a70a:	d1de      	bne.n	800a6ca <_DrawBitmap+0x102>
 800a70c:	9f07      	ldr	r7, [sp, #28]
 800a70e:	9a06      	ldr	r2, [sp, #24]
 800a710:	1c7b      	adds	r3, r7, #1
 800a712:	46d1      	mov	r9, sl
 800a714:	eba2 0787 	sub.w	r7, r2, r7, lsl #2
 800a718:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 800a71c:	b37f      	cbz	r7, 800a77e <_DrawBitmap+0x1b6>
 800a71e:	6828      	ldr	r0, [r5, #0]
 800a720:	f8d8 2000 	ldr.w	r2, [r8]
 800a724:	f850 302e 	ldr.w	r3, [r0, lr, lsl #2]
 800a728:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a72c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a730:	2f01      	cmp	r7, #1
 800a732:	ea42 0203 	orr.w	r2, r2, r3
 800a736:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800a73a:	f000 835f 	beq.w	800adfc <_DrawBitmap+0x834>
 800a73e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a742:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a746:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a74a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a74e:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 800a752:	1d20      	adds	r0, r4, #4
 800a754:	682a      	ldr	r2, [r5, #0]
 800a756:	5883      	ldr	r3, [r0, r2]
 800a758:	0c1b      	lsrs	r3, r3, #16
 800a75a:	041b      	lsls	r3, r3, #16
 800a75c:	2f02      	cmp	r7, #2
 800a75e:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
 800a762:	f000 8541 	beq.w	800b1e8 <_DrawBitmap+0xc20>
 800a766:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800a76a:	b289      	uxth	r1, r1
 800a76c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 800a770:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800a774:	5081      	str	r1, [r0, r2]
 800a776:	3408      	adds	r4, #8
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	0c36      	lsrs	r6, r6, #16
 800a77c:	54e6      	strb	r6, [r4, r3]
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	9a03      	ldr	r2, [sp, #12]
 800a782:	449b      	add	fp, r3
 800a784:	9b00      	ldr	r3, [sp, #0]
 800a786:	4413      	add	r3, r2
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	9b04      	ldr	r3, [sp, #16]
 800a78c:	f109 0901 	add.w	r9, r9, #1
 800a790:	454b      	cmp	r3, r9
 800a792:	f47f af66 	bne.w	800a662 <_DrawBitmap+0x9a>
 800a796:	b015      	add	sp, #84	; 0x54
 800a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79c:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 800a79e:	b12e      	cbz	r6, 800a7ac <_DrawBitmap+0x1e4>
 800a7a0:	4bb6      	ldr	r3, [pc, #728]	; (800aa7c <_DrawBitmap+0x4b4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	7c1b      	ldrb	r3, [r3, #16]
 800a7a6:	07db      	lsls	r3, r3, #31
 800a7a8:	f140 866b 	bpl.w	800b482 <_DrawBitmap+0xeba>
 800a7ac:	9b04      	ldr	r3, [sp, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	ddf1      	ble.n	800a796 <_DrawBitmap+0x1ce>
 800a7b2:	9c06      	ldr	r4, [sp, #24]
 800a7b4:	9208      	str	r2, [sp, #32]
 800a7b6:	190b      	adds	r3, r1, r4
 800a7b8:	49b0      	ldr	r1, [pc, #704]	; (800aa7c <_DrawBitmap+0x4b4>)
 800a7ba:	9103      	str	r1, [sp, #12]
 800a7bc:	9904      	ldr	r1, [sp, #16]
 800a7be:	930e      	str	r3, [sp, #56]	; 0x38
 800a7c0:	4411      	add	r1, r2
 800a7c2:	f10b 0201 	add.w	r2, fp, #1
 800a7c6:	9205      	str	r2, [sp, #20]
 800a7c8:	f003 0203 	and.w	r2, r3, #3
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7d0:	f1c4 0307 	rsb	r3, r4, #7
 800a7d4:	9312      	str	r3, [sp, #72]	; 0x48
 800a7d6:	9b02      	ldr	r3, [sp, #8]
 800a7d8:	9210      	str	r2, [sp, #64]	; 0x40
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	f1c4 0208 	rsb	r2, r4, #8
 800a7e0:	910b      	str	r1, [sp, #44]	; 0x2c
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	9211      	str	r2, [sp, #68]	; 0x44
 800a7e6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	9900      	ldr	r1, [sp, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	680a      	ldr	r2, [r1, #0]
 800a7f0:	7c1b      	ldrb	r3, [r3, #16]
 800a7f2:	f8d1 b004 	ldr.w	fp, [r1, #4]
 800a7f6:	9905      	ldr	r1, [sp, #20]
 800a7f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	f101 34ff 	add.w	r4, r1, #4294967295	; 0xffffffff
 800a804:	f000 8342 	beq.w	800ae8c <_DrawBitmap+0x8c4>
 800a808:	2b03      	cmp	r3, #3
 800a80a:	f000 82fa 	beq.w	800ae02 <_DrawBitmap+0x83a>
 800a80e:	2b01      	cmp	r3, #1
 800a810:	f000 82f7 	beq.w	800ae02 <_DrawBitmap+0x83a>
 800a814:	6a07      	ldr	r7, [r0, #32]
 800a816:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a818:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a81a:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 800a81e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800a822:	19af      	adds	r7, r5, r6
 800a824:	4d96      	ldr	r5, [pc, #600]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a826:	5ceb      	ldrb	r3, [r5, r3]
 800a828:	9d08      	ldr	r5, [sp, #32]
 800a82a:	fb05 7702 	mla	r7, r5, r2, r7
 800a82e:	9d06      	ldr	r5, [sp, #24]
 800a830:	412b      	asrs	r3, r5
 800a832:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a834:	08bf      	lsrs	r7, r7, #2
 800a836:	2d00      	cmp	r5, #0
 800a838:	f000 84cc 	beq.w	800b1d4 <_DrawBitmap+0xc0c>
 800a83c:	6806      	ldr	r6, [r0, #0]
 800a83e:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800a842:	2d02      	cmp	r5, #2
 800a844:	eb08 0106 	add.w	r1, r8, r6
 800a848:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 800a84c:	f000 85d3 	beq.w	800b3f6 <_DrawBitmap+0xe2e>
 800a850:	2d03      	cmp	r5, #3
 800a852:	f040 8561 	bne.w	800b318 <_DrawBitmap+0xd50>
 800a856:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a858:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a85c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a85e:	f013 0f01 	tst.w	r3, #1
 800a862:	bf0c      	ite	eq
 800a864:	46b0      	moveq	r8, r6
 800a866:	46d8      	movne	r8, fp
 800a868:	f1b5 0c01 	subs.w	ip, r5, #1
 800a86c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a870:	f000 858d 	beq.w	800b38e <_DrawBitmap+0xdc6>
 800a874:	b2d2      	uxtb	r2, r2
 800a876:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
 800a87a:	600a      	str	r2, [r1, #0]
 800a87c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a880:	3701      	adds	r7, #1
 800a882:	f1ba 0f03 	cmp.w	sl, #3
 800a886:	dd73      	ble.n	800a970 <_DrawBitmap+0x3a8>
 800a888:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a88a:	9707      	str	r7, [sp, #28]
 800a88c:	00be      	lsls	r6, r7, #2
 800a88e:	46d6      	mov	lr, sl
 800a890:	9004      	str	r0, [sp, #16]
 800a892:	f013 0f01 	tst.w	r3, #1
 800a896:	bf0c      	ite	eq
 800a898:	46a8      	moveq	r8, r5
 800a89a:	46d8      	movne	r8, fp
 800a89c:	f1bc 0201 	subs.w	r2, ip, #1
 800a8a0:	f1ae 0e04 	sub.w	lr, lr, #4
 800a8a4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a8a8:	d106      	bne.n	800a8b8 <_DrawBitmap+0x2f0>
 800a8aa:	7862      	ldrb	r2, [r4, #1]
 800a8ac:	4974      	ldr	r1, [pc, #464]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a8ae:	5c89      	ldrb	r1, [r1, r2]
 800a8b0:	3401      	adds	r4, #1
 800a8b2:	f10c 0207 	add.w	r2, ip, #7
 800a8b6:	430b      	orrs	r3, r1
 800a8b8:	f013 0f01 	tst.w	r3, #1
 800a8bc:	bf0c      	ite	eq
 800a8be:	4629      	moveq	r1, r5
 800a8c0:	4659      	movne	r1, fp
 800a8c2:	f1b2 0c01 	subs.w	ip, r2, #1
 800a8c6:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 800a8ca:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a8ce:	ea4f 2111 	mov.w	r1, r1, lsr #8
 800a8d2:	d106      	bne.n	800a8e2 <_DrawBitmap+0x31a>
 800a8d4:	7867      	ldrb	r7, [r4, #1]
 800a8d6:	486a      	ldr	r0, [pc, #424]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a8d8:	5dc7      	ldrb	r7, [r0, r7]
 800a8da:	f102 0c07 	add.w	ip, r2, #7
 800a8de:	433b      	orrs	r3, r7
 800a8e0:	3401      	adds	r4, #1
 800a8e2:	f013 0f01 	tst.w	r3, #1
 800a8e6:	bf0c      	ite	eq
 800a8e8:	462a      	moveq	r2, r5
 800a8ea:	465a      	movne	r2, fp
 800a8ec:	f1bc 0701 	subs.w	r7, ip, #1
 800a8f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8f4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a8f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a8fc:	d108      	bne.n	800a910 <_DrawBitmap+0x348>
 800a8fe:	7867      	ldrb	r7, [r4, #1]
 800a900:	485f      	ldr	r0, [pc, #380]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a902:	f810 9007 	ldrb.w	r9, [r0, r7]
 800a906:	3401      	adds	r4, #1
 800a908:	f10c 0707 	add.w	r7, ip, #7
 800a90c:	ea43 0309 	orr.w	r3, r3, r9
 800a910:	f013 0f01 	tst.w	r3, #1
 800a914:	bf0c      	ite	eq
 800a916:	46ac      	moveq	ip, r5
 800a918:	46dc      	movne	ip, fp
 800a91a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a91e:	f1b7 0c01 	subs.w	ip, r7, #1
 800a922:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a926:	d109      	bne.n	800a93c <_DrawBitmap+0x374>
 800a928:	f894 c001 	ldrb.w	ip, [r4, #1]
 800a92c:	4854      	ldr	r0, [pc, #336]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a92e:	f810 900c 	ldrb.w	r9, [r0, ip]
 800a932:	3401      	adds	r4, #1
 800a934:	f107 0c07 	add.w	ip, r7, #7
 800a938:	ea43 0309 	orr.w	r3, r3, r9
 800a93c:	9804      	ldr	r0, [sp, #16]
 800a93e:	6807      	ldr	r7, [r0, #0]
 800a940:	f847 8006 	str.w	r8, [r7, r6]
 800a944:	6807      	ldr	r7, [r0, #0]
 800a946:	4437      	add	r7, r6
 800a948:	f1be 0f03 	cmp.w	lr, #3
 800a94c:	6079      	str	r1, [r7, #4]
 800a94e:	6801      	ldr	r1, [r0, #0]
 800a950:	4431      	add	r1, r6
 800a952:	f106 060c 	add.w	r6, r6, #12
 800a956:	608a      	str	r2, [r1, #8]
 800a958:	dc9b      	bgt.n	800a892 <_DrawBitmap+0x2ca>
 800a95a:	f1aa 0a04 	sub.w	sl, sl, #4
 800a95e:	9f07      	ldr	r7, [sp, #28]
 800a960:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800a964:	3703      	adds	r7, #3
 800a966:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800a96a:	ebaa 0a82 	sub.w	sl, sl, r2, lsl #2
 800a96e:	440f      	add	r7, r1
 800a970:	f1ba 0f00 	cmp.w	sl, #0
 800a974:	d04e      	beq.n	800aa14 <_DrawBitmap+0x44c>
 800a976:	6805      	ldr	r5, [r0, #0]
 800a978:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a97a:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
 800a97e:	f013 0f01 	tst.w	r3, #1
 800a982:	bf18      	it	ne
 800a984:	4659      	movne	r1, fp
 800a986:	f1bc 0601 	subs.w	r6, ip, #1
 800a98a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a98e:	f002 487f 	and.w	r8, r2, #4278190080	; 0xff000000
 800a992:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800a996:	d108      	bne.n	800a9aa <_DrawBitmap+0x3e2>
 800a998:	7866      	ldrb	r6, [r4, #1]
 800a99a:	4a39      	ldr	r2, [pc, #228]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a99c:	f812 e006 	ldrb.w	lr, [r2, r6]
 800a9a0:	3401      	adds	r4, #1
 800a9a2:	f10c 0607 	add.w	r6, ip, #7
 800a9a6:	ea43 030e 	orr.w	r3, r3, lr
 800a9aa:	f1ba 0f01 	cmp.w	sl, #1
 800a9ae:	ea48 0201 	orr.w	r2, r8, r1
 800a9b2:	f000 8427 	beq.w	800b204 <_DrawBitmap+0xc3c>
 800a9b6:	f013 0f01 	tst.w	r3, #1
 800a9ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9bc:	bf18      	it	ne
 800a9be:	4659      	movne	r1, fp
 800a9c0:	2e01      	cmp	r6, #1
 800a9c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a9c6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a9ca:	d103      	bne.n	800a9d4 <_DrawBitmap+0x40c>
 800a9cc:	7864      	ldrb	r4, [r4, #1]
 800a9ce:	4e2c      	ldr	r6, [pc, #176]	; (800aa80 <_DrawBitmap+0x4b8>)
 800a9d0:	5d34      	ldrb	r4, [r6, r4]
 800a9d2:	4323      	orrs	r3, r4
 800a9d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a9d8:	517a      	str	r2, [r7, r5]
 800a9da:	1d3d      	adds	r5, r7, #4
 800a9dc:	6804      	ldr	r4, [r0, #0]
 800a9de:	592a      	ldr	r2, [r5, r4]
 800a9e0:	0c12      	lsrs	r2, r2, #16
 800a9e2:	0412      	lsls	r2, r2, #16
 800a9e4:	f1ba 0f02 	cmp.w	sl, #2
 800a9e8:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 800a9ec:	f000 855a 	beq.w	800b4a4 <_DrawBitmap+0xedc>
 800a9f0:	f013 0f01 	tst.w	r3, #1
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f6:	b292      	uxth	r2, r2
 800a9f8:	bf18      	it	ne
 800a9fa:	465b      	movne	r3, fp
 800a9fc:	461e      	mov	r6, r3
 800a9fe:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800aa02:	512b      	str	r3, [r5, r4]
 800aa04:	3708      	adds	r7, #8
 800aa06:	6802      	ldr	r2, [r0, #0]
 800aa08:	58bb      	ldr	r3, [r7, r2]
 800aa0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aa0e:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800aa12:	50bb      	str	r3, [r7, r2]
 800aa14:	9a05      	ldr	r2, [sp, #20]
 800aa16:	9901      	ldr	r1, [sp, #4]
 800aa18:	9b08      	ldr	r3, [sp, #32]
 800aa1a:	440a      	add	r2, r1
 800aa1c:	9205      	str	r2, [sp, #20]
 800aa1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa20:	3301      	adds	r3, #1
 800aa22:	4293      	cmp	r3, r2
 800aa24:	9308      	str	r3, [sp, #32]
 800aa26:	f43f aeb6 	beq.w	800a796 <_DrawBitmap+0x1ce>
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	6898      	ldr	r0, [r3, #8]
 800aa2e:	e6db      	b.n	800a7e8 <_DrawBitmap+0x220>
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f77f aeaf 	ble.w	800a796 <_DrawBitmap+0x1ce>
 800aa38:	4b10      	ldr	r3, [pc, #64]	; (800aa7c <_DrawBitmap+0x4b4>)
 800aa3a:	9303      	str	r3, [sp, #12]
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	f8cd b010 	str.w	fp, [sp, #16]
 800aa42:	4413      	add	r3, r2
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	9b06      	ldr	r3, [sp, #24]
 800aa48:	18cb      	adds	r3, r1, r3
 800aa4a:	4681      	mov	r9, r0
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	9307      	str	r3, [sp, #28]
 800aa50:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	9a04      	ldr	r2, [sp, #16]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	7817      	ldrb	r7, [r2, #0]
 800aa5c:	7c1b      	ldrb	r3, [r3, #16]
 800aa5e:	f013 0303 	ands.w	r3, r3, #3
 800aa62:	f000 812c 	beq.w	800acbe <_DrawBitmap+0x6f6>
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d132      	bne.n	800aad0 <_DrawBitmap+0x508>
 800aa6a:	9b00      	ldr	r3, [sp, #0]
 800aa6c:	9d06      	ldr	r5, [sp, #24]
 800aa6e:	9e02      	ldr	r6, [sp, #8]
 800aa70:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa74:	4693      	mov	fp, r2
 800aa76:	b95b      	cbnz	r3, 800aa90 <_DrawBitmap+0x4c8>
 800aa78:	e03e      	b.n	800aaf8 <_DrawBitmap+0x530>
 800aa7a:	bf00      	nop
 800aa7c:	20000018 	.word	0x20000018
 800aa80:	08015aa4 	.word	0x08015aa4
 800aa84:	2d04      	cmp	r5, #4
 800aa86:	f10a 0a01 	add.w	sl, sl, #1
 800aa8a:	d019      	beq.n	800aac0 <_DrawBitmap+0x4f8>
 800aa8c:	3e01      	subs	r6, #1
 800aa8e:	d01f      	beq.n	800aad0 <_DrawBitmap+0x508>
 800aa90:	f1c5 0303 	rsb	r3, r5, #3
 800aa94:	005a      	lsls	r2, r3, #1
 800aa96:	f1c2 0306 	rsb	r3, r2, #6
 800aa9a:	fa48 f303 	asr.w	r3, r8, r3
 800aa9e:	403b      	ands	r3, r7
 800aaa0:	40d3      	lsrs	r3, r2
 800aaa2:	f105 0501 	add.w	r5, r5, #1
 800aaa6:	d0ed      	beq.n	800aa84 <_DrawBitmap+0x4bc>
 800aaa8:	9a00      	ldr	r2, [sp, #0]
 800aaaa:	4651      	mov	r1, sl
 800aaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab0:	4648      	mov	r0, r9
 800aab2:	4622      	mov	r2, r4
 800aab4:	f7fe ff2a 	bl	800990c <_SetPixelIndex>
 800aab8:	2d04      	cmp	r5, #4
 800aaba:	f10a 0a01 	add.w	sl, sl, #1
 800aabe:	d1e5      	bne.n	800aa8c <_DrawBitmap+0x4c4>
 800aac0:	3e01      	subs	r6, #1
 800aac2:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800aac6:	f04f 0500 	mov.w	r5, #0
 800aaca:	f10b 0b01 	add.w	fp, fp, #1
 800aace:	d1df      	bne.n	800aa90 <_DrawBitmap+0x4c8>
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	3401      	adds	r4, #1
 800aadc:	429c      	cmp	r4, r3
 800aade:	d1b9      	bne.n	800aa54 <_DrawBitmap+0x48c>
 800aae0:	e659      	b.n	800a796 <_DrawBitmap+0x1ce>
 800aae2:	4651      	mov	r1, sl
 800aae4:	4622      	mov	r2, r4
 800aae6:	4648      	mov	r0, r9
 800aae8:	f7fe ff10 	bl	800990c <_SetPixelIndex>
 800aaec:	2d04      	cmp	r5, #4
 800aaee:	f10a 0a01 	add.w	sl, sl, #1
 800aaf2:	d011      	beq.n	800ab18 <_DrawBitmap+0x550>
 800aaf4:	3e01      	subs	r6, #1
 800aaf6:	d0eb      	beq.n	800aad0 <_DrawBitmap+0x508>
 800aaf8:	f1c5 0303 	rsb	r3, r5, #3
 800aafc:	005a      	lsls	r2, r3, #1
 800aafe:	f1c2 0306 	rsb	r3, r2, #6
 800ab02:	fa48 f303 	asr.w	r3, r8, r3
 800ab06:	403b      	ands	r3, r7
 800ab08:	40d3      	lsrs	r3, r2
 800ab0a:	f105 0501 	add.w	r5, r5, #1
 800ab0e:	d1e8      	bne.n	800aae2 <_DrawBitmap+0x51a>
 800ab10:	2d04      	cmp	r5, #4
 800ab12:	f10a 0a01 	add.w	sl, sl, #1
 800ab16:	d1ed      	bne.n	800aaf4 <_DrawBitmap+0x52c>
 800ab18:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800ab1c:	2500      	movs	r5, #0
 800ab1e:	f10b 0b01 	add.w	fp, fp, #1
 800ab22:	e7e7      	b.n	800aaf4 <_DrawBitmap+0x52c>
 800ab24:	9b04      	ldr	r3, [sp, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f77f ae35 	ble.w	800a796 <_DrawBitmap+0x1ce>
 800ab2c:	4bbd      	ldr	r3, [pc, #756]	; (800ae24 <_DrawBitmap+0x85c>)
 800ab2e:	9303      	str	r3, [sp, #12]
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	f8cd b010 	str.w	fp, [sp, #16]
 800ab36:	4413      	add	r3, r2
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	9b06      	ldr	r3, [sp, #24]
 800ab3c:	18cb      	adds	r3, r1, r3
 800ab3e:	4681      	mov	r9, r0
 800ab40:	4614      	mov	r4, r2
 800ab42:	9307      	str	r3, [sp, #28]
 800ab44:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	9a04      	ldr	r2, [sp, #16]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	7817      	ldrb	r7, [r2, #0]
 800ab50:	7c1b      	ldrb	r3, [r3, #16]
 800ab52:	f013 0303 	ands.w	r3, r3, #3
 800ab56:	f000 80f7 	beq.w	800ad48 <_DrawBitmap+0x780>
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d12d      	bne.n	800abba <_DrawBitmap+0x5f2>
 800ab5e:	9b00      	ldr	r3, [sp, #0]
 800ab60:	9d06      	ldr	r5, [sp, #24]
 800ab62:	9e02      	ldr	r6, [sp, #8]
 800ab64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ab68:	4693      	mov	fp, r2
 800ab6a:	b933      	cbnz	r3, 800ab7a <_DrawBitmap+0x5b2>
 800ab6c:	e039      	b.n	800abe2 <_DrawBitmap+0x61a>
 800ab6e:	2d02      	cmp	r5, #2
 800ab70:	f10a 0a01 	add.w	sl, sl, #1
 800ab74:	d019      	beq.n	800abaa <_DrawBitmap+0x5e2>
 800ab76:	3e01      	subs	r6, #1
 800ab78:	d01f      	beq.n	800abba <_DrawBitmap+0x5f2>
 800ab7a:	f1c5 0301 	rsb	r3, r5, #1
 800ab7e:	009a      	lsls	r2, r3, #2
 800ab80:	f1c2 0304 	rsb	r3, r2, #4
 800ab84:	fa48 f303 	asr.w	r3, r8, r3
 800ab88:	403b      	ands	r3, r7
 800ab8a:	40d3      	lsrs	r3, r2
 800ab8c:	f105 0501 	add.w	r5, r5, #1
 800ab90:	d0ed      	beq.n	800ab6e <_DrawBitmap+0x5a6>
 800ab92:	9a00      	ldr	r2, [sp, #0]
 800ab94:	4651      	mov	r1, sl
 800ab96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab9a:	4648      	mov	r0, r9
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	f7fe feb5 	bl	800990c <_SetPixelIndex>
 800aba2:	2d02      	cmp	r5, #2
 800aba4:	f10a 0a01 	add.w	sl, sl, #1
 800aba8:	d1e5      	bne.n	800ab76 <_DrawBitmap+0x5ae>
 800abaa:	3e01      	subs	r6, #1
 800abac:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800abb0:	f04f 0500 	mov.w	r5, #0
 800abb4:	f10b 0b01 	add.w	fp, fp, #1
 800abb8:	d1df      	bne.n	800ab7a <_DrawBitmap+0x5b2>
 800abba:	9b04      	ldr	r3, [sp, #16]
 800abbc:	9a01      	ldr	r2, [sp, #4]
 800abbe:	4413      	add	r3, r2
 800abc0:	9304      	str	r3, [sp, #16]
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	3401      	adds	r4, #1
 800abc6:	429c      	cmp	r4, r3
 800abc8:	d1be      	bne.n	800ab48 <_DrawBitmap+0x580>
 800abca:	e5e4      	b.n	800a796 <_DrawBitmap+0x1ce>
 800abcc:	4651      	mov	r1, sl
 800abce:	4622      	mov	r2, r4
 800abd0:	4648      	mov	r0, r9
 800abd2:	f7fe fe9b 	bl	800990c <_SetPixelIndex>
 800abd6:	2d02      	cmp	r5, #2
 800abd8:	f10a 0a01 	add.w	sl, sl, #1
 800abdc:	d011      	beq.n	800ac02 <_DrawBitmap+0x63a>
 800abde:	3e01      	subs	r6, #1
 800abe0:	d0eb      	beq.n	800abba <_DrawBitmap+0x5f2>
 800abe2:	f1c5 0301 	rsb	r3, r5, #1
 800abe6:	009a      	lsls	r2, r3, #2
 800abe8:	f1c2 0304 	rsb	r3, r2, #4
 800abec:	fa48 f303 	asr.w	r3, r8, r3
 800abf0:	403b      	ands	r3, r7
 800abf2:	40d3      	lsrs	r3, r2
 800abf4:	f105 0501 	add.w	r5, r5, #1
 800abf8:	d1e8      	bne.n	800abcc <_DrawBitmap+0x604>
 800abfa:	2d02      	cmp	r5, #2
 800abfc:	f10a 0a01 	add.w	sl, sl, #1
 800ac00:	d1ed      	bne.n	800abde <_DrawBitmap+0x616>
 800ac02:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800ac06:	2500      	movs	r5, #0
 800ac08:	f10b 0b01 	add.w	fp, fp, #1
 800ac0c:	e7e7      	b.n	800abde <_DrawBitmap+0x616>
 800ac0e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800ac10:	b1a4      	cbz	r4, 800ac3c <_DrawBitmap+0x674>
 800ac12:	4b84      	ldr	r3, [pc, #528]	; (800ae24 <_DrawBitmap+0x85c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	7c1b      	ldrb	r3, [r3, #16]
 800ac18:	079b      	lsls	r3, r3, #30
 800ac1a:	d40f      	bmi.n	800ac3c <_DrawBitmap+0x674>
 800ac1c:	9b00      	ldr	r3, [sp, #0]
 800ac1e:	b16b      	cbz	r3, 800ac3c <_DrawBitmap+0x674>
 800ac20:	6980      	ldr	r0, [r0, #24]
 800ac22:	9321      	str	r3, [sp, #132]	; 0x84
 800ac24:	9b01      	ldr	r3, [sp, #4]
 800ac26:	9320      	str	r3, [sp, #128]	; 0x80
 800ac28:	9b04      	ldr	r3, [sp, #16]
 800ac2a:	931f      	str	r3, [sp, #124]	; 0x7c
 800ac2c:	9b02      	ldr	r3, [sp, #8]
 800ac2e:	931e      	str	r3, [sp, #120]	; 0x78
 800ac30:	46a4      	mov	ip, r4
 800ac32:	465b      	mov	r3, fp
 800ac34:	b015      	add	sp, #84	; 0x54
 800ac36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	4760      	bx	ip
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f77f ada9 	ble.w	800a796 <_DrawBitmap+0x1ce>
 800ac44:	4b77      	ldr	r3, [pc, #476]	; (800ae24 <_DrawBitmap+0x85c>)
 800ac46:	9303      	str	r3, [sp, #12]
 800ac48:	9b04      	ldr	r3, [sp, #16]
 800ac4a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac4e:	4413      	add	r3, r2
 800ac50:	461f      	mov	r7, r3
 800ac52:	9704      	str	r7, [sp, #16]
 800ac54:	9b02      	ldr	r3, [sp, #8]
 800ac56:	e89d 0480 	ldmia.w	sp, {r7, sl}
 800ac5a:	4614      	mov	r4, r2
 800ac5c:	ebcb 0801 	rsb	r8, fp, r1
 800ac60:	eb0b 0603 	add.w	r6, fp, r3
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	7c1b      	ldrb	r3, [r3, #16]
 800ac6a:	f013 0303 	ands.w	r3, r3, #3
 800ac6e:	f000 80b0 	beq.w	800add2 <_DrawBitmap+0x80a>
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d117      	bne.n	800aca6 <_DrawBitmap+0x6de>
 800ac76:	9b02      	ldr	r3, [sp, #8]
 800ac78:	2f00      	cmp	r7, #0
 800ac7a:	f000 82e6 	beq.w	800b24a <_DrawBitmap+0xc82>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd11      	ble.n	800aca6 <_DrawBitmap+0x6de>
 800ac82:	465d      	mov	r5, fp
 800ac84:	e001      	b.n	800ac8a <_DrawBitmap+0x6c2>
 800ac86:	42b5      	cmp	r5, r6
 800ac88:	d00d      	beq.n	800aca6 <_DrawBitmap+0x6de>
 800ac8a:	eb08 0105 	add.w	r1, r8, r5
 800ac8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f7      	beq.n	800ac86 <_DrawBitmap+0x6be>
 800ac96:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800ac9a:	4622      	mov	r2, r4
 800ac9c:	4648      	mov	r0, r9
 800ac9e:	f7fe fe35 	bl	800990c <_SetPixelIndex>
 800aca2:	42b5      	cmp	r5, r6
 800aca4:	d1f1      	bne.n	800ac8a <_DrawBitmap+0x6c2>
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	3401      	adds	r4, #1
 800acaa:	42a3      	cmp	r3, r4
 800acac:	44d3      	add	fp, sl
 800acae:	ebca 0808 	rsb	r8, sl, r8
 800acb2:	4456      	add	r6, sl
 800acb4:	d1d6      	bne.n	800ac64 <_DrawBitmap+0x69c>
 800acb6:	e56e      	b.n	800a796 <_DrawBitmap+0x1ce>
 800acb8:	9f02      	ldr	r7, [sp, #8]
 800acba:	46d8      	mov	r8, fp
 800acbc:	e4f2      	b.n	800a6a4 <_DrawBitmap+0xdc>
 800acbe:	9b00      	ldr	r3, [sp, #0]
 800acc0:	9e06      	ldr	r6, [sp, #24]
 800acc2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800acc6:	9d07      	ldr	r5, [sp, #28]
 800acc8:	4693      	mov	fp, r2
 800acca:	b923      	cbnz	r3, 800acd6 <_DrawBitmap+0x70e>
 800accc:	e028      	b.n	800ad20 <_DrawBitmap+0x758>
 800acce:	f1ba 0a01 	subs.w	sl, sl, #1
 800acd2:	f43f aefd 	beq.w	800aad0 <_DrawBitmap+0x508>
 800acd6:	f1c6 0303 	rsb	r3, r6, #3
 800acda:	005a      	lsls	r2, r3, #1
 800acdc:	f1c2 0306 	rsb	r3, r2, #6
 800ace0:	fa48 f303 	asr.w	r3, r8, r3
 800ace4:	403b      	ands	r3, r7
 800ace6:	40d3      	lsrs	r3, r2
 800ace8:	9a00      	ldr	r2, [sp, #0]
 800acea:	4629      	mov	r1, r5
 800acec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf0:	3601      	adds	r6, #1
 800acf2:	4622      	mov	r2, r4
 800acf4:	4648      	mov	r0, r9
 800acf6:	f7fe fe09 	bl	800990c <_SetPixelIndex>
 800acfa:	2e04      	cmp	r6, #4
 800acfc:	f105 0501 	add.w	r5, r5, #1
 800ad00:	d1e5      	bne.n	800acce <_DrawBitmap+0x706>
 800ad02:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800ad06:	2600      	movs	r6, #0
 800ad08:	f10b 0b01 	add.w	fp, fp, #1
 800ad0c:	e7df      	b.n	800acce <_DrawBitmap+0x706>
 800ad0e:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800ad12:	2600      	movs	r6, #0
 800ad14:	f10b 0b01 	add.w	fp, fp, #1
 800ad18:	f1ba 0a01 	subs.w	sl, sl, #1
 800ad1c:	f43f aed8 	beq.w	800aad0 <_DrawBitmap+0x508>
 800ad20:	f1c6 0203 	rsb	r2, r6, #3
 800ad24:	0052      	lsls	r2, r2, #1
 800ad26:	f1c2 0306 	rsb	r3, r2, #6
 800ad2a:	fa48 f303 	asr.w	r3, r8, r3
 800ad2e:	403b      	ands	r3, r7
 800ad30:	40d3      	lsrs	r3, r2
 800ad32:	4629      	mov	r1, r5
 800ad34:	3601      	adds	r6, #1
 800ad36:	4622      	mov	r2, r4
 800ad38:	4648      	mov	r0, r9
 800ad3a:	f7fe fde7 	bl	800990c <_SetPixelIndex>
 800ad3e:	2e04      	cmp	r6, #4
 800ad40:	f105 0501 	add.w	r5, r5, #1
 800ad44:	d1e8      	bne.n	800ad18 <_DrawBitmap+0x750>
 800ad46:	e7e2      	b.n	800ad0e <_DrawBitmap+0x746>
 800ad48:	9b00      	ldr	r3, [sp, #0]
 800ad4a:	9e06      	ldr	r6, [sp, #24]
 800ad4c:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ad50:	9d07      	ldr	r5, [sp, #28]
 800ad52:	4693      	mov	fp, r2
 800ad54:	b923      	cbnz	r3, 800ad60 <_DrawBitmap+0x798>
 800ad56:	e028      	b.n	800adaa <_DrawBitmap+0x7e2>
 800ad58:	f1ba 0a01 	subs.w	sl, sl, #1
 800ad5c:	f43f af2d 	beq.w	800abba <_DrawBitmap+0x5f2>
 800ad60:	f1c6 0301 	rsb	r3, r6, #1
 800ad64:	009a      	lsls	r2, r3, #2
 800ad66:	f1c2 0304 	rsb	r3, r2, #4
 800ad6a:	fa48 f303 	asr.w	r3, r8, r3
 800ad6e:	403b      	ands	r3, r7
 800ad70:	40d3      	lsrs	r3, r2
 800ad72:	9a00      	ldr	r2, [sp, #0]
 800ad74:	4629      	mov	r1, r5
 800ad76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad7a:	3601      	adds	r6, #1
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	4648      	mov	r0, r9
 800ad80:	f7fe fdc4 	bl	800990c <_SetPixelIndex>
 800ad84:	2e02      	cmp	r6, #2
 800ad86:	f105 0501 	add.w	r5, r5, #1
 800ad8a:	d1e5      	bne.n	800ad58 <_DrawBitmap+0x790>
 800ad8c:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800ad90:	2600      	movs	r6, #0
 800ad92:	f10b 0b01 	add.w	fp, fp, #1
 800ad96:	e7df      	b.n	800ad58 <_DrawBitmap+0x790>
 800ad98:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	f10b 0b01 	add.w	fp, fp, #1
 800ada2:	f1ba 0a01 	subs.w	sl, sl, #1
 800ada6:	f43f af08 	beq.w	800abba <_DrawBitmap+0x5f2>
 800adaa:	f1c6 0201 	rsb	r2, r6, #1
 800adae:	0092      	lsls	r2, r2, #2
 800adb0:	f1c2 0304 	rsb	r3, r2, #4
 800adb4:	fa48 f303 	asr.w	r3, r8, r3
 800adb8:	403b      	ands	r3, r7
 800adba:	40d3      	lsrs	r3, r2
 800adbc:	4629      	mov	r1, r5
 800adbe:	3601      	adds	r6, #1
 800adc0:	4622      	mov	r2, r4
 800adc2:	4648      	mov	r0, r9
 800adc4:	f7fe fda2 	bl	800990c <_SetPixelIndex>
 800adc8:	2e02      	cmp	r6, #2
 800adca:	f105 0501 	add.w	r5, r5, #1
 800adce:	d1e8      	bne.n	800ada2 <_DrawBitmap+0x7da>
 800add0:	e7e2      	b.n	800ad98 <_DrawBitmap+0x7d0>
 800add2:	9b02      	ldr	r3, [sp, #8]
 800add4:	2f00      	cmp	r7, #0
 800add6:	f000 8228 	beq.w	800b22a <_DrawBitmap+0xc62>
 800adda:	2b00      	cmp	r3, #0
 800addc:	f77f af63 	ble.w	800aca6 <_DrawBitmap+0x6de>
 800ade0:	465d      	mov	r5, fp
 800ade2:	782b      	ldrb	r3, [r5, #0]
 800ade4:	eb05 0108 	add.w	r1, r5, r8
 800ade8:	4622      	mov	r2, r4
 800adea:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800adee:	4648      	mov	r0, r9
 800adf0:	3501      	adds	r5, #1
 800adf2:	f7fe fd8b 	bl	800990c <_SetPixelIndex>
 800adf6:	42b5      	cmp	r5, r6
 800adf8:	d1f3      	bne.n	800ade2 <_DrawBitmap+0x81a>
 800adfa:	e754      	b.n	800aca6 <_DrawBitmap+0x6de>
 800adfc:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 800ae00:	e4bd      	b.n	800a77e <_DrawBitmap+0x1b6>
 800ae02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4798      	blx	r3
 800ae0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ae0e:	9e02      	ldr	r6, [sp, #8]
 800ae10:	9d06      	ldr	r5, [sp, #24]
 800ae12:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae16:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4681      	mov	r9, r0
 800ae1e:	eb01 0807 	add.w	r8, r1, r7
 800ae22:	e00d      	b.n	800ae40 <_DrawBitmap+0x878>
 800ae24:	20000018 	.word	0x20000018
 800ae28:	3501      	adds	r5, #1
 800ae2a:	2d08      	cmp	r5, #8
 800ae2c:	bf04      	itt	eq
 800ae2e:	3401      	addeq	r4, #1
 800ae30:	2500      	moveq	r5, #0
 800ae32:	3e01      	subs	r6, #1
 800ae34:	f107 0701 	add.w	r7, r7, #1
 800ae38:	f108 0803 	add.w	r8, r8, #3
 800ae3c:	f43f adea 	beq.w	800aa14 <_DrawBitmap+0x44c>
 800ae40:	7822      	ldrb	r2, [r4, #0]
 800ae42:	2380      	movs	r3, #128	; 0x80
 800ae44:	412b      	asrs	r3, r5
 800ae46:	421a      	tst	r2, r3
 800ae48:	d0ee      	beq.n	800ae28 <_DrawBitmap+0x860>
 800ae4a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ae4e:	6a13      	ldr	r3, [r2, #32]
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ae56:	fb0a 8303 	mla	r3, sl, r3, r8
 800ae5a:	089b      	lsrs	r3, r3, #2
 800ae5c:	f007 0103 	and.w	r1, r7, #3
 800ae60:	2902      	cmp	r1, #2
 800ae62:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800ae66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae6a:	f000 808c 	beq.w	800af86 <_DrawBitmap+0x9be>
 800ae6e:	2903      	cmp	r1, #3
 800ae70:	f000 8087 	beq.w	800af82 <_DrawBitmap+0x9ba>
 800ae74:	2901      	cmp	r1, #1
 800ae76:	d07a      	beq.n	800af6e <_DrawBitmap+0x9a6>
 800ae78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae7c:	ea89 0303 	eor.w	r3, r9, r3
 800ae80:	4652      	mov	r2, sl
 800ae82:	4639      	mov	r1, r7
 800ae84:	4658      	mov	r0, fp
 800ae86:	f7fe fd41 	bl	800990c <_SetPixelIndex>
 800ae8a:	e7cd      	b.n	800ae28 <_DrawBitmap+0x860>
 800ae8c:	6a02      	ldr	r2, [r0, #32]
 800ae8e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 800ae92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ae94:	460f      	mov	r7, r1
 800ae96:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ae9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae9c:	442a      	add	r2, r5
 800ae9e:	4dcc      	ldr	r5, [pc, #816]	; (800b1d0 <_DrawBitmap+0xc08>)
 800aea0:	5ceb      	ldrb	r3, [r5, r3]
 800aea2:	9d08      	ldr	r5, [sp, #32]
 800aea4:	fb05 2201 	mla	r2, r5, r1, r2
 800aea8:	9906      	ldr	r1, [sp, #24]
 800aeaa:	410b      	asrs	r3, r1
 800aeac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aeae:	0892      	lsrs	r2, r2, #2
 800aeb0:	920d      	str	r2, [sp, #52]	; 0x34
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	d072      	beq.n	800af9c <_DrawBitmap+0x9d4>
 800aeb6:	6805      	ldr	r5, [r0, #0]
 800aeb8:	0096      	lsls	r6, r2, #2
 800aeba:	2902      	cmp	r1, #2
 800aebc:	eb06 0905 	add.w	r9, r6, r5
 800aec0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800aec4:	f000 82c3 	beq.w	800b44e <_DrawBitmap+0xe86>
 800aec8:	2903      	cmp	r1, #3
 800aeca:	f040 81d1 	bne.w	800b270 <_DrawBitmap+0xca8>
 800aece:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800aed2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800aed6:	f013 0c01 	ands.w	ip, r3, #1
 800aeda:	f000 8248 	beq.w	800b36e <_DrawBitmap+0xda6>
 800aede:	f1be 0701 	subs.w	r7, lr, #1
 800aee2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800aee6:	465d      	mov	r5, fp
 800aee8:	d10a      	bne.n	800af00 <_DrawBitmap+0x938>
 800aeea:	7866      	ldrb	r6, [r4, #1]
 800aeec:	49b8      	ldr	r1, [pc, #736]	; (800b1d0 <_DrawBitmap+0xc08>)
 800aeee:	5d8e      	ldrb	r6, [r1, r6]
 800aef0:	f10e 0707 	add.w	r7, lr, #7
 800aef4:	4333      	orrs	r3, r6
 800aef6:	3401      	adds	r4, #1
 800aef8:	f1bc 0f00 	cmp.w	ip, #0
 800aefc:	f000 823d 	beq.w	800b37a <_DrawBitmap+0xdb2>
 800af00:	f365 221f 	bfi	r2, r5, #8, #24
 800af04:	e239      	b.n	800b37a <_DrawBitmap+0xdb2>
 800af06:	f8db 1000 	ldr.w	r1, [fp]
 800af0a:	9a08      	ldr	r2, [sp, #32]
 800af0c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800af10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800af18:	5183      	str	r3, [r0, r6]
 800af1a:	3004      	adds	r0, #4
 800af1c:	682e      	ldr	r6, [r5, #0]
 800af1e:	5983      	ldr	r3, [r0, r6]
 800af20:	0c1b      	lsrs	r3, r3, #16
 800af22:	041b      	lsls	r3, r3, #16
 800af24:	f10e 0e01 	add.w	lr, lr, #1
 800af28:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 800af2c:	1984      	adds	r4, r0, r6
 800af2e:	2a00      	cmp	r2, #0
 800af30:	f000 8165 	beq.w	800b1fe <_DrawBitmap+0xc36>
 800af34:	f10b 0804 	add.w	r8, fp, #4
 800af38:	4617      	mov	r7, r2
 800af3a:	f8d8 2000 	ldr.w	r2, [r8]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800af44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	f10e 0e01 	add.w	lr, lr, #1
 800af4e:	6828      	ldr	r0, [r5, #0]
 800af50:	f850 302e 	ldr.w	r3, [r0, lr, lsl #2]
 800af54:	3f01      	subs	r7, #1
 800af56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af5a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800af5e:	eb00 048e 	add.w	r4, r0, lr, lsl #2
 800af62:	f000 813d 	beq.w	800b1e0 <_DrawBitmap+0xc18>
 800af66:	f108 0804 	add.w	r8, r8, #4
 800af6a:	f7ff bb90 	b.w	800a68e <_DrawBitmap+0xc6>
 800af6e:	4402      	add	r2, r0
 800af70:	6852      	ldr	r2, [r2, #4]
 800af72:	0212      	lsls	r2, r2, #8
 800af74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800af78:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800af7c:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800af80:	e77c      	b.n	800ae7c <_DrawBitmap+0x8b4>
 800af82:	0a1b      	lsrs	r3, r3, #8
 800af84:	e77a      	b.n	800ae7c <_DrawBitmap+0x8b4>
 800af86:	4402      	add	r2, r0
 800af88:	6852      	ldr	r2, [r2, #4]
 800af8a:	0412      	lsls	r2, r2, #16
 800af8c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800af90:	ea42 4313 	orr.w	r3, r2, r3, lsr #16
 800af94:	e772      	b.n	800ae7c <_DrawBitmap+0x8b4>
 800af96:	9f02      	ldr	r7, [sp, #8]
 800af98:	46d8      	mov	r8, fp
 800af9a:	e7ce      	b.n	800af3a <_DrawBitmap+0x972>
 800af9c:	9a02      	ldr	r2, [sp, #8]
 800af9e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800afa0:	920c      	str	r2, [sp, #48]	; 0x30
 800afa2:	4611      	mov	r1, r2
 800afa4:	2903      	cmp	r1, #3
 800afa6:	f340 80bc 	ble.w	800b122 <_DrawBitmap+0xb5a>
 800afaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afac:	f8cd b01c 	str.w	fp, [sp, #28]
 800afb0:	0092      	lsls	r2, r2, #2
 800afb2:	468c      	mov	ip, r1
 800afb4:	9004      	str	r0, [sp, #16]
 800afb6:	e079      	b.n	800b0ac <_DrawBitmap+0xae4>
 800afb8:	f1b7 0801 	subs.w	r8, r7, #1
 800afbc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800afc0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800afc4:	d10c      	bne.n	800afe0 <_DrawBitmap+0xa18>
 800afc6:	f894 8001 	ldrb.w	r8, [r4, #1]
 800afca:	4881      	ldr	r0, [pc, #516]	; (800b1d0 <_DrawBitmap+0xc08>)
 800afcc:	f810 b008 	ldrb.w	fp, [r0, r8]
 800afd0:	3401      	adds	r4, #1
 800afd2:	f107 0807 	add.w	r8, r7, #7
 800afd6:	ea43 030b 	orr.w	r3, r3, fp
 800afda:	f1b9 0f00 	cmp.w	r9, #0
 800afde:	d003      	beq.n	800afe8 <_DrawBitmap+0xa20>
 800afe0:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 800afe4:	ea45 050a 	orr.w	r5, r5, sl
 800afe8:	f013 0a01 	ands.w	sl, r3, #1
 800afec:	f000 8083 	beq.w	800b0f6 <_DrawBitmap+0xb2e>
 800aff0:	f1b8 0701 	subs.w	r7, r8, #1
 800aff4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800aff8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800affc:	d10b      	bne.n	800b016 <_DrawBitmap+0xa4e>
 800affe:	7867      	ldrb	r7, [r4, #1]
 800b000:	4873      	ldr	r0, [pc, #460]	; (800b1d0 <_DrawBitmap+0xc08>)
 800b002:	f810 b007 	ldrb.w	fp, [r0, r7]
 800b006:	3401      	adds	r4, #1
 800b008:	f108 0707 	add.w	r7, r8, #7
 800b00c:	ea43 030b 	orr.w	r3, r3, fp
 800b010:	f1ba 0f00 	cmp.w	sl, #0
 800b014:	d005      	beq.n	800b022 <_DrawBitmap+0xa5a>
 800b016:	0c09      	lsrs	r1, r1, #16
 800b018:	0409      	lsls	r1, r1, #16
 800b01a:	ea41 2119 	orr.w	r1, r1, r9, lsr #8
 800b01e:	f369 651f 	bfi	r5, r9, #24, #8
 800b022:	f013 0a01 	ands.w	sl, r3, #1
 800b026:	d05e      	beq.n	800b0e6 <_DrawBitmap+0xb1e>
 800b028:	f1b7 0801 	subs.w	r8, r7, #1
 800b02c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b030:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800b034:	d10c      	bne.n	800b050 <_DrawBitmap+0xa88>
 800b036:	f894 8001 	ldrb.w	r8, [r4, #1]
 800b03a:	4865      	ldr	r0, [pc, #404]	; (800b1d0 <_DrawBitmap+0xc08>)
 800b03c:	f810 b008 	ldrb.w	fp, [r0, r8]
 800b040:	3401      	adds	r4, #1
 800b042:	f107 0807 	add.w	r8, r7, #7
 800b046:	ea43 030b 	orr.w	r3, r3, fp
 800b04a:	f1ba 0f00 	cmp.w	sl, #0
 800b04e:	d005      	beq.n	800b05c <_DrawBitmap+0xa94>
 800b050:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 800b054:	ea46 4619 	orr.w	r6, r6, r9, lsr #16
 800b058:	f369 411f 	bfi	r1, r9, #16, #16
 800b05c:	f013 0901 	ands.w	r9, r3, #1
 800b060:	d039      	beq.n	800b0d6 <_DrawBitmap+0xb0e>
 800b062:	f1b8 0701 	subs.w	r7, r8, #1
 800b066:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b06a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b06e:	d10b      	bne.n	800b088 <_DrawBitmap+0xac0>
 800b070:	7867      	ldrb	r7, [r4, #1]
 800b072:	4857      	ldr	r0, [pc, #348]	; (800b1d0 <_DrawBitmap+0xc08>)
 800b074:	f810 b007 	ldrb.w	fp, [r0, r7]
 800b078:	3401      	adds	r4, #1
 800b07a:	f108 0707 	add.w	r7, r8, #7
 800b07e:	ea43 030b 	orr.w	r3, r3, fp
 800b082:	f1b9 0f00 	cmp.w	r9, #0
 800b086:	d001      	beq.n	800b08c <_DrawBitmap+0xac4>
 800b088:	f36a 261f 	bfi	r6, sl, #8, #24
 800b08c:	9804      	ldr	r0, [sp, #16]
 800b08e:	f8ce 5000 	str.w	r5, [lr]
 800b092:	6805      	ldr	r5, [r0, #0]
 800b094:	4415      	add	r5, r2
 800b096:	f1ac 0c04 	sub.w	ip, ip, #4
 800b09a:	6069      	str	r1, [r5, #4]
 800b09c:	6801      	ldr	r1, [r0, #0]
 800b09e:	4411      	add	r1, r2
 800b0a0:	f1bc 0f03 	cmp.w	ip, #3
 800b0a4:	608e      	str	r6, [r1, #8]
 800b0a6:	f102 020c 	add.w	r2, r2, #12
 800b0aa:	dd2c      	ble.n	800b106 <_DrawBitmap+0xb3e>
 800b0ac:	9904      	ldr	r1, [sp, #16]
 800b0ae:	6809      	ldr	r1, [r1, #0]
 800b0b0:	eb02 0e01 	add.w	lr, r2, r1
 800b0b4:	f013 0901 	ands.w	r9, r3, #1
 800b0b8:	5855      	ldr	r5, [r2, r1]
 800b0ba:	f8de 6008 	ldr.w	r6, [lr, #8]
 800b0be:	f8de 1004 	ldr.w	r1, [lr, #4]
 800b0c2:	f47f af79 	bne.w	800afb8 <_DrawBitmap+0x9f0>
 800b0c6:	f1b7 0801 	subs.w	r8, r7, #1
 800b0ca:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b0ce:	d18b      	bne.n	800afe8 <_DrawBitmap+0xa20>
 800b0d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b0d4:	e777      	b.n	800afc6 <_DrawBitmap+0x9fe>
 800b0d6:	f1b8 0701 	subs.w	r7, r8, #1
 800b0da:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b0de:	d1d5      	bne.n	800b08c <_DrawBitmap+0xac4>
 800b0e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b0e4:	e7c4      	b.n	800b070 <_DrawBitmap+0xaa8>
 800b0e6:	f1b7 0801 	subs.w	r8, r7, #1
 800b0ea:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b0ee:	d1b5      	bne.n	800b05c <_DrawBitmap+0xa94>
 800b0f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800b0f4:	e79f      	b.n	800b036 <_DrawBitmap+0xa6e>
 800b0f6:	f1b8 0701 	subs.w	r7, r8, #1
 800b0fa:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b0fe:	d190      	bne.n	800b022 <_DrawBitmap+0xa5a>
 800b100:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800b104:	e77b      	b.n	800affe <_DrawBitmap+0xa36>
 800b106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b108:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b10a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b10e:	1f11      	subs	r1, r2, #4
 800b110:	088a      	lsrs	r2, r1, #2
 800b112:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800b116:	3503      	adds	r5, #3
 800b118:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
 800b11c:	920c      	str	r2, [sp, #48]	; 0x30
 800b11e:	1972      	adds	r2, r6, r5
 800b120:	920d      	str	r2, [sp, #52]	; 0x34
 800b122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b124:	2a00      	cmp	r2, #0
 800b126:	f43f ac75 	beq.w	800aa14 <_DrawBitmap+0x44c>
 800b12a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b12c:	6801      	ldr	r1, [r0, #0]
 800b12e:	f013 0801 	ands.w	r8, r3, #1
 800b132:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800b136:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
 800b13a:	d058      	beq.n	800b1ee <_DrawBitmap+0xc26>
 800b13c:	1e7d      	subs	r5, r7, #1
 800b13e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b142:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b146:	d10a      	bne.n	800b15e <_DrawBitmap+0xb96>
 800b148:	7865      	ldrb	r5, [r4, #1]
 800b14a:	4e21      	ldr	r6, [pc, #132]	; (800b1d0 <_DrawBitmap+0xc08>)
 800b14c:	f816 e005 	ldrb.w	lr, [r6, r5]
 800b150:	3401      	adds	r4, #1
 800b152:	1dfd      	adds	r5, r7, #7
 800b154:	ea43 030e 	orr.w	r3, r3, lr
 800b158:	f1b8 0f00 	cmp.w	r8, #0
 800b15c:	d04b      	beq.n	800b1f6 <_DrawBitmap+0xc2e>
 800b15e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b160:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b164:	4332      	orrs	r2, r6
 800b166:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b168:	3e01      	subs	r6, #1
 800b16a:	f000 80f9 	beq.w	800b360 <_DrawBitmap+0xd98>
 800b16e:	07df      	lsls	r7, r3, #31
 800b170:	d54a      	bpl.n	800b208 <_DrawBitmap+0xc40>
 800b172:	2d01      	cmp	r5, #1
 800b174:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b178:	d103      	bne.n	800b182 <_DrawBitmap+0xbba>
 800b17a:	7864      	ldrb	r4, [r4, #1]
 800b17c:	4d14      	ldr	r5, [pc, #80]	; (800b1d0 <_DrawBitmap+0xc08>)
 800b17e:	5d2c      	ldrb	r4, [r5, r4]
 800b180:	4323      	orrs	r3, r4
 800b182:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b186:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
 800b18a:	f84c 2001 	str.w	r2, [ip, r1]
 800b18e:	f10c 0c04 	add.w	ip, ip, #4
 800b192:	6801      	ldr	r1, [r0, #0]
 800b194:	f85c 2001 	ldr.w	r2, [ip, r1]
 800b198:	0c12      	lsrs	r2, r2, #16
 800b19a:	0412      	lsls	r2, r2, #16
 800b19c:	2e01      	cmp	r6, #1
 800b19e:	ea42 221b 	orr.w	r2, r2, fp, lsr #8
 800b1a2:	eb0c 0401 	add.w	r4, ip, r1
 800b1a6:	f000 80db 	beq.w	800b360 <_DrawBitmap+0xd98>
 800b1aa:	07d9      	lsls	r1, r3, #31
 800b1ac:	f140 80dc 	bpl.w	800b368 <_DrawBitmap+0xda0>
 800b1b0:	b293      	uxth	r3, r2
 800b1b2:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	6802      	ldr	r2, [r0, #0]
 800b1ba:	f10c 0c04 	add.w	ip, ip, #4
 800b1be:	f85c 3002 	ldr.w	r3, [ip, r2]
 800b1c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b1c6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800b1ca:	f84c 3002 	str.w	r3, [ip, r2]
 800b1ce:	e421      	b.n	800aa14 <_DrawBitmap+0x44c>
 800b1d0:	08015aa4 	.word	0x08015aa4
 800b1d4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800b1d8:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b1dc:	f7ff bb51 	b.w	800a882 <_DrawBitmap+0x2ba>
 800b1e0:	f840 302e 	str.w	r3, [r0, lr, lsl #2]
 800b1e4:	f7ff bacb 	b.w	800a77e <_DrawBitmap+0x1b6>
 800b1e8:	5081      	str	r1, [r0, r2]
 800b1ea:	f7ff bac8 	b.w	800a77e <_DrawBitmap+0x1b6>
 800b1ee:	1e7d      	subs	r5, r7, #1
 800b1f0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b1f4:	d0a8      	beq.n	800b148 <_DrawBitmap+0xb80>
 800b1f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b1f8:	3e01      	subs	r6, #1
 800b1fa:	d1b8      	bne.n	800b16e <_DrawBitmap+0xba6>
 800b1fc:	e40a      	b.n	800aa14 <_DrawBitmap+0x44c>
 800b1fe:	5183      	str	r3, [r0, r6]
 800b200:	f7ff babd 	b.w	800a77e <_DrawBitmap+0x1b6>
 800b204:	517a      	str	r2, [r7, r5]
 800b206:	e405      	b.n	800aa14 <_DrawBitmap+0x44c>
 800b208:	2d01      	cmp	r5, #1
 800b20a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b20e:	f000 8152 	beq.w	800b4b6 <_DrawBitmap+0xeee>
 800b212:	2e01      	cmp	r6, #1
 800b214:	f84c 2001 	str.w	r2, [ip, r1]
 800b218:	f43f abfc 	beq.w	800aa14 <_DrawBitmap+0x44c>
 800b21c:	f10c 0c04 	add.w	ip, ip, #4
 800b220:	6804      	ldr	r4, [r0, #0]
 800b222:	f85c 2004 	ldr.w	r2, [ip, r4]
 800b226:	4464      	add	r4, ip
 800b228:	e7bf      	b.n	800b1aa <_DrawBitmap+0xbe2>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	bfc8      	it	gt
 800b22e:	465d      	movgt	r5, fp
 800b230:	f77f ad39 	ble.w	800aca6 <_DrawBitmap+0x6de>
 800b234:	782b      	ldrb	r3, [r5, #0]
 800b236:	eb05 0108 	add.w	r1, r5, r8
 800b23a:	4622      	mov	r2, r4
 800b23c:	4648      	mov	r0, r9
 800b23e:	3501      	adds	r5, #1
 800b240:	f7fe fb64 	bl	800990c <_SetPixelIndex>
 800b244:	42b5      	cmp	r5, r6
 800b246:	d1f5      	bne.n	800b234 <_DrawBitmap+0xc6c>
 800b248:	e52d      	b.n	800aca6 <_DrawBitmap+0x6de>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfc8      	it	gt
 800b24e:	465d      	movgt	r5, fp
 800b250:	dc03      	bgt.n	800b25a <_DrawBitmap+0xc92>
 800b252:	e528      	b.n	800aca6 <_DrawBitmap+0x6de>
 800b254:	42b5      	cmp	r5, r6
 800b256:	f43f ad26 	beq.w	800aca6 <_DrawBitmap+0x6de>
 800b25a:	eb08 0105 	add.w	r1, r8, r5
 800b25e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f6      	beq.n	800b254 <_DrawBitmap+0xc8c>
 800b266:	4622      	mov	r2, r4
 800b268:	4648      	mov	r0, r9
 800b26a:	f7fe fb4f 	bl	800990c <_SetPixelIndex>
 800b26e:	e7f1      	b.n	800b254 <_DrawBitmap+0xc8c>
 800b270:	f013 0e01 	ands.w	lr, r3, #1
 800b274:	f040 80a1 	bne.w	800b3ba <_DrawBitmap+0xdf2>
 800b278:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	2900      	cmp	r1, #0
 800b27e:	f040 8124 	bne.w	800b4ca <_DrawBitmap+0xf02>
 800b282:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800b286:	463c      	mov	r4, r7
 800b288:	4996      	ldr	r1, [pc, #600]	; (800b4e4 <_DrawBitmap+0xf1c>)
 800b28a:	7824      	ldrb	r4, [r4, #0]
 800b28c:	5d0c      	ldrb	r4, [r1, r4]
 800b28e:	9906      	ldr	r1, [sp, #24]
 800b290:	4323      	orrs	r3, r4
 800b292:	f1c1 0c0f 	rsb	ip, r1, #15
 800b296:	f1be 0f00 	cmp.w	lr, #0
 800b29a:	f040 8114 	bne.w	800b4c6 <_DrawBitmap+0xefe>
 800b29e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	f43f abb7 	beq.w	800aa14 <_DrawBitmap+0x44c>
 800b2a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2a8:	3604      	adds	r6, #4
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	920d      	str	r2, [sp, #52]	; 0x34
 800b2ae:	5972      	ldr	r2, [r6, r5]
 800b2b0:	463c      	mov	r4, r7
 800b2b2:	eb06 0905 	add.w	r9, r6, r5
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	f013 0701 	ands.w	r7, r3, #1
 800b2bc:	f000 80cc 	beq.w	800b458 <_DrawBitmap+0xe90>
 800b2c0:	f1bc 0e01 	subs.w	lr, ip, #1
 800b2c4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b2c8:	bf08      	it	eq
 800b2ca:	465d      	moveq	r5, fp
 800b2cc:	f040 80f8 	bne.w	800b4c0 <_DrawBitmap+0xef8>
 800b2d0:	7866      	ldrb	r6, [r4, #1]
 800b2d2:	4984      	ldr	r1, [pc, #528]	; (800b4e4 <_DrawBitmap+0xf1c>)
 800b2d4:	5d8e      	ldrb	r6, [r1, r6]
 800b2d6:	f10c 0e07 	add.w	lr, ip, #7
 800b2da:	4333      	orrs	r3, r6
 800b2dc:	1c66      	adds	r6, r4, #1
 800b2de:	2f00      	cmp	r7, #0
 800b2e0:	f000 80f6 	beq.w	800b4d0 <_DrawBitmap+0xf08>
 800b2e4:	b292      	uxth	r2, r2
 800b2e6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b2ea:	f8c9 2000 	str.w	r2, [r9]
 800b2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2f0:	6804      	ldr	r4, [r0, #0]
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	920d      	str	r2, [sp, #52]	; 0x34
 800b2f8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2fc:	f1b8 0801 	subs.w	r8, r8, #1
 800b300:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b304:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
 800b308:	eb04 0981 	add.w	r9, r4, r1, lsl #2
 800b30c:	f040 80cf 	bne.w	800b4ae <_DrawBitmap+0xee6>
 800b310:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 800b314:	f7ff bb7e 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b318:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b31a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b31c:	f013 0f01 	tst.w	r3, #1
 800b320:	bf18      	it	ne
 800b322:	4659      	movne	r1, fp
 800b324:	085b      	lsrs	r3, r3, #1
 800b326:	2d00      	cmp	r5, #0
 800b328:	d03d      	beq.n	800b3a6 <_DrawBitmap+0xdde>
 800b32a:	46ac      	mov	ip, r5
 800b32c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b330:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b334:	f848 2006 	str.w	r2, [r8, r6]
 800b338:	f108 0e04 	add.w	lr, r8, #4
 800b33c:	6806      	ldr	r6, [r0, #0]
 800b33e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b340:	f85e 2006 	ldr.w	r2, [lr, r6]
 800b344:	0c12      	lsrs	r2, r2, #16
 800b346:	0412      	lsls	r2, r2, #16
 800b348:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 800b34c:	3701      	adds	r7, #1
 800b34e:	eb0e 0106 	add.w	r1, lr, r6
 800b352:	2d00      	cmp	r5, #0
 800b354:	f040 80a9 	bne.w	800b4aa <_DrawBitmap+0xee2>
 800b358:	f84e 2006 	str.w	r2, [lr, r6]
 800b35c:	f7ff bb5a 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b360:	f84c 2001 	str.w	r2, [ip, r1]
 800b364:	f7ff bb56 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b368:	6022      	str	r2, [r4, #0]
 800b36a:	f7ff bb53 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b36e:	f1be 0701 	subs.w	r7, lr, #1
 800b372:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b376:	f000 80b0 	beq.w	800b4da <_DrawBitmap+0xf12>
 800b37a:	f8c9 2000 	str.w	r2, [r9]
 800b37e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800b382:	920c      	str	r2, [sp, #48]	; 0x30
 800b384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b386:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b388:	3201      	adds	r2, #1
 800b38a:	920d      	str	r2, [sp, #52]	; 0x34
 800b38c:	e60a      	b.n	800afa4 <_DrawBitmap+0x9dc>
 800b38e:	f894 e001 	ldrb.w	lr, [r4, #1]
 800b392:	4e54      	ldr	r6, [pc, #336]	; (800b4e4 <_DrawBitmap+0xf1c>)
 800b394:	f816 e00e 	ldrb.w	lr, [r6, lr]
 800b398:	f105 0c07 	add.w	ip, r5, #7
 800b39c:	ea43 030e 	orr.w	r3, r3, lr
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	f7ff ba67 	b.w	800a874 <_DrawBitmap+0x2ac>
 800b3a6:	9c05      	ldr	r4, [sp, #20]
 800b3a8:	4d4e      	ldr	r5, [pc, #312]	; (800b4e4 <_DrawBitmap+0xf1c>)
 800b3aa:	7824      	ldrb	r4, [r4, #0]
 800b3ac:	5d2c      	ldrb	r4, [r5, r4]
 800b3ae:	9d06      	ldr	r5, [sp, #24]
 800b3b0:	4323      	orrs	r3, r4
 800b3b2:	f1c5 0c0f 	rsb	ip, r5, #15
 800b3b6:	9c05      	ldr	r4, [sp, #20]
 800b3b8:	e7b8      	b.n	800b32c <_DrawBitmap+0xd64>
 800b3ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b3bc:	085b      	lsrs	r3, r3, #1
 800b3be:	2900      	cmp	r1, #0
 800b3c0:	f000 8088 	beq.w	800b4d4 <_DrawBitmap+0xf0c>
 800b3c4:	468c      	mov	ip, r1
 800b3c6:	46d8      	mov	r8, fp
 800b3c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b3cc:	ea42 6208 	orr.w	r2, r2, r8, lsl #24
 800b3d0:	5172      	str	r2, [r6, r5]
 800b3d2:	3604      	adds	r6, #4
 800b3d4:	6805      	ldr	r5, [r0, #0]
 800b3d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b3d8:	5972      	ldr	r2, [r6, r5]
 800b3da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b3dc:	0c12      	lsrs	r2, r2, #16
 800b3de:	0412      	lsls	r2, r2, #16
 800b3e0:	3701      	adds	r7, #1
 800b3e2:	970d      	str	r7, [sp, #52]	; 0x34
 800b3e4:	ea42 2218 	orr.w	r2, r2, r8, lsr #8
 800b3e8:	eb06 0905 	add.w	r9, r6, r5
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	d160      	bne.n	800b4b2 <_DrawBitmap+0xeea>
 800b3f0:	5172      	str	r2, [r6, r5]
 800b3f2:	f7ff bb0f 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b3f6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800b3fa:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b3fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b400:	f013 0f01 	tst.w	r3, #1
 800b404:	bf0c      	ite	eq
 800b406:	46ae      	moveq	lr, r5
 800b408:	46de      	movne	lr, fp
 800b40a:	f1bc 0501 	subs.w	r5, ip, #1
 800b40e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b412:	d106      	bne.n	800b422 <_DrawBitmap+0xe5a>
 800b414:	7865      	ldrb	r5, [r4, #1]
 800b416:	4e33      	ldr	r6, [pc, #204]	; (800b4e4 <_DrawBitmap+0xf1c>)
 800b418:	5d76      	ldrb	r6, [r6, r5]
 800b41a:	3401      	adds	r4, #1
 800b41c:	f10c 0507 	add.w	r5, ip, #7
 800b420:	4333      	orrs	r3, r6
 800b422:	b292      	uxth	r2, r2
 800b424:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800b428:	600a      	str	r2, [r1, #0]
 800b42a:	3701      	adds	r7, #1
 800b42c:	6806      	ldr	r6, [r0, #0]
 800b42e:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 800b432:	f1ba 0a01 	subs.w	sl, sl, #1
 800b436:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b43a:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 800b43e:	eb06 0187 	add.w	r1, r6, r7, lsl #2
 800b442:	f47f aa0b 	bne.w	800a85c <_DrawBitmap+0x294>
 800b446:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
 800b44a:	f7ff bae3 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b44e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800b452:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b456:	e72f      	b.n	800b2b8 <_DrawBitmap+0xcf0>
 800b458:	f1bc 0e01 	subs.w	lr, ip, #1
 800b45c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b460:	d03d      	beq.n	800b4de <_DrawBitmap+0xf16>
 800b462:	f1b8 0801 	subs.w	r8, r8, #1
 800b466:	f8c9 2000 	str.w	r2, [r9]
 800b46a:	f43f aad3 	beq.w	800aa14 <_DrawBitmap+0x44c>
 800b46e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b470:	3201      	adds	r2, #1
 800b472:	4615      	mov	r5, r2
 800b474:	920d      	str	r2, [sp, #52]	; 0x34
 800b476:	6802      	ldr	r2, [r0, #0]
 800b478:	eb02 0985 	add.w	r9, r2, r5, lsl #2
 800b47c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800b480:	e529      	b.n	800aed6 <_DrawBitmap+0x90e>
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	6980      	ldr	r0, [r0, #24]
 800b486:	9322      	str	r3, [sp, #136]	; 0x88
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	9321      	str	r3, [sp, #132]	; 0x84
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	9320      	str	r3, [sp, #128]	; 0x80
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	931f      	str	r3, [sp, #124]	; 0x7c
 800b494:	9b06      	ldr	r3, [sp, #24]
 800b496:	931e      	str	r3, [sp, #120]	; 0x78
 800b498:	46b4      	mov	ip, r6
 800b49a:	465b      	mov	r3, fp
 800b49c:	b015      	add	sp, #84	; 0x54
 800b49e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a2:	4760      	bx	ip
 800b4a4:	512a      	str	r2, [r5, r4]
 800b4a6:	f7ff bab5 	b.w	800aa14 <_DrawBitmap+0x44c>
 800b4aa:	46aa      	mov	sl, r5
 800b4ac:	e7a7      	b.n	800b3fe <_DrawBitmap+0xe36>
 800b4ae:	4634      	mov	r4, r6
 800b4b0:	e511      	b.n	800aed6 <_DrawBitmap+0x90e>
 800b4b2:	4688      	mov	r8, r1
 800b4b4:	e700      	b.n	800b2b8 <_DrawBitmap+0xcf0>
 800b4b6:	7864      	ldrb	r4, [r4, #1]
 800b4b8:	4d0a      	ldr	r5, [pc, #40]	; (800b4e4 <_DrawBitmap+0xf1c>)
 800b4ba:	5d2c      	ldrb	r4, [r5, r4]
 800b4bc:	4323      	orrs	r3, r4
 800b4be:	e6a8      	b.n	800b212 <_DrawBitmap+0xc4a>
 800b4c0:	4626      	mov	r6, r4
 800b4c2:	465d      	mov	r5, fp
 800b4c4:	e70e      	b.n	800b2e4 <_DrawBitmap+0xd1c>
 800b4c6:	9c05      	ldr	r4, [sp, #20]
 800b4c8:	e77e      	b.n	800b3c8 <_DrawBitmap+0xe00>
 800b4ca:	4627      	mov	r7, r4
 800b4cc:	468c      	mov	ip, r1
 800b4ce:	e6e6      	b.n	800b29e <_DrawBitmap+0xcd6>
 800b4d0:	4634      	mov	r4, r6
 800b4d2:	e7c6      	b.n	800b462 <_DrawBitmap+0xe9a>
 800b4d4:	46d8      	mov	r8, fp
 800b4d6:	463c      	mov	r4, r7
 800b4d8:	e6d6      	b.n	800b288 <_DrawBitmap+0xcc0>
 800b4da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b4dc:	e505      	b.n	800aeea <_DrawBitmap+0x922>
 800b4de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b4e0:	e6f6      	b.n	800b2d0 <_DrawBitmap+0xd08>
 800b4e2:	bf00      	nop
 800b4e4:	08015aa4 	.word	0x08015aa4

0800b4e8 <_SetPos>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	6884      	ldr	r4, [r0, #8]
 800b4ee:	b089      	sub	sp, #36	; 0x24
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	460f      	mov	r7, r1
 800b4f6:	4616      	mov	r6, r2
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	9302      	str	r3, [sp, #8]
 800b4fc:	9304      	str	r3, [sp, #16]
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	9306      	str	r3, [sp, #24]
 800b502:	9307      	str	r3, [sp, #28]
 800b504:	2c00      	cmp	r4, #0
 800b506:	d05e      	beq.n	800b5c6 <_SetPos+0xde>
 800b508:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b50a:	b133      	cbz	r3, 800b51a <_SetPos+0x32>
 800b50c:	4632      	mov	r2, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	69a8      	ldr	r0, [r5, #24]
 800b512:	4798      	blx	r3
 800b514:	b009      	add	sp, #36	; 0x24
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51a:	6267      	str	r7, [r4, #36]	; 0x24
 800b51c:	62a6      	str	r6, [r4, #40]	; 0x28
 800b51e:	f7fd ffa3 	bl	8009468 <LCD_GetXSizeDisplay>
 800b522:	4681      	mov	r9, r0
 800b524:	f7fd ffa6 	bl	8009474 <LCD_GetYSizeDisplay>
 800b528:	68eb      	ldr	r3, [r5, #12]
 800b52a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b530:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800b534:	4682      	mov	sl, r0
 800b536:	2108      	movs	r1, #8
 800b538:	4628      	mov	r0, r5
 800b53a:	4798      	blx	r3
 800b53c:	1dc2      	adds	r2, r0, #7
 800b53e:	bf48      	it	mi
 800b540:	f100 020e 	addmi.w	r2, r0, #14
 800b544:	10d2      	asrs	r2, r2, #3
 800b546:	2f00      	cmp	r7, #0
 800b548:	9206      	str	r2, [sp, #24]
 800b54a:	db56      	blt.n	800b5fa <_SetPos+0x112>
 800b54c:	eb07 030b 	add.w	r3, r7, fp
 800b550:	4599      	cmp	r9, r3
 800b552:	9702      	str	r7, [sp, #8]
 800b554:	bfb6      	itet	lt
 800b556:	ebc7 0709 	rsblt	r7, r7, r9
 800b55a:	f8cd b010 	strge.w	fp, [sp, #16]
 800b55e:	9704      	strlt	r7, [sp, #16]
 800b560:	2e00      	cmp	r6, #0
 800b562:	db3e      	blt.n	800b5e2 <_SetPos+0xfa>
 800b564:	eb06 0308 	add.w	r3, r6, r8
 800b568:	459a      	cmp	sl, r3
 800b56a:	bfb8      	it	lt
 800b56c:	ebc6 010a 	rsblt	r1, r6, sl
 800b570:	9603      	str	r6, [sp, #12]
 800b572:	bfa6      	itte	ge
 800b574:	f8cd 8014 	strge.w	r8, [sp, #20]
 800b578:	4641      	movge	r1, r8
 800b57a:	9105      	strlt	r1, [sp, #20]
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd0f      	ble.n	800b5a2 <_SetPos+0xba>
 800b582:	2900      	cmp	r1, #0
 800b584:	dd0d      	ble.n	800b5a2 <_SetPos+0xba>
 800b586:	9b02      	ldr	r3, [sp, #8]
 800b588:	4599      	cmp	r9, r3
 800b58a:	dd0a      	ble.n	800b5a2 <_SetPos+0xba>
 800b58c:	45b2      	cmp	sl, r6
 800b58e:	dd08      	ble.n	800b5a2 <_SetPos+0xba>
 800b590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b592:	2b00      	cmp	r3, #0
 800b594:	d03a      	beq.n	800b60c <_SetPos+0x124>
 800b596:	aa02      	add	r2, sp, #8
 800b598:	69a8      	ldr	r0, [r5, #24]
 800b59a:	2108      	movs	r1, #8
 800b59c:	f7f9 fc60 	bl	8004e60 <LCD_X_DisplayDriver>
 800b5a0:	e7b8      	b.n	800b514 <_SetPos+0x2c>
 800b5a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d1b5      	bne.n	800b514 <_SetPos+0x2c>
 800b5a8:	68ac      	ldr	r4, [r5, #8]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	2c00      	cmp	r4, #0
 800b5b0:	d039      	beq.n	800b626 <_SetPos+0x13e>
 800b5b2:	aa08      	add	r2, sp, #32
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6323      	str	r3, [r4, #48]	; 0x30
 800b5b8:	69a8      	ldr	r0, [r5, #24]
 800b5ba:	f842 3d1c 	str.w	r3, [r2, #-28]!
 800b5be:	2109      	movs	r1, #9
 800b5c0:	f7f9 fc4e 	bl	8004e60 <LCD_X_DisplayDriver>
 800b5c4:	e7a6      	b.n	800b514 <_SetPos+0x2c>
 800b5c6:	204c      	movs	r0, #76	; 0x4c
 800b5c8:	f7fb fdde 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	60a8      	str	r0, [r5, #8]
 800b5d0:	224c      	movs	r2, #76	; 0x4c
 800b5d2:	f7fd f8af 	bl	8008734 <GUI__memset>
 800b5d6:	68ac      	ldr	r4, [r5, #8]
 800b5d8:	2c00      	cmp	r4, #0
 800b5da:	d195      	bne.n	800b508 <_SetPos+0x20>
 800b5dc:	b009      	add	sp, #36	; 0x24
 800b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e2:	9b07      	ldr	r3, [sp, #28]
 800b5e4:	fb02 f206 	mul.w	r2, r2, r6
 800b5e8:	eb06 0108 	add.w	r1, r6, r8
 800b5ec:	fb0b 3312 	mls	r3, fp, r2, r3
 800b5f0:	2600      	movs	r6, #0
 800b5f2:	9105      	str	r1, [sp, #20]
 800b5f4:	9307      	str	r3, [sp, #28]
 800b5f6:	9603      	str	r6, [sp, #12]
 800b5f8:	e7c0      	b.n	800b57c <_SetPos+0x94>
 800b5fa:	9b07      	ldr	r3, [sp, #28]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	fb02 3317 	mls	r3, r2, r7, r3
 800b602:	445f      	add	r7, fp
 800b604:	9307      	str	r3, [sp, #28]
 800b606:	9704      	str	r7, [sp, #16]
 800b608:	9102      	str	r1, [sp, #8]
 800b60a:	e7a9      	b.n	800b560 <_SetPos+0x78>
 800b60c:	68ac      	ldr	r4, [r5, #8]
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	b1b4      	cbz	r4, 800b640 <_SetPos+0x158>
 800b612:	aa08      	add	r2, sp, #32
 800b614:	2301      	movs	r3, #1
 800b616:	6323      	str	r3, [r4, #48]	; 0x30
 800b618:	2109      	movs	r1, #9
 800b61a:	f842 3d1c 	str.w	r3, [r2, #-28]!
 800b61e:	69a8      	ldr	r0, [r5, #24]
 800b620:	f7f9 fc1e 	bl	8004e60 <LCD_X_DisplayDriver>
 800b624:	e7b7      	b.n	800b596 <_SetPos+0xae>
 800b626:	204c      	movs	r0, #76	; 0x4c
 800b628:	f7fb fdae 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800b62c:	4621      	mov	r1, r4
 800b62e:	60a8      	str	r0, [r5, #8]
 800b630:	224c      	movs	r2, #76	; 0x4c
 800b632:	f7fd f87f 	bl	8008734 <GUI__memset>
 800b636:	68ac      	ldr	r4, [r5, #8]
 800b638:	2c00      	cmp	r4, #0
 800b63a:	f43f af6b 	beq.w	800b514 <_SetPos+0x2c>
 800b63e:	e7b8      	b.n	800b5b2 <_SetPos+0xca>
 800b640:	204c      	movs	r0, #76	; 0x4c
 800b642:	f7fb fda1 	bl	8007188 <GUI_ALLOC_GetFixedBlock>
 800b646:	4621      	mov	r1, r4
 800b648:	60a8      	str	r0, [r5, #8]
 800b64a:	224c      	movs	r2, #76	; 0x4c
 800b64c:	f7fd f872 	bl	8008734 <GUI__memset>
 800b650:	68ac      	ldr	r4, [r5, #8]
 800b652:	2c00      	cmp	r4, #0
 800b654:	d09f      	beq.n	800b596 <_SetPos+0xae>
 800b656:	e7dc      	b.n	800b612 <_SetPos+0x12a>

0800b658 <_XorPixel>:
 800b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65c:	4606      	mov	r6, r0
 800b65e:	6880      	ldr	r0, [r0, #8]
 800b660:	6a03      	ldr	r3, [r0, #32]
 800b662:	6800      	ldr	r0, [r0, #0]
 800b664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b668:	eb01 0841 	add.w	r8, r1, r1, lsl #1
 800b66c:	fb02 8303 	mla	r3, r2, r3, r8
 800b670:	089b      	lsrs	r3, r3, #2
 800b672:	f001 0403 	and.w	r4, r1, #3
 800b676:	2c02      	cmp	r4, #2
 800b678:	4617      	mov	r7, r2
 800b67a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800b67e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b682:	d057      	beq.n	800b734 <_XorPixel+0xdc>
 800b684:	2c03      	cmp	r4, #3
 800b686:	d053      	beq.n	800b730 <_XorPixel+0xd8>
 800b688:	2c01      	cmp	r4, #1
 800b68a:	d020      	beq.n	800b6ce <_XorPixel+0x76>
 800b68c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800b690:	6933      	ldr	r3, [r6, #16]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	4798      	blx	r3
 800b696:	68b1      	ldr	r1, [r6, #8]
 800b698:	6a0b      	ldr	r3, [r1, #32]
 800b69a:	680e      	ldr	r6, [r1, #0]
 800b69c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b6a0:	fb07 8203 	mla	r2, r7, r3, r8
 800b6a4:	0892      	lsrs	r2, r2, #2
 800b6a6:	4068      	eors	r0, r5
 800b6a8:	0097      	lsls	r7, r2, #2
 800b6aa:	2c02      	cmp	r4, #2
 800b6ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800b6b0:	eb07 0506 	add.w	r5, r7, r6
 800b6b4:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 800b6b8:	d02a      	beq.n	800b710 <_XorPixel+0xb8>
 800b6ba:	2c03      	cmp	r4, #3
 800b6bc:	d022      	beq.n	800b704 <_XorPixel+0xac>
 800b6be:	2c01      	cmp	r4, #1
 800b6c0:	d00f      	beq.n	800b6e2 <_XorPixel+0x8a>
 800b6c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b6c6:	4318      	orrs	r0, r3
 800b6c8:	6028      	str	r0, [r5, #0]
 800b6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ce:	1813      	adds	r3, r2, r0
 800b6d0:	6858      	ldr	r0, [r3, #4]
 800b6d2:	0200      	lsls	r0, r0, #8
 800b6d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800b6d8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800b6dc:	ea40 6515 	orr.w	r5, r0, r5, lsr #24
 800b6e0:	e7d6      	b.n	800b690 <_XorPixel+0x38>
 800b6e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6e6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800b6ea:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800b6ee:	1d3d      	adds	r5, r7, #4
 800b6f0:	680a      	ldr	r2, [r1, #0]
 800b6f2:	58ab      	ldr	r3, [r5, r2]
 800b6f4:	0c1b      	lsrs	r3, r3, #16
 800b6f6:	041b      	lsls	r3, r3, #16
 800b6f8:	4415      	add	r5, r2
 800b6fa:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 800b6fe:	6028      	str	r0, [r5, #0]
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	b2db      	uxtb	r3, r3
 800b706:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800b70a:	6028      	str	r0, [r5, #0]
 800b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b710:	b29b      	uxth	r3, r3
 800b712:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b716:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800b71a:	1d3d      	adds	r5, r7, #4
 800b71c:	680a      	ldr	r2, [r1, #0]
 800b71e:	58ab      	ldr	r3, [r5, r2]
 800b720:	4415      	add	r5, r2
 800b722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b726:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
 800b72a:	6028      	str	r0, [r5, #0]
 800b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b730:	0a2d      	lsrs	r5, r5, #8
 800b732:	e7ad      	b.n	800b690 <_XorPixel+0x38>
 800b734:	1813      	adds	r3, r2, r0
 800b736:	6858      	ldr	r0, [r3, #4]
 800b738:	0400      	lsls	r0, r0, #16
 800b73a:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800b73e:	ea40 4515 	orr.w	r5, r0, r5, lsr #16
 800b742:	e7a5      	b.n	800b690 <_XorPixel+0x38>

0800b744 <_GetDevData>:
 800b744:	2901      	cmp	r1, #1
 800b746:	4802      	ldr	r0, [pc, #8]	; (800b750 <_GetDevData+0xc>)
 800b748:	bf18      	it	ne
 800b74a:	2000      	movne	r0, #0
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	08015a00 	.word	0x08015a00

0800b754 <_GetDevFunc>:
 800b754:	2916      	cmp	r1, #22
 800b756:	4802      	ldr	r0, [pc, #8]	; (800b760 <_GetDevFunc+0xc>)
 800b758:	bf18      	it	ne
 800b75a:	2000      	movne	r0, #0
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	0800c679 	.word	0x0800c679

0800b764 <_GetDevProp>:
 800b764:	2908      	cmp	r1, #8
 800b766:	bf0c      	ite	eq
 800b768:	2020      	moveq	r0, #32
 800b76a:	2000      	movne	r0, #0
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop

0800b770 <_SetOrg>:
 800b770:	6800      	ldr	r0, [r0, #0]
 800b772:	68c3      	ldr	r3, [r0, #12]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	4718      	bx	r3

0800b778 <_GetRect>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	6880      	ldr	r0, [r0, #8]
 800b77e:	460c      	mov	r4, r1
 800b780:	f7fb fe28 	bl	80073d4 <GUI_ALLOC_LockH>
 800b784:	a902      	add	r1, sp, #8
 800b786:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800b78a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 800b78e:	8902      	ldrh	r2, [r0, #8]
 800b790:	8943      	ldrh	r3, [r0, #10]
 800b792:	f841 0d04 	str.w	r0, [r1, #-4]!
 800b796:	4432      	add	r2, r6
 800b798:	442b      	add	r3, r5
 800b79a:	3a01      	subs	r2, #1
 800b79c:	3b01      	subs	r3, #1
 800b79e:	8026      	strh	r6, [r4, #0]
 800b7a0:	80a2      	strh	r2, [r4, #4]
 800b7a2:	8065      	strh	r5, [r4, #2]
 800b7a4:	80e3      	strh	r3, [r4, #6]
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	f7fb fe26 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800b7ac:	b002      	add	sp, #8
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}

0800b7b0 <_DrawBitmap>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	4caa      	ldr	r4, [pc, #680]	; (800ba60 <_DrawBitmap+0x2b0>)
 800b7b6:	6824      	ldr	r4, [r4, #0]
 800b7b8:	b093      	sub	sp, #76	; 0x4c
 800b7ba:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800b7bc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b7be:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800b7c2:	b916      	cbnz	r6, 800b7ca <_DrawBitmap+0x1a>
 800b7c4:	b013      	add	sp, #76	; 0x4c
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	9208      	str	r2, [sp, #32]
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	f7fb fdfe 	bl	80073d4 <GUI_ALLOC_LockH>
 800b7d8:	6942      	ldr	r2, [r0, #20]
 800b7da:	900f      	str	r0, [sp, #60]	; 0x3c
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	f040 80d6 	bne.w	800b98e <_DrawBitmap+0x1de>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	9304      	str	r3, [sp, #16]
 800b7e8:	a80f      	add	r0, sp, #60	; 0x3c
 800b7ea:	9210      	str	r2, [sp, #64]	; 0x40
 800b7ec:	f7fb fe04 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800b7f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b7f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7f4:	18e3      	adds	r3, r4, r3
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	4b99      	ldr	r3, [pc, #612]	; (800ba60 <_DrawBitmap+0x2b0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	b120      	cbz	r0, 800b808 <_DrawBitmap+0x58>
 800b7fe:	7c1a      	ldrb	r2, [r3, #16]
 800b800:	4c97      	ldr	r4, [pc, #604]	; (800ba60 <_DrawBitmap+0x2b0>)
 800b802:	0796      	lsls	r6, r2, #30
 800b804:	f140 8098 	bpl.w	800b938 <_DrawBitmap+0x188>
 800b808:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b80a:	f7fb fde3 	bl	80073d4 <GUI_ALLOC_LockH>
 800b80e:	4604      	mov	r4, r0
 800b810:	9908      	ldr	r1, [sp, #32]
 800b812:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b816:	68e3      	ldr	r3, [r4, #12]
 800b818:	1a8a      	subs	r2, r1, r2
 800b81a:	fb03 f302 	mul.w	r3, r3, r2
 800b81e:	9905      	ldr	r1, [sp, #20]
 800b820:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800b824:	a812      	add	r0, sp, #72	; 0x48
 800b826:	1a8a      	subs	r2, r1, r2
 800b828:	3318      	adds	r3, #24
 800b82a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b82e:	18e3      	adds	r3, r4, r3
 800b830:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b834:	9302      	str	r3, [sp, #8]
 800b836:	f7fb fddf 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800b83a:	2d17      	cmp	r5, #23
 800b83c:	dd4d      	ble.n	800b8da <_DrawBitmap+0x12a>
 800b83e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b840:	2b00      	cmp	r3, #0
 800b842:	dd40      	ble.n	800b8c6 <_DrawBitmap+0x116>
 800b844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b848:	9707      	str	r7, [sp, #28]
 800b84a:	4443      	add	r3, r8
 800b84c:	9306      	str	r3, [sp, #24]
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800ba6c <_DrawBitmap+0x2bc>
 800b854:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	9308      	str	r3, [sp, #32]
 800b85a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b85c:	b128      	cbz	r0, 800b86a <_DrawBitmap+0xba>
 800b85e:	6883      	ldr	r3, [r0, #8]
 800b860:	9905      	ldr	r1, [sp, #20]
 800b862:	685c      	ldr	r4, [r3, #4]
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	4642      	mov	r2, r8
 800b868:	47a0      	blx	r4
 800b86a:	9b07      	ldr	r3, [sp, #28]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	2a00      	cmp	r2, #0
 800b872:	f040 8085 	bne.w	800b980 <_DrawBitmap+0x1d0>
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b87c:	4798      	blx	r3
 800b87e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b882:	9c03      	ldr	r4, [sp, #12]
 800b884:	0e05      	lsrs	r5, r0, #24
 800b886:	463e      	mov	r6, r7
 800b888:	4633      	mov	r3, r6
 800b88a:	f04f 0e00 	mov.w	lr, #0
 800b88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b892:	ebb5 6f12 	cmp.w	r5, r2, lsr #24
 800b896:	d058      	beq.n	800b94a <_DrawBitmap+0x19a>
 800b898:	f1be 0f00 	cmp.w	lr, #0
 800b89c:	d159      	bne.n	800b952 <_DrawBitmap+0x1a2>
 800b89e:	6830      	ldr	r0, [r6, #0]
 800b8a0:	0e02      	lsrs	r2, r0, #24
 800b8a2:	d165      	bne.n	800b970 <_DrawBitmap+0x1c0>
 800b8a4:	3c01      	subs	r4, #1
 800b8a6:	f10a 0a04 	add.w	sl, sl, #4
 800b8aa:	3604      	adds	r6, #4
 800b8ac:	2c00      	cmp	r4, #0
 800b8ae:	d1eb      	bne.n	800b888 <_DrawBitmap+0xd8>
 800b8b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b8b2:	9a04      	ldr	r2, [sp, #16]
 800b8b4:	441f      	add	r7, r3
 800b8b6:	9b02      	ldr	r3, [sp, #8]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	9302      	str	r3, [sp, #8]
 800b8bc:	9b06      	ldr	r3, [sp, #24]
 800b8be:	f108 0801 	add.w	r8, r8, #1
 800b8c2:	4598      	cmp	r8, r3
 800b8c4:	d1c9      	bne.n	800b85a <_DrawBitmap+0xaa>
 800b8c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f43f af7b 	beq.w	800b7c4 <_DrawBitmap+0x14>
 800b8ce:	a810      	add	r0, sp, #64	; 0x40
 800b8d0:	f7fb fd92 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800b8d4:	b013      	add	sp, #76	; 0x4c
 800b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8da:	2d10      	cmp	r5, #16
 800b8dc:	d05d      	beq.n	800b99a <_DrawBitmap+0x1ea>
 800b8de:	2d08      	cmp	r5, #8
 800b8e0:	f000 80c6 	beq.w	800ba70 <_DrawBitmap+0x2c0>
 800b8e4:	4b5f      	ldr	r3, [pc, #380]	; (800ba64 <_DrawBitmap+0x2b4>)
 800b8e6:	f1ba 0f00 	cmp.w	sl, #0
 800b8ea:	bf08      	it	eq
 800b8ec:	469a      	moveq	sl, r3
 800b8ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f340 80ad 	ble.w	800ba50 <_DrawBitmap+0x2a0>
 800b8f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b8f8:	9a02      	ldr	r2, [sp, #8]
 800b8fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b900:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	930c      	str	r3, [sp, #48]	; 0x30
 800b906:	2300      	movs	r3, #0
 800b908:	2d02      	cmp	r5, #2
 800b90a:	f000 8284 	beq.w	800be16 <_DrawBitmap+0x666>
 800b90e:	2d04      	cmp	r5, #4
 800b910:	f000 8134 	beq.w	800bb7c <_DrawBitmap+0x3cc>
 800b914:	2d01      	cmp	r5, #1
 800b916:	f000 8361 	beq.w	800bfdc <_DrawBitmap+0x82c>
 800b91a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800b91c:	4401      	add	r1, r0
 800b91e:	9804      	ldr	r0, [sp, #16]
 800b920:	4402      	add	r2, r0
 800b922:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b924:	3301      	adds	r3, #1
 800b926:	4298      	cmp	r0, r3
 800b928:	dcee      	bgt.n	800b908 <_DrawBitmap+0x158>
 800b92a:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800b92e:	46de      	mov	lr, fp
 800b930:	f1be 0f00 	cmp.w	lr, #0
 800b934:	d1cb      	bne.n	800b8ce <_DrawBitmap+0x11e>
 800b936:	e745      	b.n	800b7c4 <_DrawBitmap+0x14>
 800b938:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	9a08      	ldr	r2, [sp, #32]
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	9905      	ldr	r1, [sp, #20]
 800b942:	f000 fdc3 	bl	800c4cc <GUI_USAGE_AddRect>
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	e75e      	b.n	800b808 <_DrawBitmap+0x58>
 800b94a:	f10e 0e01 	add.w	lr, lr, #1
 800b94e:	45a6      	cmp	lr, r4
 800b950:	d19d      	bne.n	800b88e <_DrawBitmap+0xde>
 800b952:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 800b956:	4631      	mov	r1, r6
 800b958:	4650      	mov	r0, sl
 800b95a:	465a      	mov	r2, fp
 800b95c:	f8d9 3000 	ldr.w	r3, [r9]
 800b960:	ebce 0404 	rsb	r4, lr, r4
 800b964:	445e      	add	r6, fp
 800b966:	4798      	blx	r3
 800b968:	44da      	add	sl, fp
 800b96a:	2c00      	cmp	r4, #0
 800b96c:	d18c      	bne.n	800b888 <_DrawBitmap+0xd8>
 800b96e:	e79f      	b.n	800b8b0 <_DrawBitmap+0x100>
 800b970:	4b3d      	ldr	r3, [pc, #244]	; (800ba68 <_DrawBitmap+0x2b8>)
 800b972:	f8da 1000 	ldr.w	r1, [sl]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4798      	blx	r3
 800b97a:	f8ca 0000 	str.w	r0, [sl]
 800b97e:	e791      	b.n	800b8a4 <_DrawBitmap+0xf4>
 800b980:	f8d9 3000 	ldr.w	r3, [r9]
 800b984:	9a08      	ldr	r2, [sp, #32]
 800b986:	9802      	ldr	r0, [sp, #8]
 800b988:	4639      	mov	r1, r7
 800b98a:	4798      	blx	r3
 800b98c:	e790      	b.n	800b8b0 <_DrawBitmap+0x100>
 800b98e:	4610      	mov	r0, r2
 800b990:	f7fb fd20 	bl	80073d4 <GUI_ALLOC_LockH>
 800b994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b996:	4602      	mov	r2, r0
 800b998:	e724      	b.n	800b7e4 <_DrawBitmap+0x34>
 800b99a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd92      	ble.n	800b8c6 <_DrawBitmap+0x116>
 800b9a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b9a4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800b9a6:	4453      	add	r3, sl
 800b9a8:	9306      	str	r3, [sp, #24]
 800b9aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b9ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800b9b0:	b35e      	cbz	r6, 800ba0a <_DrawBitmap+0x25a>
 800b9b2:	68b2      	ldr	r2, [r6, #8]
 800b9b4:	9d03      	ldr	r5, [sp, #12]
 800b9b6:	6854      	ldr	r4, [r2, #4]
 800b9b8:	9905      	ldr	r1, [sp, #20]
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	4652      	mov	r2, sl
 800b9be:	4630      	mov	r0, r6
 800b9c0:	47a0      	blx	r4
 800b9c2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b9c6:	9c05      	ldr	r4, [sp, #20]
 800b9c8:	46d9      	mov	r9, fp
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	4798      	blx	r3
 800b9d4:	68b3      	ldr	r3, [r6, #8]
 800b9d6:	f848 0b04 	str.w	r0, [r8], #4
 800b9da:	4621      	mov	r1, r4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4652      	mov	r2, sl
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	4798      	blx	r3
 800b9e4:	3d01      	subs	r5, #1
 800b9e6:	f104 0401 	add.w	r4, r4, #1
 800b9ea:	d1ee      	bne.n	800b9ca <_DrawBitmap+0x21a>
 800b9ec:	9b02      	ldr	r3, [sp, #8]
 800b9ee:	9a04      	ldr	r2, [sp, #16]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b9f6:	449b      	add	fp, r3
 800b9f8:	9b06      	ldr	r3, [sp, #24]
 800b9fa:	f10a 0a01 	add.w	sl, sl, #1
 800b9fe:	459a      	cmp	sl, r3
 800ba00:	f43f af61 	beq.w	800b8c6 <_DrawBitmap+0x116>
 800ba04:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800ba06:	2e00      	cmp	r6, #0
 800ba08:	d1d3      	bne.n	800b9b2 <_DrawBitmap+0x202>
 800ba0a:	9d02      	ldr	r5, [sp, #8]
 800ba0c:	9c03      	ldr	r4, [sp, #12]
 800ba0e:	465e      	mov	r6, fp
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	4798      	blx	r3
 800ba1a:	3c01      	subs	r4, #1
 800ba1c:	f845 0b04 	str.w	r0, [r5], #4
 800ba20:	d1f6      	bne.n	800ba10 <_DrawBitmap+0x260>
 800ba22:	e7e3      	b.n	800b9ec <_DrawBitmap+0x23c>
 800ba24:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800ba28:	9b06      	ldr	r3, [sp, #24]
 800ba2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	461c      	mov	r4, r3
 800ba30:	9306      	str	r3, [sp, #24]
 800ba32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba34:	4413      	add	r3, r2
 800ba36:	931f      	str	r3, [sp, #124]	; 0x7c
 800ba38:	9a04      	ldr	r2, [sp, #16]
 800ba3a:	9b02      	ldr	r3, [sp, #8]
 800ba3c:	a80f      	add	r0, sp, #60	; 0x3c
 800ba3e:	4413      	add	r3, r2
 800ba40:	9302      	str	r3, [sp, #8]
 800ba42:	f7fb fcd9 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ba46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ba48:	461a      	mov	r2, r3
 800ba4a:	42a2      	cmp	r2, r4
 800ba4c:	f300 82cf 	bgt.w	800bfee <_DrawBitmap+0x83e>
 800ba50:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800ba54:	f1be 0f00 	cmp.w	lr, #0
 800ba58:	f47f af39 	bne.w	800b8ce <_DrawBitmap+0x11e>
 800ba5c:	e6b2      	b.n	800b7c4 <_DrawBitmap+0x14>
 800ba5e:	bf00      	nop
 800ba60:	20000018 	.word	0x20000018
 800ba64:	08015a34 	.word	0x08015a34
 800ba68:	20000028 	.word	0x20000028
 800ba6c:	20000030 	.word	0x20000030
 800ba70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f340 8380 	ble.w	800c178 <_DrawBitmap+0x9c8>
 800ba78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba7c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800ba80:	9a03      	ldr	r2, [sp, #12]
 800ba82:	444b      	add	r3, r9
 800ba84:	9306      	str	r3, [sp, #24]
 800ba86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba88:	4658      	mov	r0, fp
 800ba8a:	189c      	adds	r4, r3, r2
 800ba8c:	465d      	mov	r5, fp
 800ba8e:	4bb9      	ldr	r3, [pc, #740]	; (800bd74 <_DrawBitmap+0x5c4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	7c1b      	ldrb	r3, [r3, #16]
 800ba94:	f1ba 0f00 	cmp.w	sl, #0
 800ba98:	d041      	beq.n	800bb1e <_DrawBitmap+0x36e>
 800ba9a:	f013 0303 	ands.w	r3, r3, #3
 800ba9e:	d033      	beq.n	800bb08 <_DrawBitmap+0x358>
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d11e      	bne.n	800bae2 <_DrawBitmap+0x332>
 800baa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800baa6:	2d00      	cmp	r5, #0
 800baa8:	d05c      	beq.n	800bb64 <_DrawBitmap+0x3b4>
 800baaa:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800baae:	9f03      	ldr	r7, [sp, #12]
 800bab0:	9e05      	ldr	r6, [sp, #20]
 800bab2:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800bab6:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800baba:	4631      	mov	r1, r6
 800babc:	464a      	mov	r2, r9
 800babe:	3601      	adds	r6, #1
 800bac0:	4628      	mov	r0, r5
 800bac2:	b143      	cbz	r3, 800bad6 <_DrawBitmap+0x326>
 800bac4:	f8d5 e008 	ldr.w	lr, [r5, #8]
 800bac8:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800bacc:	f8c8 3000 	str.w	r3, [r8]
 800bad0:	f8de 3000 	ldr.w	r3, [lr]
 800bad4:	4798      	blx	r3
 800bad6:	3f01      	subs	r7, #1
 800bad8:	f108 0804 	add.w	r8, r8, #4
 800badc:	d1eb      	bne.n	800bab6 <_DrawBitmap+0x306>
 800bade:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bae0:	4628      	mov	r0, r5
 800bae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bae4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bae6:	4413      	add	r3, r2
 800bae8:	931f      	str	r3, [sp, #124]	; 0x7c
 800baea:	9a04      	ldr	r2, [sp, #16]
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	4413      	add	r3, r2
 800baf0:	9302      	str	r3, [sp, #8]
 800baf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800baf4:	441c      	add	r4, r3
 800baf6:	9b06      	ldr	r3, [sp, #24]
 800baf8:	f109 0901 	add.w	r9, r9, #1
 800bafc:	454b      	cmp	r3, r9
 800bafe:	d1c6      	bne.n	800ba8e <_DrawBitmap+0x2de>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f47f aee4 	bne.w	800b8ce <_DrawBitmap+0x11e>
 800bb06:	e65d      	b.n	800b7c4 <_DrawBitmap+0x14>
 800bb08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb0a:	9a02      	ldr	r2, [sp, #8]
 800bb0c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bb10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb14:	f842 1b04 	str.w	r1, [r2], #4
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	d1f7      	bne.n	800bb0c <_DrawBitmap+0x35c>
 800bb1c:	e7e1      	b.n	800bae2 <_DrawBitmap+0x332>
 800bb1e:	f013 0303 	ands.w	r3, r3, #3
 800bb22:	f000 8252 	beq.w	800bfca <_DrawBitmap+0x81a>
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d1db      	bne.n	800bae2 <_DrawBitmap+0x332>
 800bb2a:	2d00      	cmp	r5, #0
 800bb2c:	f000 8319 	beq.w	800c162 <_DrawBitmap+0x9b2>
 800bb30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb32:	9f02      	ldr	r7, [sp, #8]
 800bb34:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bb38:	9e05      	ldr	r6, [sp, #20]
 800bb3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800bb3e:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800bb42:	4631      	mov	r1, r6
 800bb44:	464a      	mov	r2, r9
 800bb46:	3601      	adds	r6, #1
 800bb48:	4628      	mov	r0, r5
 800bb4a:	b12b      	cbz	r3, 800bb58 <_DrawBitmap+0x3a8>
 800bb4c:	f8d5 e008 	ldr.w	lr, [r5, #8]
 800bb50:	603b      	str	r3, [r7, #0]
 800bb52:	f8de 3000 	ldr.w	r3, [lr]
 800bb56:	4798      	blx	r3
 800bb58:	f1bb 0b01 	subs.w	fp, fp, #1
 800bb5c:	f107 0704 	add.w	r7, r7, #4
 800bb60:	d1ed      	bne.n	800bb3e <_DrawBitmap+0x38e>
 800bb62:	e7bc      	b.n	800bade <_DrawBitmap+0x32e>
 800bb64:	9a02      	ldr	r2, [sp, #8]
 800bb66:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bb6a:	b111      	cbz	r1, 800bb72 <_DrawBitmap+0x3c2>
 800bb6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb70:	6011      	str	r1, [r2, #0]
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	f102 0204 	add.w	r2, r2, #4
 800bb78:	d1f5      	bne.n	800bb66 <_DrawBitmap+0x3b6>
 800bb7a:	e7b1      	b.n	800bae0 <_DrawBitmap+0x330>
 800bb7c:	911f      	str	r1, [sp, #124]	; 0x7c
 800bb7e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bb80:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800bb84:	9306      	str	r3, [sp, #24]
 800bb86:	f1c1 0302 	rsb	r3, r1, #2
 800bb8a:	b2d9      	uxtb	r1, r3
 800bb8c:	46d8      	mov	r8, fp
 800bb8e:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800bb92:	910b      	str	r1, [sp, #44]	; 0x2c
 800bb94:	4613      	mov	r3, r2
 800bb96:	3304      	adds	r3, #4
 800bb98:	9307      	str	r3, [sp, #28]
 800bb9a:	46c6      	mov	lr, r8
 800bb9c:	4645      	mov	r5, r8
 800bb9e:	4b75      	ldr	r3, [pc, #468]	; (800bd74 <_DrawBitmap+0x5c4>)
 800bba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	f89b 3000 	ldrb.w	r3, [fp]
 800bba8:	7c12      	ldrb	r2, [r2, #16]
 800bbaa:	408b      	lsls	r3, r1
 800bbac:	f002 0203 	and.w	r2, r2, #3
 800bbb0:	9907      	ldr	r1, [sp, #28]
 800bbb2:	2a01      	cmp	r2, #1
 800bbb4:	b2dc      	uxtb	r4, r3
 800bbb6:	f1a1 0904 	sub.w	r9, r1, #4
 800bbba:	f000 80b9 	beq.w	800bd30 <_DrawBitmap+0x580>
 800bbbe:	d373      	bcc.n	800bca8 <_DrawBitmap+0x4f8>
 800bbc0:	2a02      	cmp	r2, #2
 800bbc2:	d161      	bne.n	800bc88 <_DrawBitmap+0x4d8>
 800bbc4:	9908      	ldr	r1, [sp, #32]
 800bbc6:	9a06      	ldr	r2, [sp, #24]
 800bbc8:	440a      	add	r2, r1
 800bbca:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bbcc:	9209      	str	r2, [sp, #36]	; 0x24
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	f000 80f2 	beq.w	800bdb8 <_DrawBitmap+0x608>
 800bbd4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800bbd8:	d00a      	beq.n	800bbf0 <_DrawBitmap+0x440>
 800bbda:	0924      	lsrs	r4, r4, #4
 800bbdc:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800bbe0:	f8c9 3000 	str.w	r3, [r9]
 800bbe4:	b125      	cbz	r5, 800bbf0 <_DrawBitmap+0x440>
 800bbe6:	68ab      	ldr	r3, [r5, #8]
 800bbe8:	9905      	ldr	r1, [sp, #20]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4628      	mov	r0, r5
 800bbee:	4798      	blx	r3
 800bbf0:	9b05      	ldr	r3, [sp, #20]
 800bbf2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800bbf6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	9302      	str	r3, [sp, #8]
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	f10b 0701 	add.w	r7, fp, #1
 800bc04:	1e5e      	subs	r6, r3, #1
 800bc06:	2e01      	cmp	r6, #1
 800bc08:	f340 80c5 	ble.w	800bd96 <_DrawBitmap+0x5e6>
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	f000 80db 	beq.w	800bdc8 <_DrawBitmap+0x618>
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bc18:	4632      	mov	r2, r6
 800bc1a:	f109 0808 	add.w	r8, r9, #8
 800bc1e:	960d      	str	r6, [sp, #52]	; 0x34
 800bc20:	4691      	mov	r9, r2
 800bc22:	461e      	mov	r6, r3
 800bc24:	e021      	b.n	800bc6a <_DrawBitmap+0x4ba>
 800bc26:	f8d5 e008 	ldr.w	lr, [r5, #8]
 800bc2a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800bc2e:	f848 3c08 	str.w	r3, [r8, #-8]
 800bc32:	f8de 3000 	ldr.w	r3, [lr]
 800bc36:	4798      	blx	r3
 800bc38:	f014 040f 	ands.w	r4, r4, #15
 800bc3c:	d009      	beq.n	800bc52 <_DrawBitmap+0x4a2>
 800bc3e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800bc42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc44:	f848 3c04 	str.w	r3, [r8, #-4]
 800bc48:	68ab      	ldr	r3, [r5, #8]
 800bc4a:	1c71      	adds	r1, r6, #1
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4628      	mov	r0, r5
 800bc50:	4798      	blx	r3
 800bc52:	f1a9 0902 	sub.w	r9, r9, #2
 800bc56:	f1b9 0f01 	cmp.w	r9, #1
 800bc5a:	f106 0602 	add.w	r6, r6, #2
 800bc5e:	f108 0808 	add.w	r8, r8, #8
 800bc62:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 800bc66:	f340 8087 	ble.w	800bd78 <_DrawBitmap+0x5c8>
 800bc6a:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 800bc6e:	ea4f 1314 	mov.w	r3, r4, lsr #4
 800bc72:	4631      	mov	r1, r6
 800bc74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc76:	4628      	mov	r0, r5
 800bc78:	d1d5      	bne.n	800bc26 <_DrawBitmap+0x476>
 800bc7a:	2c00      	cmp	r4, #0
 800bc7c:	d0e9      	beq.n	800bc52 <_DrawBitmap+0x4a2>
 800bc7e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800bc82:	f848 3c04 	str.w	r3, [r8, #-4]
 800bc86:	e7df      	b.n	800bc48 <_DrawBitmap+0x498>
 800bc88:	9b06      	ldr	r3, [sp, #24]
 800bc8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	461a      	mov	r2, r3
 800bc90:	9306      	str	r3, [sp, #24]
 800bc92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc94:	449b      	add	fp, r3
 800bc96:	9b04      	ldr	r3, [sp, #16]
 800bc98:	428a      	cmp	r2, r1
 800bc9a:	46a8      	mov	r8, r5
 800bc9c:	444b      	add	r3, r9
 800bc9e:	f6ff af7a 	blt.w	800bb96 <_DrawBitmap+0x3e6>
 800bca2:	46ab      	mov	fp, r5
 800bca4:	46de      	mov	lr, fp
 800bca6:	e643      	b.n	800b930 <_DrawBitmap+0x180>
 800bca8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 8089 	beq.w	800bdc2 <_DrawBitmap+0x612>
 800bcb0:	0924      	lsrs	r4, r4, #4
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	1e59      	subs	r1, r3, #1
 800bcb6:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800bcba:	f8c9 3000 	str.w	r3, [r9]
 800bcbe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 800bcc2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800bcc6:	f10b 0201 	add.w	r2, fp, #1
 800bcca:	2901      	cmp	r1, #1
 800bccc:	dd18      	ble.n	800bd00 <_DrawBitmap+0x550>
 800bcce:	104f      	asrs	r7, r1, #1
 800bcd0:	19d6      	adds	r6, r2, r7
 800bcd2:	f001 0101 	and.w	r1, r1, #1
 800bcd6:	f109 0308 	add.w	r3, r9, #8
 800bcda:	0920      	lsrs	r0, r4, #4
 800bcdc:	f004 040f 	and.w	r4, r4, #15
 800bce0:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 800bce4:	f843 0c08 	str.w	r0, [r3, #-8]
 800bce8:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 800bcec:	f843 0c04 	str.w	r0, [r3, #-4]
 800bcf0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800bcf4:	42b2      	cmp	r2, r6
 800bcf6:	f103 0308 	add.w	r3, r3, #8
 800bcfa:	d1ee      	bne.n	800bcda <_DrawBitmap+0x52a>
 800bcfc:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 800bd00:	b121      	cbz	r1, 800bd0c <_DrawBitmap+0x55c>
 800bd02:	0924      	lsrs	r4, r4, #4
 800bd04:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800bd08:	f8c9 3000 	str.w	r3, [r9]
 800bd0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bd0e:	9904      	ldr	r1, [sp, #16]
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	4493      	add	fp, r2
 800bd14:	9a07      	ldr	r2, [sp, #28]
 800bd16:	440a      	add	r2, r1
 800bd18:	9207      	str	r2, [sp, #28]
 800bd1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	9306      	str	r3, [sp, #24]
 800bd22:	f73f af3c 	bgt.w	800bb9e <_DrawBitmap+0x3ee>
 800bd26:	f1be 0f00 	cmp.w	lr, #0
 800bd2a:	f47f add0 	bne.w	800b8ce <_DrawBitmap+0x11e>
 800bd2e:	e549      	b.n	800b7c4 <_DrawBitmap+0x14>
 800bd30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd32:	9903      	ldr	r1, [sp, #12]
 800bd34:	4658      	mov	r0, fp
 800bd36:	428b      	cmp	r3, r1
 800bd38:	bfc8      	it	gt
 800bd3a:	b2cb      	uxtbgt	r3, r1
 800bd3c:	1e5a      	subs	r2, r3, #1
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	3201      	adds	r2, #1
 800bd42:	1ac9      	subs	r1, r1, r3
 800bd44:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800bd48:	0123      	lsls	r3, r4, #4
 800bd4a:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800bd4e:	b2dc      	uxtb	r4, r3
 800bd50:	d005      	beq.n	800bd5e <_DrawBitmap+0x5ae>
 800bd52:	f8d9 3000 	ldr.w	r3, [r9]
 800bd56:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800bd5a:	f8c9 3000 	str.w	r3, [r9]
 800bd5e:	f109 0904 	add.w	r9, r9, #4
 800bd62:	4591      	cmp	r9, r2
 800bd64:	d1f0      	bne.n	800bd48 <_DrawBitmap+0x598>
 800bd66:	2900      	cmp	r1, #0
 800bd68:	d0d0      	beq.n	800bd0c <_DrawBitmap+0x55c>
 800bd6a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800bd6e:	2302      	movs	r3, #2
 800bd70:	e7e1      	b.n	800bd36 <_DrawBitmap+0x586>
 800bd72:	bf00      	nop
 800bd74:	20000018 	.word	0x20000018
 800bd78:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800bd7a:	9902      	ldr	r1, [sp, #8]
 800bd7c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bd80:	3e02      	subs	r6, #2
 800bd82:	0873      	lsrs	r3, r6, #1
 800bd84:	3102      	adds	r1, #2
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800bd8c:	9102      	str	r1, [sp, #8]
 800bd8e:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 800bd92:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 800bd96:	b166      	cbz	r6, 800bdb2 <_DrawBitmap+0x602>
 800bd98:	0924      	lsrs	r4, r4, #4
 800bd9a:	d00a      	beq.n	800bdb2 <_DrawBitmap+0x602>
 800bd9c:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800bda0:	f8c9 3000 	str.w	r3, [r9]
 800bda4:	b12d      	cbz	r5, 800bdb2 <_DrawBitmap+0x602>
 800bda6:	68ab      	ldr	r3, [r5, #8]
 800bda8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdaa:	9902      	ldr	r1, [sp, #8]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4628      	mov	r0, r5
 800bdb0:	4798      	blx	r3
 800bdb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bdb4:	46ae      	mov	lr, r5
 800bdb6:	e7a9      	b.n	800bd0c <_DrawBitmap+0x55c>
 800bdb8:	9b05      	ldr	r3, [sp, #20]
 800bdba:	9e03      	ldr	r6, [sp, #12]
 800bdbc:	9302      	str	r3, [sp, #8]
 800bdbe:	465f      	mov	r7, fp
 800bdc0:	e721      	b.n	800bc06 <_DrawBitmap+0x456>
 800bdc2:	9903      	ldr	r1, [sp, #12]
 800bdc4:	465a      	mov	r2, fp
 800bdc6:	e780      	b.n	800bcca <_DrawBitmap+0x51a>
 800bdc8:	3e02      	subs	r6, #2
 800bdca:	0872      	lsrs	r2, r6, #1
 800bdcc:	1c51      	adds	r1, r2, #1
 800bdce:	1878      	adds	r0, r7, r1
 800bdd0:	f109 0308 	add.w	r3, r9, #8
 800bdd4:	4694      	mov	ip, r2
 800bdd6:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 800bdda:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 800bdde:	d003      	beq.n	800bde8 <_DrawBitmap+0x638>
 800bde0:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 800bde4:	f843 2c08 	str.w	r2, [r3, #-8]
 800bde8:	f014 040f 	ands.w	r4, r4, #15
 800bdec:	d003      	beq.n	800bdf6 <_DrawBitmap+0x646>
 800bdee:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 800bdf2:	f843 4c04 	str.w	r4, [r3, #-4]
 800bdf6:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 800bdfa:	42b8      	cmp	r0, r7
 800bdfc:	f103 0308 	add.w	r3, r3, #8
 800be00:	d1e9      	bne.n	800bdd6 <_DrawBitmap+0x626>
 800be02:	9b02      	ldr	r3, [sp, #8]
 800be04:	3302      	adds	r3, #2
 800be06:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 800be0a:	9302      	str	r3, [sp, #8]
 800be0c:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 800be10:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 800be14:	e7bf      	b.n	800bd96 <_DrawBitmap+0x5e6>
 800be16:	9306      	str	r3, [sp, #24]
 800be18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be1a:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800be1e:	9202      	str	r2, [sp, #8]
 800be20:	f1c3 0304 	rsb	r3, r3, #4
 800be24:	b2db      	uxtb	r3, r3
 800be26:	911f      	str	r1, [sp, #124]	; 0x7c
 800be28:	930b      	str	r3, [sp, #44]	; 0x2c
 800be2a:	46d0      	mov	r8, sl
 800be2c:	46de      	mov	lr, fp
 800be2e:	465f      	mov	r7, fp
 800be30:	4bab      	ldr	r3, [pc, #684]	; (800c0e0 <_DrawBitmap+0x930>)
 800be32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	7814      	ldrb	r4, [r2, #0]
 800be38:	7c1b      	ldrb	r3, [r3, #16]
 800be3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be3c:	f003 0303 	and.w	r3, r3, #3
 800be40:	4094      	lsls	r4, r2
 800be42:	2b01      	cmp	r3, #1
 800be44:	b2e4      	uxtb	r4, r4
 800be46:	f000 808f 	beq.w	800bf68 <_DrawBitmap+0x7b8>
 800be4a:	d358      	bcc.n	800befe <_DrawBitmap+0x74e>
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	f040 80aa 	bne.w	800bfa6 <_DrawBitmap+0x7f6>
 800be52:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800be54:	9209      	str	r2, [sp, #36]	; 0x24
 800be56:	9a05      	ldr	r2, [sp, #20]
 800be58:	9207      	str	r2, [sp, #28]
 800be5a:	9906      	ldr	r1, [sp, #24]
 800be5c:	9a08      	ldr	r2, [sp, #32]
 800be5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be60:	9d02      	ldr	r5, [sp, #8]
 800be62:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800be66:	eb02 0b01 	add.w	fp, r2, r1
 800be6a:	4553      	cmp	r3, sl
 800be6c:	bfc8      	it	gt
 800be6e:	fa5f f38a 	uxtbgt.w	r3, sl
 800be72:	ebc3 0a0a 	rsb	sl, r3, sl
 800be76:	3b01      	subs	r3, #1
 800be78:	b35f      	cbz	r7, 800bed2 <_DrawBitmap+0x722>
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	f103 0901 	add.w	r9, r3, #1
 800be80:	9e07      	ldr	r6, [sp, #28]
 800be82:	930a      	str	r3, [sp, #40]	; 0x28
 800be84:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800be88:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800be8c:	4631      	mov	r1, r6
 800be8e:	ea4f 1394 	mov.w	r3, r4, lsr #6
 800be92:	f106 0601 	add.w	r6, r6, #1
 800be96:	465a      	mov	r2, fp
 800be98:	4638      	mov	r0, r7
 800be9a:	d007      	beq.n	800beac <_DrawBitmap+0x6fc>
 800be9c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800bea0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800bea4:	602b      	str	r3, [r5, #0]
 800bea6:	f8de 3000 	ldr.w	r3, [lr]
 800beaa:	4798      	blx	r3
 800beac:	3504      	adds	r5, #4
 800beae:	00a4      	lsls	r4, r4, #2
 800beb0:	454d      	cmp	r5, r9
 800beb2:	b2e4      	uxtb	r4, r4
 800beb4:	d1e8      	bne.n	800be88 <_DrawBitmap+0x6d8>
 800beb6:	9b07      	ldr	r3, [sp, #28]
 800beb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beba:	3301      	adds	r3, #1
 800bebc:	441a      	add	r2, r3
 800bebe:	9207      	str	r2, [sp, #28]
 800bec0:	f1ba 0f00 	cmp.w	sl, #0
 800bec4:	d03a      	beq.n	800bf3c <_DrawBitmap+0x78c>
 800bec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec8:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800becc:	9309      	str	r3, [sp, #36]	; 0x24
 800bece:	2304      	movs	r3, #4
 800bed0:	e7cb      	b.n	800be6a <_DrawBitmap+0x6ba>
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	1c50      	adds	r0, r2, #1
 800bed6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800beda:	09a1      	lsrs	r1, r4, #6
 800bedc:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800bee0:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800bee4:	b2dc      	uxtb	r4, r3
 800bee6:	bf1c      	itt	ne
 800bee8:	f858 3021 	ldrne.w	r3, [r8, r1, lsl #2]
 800beec:	602b      	strne	r3, [r5, #0]
 800beee:	3504      	adds	r5, #4
 800bef0:	42a8      	cmp	r0, r5
 800bef2:	d1f2      	bne.n	800beda <_DrawBitmap+0x72a>
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	3301      	adds	r3, #1
 800bef8:	18d3      	adds	r3, r2, r3
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	e7e0      	b.n	800bec0 <_DrawBitmap+0x710>
 800befe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf00:	9e02      	ldr	r6, [sp, #8]
 800bf02:	9d03      	ldr	r5, [sp, #12]
 800bf04:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 800bf08:	42ab      	cmp	r3, r5
 800bf0a:	bfc8      	it	gt
 800bf0c:	b2eb      	uxtbgt	r3, r5
 800bf0e:	1e58      	subs	r0, r3, #1
 800bf10:	b2c0      	uxtb	r0, r0
 800bf12:	1aed      	subs	r5, r5, r3
 800bf14:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 800bf18:	1f33      	subs	r3, r6, #4
 800bf1a:	09a2      	lsrs	r2, r4, #6
 800bf1c:	00a4      	lsls	r4, r4, #2
 800bf1e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bf22:	f843 2f04 	str.w	r2, [r3, #4]!
 800bf26:	428b      	cmp	r3, r1
 800bf28:	b2e4      	uxtb	r4, r4
 800bf2a:	d1f6      	bne.n	800bf1a <_DrawBitmap+0x76a>
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800bf32:	b12d      	cbz	r5, 800bf40 <_DrawBitmap+0x790>
 800bf34:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 800bf38:	2304      	movs	r3, #4
 800bf3a:	e7e5      	b.n	800bf08 <_DrawBitmap+0x758>
 800bf3c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bf3e:	46be      	mov	lr, r7
 800bf40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bf42:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bf44:	9b06      	ldr	r3, [sp, #24]
 800bf46:	440a      	add	r2, r1
 800bf48:	921f      	str	r2, [sp, #124]	; 0x7c
 800bf4a:	9904      	ldr	r1, [sp, #16]
 800bf4c:	9a02      	ldr	r2, [sp, #8]
 800bf4e:	440a      	add	r2, r1
 800bf50:	9202      	str	r2, [sp, #8]
 800bf52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf54:	3301      	adds	r3, #1
 800bf56:	429a      	cmp	r2, r3
 800bf58:	9306      	str	r3, [sp, #24]
 800bf5a:	f73f af69 	bgt.w	800be30 <_DrawBitmap+0x680>
 800bf5e:	f1be 0f00 	cmp.w	lr, #0
 800bf62:	f47f acb4 	bne.w	800b8ce <_DrawBitmap+0x11e>
 800bf66:	e42d      	b.n	800b7c4 <_DrawBitmap+0x14>
 800bf68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf6a:	9b02      	ldr	r3, [sp, #8]
 800bf6c:	9803      	ldr	r0, [sp, #12]
 800bf6e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800bf70:	4282      	cmp	r2, r0
 800bf72:	bfc8      	it	gt
 800bf74:	b2c2      	uxtbgt	r2, r0
 800bf76:	1e51      	subs	r1, r2, #1
 800bf78:	b2c9      	uxtb	r1, r1
 800bf7a:	3101      	adds	r1, #1
 800bf7c:	1a80      	subs	r0, r0, r2
 800bf7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800bf82:	00a2      	lsls	r2, r4, #2
 800bf84:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800bf88:	b2d4      	uxtb	r4, r2
 800bf8a:	d003      	beq.n	800bf94 <_DrawBitmap+0x7e4>
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	3304      	adds	r3, #4
 800bf96:	428b      	cmp	r3, r1
 800bf98:	d1f3      	bne.n	800bf82 <_DrawBitmap+0x7d2>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d0d0      	beq.n	800bf40 <_DrawBitmap+0x790>
 800bf9e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800bfa2:	2204      	movs	r2, #4
 800bfa4:	e7e4      	b.n	800bf70 <_DrawBitmap+0x7c0>
 800bfa6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bfa8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	440a      	add	r2, r1
 800bfae:	921f      	str	r2, [sp, #124]	; 0x7c
 800bfb0:	9904      	ldr	r1, [sp, #16]
 800bfb2:	9a02      	ldr	r2, [sp, #8]
 800bfb4:	440a      	add	r2, r1
 800bfb6:	9202      	str	r2, [sp, #8]
 800bfb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bfba:	3301      	adds	r3, #1
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	46bb      	mov	fp, r7
 800bfc0:	9306      	str	r3, [sp, #24]
 800bfc2:	f73f af33 	bgt.w	800be2c <_DrawBitmap+0x67c>
 800bfc6:	46de      	mov	lr, fp
 800bfc8:	e4b2      	b.n	800b930 <_DrawBitmap+0x180>
 800bfca:	4b46      	ldr	r3, [pc, #280]	; (800c0e4 <_DrawBitmap+0x934>)
 800bfcc:	9a03      	ldr	r2, [sp, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800bfd2:	9802      	ldr	r0, [sp, #8]
 800bfd4:	4798      	blx	r3
 800bfd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bfd8:	4628      	mov	r0, r5
 800bfda:	e582      	b.n	800bae2 <_DrawBitmap+0x332>
 800bfdc:	9306      	str	r3, [sp, #24]
 800bfde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bfe0:	f8df b104 	ldr.w	fp, [pc, #260]	; 800c0e8 <_DrawBitmap+0x938>
 800bfe4:	9202      	str	r2, [sp, #8]
 800bfe6:	f1c3 0308 	rsb	r3, r3, #8
 800bfea:	911f      	str	r1, [sp, #124]	; 0x7c
 800bfec:	930a      	str	r3, [sp, #40]	; 0x28
 800bfee:	4b3c      	ldr	r3, [pc, #240]	; (800c0e0 <_DrawBitmap+0x930>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bff4:	f7fb f9ee 	bl	80073d4 <GUI_ALLOC_LockH>
 800bff8:	4b39      	ldr	r3, [pc, #228]	; (800c0e0 <_DrawBitmap+0x930>)
 800bffa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	7812      	ldrb	r2, [r2, #0]
 800c000:	7c1b      	ldrb	r3, [r3, #16]
 800c002:	f81b 4002 	ldrb.w	r4, [fp, r2]
 800c006:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c008:	900f      	str	r0, [sp, #60]	; 0x3c
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	2b02      	cmp	r3, #2
 800c010:	fa44 f402 	asr.w	r4, r4, r2
 800c014:	d048      	beq.n	800c0a8 <_DrawBitmap+0x8f8>
 800c016:	2b03      	cmp	r3, #3
 800c018:	d020      	beq.n	800c05c <_DrawBitmap+0x8ac>
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d01e      	beq.n	800c05c <_DrawBitmap+0x8ac>
 800c01e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c020:	9e02      	ldr	r6, [sp, #8]
 800c022:	9d03      	ldr	r5, [sp, #12]
 800c024:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c026:	42a8      	cmp	r0, r5
 800c028:	bf28      	it	cs
 800c02a:	4628      	movcs	r0, r5
 800c02c:	1a2d      	subs	r5, r5, r0
 800c02e:	4602      	mov	r2, r0
 800c030:	4631      	mov	r1, r6
 800c032:	f004 0301 	and.w	r3, r4, #1
 800c036:	3a01      	subs	r2, #1
 800c038:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800c03c:	f841 3b04 	str.w	r3, [r1], #4
 800c040:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c044:	d1f5      	bne.n	800c032 <_DrawBitmap+0x882>
 800c046:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800c04a:	2d00      	cmp	r5, #0
 800c04c:	f43f acec 	beq.w	800ba28 <_DrawBitmap+0x278>
 800c050:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800c054:	2008      	movs	r0, #8
 800c056:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800c05a:	e7e4      	b.n	800c026 <_DrawBitmap+0x876>
 800c05c:	6803      	ldr	r3, [r0, #0]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	4798      	blx	r3
 800c064:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c066:	9f02      	ldr	r7, [sp, #8]
 800c068:	9e03      	ldr	r6, [sp, #12]
 800c06a:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 800c06e:	42b5      	cmp	r5, r6
 800c070:	bf28      	it	cs
 800c072:	4635      	movcs	r5, r6
 800c074:	1b76      	subs	r6, r6, r5
 800c076:	462a      	mov	r2, r5
 800c078:	463b      	mov	r3, r7
 800c07a:	f014 0f01 	tst.w	r4, #1
 800c07e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c082:	d002      	beq.n	800c08a <_DrawBitmap+0x8da>
 800c084:	6819      	ldr	r1, [r3, #0]
 800c086:	4041      	eors	r1, r0
 800c088:	6019      	str	r1, [r3, #0]
 800c08a:	3a01      	subs	r2, #1
 800c08c:	f103 0304 	add.w	r3, r3, #4
 800c090:	d1f3      	bne.n	800c07a <_DrawBitmap+0x8ca>
 800c092:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 800c096:	2e00      	cmp	r6, #0
 800c098:	f43f acc6 	beq.w	800ba28 <_DrawBitmap+0x278>
 800c09c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800c0a0:	2508      	movs	r5, #8
 800c0a2:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800c0a6:	e7e2      	b.n	800c06e <_DrawBitmap+0x8be>
 800c0a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c0ac:	9908      	ldr	r1, [sp, #32]
 800c0ae:	9a06      	ldr	r2, [sp, #24]
 800c0b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c0b4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c0b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c0ba:	9e02      	ldr	r6, [sp, #8]
 800c0bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c0c0:	9f05      	ldr	r7, [sp, #20]
 800c0c2:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 800c0c6:	440a      	add	r2, r1
 800c0c8:	9207      	str	r2, [sp, #28]
 800c0ca:	469a      	mov	sl, r3
 800c0cc:	454d      	cmp	r5, r9
 800c0ce:	bf28      	it	cs
 800c0d0:	464d      	movcs	r5, r9
 800c0d2:	ebc5 0909 	rsb	r9, r5, r9
 800c0d6:	f1b8 0f00 	cmp.w	r8, #0
 800c0da:	d030      	beq.n	800c13e <_DrawBitmap+0x98e>
 800c0dc:	b974      	cbnz	r4, 800c0fc <_DrawBitmap+0x94c>
 800c0de:	e02a      	b.n	800c136 <_DrawBitmap+0x986>
 800c0e0:	20000018 	.word	0x20000018
 800c0e4:	20000030 	.word	0x20000030
 800c0e8:	08015aa4 	.word	0x08015aa4
 800c0ec:	3d01      	subs	r5, #1
 800c0ee:	f107 0701 	add.w	r7, r7, #1
 800c0f2:	f106 0604 	add.w	r6, r6, #4
 800c0f6:	d012      	beq.n	800c11e <_DrawBitmap+0x96e>
 800c0f8:	0864      	lsrs	r4, r4, #1
 800c0fa:	d01c      	beq.n	800c136 <_DrawBitmap+0x986>
 800c0fc:	07e1      	lsls	r1, r4, #31
 800c0fe:	d5f5      	bpl.n	800c0ec <_DrawBitmap+0x93c>
 800c100:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c104:	9a07      	ldr	r2, [sp, #28]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4639      	mov	r1, r7
 800c10a:	4640      	mov	r0, r8
 800c10c:	4798      	blx	r3
 800c10e:	3d01      	subs	r5, #1
 800c110:	f8c6 a000 	str.w	sl, [r6]
 800c114:	f107 0701 	add.w	r7, r7, #1
 800c118:	f106 0604 	add.w	r6, r6, #4
 800c11c:	d1ec      	bne.n	800c0f8 <_DrawBitmap+0x948>
 800c11e:	f1b9 0f00 	cmp.w	r9, #0
 800c122:	f43f ac7f 	beq.w	800ba24 <_DrawBitmap+0x274>
 800c126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c128:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c12c:	9209      	str	r2, [sp, #36]	; 0x24
 800c12e:	2508      	movs	r5, #8
 800c130:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800c134:	e7ca      	b.n	800c0cc <_DrawBitmap+0x91c>
 800c136:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800c13a:	442f      	add	r7, r5
 800c13c:	e7ef      	b.n	800c11e <_DrawBitmap+0x96e>
 800c13e:	4653      	mov	r3, sl
 800c140:	b914      	cbnz	r4, 800c148 <_DrawBitmap+0x998>
 800c142:	e00b      	b.n	800c15c <_DrawBitmap+0x9ac>
 800c144:	0864      	lsrs	r4, r4, #1
 800c146:	d008      	beq.n	800c15a <_DrawBitmap+0x9aa>
 800c148:	07e2      	lsls	r2, r4, #31
 800c14a:	bf48      	it	mi
 800c14c:	6033      	strmi	r3, [r6, #0]
 800c14e:	3d01      	subs	r5, #1
 800c150:	f106 0604 	add.w	r6, r6, #4
 800c154:	d1f6      	bne.n	800c144 <_DrawBitmap+0x994>
 800c156:	469a      	mov	sl, r3
 800c158:	e7e1      	b.n	800c11e <_DrawBitmap+0x96e>
 800c15a:	469a      	mov	sl, r3
 800c15c:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800c160:	e7dd      	b.n	800c11e <_DrawBitmap+0x96e>
 800c162:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c164:	9b02      	ldr	r3, [sp, #8]
 800c166:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c16a:	b101      	cbz	r1, 800c16e <_DrawBitmap+0x9be>
 800c16c:	6019      	str	r1, [r3, #0]
 800c16e:	42a2      	cmp	r2, r4
 800c170:	f103 0304 	add.w	r3, r3, #4
 800c174:	d1f7      	bne.n	800c166 <_DrawBitmap+0x9b6>
 800c176:	e4b3      	b.n	800bae0 <_DrawBitmap+0x330>
 800c178:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f47f aba7 	bne.w	800b8ce <_DrawBitmap+0x11e>
 800c180:	f7ff bb20 	b.w	800b7c4 <_DrawBitmap+0x14>

0800c184 <_GetPixelIndex>:
 800c184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c186:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <_GetPixelIndex+0x3c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	b083      	sub	sp, #12
 800c18c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c18e:	460e      	mov	r6, r1
 800c190:	4617      	mov	r7, r2
 800c192:	f7fb f91f 	bl	80073d4 <GUI_ALLOC_LockH>
 800c196:	4605      	mov	r5, r0
 800c198:	a802      	add	r0, sp, #8
 800c19a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800c19e:	68eb      	ldr	r3, [r5, #12]
 800c1a0:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 800c1a4:	f840 5d04 	str.w	r5, [r0, #-4]!
 800c1a8:	1abf      	subs	r7, r7, r2
 800c1aa:	fb03 f307 	mul.w	r3, r3, r7
 800c1ae:	3318      	adds	r3, #24
 800c1b0:	1b34      	subs	r4, r6, r4
 800c1b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1b6:	f7fb f91f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c1ba:	5928      	ldr	r0, [r5, r4]
 800c1bc:	b003      	add	sp, #12
 800c1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c0:	20000018 	.word	0x20000018

0800c1c4 <_SetPixelIndex>:
 800c1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	4c1b      	ldr	r4, [pc, #108]	; (800c238 <_SetPixelIndex+0x74>)
 800c1ca:	6820      	ldr	r0, [r4, #0]
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c1d0:	460f      	mov	r7, r1
 800c1d2:	4690      	mov	r8, r2
 800c1d4:	4699      	mov	r9, r3
 800c1d6:	f7fb f8fd 	bl	80073d4 <GUI_ALLOC_LockH>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	9000      	str	r0, [sp, #0]
 800c1de:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c1e0:	f7fb f8f8 	bl	80073d4 <GUI_ALLOC_LockH>
 800c1e4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c1e8:	68c1      	ldr	r1, [r0, #12]
 800c1ea:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c1ee:	ae02      	add	r6, sp, #8
 800c1f0:	ebc2 0208 	rsb	r2, r2, r8
 800c1f4:	fb01 f202 	mul.w	r2, r1, r2
 800c1f8:	f846 0d04 	str.w	r0, [r6, #-4]!
 800c1fc:	3218      	adds	r2, #24
 800c1fe:	1b3c      	subs	r4, r7, r4
 800c200:	4605      	mov	r5, r0
 800c202:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c206:	4630      	mov	r0, r6
 800c208:	f7fb f8f6 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c20c:	f845 9004 	str.w	r9, [r5, r4]
 800c210:	9b00      	ldr	r3, [sp, #0]
 800c212:	6958      	ldr	r0, [r3, #20]
 800c214:	b150      	cbz	r0, 800c22c <_SetPixelIndex+0x68>
 800c216:	f7fb f8dd 	bl	80073d4 <GUI_ALLOC_LockH>
 800c21a:	9001      	str	r0, [sp, #4]
 800c21c:	6883      	ldr	r3, [r0, #8]
 800c21e:	4642      	mov	r2, r8
 800c220:	4639      	mov	r1, r7
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4798      	blx	r3
 800c226:	4630      	mov	r0, r6
 800c228:	f7fb f8e6 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c22c:	4668      	mov	r0, sp
 800c22e:	f7fb f8e3 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c232:	b003      	add	sp, #12
 800c234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c238:	20000018 	.word	0x20000018

0800c23c <_XorPixel>:
 800c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c240:	4c1e      	ldr	r4, [pc, #120]	; (800c2bc <_XorPixel+0x80>)
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	b082      	sub	sp, #8
 800c246:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c248:	460f      	mov	r7, r1
 800c24a:	4690      	mov	r8, r2
 800c24c:	f7fb f8c2 	bl	80073d4 <GUI_ALLOC_LockH>
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	9000      	str	r0, [sp, #0]
 800c254:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c256:	f7fb f8bd 	bl	80073d4 <GUI_ALLOC_LockH>
 800c25a:	ae02      	add	r6, sp, #8
 800c25c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c260:	68c2      	ldr	r2, [r0, #12]
 800c262:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c266:	f846 0d04 	str.w	r0, [r6, #-4]!
 800c26a:	ebc3 0308 	rsb	r3, r3, r8
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	4605      	mov	r5, r0
 800c274:	3318      	adds	r3, #24
 800c276:	1b3c      	subs	r4, r7, r4
 800c278:	4630      	mov	r0, r6
 800c27a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c27e:	f7fb f8bb 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c282:	9b00      	ldr	r3, [sp, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	4798      	blx	r3
 800c28c:	592b      	ldr	r3, [r5, r4]
 800c28e:	9a00      	ldr	r2, [sp, #0]
 800c290:	4058      	eors	r0, r3
 800c292:	5128      	str	r0, [r5, r4]
 800c294:	6950      	ldr	r0, [r2, #20]
 800c296:	b150      	cbz	r0, 800c2ae <_XorPixel+0x72>
 800c298:	f7fb f89c 	bl	80073d4 <GUI_ALLOC_LockH>
 800c29c:	9001      	str	r0, [sp, #4]
 800c29e:	6883      	ldr	r3, [r0, #8]
 800c2a0:	4642      	mov	r2, r8
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4798      	blx	r3
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7fb f8a5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c2ae:	4668      	mov	r0, sp
 800c2b0:	f7fb f8a2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c2b4:	b002      	add	sp, #8
 800c2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20000018 	.word	0x20000018

0800c2c0 <_FillRect>:
 800c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800c3ac <_FillRect+0xec>
 800c2c8:	f8d8 0000 	ldr.w	r0, [r8]
 800c2cc:	b087      	sub	sp, #28
 800c2ce:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c2d0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800c2d4:	468a      	mov	sl, r1
 800c2d6:	4616      	mov	r6, r2
 800c2d8:	461f      	mov	r7, r3
 800c2da:	f7fb f87b 	bl	80073d4 <GUI_ALLOC_LockH>
 800c2de:	f8d8 3000 	ldr.w	r3, [r8]
 800c2e2:	9004      	str	r0, [sp, #16]
 800c2e4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c2e6:	f7fb f875 	bl	80073d4 <GUI_ALLOC_LockH>
 800c2ea:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c2ee:	68c3      	ldr	r3, [r0, #12]
 800c2f0:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800c2f4:	f8cd a00c 	str.w	sl, [sp, #12]
 800c2f8:	f10d 0b18 	add.w	fp, sp, #24
 800c2fc:	1ab2      	subs	r2, r6, r2
 800c2fe:	fb03 f202 	mul.w	r2, r3, r2
 800c302:	f84b 0d04 	str.w	r0, [fp, #-4]!
 800c306:	4653      	mov	r3, sl
 800c308:	1b5d      	subs	r5, r3, r5
 800c30a:	f102 0118 	add.w	r1, r2, #24
 800c30e:	4604      	mov	r4, r0
 800c310:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 800c314:	4658      	mov	r0, fp
 800c316:	18a5      	adds	r5, r4, r2
 800c318:	f7fb f86e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	f8d8 2000 	ldr.w	r2, [r8]
 800c322:	6958      	ldr	r0, [r3, #20]
 800c324:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c32c:	1aff      	subs	r7, r7, r3
 800c32e:	6814      	ldr	r4, [r2, #0]
 800c330:	3701      	adds	r7, #1
 800c332:	bb58      	cbnz	r0, 800c38c <_FillRect+0xcc>
 800c334:	454e      	cmp	r6, r9
 800c336:	dc10      	bgt.n	800c35a <_FillRect+0x9a>
 800c338:	f8d8 3000 	ldr.w	r3, [r8]
 800c33c:	7c1b      	ldrb	r3, [r3, #16]
 800c33e:	07db      	lsls	r3, r3, #31
 800c340:	d411      	bmi.n	800c366 <_FillRect+0xa6>
 800c342:	2f00      	cmp	r7, #0
 800c344:	dd05      	ble.n	800c352 <_FillRect+0x92>
 800c346:	463b      	mov	r3, r7
 800c348:	462a      	mov	r2, r5
 800c34a:	3b01      	subs	r3, #1
 800c34c:	f842 4b04 	str.w	r4, [r2], #4
 800c350:	d1fb      	bne.n	800c34a <_FillRect+0x8a>
 800c352:	3601      	adds	r6, #1
 800c354:	45b1      	cmp	r9, r6
 800c356:	4455      	add	r5, sl
 800c358:	daee      	bge.n	800c338 <_FillRect+0x78>
 800c35a:	a804      	add	r0, sp, #16
 800c35c:	f7fb f84c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c360:	b007      	add	sp, #28
 800c362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	4798      	blx	r3
 800c370:	4629      	mov	r1, r5
 800c372:	463a      	mov	r2, r7
 800c374:	680b      	ldr	r3, [r1, #0]
 800c376:	3a01      	subs	r2, #1
 800c378:	ea83 0300 	eor.w	r3, r3, r0
 800c37c:	f841 3b04 	str.w	r3, [r1], #4
 800c380:	d1f8      	bne.n	800c374 <_FillRect+0xb4>
 800c382:	3601      	adds	r6, #1
 800c384:	45b1      	cmp	r9, r6
 800c386:	4455      	add	r5, sl
 800c388:	dad6      	bge.n	800c338 <_FillRect+0x78>
 800c38a:	e7e6      	b.n	800c35a <_FillRect+0x9a>
 800c38c:	f7fb f822 	bl	80073d4 <GUI_ALLOC_LockH>
 800c390:	ebc6 0309 	rsb	r3, r6, r9
 800c394:	3301      	adds	r3, #1
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	9903      	ldr	r1, [sp, #12]
 800c39a:	9005      	str	r0, [sp, #20]
 800c39c:	463b      	mov	r3, r7
 800c39e:	4632      	mov	r2, r6
 800c3a0:	f000 f894 	bl	800c4cc <GUI_USAGE_AddRect>
 800c3a4:	4658      	mov	r0, fp
 800c3a6:	f7fb f827 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c3aa:	e7c3      	b.n	800c334 <_FillRect+0x74>
 800c3ac:	20000018 	.word	0x20000018

0800c3b0 <_DrawHLine>:
 800c3b0:	b500      	push	{lr}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	9200      	str	r2, [sp, #0]
 800c3b6:	f7ff ff83 	bl	800c2c0 <_FillRect>
 800c3ba:	b003      	add	sp, #12
 800c3bc:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3c0 <_DrawVLine>:
 800c3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c4:	4f35      	ldr	r7, [pc, #212]	; (800c49c <_DrawVLine+0xdc>)
 800c3c6:	6838      	ldr	r0, [r7, #0]
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c3cc:	4689      	mov	r9, r1
 800c3ce:	4615      	mov	r5, r2
 800c3d0:	461e      	mov	r6, r3
 800c3d2:	f7fa ffff 	bl	80073d4 <GUI_ALLOC_LockH>
 800c3d6:	9001      	str	r0, [sp, #4]
 800c3d8:	6940      	ldr	r0, [r0, #20]
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d13b      	bne.n	800c456 <_DrawVLine+0x96>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	9002      	str	r0, [sp, #8]
 800c3e2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c3e4:	f7fa fff6 	bl	80073d4 <GUI_ALLOC_LockH>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	a804      	add	r0, sp, #16
 800c3ec:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800c3f0:	68d3      	ldr	r3, [r2, #12]
 800c3f2:	f840 2d04 	str.w	r2, [r0, #-4]!
 800c3f6:	1b2c      	subs	r4, r5, r4
 800c3f8:	fb03 f304 	mul.w	r3, r3, r4
 800c3fc:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800c400:	3318      	adds	r3, #24
 800c402:	ebc4 0409 	rsb	r4, r4, r9
 800c406:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c40a:	18d4      	adds	r4, r2, r3
 800c40c:	f7fa fff4 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	9901      	ldr	r1, [sp, #4]
 800c414:	7c1a      	ldrb	r2, [r3, #16]
 800c416:	07d2      	lsls	r2, r2, #31
 800c418:	d420      	bmi.n	800c45c <_DrawVLine+0x9c>
 800c41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41c:	9802      	ldr	r0, [sp, #8]
 800c41e:	f8d3 8000 	ldr.w	r8, [r3]
 800c422:	68cf      	ldr	r7, [r1, #12]
 800c424:	b908      	cbnz	r0, 800c42a <_DrawVLine+0x6a>
 800c426:	e030      	b.n	800c48a <_DrawVLine+0xca>
 800c428:	9802      	ldr	r0, [sp, #8]
 800c42a:	6883      	ldr	r3, [r0, #8]
 800c42c:	462a      	mov	r2, r5
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4649      	mov	r1, r9
 800c432:	3501      	adds	r5, #1
 800c434:	4798      	blx	r3
 800c436:	42ae      	cmp	r6, r5
 800c438:	f8c4 8000 	str.w	r8, [r4]
 800c43c:	443c      	add	r4, r7
 800c43e:	daf3      	bge.n	800c428 <_DrawVLine+0x68>
 800c440:	a801      	add	r0, sp, #4
 800c442:	f7fa ffd9 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c446:	9b02      	ldr	r3, [sp, #8]
 800c448:	b113      	cbz	r3, 800c450 <_DrawVLine+0x90>
 800c44a:	a802      	add	r0, sp, #8
 800c44c:	f7fa ffd4 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c450:	b005      	add	sp, #20
 800c452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c456:	f7fa ffbd 	bl	80073d4 <GUI_ALLOC_LockH>
 800c45a:	e7c0      	b.n	800c3de <_DrawVLine+0x1e>
 800c45c:	680b      	ldr	r3, [r1, #0]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	4798      	blx	r3
 800c464:	4607      	mov	r7, r0
 800c466:	9b02      	ldr	r3, [sp, #8]
 800c468:	462a      	mov	r2, r5
 800c46a:	4649      	mov	r1, r9
 800c46c:	3501      	adds	r5, #1
 800c46e:	4618      	mov	r0, r3
 800c470:	b113      	cbz	r3, 800c478 <_DrawVLine+0xb8>
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4798      	blx	r3
 800c478:	9a01      	ldr	r2, [sp, #4]
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	68d2      	ldr	r2, [r2, #12]
 800c47e:	407b      	eors	r3, r7
 800c480:	42b5      	cmp	r5, r6
 800c482:	6023      	str	r3, [r4, #0]
 800c484:	4414      	add	r4, r2
 800c486:	ddee      	ble.n	800c466 <_DrawVLine+0xa6>
 800c488:	e7da      	b.n	800c440 <_DrawVLine+0x80>
 800c48a:	1b73      	subs	r3, r6, r5
 800c48c:	3301      	adds	r3, #1
 800c48e:	3b01      	subs	r3, #1
 800c490:	f8c4 8000 	str.w	r8, [r4]
 800c494:	443c      	add	r4, r7
 800c496:	d1fa      	bne.n	800c48e <_DrawVLine+0xce>
 800c498:	e7d2      	b.n	800c440 <_DrawVLine+0x80>
 800c49a:	bf00      	nop
 800c49c:	20000018 	.word	0x20000018

0800c4a0 <GUI_USAGE_DecUseCnt>:
 800c4a0:	b530      	push	{r4, r5, lr}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	f7fa ff95 	bl	80073d4 <GUI_ALLOC_LockH>
 800c4aa:	ab02      	add	r3, sp, #8
 800c4ac:	8984      	ldrh	r4, [r0, #12]
 800c4ae:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c4b2:	3c01      	subs	r4, #1
 800c4b4:	b224      	sxth	r4, r4
 800c4b6:	8184      	strh	r4, [r0, #12]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fa ff9d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c4be:	b914      	cbnz	r4, 800c4c6 <GUI_USAGE_DecUseCnt+0x26>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f7fb f86b 	bl	800759c <GUI_ALLOC_Free>
 800c4c6:	b003      	add	sp, #12
 800c4c8:	bd30      	pop	{r4, r5, pc}
 800c4ca:	bf00      	nop

0800c4cc <GUI_USAGE_AddRect>:
 800c4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d0:	9c08      	ldr	r4, [sp, #32]
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	4689      	mov	r9, r1
 800c4d6:	4698      	mov	r8, r3
 800c4d8:	68ab      	ldr	r3, [r5, #8]
 800c4da:	4649      	mov	r1, r9
 800c4dc:	685f      	ldr	r7, [r3, #4]
 800c4de:	4628      	mov	r0, r5
 800c4e0:	4643      	mov	r3, r8
 800c4e2:	1c56      	adds	r6, r2, #1
 800c4e4:	47b8      	blx	r7
 800c4e6:	3c01      	subs	r4, #1
 800c4e8:	4632      	mov	r2, r6
 800c4ea:	d1f5      	bne.n	800c4d8 <GUI_USAGE_AddRect+0xc>
 800c4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c4f0 <_WriteToActiveAlpha>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	b091      	sub	sp, #68	; 0x44
 800c4f6:	4688      	mov	r8, r1
 800c4f8:	4614      	mov	r4, r2
 800c4fa:	4699      	mov	r9, r3
 800c4fc:	9008      	str	r0, [sp, #32]
 800c4fe:	f7fa ff69 	bl	80073d4 <GUI_ALLOC_LockH>
 800c502:	4603      	mov	r3, r0
 800c504:	a810      	add	r0, sp, #64	; 0x40
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4d58      	ldr	r5, [pc, #352]	; (800c66c <_WriteToActiveAlpha+0x17c>)
 800c50a:	6912      	ldr	r2, [r2, #16]
 800c50c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c510:	6852      	ldr	r2, [r2, #4]
 800c512:	9207      	str	r2, [sp, #28]
 800c514:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800c518:	9206      	str	r2, [sp, #24]
 800c51a:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 800c51e:	f7fa ff6b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c522:	682a      	ldr	r2, [r5, #0]
 800c524:	4b52      	ldr	r3, [pc, #328]	; (800c670 <_WriteToActiveAlpha+0x180>)
 800c526:	7c52      	ldrb	r2, [r2, #17]
 800c528:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c52c:	68c3      	ldr	r3, [r0, #12]
 800c52e:	2108      	movs	r1, #8
 800c530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c532:	4798      	blx	r3
 800c534:	2817      	cmp	r0, #23
 800c536:	d810      	bhi.n	800c55a <_WriteToActiveAlpha+0x6a>
 800c538:	2803      	cmp	r0, #3
 800c53a:	4606      	mov	r6, r0
 800c53c:	bf08      	it	eq
 800c53e:	2608      	moveq	r6, #8
 800c540:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c544:	9309      	str	r3, [sp, #36]	; 0x24
 800c546:	2000      	movs	r0, #0
 800c548:	f8d9 3000 	ldr.w	r3, [r9]
 800c54c:	930c      	str	r3, [sp, #48]	; 0x30
 800c54e:	f7fb ff79 	bl	8008444 <GUI__AllocAlphaBuffer>
 800c552:	b120      	cbz	r0, 800c55e <_WriteToActiveAlpha+0x6e>
 800c554:	b011      	add	sp, #68	; 0x44
 800c556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55a:	2620      	movs	r6, #32
 800c55c:	e7f0      	b.n	800c540 <_WriteToActiveAlpha+0x50>
 800c55e:	9906      	ldr	r1, [sp, #24]
 800c560:	682a      	ldr	r2, [r5, #0]
 800c562:	460b      	mov	r3, r1
 800c564:	4443      	add	r3, r8
 800c566:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	1b5d      	subs	r5, r3, r5
 800c56e:	2d00      	cmp	r5, #0
 800c570:	bfc4      	itt	gt
 800c572:	460b      	movgt	r3, r1
 800c574:	1b5d      	subgt	r5, r3, r5
 800c576:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800c57a:	bfd8      	it	le
 800c57c:	460d      	movle	r5, r1
 800c57e:	4543      	cmp	r3, r8
 800c580:	bfc3      	ittte	gt
 800c582:	ebc8 0103 	rsbgt	r1, r8, r3
 800c586:	1a6d      	subgt	r5, r5, r1
 800c588:	4698      	movgt	r8, r3
 800c58a:	2100      	movle	r1, #0
 800c58c:	2d00      	cmp	r5, #0
 800c58e:	dde1      	ble.n	800c554 <_WriteToActiveAlpha+0x64>
 800c590:	eb0a 0304 	add.w	r3, sl, r4
 800c594:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 800c598:	3b01      	subs	r3, #1
 800c59a:	1a1b      	subs	r3, r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfc8      	it	gt
 800c5a0:	ebc3 0a0a 	rsbgt	sl, r3, sl
 800c5a4:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	bfc3      	ittte	gt
 800c5ac:	1b1f      	subgt	r7, r3, r4
 800c5ae:	ebc7 0a0a 	rsbgt	sl, r7, sl
 800c5b2:	461c      	movgt	r4, r3
 800c5b4:	2700      	movle	r7, #0
 800c5b6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ba:	ddcb      	ble.n	800c554 <_WriteToActiveAlpha+0x64>
 800c5bc:	9b06      	ldr	r3, [sp, #24]
 800c5be:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800c5c2:	fb07 1703 	mla	r7, r7, r3, r1
 800c5c6:	eb04 030a 	add.w	r3, r4, sl
 800c5ca:	00bf      	lsls	r7, r7, #2
 800c5cc:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ce:	46b2      	mov	sl, r6
 800c5d0:	e019      	b.n	800c606 <_WriteToActiveAlpha+0x116>
 800c5d2:	2304      	movs	r3, #4
 800c5d4:	9a06      	ldr	r2, [sp, #24]
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4630      	mov	r0, r6
 800c5da:	47d8      	blx	fp
 800c5dc:	2301      	movs	r3, #1
 800c5de:	2200      	movs	r2, #0
 800c5e0:	9205      	str	r2, [sp, #20]
 800c5e2:	9604      	str	r6, [sp, #16]
 800c5e4:	9203      	str	r2, [sp, #12]
 800c5e6:	9301      	str	r3, [sp, #4]
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	f8cd a008 	str.w	sl, [sp, #8]
 800c5f0:	462a      	mov	r2, r5
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	441c      	add	r4, r3
 800c5f6:	9e06      	ldr	r6, [sp, #24]
 800c5f8:	f7fc fad2 	bl	8008ba0 <LCD_DrawBitmap>
 800c5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 800c604:	d0a6      	beq.n	800c554 <_WriteToActiveAlpha+0x64>
 800c606:	9808      	ldr	r0, [sp, #32]
 800c608:	f003 fee2 	bl	80103d0 <GUI_MEMDEV_GetDataPtr>
 800c60c:	ab0f      	add	r3, sp, #60	; 0x3c
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	9b07      	ldr	r3, [sp, #28]
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	19c2      	adds	r2, r0, r7
 800c616:	462b      	mov	r3, r5
 800c618:	4621      	mov	r1, r4
 800c61a:	4640      	mov	r0, r8
 800c61c:	f7fb fdd2 	bl	80081c4 <GUI__DoAlphaBlending>
 800c620:	4606      	mov	r6, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	d096      	beq.n	800c554 <_WriteToActiveAlpha+0x64>
 800c626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c628:	461a      	mov	r2, r3
 800c62a:	4b12      	ldr	r3, [pc, #72]	; (800c674 <_WriteToActiveAlpha+0x184>)
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d0d5      	beq.n	800c5dc <_WriteToActiveAlpha+0xec>
 800c630:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c634:	4652      	mov	r2, sl
 800c636:	464b      	mov	r3, r9
 800c638:	4629      	mov	r1, r5
 800c63a:	f003 fa7f 	bl	800fb3c <GUI__CompactPixelIndicesEx>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d1cc      	bne.n	800c5dc <_WriteToActiveAlpha+0xec>
 800c642:	f8d9 b010 	ldr.w	fp, [r9, #16]
 800c646:	f1bb 0f00 	cmp.w	fp, #0
 800c64a:	d1c2      	bne.n	800c5d2 <_WriteToActiveAlpha+0xe2>
 800c64c:	46a1      	mov	r9, r4
 800c64e:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c652:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c654:	950d      	str	r5, [sp, #52]	; 0x34
 800c656:	4635      	mov	r5, r6
 800c658:	6828      	ldr	r0, [r5, #0]
 800c65a:	47a0      	blx	r4
 800c65c:	f1bb 0b01 	subs.w	fp, fp, #1
 800c660:	f845 0b04 	str.w	r0, [r5], #4
 800c664:	d1f8      	bne.n	800c658 <_WriteToActiveAlpha+0x168>
 800c666:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c668:	464c      	mov	r4, r9
 800c66a:	e7b7      	b.n	800c5dc <_WriteToActiveAlpha+0xec>
 800c66c:	20000018 	.word	0x20000018
 800c670:	2001bd6c 	.word	0x2001bd6c
 800c674:	08006819 	.word	0x08006819

0800c678 <GUI_MEMDEV__WriteToActiveAlpha>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	4c59      	ldr	r4, [pc, #356]	; (800c7e4 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 800c67e:	4b5a      	ldr	r3, [pc, #360]	; (800c7e8 <GUI_MEMDEV__WriteToActiveAlpha+0x170>)
 800c680:	f8d4 c000 	ldr.w	ip, [r4]
 800c684:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800c7f0 <GUI_MEMDEV__WriteToActiveAlpha+0x178>
 800c688:	f89c 5011 	ldrb.w	r5, [ip, #17]
 800c68c:	f8d9 6000 	ldr.w	r6, [r9]
 800c690:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 800c694:	b08b      	sub	sp, #44	; 0x2c
 800c696:	6923      	ldr	r3, [r4, #16]
 800c698:	2e00      	cmp	r6, #0
 800c69a:	f000 8088 	beq.w	800c7ae <GUI_MEMDEV__WriteToActiveAlpha+0x136>
 800c69e:	4617      	mov	r7, r2
 800c6a0:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	460d      	mov	r5, r1
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	f000 8085 	beq.w	800c7b8 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800c6ae:	68e2      	ldr	r2, [r4, #12]
 800c6b0:	6812      	ldr	r2, [r2, #0]
 800c6b2:	2a07      	cmp	r2, #7
 800c6b4:	d078      	beq.n	800c7a8 <GUI_MEMDEV__WriteToActiveAlpha+0x130>
 800c6b6:	4a4d      	ldr	r2, [pc, #308]	; (800c7ec <GUI_MEMDEV__WriteToActiveAlpha+0x174>)
 800c6b8:	1a9a      	subs	r2, r3, r2
 800c6ba:	fab2 f282 	clz	r2, r2
 800c6be:	0952      	lsrs	r2, r2, #5
 800c6c0:	2a00      	cmp	r2, #0
 800c6c2:	d071      	beq.n	800c7a8 <GUI_MEMDEV__WriteToActiveAlpha+0x130>
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	f7fa fe85 	bl	80073d4 <GUI_ALLOC_LockH>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	a80a      	add	r0, sp, #40	; 0x28
 800c6ce:	f9b3 b008 	ldrsh.w	fp, [r3, #8]
 800c6d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c6d6:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	9305      	str	r3, [sp, #20]
 800c6de:	f7fa fe8b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c6e2:	4b40      	ldr	r3, [pc, #256]	; (800c7e4 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	eb0b 0405 	add.w	r4, fp, r5
 800c6ea:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800c6ee:	3c01      	subs	r4, #1
 800c6f0:	1ae4      	subs	r4, r4, r3
 800c6f2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800c6f6:	2c00      	cmp	r4, #0
 800c6f8:	bfcc      	ite	gt
 800c6fa:	ebc4 040b 	rsbgt	r4, r4, fp
 800c6fe:	465c      	movle	r4, fp
 800c700:	429d      	cmp	r5, r3
 800c702:	bfbd      	ittte	lt
 800c704:	1b59      	sublt	r1, r3, r5
 800c706:	1a64      	sublt	r4, r4, r1
 800c708:	461d      	movlt	r5, r3
 800c70a:	2100      	movge	r1, #0
 800c70c:	2c00      	cmp	r4, #0
 800c70e:	dd50      	ble.n	800c7b2 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 800c710:	eb0a 0307 	add.w	r3, sl, r7
 800c714:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 800c718:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800c71c:	9107      	str	r1, [sp, #28]
 800c71e:	3b01      	subs	r3, #1
 800c720:	ebce 0303 	rsb	r3, lr, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	bfc8      	it	gt
 800c728:	ebc3 0a0a 	rsbgt	sl, r3, sl
 800c72c:	42b8      	cmp	r0, r7
 800c72e:	bfc5      	ittet	gt
 800c730:	1bc3      	subgt	r3, r0, r7
 800c732:	ebc3 0a0a 	rsbgt	sl, r3, sl
 800c736:	2300      	movle	r3, #0
 800c738:	4607      	movgt	r7, r0
 800c73a:	f1ba 0f00 	cmp.w	sl, #0
 800c73e:	9306      	str	r3, [sp, #24]
 800c740:	dd37      	ble.n	800c7b2 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 800c742:	4640      	mov	r0, r8
 800c744:	f003 fe44 	bl	80103d0 <GUI_MEMDEV_GetDataPtr>
 800c748:	4b26      	ldr	r3, [pc, #152]	; (800c7e4 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 800c74a:	9907      	ldr	r1, [sp, #28]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	9b06      	ldr	r3, [sp, #24]
 800c750:	f8d2 c060 	ldr.w	ip, [r2, #96]	; 0x60
 800c754:	fb03 110b 	mla	r1, r3, fp, r1
 800c758:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800c75c:	f1bc 0f00 	cmp.w	ip, #0
 800c760:	d030      	beq.n	800c7c4 <GUI_MEMDEV__WriteToActiveAlpha+0x14c>
 800c762:	4660      	mov	r0, ip
 800c764:	f7fa fe36 	bl	80073d4 <GUI_ALLOC_LockH>
 800c768:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c76c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c770:	aa0a      	add	r2, sp, #40	; 0x28
 800c772:	1aed      	subs	r5, r5, r3
 800c774:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c778:	f842 0d04 	str.w	r0, [r2, #-4]!
 800c77c:	00ad      	lsls	r5, r5, #2
 800c77e:	3518      	adds	r5, #24
 800c780:	1aff      	subs	r7, r7, r3
 800c782:	fb08 5707 	mla	r7, r8, r7, r5
 800c786:	4407      	add	r7, r0
 800c788:	4610      	mov	r0, r2
 800c78a:	f7fa fe35 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c78e:	b187      	cbz	r7, 800c7b2 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 800c790:	9b05      	ldr	r3, [sp, #20]
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	f8cd 8000 	str.w	r8, [sp]
 800c798:	f8d9 5000 	ldr.w	r5, [r9]
 800c79c:	4653      	mov	r3, sl
 800c79e:	4622      	mov	r2, r4
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	47a8      	blx	r5
 800c7a6:	e004      	b.n	800c7b2 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 800c7a8:	463a      	mov	r2, r7
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	f7ff fe9f 	bl	800c4f0 <_WriteToActiveAlpha>
 800c7b2:	b00b      	add	sp, #44	; 0x2c
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	68e2      	ldr	r2, [r4, #12]
 800c7ba:	6812      	ldr	r2, [r2, #0]
 800c7bc:	fab2 f282 	clz	r2, r2
 800c7c0:	0952      	lsrs	r2, r2, #5
 800c7c2:	e77d      	b.n	800c6c0 <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 800c7c4:	7c50      	ldrb	r0, [r2, #17]
 800c7c6:	f8df e02c 	ldr.w	lr, [pc, #44]	; 800c7f4 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 800c7ca:	f8cd a004 	str.w	sl, [sp, #4]
 800c7ce:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800c7d2:	9202      	str	r2, [sp, #8]
 800c7d4:	9400      	str	r4, [sp, #0]
 800c7d6:	4633      	mov	r3, r6
 800c7d8:	463a      	mov	r2, r7
 800c7da:	4629      	mov	r1, r5
 800c7dc:	f8de 4000 	ldr.w	r4, [lr]
 800c7e0:	47a0      	blx	r4
 800c7e2:	e7e6      	b.n	800c7b2 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 800c7e4:	20000018 	.word	0x20000018
 800c7e8:	2001bd6c 	.word	0x2001bd6c
 800c7ec:	080113cc 	.word	0x080113cc
 800c7f0:	2001bd80 	.word	0x2001bd80
 800c7f4:	2001bd7c 	.word	0x2001bd7c

0800c7f8 <_OnExit>:
 800c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fc:	4d1a      	ldr	r5, [pc, #104]	; (800c868 <_OnExit+0x70>)
 800c7fe:	4b1b      	ldr	r3, [pc, #108]	; (800c86c <_OnExit+0x74>)
 800c800:	f8df e094 	ldr.w	lr, [pc, #148]	; 800c898 <_OnExit+0xa0>
 800c804:	f8df c094 	ldr.w	ip, [pc, #148]	; 800c89c <_OnExit+0xa4>
 800c808:	4919      	ldr	r1, [pc, #100]	; (800c870 <_OnExit+0x78>)
 800c80a:	4a1a      	ldr	r2, [pc, #104]	; (800c874 <_OnExit+0x7c>)
 800c80c:	4f1a      	ldr	r7, [pc, #104]	; (800c878 <_OnExit+0x80>)
 800c80e:	4e1b      	ldr	r6, [pc, #108]	; (800c87c <_OnExit+0x84>)
 800c810:	2400      	movs	r4, #0
 800c812:	602c      	str	r4, [r5, #0]
 800c814:	4d1a      	ldr	r5, [pc, #104]	; (800c880 <_OnExit+0x88>)
 800c816:	f8cc 4000 	str.w	r4, [ip]
 800c81a:	f8ce 4000 	str.w	r4, [lr]
 800c81e:	6034      	str	r4, [r6, #0]
 800c820:	600c      	str	r4, [r1, #0]
 800c822:	604c      	str	r4, [r1, #4]
 800c824:	6014      	str	r4, [r2, #0]
 800c826:	6054      	str	r4, [r2, #4]
 800c828:	4621      	mov	r1, r4
 800c82a:	f103 000c 	add.w	r0, r3, #12
 800c82e:	603c      	str	r4, [r7, #0]
 800c830:	682e      	ldr	r6, [r5, #0]
 800c832:	701c      	strb	r4, [r3, #0]
 800c834:	2218      	movs	r2, #24
 800c836:	605c      	str	r4, [r3, #4]
 800c838:	609c      	str	r4, [r3, #8]
 800c83a:	47b0      	blx	r6
 800c83c:	4b11      	ldr	r3, [pc, #68]	; (800c884 <_OnExit+0x8c>)
 800c83e:	4a12      	ldr	r2, [pc, #72]	; (800c888 <_OnExit+0x90>)
 800c840:	601c      	str	r4, [r3, #0]
 800c842:	6014      	str	r4, [r2, #0]
 800c844:	605c      	str	r4, [r3, #4]
 800c846:	4621      	mov	r1, r4
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	4810      	ldr	r0, [pc, #64]	; (800c88c <_OnExit+0x94>)
 800c84c:	2210      	movs	r2, #16
 800c84e:	4798      	blx	r3
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	480f      	ldr	r0, [pc, #60]	; (800c890 <_OnExit+0x98>)
 800c854:	4621      	mov	r1, r4
 800c856:	2210      	movs	r2, #16
 800c858:	4798      	blx	r3
 800c85a:	682b      	ldr	r3, [r5, #0]
 800c85c:	480d      	ldr	r0, [pc, #52]	; (800c894 <_OnExit+0x9c>)
 800c85e:	4621      	mov	r1, r4
 800c860:	2210      	movs	r2, #16
 800c862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c866:	4718      	bx	r3
 800c868:	2001bd8c 	.word	0x2001bd8c
 800c86c:	200001ec 	.word	0x200001ec
 800c870:	2001bda0 	.word	0x2001bda0
 800c874:	2001bdd4 	.word	0x2001bdd4
 800c878:	2001bdc0 	.word	0x2001bdc0
 800c87c:	2001bdd0 	.word	0x2001bdd0
 800c880:	20000034 	.word	0x20000034
 800c884:	2001bd90 	.word	0x2001bd90
 800c888:	2001bd9c 	.word	0x2001bd9c
 800c88c:	2001be04 	.word	0x2001be04
 800c890:	2001bdf4 	.word	0x2001bdf4
 800c894:	2001bde4 	.word	0x2001bde4
 800c898:	2001bde0 	.word	0x2001bde0
 800c89c:	2001bdcc 	.word	0x2001bdcc

0800c8a0 <_Findy1>:
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d064      	beq.n	800c96e <_Findy1+0xce>
 800c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a6:	460e      	mov	r6, r1
 800c8a8:	b085      	sub	sp, #20
 800c8aa:	4617      	mov	r7, r2
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f7fa fd90 	bl	80073d4 <GUI_ALLOC_LockH>
 800c8b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c8b6:	9001      	str	r0, [sp, #4]
 800c8b8:	07a2      	lsls	r2, r4, #30
 800c8ba:	d524      	bpl.n	800c906 <_Findy1+0x66>
 800c8bc:	2f00      	cmp	r7, #0
 800c8be:	d040      	beq.n	800c942 <_Findy1+0xa2>
 800c8c0:	ad02      	add	r5, sp, #8
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	463a      	mov	r2, r7
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f7fb ff08 	bl	80086dc <GUI__IntersectRects>
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7fa ff84 	bl	80077dc <GUI_RectsIntersect>
 800c8d4:	b368      	cbz	r0, 800c932 <_Findy1+0x92>
 800c8d6:	07e3      	lsls	r3, r4, #31
 800c8d8:	9801      	ldr	r0, [sp, #4]
 800c8da:	d41c      	bmi.n	800c916 <_Findy1+0x76>
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	d043      	beq.n	800c968 <_Findy1+0xc8>
 800c8e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c8e4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	bfb8      	it	lt
 800c8ec:	4613      	movlt	r3, r2
 800c8ee:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	dd2a      	ble.n	800c94c <_Findy1+0xac>
 800c8f6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800c8fa:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	db01      	blt.n	800c906 <_Findy1+0x66>
 800c902:	3b01      	subs	r3, #1
 800c904:	80f3      	strh	r3, [r6, #6]
 800c906:	6a04      	ldr	r4, [r0, #32]
 800c908:	a801      	add	r0, sp, #4
 800c90a:	f7fa fd75 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c90e:	2c00      	cmp	r4, #0
 800c910:	d1cd      	bne.n	800c8ae <_Findy1+0xe>
 800c912:	b005      	add	sp, #20
 800c914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c916:	69c4      	ldr	r4, [r0, #28]
 800c918:	2c00      	cmp	r4, #0
 800c91a:	d0f4      	beq.n	800c906 <_Findy1+0x66>
 800c91c:	4620      	mov	r0, r4
 800c91e:	462a      	mov	r2, r5
 800c920:	4631      	mov	r1, r6
 800c922:	f7ff ffbd 	bl	800c8a0 <_Findy1>
 800c926:	4620      	mov	r0, r4
 800c928:	f7fa fd4a 	bl	80073c0 <GUI_ALLOC_h2p>
 800c92c:	6a04      	ldr	r4, [r0, #32]
 800c92e:	2c00      	cmp	r4, #0
 800c930:	d1f4      	bne.n	800c91c <_Findy1+0x7c>
 800c932:	9801      	ldr	r0, [sp, #4]
 800c934:	6a04      	ldr	r4, [r0, #32]
 800c936:	a801      	add	r0, sp, #4
 800c938:	f7fa fd5e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c93c:	2c00      	cmp	r4, #0
 800c93e:	d1b6      	bne.n	800c8ae <_Findy1+0xe>
 800c940:	e7e7      	b.n	800c912 <_Findy1+0x72>
 800c942:	c803      	ldmia	r0, {r0, r1}
 800c944:	ad02      	add	r5, sp, #8
 800c946:	e885 0003 	stmia.w	r5, {r0, r1}
 800c94a:	e7bf      	b.n	800c8cc <_Findy1+0x2c>
 800c94c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c950:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800c954:	429a      	cmp	r2, r3
 800c956:	ddd6      	ble.n	800c906 <_Findy1+0x66>
 800c958:	6a04      	ldr	r4, [r0, #32]
 800c95a:	80f3      	strh	r3, [r6, #6]
 800c95c:	a801      	add	r0, sp, #4
 800c95e:	f7fa fd4b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c962:	2c00      	cmp	r4, #0
 800c964:	d1a3      	bne.n	800c8ae <_Findy1+0xe>
 800c966:	e7d4      	b.n	800c912 <_Findy1+0x72>
 800c968:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800c96c:	e7bf      	b.n	800c8ee <_Findy1+0x4e>
 800c96e:	4770      	bx	lr

0800c970 <_Findx0>:
 800c970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c974:	4604      	mov	r4, r0
 800c976:	b084      	sub	sp, #16
 800c978:	2800      	cmp	r0, #0
 800c97a:	d04a      	beq.n	800ca12 <_Findx0+0xa2>
 800c97c:	460f      	mov	r7, r1
 800c97e:	4690      	mov	r8, r2
 800c980:	2600      	movs	r6, #0
 800c982:	e00c      	b.n	800c99e <_Findx0+0x2e>
 800c984:	07e3      	lsls	r3, r4, #31
 800c986:	d430      	bmi.n	800c9ea <_Findx0+0x7a>
 800c988:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c98c:	9801      	ldr	r0, [sp, #4]
 800c98e:	3301      	adds	r3, #1
 800c990:	803b      	strh	r3, [r7, #0]
 800c992:	2601      	movs	r6, #1
 800c994:	6a04      	ldr	r4, [r0, #32]
 800c996:	a801      	add	r0, sp, #4
 800c998:	f7fa fd2e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c99c:	b1e4      	cbz	r4, 800c9d8 <_Findx0+0x68>
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7fa fd18 	bl	80073d4 <GUI_ALLOC_LockH>
 800c9a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c9a6:	9001      	str	r0, [sp, #4]
 800c9a8:	07a2      	lsls	r2, r4, #30
 800c9aa:	d5f3      	bpl.n	800c994 <_Findx0+0x24>
 800c9ac:	f1b8 0f00 	cmp.w	r8, #0
 800c9b0:	d016      	beq.n	800c9e0 <_Findx0+0x70>
 800c9b2:	ad02      	add	r5, sp, #8
 800c9b4:	4601      	mov	r1, r0
 800c9b6:	4642      	mov	r2, r8
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f7fb fe8f 	bl	80086dc <GUI__IntersectRects>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7fa ff0b 	bl	80077dc <GUI_RectsIntersect>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d1dc      	bne.n	800c984 <_Findx0+0x14>
 800c9ca:	9801      	ldr	r0, [sp, #4]
 800c9cc:	6a04      	ldr	r4, [r0, #32]
 800c9ce:	a801      	add	r0, sp, #4
 800c9d0:	f7fa fd12 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800c9d4:	2c00      	cmp	r4, #0
 800c9d6:	d1e2      	bne.n	800c99e <_Findx0+0x2e>
 800c9d8:	4630      	mov	r0, r6
 800c9da:	b004      	add	sp, #16
 800c9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e0:	c803      	ldmia	r0, {r0, r1}
 800c9e2:	ad02      	add	r5, sp, #8
 800c9e4:	e885 0003 	stmia.w	r5, {r0, r1}
 800c9e8:	e7e9      	b.n	800c9be <_Findx0+0x4e>
 800c9ea:	9801      	ldr	r0, [sp, #4]
 800c9ec:	69c4      	ldr	r4, [r0, #28]
 800c9ee:	2c00      	cmp	r4, #0
 800c9f0:	d0d0      	beq.n	800c994 <_Findx0+0x24>
 800c9f2:	462a      	mov	r2, r5
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f7ff ffba 	bl	800c970 <_Findx0>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	4620      	mov	r0, r4
 800ca00:	bf18      	it	ne
 800ca02:	2601      	movne	r6, #1
 800ca04:	f7fa fcdc 	bl	80073c0 <GUI_ALLOC_h2p>
 800ca08:	6a04      	ldr	r4, [r0, #32]
 800ca0a:	2c00      	cmp	r4, #0
 800ca0c:	d1f1      	bne.n	800c9f2 <_Findx0+0x82>
 800ca0e:	9801      	ldr	r0, [sp, #4]
 800ca10:	e7dc      	b.n	800c9cc <_Findx0+0x5c>
 800ca12:	4606      	mov	r6, r0
 800ca14:	e7e0      	b.n	800c9d8 <_Findx0+0x68>
 800ca16:	bf00      	nop

0800ca18 <_Findx1>:
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d044      	beq.n	800caa6 <_Findx1+0x8e>
 800ca1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1e:	460e      	mov	r6, r1
 800ca20:	b085      	sub	sp, #20
 800ca22:	4617      	mov	r7, r2
 800ca24:	4604      	mov	r4, r0
 800ca26:	e00b      	b.n	800ca40 <_Findx1+0x28>
 800ca28:	07e3      	lsls	r3, r4, #31
 800ca2a:	d42b      	bmi.n	800ca84 <_Findx1+0x6c>
 800ca2c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ca30:	9801      	ldr	r0, [sp, #4]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	80b3      	strh	r3, [r6, #4]
 800ca36:	6a04      	ldr	r4, [r0, #32]
 800ca38:	a801      	add	r0, sp, #4
 800ca3a:	f7fa fcdd 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ca3e:	b1d4      	cbz	r4, 800ca76 <_Findx1+0x5e>
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7fa fcc7 	bl	80073d4 <GUI_ALLOC_LockH>
 800ca46:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ca48:	9001      	str	r0, [sp, #4]
 800ca4a:	07a2      	lsls	r2, r4, #30
 800ca4c:	d5f3      	bpl.n	800ca36 <_Findx1+0x1e>
 800ca4e:	b1a7      	cbz	r7, 800ca7a <_Findx1+0x62>
 800ca50:	ad02      	add	r5, sp, #8
 800ca52:	4601      	mov	r1, r0
 800ca54:	463a      	mov	r2, r7
 800ca56:	4628      	mov	r0, r5
 800ca58:	f7fb fe40 	bl	80086dc <GUI__IntersectRects>
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7fa febc 	bl	80077dc <GUI_RectsIntersect>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d1df      	bne.n	800ca28 <_Findx1+0x10>
 800ca68:	9801      	ldr	r0, [sp, #4]
 800ca6a:	6a04      	ldr	r4, [r0, #32]
 800ca6c:	a801      	add	r0, sp, #4
 800ca6e:	f7fa fcc3 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ca72:	2c00      	cmp	r4, #0
 800ca74:	d1e4      	bne.n	800ca40 <_Findx1+0x28>
 800ca76:	b005      	add	sp, #20
 800ca78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca7a:	c803      	ldmia	r0, {r0, r1}
 800ca7c:	ad02      	add	r5, sp, #8
 800ca7e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca82:	e7eb      	b.n	800ca5c <_Findx1+0x44>
 800ca84:	9801      	ldr	r0, [sp, #4]
 800ca86:	69c4      	ldr	r4, [r0, #28]
 800ca88:	2c00      	cmp	r4, #0
 800ca8a:	d0d4      	beq.n	800ca36 <_Findx1+0x1e>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	462a      	mov	r2, r5
 800ca90:	4631      	mov	r1, r6
 800ca92:	f7ff ffc1 	bl	800ca18 <_Findx1>
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7fa fc92 	bl	80073c0 <GUI_ALLOC_h2p>
 800ca9c:	6a04      	ldr	r4, [r0, #32]
 800ca9e:	2c00      	cmp	r4, #0
 800caa0:	d1f4      	bne.n	800ca8c <_Findx1+0x74>
 800caa2:	9801      	ldr	r0, [sp, #4]
 800caa4:	e7e1      	b.n	800ca6a <_Findx1+0x52>
 800caa6:	4770      	bx	lr

0800caa8 <_Paint1Trans>:
 800caa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caac:	4d29      	ldr	r5, [pc, #164]	; (800cb54 <_Paint1Trans+0xac>)
 800caae:	682b      	ldr	r3, [r5, #0]
 800cab0:	b083      	sub	sp, #12
 800cab2:	4606      	mov	r6, r0
 800cab4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cab6:	f7fa fc8d 	bl	80073d4 <GUI_ALLOC_LockH>
 800caba:	9000      	str	r0, [sp, #0]
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7fa fc89 	bl	80073d4 <GUI_ALLOC_LockH>
 800cac2:	4601      	mov	r1, r0
 800cac4:	9800      	ldr	r0, [sp, #0]
 800cac6:	9101      	str	r1, [sp, #4]
 800cac8:	3008      	adds	r0, #8
 800caca:	f7fa fe87 	bl	80077dc <GUI_RectsIntersect>
 800cace:	b950      	cbnz	r0, 800cae6 <_Paint1Trans+0x3e>
 800cad0:	4604      	mov	r4, r0
 800cad2:	4668      	mov	r0, sp
 800cad4:	f7fa fc90 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cad8:	a801      	add	r0, sp, #4
 800cada:	f7fa fc8d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cade:	4620      	mov	r0, r4
 800cae0:	b003      	add	sp, #12
 800cae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cae6:	ac02      	add	r4, sp, #8
 800cae8:	9901      	ldr	r1, [sp, #4]
 800caea:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 800caee:	682b      	ldr	r3, [r5, #0]
 800caf0:	4f19      	ldr	r7, [pc, #100]	; (800cb58 <_Paint1Trans+0xb0>)
 800caf2:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 800caf6:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 800cafa:	3208      	adds	r2, #8
 800cafc:	f101 0008 	add.w	r0, r1, #8
 800cb00:	f7fb fdec 	bl	80086dc <GUI__IntersectRects>
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7fa fc77 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cb0a:	a802      	add	r0, sp, #8
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800cb12:	603e      	str	r6, [r7, #0]
 800cb14:	f9b2 1000 	ldrsh.w	r1, [r2]
 800cb18:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cb1c:	651a      	str	r2, [r3, #80]	; 0x50
 800cb1e:	64d9      	str	r1, [r3, #76]	; 0x4c
 800cb20:	f7fa fc6a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cb24:	4630      	mov	r0, r6
 800cb26:	f7fa fc4b 	bl	80073c0 <GUI_ALLOC_h2p>
 800cb2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cb2c:	4a0b      	ldr	r2, [pc, #44]	; (800cb5c <_Paint1Trans+0xb4>)
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <_Paint1Trans+0xb8>)
 800cb30:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800cb34:	bf08      	it	eq
 800cb36:	4613      	moveq	r3, r2
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4798      	blx	r3
 800cb3c:	2401      	movs	r4, #1
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	2200      	movs	r2, #0
 800cb42:	4620      	mov	r0, r4
 800cb44:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 800cb48:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 800cb4c:	603a      	str	r2, [r7, #0]
 800cb4e:	b003      	add	sp, #12
 800cb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb54:	20000018 	.word	0x20000018
 800cb58:	2001bd8c 	.word	0x2001bd8c
 800cb5c:	0800e41d 	.word	0x0800e41d
 800cb60:	080104c9 	.word	0x080104c9

0800cb64 <_PaintTransChildren>:
 800cb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	f7fa fc32 	bl	80073d4 <GUI_ALLOC_LockH>
 800cb70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb72:	9001      	str	r0, [sp, #4]
 800cb74:	079b      	lsls	r3, r3, #30
 800cb76:	d524      	bpl.n	800cbc2 <_PaintTransChildren+0x5e>
 800cb78:	69c6      	ldr	r6, [r0, #28]
 800cb7a:	b316      	cbz	r6, 800cbc2 <_PaintTransChildren+0x5e>
 800cb7c:	ac01      	add	r4, sp, #4
 800cb7e:	e004      	b.n	800cb8a <_PaintTransChildren+0x26>
 800cb80:	6a1e      	ldr	r6, [r3, #32]
 800cb82:	4668      	mov	r0, sp
 800cb84:	f7fa fc38 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cb88:	b1ae      	cbz	r6, 800cbb6 <_PaintTransChildren+0x52>
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f7fa fc22 	bl	80073d4 <GUI_ALLOC_LockH>
 800cb90:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cb92:	9000      	str	r0, [sp, #0]
 800cb94:	f002 0203 	and.w	r2, r2, #3
 800cb98:	2a03      	cmp	r2, #3
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	d1f0      	bne.n	800cb80 <_PaintTransChildren+0x1c>
 800cb9e:	9901      	ldr	r1, [sp, #4]
 800cba0:	3108      	adds	r1, #8
 800cba2:	f7fa fe1b 	bl	80077dc <GUI_RectsIntersect>
 800cba6:	b998      	cbnz	r0, 800cbd0 <_PaintTransChildren+0x6c>
 800cba8:	9b00      	ldr	r3, [sp, #0]
 800cbaa:	6a1e      	ldr	r6, [r3, #32]
 800cbac:	4668      	mov	r0, sp
 800cbae:	f7fa fc23 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cbb2:	2e00      	cmp	r6, #0
 800cbb4:	d1e9      	bne.n	800cb8a <_PaintTransChildren+0x26>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7fa fc1e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cbbc:	b002      	add	sp, #8
 800cbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc2:	ac01      	add	r4, sp, #4
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f7fa fc17 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cbca:	b002      	add	sp, #8
 800cbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd0:	9b01      	ldr	r3, [sp, #4]
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 800cbd8:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800cbdc:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 800cbe0:	f9b3 a00e 	ldrsh.w	sl, [r3, #14]
 800cbe4:	f7fa fc08 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cbe8:	4668      	mov	r0, sp
 800cbea:	f7fa fc05 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f7ff ff5a 	bl	800caa8 <_Paint1Trans>
 800cbf4:	b988      	cbnz	r0, 800cc1a <_PaintTransChildren+0xb6>
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f7fa fbec 	bl	80073d4 <GUI_ALLOC_LockH>
 800cbfc:	9001      	str	r0, [sp, #4]
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f7fa fbe8 	bl	80073d4 <GUI_ALLOC_LockH>
 800cc04:	9a01      	ldr	r2, [sp, #4]
 800cc06:	9000      	str	r0, [sp, #0]
 800cc08:	4603      	mov	r3, r0
 800cc0a:	f8a2 9008 	strh.w	r9, [r2, #8]
 800cc0e:	f8a2 800a 	strh.w	r8, [r2, #10]
 800cc12:	8197      	strh	r7, [r2, #12]
 800cc14:	f8a2 a00e 	strh.w	sl, [r2, #14]
 800cc18:	e7b2      	b.n	800cb80 <_PaintTransChildren+0x1c>
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7fa fbd0 	bl	80073c0 <GUI_ALLOC_h2p>
 800cc20:	9000      	str	r0, [sp, #0]
 800cc22:	4630      	mov	r0, r6
 800cc24:	f7ff ff9e 	bl	800cb64 <_PaintTransChildren>
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7fa fbc9 	bl	80073c0 <GUI_ALLOC_h2p>
 800cc2e:	9000      	str	r0, [sp, #0]
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7fa fbc5 	bl	80073c0 <GUI_ALLOC_h2p>
 800cc36:	9001      	str	r0, [sp, #4]
 800cc38:	e7dd      	b.n	800cbf6 <_PaintTransChildren+0x92>
 800cc3a:	bf00      	nop

0800cc3c <_Findx0.constprop.10>:
 800cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3e:	4604      	mov	r4, r0
 800cc40:	b085      	sub	sp, #20
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d03e      	beq.n	800ccc4 <_Findx0.constprop.10+0x88>
 800cc46:	460f      	mov	r7, r1
 800cc48:	2600      	movs	r6, #0
 800cc4a:	ad02      	add	r5, sp, #8
 800cc4c:	e00c      	b.n	800cc68 <_Findx0.constprop.10+0x2c>
 800cc4e:	07e3      	lsls	r3, r4, #31
 800cc50:	d424      	bmi.n	800cc9c <_Findx0.constprop.10+0x60>
 800cc52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cc56:	9801      	ldr	r0, [sp, #4]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	803b      	strh	r3, [r7, #0]
 800cc5c:	2601      	movs	r6, #1
 800cc5e:	6a04      	ldr	r4, [r0, #32]
 800cc60:	a801      	add	r0, sp, #4
 800cc62:	f7fa fbc9 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cc66:	b1b4      	cbz	r4, 800cc96 <_Findx0.constprop.10+0x5a>
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f7fa fbb3 	bl	80073d4 <GUI_ALLOC_LockH>
 800cc6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cc70:	9001      	str	r0, [sp, #4]
 800cc72:	07a2      	lsls	r2, r4, #30
 800cc74:	d5f3      	bpl.n	800cc5e <_Findx0.constprop.10+0x22>
 800cc76:	c803      	ldmia	r0, {r0, r1}
 800cc78:	e885 0003 	stmia.w	r5, {r0, r1}
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4638      	mov	r0, r7
 800cc80:	f7fa fdac 	bl	80077dc <GUI_RectsIntersect>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d1e2      	bne.n	800cc4e <_Findx0.constprop.10+0x12>
 800cc88:	9801      	ldr	r0, [sp, #4]
 800cc8a:	6a04      	ldr	r4, [r0, #32]
 800cc8c:	a801      	add	r0, sp, #4
 800cc8e:	f7fa fbb3 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cc92:	2c00      	cmp	r4, #0
 800cc94:	d1e8      	bne.n	800cc68 <_Findx0.constprop.10+0x2c>
 800cc96:	4630      	mov	r0, r6
 800cc98:	b005      	add	sp, #20
 800cc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc9c:	9801      	ldr	r0, [sp, #4]
 800cc9e:	69c4      	ldr	r4, [r0, #28]
 800cca0:	2c00      	cmp	r4, #0
 800cca2:	d0dc      	beq.n	800cc5e <_Findx0.constprop.10+0x22>
 800cca4:	462a      	mov	r2, r5
 800cca6:	4639      	mov	r1, r7
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f7ff fe61 	bl	800c970 <_Findx0>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	bf18      	it	ne
 800ccb4:	2601      	movne	r6, #1
 800ccb6:	f7fa fb83 	bl	80073c0 <GUI_ALLOC_h2p>
 800ccba:	6a04      	ldr	r4, [r0, #32]
 800ccbc:	2c00      	cmp	r4, #0
 800ccbe:	d1f1      	bne.n	800cca4 <_Findx0.constprop.10+0x68>
 800ccc0:	9801      	ldr	r0, [sp, #4]
 800ccc2:	e7e2      	b.n	800cc8a <_Findx0.constprop.10+0x4e>
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	e7e6      	b.n	800cc96 <_Findx0.constprop.10+0x5a>

0800ccc8 <_Findy1.constprop.11>:
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d050      	beq.n	800cd6e <_Findy1.constprop.11+0xa6>
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	460e      	mov	r6, r1
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	ad02      	add	r5, sp, #8
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7fa fb7c 	bl	80073d4 <GUI_ALLOC_LockH>
 800ccdc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ccde:	9001      	str	r0, [sp, #4]
 800cce0:	07a2      	lsls	r2, r4, #30
 800cce2:	d518      	bpl.n	800cd16 <_Findy1.constprop.11+0x4e>
 800cce4:	c803      	ldmia	r0, {r0, r1}
 800cce6:	e885 0003 	stmia.w	r5, {r0, r1}
 800ccea:	4629      	mov	r1, r5
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7fa fd75 	bl	80077dc <GUI_RectsIntersect>
 800ccf2:	b330      	cbz	r0, 800cd42 <_Findy1.constprop.11+0x7a>
 800ccf4:	07e3      	lsls	r3, r4, #31
 800ccf6:	9801      	ldr	r0, [sp, #4]
 800ccf8:	d415      	bmi.n	800cd26 <_Findy1.constprop.11+0x5e>
 800ccfa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800ccfe:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	dd25      	ble.n	800cd52 <_Findy1.constprop.11+0x8a>
 800cd06:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800cd0a:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	db01      	blt.n	800cd16 <_Findy1.constprop.11+0x4e>
 800cd12:	3b01      	subs	r3, #1
 800cd14:	80f3      	strh	r3, [r6, #6]
 800cd16:	6a04      	ldr	r4, [r0, #32]
 800cd18:	a801      	add	r0, sp, #4
 800cd1a:	f7fa fb6d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cd1e:	2c00      	cmp	r4, #0
 800cd20:	d1d9      	bne.n	800ccd6 <_Findy1.constprop.11+0xe>
 800cd22:	b004      	add	sp, #16
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
 800cd26:	69c4      	ldr	r4, [r0, #28]
 800cd28:	2c00      	cmp	r4, #0
 800cd2a:	d0f4      	beq.n	800cd16 <_Findy1.constprop.11+0x4e>
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	462a      	mov	r2, r5
 800cd30:	4631      	mov	r1, r6
 800cd32:	f7ff fdb5 	bl	800c8a0 <_Findy1>
 800cd36:	4620      	mov	r0, r4
 800cd38:	f7fa fb42 	bl	80073c0 <GUI_ALLOC_h2p>
 800cd3c:	6a04      	ldr	r4, [r0, #32]
 800cd3e:	2c00      	cmp	r4, #0
 800cd40:	d1f4      	bne.n	800cd2c <_Findy1.constprop.11+0x64>
 800cd42:	9801      	ldr	r0, [sp, #4]
 800cd44:	6a04      	ldr	r4, [r0, #32]
 800cd46:	a801      	add	r0, sp, #4
 800cd48:	f7fa fb56 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cd4c:	2c00      	cmp	r4, #0
 800cd4e:	d1c2      	bne.n	800ccd6 <_Findy1.constprop.11+0xe>
 800cd50:	e7e7      	b.n	800cd22 <_Findy1.constprop.11+0x5a>
 800cd52:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800cd56:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	dddb      	ble.n	800cd16 <_Findy1.constprop.11+0x4e>
 800cd5e:	6a04      	ldr	r4, [r0, #32]
 800cd60:	80f3      	strh	r3, [r6, #6]
 800cd62:	a801      	add	r0, sp, #4
 800cd64:	f7fa fb48 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cd68:	2c00      	cmp	r4, #0
 800cd6a:	d1b4      	bne.n	800ccd6 <_Findy1.constprop.11+0xe>
 800cd6c:	e7d9      	b.n	800cd22 <_Findy1.constprop.11+0x5a>
 800cd6e:	4770      	bx	lr

0800cd70 <WM__PaintWinAndOverlays>:
 800cd70:	b530      	push	{r4, r5, lr}
 800cd72:	b083      	sub	sp, #12
 800cd74:	4604      	mov	r4, r0
 800cd76:	f7fa fb2d 	bl	80073d4 <GUI_ALLOC_LockH>
 800cd7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cd7c:	9001      	str	r0, [sp, #4]
 800cd7e:	f640 0301 	movw	r3, #2049	; 0x801
 800cd82:	4013      	ands	r3, r2
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d00e      	beq.n	800cda6 <WM__PaintWinAndOverlays+0x36>
 800cd88:	a801      	add	r0, sp, #4
 800cd8a:	f7fa fb35 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f7fa fb16 	bl	80073c0 <GUI_ALLOC_h2p>
 800cd94:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cd96:	4a1b      	ldr	r2, [pc, #108]	; (800ce04 <WM__PaintWinAndOverlays+0x94>)
 800cd98:	4b1b      	ldr	r3, [pc, #108]	; (800ce08 <WM__PaintWinAndOverlays+0x98>)
 800cd9a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800cd9e:	bf08      	it	eq
 800cda0:	4613      	moveq	r3, r2
 800cda2:	4620      	mov	r0, r4
 800cda4:	4798      	blx	r3
 800cda6:	4b19      	ldr	r3, [pc, #100]	; (800ce0c <WM__PaintWinAndOverlays+0x9c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	b90b      	cbnz	r3, 800cdb0 <WM__PaintWinAndOverlays+0x40>
 800cdac:	b003      	add	sp, #12
 800cdae:	bd30      	pop	{r4, r5, pc}
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f7ff fed7 	bl	800cb64 <_PaintTransChildren>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7fa fb02 	bl	80073c0 <GUI_ALLOC_h2p>
 800cdbc:	6985      	ldr	r5, [r0, #24]
 800cdbe:	6a04      	ldr	r4, [r0, #32]
 800cdc0:	2d00      	cmp	r5, #0
 800cdc2:	d0f3      	beq.n	800cdac <WM__PaintWinAndOverlays+0x3c>
 800cdc4:	b184      	cbz	r4, 800cde8 <WM__PaintWinAndOverlays+0x78>
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7fa fafa 	bl	80073c0 <GUI_ALLOC_h2p>
 800cdcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cdce:	f003 0303 	and.w	r3, r3, #3
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	d011      	beq.n	800cdfa <WM__PaintWinAndOverlays+0x8a>
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7ff fec4 	bl	800cb64 <_PaintTransChildren>
 800cddc:	4620      	mov	r0, r4
 800cdde:	f7fa faef 	bl	80073c0 <GUI_ALLOC_h2p>
 800cde2:	6a04      	ldr	r4, [r0, #32]
 800cde4:	2c00      	cmp	r4, #0
 800cde6:	d1ee      	bne.n	800cdc6 <WM__PaintWinAndOverlays+0x56>
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7fa fae9 	bl	80073c0 <GUI_ALLOC_h2p>
 800cdee:	6985      	ldr	r5, [r0, #24]
 800cdf0:	6a04      	ldr	r4, [r0, #32]
 800cdf2:	2d00      	cmp	r5, #0
 800cdf4:	d1e6      	bne.n	800cdc4 <WM__PaintWinAndOverlays+0x54>
 800cdf6:	b003      	add	sp, #12
 800cdf8:	bd30      	pop	{r4, r5, pc}
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f7ff fe54 	bl	800caa8 <_Paint1Trans>
 800ce00:	e7e9      	b.n	800cdd6 <WM__PaintWinAndOverlays+0x66>
 800ce02:	bf00      	nop
 800ce04:	0800e41d 	.word	0x0800e41d
 800ce08:	080104c9 	.word	0x080104c9
 800ce0c:	2001bde0 	.word	0x2001bde0

0800ce10 <_cbPaintMemDev>:
 800ce10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce14:	4d19      	ldr	r5, [pc, #100]	; (800ce7c <_cbPaintMemDev+0x6c>)
 800ce16:	682b      	ldr	r3, [r5, #0]
 800ce18:	b082      	sub	sp, #8
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ce1e:	f7fa fad9 	bl	80073d4 <GUI_ALLOC_LockH>
 800ce22:	682a      	ldr	r2, [r5, #0]
 800ce24:	ac02      	add	r4, sp, #8
 800ce26:	3208      	adds	r2, #8
 800ce28:	4603      	mov	r3, r0
 800ce2a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ce2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce32:	f103 0208 	add.w	r2, r3, #8
 800ce36:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 800ce3a:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800ce3e:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 800ce42:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 800ce46:	e882 0003 	stmia.w	r2, {r0, r1}
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7fa fad4 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ce50:	f8d9 0000 	ldr.w	r0, [r9]
 800ce54:	f7ff ff8c 	bl	800cd70 <WM__PaintWinAndOverlays>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ce5c:	f7fa faba 	bl	80073d4 <GUI_ALLOC_LockH>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4620      	mov	r0, r4
 800ce64:	f8a3 a008 	strh.w	sl, [r3, #8]
 800ce68:	f8a3 800a 	strh.w	r8, [r3, #10]
 800ce6c:	819f      	strh	r7, [r3, #12]
 800ce6e:	81de      	strh	r6, [r3, #14]
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	f7fa fac1 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ce76:	b002      	add	sp, #8
 800ce78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7c:	20000018 	.word	0x20000018

0800ce80 <_Invalidate1Abs>:
 800ce80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce82:	b085      	sub	sp, #20
 800ce84:	4616      	mov	r6, r2
 800ce86:	460c      	mov	r4, r1
 800ce88:	4605      	mov	r5, r0
 800ce8a:	f7fa fa99 	bl	80073c0 <GUI_ALLOC_h2p>
 800ce8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ce90:	9001      	str	r0, [sp, #4]
 800ce92:	079a      	lsls	r2, r3, #30
 800ce94:	d505      	bpl.n	800cea2 <_Invalidate1Abs+0x22>
 800ce96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ce9a:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ce9e:	4291      	cmp	r1, r2
 800cea0:	da01      	bge.n	800cea6 <_Invalidate1Abs+0x26>
 800cea2:	b005      	add	sp, #20
 800cea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ceaa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ceae:	4291      	cmp	r1, r2
 800ceb0:	dcf7      	bgt.n	800cea2 <_Invalidate1Abs+0x22>
 800ceb2:	f640 0201 	movw	r2, #2049	; 0x801
 800ceb6:	401a      	ands	r2, r3
 800ceb8:	2a01      	cmp	r2, #1
 800ceba:	d0f2      	beq.n	800cea2 <_Invalidate1Abs+0x22>
 800cebc:	4628      	mov	r0, r5
 800cebe:	f7fa fa89 	bl	80073d4 <GUI_ALLOC_LockH>
 800cec2:	af02      	add	r7, sp, #8
 800cec4:	4603      	mov	r3, r0
 800cec6:	4602      	mov	r2, r0
 800cec8:	4621      	mov	r1, r4
 800ceca:	4638      	mov	r0, r7
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	f7fb fc05 	bl	80086dc <GUI__IntersectRects>
 800ced2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800ced6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	dc31      	bgt.n	800cf42 <_Invalidate1Abs+0xc2>
 800cede:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800cee2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	dc2b      	bgt.n	800cf42 <_Invalidate1Abs+0xc2>
 800ceea:	9a01      	ldr	r2, [sp, #4]
 800ceec:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800ceee:	f244 0320 	movw	r3, #16416	; 0x4020
 800cef2:	4023      	ands	r3, r4
 800cef4:	bb53      	cbnz	r3, 800cf4c <_Invalidate1Abs+0xcc>
 800cef6:	f8df e070 	ldr.w	lr, [pc, #112]	; 800cf68 <_Invalidate1Abs+0xe8>
 800cefa:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cefe:	f8be 3000 	ldrh.w	r3, [lr]
 800cf02:	4326      	orrs	r6, r4
 800cf04:	3301      	adds	r3, #1
 800cf06:	f102 0408 	add.w	r4, r2, #8
 800cf0a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cf0e:	f8ae 3000 	strh.w	r3, [lr]
 800cf12:	6296      	str	r6, [r2, #40]	; 0x28
 800cf14:	e000      	b.n	800cf18 <_Invalidate1Abs+0x98>
 800cf16:	461d      	mov	r5, r3
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f7fa fa51 	bl	80073c0 <GUI_ALLOC_h2p>
 800cf1e:	6983      	ldr	r3, [r0, #24]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1f8      	bne.n	800cf16 <_Invalidate1Abs+0x96>
 800cf24:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <_Invalidate1Abs+0xe0>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	4295      	cmp	r5, r2
 800cf2a:	d016      	beq.n	800cf5a <_Invalidate1Abs+0xda>
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	42ab      	cmp	r3, r5
 800cf30:	bf0c      	ite	eq
 800cf32:	2302      	moveq	r3, #2
 800cf34:	2300      	movne	r3, #0
 800cf36:	4a0b      	ldr	r2, [pc, #44]	; (800cf64 <_Invalidate1Abs+0xe4>)
 800cf38:	6811      	ldr	r1, [r2, #0]
 800cf3a:	430b      	orrs	r3, r1
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	f7fb f8af 	bl	80080a0 <GUI_SignalEvent>
 800cf42:	a801      	add	r0, sp, #4
 800cf44:	f7fa fa58 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cf48:	b005      	add	sp, #20
 800cf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4c:	f102 0108 	add.w	r1, r2, #8
 800cf50:	4608      	mov	r0, r1
 800cf52:	463a      	mov	r2, r7
 800cf54:	f7fa fbcc 	bl	80076f0 <GUI_MergeRect>
 800cf58:	e7f3      	b.n	800cf42 <_Invalidate1Abs+0xc2>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e7eb      	b.n	800cf36 <_Invalidate1Abs+0xb6>
 800cf5e:	bf00      	nop
 800cf60:	2001bd90 	.word	0x2001bd90
 800cf64:	2001bdb8 	.word	0x2001bdb8
 800cf68:	2001bda8 	.word	0x2001bda8

0800cf6c <WM__ActivateClipRect>:
 800cf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	4f45      	ldr	r7, [pc, #276]	; (800d088 <WM__ActivateClipRect+0x11c>)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800cf78:	b086      	sub	sp, #24
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d139      	bne.n	800cff2 <WM__ActivateClipRect+0x86>
 800cf7e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cf80:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800d08c <WM__ActivateClipRect+0x120>
 800cf84:	f7fa fa26 	bl	80073d4 <GUI_ALLOC_LockH>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	c803      	ldmia	r0, {r0, r1}
 800cf8c:	ae02      	add	r6, sp, #8
 800cf8e:	e886 0003 	stmia.w	r6, {r0, r1}
 800cf92:	4668      	mov	r0, sp
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	f7fa fa2f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cf9a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf9e:	2c00      	cmp	r4, #0
 800cfa0:	d14e      	bne.n	800d040 <WM__ActivateClipRect+0xd4>
 800cfa2:	683c      	ldr	r4, [r7, #0]
 800cfa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d065      	beq.n	800d076 <WM__ActivateClipRect+0x10a>
 800cfaa:	6818      	ldr	r0, [r3, #0]
 800cfac:	6859      	ldr	r1, [r3, #4]
 800cfae:	f8d8 2000 	ldr.w	r2, [r8]
 800cfb2:	ad04      	add	r5, sp, #16
 800cfb4:	462b      	mov	r3, r5
 800cfb6:	c303      	stmia	r3!, {r0, r1}
 800cfb8:	b1ca      	cbz	r2, 800cfee <WM__ActivateClipRect+0x82>
 800cfba:	4610      	mov	r0, r2
 800cfbc:	f7fa fa0a 	bl	80073d4 <GUI_ALLOC_LockH>
 800cfc0:	ac06      	add	r4, sp, #24
 800cfc2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cfc6:	f844 0d14 	str.w	r0, [r4, #-20]!
 800cfca:	f9b0 1000 	ldrsh.w	r1, [r0]
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f7fa fbbc 	bl	800774c <GUI_MoveRect>
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f7fa fa0f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800cfda:	4628      	mov	r0, r5
 800cfdc:	4631      	mov	r1, r6
 800cfde:	f7fb fb5f 	bl	80086a0 <GUI__IntersectRect>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	f002 ff16 	bl	800fe14 <LCD_SetClipRectEx>
 800cfe8:	b006      	add	sp, #24
 800cfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800cff0:	e7e3      	b.n	800cfba <WM__ActivateClipRect+0x4e>
 800cff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cff4:	2a00      	cmp	r2, #0
 800cff6:	d042      	beq.n	800d07e <WM__ActivateClipRect+0x112>
 800cff8:	4c24      	ldr	r4, [pc, #144]	; (800d08c <WM__ActivateClipRect+0x120>)
 800cffa:	6810      	ldr	r0, [r2, #0]
 800cffc:	6851      	ldr	r1, [r2, #4]
 800cffe:	6824      	ldr	r4, [r4, #0]
 800d000:	ad04      	add	r5, sp, #16
 800d002:	462a      	mov	r2, r5
 800d004:	c203      	stmia	r2!, {r0, r1}
 800d006:	b1cc      	cbz	r4, 800d03c <WM__ActivateClipRect+0xd0>
 800d008:	4620      	mov	r0, r4
 800d00a:	f7fa f9e3 	bl	80073d4 <GUI_ALLOC_LockH>
 800d00e:	ac06      	add	r4, sp, #24
 800d010:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d014:	f844 0d10 	str.w	r0, [r4, #-16]!
 800d018:	f9b0 1000 	ldrsh.w	r1, [r0]
 800d01c:	4628      	mov	r0, r5
 800d01e:	f7fa fb95 	bl	800774c <GUI_MoveRect>
 800d022:	4620      	mov	r0, r4
 800d024:	f7fa f9e8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d028:	4919      	ldr	r1, [pc, #100]	; (800d090 <WM__ActivateClipRect+0x124>)
 800d02a:	4628      	mov	r0, r5
 800d02c:	f7fb fb38 	bl	80086a0 <GUI__IntersectRect>
 800d030:	4628      	mov	r0, r5
 800d032:	f002 feef 	bl	800fe14 <LCD_SetClipRectEx>
 800d036:	b006      	add	sp, #24
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800d03e:	e7e3      	b.n	800d008 <WM__ActivateClipRect+0x9c>
 800d040:	ad04      	add	r5, sp, #16
 800d042:	e007      	b.n	800d054 <WM__ActivateClipRect+0xe8>
 800d044:	f7fb fb2c 	bl	80086a0 <GUI__IntersectRect>
 800d048:	9b04      	ldr	r3, [sp, #16]
 800d04a:	699c      	ldr	r4, [r3, #24]
 800d04c:	4628      	mov	r0, r5
 800d04e:	b17c      	cbz	r4, 800d070 <WM__ActivateClipRect+0x104>
 800d050:	f7fa f9d2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d054:	4620      	mov	r0, r4
 800d056:	f7fa f9bd 	bl	80073d4 <GUI_ALLOC_LockH>
 800d05a:	4603      	mov	r3, r0
 800d05c:	4601      	mov	r1, r0
 800d05e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d060:	9304      	str	r3, [sp, #16]
 800d062:	0793      	lsls	r3, r2, #30
 800d064:	4630      	mov	r0, r6
 800d066:	d4ed      	bmi.n	800d044 <WM__ActivateClipRect+0xd8>
 800d068:	4628      	mov	r0, r5
 800d06a:	f7fa f9c5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d06e:	e798      	b.n	800cfa2 <WM__ActivateClipRect+0x36>
 800d070:	f7fa f9c2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d074:	e795      	b.n	800cfa2 <WM__ActivateClipRect+0x36>
 800d076:	4630      	mov	r0, r6
 800d078:	f002 fecc 	bl	800fe14 <LCD_SetClipRectEx>
 800d07c:	e7b4      	b.n	800cfe8 <WM__ActivateClipRect+0x7c>
 800d07e:	4804      	ldr	r0, [pc, #16]	; (800d090 <WM__ActivateClipRect+0x124>)
 800d080:	f002 fec8 	bl	800fe14 <LCD_SetClipRectEx>
 800d084:	e7b0      	b.n	800cfe8 <WM__ActivateClipRect+0x7c>
 800d086:	bf00      	nop
 800d088:	20000018 	.word	0x20000018
 800d08c:	2001bd8c 	.word	0x2001bd8c
 800d090:	20000200 	.word	0x20000200

0800d094 <WM__InsertWindowIntoList>:
 800d094:	b901      	cbnz	r1, 800d098 <WM__InsertWindowIntoList+0x4>
 800d096:	4770      	bx	lr
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	460c      	mov	r4, r1
 800d09e:	4605      	mov	r5, r0
 800d0a0:	f7fa f998 	bl	80073d4 <GUI_ALLOC_LockH>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	6184      	str	r4, [r0, #24]
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	621a      	str	r2, [r3, #32]
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	f7fa f990 	bl	80073d4 <GUI_ALLOC_LockH>
 800d0b4:	69c4      	ldr	r4, [r0, #28]
 800d0b6:	9002      	str	r0, [sp, #8]
 800d0b8:	2c00      	cmp	r4, #0
 800d0ba:	d02c      	beq.n	800d116 <WM__InsertWindowIntoList+0x82>
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	4620      	mov	r0, r4
 800d0c0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800d0c2:	f7fa f987 	bl	80073d4 <GUI_ALLOC_LockH>
 800d0c6:	f006 0608 	and.w	r6, r6, #8
 800d0ca:	9003      	str	r0, [sp, #12]
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	d12b      	bne.n	800d128 <WM__InsertWindowIntoList+0x94>
 800d0d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d0d2:	071a      	lsls	r2, r3, #28
 800d0d4:	d43d      	bmi.n	800d152 <WM__InsertWindowIntoList+0xbe>
 800d0d6:	a802      	add	r0, sp, #8
 800d0d8:	f7fa f98e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d0dc:	a803      	add	r0, sp, #12
 800d0de:	f7fa f98b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f7fa f96c 	bl	80073c0 <GUI_ALLOC_h2p>
 800d0e8:	6a04      	ldr	r4, [r0, #32]
 800d0ea:	9003      	str	r0, [sp, #12]
 800d0ec:	b924      	cbnz	r4, 800d0f8 <WM__InsertWindowIntoList+0x64>
 800d0ee:	e02e      	b.n	800d14e <WM__InsertWindowIntoList+0xba>
 800d0f0:	6a04      	ldr	r4, [r0, #32]
 800d0f2:	9003      	str	r0, [sp, #12]
 800d0f4:	2c00      	cmp	r4, #0
 800d0f6:	d02a      	beq.n	800d14e <WM__InsertWindowIntoList+0xba>
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7fa f961 	bl	80073c0 <GUI_ALLOC_h2p>
 800d0fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d100:	071b      	lsls	r3, r3, #28
 800d102:	d5f5      	bpl.n	800d0f0 <WM__InsertWindowIntoList+0x5c>
 800d104:	9a03      	ldr	r2, [sp, #12]
 800d106:	9b01      	ldr	r3, [sp, #4]
 800d108:	6215      	str	r5, [r2, #32]
 800d10a:	621c      	str	r4, [r3, #32]
 800d10c:	a801      	add	r0, sp, #4
 800d10e:	f7fa f973 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d112:	b004      	add	sp, #16
 800d114:	bd70      	pop	{r4, r5, r6, pc}
 800d116:	61c5      	str	r5, [r0, #28]
 800d118:	a801      	add	r0, sp, #4
 800d11a:	f7fa f96d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d11e:	a802      	add	r0, sp, #8
 800d120:	f7fa f96a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d124:	b004      	add	sp, #16
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	a802      	add	r0, sp, #8
 800d12a:	f7fa f965 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d12e:	a803      	add	r0, sp, #12
 800d130:	f7fa f962 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d134:	4620      	mov	r0, r4
 800d136:	f7fa f943 	bl	80073c0 <GUI_ALLOC_h2p>
 800d13a:	6a02      	ldr	r2, [r0, #32]
 800d13c:	9003      	str	r0, [sp, #12]
 800d13e:	b132      	cbz	r2, 800d14e <WM__InsertWindowIntoList+0xba>
 800d140:	4610      	mov	r0, r2
 800d142:	f7fa f93d 	bl	80073c0 <GUI_ALLOC_h2p>
 800d146:	6a02      	ldr	r2, [r0, #32]
 800d148:	9003      	str	r0, [sp, #12]
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	d1f8      	bne.n	800d140 <WM__InsertWindowIntoList+0xac>
 800d14e:	6205      	str	r5, [r0, #32]
 800d150:	e7dc      	b.n	800d10c <WM__InsertWindowIntoList+0x78>
 800d152:	9a01      	ldr	r2, [sp, #4]
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	6214      	str	r4, [r2, #32]
 800d158:	a801      	add	r0, sp, #4
 800d15a:	61dd      	str	r5, [r3, #28]
 800d15c:	f7fa f94c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d160:	a802      	add	r0, sp, #8
 800d162:	f7fa f949 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d166:	a803      	add	r0, sp, #12
 800d168:	f7fa f946 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d16c:	e7da      	b.n	800d124 <WM__InsertWindowIntoList+0x90>
 800d16e:	bf00      	nop

0800d170 <WM__InvalidateDrawAndDescs>:
 800d170:	b900      	cbnz	r0, 800d174 <WM__InvalidateDrawAndDescs+0x4>
 800d172:	4770      	bx	lr
 800d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d178:	b08f      	sub	sp, #60	; 0x3c
 800d17a:	4604      	mov	r4, r0
 800d17c:	f7fa f92a 	bl	80073d4 <GUI_ALLOC_LockH>
 800d180:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d182:	9005      	str	r0, [sp, #20]
 800d184:	079a      	lsls	r2, r3, #30
 800d186:	f140 813c 	bpl.w	800d402 <WM__InvalidateDrawAndDescs+0x292>
 800d18a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d18c:	b140      	cbz	r0, 800d1a0 <WM__InvalidateDrawAndDescs+0x30>
 800d18e:	4ba0      	ldr	r3, [pc, #640]	; (800d410 <WM__InvalidateDrawAndDescs+0x2a0>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	429c      	cmp	r4, r3
 800d194:	d004      	beq.n	800d1a0 <WM__InvalidateDrawAndDescs+0x30>
 800d196:	f002 ffa7 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d19a:	9b05      	ldr	r3, [sp, #20]
 800d19c:	2200      	movs	r2, #0
 800d19e:	625a      	str	r2, [r3, #36]	; 0x24
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f001 fc93 	bl	800eacc <WM_GetFirstChild>
 800d1a6:	9003      	str	r0, [sp, #12]
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f000 812a 	beq.w	800d402 <WM__InvalidateDrawAndDescs+0x292>
 800d1ae:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800d410 <WM__InvalidateDrawAndDescs+0x2a0>
 800d1b2:	9803      	ldr	r0, [sp, #12]
 800d1b4:	f7fa f90e 	bl	80073d4 <GUI_ALLOC_LockH>
 800d1b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d1ba:	9006      	str	r0, [sp, #24]
 800d1bc:	079b      	lsls	r3, r3, #30
 800d1be:	f140 8115 	bpl.w	800d3ec <WM__InvalidateDrawAndDescs+0x27c>
 800d1c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d1c4:	b148      	cbz	r0, 800d1da <WM__InvalidateDrawAndDescs+0x6a>
 800d1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ca:	9a03      	ldr	r2, [sp, #12]
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d004      	beq.n	800d1da <WM__InvalidateDrawAndDescs+0x6a>
 800d1d0:	f002 ff8a 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d1d4:	9b06      	ldr	r3, [sp, #24]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	625a      	str	r2, [r3, #36]	; 0x24
 800d1da:	9803      	ldr	r0, [sp, #12]
 800d1dc:	f001 fc76 	bl	800eacc <WM_GetFirstChild>
 800d1e0:	9002      	str	r0, [sp, #8]
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	f000 8102 	beq.w	800d3ec <WM__InvalidateDrawAndDescs+0x27c>
 800d1e8:	9802      	ldr	r0, [sp, #8]
 800d1ea:	f7fa f8f3 	bl	80073d4 <GUI_ALLOC_LockH>
 800d1ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d1f0:	9007      	str	r0, [sp, #28]
 800d1f2:	079f      	lsls	r7, r3, #30
 800d1f4:	f140 80ef 	bpl.w	800d3d6 <WM__InvalidateDrawAndDescs+0x266>
 800d1f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d1fa:	b148      	cbz	r0, 800d210 <WM__InvalidateDrawAndDescs+0xa0>
 800d1fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d200:	9a02      	ldr	r2, [sp, #8]
 800d202:	4293      	cmp	r3, r2
 800d204:	d004      	beq.n	800d210 <WM__InvalidateDrawAndDescs+0xa0>
 800d206:	f002 ff6f 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d20a:	9b07      	ldr	r3, [sp, #28]
 800d20c:	2200      	movs	r2, #0
 800d20e:	625a      	str	r2, [r3, #36]	; 0x24
 800d210:	9802      	ldr	r0, [sp, #8]
 800d212:	f001 fc5b 	bl	800eacc <WM_GetFirstChild>
 800d216:	4683      	mov	fp, r0
 800d218:	2800      	cmp	r0, #0
 800d21a:	f000 80dc 	beq.w	800d3d6 <WM__InvalidateDrawAndDescs+0x266>
 800d21e:	4658      	mov	r0, fp
 800d220:	f7fa f8d8 	bl	80073d4 <GUI_ALLOC_LockH>
 800d224:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d226:	9008      	str	r0, [sp, #32]
 800d228:	079e      	lsls	r6, r3, #30
 800d22a:	f140 80c8 	bpl.w	800d3be <WM__InvalidateDrawAndDescs+0x24e>
 800d22e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d230:	b140      	cbz	r0, 800d244 <WM__InvalidateDrawAndDescs+0xd4>
 800d232:	f8d8 3000 	ldr.w	r3, [r8]
 800d236:	455b      	cmp	r3, fp
 800d238:	d004      	beq.n	800d244 <WM__InvalidateDrawAndDescs+0xd4>
 800d23a:	f002 ff55 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d23e:	9b08      	ldr	r3, [sp, #32]
 800d240:	2200      	movs	r2, #0
 800d242:	625a      	str	r2, [r3, #36]	; 0x24
 800d244:	4658      	mov	r0, fp
 800d246:	f001 fc41 	bl	800eacc <WM_GetFirstChild>
 800d24a:	4682      	mov	sl, r0
 800d24c:	2800      	cmp	r0, #0
 800d24e:	f000 80b6 	beq.w	800d3be <WM__InvalidateDrawAndDescs+0x24e>
 800d252:	4650      	mov	r0, sl
 800d254:	f7fa f8be 	bl	80073d4 <GUI_ALLOC_LockH>
 800d258:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d25a:	9009      	str	r0, [sp, #36]	; 0x24
 800d25c:	079d      	lsls	r5, r3, #30
 800d25e:	f140 80a2 	bpl.w	800d3a6 <WM__InvalidateDrawAndDescs+0x236>
 800d262:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d264:	b140      	cbz	r0, 800d278 <WM__InvalidateDrawAndDescs+0x108>
 800d266:	f8d8 3000 	ldr.w	r3, [r8]
 800d26a:	4553      	cmp	r3, sl
 800d26c:	d004      	beq.n	800d278 <WM__InvalidateDrawAndDescs+0x108>
 800d26e:	f002 ff3b 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d274:	2200      	movs	r2, #0
 800d276:	625a      	str	r2, [r3, #36]	; 0x24
 800d278:	4650      	mov	r0, sl
 800d27a:	f001 fc27 	bl	800eacc <WM_GetFirstChild>
 800d27e:	9001      	str	r0, [sp, #4]
 800d280:	2800      	cmp	r0, #0
 800d282:	f000 8090 	beq.w	800d3a6 <WM__InvalidateDrawAndDescs+0x236>
 800d286:	9801      	ldr	r0, [sp, #4]
 800d288:	f7fa f8a4 	bl	80073d4 <GUI_ALLOC_LockH>
 800d28c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d28e:	900a      	str	r0, [sp, #40]	; 0x28
 800d290:	079c      	lsls	r4, r3, #30
 800d292:	d57d      	bpl.n	800d390 <WM__InvalidateDrawAndDescs+0x220>
 800d294:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d296:	b148      	cbz	r0, 800d2ac <WM__InvalidateDrawAndDescs+0x13c>
 800d298:	f8d8 3000 	ldr.w	r3, [r8]
 800d29c:	9a01      	ldr	r2, [sp, #4]
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d004      	beq.n	800d2ac <WM__InvalidateDrawAndDescs+0x13c>
 800d2a2:	f002 ff21 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	625a      	str	r2, [r3, #36]	; 0x24
 800d2ac:	9801      	ldr	r0, [sp, #4]
 800d2ae:	f001 fc0d 	bl	800eacc <WM_GetFirstChild>
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d06b      	beq.n	800d390 <WM__InvalidateDrawAndDescs+0x220>
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f7fa f88b 	bl	80073d4 <GUI_ALLOC_LockH>
 800d2be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d2c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2c2:	0799      	lsls	r1, r3, #30
 800d2c4:	d55b      	bpl.n	800d37e <WM__InvalidateDrawAndDescs+0x20e>
 800d2c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d2c8:	b140      	cbz	r0, 800d2dc <WM__InvalidateDrawAndDescs+0x16c>
 800d2ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ce:	42b3      	cmp	r3, r6
 800d2d0:	d004      	beq.n	800d2dc <WM__InvalidateDrawAndDescs+0x16c>
 800d2d2:	f002 ff09 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2d8:	2200      	movs	r2, #0
 800d2da:	625a      	str	r2, [r3, #36]	; 0x24
 800d2dc:	4630      	mov	r0, r6
 800d2de:	f001 fbf5 	bl	800eacc <WM_GetFirstChild>
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d04a      	beq.n	800d37e <WM__InvalidateDrawAndDescs+0x20e>
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f7fa f873 	bl	80073d4 <GUI_ALLOC_LockH>
 800d2ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d2f0:	900c      	str	r0, [sp, #48]	; 0x30
 800d2f2:	079a      	lsls	r2, r3, #30
 800d2f4:	d53a      	bpl.n	800d36c <WM__InvalidateDrawAndDescs+0x1fc>
 800d2f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d2f8:	b140      	cbz	r0, 800d30c <WM__InvalidateDrawAndDescs+0x19c>
 800d2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d2fe:	42ab      	cmp	r3, r5
 800d300:	d004      	beq.n	800d30c <WM__InvalidateDrawAndDescs+0x19c>
 800d302:	f002 fef1 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d308:	2200      	movs	r2, #0
 800d30a:	625a      	str	r2, [r3, #36]	; 0x24
 800d30c:	4628      	mov	r0, r5
 800d30e:	f001 fbdd 	bl	800eacc <WM_GetFirstChild>
 800d312:	f04f 0900 	mov.w	r9, #0
 800d316:	4604      	mov	r4, r0
 800d318:	b340      	cbz	r0, 800d36c <WM__InvalidateDrawAndDescs+0x1fc>
 800d31a:	4620      	mov	r0, r4
 800d31c:	f7fa f85a 	bl	80073d4 <GUI_ALLOC_LockH>
 800d320:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d322:	900d      	str	r0, [sp, #52]	; 0x34
 800d324:	079b      	lsls	r3, r3, #30
 800d326:	d518      	bpl.n	800d35a <WM__InvalidateDrawAndDescs+0x1ea>
 800d328:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d32a:	b140      	cbz	r0, 800d33e <WM__InvalidateDrawAndDescs+0x1ce>
 800d32c:	f8d8 3000 	ldr.w	r3, [r8]
 800d330:	42a3      	cmp	r3, r4
 800d332:	d004      	beq.n	800d33e <WM__InvalidateDrawAndDescs+0x1ce>
 800d334:	f002 fed8 	bl	80100e8 <GUI_MEMDEV_Delete>
 800d338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d33a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 800d33e:	4620      	mov	r0, r4
 800d340:	f001 fbc4 	bl	800eacc <WM_GetFirstChild>
 800d344:	4607      	mov	r7, r0
 800d346:	b140      	cbz	r0, 800d35a <WM__InvalidateDrawAndDescs+0x1ea>
 800d348:	4638      	mov	r0, r7
 800d34a:	f7ff ff11 	bl	800d170 <WM__InvalidateDrawAndDescs>
 800d34e:	4638      	mov	r0, r7
 800d350:	f7fa f836 	bl	80073c0 <GUI_ALLOC_h2p>
 800d354:	6a07      	ldr	r7, [r0, #32]
 800d356:	2f00      	cmp	r7, #0
 800d358:	d1f6      	bne.n	800d348 <WM__InvalidateDrawAndDescs+0x1d8>
 800d35a:	a80d      	add	r0, sp, #52	; 0x34
 800d35c:	f7fa f84c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d360:	4620      	mov	r0, r4
 800d362:	f7fa f82d 	bl	80073c0 <GUI_ALLOC_h2p>
 800d366:	6a04      	ldr	r4, [r0, #32]
 800d368:	2c00      	cmp	r4, #0
 800d36a:	d1d6      	bne.n	800d31a <WM__InvalidateDrawAndDescs+0x1aa>
 800d36c:	a80c      	add	r0, sp, #48	; 0x30
 800d36e:	f7fa f843 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d372:	4628      	mov	r0, r5
 800d374:	f7fa f824 	bl	80073c0 <GUI_ALLOC_h2p>
 800d378:	6a05      	ldr	r5, [r0, #32]
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	d1b4      	bne.n	800d2e8 <WM__InvalidateDrawAndDescs+0x178>
 800d37e:	a80b      	add	r0, sp, #44	; 0x2c
 800d380:	f7fa f83a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d384:	4630      	mov	r0, r6
 800d386:	f7fa f81b 	bl	80073c0 <GUI_ALLOC_h2p>
 800d38a:	6a06      	ldr	r6, [r0, #32]
 800d38c:	2e00      	cmp	r6, #0
 800d38e:	d193      	bne.n	800d2b8 <WM__InvalidateDrawAndDescs+0x148>
 800d390:	a80a      	add	r0, sp, #40	; 0x28
 800d392:	f7fa f831 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d396:	9801      	ldr	r0, [sp, #4]
 800d398:	f7fa f812 	bl	80073c0 <GUI_ALLOC_h2p>
 800d39c:	6a03      	ldr	r3, [r0, #32]
 800d39e:	9301      	str	r3, [sp, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f47f af70 	bne.w	800d286 <WM__InvalidateDrawAndDescs+0x116>
 800d3a6:	a809      	add	r0, sp, #36	; 0x24
 800d3a8:	f7fa f826 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d3ac:	4650      	mov	r0, sl
 800d3ae:	f7fa f807 	bl	80073c0 <GUI_ALLOC_h2p>
 800d3b2:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800d3b6:	f1ba 0f00 	cmp.w	sl, #0
 800d3ba:	f47f af4a 	bne.w	800d252 <WM__InvalidateDrawAndDescs+0xe2>
 800d3be:	a808      	add	r0, sp, #32
 800d3c0:	f7fa f81a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	f7f9 fffb 	bl	80073c0 <GUI_ALLOC_h2p>
 800d3ca:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800d3ce:	f1bb 0f00 	cmp.w	fp, #0
 800d3d2:	f47f af24 	bne.w	800d21e <WM__InvalidateDrawAndDescs+0xae>
 800d3d6:	a807      	add	r0, sp, #28
 800d3d8:	f7fa f80e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d3dc:	9802      	ldr	r0, [sp, #8]
 800d3de:	f7f9 ffef 	bl	80073c0 <GUI_ALLOC_h2p>
 800d3e2:	6a03      	ldr	r3, [r0, #32]
 800d3e4:	9302      	str	r3, [sp, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f47f aefe 	bne.w	800d1e8 <WM__InvalidateDrawAndDescs+0x78>
 800d3ec:	a806      	add	r0, sp, #24
 800d3ee:	f7fa f803 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d3f2:	9803      	ldr	r0, [sp, #12]
 800d3f4:	f7f9 ffe4 	bl	80073c0 <GUI_ALLOC_h2p>
 800d3f8:	6a03      	ldr	r3, [r0, #32]
 800d3fa:	9303      	str	r3, [sp, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f47f aed8 	bne.w	800d1b2 <WM__InvalidateDrawAndDescs+0x42>
 800d402:	a805      	add	r0, sp, #20
 800d404:	f7f9 fff8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d408:	b00f      	add	sp, #60	; 0x3c
 800d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40e:	bf00      	nop
 800d410:	2001bddc 	.word	0x2001bddc

0800d414 <WM_InvalidateWindowAndDescsEx>:
 800d414:	b900      	cbnz	r0, 800d418 <WM_InvalidateWindowAndDescsEx+0x4>
 800d416:	4770      	bx	lr
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	b0a1      	sub	sp, #132	; 0x84
 800d41e:	4604      	mov	r4, r0
 800d420:	9201      	str	r2, [sp, #4]
 800d422:	460d      	mov	r5, r1
 800d424:	f7f9 ffd6 	bl	80073d4 <GUI_ALLOC_LockH>
 800d428:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d42a:	9005      	str	r0, [sp, #20]
 800d42c:	079a      	lsls	r2, r3, #30
 800d42e:	f140 8156 	bpl.w	800d6de <WM_InvalidateWindowAndDescsEx+0x2ca>
 800d432:	4602      	mov	r2, r0
 800d434:	4629      	mov	r1, r5
 800d436:	a80e      	add	r0, sp, #56	; 0x38
 800d438:	f7fb f950 	bl	80086dc <GUI__IntersectRects>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	f000 814e 	beq.w	800d6de <WM_InvalidateWindowAndDescsEx+0x2ca>
 800d442:	a805      	add	r0, sp, #20
 800d444:	f7f9 ffd8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d448:	4620      	mov	r0, r4
 800d44a:	9a01      	ldr	r2, [sp, #4]
 800d44c:	a90e      	add	r1, sp, #56	; 0x38
 800d44e:	f7ff fd17 	bl	800ce80 <_Invalidate1Abs>
 800d452:	4620      	mov	r0, r4
 800d454:	f001 fb3a 	bl	800eacc <WM_GetFirstChild>
 800d458:	4604      	mov	r4, r0
 800d45a:	2800      	cmp	r0, #0
 800d45c:	f000 8142 	beq.w	800d6e4 <WM_InvalidateWindowAndDescsEx+0x2d0>
 800d460:	4620      	mov	r0, r4
 800d462:	f7f9 ffb7 	bl	80073d4 <GUI_ALLOC_LockH>
 800d466:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d468:	9006      	str	r0, [sp, #24]
 800d46a:	079b      	lsls	r3, r3, #30
 800d46c:	f140 813d 	bpl.w	800d6ea <WM_InvalidateWindowAndDescsEx+0x2d6>
 800d470:	4602      	mov	r2, r0
 800d472:	a90e      	add	r1, sp, #56	; 0x38
 800d474:	a810      	add	r0, sp, #64	; 0x40
 800d476:	f7fb f931 	bl	80086dc <GUI__IntersectRects>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	f000 8135 	beq.w	800d6ea <WM_InvalidateWindowAndDescsEx+0x2d6>
 800d480:	a806      	add	r0, sp, #24
 800d482:	f7f9 ffb9 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d486:	9a01      	ldr	r2, [sp, #4]
 800d488:	a910      	add	r1, sp, #64	; 0x40
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7ff fcf8 	bl	800ce80 <_Invalidate1Abs>
 800d490:	4620      	mov	r0, r4
 800d492:	f001 fb1b 	bl	800eacc <WM_GetFirstChild>
 800d496:	4605      	mov	r5, r0
 800d498:	2800      	cmp	r0, #0
 800d49a:	f000 8118 	beq.w	800d6ce <WM_InvalidateWindowAndDescsEx+0x2ba>
 800d49e:	9402      	str	r4, [sp, #8]
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f7f9 ff97 	bl	80073d4 <GUI_ALLOC_LockH>
 800d4a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d4a8:	9007      	str	r0, [sp, #28]
 800d4aa:	079f      	lsls	r7, r3, #30
 800d4ac:	f140 8121 	bpl.w	800d6f2 <WM_InvalidateWindowAndDescsEx+0x2de>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	a910      	add	r1, sp, #64	; 0x40
 800d4b4:	a812      	add	r0, sp, #72	; 0x48
 800d4b6:	f7fb f911 	bl	80086dc <GUI__IntersectRects>
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	f000 8119 	beq.w	800d6f2 <WM_InvalidateWindowAndDescsEx+0x2de>
 800d4c0:	a807      	add	r0, sp, #28
 800d4c2:	f7f9 ff99 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d4c6:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	4652      	mov	r2, sl
 800d4ce:	a912      	add	r1, sp, #72	; 0x48
 800d4d0:	f7ff fcd6 	bl	800ce80 <_Invalidate1Abs>
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	f001 faf9 	bl	800eacc <WM_GetFirstChild>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f000 80ef 	beq.w	800d6be <WM_InvalidateWindowAndDescsEx+0x2aa>
 800d4e0:	9503      	str	r5, [sp, #12]
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f7f9 ff75 	bl	80073d4 <GUI_ALLOC_LockH>
 800d4ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d4ec:	9008      	str	r0, [sp, #32]
 800d4ee:	079e      	lsls	r6, r3, #30
 800d4f0:	f140 8103 	bpl.w	800d6fa <WM_InvalidateWindowAndDescsEx+0x2e6>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	a912      	add	r1, sp, #72	; 0x48
 800d4f8:	a814      	add	r0, sp, #80	; 0x50
 800d4fa:	f7fb f8ef 	bl	80086dc <GUI__IntersectRects>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	f000 80fb 	beq.w	800d6fa <WM_InvalidateWindowAndDescsEx+0x2e6>
 800d504:	a808      	add	r0, sp, #32
 800d506:	f7f9 ff77 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d50a:	4628      	mov	r0, r5
 800d50c:	4652      	mov	r2, sl
 800d50e:	a914      	add	r1, sp, #80	; 0x50
 800d510:	f7ff fcb6 	bl	800ce80 <_Invalidate1Abs>
 800d514:	4628      	mov	r0, r5
 800d516:	f001 fad9 	bl	800eacc <WM_GetFirstChild>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f000 80c7 	beq.w	800d6ae <WM_InvalidateWindowAndDescsEx+0x29a>
 800d520:	46ab      	mov	fp, r5
 800d522:	4680      	mov	r8, r0
 800d524:	4640      	mov	r0, r8
 800d526:	f7f9 ff55 	bl	80073d4 <GUI_ALLOC_LockH>
 800d52a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d52c:	9009      	str	r0, [sp, #36]	; 0x24
 800d52e:	079d      	lsls	r5, r3, #30
 800d530:	f140 80e7 	bpl.w	800d702 <WM_InvalidateWindowAndDescsEx+0x2ee>
 800d534:	4602      	mov	r2, r0
 800d536:	a914      	add	r1, sp, #80	; 0x50
 800d538:	a816      	add	r0, sp, #88	; 0x58
 800d53a:	f7fb f8cf 	bl	80086dc <GUI__IntersectRects>
 800d53e:	2800      	cmp	r0, #0
 800d540:	f000 80df 	beq.w	800d702 <WM_InvalidateWindowAndDescsEx+0x2ee>
 800d544:	a809      	add	r0, sp, #36	; 0x24
 800d546:	f7f9 ff57 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d54a:	4640      	mov	r0, r8
 800d54c:	4652      	mov	r2, sl
 800d54e:	a916      	add	r1, sp, #88	; 0x58
 800d550:	f7ff fc96 	bl	800ce80 <_Invalidate1Abs>
 800d554:	4640      	mov	r0, r8
 800d556:	f001 fab9 	bl	800eacc <WM_GetFirstChild>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	f000 809d 	beq.w	800d69a <WM_InvalidateWindowAndDescsEx+0x286>
 800d560:	4681      	mov	r9, r0
 800d562:	4648      	mov	r0, r9
 800d564:	f7f9 ff36 	bl	80073d4 <GUI_ALLOC_LockH>
 800d568:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d56a:	900a      	str	r0, [sp, #40]	; 0x28
 800d56c:	079c      	lsls	r4, r3, #30
 800d56e:	f140 80d5 	bpl.w	800d71c <WM_InvalidateWindowAndDescsEx+0x308>
 800d572:	4602      	mov	r2, r0
 800d574:	a916      	add	r1, sp, #88	; 0x58
 800d576:	a818      	add	r0, sp, #96	; 0x60
 800d578:	f7fb f8b0 	bl	80086dc <GUI__IntersectRects>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	f000 80cd 	beq.w	800d71c <WM_InvalidateWindowAndDescsEx+0x308>
 800d582:	a80a      	add	r0, sp, #40	; 0x28
 800d584:	f7f9 ff38 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d588:	4652      	mov	r2, sl
 800d58a:	a918      	add	r1, sp, #96	; 0x60
 800d58c:	4648      	mov	r0, r9
 800d58e:	f7ff fc77 	bl	800ce80 <_Invalidate1Abs>
 800d592:	4648      	mov	r0, r9
 800d594:	f001 fa9a 	bl	800eacc <WM_GetFirstChild>
 800d598:	4605      	mov	r5, r0
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d074      	beq.n	800d688 <WM_InvalidateWindowAndDescsEx+0x274>
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f7f9 ff18 	bl	80073d4 <GUI_ALLOC_LockH>
 800d5a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d5a6:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5a8:	0799      	lsls	r1, r3, #30
 800d5aa:	f140 80c4 	bpl.w	800d736 <WM_InvalidateWindowAndDescsEx+0x322>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	a918      	add	r1, sp, #96	; 0x60
 800d5b2:	a81a      	add	r0, sp, #104	; 0x68
 800d5b4:	f7fb f892 	bl	80086dc <GUI__IntersectRects>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	f000 80bc 	beq.w	800d736 <WM_InvalidateWindowAndDescsEx+0x322>
 800d5be:	a80b      	add	r0, sp, #44	; 0x2c
 800d5c0:	f7f9 ff1a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d5c4:	4652      	mov	r2, sl
 800d5c6:	a91a      	add	r1, sp, #104	; 0x68
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	f7ff fc59 	bl	800ce80 <_Invalidate1Abs>
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	f001 fa7c 	bl	800eacc <WM_GetFirstChild>
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d050      	beq.n	800d67c <WM_InvalidateWindowAndDescsEx+0x268>
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7f9 fefa 	bl	80073d4 <GUI_ALLOC_LockH>
 800d5e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d5e2:	900c      	str	r0, [sp, #48]	; 0x30
 800d5e4:	079a      	lsls	r2, r3, #30
 800d5e6:	f140 80b1 	bpl.w	800d74c <WM_InvalidateWindowAndDescsEx+0x338>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	a91a      	add	r1, sp, #104	; 0x68
 800d5ee:	a81c      	add	r0, sp, #112	; 0x70
 800d5f0:	f7fb f874 	bl	80086dc <GUI__IntersectRects>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f000 80a9 	beq.w	800d74c <WM_InvalidateWindowAndDescsEx+0x338>
 800d5fa:	a80c      	add	r0, sp, #48	; 0x30
 800d5fc:	f7f9 fefc 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d600:	4652      	mov	r2, sl
 800d602:	a91c      	add	r1, sp, #112	; 0x70
 800d604:	4630      	mov	r0, r6
 800d606:	f7ff fc3b 	bl	800ce80 <_Invalidate1Abs>
 800d60a:	4630      	mov	r0, r6
 800d60c:	f001 fa5e 	bl	800eacc <WM_GetFirstChild>
 800d610:	4607      	mov	r7, r0
 800d612:	b368      	cbz	r0, 800d670 <WM_InvalidateWindowAndDescsEx+0x25c>
 800d614:	4638      	mov	r0, r7
 800d616:	f7f9 fedd 	bl	80073d4 <GUI_ALLOC_LockH>
 800d61a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d61c:	900d      	str	r0, [sp, #52]	; 0x34
 800d61e:	079b      	lsls	r3, r3, #30
 800d620:	f140 809f 	bpl.w	800d762 <WM_InvalidateWindowAndDescsEx+0x34e>
 800d624:	4602      	mov	r2, r0
 800d626:	a91c      	add	r1, sp, #112	; 0x70
 800d628:	a81e      	add	r0, sp, #120	; 0x78
 800d62a:	f7fb f857 	bl	80086dc <GUI__IntersectRects>
 800d62e:	2800      	cmp	r0, #0
 800d630:	f000 8097 	beq.w	800d762 <WM_InvalidateWindowAndDescsEx+0x34e>
 800d634:	a80d      	add	r0, sp, #52	; 0x34
 800d636:	f7f9 fedf 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d63a:	4652      	mov	r2, sl
 800d63c:	a91e      	add	r1, sp, #120	; 0x78
 800d63e:	4638      	mov	r0, r7
 800d640:	f7ff fc1e 	bl	800ce80 <_Invalidate1Abs>
 800d644:	4638      	mov	r0, r7
 800d646:	f001 fa41 	bl	800eacc <WM_GetFirstChild>
 800d64a:	4604      	mov	r4, r0
 800d64c:	b150      	cbz	r0, 800d664 <WM_InvalidateWindowAndDescsEx+0x250>
 800d64e:	4620      	mov	r0, r4
 800d650:	4652      	mov	r2, sl
 800d652:	a91e      	add	r1, sp, #120	; 0x78
 800d654:	f7ff fede 	bl	800d414 <WM_InvalidateWindowAndDescsEx>
 800d658:	4620      	mov	r0, r4
 800d65a:	f7f9 feb1 	bl	80073c0 <GUI_ALLOC_h2p>
 800d65e:	6a04      	ldr	r4, [r0, #32]
 800d660:	2c00      	cmp	r4, #0
 800d662:	d1f4      	bne.n	800d64e <WM_InvalidateWindowAndDescsEx+0x23a>
 800d664:	4638      	mov	r0, r7
 800d666:	f7f9 feab 	bl	80073c0 <GUI_ALLOC_h2p>
 800d66a:	6a07      	ldr	r7, [r0, #32]
 800d66c:	2f00      	cmp	r7, #0
 800d66e:	d1d1      	bne.n	800d614 <WM_InvalidateWindowAndDescsEx+0x200>
 800d670:	4630      	mov	r0, r6
 800d672:	f7f9 fea5 	bl	80073c0 <GUI_ALLOC_h2p>
 800d676:	6a06      	ldr	r6, [r0, #32]
 800d678:	2e00      	cmp	r6, #0
 800d67a:	d1ae      	bne.n	800d5da <WM_InvalidateWindowAndDescsEx+0x1c6>
 800d67c:	4628      	mov	r0, r5
 800d67e:	f7f9 fe9f 	bl	80073c0 <GUI_ALLOC_h2p>
 800d682:	6a05      	ldr	r5, [r0, #32]
 800d684:	2d00      	cmp	r5, #0
 800d686:	d18a      	bne.n	800d59e <WM_InvalidateWindowAndDescsEx+0x18a>
 800d688:	4648      	mov	r0, r9
 800d68a:	f7f9 fe99 	bl	80073c0 <GUI_ALLOC_h2p>
 800d68e:	f8d0 9020 	ldr.w	r9, [r0, #32]
 800d692:	f1b9 0f00 	cmp.w	r9, #0
 800d696:	f47f af64 	bne.w	800d562 <WM_InvalidateWindowAndDescsEx+0x14e>
 800d69a:	4640      	mov	r0, r8
 800d69c:	f7f9 fe90 	bl	80073c0 <GUI_ALLOC_h2p>
 800d6a0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800d6a4:	f1b8 0f00 	cmp.w	r8, #0
 800d6a8:	f47f af3c 	bne.w	800d524 <WM_InvalidateWindowAndDescsEx+0x110>
 800d6ac:	465d      	mov	r5, fp
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f7f9 fe86 	bl	80073c0 <GUI_ALLOC_h2p>
 800d6b4:	6a05      	ldr	r5, [r0, #32]
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	f47f af14 	bne.w	800d4e4 <WM_InvalidateWindowAndDescsEx+0xd0>
 800d6bc:	9d03      	ldr	r5, [sp, #12]
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f7f9 fe7e 	bl	80073c0 <GUI_ALLOC_h2p>
 800d6c4:	6a05      	ldr	r5, [r0, #32]
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	f47f aeea 	bne.w	800d4a0 <WM_InvalidateWindowAndDescsEx+0x8c>
 800d6cc:	9c02      	ldr	r4, [sp, #8]
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f7f9 fe76 	bl	80073c0 <GUI_ALLOC_h2p>
 800d6d4:	6a04      	ldr	r4, [r0, #32]
 800d6d6:	2c00      	cmp	r4, #0
 800d6d8:	f47f aec2 	bne.w	800d460 <WM_InvalidateWindowAndDescsEx+0x4c>
 800d6dc:	e002      	b.n	800d6e4 <WM_InvalidateWindowAndDescsEx+0x2d0>
 800d6de:	a805      	add	r0, sp, #20
 800d6e0:	f7f9 fe8a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d6e4:	b021      	add	sp, #132	; 0x84
 800d6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ea:	a806      	add	r0, sp, #24
 800d6ec:	f7f9 fe84 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d6f0:	e7ed      	b.n	800d6ce <WM_InvalidateWindowAndDescsEx+0x2ba>
 800d6f2:	a807      	add	r0, sp, #28
 800d6f4:	f7f9 fe80 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d6f8:	e7e1      	b.n	800d6be <WM_InvalidateWindowAndDescsEx+0x2aa>
 800d6fa:	a808      	add	r0, sp, #32
 800d6fc:	f7f9 fe7c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d700:	e7d5      	b.n	800d6ae <WM_InvalidateWindowAndDescsEx+0x29a>
 800d702:	a809      	add	r0, sp, #36	; 0x24
 800d704:	f7f9 fe78 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d708:	4640      	mov	r0, r8
 800d70a:	f7f9 fe59 	bl	80073c0 <GUI_ALLOC_h2p>
 800d70e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800d712:	f1b8 0f00 	cmp.w	r8, #0
 800d716:	f47f af05 	bne.w	800d524 <WM_InvalidateWindowAndDescsEx+0x110>
 800d71a:	e7c7      	b.n	800d6ac <WM_InvalidateWindowAndDescsEx+0x298>
 800d71c:	a80a      	add	r0, sp, #40	; 0x28
 800d71e:	f7f9 fe6b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d722:	4648      	mov	r0, r9
 800d724:	f7f9 fe4c 	bl	80073c0 <GUI_ALLOC_h2p>
 800d728:	f8d0 9020 	ldr.w	r9, [r0, #32]
 800d72c:	f1b9 0f00 	cmp.w	r9, #0
 800d730:	f47f af17 	bne.w	800d562 <WM_InvalidateWindowAndDescsEx+0x14e>
 800d734:	e7b1      	b.n	800d69a <WM_InvalidateWindowAndDescsEx+0x286>
 800d736:	a80b      	add	r0, sp, #44	; 0x2c
 800d738:	f7f9 fe5e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d73c:	4628      	mov	r0, r5
 800d73e:	f7f9 fe3f 	bl	80073c0 <GUI_ALLOC_h2p>
 800d742:	6a05      	ldr	r5, [r0, #32]
 800d744:	2d00      	cmp	r5, #0
 800d746:	f47f af2a 	bne.w	800d59e <WM_InvalidateWindowAndDescsEx+0x18a>
 800d74a:	e79d      	b.n	800d688 <WM_InvalidateWindowAndDescsEx+0x274>
 800d74c:	a80c      	add	r0, sp, #48	; 0x30
 800d74e:	f7f9 fe53 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d752:	4630      	mov	r0, r6
 800d754:	f7f9 fe34 	bl	80073c0 <GUI_ALLOC_h2p>
 800d758:	6a06      	ldr	r6, [r0, #32]
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	f47f af3d 	bne.w	800d5da <WM_InvalidateWindowAndDescsEx+0x1c6>
 800d760:	e78c      	b.n	800d67c <WM_InvalidateWindowAndDescsEx+0x268>
 800d762:	a80d      	add	r0, sp, #52	; 0x34
 800d764:	f7f9 fe48 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d768:	4638      	mov	r0, r7
 800d76a:	f7f9 fe29 	bl	80073c0 <GUI_ALLOC_h2p>
 800d76e:	6a07      	ldr	r7, [r0, #32]
 800d770:	2f00      	cmp	r7, #0
 800d772:	f47f af4f 	bne.w	800d614 <WM_InvalidateWindowAndDescsEx+0x200>
 800d776:	e77b      	b.n	800d670 <WM_InvalidateWindowAndDescsEx+0x25c>

0800d778 <WM__InvalidateRect>:
 800d778:	b901      	cbnz	r1, 800d77c <WM__InvalidateRect+0x4>
 800d77a:	4770      	bx	lr
 800d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d780:	4605      	mov	r5, r0
 800d782:	b086      	sub	sp, #24
 800d784:	4608      	mov	r0, r1
 800d786:	460c      	mov	r4, r1
 800d788:	461e      	mov	r6, r3
 800d78a:	4617      	mov	r7, r2
 800d78c:	f7f9 fe22 	bl	80073d4 <GUI_ALLOC_LockH>
 800d790:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800d794:	9000      	str	r0, [sp, #0]
 800d796:	f018 0f02 	tst.w	r8, #2
 800d79a:	d042      	beq.n	800d822 <WM__InvalidateRect+0xaa>
 800d79c:	4602      	mov	r2, r0
 800d79e:	4629      	mov	r1, r5
 800d7a0:	a802      	add	r0, sp, #8
 800d7a2:	f7fa ff9b 	bl	80086dc <GUI__IntersectRects>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d03b      	beq.n	800d822 <WM__InvalidateRect+0xaa>
 800d7aa:	f640 0301 	movw	r3, #2049	; 0x801
 800d7ae:	ea08 0303 	and.w	r3, r8, r3
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d03f      	beq.n	800d836 <WM__InvalidateRect+0xbe>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	a902      	add	r1, sp, #8
 800d7bc:	f7ff fb60 	bl	800ce80 <_Invalidate1Abs>
 800d7c0:	9b00      	ldr	r3, [sp, #0]
 800d7c2:	69dc      	ldr	r4, [r3, #28]
 800d7c4:	b36c      	cbz	r4, 800d822 <WM__InvalidateRect+0xaa>
 800d7c6:	42bc      	cmp	r4, r7
 800d7c8:	d02b      	beq.n	800d822 <WM__InvalidateRect+0xaa>
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f7f9 fe02 	bl	80073d4 <GUI_ALLOC_LockH>
 800d7d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d7d2:	9001      	str	r0, [sp, #4]
 800d7d4:	079b      	lsls	r3, r3, #30
 800d7d6:	d52a      	bpl.n	800d82e <WM__InvalidateRect+0xb6>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	a902      	add	r1, sp, #8
 800d7dc:	a804      	add	r0, sp, #16
 800d7de:	f7fa ff7d 	bl	80086dc <GUI__IntersectRects>
 800d7e2:	b320      	cbz	r0, 800d82e <WM__InvalidateRect+0xb6>
 800d7e4:	a801      	add	r0, sp, #4
 800d7e6:	f7f9 fe07 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	a904      	add	r1, sp, #16
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7ff fb46 	bl	800ce80 <_Invalidate1Abs>
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f001 f969 	bl	800eacc <WM_GetFirstChild>
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b150      	cbz	r0, 800d814 <WM__InvalidateRect+0x9c>
 800d7fe:	4628      	mov	r0, r5
 800d800:	4632      	mov	r2, r6
 800d802:	a904      	add	r1, sp, #16
 800d804:	f7ff fe06 	bl	800d414 <WM_InvalidateWindowAndDescsEx>
 800d808:	4628      	mov	r0, r5
 800d80a:	f7f9 fdd9 	bl	80073c0 <GUI_ALLOC_h2p>
 800d80e:	6a05      	ldr	r5, [r0, #32]
 800d810:	2d00      	cmp	r5, #0
 800d812:	d1f4      	bne.n	800d7fe <WM__InvalidateRect+0x86>
 800d814:	4620      	mov	r0, r4
 800d816:	f7f9 fdd3 	bl	80073c0 <GUI_ALLOC_h2p>
 800d81a:	6a04      	ldr	r4, [r0, #32]
 800d81c:	b10c      	cbz	r4, 800d822 <WM__InvalidateRect+0xaa>
 800d81e:	42a7      	cmp	r7, r4
 800d820:	d1d3      	bne.n	800d7ca <WM__InvalidateRect+0x52>
 800d822:	4668      	mov	r0, sp
 800d824:	f7f9 fde8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d828:	b006      	add	sp, #24
 800d82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d82e:	a801      	add	r0, sp, #4
 800d830:	f7f9 fde2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d834:	e7ee      	b.n	800d814 <WM__InvalidateRect+0x9c>
 800d836:	9900      	ldr	r1, [sp, #0]
 800d838:	4633      	mov	r3, r6
 800d83a:	6a0a      	ldr	r2, [r1, #32]
 800d83c:	6989      	ldr	r1, [r1, #24]
 800d83e:	a802      	add	r0, sp, #8
 800d840:	f7ff ff9a 	bl	800d778 <WM__InvalidateRect>
 800d844:	e7bc      	b.n	800d7c0 <WM__InvalidateRect+0x48>
 800d846:	bf00      	nop

0800d848 <WM_InvalidateRect.part.2>:
 800d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84c:	b086      	sub	sp, #24
 800d84e:	460c      	mov	r4, r1
 800d850:	4680      	mov	r8, r0
 800d852:	f7f9 fdbf 	bl	80073d4 <GUI_ALLOC_LockH>
 800d856:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800d858:	9000      	str	r0, [sp, #0]
 800d85a:	07b9      	lsls	r1, r7, #30
 800d85c:	d52e      	bpl.n	800d8bc <WM_InvalidateRect.part.2+0x74>
 800d85e:	c803      	ldmia	r0, {r0, r1}
 800d860:	ae04      	add	r6, sp, #16
 800d862:	03fa      	lsls	r2, r7, #15
 800d864:	e886 0003 	stmia.w	r6, {r0, r1}
 800d868:	d447      	bmi.n	800d8fa <WM_InvalidateRect.part.2+0xb2>
 800d86a:	b17c      	cbz	r4, 800d88c <WM_InvalidateRect.part.2+0x44>
 800d86c:	6820      	ldr	r0, [r4, #0]
 800d86e:	6861      	ldr	r1, [r4, #4]
 800d870:	9c00      	ldr	r4, [sp, #0]
 800d872:	ab02      	add	r3, sp, #8
 800d874:	c303      	stmia	r3!, {r0, r1}
 800d876:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d87a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d87e:	a802      	add	r0, sp, #8
 800d880:	f7f9 ff64 	bl	800774c <GUI_MoveRect>
 800d884:	a902      	add	r1, sp, #8
 800d886:	4630      	mov	r0, r6
 800d888:	f7fa ff0a 	bl	80086a0 <GUI__IntersectRect>
 800d88c:	4645      	mov	r5, r8
 800d88e:	e008      	b.n	800d8a2 <WM_InvalidateRect.part.2+0x5a>
 800d890:	f7fa ff06 	bl	80086a0 <GUI__IntersectRect>
 800d894:	9b01      	ldr	r3, [sp, #4]
 800d896:	699c      	ldr	r4, [r3, #24]
 800d898:	a801      	add	r0, sp, #4
 800d89a:	b1ac      	cbz	r4, 800d8c8 <WM_InvalidateRect.part.2+0x80>
 800d89c:	f7f9 fdac 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d8a0:	4625      	mov	r5, r4
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f7f9 fd96 	bl	80073d4 <GUI_ALLOC_LockH>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8ae:	0793      	lsls	r3, r2, #30
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	d4ec      	bmi.n	800d890 <WM_InvalidateRect.part.2+0x48>
 800d8b6:	a801      	add	r0, sp, #4
 800d8b8:	f7f9 fd9e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d8bc:	4668      	mov	r0, sp
 800d8be:	f7f9 fd9b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d8c2:	b006      	add	sp, #24
 800d8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c8:	f7f9 fd96 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d8cc:	4b12      	ldr	r3, [pc, #72]	; (800d918 <WM_InvalidateRect.part.2+0xd0>)
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	42aa      	cmp	r2, r5
 800d8d2:	d002      	beq.n	800d8da <WM_InvalidateRect.part.2+0x92>
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	429d      	cmp	r5, r3
 800d8d8:	d1f0      	bne.n	800d8bc <WM_InvalidateRect.part.2+0x74>
 800d8da:	f640 0301 	movw	r3, #2049	; 0x801
 800d8de:	403b      	ands	r3, r7
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d010      	beq.n	800d906 <WM_InvalidateRect.part.2+0xbe>
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f7ff fac9 	bl	800ce80 <_Invalidate1Abs>
 800d8ee:	4668      	mov	r0, sp
 800d8f0:	f7f9 fd82 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800d8f4:	b006      	add	sp, #24
 800d8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fa:	4640      	mov	r0, r8
 800d8fc:	f7ff fc38 	bl	800d170 <WM__InvalidateDrawAndDescs>
 800d900:	2c00      	cmp	r4, #0
 800d902:	d1b3      	bne.n	800d86c <WM_InvalidateRect.part.2+0x24>
 800d904:	e7c2      	b.n	800d88c <WM_InvalidateRect.part.2+0x44>
 800d906:	9b00      	ldr	r3, [sp, #0]
 800d908:	4630      	mov	r0, r6
 800d90a:	6a1a      	ldr	r2, [r3, #32]
 800d90c:	6999      	ldr	r1, [r3, #24]
 800d90e:	2320      	movs	r3, #32
 800d910:	f7ff ff32 	bl	800d778 <WM__InvalidateRect>
 800d914:	e7d2      	b.n	800d8bc <WM_InvalidateRect.part.2+0x74>
 800d916:	bf00      	nop
 800d918:	2001bd90 	.word	0x2001bd90

0800d91c <_cbBackWin>:
 800d91c:	6803      	ldr	r3, [r0, #0]
 800d91e:	2b0e      	cmp	r3, #14
 800d920:	d034      	beq.n	800d98c <_cbBackWin+0x70>
 800d922:	2b0f      	cmp	r3, #15
 800d924:	b510      	push	{r4, lr}
 800d926:	4604      	mov	r4, r0
 800d928:	d116      	bne.n	800d958 <_cbBackWin+0x3c>
 800d92a:	4a26      	ldr	r2, [pc, #152]	; (800d9c4 <_cbBackWin+0xa8>)
 800d92c:	6843      	ldr	r3, [r0, #4]
 800d92e:	6811      	ldr	r1, [r2, #0]
 800d930:	428b      	cmp	r3, r1
 800d932:	d045      	beq.n	800d9c0 <_cbBackWin+0xa4>
 800d934:	6852      	ldr	r2, [r2, #4]
 800d936:	4293      	cmp	r3, r2
 800d938:	bf14      	ite	ne
 800d93a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800d93e:	2301      	moveq	r3, #1
 800d940:	4a21      	ldr	r2, [pc, #132]	; (800d9c8 <_cbBackWin+0xac>)
 800d942:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d946:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d94a:	4298      	cmp	r0, r3
 800d94c:	d01b      	beq.n	800d986 <_cbBackWin+0x6a>
 800d94e:	f7f9 ff81 	bl	8007854 <GUI_SetBkColor>
 800d952:	f7fa f82f 	bl	80079b4 <GUI_Clear>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	6860      	ldr	r0, [r4, #4]
 800d95a:	3b0e      	subs	r3, #14
 800d95c:	2b1a      	cmp	r3, #26
 800d95e:	d812      	bhi.n	800d986 <_cbBackWin+0x6a>
 800d960:	e8df f003 	tbb	[pc, r3]
 800d964:	11111119 	.word	0x11111119
 800d968:	110e1111 	.word	0x110e1111
 800d96c:	11111e11 	.word	0x11111e11
 800d970:	11111111 	.word	0x11111111
 800d974:	11111111 	.word	0x11111111
 800d978:	11111120 	.word	0x11111120
 800d97c:	1111      	.short	0x1111
 800d97e:	24          	.byte	0x24
 800d97f:	00          	.byte	0x00
 800d980:	68e1      	ldr	r1, [r4, #12]
 800d982:	f001 fbc3 	bl	800f10c <WM__GetClientRectEx>
 800d986:	2300      	movs	r3, #0
 800d988:	60e3      	str	r3, [r4, #12]
 800d98a:	bd10      	pop	{r4, pc}
 800d98c:	68c3      	ldr	r3, [r0, #12]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	2a01      	cmp	r2, #1
 800d992:	d012      	beq.n	800d9ba <_cbBackWin+0x9e>
 800d994:	4770      	bx	lr
 800d996:	4621      	mov	r1, r4
 800d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d99c:	f001 b8f2 	b.w	800eb84 <WM_SendToParent>
 800d9a0:	60e0      	str	r0, [r4, #12]
 800d9a2:	bd10      	pop	{r4, pc}
 800d9a4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d9a8:	60e3      	str	r3, [r4, #12]
 800d9aa:	bd10      	pop	{r4, pc}
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d0ec      	beq.n	800d98a <_cbBackWin+0x6e>
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b6:	f7ff bf47 	b.w	800d848 <WM_InvalidateRect.part.2>
 800d9ba:	6818      	ldr	r0, [r3, #0]
 800d9bc:	f7fa bae2 	b.w	8007f84 <GUI_StoreKey>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	e7bd      	b.n	800d940 <_cbBackWin+0x24>
 800d9c4:	2001bd90 	.word	0x2001bd90
 800d9c8:	2001bdc4 	.word	0x2001bdc4

0800d9cc <WM_DeleteWindow.part.3>:
 800d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d0:	4e7d      	ldr	r6, [pc, #500]	; (800dbc8 <WM_DeleteWindow.part.3+0x1fc>)
 800d9d2:	6833      	ldr	r3, [r6, #0]
 800d9d4:	b086      	sub	sp, #24
 800d9d6:	b15b      	cbz	r3, 800d9f0 <WM_DeleteWindow.part.3+0x24>
 800d9d8:	4283      	cmp	r3, r0
 800d9da:	4604      	mov	r4, r0
 800d9dc:	d102      	bne.n	800d9e4 <WM_DeleteWindow.part.3+0x18>
 800d9de:	e00a      	b.n	800d9f6 <WM_DeleteWindow.part.3+0x2a>
 800d9e0:	429c      	cmp	r4, r3
 800d9e2:	d008      	beq.n	800d9f6 <WM_DeleteWindow.part.3+0x2a>
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f9 fceb 	bl	80073c0 <GUI_ALLOC_h2p>
 800d9ea:	6943      	ldr	r3, [r0, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1f7      	bne.n	800d9e0 <WM_DeleteWindow.part.3+0x14>
 800d9f0:	b006      	add	sp, #24
 800d9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f6:	4625      	mov	r5, r4
 800d9f8:	e000      	b.n	800d9fc <WM_DeleteWindow.part.3+0x30>
 800d9fa:	461d      	mov	r5, r3
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f7f9 fcdf 	bl	80073c0 <GUI_ALLOC_h2p>
 800da02:	6983      	ldr	r3, [r0, #24]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1f8      	bne.n	800d9fa <WM_DeleteWindow.part.3+0x2e>
 800da08:	4f70      	ldr	r7, [pc, #448]	; (800dbcc <WM_DeleteWindow.part.3+0x200>)
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	4295      	cmp	r5, r2
 800da0e:	f000 80d2 	beq.w	800dbb6 <WM_DeleteWindow.part.3+0x1ea>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	429d      	cmp	r5, r3
 800da16:	bf14      	ite	ne
 800da18:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800da1c:	2501      	moveq	r5, #1
 800da1e:	f10d 0818 	add.w	r8, sp, #24
 800da22:	230b      	movs	r3, #11
 800da24:	f848 3d10 	str.w	r3, [r8, #-16]!
 800da28:	4620      	mov	r0, r4
 800da2a:	4641      	mov	r1, r8
 800da2c:	9403      	str	r4, [sp, #12]
 800da2e:	f001 fab3 	bl	800ef98 <WM__SendMessage>
 800da32:	4620      	mov	r0, r4
 800da34:	f001 fa5e 	bl	800eef4 <WM__DeleteAssocTimer>
 800da38:	4620      	mov	r0, r4
 800da3a:	f7f9 fccb 	bl	80073d4 <GUI_ALLOC_LockH>
 800da3e:	9001      	str	r0, [sp, #4]
 800da40:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800da42:	2800      	cmp	r0, #0
 800da44:	f040 809b 	bne.w	800db7e <WM_DeleteWindow.part.3+0x1b2>
 800da48:	4b61      	ldr	r3, [pc, #388]	; (800dbd0 <WM_DeleteWindow.part.3+0x204>)
 800da4a:	4a62      	ldr	r2, [pc, #392]	; (800dbd4 <WM_DeleteWindow.part.3+0x208>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4862      	ldr	r0, [pc, #392]	; (800dbd8 <WM_DeleteWindow.part.3+0x20c>)
 800da50:	2100      	movs	r1, #0
 800da52:	6081      	str	r1, [r0, #8]
 800da54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800da58:	4284      	cmp	r4, r0
 800da5a:	bf08      	it	eq
 800da5c:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800da60:	4a5e      	ldr	r2, [pc, #376]	; (800dbdc <WM_DeleteWindow.part.3+0x210>)
 800da62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800da66:	428c      	cmp	r4, r1
 800da68:	bf04      	itt	eq
 800da6a:	2100      	moveq	r1, #0
 800da6c:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800da70:	4b5b      	ldr	r3, [pc, #364]	; (800dbe0 <WM_DeleteWindow.part.3+0x214>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2100      	movs	r1, #0
 800da76:	b133      	cbz	r3, 800da86 <WM_DeleteWindow.part.3+0xba>
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	4294      	cmp	r4, r2
 800da7c:	bf08      	it	eq
 800da7e:	6059      	streq	r1, [r3, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1f8      	bne.n	800da78 <WM_DeleteWindow.part.3+0xac>
 800da86:	4620      	mov	r0, r4
 800da88:	2107      	movs	r1, #7
 800da8a:	f001 f83b 	bl	800eb04 <WM_NotifyParent>
 800da8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800da92:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800da96:	2800      	cmp	r0, #0
 800da98:	d157      	bne.n	800db4a <WM_DeleteWindow.part.3+0x17e>
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7f9 fc9a 	bl	80073d4 <GUI_ALLOC_LockH>
 800daa0:	6981      	ldr	r1, [r0, #24]
 800daa2:	9002      	str	r0, [sp, #8]
 800daa4:	2900      	cmp	r1, #0
 800daa6:	d15c      	bne.n	800db62 <WM_DeleteWindow.part.3+0x196>
 800daa8:	4640      	mov	r0, r8
 800daaa:	f7f9 fca5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800daae:	6830      	ldr	r0, [r6, #0]
 800dab0:	b158      	cbz	r0, 800daca <WM_DeleteWindow.part.3+0xfe>
 800dab2:	f7f9 fc85 	bl	80073c0 <GUI_ALLOC_h2p>
 800dab6:	4680      	mov	r8, r0
 800dab8:	6940      	ldr	r0, [r0, #20]
 800daba:	4284      	cmp	r4, r0
 800dabc:	d1f8      	bne.n	800dab0 <WM_DeleteWindow.part.3+0xe4>
 800dabe:	4620      	mov	r0, r4
 800dac0:	f7f9 fc7e 	bl	80073c0 <GUI_ALLOC_h2p>
 800dac4:	6943      	ldr	r3, [r0, #20]
 800dac6:	f8c8 3014 	str.w	r3, [r8, #20]
 800daca:	9b01      	ldr	r3, [sp, #4]
 800dacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dace:	07d9      	lsls	r1, r3, #31
 800dad0:	d503      	bpl.n	800dada <WM_DeleteWindow.part.3+0x10e>
 800dad2:	4944      	ldr	r1, [pc, #272]	; (800dbe4 <WM_DeleteWindow.part.3+0x218>)
 800dad4:	680a      	ldr	r2, [r1, #0]
 800dad6:	3a01      	subs	r2, #1
 800dad8:	600a      	str	r2, [r1, #0]
 800dada:	069a      	lsls	r2, r3, #26
 800dadc:	d43c      	bmi.n	800db58 <WM_DeleteWindow.part.3+0x18c>
 800dade:	a801      	add	r0, sp, #4
 800dae0:	f7f9 fc8a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800dae4:	4a40      	ldr	r2, [pc, #256]	; (800dbe8 <WM_DeleteWindow.part.3+0x21c>)
 800dae6:	8813      	ldrh	r3, [r2, #0]
 800dae8:	4620      	mov	r0, r4
 800daea:	3b01      	subs	r3, #1
 800daec:	8013      	strh	r3, [r2, #0]
 800daee:	f7f9 fd55 	bl	800759c <GUI_ALLOC_Free>
 800daf2:	1c6b      	adds	r3, r5, #1
 800daf4:	f43f af7c 	beq.w	800d9f0 <WM_DeleteWindow.part.3+0x24>
 800daf8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800dbf0 <WM_DeleteWindow.part.3+0x224>
 800dafc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800db00:	f8d8 3000 	ldr.w	r3, [r8]
 800db04:	b905      	cbnz	r5, 800db08 <WM_DeleteWindow.part.3+0x13c>
 800db06:	6835      	ldr	r5, [r6, #0]
 800db08:	649d      	str	r5, [r3, #72]	; 0x48
 800db0a:	462c      	mov	r4, r5
 800db0c:	e000      	b.n	800db10 <WM_DeleteWindow.part.3+0x144>
 800db0e:	461c      	mov	r4, r3
 800db10:	4620      	mov	r0, r4
 800db12:	f7f9 fc55 	bl	80073c0 <GUI_ALLOC_h2p>
 800db16:	6983      	ldr	r3, [r0, #24]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1f8      	bne.n	800db0e <WM_DeleteWindow.part.3+0x142>
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	4a2b      	ldr	r2, [pc, #172]	; (800dbcc <WM_DeleteWindow.part.3+0x200>)
 800db20:	428c      	cmp	r4, r1
 800db22:	d04a      	beq.n	800dbba <WM_DeleteWindow.part.3+0x1ee>
 800db24:	6853      	ldr	r3, [r2, #4]
 800db26:	429c      	cmp	r4, r3
 800db28:	d04b      	beq.n	800dbc2 <WM_DeleteWindow.part.3+0x1f6>
 800db2a:	f7fb f9bf 	bl	8008eac <LCD_SetClipRectMax>
 800db2e:	4628      	mov	r0, r5
 800db30:	f7f9 fc46 	bl	80073c0 <GUI_ALLOC_h2p>
 800db34:	f8d8 3000 	ldr.w	r3, [r8]
 800db38:	f9b0 1000 	ldrsh.w	r1, [r0]
 800db3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800db40:	651a      	str	r2, [r3, #80]	; 0x50
 800db42:	64d9      	str	r1, [r3, #76]	; 0x4c
 800db44:	b006      	add	sp, #24
 800db46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4a:	f7ff ff3f 	bl	800d9cc <WM_DeleteWindow.part.3>
 800db4e:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800db52:	2800      	cmp	r0, #0
 800db54:	d19f      	bne.n	800da96 <WM_DeleteWindow.part.3+0xca>
 800db56:	e7a0      	b.n	800da9a <WM_DeleteWindow.part.3+0xce>
 800db58:	4a24      	ldr	r2, [pc, #144]	; (800dbec <WM_DeleteWindow.part.3+0x220>)
 800db5a:	8813      	ldrh	r3, [r2, #0]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	8013      	strh	r3, [r2, #0]
 800db60:	e7bd      	b.n	800dade <WM_DeleteWindow.part.3+0x112>
 800db62:	6a02      	ldr	r2, [r0, #32]
 800db64:	2320      	movs	r3, #32
 800db66:	f7ff fe07 	bl	800d778 <WM__InvalidateRect>
 800db6a:	4620      	mov	r0, r4
 800db6c:	f7f9 fc28 	bl	80073c0 <GUI_ALLOC_h2p>
 800db70:	4681      	mov	r9, r0
 800db72:	6980      	ldr	r0, [r0, #24]
 800db74:	b930      	cbnz	r0, 800db84 <WM_DeleteWindow.part.3+0x1b8>
 800db76:	9b02      	ldr	r3, [sp, #8]
 800db78:	2200      	movs	r2, #0
 800db7a:	619a      	str	r2, [r3, #24]
 800db7c:	e794      	b.n	800daa8 <WM_DeleteWindow.part.3+0xdc>
 800db7e:	f002 fab3 	bl	80100e8 <GUI_MEMDEV_Delete>
 800db82:	e761      	b.n	800da48 <WM_DeleteWindow.part.3+0x7c>
 800db84:	f7f9 fc1c 	bl	80073c0 <GUI_ALLOC_h2p>
 800db88:	69c3      	ldr	r3, [r0, #28]
 800db8a:	429c      	cmp	r4, r3
 800db8c:	4682      	mov	sl, r0
 800db8e:	d00b      	beq.n	800dba8 <WM_DeleteWindow.part.3+0x1dc>
 800db90:	2b00      	cmp	r3, #0
 800db92:	d0f0      	beq.n	800db76 <WM_DeleteWindow.part.3+0x1aa>
 800db94:	4618      	mov	r0, r3
 800db96:	f7f9 fc13 	bl	80073c0 <GUI_ALLOC_h2p>
 800db9a:	6a03      	ldr	r3, [r0, #32]
 800db9c:	429c      	cmp	r4, r3
 800db9e:	d1f7      	bne.n	800db90 <WM_DeleteWindow.part.3+0x1c4>
 800dba0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800dba4:	6203      	str	r3, [r0, #32]
 800dba6:	e7e6      	b.n	800db76 <WM_DeleteWindow.part.3+0x1aa>
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f7f9 fc09 	bl	80073c0 <GUI_ALLOC_h2p>
 800dbae:	6a03      	ldr	r3, [r0, #32]
 800dbb0:	f8ca 301c 	str.w	r3, [sl, #28]
 800dbb4:	e7df      	b.n	800db76 <WM_DeleteWindow.part.3+0x1aa>
 800dbb6:	461d      	mov	r5, r3
 800dbb8:	e731      	b.n	800da1e <WM_DeleteWindow.part.3+0x52>
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fa fa0c 	bl	8007fd8 <GUI_SelectLayer>
 800dbc0:	e7b3      	b.n	800db2a <WM_DeleteWindow.part.3+0x15e>
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	e7fa      	b.n	800dbbc <WM_DeleteWindow.part.3+0x1f0>
 800dbc6:	bf00      	nop
 800dbc8:	2001bdac 	.word	0x2001bdac
 800dbcc:	2001bd90 	.word	0x2001bd90
 800dbd0:	2001bdb0 	.word	0x2001bdb0
 800dbd4:	2001bda0 	.word	0x2001bda0
 800dbd8:	200001ec 	.word	0x200001ec
 800dbdc:	2001bdd4 	.word	0x2001bdd4
 800dbe0:	2001bdcc 	.word	0x2001bdcc
 800dbe4:	2001bde0 	.word	0x2001bde0
 800dbe8:	2001bd88 	.word	0x2001bd88
 800dbec:	2001bda8 	.word	0x2001bda8
 800dbf0:	20000018 	.word	0x20000018

0800dbf4 <_Exec1Input>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	4e1d      	ldr	r6, [pc, #116]	; (800dc6c <_Exec1Input+0x78>)
 800dbf8:	6873      	ldr	r3, [r6, #4]
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	b9cb      	cbnz	r3, 800dc32 <_Exec1Input+0x3e>
 800dbfe:	4b1c      	ldr	r3, [pc, #112]	; (800dc70 <_Exec1Input+0x7c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	b103      	cbz	r3, 800dc06 <_Exec1Input+0x12>
 800dc04:	4798      	blx	r3
 800dc06:	4b1b      	ldr	r3, [pc, #108]	; (800dc74 <_Exec1Input+0x80>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	b10b      	cbz	r3, 800dc10 <_Exec1Input+0x1c>
 800dc0c:	4798      	blx	r3
 800dc0e:	b968      	cbnz	r0, 800dc2c <_Exec1Input+0x38>
 800dc10:	4b19      	ldr	r3, [pc, #100]	; (800dc78 <_Exec1Input+0x84>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800dc18:	b908      	cbnz	r0, 800dc1e <_Exec1Input+0x2a>
 800dc1a:	b002      	add	sp, #8
 800dc1c:	bd70      	pop	{r4, r5, r6, pc}
 800dc1e:	f7fa f9b9 	bl	8007f94 <GUI_PollKeyMsg>
 800dc22:	3000      	adds	r0, #0
 800dc24:	bf18      	it	ne
 800dc26:	2001      	movne	r0, #1
 800dc28:	b002      	add	sp, #8
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}
 800dc2c:	2001      	movs	r0, #1
 800dc2e:	b002      	add	sp, #8
 800dc30:	bd70      	pop	{r4, r5, r6, pc}
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <_Exec1Input+0x88>)
 800dc34:	681c      	ldr	r4, [r3, #0]
 800dc36:	b18c      	cbz	r4, 800dc5c <_Exec1Input+0x68>
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f7f9 fbcb 	bl	80073d4 <GUI_ALLOC_LockH>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc44:	0412      	lsls	r2, r2, #16
 800dc46:	a801      	add	r0, sp, #4
 800dc48:	d50b      	bpl.n	800dc62 <_Exec1Input+0x6e>
 800dc4a:	695d      	ldr	r5, [r3, #20]
 800dc4c:	f7f9 fbd4 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800dc50:	4620      	mov	r0, r4
 800dc52:	462c      	mov	r4, r5
 800dc54:	f7ff feba 	bl	800d9cc <WM_DeleteWindow.part.3>
 800dc58:	2c00      	cmp	r4, #0
 800dc5a:	d1ed      	bne.n	800dc38 <_Exec1Input+0x44>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	6073      	str	r3, [r6, #4]
 800dc60:	e7cd      	b.n	800dbfe <_Exec1Input+0xa>
 800dc62:	a801      	add	r0, sp, #4
 800dc64:	695c      	ldr	r4, [r3, #20]
 800dc66:	f7f9 fbc7 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800dc6a:	e7e4      	b.n	800dc36 <_Exec1Input+0x42>
 800dc6c:	200001ec 	.word	0x200001ec
 800dc70:	2001bd98 	.word	0x2001bd98
 800dc74:	2001bd78 	.word	0x2001bd78
 800dc78:	20000018 	.word	0x20000018
 800dc7c:	2001bdac 	.word	0x2001bdac

0800dc80 <WM__InvalidateParent>:
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	4605      	mov	r5, r0
 800dc86:	b086      	sub	sp, #24
 800dc88:	4608      	mov	r0, r1
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	4617      	mov	r7, r2
 800dc8e:	f7f9 fb97 	bl	80073c0 <GUI_ALLOC_h2p>
 800dc92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dc94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800dc98:	bf14      	ite	ne
 800dc9a:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 800dc9e:	2620      	moveq	r6, #32
 800dca0:	b914      	cbnz	r4, 800dca8 <WM__InvalidateParent+0x28>
 800dca2:	b006      	add	sp, #24
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f7f9 fb93 	bl	80073d4 <GUI_ALLOC_LockH>
 800dcae:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800dcb2:	9000      	str	r0, [sp, #0]
 800dcb4:	f018 0f02 	tst.w	r8, #2
 800dcb8:	d041      	beq.n	800dd3e <WM__InvalidateParent+0xbe>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	a802      	add	r0, sp, #8
 800dcc0:	f7fa fd0c 	bl	80086dc <GUI__IntersectRects>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d03a      	beq.n	800dd3e <WM__InvalidateParent+0xbe>
 800dcc8:	f640 0301 	movw	r3, #2049	; 0x801
 800dccc:	ea08 0303 	and.w	r3, r8, r3
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d044      	beq.n	800dd5e <WM__InvalidateParent+0xde>
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	4632      	mov	r2, r6
 800dcd8:	a902      	add	r1, sp, #8
 800dcda:	f7ff f8d1 	bl	800ce80 <_Invalidate1Abs>
 800dcde:	9b00      	ldr	r3, [sp, #0]
 800dce0:	69dc      	ldr	r4, [r3, #28]
 800dce2:	b364      	cbz	r4, 800dd3e <WM__InvalidateParent+0xbe>
 800dce4:	42a7      	cmp	r7, r4
 800dce6:	d02a      	beq.n	800dd3e <WM__InvalidateParent+0xbe>
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7f9 fb73 	bl	80073d4 <GUI_ALLOC_LockH>
 800dcee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dcf0:	9001      	str	r0, [sp, #4]
 800dcf2:	079b      	lsls	r3, r3, #30
 800dcf4:	d529      	bpl.n	800dd4a <WM__InvalidateParent+0xca>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	a902      	add	r1, sp, #8
 800dcfa:	a804      	add	r0, sp, #16
 800dcfc:	f7fa fcee 	bl	80086dc <GUI__IntersectRects>
 800dd00:	b318      	cbz	r0, 800dd4a <WM__InvalidateParent+0xca>
 800dd02:	a801      	add	r0, sp, #4
 800dd04:	f7f9 fb78 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800dd08:	4632      	mov	r2, r6
 800dd0a:	a904      	add	r1, sp, #16
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f7ff f8b7 	bl	800ce80 <_Invalidate1Abs>
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 feda 	bl	800eacc <WM_GetFirstChild>
 800dd18:	4605      	mov	r5, r0
 800dd1a:	b150      	cbz	r0, 800dd32 <WM__InvalidateParent+0xb2>
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	4632      	mov	r2, r6
 800dd20:	a904      	add	r1, sp, #16
 800dd22:	f7ff fb77 	bl	800d414 <WM_InvalidateWindowAndDescsEx>
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7f9 fb4a 	bl	80073c0 <GUI_ALLOC_h2p>
 800dd2c:	6a05      	ldr	r5, [r0, #32]
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	d1f4      	bne.n	800dd1c <WM__InvalidateParent+0x9c>
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7f9 fb44 	bl	80073c0 <GUI_ALLOC_h2p>
 800dd38:	6a04      	ldr	r4, [r0, #32]
 800dd3a:	2c00      	cmp	r4, #0
 800dd3c:	d1d2      	bne.n	800dce4 <WM__InvalidateParent+0x64>
 800dd3e:	4668      	mov	r0, sp
 800dd40:	f7f9 fb5a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800dd44:	b006      	add	sp, #24
 800dd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd4a:	a801      	add	r0, sp, #4
 800dd4c:	f7f9 fb54 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7f9 fb35 	bl	80073c0 <GUI_ALLOC_h2p>
 800dd56:	6a04      	ldr	r4, [r0, #32]
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	d1c3      	bne.n	800dce4 <WM__InvalidateParent+0x64>
 800dd5c:	e7ef      	b.n	800dd3e <WM__InvalidateParent+0xbe>
 800dd5e:	9900      	ldr	r1, [sp, #0]
 800dd60:	4633      	mov	r3, r6
 800dd62:	6a0a      	ldr	r2, [r1, #32]
 800dd64:	6989      	ldr	r1, [r1, #24]
 800dd66:	a802      	add	r0, sp, #8
 800dd68:	f7ff fd06 	bl	800d778 <WM__InvalidateRect>
 800dd6c:	e7b7      	b.n	800dcde <WM__InvalidateParent+0x5e>
 800dd6e:	bf00      	nop

0800dd70 <WM__InvalidateRectEx>:
 800dd70:	b901      	cbnz	r1, 800dd74 <WM__InvalidateRectEx+0x4>
 800dd72:	4770      	bx	lr
 800dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd76:	4605      	mov	r5, r0
 800dd78:	b087      	sub	sp, #28
 800dd7a:	4608      	mov	r0, r1
 800dd7c:	4616      	mov	r6, r2
 800dd7e:	460c      	mov	r4, r1
 800dd80:	f7f9 fb28 	bl	80073d4 <GUI_ALLOC_LockH>
 800dd84:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800dd86:	9000      	str	r0, [sp, #0]
 800dd88:	07ba      	lsls	r2, r7, #30
 800dd8a:	d540      	bpl.n	800de0e <WM__InvalidateRectEx+0x9e>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	4629      	mov	r1, r5
 800dd90:	a802      	add	r0, sp, #8
 800dd92:	f7fa fca3 	bl	80086dc <GUI__IntersectRects>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d039      	beq.n	800de0e <WM__InvalidateRectEx+0x9e>
 800dd9a:	f640 0301 	movw	r3, #2049	; 0x801
 800dd9e:	403b      	ands	r3, r7
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d043      	beq.n	800de2c <WM__InvalidateRectEx+0xbc>
 800dda4:	4620      	mov	r0, r4
 800dda6:	2220      	movs	r2, #32
 800dda8:	a902      	add	r1, sp, #8
 800ddaa:	f7ff f869 	bl	800ce80 <_Invalidate1Abs>
 800ddae:	9b00      	ldr	r3, [sp, #0]
 800ddb0:	69dc      	ldr	r4, [r3, #28]
 800ddb2:	b364      	cbz	r4, 800de0e <WM__InvalidateRectEx+0x9e>
 800ddb4:	42a6      	cmp	r6, r4
 800ddb6:	d02a      	beq.n	800de0e <WM__InvalidateRectEx+0x9e>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f9 fb0b 	bl	80073d4 <GUI_ALLOC_LockH>
 800ddbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ddc0:	9001      	str	r0, [sp, #4]
 800ddc2:	079b      	lsls	r3, r3, #30
 800ddc4:	d528      	bpl.n	800de18 <WM__InvalidateRectEx+0xa8>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	a902      	add	r1, sp, #8
 800ddca:	a804      	add	r0, sp, #16
 800ddcc:	f7fa fc86 	bl	80086dc <GUI__IntersectRects>
 800ddd0:	b310      	cbz	r0, 800de18 <WM__InvalidateRectEx+0xa8>
 800ddd2:	a801      	add	r0, sp, #4
 800ddd4:	f7f9 fb10 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ddd8:	2220      	movs	r2, #32
 800ddda:	a904      	add	r1, sp, #16
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7ff f84f 	bl	800ce80 <_Invalidate1Abs>
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fe72 	bl	800eacc <WM_GetFirstChild>
 800dde8:	4605      	mov	r5, r0
 800ddea:	b150      	cbz	r0, 800de02 <WM__InvalidateRectEx+0x92>
 800ddec:	4628      	mov	r0, r5
 800ddee:	2220      	movs	r2, #32
 800ddf0:	a904      	add	r1, sp, #16
 800ddf2:	f7ff fb0f 	bl	800d414 <WM_InvalidateWindowAndDescsEx>
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f7f9 fae2 	bl	80073c0 <GUI_ALLOC_h2p>
 800ddfc:	6a05      	ldr	r5, [r0, #32]
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	d1f4      	bne.n	800ddec <WM__InvalidateRectEx+0x7c>
 800de02:	4620      	mov	r0, r4
 800de04:	f7f9 fadc 	bl	80073c0 <GUI_ALLOC_h2p>
 800de08:	6a04      	ldr	r4, [r0, #32]
 800de0a:	2c00      	cmp	r4, #0
 800de0c:	d1d2      	bne.n	800ddb4 <WM__InvalidateRectEx+0x44>
 800de0e:	4668      	mov	r0, sp
 800de10:	f7f9 faf2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800de14:	b007      	add	sp, #28
 800de16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de18:	a801      	add	r0, sp, #4
 800de1a:	f7f9 faed 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800de1e:	4620      	mov	r0, r4
 800de20:	f7f9 face 	bl	80073c0 <GUI_ALLOC_h2p>
 800de24:	6a04      	ldr	r4, [r0, #32]
 800de26:	2c00      	cmp	r4, #0
 800de28:	d1c4      	bne.n	800ddb4 <WM__InvalidateRectEx+0x44>
 800de2a:	e7f0      	b.n	800de0e <WM__InvalidateRectEx+0x9e>
 800de2c:	9900      	ldr	r1, [sp, #0]
 800de2e:	2320      	movs	r3, #32
 800de30:	6a0a      	ldr	r2, [r1, #32]
 800de32:	6989      	ldr	r1, [r1, #24]
 800de34:	a802      	add	r0, sp, #8
 800de36:	f7ff fc9f 	bl	800d778 <WM__InvalidateRect>
 800de3a:	e7b8      	b.n	800ddae <WM__InvalidateRectEx+0x3e>

0800de3c <WM__SendMsgNoData>:
 800de3c:	b500      	push	{lr}
 800de3e:	b085      	sub	sp, #20
 800de40:	ab04      	add	r3, sp, #16
 800de42:	9001      	str	r0, [sp, #4]
 800de44:	f843 1d10 	str.w	r1, [r3, #-16]!
 800de48:	4619      	mov	r1, r3
 800de4a:	f001 f8a5 	bl	800ef98 <WM__SendMessage>
 800de4e:	b005      	add	sp, #20
 800de50:	f85d fb04 	ldr.w	pc, [sp], #4

0800de54 <WM__GetClientRectWin>:
 800de54:	b430      	push	{r4, r5}
 800de56:	2300      	movs	r3, #0
 800de58:	800b      	strh	r3, [r1, #0]
 800de5a:	804b      	strh	r3, [r1, #2]
 800de5c:	8805      	ldrh	r5, [r0, #0]
 800de5e:	8844      	ldrh	r4, [r0, #2]
 800de60:	8882      	ldrh	r2, [r0, #4]
 800de62:	88c3      	ldrh	r3, [r0, #6]
 800de64:	1b52      	subs	r2, r2, r5
 800de66:	1b1b      	subs	r3, r3, r4
 800de68:	808a      	strh	r2, [r1, #4]
 800de6a:	80cb      	strh	r3, [r1, #6]
 800de6c:	bc30      	pop	{r4, r5}
 800de6e:	4770      	bx	lr

0800de70 <WM_CreateWindowAsChild>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	b087      	sub	sp, #28
 800de76:	4c69      	ldr	r4, [pc, #420]	; (800e01c <WM_CreateWindowAsChild+0x1ac>)
 800de78:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800de7a:	f8d4 a000 	ldr.w	sl, [r4]
 800de7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800de80:	4680      	mov	r8, r0
 800de82:	4689      	mov	r9, r1
 800de84:	4615      	mov	r5, r2
 800de86:	461e      	mov	r6, r3
 800de88:	b96f      	cbnz	r7, 800dea6 <WM_CreateWindowAsChild+0x36>
 800de8a:	4b65      	ldr	r3, [pc, #404]	; (800e020 <WM_CreateWindowAsChild+0x1b0>)
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d16c      	bne.n	800df6c <WM_CreateWindowAsChild+0xfc>
 800de92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800de96:	f7f9 fb9b 	bl	80075d0 <GUI_ALLOC_AllocZero>
 800de9a:	4604      	mov	r4, r0
 800de9c:	bb18      	cbnz	r0, 800dee6 <WM_CreateWindowAsChild+0x76>
 800de9e:	4620      	mov	r0, r4
 800dea0:	b007      	add	sp, #28
 800dea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea6:	1c7b      	adds	r3, r7, #1
 800dea8:	d06b      	beq.n	800df82 <WM_CreateWindowAsChild+0x112>
 800deaa:	4638      	mov	r0, r7
 800deac:	f7f9 fa92 	bl	80073d4 <GUI_ALLOC_LockH>
 800deb0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800deb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800deb8:	9001      	str	r0, [sp, #4]
 800deba:	4490      	add	r8, r2
 800debc:	4499      	add	r9, r3
 800debe:	b91d      	cbnz	r5, 800dec8 <WM_CreateWindowAsChild+0x58>
 800dec0:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800dec4:	1aad      	subs	r5, r5, r2
 800dec6:	3501      	adds	r5, #1
 800dec8:	b91e      	cbnz	r6, 800ded2 <WM_CreateWindowAsChild+0x62>
 800deca:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 800dece:	1af6      	subs	r6, r6, r3
 800ded0:	3601      	adds	r6, #1
 800ded2:	a801      	add	r0, sp, #4
 800ded4:	f7f9 fa90 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ded8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800dedc:	f7f9 fb78 	bl	80075d0 <GUI_ALLOC_AllocZero>
 800dee0:	4604      	mov	r4, r0
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d0db      	beq.n	800de9e <WM_CreateWindowAsChild+0x2e>
 800dee6:	4a4e      	ldr	r2, [pc, #312]	; (800e020 <WM_CreateWindowAsChild+0x1b0>)
 800dee8:	8813      	ldrh	r3, [r2, #0]
 800deea:	3301      	adds	r3, #1
 800deec:	8013      	strh	r3, [r2, #0]
 800deee:	f7f9 fa71 	bl	80073d4 <GUI_ALLOC_LockH>
 800def2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800def4:	4b4b      	ldr	r3, [pc, #300]	; (800e024 <WM_CreateWindowAsChild+0x1b4>)
 800def6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800def8:	f10d 0b18 	add.w	fp, sp, #24
 800defc:	ea4a 0a01 	orr.w	sl, sl, r1
 800df00:	f84b 0d18 	str.w	r0, [fp, #-24]!
 800df04:	4445      	add	r5, r8
 800df06:	444e      	add	r6, r9
 800df08:	ea0a 0303 	and.w	r3, sl, r3
 800df0c:	4313      	orrs	r3, r2
 800df0e:	3d01      	subs	r5, #1
 800df10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df12:	6283      	str	r3, [r0, #40]	; 0x28
 800df14:	3e01      	subs	r6, #1
 800df16:	8085      	strh	r5, [r0, #4]
 800df18:	80c6      	strh	r6, [r0, #6]
 800df1a:	6102      	str	r2, [r0, #16]
 800df1c:	f8a0 8000 	strh.w	r8, [r0]
 800df20:	f8a0 9002 	strh.w	r9, [r0, #2]
 800df24:	4658      	mov	r0, fp
 800df26:	f7f9 fa67 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800df2a:	4b3f      	ldr	r3, [pc, #252]	; (800e028 <WM_CreateWindowAsChild+0x1b8>)
 800df2c:	6818      	ldr	r0, [r3, #0]
 800df2e:	2800      	cmp	r0, #0
 800df30:	d155      	bne.n	800dfde <WM_CreateWindowAsChild+0x16e>
 800df32:	601c      	str	r4, [r3, #0]
 800df34:	4639      	mov	r1, r7
 800df36:	4620      	mov	r0, r4
 800df38:	f7ff f8ac 	bl	800d094 <WM__InsertWindowIntoList>
 800df3c:	f01a 0f20 	tst.w	sl, #32
 800df40:	d12d      	bne.n	800df9e <WM_CreateWindowAsChild+0x12e>
 800df42:	f01a 0f01 	tst.w	sl, #1
 800df46:	d11e      	bne.n	800df86 <WM_CreateWindowAsChild+0x116>
 800df48:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800df4c:	d123      	bne.n	800df96 <WM_CreateWindowAsChild+0x126>
 800df4e:	f01a 0f02 	tst.w	sl, #2
 800df52:	d152      	bne.n	800dffa <WM_CreateWindowAsChild+0x18a>
 800df54:	a906      	add	r1, sp, #24
 800df56:	2301      	movs	r3, #1
 800df58:	4620      	mov	r0, r4
 800df5a:	f841 3d10 	str.w	r3, [r1, #-16]!
 800df5e:	9403      	str	r4, [sp, #12]
 800df60:	f001 f81a 	bl	800ef98 <WM__SendMessage>
 800df64:	4620      	mov	r0, r4
 800df66:	b007      	add	sp, #28
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	4a2f      	ldr	r2, [pc, #188]	; (800e02c <WM_CreateWindowAsChild+0x1bc>)
 800df6e:	4b30      	ldr	r3, [pc, #192]	; (800e030 <WM_CreateWindowAsChild+0x1c0>)
 800df70:	6812      	ldr	r2, [r2, #0]
 800df72:	7c52      	ldrb	r2, [r2, #17]
 800df74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	2a01      	cmp	r2, #1
 800df7c:	d989      	bls.n	800de92 <WM_CreateWindowAsChild+0x22>
 800df7e:	461f      	mov	r7, r3
 800df80:	e793      	b.n	800deaa <WM_CreateWindowAsChild+0x3a>
 800df82:	2700      	movs	r7, #0
 800df84:	e785      	b.n	800de92 <WM_CreateWindowAsChild+0x22>
 800df86:	4a2b      	ldr	r2, [pc, #172]	; (800e034 <WM_CreateWindowAsChild+0x1c4>)
 800df88:	6813      	ldr	r3, [r2, #0]
 800df8a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800df8e:	f103 0301 	add.w	r3, r3, #1
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	d0db      	beq.n	800df4e <WM_CreateWindowAsChild+0xde>
 800df96:	4620      	mov	r0, r4
 800df98:	f000 fd52 	bl	800ea40 <WM_BringToBottom>
 800df9c:	e7d7      	b.n	800df4e <WM_CreateWindowAsChild+0xde>
 800df9e:	4e23      	ldr	r6, [pc, #140]	; (800e02c <WM_CreateWindowAsChild+0x1bc>)
 800dfa0:	6833      	ldr	r3, [r6, #0]
 800dfa2:	4625      	mov	r5, r4
 800dfa4:	649c      	str	r4, [r3, #72]	; 0x48
 800dfa6:	e000      	b.n	800dfaa <WM_CreateWindowAsChild+0x13a>
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f7f9 fa08 	bl	80073c0 <GUI_ALLOC_h2p>
 800dfb0:	6980      	ldr	r0, [r0, #24]
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	d1f8      	bne.n	800dfa8 <WM_CreateWindowAsChild+0x138>
 800dfb6:	4b1e      	ldr	r3, [pc, #120]	; (800e030 <WM_CreateWindowAsChild+0x1c0>)
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	4295      	cmp	r5, r2
 800dfbc:	d01a      	beq.n	800dff4 <WM_CreateWindowAsChild+0x184>
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	429d      	cmp	r5, r3
 800dfc2:	d016      	beq.n	800dff2 <WM_CreateWindowAsChild+0x182>
 800dfc4:	f7fa ff72 	bl	8008eac <LCD_SetClipRectMax>
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f7f9 f9f9 	bl	80073c0 <GUI_ALLOC_h2p>
 800dfce:	6833      	ldr	r3, [r6, #0]
 800dfd0:	f9b0 1000 	ldrsh.w	r1, [r0]
 800dfd4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dfd8:	651a      	str	r2, [r3, #80]	; 0x50
 800dfda:	64d9      	str	r1, [r3, #76]	; 0x4c
 800dfdc:	e7b1      	b.n	800df42 <WM_CreateWindowAsChild+0xd2>
 800dfde:	f7f9 f9ef 	bl	80073c0 <GUI_ALLOC_h2p>
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7f9 f9eb 	bl	80073c0 <GUI_ALLOC_h2p>
 800dfea:	696b      	ldr	r3, [r5, #20]
 800dfec:	6143      	str	r3, [r0, #20]
 800dfee:	616c      	str	r4, [r5, #20]
 800dff0:	e7a0      	b.n	800df34 <WM_CreateWindowAsChild+0xc4>
 800dff2:	2001      	movs	r0, #1
 800dff4:	f7f9 fff0 	bl	8007fd8 <GUI_SelectLayer>
 800dff8:	e7e4      	b.n	800dfc4 <WM_CreateWindowAsChild+0x154>
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7f9 f9ea 	bl	80073d4 <GUI_ALLOC_LockH>
 800e000:	4603      	mov	r3, r0
 800e002:	4658      	mov	r0, fp
 800e004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	f042 0202 	orr.w	r2, r2, #2
 800e00c:	629a      	str	r2, [r3, #40]	; 0x28
 800e00e:	f7f9 f9f3 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e012:	2100      	movs	r1, #0
 800e014:	4620      	mov	r0, r4
 800e016:	f7ff fc17 	bl	800d848 <WM_InvalidateRect.part.2>
 800e01a:	e79b      	b.n	800df54 <WM_CreateWindowAsChild+0xe4>
 800e01c:	2001bdc0 	.word	0x2001bdc0
 800e020:	2001bd88 	.word	0x2001bd88
 800e024:	003f3f9f 	.word	0x003f3f9f
 800e028:	2001bdac 	.word	0x2001bdac
 800e02c:	20000018 	.word	0x20000018
 800e030:	2001bd90 	.word	0x2001bd90
 800e034:	2001bde0 	.word	0x2001bde0

0800e038 <WM__GetNextIVR>:
 800e038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e03c:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800e280 <WM__GetNextIVR+0x248>
 800e040:	f8d8 3000 	ldr.w	r3, [r8]
 800e044:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800e048:	b087      	sub	sp, #28
 800e04a:	b130      	cbz	r0, 800e05a <WM__GetNextIVR+0x22>
 800e04c:	4e8b      	ldr	r6, [pc, #556]	; (800e27c <WM__GetNextIVR+0x244>)
 800e04e:	6a33      	ldr	r3, [r6, #32]
 800e050:	2b01      	cmp	r3, #1
 800e052:	dd05      	ble.n	800e060 <WM__GetNextIVR+0x28>
 800e054:	3b01      	subs	r3, #1
 800e056:	6233      	str	r3, [r6, #32]
 800e058:	2000      	movs	r0, #0
 800e05a:	b007      	add	sp, #28
 800e05c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e060:	f106 0714 	add.w	r7, r6, #20
 800e064:	69f3      	ldr	r3, [r6, #28]
 800e066:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e06a:	ad02      	add	r5, sp, #8
 800e06c:	3301      	adds	r3, #1
 800e06e:	e885 0003 	stmia.w	r5, {r0, r1}
 800e072:	61f3      	str	r3, [r6, #28]
 800e074:	b953      	cbnz	r3, 800e08c <WM__GetNextIVR+0x54>
 800e076:	68f3      	ldr	r3, [r6, #12]
 800e078:	9302      	str	r3, [sp, #8]
 800e07a:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 800e07e:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800e082:	4c7e      	ldr	r4, [pc, #504]	; (800e27c <WM__GetNextIVR+0x244>)
 800e084:	429a      	cmp	r2, r3
 800e086:	da17      	bge.n	800e0b8 <WM__GetNextIVR+0x80>
 800e088:	6a33      	ldr	r3, [r6, #32]
 800e08a:	e7e3      	b.n	800e054 <WM__GetNextIVR+0x1c>
 800e08c:	8b32      	ldrh	r2, [r6, #24]
 800e08e:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 800e092:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 800e096:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e09a:	3201      	adds	r2, #1
 800e09c:	b212      	sxth	r2, r2
 800e09e:	4291      	cmp	r1, r2
 800e0a0:	f8ad 2008 	strh.w	r2, [sp, #8]
 800e0a4:	daeb      	bge.n	800e07e <WM__GetNextIVR+0x46>
 800e0a6:	8b73      	ldrh	r3, [r6, #26]
 800e0a8:	89b2      	ldrh	r2, [r6, #12]
 800e0aa:	f8ad 2008 	strh.w	r2, [sp, #8]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	b21b      	sxth	r3, r3
 800e0b2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e0b6:	e7e2      	b.n	800e07e <WM__GetNextIVR+0x46>
 800e0b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e0bc:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800e280 <WM__GetNextIVR+0x248>
 800e0c0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e0c2:	f7f9 f987 	bl	80073d4 <GUI_ALLOC_LockH>
 800e0c6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800e0ca:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800e0ce:	9000      	str	r0, [sp, #0]
 800e0d0:	4299      	cmp	r1, r3
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	f000 80b9 	beq.w	800e24a <WM__GetNextIVR+0x212>
 800e0d8:	f8d8 2000 	ldr.w	r2, [r8]
 800e0dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e0e0:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800e0e2:	b910      	cbnz	r0, 800e0ea <WM__GetNextIVR+0xb2>
 800e0e4:	e00d      	b.n	800e102 <WM__GetNextIVR+0xca>
 800e0e6:	69a0      	ldr	r0, [r4, #24]
 800e0e8:	b158      	cbz	r0, 800e102 <WM__GetNextIVR+0xca>
 800e0ea:	f7f9 f969 	bl	80073c0 <GUI_ALLOC_h2p>
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	6a00      	ldr	r0, [r0, #32]
 800e0f4:	f7fe fda2 	bl	800cc3c <_Findx0.constprop.10>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d0f4      	beq.n	800e0e6 <WM__GetNextIVR+0xae>
 800e0fc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800e100:	e7ea      	b.n	800e0d8 <WM__GetNextIVR+0xa0>
 800e102:	9b00      	ldr	r3, [sp, #0]
 800e104:	4629      	mov	r1, r5
 800e106:	69d8      	ldr	r0, [r3, #28]
 800e108:	f7fe fd98 	bl	800cc3c <_Findx0.constprop.10>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d1f5      	bne.n	800e0fc <WM__GetNextIVR+0xc4>
 800e110:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800e114:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800e118:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	f300 808c 	bgt.w	800e23a <WM__GetNextIVR+0x202>
 800e122:	f8d8 3000 	ldr.w	r3, [r8]
 800e126:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e128:	f10d 0810 	add.w	r8, sp, #16
 800e12c:	b368      	cbz	r0, 800e18a <WM__GetNextIVR+0x152>
 800e12e:	f7f9 f947 	bl	80073c0 <GUI_ALLOC_h2p>
 800e132:	6a04      	ldr	r4, [r0, #32]
 800e134:	4681      	mov	r9, r0
 800e136:	b96c      	cbnz	r4, 800e154 <WM__GetNextIVR+0x11c>
 800e138:	e023      	b.n	800e182 <WM__GetNextIVR+0x14a>
 800e13a:	07e1      	lsls	r1, r4, #31
 800e13c:	d44b      	bmi.n	800e1d6 <WM__GetNextIVR+0x19e>
 800e13e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e142:	9801      	ldr	r0, [sp, #4]
 800e144:	3b01      	subs	r3, #1
 800e146:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e14a:	6a04      	ldr	r4, [r0, #32]
 800e14c:	a801      	add	r0, sp, #4
 800e14e:	f7f9 f953 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e152:	b1b4      	cbz	r4, 800e182 <WM__GetNextIVR+0x14a>
 800e154:	4620      	mov	r0, r4
 800e156:	f7f9 f93d 	bl	80073d4 <GUI_ALLOC_LockH>
 800e15a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e15c:	9001      	str	r0, [sp, #4]
 800e15e:	07a3      	lsls	r3, r4, #30
 800e160:	d5f3      	bpl.n	800e14a <WM__GetNextIVR+0x112>
 800e162:	c803      	ldmia	r0, {r0, r1}
 800e164:	e888 0003 	stmia.w	r8, {r0, r1}
 800e168:	4641      	mov	r1, r8
 800e16a:	4628      	mov	r0, r5
 800e16c:	f7f9 fb36 	bl	80077dc <GUI_RectsIntersect>
 800e170:	2800      	cmp	r0, #0
 800e172:	d1e2      	bne.n	800e13a <WM__GetNextIVR+0x102>
 800e174:	9801      	ldr	r0, [sp, #4]
 800e176:	6a04      	ldr	r4, [r0, #32]
 800e178:	a801      	add	r0, sp, #4
 800e17a:	f7f9 f93d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e17e:	2c00      	cmp	r4, #0
 800e180:	d1e8      	bne.n	800e154 <WM__GetNextIVR+0x11c>
 800e182:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800e186:	2800      	cmp	r0, #0
 800e188:	d1d1      	bne.n	800e12e <WM__GetNextIVR+0xf6>
 800e18a:	9b00      	ldr	r3, [sp, #0]
 800e18c:	69dc      	ldr	r4, [r3, #28]
 800e18e:	f10d 0810 	add.w	r8, sp, #16
 800e192:	b974      	cbnz	r4, 800e1b2 <WM__GetNextIVR+0x17a>
 800e194:	e040      	b.n	800e218 <WM__GetNextIVR+0x1e0>
 800e196:	07e3      	lsls	r3, r4, #31
 800e198:	d42e      	bmi.n	800e1f8 <WM__GetNextIVR+0x1c0>
 800e19a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e19e:	9801      	ldr	r0, [sp, #4]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e1a6:	6a04      	ldr	r4, [r0, #32]
 800e1a8:	a801      	add	r0, sp, #4
 800e1aa:	f7f9 f925 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e1ae:	2c00      	cmp	r4, #0
 800e1b0:	d032      	beq.n	800e218 <WM__GetNextIVR+0x1e0>
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f7f9 f90e 	bl	80073d4 <GUI_ALLOC_LockH>
 800e1b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e1ba:	9001      	str	r0, [sp, #4]
 800e1bc:	07a2      	lsls	r2, r4, #30
 800e1be:	d5f2      	bpl.n	800e1a6 <WM__GetNextIVR+0x16e>
 800e1c0:	c803      	ldmia	r0, {r0, r1}
 800e1c2:	e888 0003 	stmia.w	r8, {r0, r1}
 800e1c6:	4641      	mov	r1, r8
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f7f9 fb07 	bl	80077dc <GUI_RectsIntersect>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d1e1      	bne.n	800e196 <WM__GetNextIVR+0x15e>
 800e1d2:	9801      	ldr	r0, [sp, #4]
 800e1d4:	e7e7      	b.n	800e1a6 <WM__GetNextIVR+0x16e>
 800e1d6:	9801      	ldr	r0, [sp, #4]
 800e1d8:	69c4      	ldr	r4, [r0, #28]
 800e1da:	2c00      	cmp	r4, #0
 800e1dc:	d0b5      	beq.n	800e14a <WM__GetNextIVR+0x112>
 800e1de:	4620      	mov	r0, r4
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	f7fe fc18 	bl	800ca18 <_Findx1>
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f7f9 f8e9 	bl	80073c0 <GUI_ALLOC_h2p>
 800e1ee:	6a04      	ldr	r4, [r0, #32]
 800e1f0:	2c00      	cmp	r4, #0
 800e1f2:	d1f4      	bne.n	800e1de <WM__GetNextIVR+0x1a6>
 800e1f4:	9801      	ldr	r0, [sp, #4]
 800e1f6:	e7be      	b.n	800e176 <WM__GetNextIVR+0x13e>
 800e1f8:	9801      	ldr	r0, [sp, #4]
 800e1fa:	69c4      	ldr	r4, [r0, #28]
 800e1fc:	2c00      	cmp	r4, #0
 800e1fe:	d0d2      	beq.n	800e1a6 <WM__GetNextIVR+0x16e>
 800e200:	4620      	mov	r0, r4
 800e202:	4642      	mov	r2, r8
 800e204:	4629      	mov	r1, r5
 800e206:	f7fe fc07 	bl	800ca18 <_Findx1>
 800e20a:	4620      	mov	r0, r4
 800e20c:	f7f9 f8d8 	bl	80073c0 <GUI_ALLOC_h2p>
 800e210:	6a04      	ldr	r4, [r0, #32]
 800e212:	2c00      	cmp	r4, #0
 800e214:	d1f4      	bne.n	800e200 <WM__GetNextIVR+0x1c8>
 800e216:	e7dc      	b.n	800e1d2 <WM__GetNextIVR+0x19a>
 800e218:	4668      	mov	r0, sp
 800e21a:	f7f9 f8ed 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e21e:	69f2      	ldr	r2, [r6, #28]
 800e220:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e224:	429a      	cmp	r2, r3
 800e226:	f73f af2f 	bgt.w	800e088 <WM__GetNextIVR+0x50>
 800e22a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e22e:	e887 0003 	stmia.w	r7, {r0, r1}
 800e232:	f7fe fe9b 	bl	800cf6c <WM__ActivateClipRect>
 800e236:	2001      	movs	r0, #1
 800e238:	e70f      	b.n	800e05a <WM__GetNextIVR+0x22>
 800e23a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e23e:	e887 0003 	stmia.w	r7, {r0, r1}
 800e242:	4668      	mov	r0, sp
 800e244:	f7f9 f8d8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e248:	e72d      	b.n	800e0a6 <WM__GetNextIVR+0x6e>
 800e24a:	f8d9 1000 	ldr.w	r1, [r9]
 800e24e:	6923      	ldr	r3, [r4, #16]
 800e250:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800e252:	9303      	str	r3, [sp, #12]
 800e254:	b150      	cbz	r0, 800e26c <WM__GetNextIVR+0x234>
 800e256:	f7f9 f8b3 	bl	80073c0 <GUI_ALLOC_h2p>
 800e25a:	4604      	mov	r4, r0
 800e25c:	4629      	mov	r1, r5
 800e25e:	6a00      	ldr	r0, [r0, #32]
 800e260:	f7fe fd32 	bl	800ccc8 <_Findy1.constprop.11>
 800e264:	69a0      	ldr	r0, [r4, #24]
 800e266:	2800      	cmp	r0, #0
 800e268:	d1f5      	bne.n	800e256 <WM__GetNextIVR+0x21e>
 800e26a:	9a00      	ldr	r2, [sp, #0]
 800e26c:	69d0      	ldr	r0, [r2, #28]
 800e26e:	4629      	mov	r1, r5
 800e270:	f7fe fd2a 	bl	800ccc8 <_Findy1.constprop.11>
 800e274:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800e278:	e72e      	b.n	800e0d8 <WM__GetNextIVR+0xa0>
 800e27a:	bf00      	nop
 800e27c:	200001ec 	.word	0x200001ec
 800e280:	20000018 	.word	0x20000018

0800e284 <WM__InitIVRSearch>:
 800e284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e288:	4c5e      	ldr	r4, [pc, #376]	; (800e404 <WM__InitIVRSearch+0x180>)
 800e28a:	6822      	ldr	r2, [r4, #0]
 800e28c:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800e290:	b089      	sub	sp, #36	; 0x24
 800e292:	b14b      	cbz	r3, 800e2a8 <WM__InitIVRSearch+0x24>
 800e294:	4d5c      	ldr	r5, [pc, #368]	; (800e408 <WM__InitIVRSearch+0x184>)
 800e296:	6a2b      	ldr	r3, [r5, #32]
 800e298:	3301      	adds	r3, #1
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	622b      	str	r3, [r5, #32]
 800e29e:	dd09      	ble.n	800e2b4 <WM__InitIVRSearch+0x30>
 800e2a0:	2001      	movs	r0, #1
 800e2a2:	b009      	add	sp, #36	; 0x24
 800e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a8:	f7fe fe60 	bl	800cf6c <WM__ActivateClipRect>
 800e2ac:	2001      	movs	r0, #1
 800e2ae:	b009      	add	sp, #36	; 0x24
 800e2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800e2b8:	f7f9 f88c 	bl	80073d4 <GUI_ALLOC_LockH>
 800e2bc:	4b53      	ldr	r3, [pc, #332]	; (800e40c <WM__InitIVRSearch+0x188>)
 800e2be:	9001      	str	r0, [sp, #4]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2c6:	61ea      	str	r2, [r5, #28]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d061      	beq.n	800e390 <WM__InitIVRSearch+0x10c>
 800e2cc:	3008      	adds	r0, #8
 800e2ce:	c803      	ldmia	r0, {r0, r1}
 800e2d0:	ae04      	add	r6, sp, #16
 800e2d2:	e886 0003 	stmia.w	r6, {r0, r1}
 800e2d6:	b11f      	cbz	r7, 800e2e0 <WM__InitIVRSearch+0x5c>
 800e2d8:	4639      	mov	r1, r7
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7fa f9e0 	bl	80086a0 <GUI__IntersectRect>
 800e2e0:	6823      	ldr	r3, [r4, #0]
 800e2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 8087 	beq.w	800e3f8 <WM__InitIVRSearch+0x174>
 800e2ea:	4f49      	ldr	r7, [pc, #292]	; (800e410 <WM__InitIVRSearch+0x18c>)
 800e2ec:	6818      	ldr	r0, [r3, #0]
 800e2ee:	6859      	ldr	r1, [r3, #4]
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	ab06      	add	r3, sp, #24
 800e2f4:	c303      	stmia	r3!, {r0, r1}
 800e2f6:	9801      	ldr	r0, [sp, #4]
 800e2f8:	9002      	str	r0, [sp, #8]
 800e2fa:	f10d 0808 	add.w	r8, sp, #8
 800e2fe:	2a00      	cmp	r2, #0
 800e300:	d160      	bne.n	800e3c4 <WM__InitIVRSearch+0x140>
 800e302:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e306:	f9b0 1000 	ldrsh.w	r1, [r0]
 800e30a:	a806      	add	r0, sp, #24
 800e30c:	f7f9 fa1e 	bl	800774c <GUI_MoveRect>
 800e310:	4630      	mov	r0, r6
 800e312:	a906      	add	r1, sp, #24
 800e314:	f7fa f9c4 	bl	80086a0 <GUI__IntersectRect>
 800e318:	4640      	mov	r0, r8
 800e31a:	f7f9 f86d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e31e:	f8d7 9000 	ldr.w	r9, [r7]
 800e322:	f10d 080c 	add.w	r8, sp, #12
 800e326:	f1b9 0f00 	cmp.w	r9, #0
 800e32a:	d126      	bne.n	800e37a <WM__InitIVRSearch+0xf6>
 800e32c:	6823      	ldr	r3, [r4, #0]
 800e32e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800e330:	e008      	b.n	800e344 <WM__InitIVRSearch+0xc0>
 800e332:	f7fa f9b5 	bl	80086a0 <GUI__IntersectRect>
 800e336:	9b03      	ldr	r3, [sp, #12]
 800e338:	699c      	ldr	r4, [r3, #24]
 800e33a:	4640      	mov	r0, r8
 800e33c:	b38c      	cbz	r4, 800e3a2 <WM__InitIVRSearch+0x11e>
 800e33e:	f7f9 f85b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e342:	4627      	mov	r7, r4
 800e344:	4638      	mov	r0, r7
 800e346:	f7f9 f845 	bl	80073d4 <GUI_ALLOC_LockH>
 800e34a:	4603      	mov	r3, r0
 800e34c:	4601      	mov	r1, r0
 800e34e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e350:	9303      	str	r3, [sp, #12]
 800e352:	0793      	lsls	r3, r2, #30
 800e354:	4630      	mov	r0, r6
 800e356:	d4ec      	bmi.n	800e332 <WM__InitIVRSearch+0xae>
 800e358:	4640      	mov	r0, r8
 800e35a:	f7f9 f84d 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e35e:	6a2b      	ldr	r3, [r5, #32]
 800e360:	3b01      	subs	r3, #1
 800e362:	622b      	str	r3, [r5, #32]
 800e364:	2000      	movs	r0, #0
 800e366:	e79c      	b.n	800e2a2 <WM__InitIVRSearch+0x1e>
 800e368:	f7fa f99a 	bl	80086a0 <GUI__IntersectRect>
 800e36c:	9b03      	ldr	r3, [sp, #12]
 800e36e:	699f      	ldr	r7, [r3, #24]
 800e370:	4640      	mov	r0, r8
 800e372:	b37f      	cbz	r7, 800e3d4 <WM__InitIVRSearch+0x150>
 800e374:	f7f9 f840 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e378:	46b9      	mov	r9, r7
 800e37a:	4648      	mov	r0, r9
 800e37c:	f7f9 f82a 	bl	80073d4 <GUI_ALLOC_LockH>
 800e380:	4603      	mov	r3, r0
 800e382:	4601      	mov	r1, r0
 800e384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e386:	9303      	str	r3, [sp, #12]
 800e388:	0792      	lsls	r2, r2, #30
 800e38a:	4630      	mov	r0, r6
 800e38c:	d5e4      	bpl.n	800e358 <WM__InitIVRSearch+0xd4>
 800e38e:	e7eb      	b.n	800e368 <WM__InitIVRSearch+0xe4>
 800e390:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e392:	f013 0602 	ands.w	r6, r3, #2
 800e396:	d027      	beq.n	800e3e8 <WM__InitIVRSearch+0x164>
 800e398:	c803      	ldmia	r0, {r0, r1}
 800e39a:	ae04      	add	r6, sp, #16
 800e39c:	e886 0003 	stmia.w	r6, {r0, r1}
 800e3a0:	e799      	b.n	800e2d6 <WM__InitIVRSearch+0x52>
 800e3a2:	f7f9 f829 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e3a6:	4b1b      	ldr	r3, [pc, #108]	; (800e414 <WM__InitIVRSearch+0x190>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4297      	cmp	r7, r2
 800e3ac:	d002      	beq.n	800e3b4 <WM__InitIVRSearch+0x130>
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	429f      	cmp	r7, r3
 800e3b2:	d1d4      	bne.n	800e35e <WM__InitIVRSearch+0xda>
 800e3b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e3b8:	4b17      	ldr	r3, [pc, #92]	; (800e418 <WM__InitIVRSearch+0x194>)
 800e3ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3be:	f7ff fe3b 	bl	800e038 <WM__GetNextIVR>
 800e3c2:	e76e      	b.n	800e2a2 <WM__InitIVRSearch+0x1e>
 800e3c4:	4640      	mov	r0, r8
 800e3c6:	f7f9 f817 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e3ca:	6838      	ldr	r0, [r7, #0]
 800e3cc:	f7f9 f802 	bl	80073d4 <GUI_ALLOC_LockH>
 800e3d0:	9002      	str	r0, [sp, #8]
 800e3d2:	e796      	b.n	800e302 <WM__InitIVRSearch+0x7e>
 800e3d4:	f7f9 f810 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <WM__InitIVRSearch+0x190>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	4591      	cmp	r9, r2
 800e3de:	d0a5      	beq.n	800e32c <WM__InitIVRSearch+0xa8>
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	4599      	cmp	r9, r3
 800e3e4:	d0a2      	beq.n	800e32c <WM__InitIVRSearch+0xa8>
 800e3e6:	e7ba      	b.n	800e35e <WM__InitIVRSearch+0xda>
 800e3e8:	6a2b      	ldr	r3, [r5, #32]
 800e3ea:	a801      	add	r0, sp, #4
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	622b      	str	r3, [r5, #32]
 800e3f0:	f7f9 f802 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	e754      	b.n	800e2a2 <WM__InitIVRSearch+0x1e>
 800e3f8:	a801      	add	r0, sp, #4
 800e3fa:	f7f8 fffd 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e3fe:	4f04      	ldr	r7, [pc, #16]	; (800e410 <WM__InitIVRSearch+0x18c>)
 800e400:	e78d      	b.n	800e31e <WM__InitIVRSearch+0x9a>
 800e402:	bf00      	nop
 800e404:	20000018 	.word	0x20000018
 800e408:	200001ec 	.word	0x200001ec
 800e40c:	2001bdbc 	.word	0x2001bdbc
 800e410:	2001bd8c 	.word	0x2001bd8c
 800e414:	2001bd90 	.word	0x2001bd90
 800e418:	200001f8 	.word	0x200001f8

0800e41c <WM__Paint1>:
 800e41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e420:	b089      	sub	sp, #36	; 0x24
 800e422:	4606      	mov	r6, r0
 800e424:	f7f8 ffd6 	bl	80073d4 <GUI_ALLOC_LockH>
 800e428:	f100 0208 	add.w	r2, r0, #8
 800e42c:	4603      	mov	r3, r0
 800e42e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e432:	ac02      	add	r4, sp, #8
 800e434:	691f      	ldr	r7, [r3, #16]
 800e436:	9301      	str	r3, [sp, #4]
 800e438:	e884 0003 	stmia.w	r4, {r0, r1}
 800e43c:	a801      	add	r0, sp, #4
 800e43e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e440:	f7f8 ffda 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e444:	b10f      	cbz	r7, 800e44a <WM__Paint1+0x2e>
 800e446:	07ab      	lsls	r3, r5, #30
 800e448:	d402      	bmi.n	800e450 <WM__Paint1+0x34>
 800e44a:	b009      	add	sp, #36	; 0x24
 800e44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e450:	4f1e      	ldr	r7, [pc, #120]	; (800e4cc <WM__Paint1+0xb0>)
 800e452:	212e      	movs	r1, #46	; 0x2e
 800e454:	4630      	mov	r0, r6
 800e456:	f000 fb93 	bl	800eb80 <WM_SendMessageNoPara>
 800e45a:	783b      	ldrb	r3, [r7, #0]
 800e45c:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800e460:	f103 0301 	add.w	r3, r3, #1
 800e464:	703b      	strb	r3, [r7, #0]
 800e466:	d119      	bne.n	800e49c <WM__Paint1+0x80>
 800e468:	4620      	mov	r0, r4
 800e46a:	f7ff ff0b 	bl	800e284 <WM__InitIVRSearch>
 800e46e:	b318      	cbz	r0, 800e4b8 <WM__Paint1+0x9c>
 800e470:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800e4d0 <WM__Paint1+0xb4>
 800e474:	f04f 080f 	mov.w	r8, #15
 800e478:	9605      	str	r6, [sp, #20]
 800e47a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e47e:	9407      	str	r4, [sp, #28]
 800e480:	f7f9 f9ec 	bl	800785c <GL_SetDefault>
 800e484:	f8d9 3000 	ldr.w	r3, [r9]
 800e488:	a904      	add	r1, sp, #16
 800e48a:	645d      	str	r5, [r3, #68]	; 0x44
 800e48c:	4630      	mov	r0, r6
 800e48e:	f000 fd83 	bl	800ef98 <WM__SendMessage>
 800e492:	f7ff fdd1 	bl	800e038 <WM__GetNextIVR>
 800e496:	2800      	cmp	r0, #0
 800e498:	d1ee      	bne.n	800e478 <WM__Paint1+0x5c>
 800e49a:	e00d      	b.n	800e4b8 <WM__Paint1+0x9c>
 800e49c:	230f      	movs	r3, #15
 800e49e:	9304      	str	r3, [sp, #16]
 800e4a0:	9605      	str	r6, [sp, #20]
 800e4a2:	9407      	str	r4, [sp, #28]
 800e4a4:	f7f9 f9da 	bl	800785c <GL_SetDefault>
 800e4a8:	4b09      	ldr	r3, [pc, #36]	; (800e4d0 <WM__Paint1+0xb4>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	645a      	str	r2, [r3, #68]	; 0x44
 800e4b0:	a904      	add	r1, sp, #16
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f000 fd70 	bl	800ef98 <WM__SendMessage>
 800e4b8:	783b      	ldrb	r3, [r7, #0]
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	212f      	movs	r1, #47	; 0x2f
 800e4c0:	703b      	strb	r3, [r7, #0]
 800e4c2:	f000 fb5d 	bl	800eb80 <WM_SendMessageNoPara>
 800e4c6:	b009      	add	sp, #36	; 0x24
 800e4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4cc:	2001bdbc 	.word	0x2001bdbc
 800e4d0:	20000018 	.word	0x20000018

0800e4d4 <WM_Exec>:
 800e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	4b96      	ldr	r3, [pc, #600]	; (800e734 <WM_Exec+0x260>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	b0ab      	sub	sp, #172	; 0xac
 800e4de:	b103      	cbz	r3, 800e4e2 <WM_Exec+0xe>
 800e4e0:	4798      	blx	r3
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	461c      	mov	r4, r3
 800e4e6:	e000      	b.n	800e4ea <WM_Exec+0x16>
 800e4e8:	2401      	movs	r4, #1
 800e4ea:	f7ff fb83 	bl	800dbf4 <_Exec1Input>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d1fa      	bne.n	800e4e8 <WM_Exec+0x14>
 800e4f2:	f8df b25c 	ldr.w	fp, [pc, #604]	; 800e750 <WM_Exec+0x27c>
 800e4f6:	9406      	str	r4, [sp, #24]
 800e4f8:	f8db 3000 	ldr.w	r3, [fp]
 800e4fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e500:	2b00      	cmp	r3, #0
 800e502:	d04d      	beq.n	800e5a0 <WM_Exec+0xcc>
 800e504:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e754 <WM_Exec+0x280>
 800e508:	f8b9 2000 	ldrh.w	r2, [r9]
 800e50c:	2a00      	cmp	r2, #0
 800e50e:	d053      	beq.n	800e5b8 <WM_Exec+0xe4>
 800e510:	4b89      	ldr	r3, [pc, #548]	; (800e738 <WM_Exec+0x264>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d047      	beq.n	800e5a8 <WM_Exec+0xd4>
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4798      	blx	r3
 800e51c:	f8db 3000 	ldr.w	r3, [fp]
 800e520:	2201      	movs	r2, #1
 800e522:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e526:	9207      	str	r2, [sp, #28]
 800e528:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800e748 <WM_Exec+0x274>
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d02b      	beq.n	800e588 <WM_Exec+0xb4>
 800e530:	f8b9 3000 	ldrh.w	r3, [r9]
 800e534:	b343      	cbz	r3, 800e588 <WM_Exec+0xb4>
 800e536:	4b81      	ldr	r3, [pc, #516]	; (800e73c <WM_Exec+0x268>)
 800e538:	689e      	ldr	r6, [r3, #8]
 800e53a:	2e00      	cmp	r6, #0
 800e53c:	d13e      	bne.n	800e5bc <WM_Exec+0xe8>
 800e53e:	aa0d      	add	r2, sp, #52	; 0x34
 800e540:	4b7f      	ldr	r3, [pc, #508]	; (800e740 <WM_Exec+0x26c>)
 800e542:	9205      	str	r2, [sp, #20]
 800e544:	4610      	mov	r0, r2
 800e546:	681e      	ldr	r6, [r3, #0]
 800e548:	f7f9 f966 	bl	8007818 <GUI_SaveContext_W>
 800e54c:	f8db 3000 	ldr.w	r3, [fp]
 800e550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e554:	9203      	str	r2, [sp, #12]
 800e556:	9304      	str	r3, [sp, #16]
 800e558:	2e00      	cmp	r6, #0
 800e55a:	d13a      	bne.n	800e5d2 <WM_Exec+0xfe>
 800e55c:	4b77      	ldr	r3, [pc, #476]	; (800e73c <WM_Exec+0x268>)
 800e55e:	9803      	ldr	r0, [sp, #12]
 800e560:	609e      	str	r6, [r3, #8]
 800e562:	f7f9 f979 	bl	8007858 <GUI_SetColor>
 800e566:	9804      	ldr	r0, [sp, #16]
 800e568:	f7f9 f974 	bl	8007854 <GUI_SetBkColor>
 800e56c:	9805      	ldr	r0, [sp, #20]
 800e56e:	f7f9 f95d 	bl	800782c <GUI_RestoreContext>
 800e572:	f8b9 3000 	ldrh.w	r3, [r9]
 800e576:	b13b      	cbz	r3, 800e588 <WM_Exec+0xb4>
 800e578:	f8db 3000 	ldr.w	r3, [fp]
 800e57c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e580:	2201      	movs	r2, #1
 800e582:	9206      	str	r2, [sp, #24]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1d3      	bne.n	800e530 <WM_Exec+0x5c>
 800e588:	9b07      	ldr	r3, [sp, #28]
 800e58a:	b14b      	cbz	r3, 800e5a0 <WM_Exec+0xcc>
 800e58c:	4b6a      	ldr	r3, [pc, #424]	; (800e738 <WM_Exec+0x264>)
 800e58e:	6818      	ldr	r0, [r3, #0]
 800e590:	2800      	cmp	r0, #0
 800e592:	f000 80c8 	beq.w	800e726 <WM_Exec+0x252>
 800e596:	6843      	ldr	r3, [r0, #4]
 800e598:	4798      	blx	r3
 800e59a:	4b6a      	ldr	r3, [pc, #424]	; (800e744 <WM_Exec+0x270>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]
 800e5a0:	9806      	ldr	r0, [sp, #24]
 800e5a2:	b02b      	add	sp, #172	; 0xac
 800e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	f001 fb8d 	bl	800fcc8 <GUI__ManageCache>
 800e5ae:	f8db 3000 	ldr.w	r3, [fp]
 800e5b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	9207      	str	r2, [sp, #28]
 800e5ba:	e7b5      	b.n	800e528 <WM_Exec+0x54>
 800e5bc:	ab0d      	add	r3, sp, #52	; 0x34
 800e5be:	4618      	mov	r0, r3
 800e5c0:	9305      	str	r3, [sp, #20]
 800e5c2:	f7f9 f929 	bl	8007818 <GUI_SaveContext_W>
 800e5c6:	f8db 3000 	ldr.w	r3, [fp]
 800e5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ce:	9203      	str	r2, [sp, #12]
 800e5d0:	9304      	str	r3, [sp, #16]
 800e5d2:	ad0b      	add	r5, sp, #44	; 0x2c
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	9608      	str	r6, [sp, #32]
 800e5d8:	f7f8 fefc 	bl	80073d4 <GUI_ALLOC_LockH>
 800e5dc:	f100 0208 	add.w	r2, r0, #8
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ea:	e885 0003 	stmia.w	r5, {r0, r1}
 800e5ee:	a809      	add	r0, sp, #36	; 0x24
 800e5f0:	4617      	mov	r7, r2
 800e5f2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800e5f6:	691c      	ldr	r4, [r3, #16]
 800e5f8:	9202      	str	r2, [sp, #8]
 800e5fa:	f7f8 fefd 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e5fe:	f244 0320 	movw	r3, #16416	; 0x4020
 800e602:	403b      	ands	r3, r7
 800e604:	2b00      	cmp	r3, #0
 800e606:	d037      	beq.n	800e678 <WM_Exec+0x1a4>
 800e608:	b1d4      	cbz	r4, 800e640 <WM_Exec+0x16c>
 800e60a:	9c08      	ldr	r4, [sp, #32]
 800e60c:	e009      	b.n	800e622 <WM_Exec+0x14e>
 800e60e:	f7fa f847 	bl	80086a0 <GUI__IntersectRect>
 800e612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e614:	699f      	ldr	r7, [r3, #24]
 800e616:	a80a      	add	r0, sp, #40	; 0x28
 800e618:	2f00      	cmp	r7, #0
 800e61a:	d034      	beq.n	800e686 <WM_Exec+0x1b2>
 800e61c:	f7f8 feec 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e620:	463c      	mov	r4, r7
 800e622:	4620      	mov	r0, r4
 800e624:	f7f8 fed6 	bl	80073d4 <GUI_ALLOC_LockH>
 800e628:	4603      	mov	r3, r0
 800e62a:	4601      	mov	r1, r0
 800e62c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800e62e:	930a      	str	r3, [sp, #40]	; 0x28
 800e630:	f017 0702 	ands.w	r7, r7, #2
 800e634:	4628      	mov	r0, r5
 800e636:	d1ea      	bne.n	800e60e <WM_Exec+0x13a>
 800e638:	a80a      	add	r0, sp, #40	; 0x28
 800e63a:	f7f8 fedd 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e63e:	463c      	mov	r4, r7
 800e640:	9808      	ldr	r0, [sp, #32]
 800e642:	f7f8 fec7 	bl	80073d4 <GUI_ALLOC_LockH>
 800e646:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e648:	9009      	str	r0, [sp, #36]	; 0x24
 800e64a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800e64e:	f023 0320 	bic.w	r3, r3, #32
 800e652:	0492      	lsls	r2, r2, #18
 800e654:	bf48      	it	mi
 800e656:	f043 0304 	orrmi.w	r3, r3, #4
 800e65a:	6283      	str	r3, [r0, #40]	; 0x28
 800e65c:	a809      	add	r0, sp, #36	; 0x24
 800e65e:	f7f8 fecb 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e662:	f8b9 3000 	ldrh.w	r3, [r9]
 800e666:	3b01      	subs	r3, #1
 800e668:	f8a9 3000 	strh.w	r3, [r9]
 800e66c:	b124      	cbz	r4, 800e678 <WM_Exec+0x1a4>
 800e66e:	4630      	mov	r0, r6
 800e670:	f7f8 fea6 	bl	80073c0 <GUI_ALLOC_h2p>
 800e674:	6946      	ldr	r6, [r0, #20]
 800e676:	e771      	b.n	800e55c <WM_Exec+0x88>
 800e678:	4630      	mov	r0, r6
 800e67a:	f7f8 fea1 	bl	80073c0 <GUI_ALLOC_h2p>
 800e67e:	6946      	ldr	r6, [r0, #20]
 800e680:	2e00      	cmp	r6, #0
 800e682:	d1a7      	bne.n	800e5d4 <WM_Exec+0x100>
 800e684:	e76a      	b.n	800e55c <WM_Exec+0x88>
 800e686:	f7f8 feb7 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e68a:	f8da 2000 	ldr.w	r2, [sl]
 800e68e:	42a2      	cmp	r2, r4
 800e690:	d005      	beq.n	800e69e <WM_Exec+0x1ca>
 800e692:	4b2d      	ldr	r3, [pc, #180]	; (800e748 <WM_Exec+0x274>)
 800e694:	685a      	ldr	r2, [r3, #4]
 800e696:	4294      	cmp	r4, r2
 800e698:	d001      	beq.n	800e69e <WM_Exec+0x1ca>
 800e69a:	2400      	movs	r4, #0
 800e69c:	e7d0      	b.n	800e640 <WM_Exec+0x16c>
 800e69e:	9c08      	ldr	r4, [sp, #32]
 800e6a0:	f8db 3000 	ldr.w	r3, [fp]
 800e6a4:	b90c      	cbnz	r4, 800e6aa <WM_Exec+0x1d6>
 800e6a6:	4a26      	ldr	r2, [pc, #152]	; (800e740 <WM_Exec+0x26c>)
 800e6a8:	6814      	ldr	r4, [r2, #0]
 800e6aa:	649c      	str	r4, [r3, #72]	; 0x48
 800e6ac:	4627      	mov	r7, r4
 800e6ae:	e000      	b.n	800e6b2 <WM_Exec+0x1de>
 800e6b0:	461f      	mov	r7, r3
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	f7f8 fe84 	bl	80073c0 <GUI_ALLOC_h2p>
 800e6b8:	6983      	ldr	r3, [r0, #24]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1f8      	bne.n	800e6b0 <WM_Exec+0x1dc>
 800e6be:	f8da 1000 	ldr.w	r1, [sl]
 800e6c2:	42b9      	cmp	r1, r7
 800e6c4:	d02d      	beq.n	800e722 <WM_Exec+0x24e>
 800e6c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e6ca:	42bb      	cmp	r3, r7
 800e6cc:	d025      	beq.n	800e71a <WM_Exec+0x246>
 800e6ce:	f7fa fbed 	bl	8008eac <LCD_SetClipRectMax>
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f7f8 fe74 	bl	80073c0 <GUI_ALLOC_h2p>
 800e6d8:	f8db 3000 	ldr.w	r3, [fp]
 800e6dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e6e0:	f9b0 1000 	ldrsh.w	r1, [r0]
 800e6e4:	651a      	str	r2, [r3, #80]	; 0x50
 800e6e6:	9a02      	ldr	r2, [sp, #8]
 800e6e8:	64d9      	str	r1, [r3, #76]	; 0x4c
 800e6ea:	0751      	lsls	r1, r2, #29
 800e6ec:	d510      	bpl.n	800e710 <WM_Exec+0x23c>
 800e6ee:	f1b8 0f00 	cmp.w	r8, #0
 800e6f2:	d00b      	beq.n	800e70c <WM_Exec+0x238>
 800e6f4:	f002 0301 	and.w	r3, r2, #1
 800e6f8:	f083 0301 	eor.w	r3, r3, #1
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	aa08      	add	r2, sp, #32
 800e700:	2300      	movs	r3, #0
 800e702:	4912      	ldr	r1, [pc, #72]	; (800e74c <WM_Exec+0x278>)
 800e704:	4628      	mov	r0, r5
 800e706:	f001 fd8b 	bl	8010220 <GUI_MEMDEV_Draw>
 800e70a:	e7c6      	b.n	800e69a <WM_Exec+0x1c6>
 800e70c:	2301      	movs	r3, #1
 800e70e:	e7f5      	b.n	800e6fc <WM_Exec+0x228>
 800e710:	9808      	ldr	r0, [sp, #32]
 800e712:	f7fe fb2d 	bl	800cd70 <WM__PaintWinAndOverlays>
 800e716:	2401      	movs	r4, #1
 800e718:	e792      	b.n	800e640 <WM_Exec+0x16c>
 800e71a:	2001      	movs	r0, #1
 800e71c:	f7f9 fc5c 	bl	8007fd8 <GUI_SelectLayer>
 800e720:	e7d5      	b.n	800e6ce <WM_Exec+0x1fa>
 800e722:	4618      	mov	r0, r3
 800e724:	e7fa      	b.n	800e71c <WM_Exec+0x248>
 800e726:	f001 facf 	bl	800fcc8 <GUI__ManageCache>
 800e72a:	9806      	ldr	r0, [sp, #24]
 800e72c:	b02b      	add	sp, #172	; 0xac
 800e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e732:	bf00      	nop
 800e734:	2001bd9c 	.word	0x2001bd9c
 800e738:	2001bdd0 	.word	0x2001bdd0
 800e73c:	200001ec 	.word	0x200001ec
 800e740:	2001bdac 	.word	0x2001bdac
 800e744:	2001bdb8 	.word	0x2001bdb8
 800e748:	2001bd90 	.word	0x2001bd90
 800e74c:	0800ce11 	.word	0x0800ce11
 800e750:	20000018 	.word	0x20000018
 800e754:	2001bda8 	.word	0x2001bda8

0800e758 <WM_Activate>:
 800e758:	4b02      	ldr	r3, [pc, #8]	; (800e764 <WM_Activate+0xc>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2201      	movs	r2, #1
 800e75e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800e762:	4770      	bx	lr
 800e764:	20000018 	.word	0x20000018

0800e768 <WM_Deactivate>:
 800e768:	4b03      	ldr	r3, [pc, #12]	; (800e778 <WM_Deactivate+0x10>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800e772:	f7fa bb9b 	b.w	8008eac <LCD_SetClipRectMax>
 800e776:	bf00      	nop
 800e778:	20000018 	.word	0x20000018

0800e77c <WM_DefaultProc>:
 800e77c:	6803      	ldr	r3, [r0, #0]
 800e77e:	3b0e      	subs	r3, #14
 800e780:	b510      	push	{r4, lr}
 800e782:	4604      	mov	r4, r0
 800e784:	6840      	ldr	r0, [r0, #4]
 800e786:	2b1a      	cmp	r3, #26
 800e788:	d812      	bhi.n	800e7b0 <WM_DefaultProc+0x34>
 800e78a:	e8df f003 	tbb	[pc, r3]
 800e78e:	111b      	.short	0x111b
 800e790:	11111111 	.word	0x11111111
 800e794:	2011110e 	.word	0x2011110e
 800e798:	11111111 	.word	0x11111111
 800e79c:	11111111 	.word	0x11111111
 800e7a0:	11221111 	.word	0x11221111
 800e7a4:	11111111 	.word	0x11111111
 800e7a8:	14          	.byte	0x14
 800e7a9:	00          	.byte	0x00
 800e7aa:	68e1      	ldr	r1, [r4, #12]
 800e7ac:	f000 fcae 	bl	800f10c <WM__GetClientRectEx>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	60e3      	str	r3, [r4, #12]
 800e7b4:	bd10      	pop	{r4, pc}
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d0fc      	beq.n	800e7b4 <WM_DefaultProc+0x38>
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7c0:	f7ff b842 	b.w	800d848 <WM_InvalidateRect.part.2>
 800e7c4:	4621      	mov	r1, r4
 800e7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7ca:	f000 b9db 	b.w	800eb84 <WM_SendToParent>
 800e7ce:	60e0      	str	r0, [r4, #12]
 800e7d0:	bd10      	pop	{r4, pc}
 800e7d2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e7d6:	60e3      	str	r3, [r4, #12]
 800e7d8:	bd10      	pop	{r4, pc}
 800e7da:	bf00      	nop

0800e7dc <WM_Init>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	4d43      	ldr	r5, [pc, #268]	; (800e8f0 <WM_Init+0x114>)
 800e7e2:	782b      	ldrb	r3, [r5, #0]
 800e7e4:	b085      	sub	sp, #20
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d176      	bne.n	800e8d8 <WM_Init+0xfc>
 800e7ea:	4f42      	ldr	r7, [pc, #264]	; (800e8f4 <WM_Init+0x118>)
 800e7ec:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800e928 <WM_Init+0x14c>
 800e7f0:	6838      	ldr	r0, [r7, #0]
 800e7f2:	4941      	ldr	r1, [pc, #260]	; (800e8f8 <WM_Init+0x11c>)
 800e7f4:	4a41      	ldr	r2, [pc, #260]	; (800e8fc <WM_Init+0x120>)
 800e7f6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800e91c <WM_Init+0x140>
 800e7fa:	f8df a130 	ldr.w	sl, [pc, #304]	; 800e92c <WM_Init+0x150>
 800e7fe:	4e40      	ldr	r6, [pc, #256]	; (800e900 <WM_Init+0x124>)
 800e800:	60ab      	str	r3, [r5, #8]
 800e802:	6443      	str	r3, [r0, #68]	; 0x44
 800e804:	461c      	mov	r4, r3
 800e806:	f8c9 3000 	str.w	r3, [r9]
 800e80a:	800b      	strh	r3, [r1, #0]
 800e80c:	8013      	strh	r3, [r2, #0]
 800e80e:	469b      	mov	fp, r3
 800e810:	4620      	mov	r0, r4
 800e812:	f7f9 f9d7 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 800e816:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800e81a:	2100      	movs	r1, #0
 800e81c:	f04f 0c02 	mov.w	ip, #2
 800e820:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e824:	461a      	mov	r2, r3
 800e826:	b190      	cbz	r0, 800e84e <WM_Init+0x72>
 800e828:	f8cd b00c 	str.w	fp, [sp, #12]
 800e82c:	f8cd a008 	str.w	sl, [sp, #8]
 800e830:	f8cd c004 	str.w	ip, [sp, #4]
 800e834:	f8cd e000 	str.w	lr, [sp]
 800e838:	4608      	mov	r0, r1
 800e83a:	f7ff fb19 	bl	800de70 <WM_CreateWindowAsChild>
 800e83e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800e842:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 800e846:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d14b      	bne.n	800e8e6 <WM_Init+0x10a>
 800e84e:	3401      	adds	r4, #1
 800e850:	2c02      	cmp	r4, #2
 800e852:	d1dd      	bne.n	800e810 <WM_Init+0x34>
 800e854:	482b      	ldr	r0, [pc, #172]	; (800e904 <WM_Init+0x128>)
 800e856:	f000 fc51 	bl	800f0fc <WM__AddCriticalHandle>
 800e85a:	482b      	ldr	r0, [pc, #172]	; (800e908 <WM_Init+0x12c>)
 800e85c:	f000 fc4e 	bl	800f0fc <WM__AddCriticalHandle>
 800e860:	482a      	ldr	r0, [pc, #168]	; (800e90c <WM_Init+0x130>)
 800e862:	f000 fc4b 	bl	800f0fc <WM__AddCriticalHandle>
 800e866:	482a      	ldr	r0, [pc, #168]	; (800e910 <WM_Init+0x134>)
 800e868:	f000 fc48 	bl	800f0fc <WM__AddCriticalHandle>
 800e86c:	4829      	ldr	r0, [pc, #164]	; (800e914 <WM_Init+0x138>)
 800e86e:	f000 fc45 	bl	800f0fc <WM__AddCriticalHandle>
 800e872:	4829      	ldr	r0, [pc, #164]	; (800e918 <WM_Init+0x13c>)
 800e874:	f000 fc42 	bl	800f0fc <WM__AddCriticalHandle>
 800e878:	f8d8 6000 	ldr.w	r6, [r8]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	b90e      	cbnz	r6, 800e884 <WM_Init+0xa8>
 800e880:	f8d9 6000 	ldr.w	r6, [r9]
 800e884:	649e      	str	r6, [r3, #72]	; 0x48
 800e886:	4634      	mov	r4, r6
 800e888:	e000      	b.n	800e88c <WM_Init+0xb0>
 800e88a:	4604      	mov	r4, r0
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7f8 fd97 	bl	80073c0 <GUI_ALLOC_h2p>
 800e892:	6980      	ldr	r0, [r0, #24]
 800e894:	2800      	cmp	r0, #0
 800e896:	d1f8      	bne.n	800e88a <WM_Init+0xae>
 800e898:	f8d8 3000 	ldr.w	r3, [r8]
 800e89c:	4a1f      	ldr	r2, [pc, #124]	; (800e91c <WM_Init+0x140>)
 800e89e:	429c      	cmp	r4, r3
 800e8a0:	d01e      	beq.n	800e8e0 <WM_Init+0x104>
 800e8a2:	6853      	ldr	r3, [r2, #4]
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	d01a      	beq.n	800e8de <WM_Init+0x102>
 800e8a8:	f7fa fb00 	bl	8008eac <LCD_SetClipRectMax>
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7f8 fd87 	bl	80073c0 <GUI_ALLOC_h2p>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e8b8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800e8bc:	64da      	str	r2, [r3, #76]	; 0x4c
 800e8be:	2201      	movs	r2, #1
 800e8c0:	6519      	str	r1, [r3, #80]	; 0x50
 800e8c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800e8c6:	4816      	ldr	r0, [pc, #88]	; (800e920 <WM_Init+0x144>)
 800e8c8:	4b16      	ldr	r3, [pc, #88]	; (800e924 <WM_Init+0x148>)
 800e8ca:	702a      	strb	r2, [r5, #0]
 800e8cc:	626b      	str	r3, [r5, #36]	; 0x24
 800e8ce:	b005      	add	sp, #20
 800e8d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d4:	f7f9 b962 	b.w	8007b9c <GUI__RegisterExit>
 800e8d8:	b005      	add	sp, #20
 800e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8de:	2001      	movs	r0, #1
 800e8e0:	f7f9 fb7a 	bl	8007fd8 <GUI_SelectLayer>
 800e8e4:	e7e0      	b.n	800e8a8 <WM_Init+0xcc>
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	f7fe ffae 	bl	800d848 <WM_InvalidateRect.part.2>
 800e8ec:	e7af      	b.n	800e84e <WM_Init+0x72>
 800e8ee:	bf00      	nop
 800e8f0:	200001ec 	.word	0x200001ec
 800e8f4:	20000018 	.word	0x20000018
 800e8f8:	2001bda8 	.word	0x2001bda8
 800e8fc:	2001bd88 	.word	0x2001bd88
 800e900:	2001bdc4 	.word	0x2001bdc4
 800e904:	2001be04 	.word	0x2001be04
 800e908:	2001bdf4 	.word	0x2001bdf4
 800e90c:	2001bde4 	.word	0x2001bde4
 800e910:	2001be0c 	.word	0x2001be0c
 800e914:	2001bdfc 	.word	0x2001bdfc
 800e918:	2001bdec 	.word	0x2001bdec
 800e91c:	2001bd90 	.word	0x2001bd90
 800e920:	20000210 	.word	0x20000210
 800e924:	0800c7f9 	.word	0x0800c7f9
 800e928:	2001bdac 	.word	0x2001bdac
 800e92c:	0800d91d 	.word	0x0800d91d

0800e930 <WM_ResizeWindow.part.11>:
 800e930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e934:	b08a      	sub	sp, #40	; 0x28
 800e936:	4688      	mov	r8, r1
 800e938:	4617      	mov	r7, r2
 800e93a:	4606      	mov	r6, r0
 800e93c:	f7f8 fd4a 	bl	80073d4 <GUI_ALLOC_LockH>
 800e940:	4603      	mov	r3, r0
 800e942:	c803      	ldmia	r0, {r0, r1}
 800e944:	ac04      	add	r4, sp, #16
 800e946:	ad06      	add	r5, sp, #24
 800e948:	e884 0003 	stmia.w	r4, {r0, r1}
 800e94c:	9303      	str	r3, [sp, #12]
 800e94e:	e885 0003 	stmia.w	r5, {r0, r1}
 800e952:	f1b8 0f00 	cmp.w	r8, #0
 800e956:	d009      	beq.n	800e96c <WM_ResizeWindow.part.11+0x3c>
 800e958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e95a:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800e95e:	2a80      	cmp	r2, #128	; 0x80
 800e960:	d055      	beq.n	800ea0e <WM_ResizeWindow.part.11+0xde>
 800e962:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e966:	4490      	add	r8, r2
 800e968:	f8ad 801c 	strh.w	r8, [sp, #28]
 800e96c:	b157      	cbz	r7, 800e984 <WM_ResizeWindow.part.11+0x54>
 800e96e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e970:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800e974:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e978:	d050      	beq.n	800ea1c <WM_ResizeWindow.part.11+0xec>
 800e97a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e97e:	4417      	add	r7, r2
 800e980:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e986:	03d1      	lsls	r1, r2, #15
 800e988:	d43b      	bmi.n	800ea02 <WM_ResizeWindow.part.11+0xd2>
 800e98a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e98e:	0792      	lsls	r2, r2, #30
 800e990:	e883 0003 	stmia.w	r3, {r0, r1}
 800e994:	d50b      	bpl.n	800e9ae <WM_ResizeWindow.part.11+0x7e>
 800e996:	462a      	mov	r2, r5
 800e998:	4621      	mov	r1, r4
 800e99a:	a808      	add	r0, sp, #32
 800e99c:	f7f8 fea8 	bl	80076f0 <GUI_MergeRect>
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	a808      	add	r0, sp, #32
 800e9a4:	6a1a      	ldr	r2, [r3, #32]
 800e9a6:	6999      	ldr	r1, [r3, #24]
 800e9a8:	f7ff f9e2 	bl	800dd70 <WM__InvalidateRectEx>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 800e9b2:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800e9b6:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 800e9ba:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 800e9be:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 800e9c2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800e9c6:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800e9ca:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800e9ce:	1b04      	subs	r4, r0, r4
 800e9d0:	9400      	str	r4, [sp, #0]
 800e9d2:	ac0a      	add	r4, sp, #40	; 0x28
 800e9d4:	1aba      	subs	r2, r7, r2
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	1a69      	subs	r1, r5, r1
 800e9da:	ebce 030c 	rsb	r3, lr, ip
 800e9de:	f000 fb0d 	bl	800effc <WM__UpdateChildPositions>
 800e9e2:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800e9e6:	f101 0008 	add.w	r0, r1, #8
 800e9ea:	f7f9 fe59 	bl	80086a0 <GUI__IntersectRect>
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	2105      	movs	r1, #5
 800e9f2:	f7ff fa23 	bl	800de3c <WM__SendMsgNoData>
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f7f8 fcfe 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800e9fc:	b00a      	add	sp, #40	; 0x28
 800e9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7fe fbb4 	bl	800d170 <WM__InvalidateDrawAndDescs>
 800ea08:	9b03      	ldr	r3, [sp, #12]
 800ea0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea0c:	e7bd      	b.n	800e98a <WM_ResizeWindow.part.11+0x5a>
 800ea0e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800ea12:	ebc8 0802 	rsb	r8, r8, r2
 800ea16:	f8ad 8018 	strh.w	r8, [sp, #24]
 800ea1a:	e7a7      	b.n	800e96c <WM_ResizeWindow.part.11+0x3c>
 800ea1c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ea20:	1bd7      	subs	r7, r2, r7
 800ea22:	f8ad 701a 	strh.w	r7, [sp, #26]
 800ea26:	e7ad      	b.n	800e984 <WM_ResizeWindow.part.11+0x54>

0800ea28 <WM_GetDesktopWindow>:
 800ea28:	4a03      	ldr	r2, [pc, #12]	; (800ea38 <WM_GetDesktopWindow+0x10>)
 800ea2a:	4b04      	ldr	r3, [pc, #16]	; (800ea3c <WM_GetDesktopWindow+0x14>)
 800ea2c:	6812      	ldr	r2, [r2, #0]
 800ea2e:	7c52      	ldrb	r2, [r2, #17]
 800ea30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	20000018 	.word	0x20000018
 800ea3c:	2001bd90 	.word	0x2001bd90

0800ea40 <WM_BringToBottom>:
 800ea40:	b900      	cbnz	r0, 800ea44 <WM_BringToBottom+0x4>
 800ea42:	4770      	bx	lr
 800ea44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea48:	b087      	sub	sp, #28
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	f7f8 fcc2 	bl	80073d4 <GUI_ALLOC_LockH>
 800ea50:	4603      	mov	r3, r0
 800ea52:	c803      	ldmia	r0, {r0, r1}
 800ea54:	ad04      	add	r5, sp, #16
 800ea56:	e885 0003 	stmia.w	r5, {r0, r1}
 800ea5a:	a801      	add	r0, sp, #4
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	6a1f      	ldr	r7, [r3, #32]
 800ea60:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 800ea64:	f7f8 fcc8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f000 fa79 	bl	800ef60 <WM__GetPrevSibling>
 800ea6e:	4606      	mov	r6, r0
 800ea70:	b318      	cbz	r0, 800eaba <WM_BringToBottom+0x7a>
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7f8 fca4 	bl	80073c0 <GUI_ALLOC_h2p>
 800ea78:	f018 0f02 	tst.w	r8, #2
 800ea7c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800ea80:	d11e      	bne.n	800eac0 <WM_BringToBottom+0x80>
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7f8 fca6 	bl	80073d4 <GUI_ALLOC_LockH>
 800ea88:	9001      	str	r0, [sp, #4]
 800ea8a:	4648      	mov	r0, r9
 800ea8c:	f7f8 fca2 	bl	80073d4 <GUI_ALLOC_LockH>
 800ea90:	9003      	str	r0, [sp, #12]
 800ea92:	4630      	mov	r0, r6
 800ea94:	f7f8 fc9e 	bl	80073d4 <GUI_ALLOC_LockH>
 800ea98:	9a03      	ldr	r2, [sp, #12]
 800ea9a:	9901      	ldr	r1, [sp, #4]
 800ea9c:	69d5      	ldr	r5, [r2, #28]
 800ea9e:	6207      	str	r7, [r0, #32]
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	620d      	str	r5, [r1, #32]
 800eaa4:	a801      	add	r0, sp, #4
 800eaa6:	61d4      	str	r4, [r2, #28]
 800eaa8:	9302      	str	r3, [sp, #8]
 800eaaa:	f7f8 fca5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800eaae:	a803      	add	r0, sp, #12
 800eab0:	f7f8 fca2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800eab4:	a802      	add	r0, sp, #8
 800eab6:	f7f8 fc9f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800eaba:	b007      	add	sp, #28
 800eabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac0:	4628      	mov	r0, r5
 800eac2:	463a      	mov	r2, r7
 800eac4:	4649      	mov	r1, r9
 800eac6:	f7ff f953 	bl	800dd70 <WM__InvalidateRectEx>
 800eaca:	e7da      	b.n	800ea82 <WM_BringToBottom+0x42>

0800eacc <WM_GetFirstChild>:
 800eacc:	b508      	push	{r3, lr}
 800eace:	b910      	cbnz	r0, 800ead6 <WM_GetFirstChild+0xa>
 800ead0:	4603      	mov	r3, r0
 800ead2:	4618      	mov	r0, r3
 800ead4:	bd08      	pop	{r3, pc}
 800ead6:	f7f8 fc73 	bl	80073c0 <GUI_ALLOC_h2p>
 800eada:	69c3      	ldr	r3, [r0, #28]
 800eadc:	4618      	mov	r0, r3
 800eade:	bd08      	pop	{r3, pc}

0800eae0 <WM_GetWindowOrgX>:
 800eae0:	b508      	push	{r3, lr}
 800eae2:	b900      	cbnz	r0, 800eae6 <WM_GetWindowOrgX+0x6>
 800eae4:	bd08      	pop	{r3, pc}
 800eae6:	f7f8 fc6b 	bl	80073c0 <GUI_ALLOC_h2p>
 800eaea:	f9b0 0000 	ldrsh.w	r0, [r0]
 800eaee:	bd08      	pop	{r3, pc}

0800eaf0 <WM_GetParent>:
 800eaf0:	b508      	push	{r3, lr}
 800eaf2:	b910      	cbnz	r0, 800eafa <WM_GetParent+0xa>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	bd08      	pop	{r3, pc}
 800eafa:	f7f8 fc61 	bl	80073c0 <GUI_ALLOC_h2p>
 800eafe:	6983      	ldr	r3, [r0, #24]
 800eb00:	4618      	mov	r0, r3
 800eb02:	bd08      	pop	{r3, pc}

0800eb04 <WM_NotifyParent>:
 800eb04:	b510      	push	{r4, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	2326      	movs	r3, #38	; 0x26
 800eb0a:	9103      	str	r1, [sp, #12]
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	b908      	cbnz	r0, 800eb14 <WM_NotifyParent+0x10>
 800eb10:	b004      	add	sp, #16
 800eb12:	bd10      	pop	{r4, pc}
 800eb14:	4604      	mov	r4, r0
 800eb16:	f7f8 fc53 	bl	80073c0 <GUI_ALLOC_h2p>
 800eb1a:	6980      	ldr	r0, [r0, #24]
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d0f7      	beq.n	800eb10 <WM_NotifyParent+0xc>
 800eb20:	4669      	mov	r1, sp
 800eb22:	9402      	str	r4, [sp, #8]
 800eb24:	f000 fa38 	bl	800ef98 <WM__SendMessage>
 800eb28:	b004      	add	sp, #16
 800eb2a:	bd10      	pop	{r4, pc}

0800eb2c <WM_OnKey>:
 800eb2c:	4a0c      	ldr	r2, [pc, #48]	; (800eb60 <WM_OnKey+0x34>)
 800eb2e:	4b0d      	ldr	r3, [pc, #52]	; (800eb64 <WM_OnKey+0x38>)
 800eb30:	6812      	ldr	r2, [r2, #0]
 800eb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb36:	b90b      	cbnz	r3, 800eb3c <WM_OnKey+0x10>
 800eb38:	4618      	mov	r0, r3
 800eb3a:	4770      	bx	lr
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	460a      	mov	r2, r1
 800eb42:	4604      	mov	r4, r0
 800eb44:	a902      	add	r1, sp, #8
 800eb46:	4618      	mov	r0, r3
 800eb48:	230e      	movs	r3, #14
 800eb4a:	9400      	str	r4, [sp, #0]
 800eb4c:	9201      	str	r2, [sp, #4]
 800eb4e:	9302      	str	r3, [sp, #8]
 800eb50:	f8cd d014 	str.w	sp, [sp, #20]
 800eb54:	f000 fa20 	bl	800ef98 <WM__SendMessage>
 800eb58:	2001      	movs	r0, #1
 800eb5a:	b006      	add	sp, #24
 800eb5c:	bd10      	pop	{r4, pc}
 800eb5e:	bf00      	nop
 800eb60:	2001bdb0 	.word	0x2001bdb0
 800eb64:	2001bda0 	.word	0x2001bda0

0800eb68 <WM_ResizeWindow>:
 800eb68:	b500      	push	{lr}
 800eb6a:	ea51 0e02 	orrs.w	lr, r1, r2
 800eb6e:	d000      	beq.n	800eb72 <WM_ResizeWindow+0xa>
 800eb70:	b908      	cbnz	r0, 800eb76 <WM_ResizeWindow+0xe>
 800eb72:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb76:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb7a:	f7ff bed9 	b.w	800e930 <WM_ResizeWindow.part.11>
 800eb7e:	bf00      	nop

0800eb80 <WM_SendMessageNoPara>:
 800eb80:	f000 ba28 	b.w	800efd4 <WM__SendMessageNoPara>

0800eb84 <WM_SendToParent>:
 800eb84:	b179      	cbz	r1, 800eba6 <WM_SendToParent+0x22>
 800eb86:	b538      	push	{r3, r4, r5, lr}
 800eb88:	b900      	cbnz	r0, 800eb8c <WM_SendToParent+0x8>
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	4605      	mov	r5, r0
 800eb90:	f7f8 fc16 	bl	80073c0 <GUI_ALLOC_h2p>
 800eb94:	6980      	ldr	r0, [r0, #24]
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d0f7      	beq.n	800eb8a <WM_SendToParent+0x6>
 800eb9a:	60a5      	str	r5, [r4, #8]
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba2:	f000 b9f9 	b.w	800ef98 <WM__SendMessage>
 800eba6:	4770      	bx	lr

0800eba8 <WM_SetSize>:
 800eba8:	b900      	cbnz	r0, 800ebac <WM_SetSize+0x4>
 800ebaa:	4770      	bx	lr
 800ebac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	b083      	sub	sp, #12
 800ebb2:	4690      	mov	r8, r2
 800ebb4:	4689      	mov	r9, r1
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	f7f8 fc0c 	bl	80073d4 <GUI_ALLOC_LockH>
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	a802      	add	r0, sp, #8
 800ebc0:	f9b6 1000 	ldrsh.w	r1, [r6]
 800ebc4:	f9b6 4006 	ldrsh.w	r4, [r6, #6]
 800ebc8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800ebcc:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
 800ebd0:	f840 6d04 	str.w	r6, [r0, #-4]!
 800ebd4:	1a6d      	subs	r5, r5, r1
 800ebd6:	1ae3      	subs	r3, r4, r3
 800ebd8:	3301      	adds	r3, #1
 800ebda:	1c6c      	adds	r4, r5, #1
 800ebdc:	ebc4 0409 	rsb	r4, r4, r9
 800ebe0:	ebc3 0508 	rsb	r5, r3, r8
 800ebe4:	f7f8 fc08 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ebe8:	ea54 0305 	orrs.w	r3, r4, r5
 800ebec:	d004      	beq.n	800ebf8 <WM_SetSize+0x50>
 800ebee:	462a      	mov	r2, r5
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	f7ff fe9c 	bl	800e930 <WM_ResizeWindow.part.11>
 800ebf8:	b003      	add	sp, #12
 800ebfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfe:	bf00      	nop

0800ec00 <_MoveDescendents>:
 800ec00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec04:	b0b5      	sub	sp, #212	; 0xd4
 800ec06:	2300      	movs	r3, #0
 800ec08:	931d      	str	r3, [sp, #116]	; 0x74
 800ec0a:	931c      	str	r3, [sp, #112]	; 0x70
 800ec0c:	931e      	str	r3, [sp, #120]	; 0x78
 800ec0e:	931f      	str	r3, [sp, #124]	; 0x7c
 800ec10:	9006      	str	r0, [sp, #24]
 800ec12:	2800      	cmp	r0, #0
 800ec14:	f000 8117 	beq.w	800ee46 <_MoveDescendents+0x246>
 800ec18:	468a      	mov	sl, r1
 800ec1a:	4691      	mov	r9, r2
 800ec1c:	f04f 0b03 	mov.w	fp, #3
 800ec20:	9806      	ldr	r0, [sp, #24]
 800ec22:	f7f8 fbd7 	bl	80073d4 <GUI_ALLOC_LockH>
 800ec26:	464a      	mov	r2, r9
 800ec28:	4651      	mov	r1, sl
 800ec2a:	900a      	str	r0, [sp, #40]	; 0x28
 800ec2c:	f7f8 fd8e 	bl	800774c <GUI_MoveRect>
 800ec30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec32:	464a      	mov	r2, r9
 800ec34:	3008      	adds	r0, #8
 800ec36:	4651      	mov	r1, sl
 800ec38:	f7f8 fd88 	bl	800774c <GUI_MoveRect>
 800ec3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3e:	69da      	ldr	r2, [r3, #28]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	9307      	str	r3, [sp, #28]
 800ec44:	a80a      	add	r0, sp, #40	; 0x28
 800ec46:	4614      	mov	r4, r2
 800ec48:	9205      	str	r2, [sp, #20]
 800ec4a:	f7f8 fbd5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	9320      	str	r3, [sp, #128]	; 0x80
 800ec52:	9321      	str	r3, [sp, #132]	; 0x84
 800ec54:	9322      	str	r3, [sp, #136]	; 0x88
 800ec56:	9323      	str	r3, [sp, #140]	; 0x8c
 800ec58:	2c00      	cmp	r4, #0
 800ec5a:	f000 80e3 	beq.w	800ee24 <_MoveDescendents+0x224>
 800ec5e:	9805      	ldr	r0, [sp, #20]
 800ec60:	f7f8 fbb8 	bl	80073d4 <GUI_ALLOC_LockH>
 800ec64:	464a      	mov	r2, r9
 800ec66:	4651      	mov	r1, sl
 800ec68:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec6a:	f7f8 fd6f 	bl	800774c <GUI_MoveRect>
 800ec6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ec70:	464a      	mov	r2, r9
 800ec72:	3008      	adds	r0, #8
 800ec74:	4651      	mov	r1, sl
 800ec76:	f7f8 fd69 	bl	800774c <GUI_MoveRect>
 800ec7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec7c:	69da      	ldr	r2, [r3, #28]
 800ec7e:	6a1b      	ldr	r3, [r3, #32]
 800ec80:	9308      	str	r3, [sp, #32]
 800ec82:	a80b      	add	r0, sp, #44	; 0x2c
 800ec84:	4614      	mov	r4, r2
 800ec86:	9204      	str	r2, [sp, #16]
 800ec88:	f7f8 fbb6 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	9324      	str	r3, [sp, #144]	; 0x90
 800ec90:	9325      	str	r3, [sp, #148]	; 0x94
 800ec92:	9326      	str	r3, [sp, #152]	; 0x98
 800ec94:	9327      	str	r3, [sp, #156]	; 0x9c
 800ec96:	2c00      	cmp	r4, #0
 800ec98:	f000 80b3 	beq.w	800ee02 <_MoveDescendents+0x202>
 800ec9c:	9804      	ldr	r0, [sp, #16]
 800ec9e:	f7f8 fb99 	bl	80073d4 <GUI_ALLOC_LockH>
 800eca2:	464a      	mov	r2, r9
 800eca4:	4651      	mov	r1, sl
 800eca6:	900c      	str	r0, [sp, #48]	; 0x30
 800eca8:	f7f8 fd50 	bl	800774c <GUI_MoveRect>
 800ecac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ecae:	464a      	mov	r2, r9
 800ecb0:	3008      	adds	r0, #8
 800ecb2:	4651      	mov	r1, sl
 800ecb4:	f7f8 fd4a 	bl	800774c <GUI_MoveRect>
 800ecb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecba:	69da      	ldr	r2, [r3, #28]
 800ecbc:	6a1b      	ldr	r3, [r3, #32]
 800ecbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ecc0:	a80c      	add	r0, sp, #48	; 0x30
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	9202      	str	r2, [sp, #8]
 800ecc6:	f7f8 fb97 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ecca:	2300      	movs	r3, #0
 800eccc:	9328      	str	r3, [sp, #160]	; 0xa0
 800ecce:	9329      	str	r3, [sp, #164]	; 0xa4
 800ecd0:	932a      	str	r3, [sp, #168]	; 0xa8
 800ecd2:	932b      	str	r3, [sp, #172]	; 0xac
 800ecd4:	2c00      	cmp	r4, #0
 800ecd6:	f000 8083 	beq.w	800ede0 <_MoveDescendents+0x1e0>
 800ecda:	4654      	mov	r4, sl
 800ecdc:	464d      	mov	r5, r9
 800ecde:	9802      	ldr	r0, [sp, #8]
 800ece0:	f7f8 fb78 	bl	80073d4 <GUI_ALLOC_LockH>
 800ece4:	462a      	mov	r2, r5
 800ece6:	4621      	mov	r1, r4
 800ece8:	900d      	str	r0, [sp, #52]	; 0x34
 800ecea:	f7f8 fd2f 	bl	800774c <GUI_MoveRect>
 800ecee:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ecf0:	462a      	mov	r2, r5
 800ecf2:	3008      	adds	r0, #8
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f7f8 fd29 	bl	800774c <GUI_MoveRect>
 800ecfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecfc:	a80d      	add	r0, sp, #52	; 0x34
 800ecfe:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800ed02:	6a1b      	ldr	r3, [r3, #32]
 800ed04:	9303      	str	r3, [sp, #12]
 800ed06:	f7f8 fb77 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	932c      	str	r3, [sp, #176]	; 0xb0
 800ed0e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ed10:	932e      	str	r3, [sp, #184]	; 0xb8
 800ed12:	932f      	str	r3, [sp, #188]	; 0xbc
 800ed14:	f1b9 0f00 	cmp.w	r9, #0
 800ed18:	d052      	beq.n	800edc0 <_MoveDescendents+0x1c0>
 800ed1a:	9301      	str	r3, [sp, #4]
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f7f8 fb59 	bl	80073d4 <GUI_ALLOC_LockH>
 800ed22:	462a      	mov	r2, r5
 800ed24:	4621      	mov	r1, r4
 800ed26:	900e      	str	r0, [sp, #56]	; 0x38
 800ed28:	f7f8 fd10 	bl	800774c <GUI_MoveRect>
 800ed2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ed2e:	462a      	mov	r2, r5
 800ed30:	3008      	adds	r0, #8
 800ed32:	4621      	mov	r1, r4
 800ed34:	f7f8 fd0a 	bl	800774c <GUI_MoveRect>
 800ed38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed3a:	a80e      	add	r0, sp, #56	; 0x38
 800ed3c:	69de      	ldr	r6, [r3, #28]
 800ed3e:	6a1b      	ldr	r3, [r3, #32]
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	f7f8 fb59 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ed46:	9b01      	ldr	r3, [sp, #4]
 800ed48:	9330      	str	r3, [sp, #192]	; 0xc0
 800ed4a:	9331      	str	r3, [sp, #196]	; 0xc4
 800ed4c:	9332      	str	r3, [sp, #200]	; 0xc8
 800ed4e:	9333      	str	r3, [sp, #204]	; 0xcc
 800ed50:	af1a      	add	r7, sp, #104	; 0x68
 800ed52:	b336      	cbz	r6, 800eda2 <_MoveDescendents+0x1a2>
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7f8 fb3d 	bl	80073d4 <GUI_ALLOC_LockH>
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed60:	f7f8 fcf4 	bl	800774c <GUI_MoveRect>
 800ed64:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ed66:	462a      	mov	r2, r5
 800ed68:	4621      	mov	r1, r4
 800ed6a:	3008      	adds	r0, #8
 800ed6c:	f7f8 fcee 	bl	800774c <GUI_MoveRect>
 800ed70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed72:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 800ed76:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800ed7a:	a80f      	add	r0, sp, #60	; 0x3c
 800ed7c:	f7f8 fb3c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ed80:	4621      	mov	r1, r4
 800ed82:	4650      	mov	r0, sl
 800ed84:	462a      	mov	r2, r5
 800ed86:	f7ff ff3b 	bl	800ec00 <_MoveDescendents>
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	a930      	add	r1, sp, #192	; 0xc0
 800ed8e:	4646      	mov	r6, r8
 800ed90:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 800ed94:	9733      	str	r7, [sp, #204]	; 0xcc
 800ed96:	941a      	str	r4, [sp, #104]	; 0x68
 800ed98:	951b      	str	r5, [sp, #108]	; 0x6c
 800ed9a:	f000 f8fd 	bl	800ef98 <WM__SendMessage>
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	d1d8      	bne.n	800ed54 <_MoveDescendents+0x154>
 800eda2:	4648      	mov	r0, r9
 800eda4:	ab18      	add	r3, sp, #96	; 0x60
 800eda6:	a92c      	add	r1, sp, #176	; 0xb0
 800eda8:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 800edac:	932f      	str	r3, [sp, #188]	; 0xbc
 800edae:	9418      	str	r4, [sp, #96]	; 0x60
 800edb0:	9519      	str	r5, [sp, #100]	; 0x64
 800edb2:	f000 f8f1 	bl	800ef98 <WM__SendMessage>
 800edb6:	f8dd 9000 	ldr.w	r9, [sp]
 800edba:	f1b9 0f00 	cmp.w	r9, #0
 800edbe:	d1ad      	bne.n	800ed1c <_MoveDescendents+0x11c>
 800edc0:	ab16      	add	r3, sp, #88	; 0x58
 800edc2:	9802      	ldr	r0, [sp, #8]
 800edc4:	932b      	str	r3, [sp, #172]	; 0xac
 800edc6:	a928      	add	r1, sp, #160	; 0xa0
 800edc8:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 800edcc:	9416      	str	r4, [sp, #88]	; 0x58
 800edce:	9517      	str	r5, [sp, #92]	; 0x5c
 800edd0:	f000 f8e2 	bl	800ef98 <WM__SendMessage>
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	9302      	str	r3, [sp, #8]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d180      	bne.n	800ecde <_MoveDescendents+0xde>
 800eddc:	46a2      	mov	sl, r4
 800edde:	46a9      	mov	r9, r5
 800ede0:	ab14      	add	r3, sp, #80	; 0x50
 800ede2:	9804      	ldr	r0, [sp, #16]
 800ede4:	9327      	str	r3, [sp, #156]	; 0x9c
 800ede6:	a924      	add	r1, sp, #144	; 0x90
 800ede8:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 800edec:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800edf0:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 800edf4:	f000 f8d0 	bl	800ef98 <WM__SendMessage>
 800edf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f47f af4d 	bne.w	800ec9c <_MoveDescendents+0x9c>
 800ee02:	ab12      	add	r3, sp, #72	; 0x48
 800ee04:	9805      	ldr	r0, [sp, #20]
 800ee06:	9323      	str	r3, [sp, #140]	; 0x8c
 800ee08:	a920      	add	r1, sp, #128	; 0x80
 800ee0a:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 800ee0e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800ee12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ee16:	f000 f8bf 	bl	800ef98 <WM__SendMessage>
 800ee1a:	9b08      	ldr	r3, [sp, #32]
 800ee1c:	9305      	str	r3, [sp, #20]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f47f af1d 	bne.w	800ec5e <_MoveDescendents+0x5e>
 800ee24:	2303      	movs	r3, #3
 800ee26:	931c      	str	r3, [sp, #112]	; 0x70
 800ee28:	9806      	ldr	r0, [sp, #24]
 800ee2a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ee2e:	ab10      	add	r3, sp, #64	; 0x40
 800ee30:	a91c      	add	r1, sp, #112	; 0x70
 800ee32:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee34:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800ee38:	f000 f8ae 	bl	800ef98 <WM__SendMessage>
 800ee3c:	9b07      	ldr	r3, [sp, #28]
 800ee3e:	9306      	str	r3, [sp, #24]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f47f aeed 	bne.w	800ec20 <_MoveDescendents+0x20>
 800ee46:	b035      	add	sp, #212	; 0xd4
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee4c <WM_MoveWindow>:
 800ee4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee50:	b08b      	sub	sp, #44	; 0x2c
 800ee52:	2300      	movs	r3, #0
 800ee54:	9307      	str	r3, [sp, #28]
 800ee56:	9306      	str	r3, [sp, #24]
 800ee58:	9308      	str	r3, [sp, #32]
 800ee5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d03c      	beq.n	800eeda <WM_MoveWindow+0x8e>
 800ee60:	b909      	cbnz	r1, 800ee66 <WM_MoveWindow+0x1a>
 800ee62:	2a00      	cmp	r2, #0
 800ee64:	d039      	beq.n	800eeda <WM_MoveWindow+0x8e>
 800ee66:	460c      	mov	r4, r1
 800ee68:	4617      	mov	r7, r2
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	f7f8 fab2 	bl	80073d4 <GUI_ALLOC_LockH>
 800ee70:	4603      	mov	r3, r0
 800ee72:	c803      	ldmia	r0, {r0, r1}
 800ee74:	f10d 0808 	add.w	r8, sp, #8
 800ee78:	e888 0003 	stmia.w	r8, {r0, r1}
 800ee7c:	463a      	mov	r2, r7
 800ee7e:	4618      	mov	r0, r3
 800ee80:	4621      	mov	r1, r4
 800ee82:	9301      	str	r3, [sp, #4]
 800ee84:	f7f8 fc62 	bl	800774c <GUI_MoveRect>
 800ee88:	9801      	ldr	r0, [sp, #4]
 800ee8a:	ad0a      	add	r5, sp, #40	; 0x28
 800ee8c:	463a      	mov	r2, r7
 800ee8e:	4621      	mov	r1, r4
 800ee90:	3008      	adds	r0, #8
 800ee92:	f7f8 fc5b 	bl	800774c <GUI_MoveRect>
 800ee96:	f855 3d24 	ldr.w	r3, [r5, #-36]!
 800ee9a:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7f8 faaa 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800eea4:	463a      	mov	r2, r7
 800eea6:	4621      	mov	r1, r4
 800eea8:	4648      	mov	r0, r9
 800eeaa:	f7ff fea9 	bl	800ec00 <_MoveDescendents>
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f7f8 fa90 	bl	80073d4 <GUI_ALLOC_LockH>
 800eeb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800eeb6:	9001      	str	r0, [sp, #4]
 800eeb8:	0792      	lsls	r2, r2, #30
 800eeba:	d501      	bpl.n	800eec0 <WM_MoveWindow+0x74>
 800eebc:	6981      	ldr	r1, [r0, #24]
 800eebe:	b979      	cbnz	r1, 800eee0 <WM_MoveWindow+0x94>
 800eec0:	4628      	mov	r0, r5
 800eec2:	f7f8 fa99 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800eec6:	2203      	movs	r2, #3
 800eec8:	ab04      	add	r3, sp, #16
 800eeca:	a906      	add	r1, sp, #24
 800eecc:	4630      	mov	r0, r6
 800eece:	9404      	str	r4, [sp, #16]
 800eed0:	9705      	str	r7, [sp, #20]
 800eed2:	9206      	str	r2, [sp, #24]
 800eed4:	9309      	str	r3, [sp, #36]	; 0x24
 800eed6:	f000 f85f 	bl	800ef98 <WM__SendMessage>
 800eeda:	b00b      	add	sp, #44	; 0x2c
 800eedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eee0:	6a02      	ldr	r2, [r0, #32]
 800eee2:	f7fe fecd 	bl	800dc80 <WM__InvalidateParent>
 800eee6:	9b01      	ldr	r3, [sp, #4]
 800eee8:	4640      	mov	r0, r8
 800eeea:	6a1a      	ldr	r2, [r3, #32]
 800eeec:	6999      	ldr	r1, [r3, #24]
 800eeee:	f7fe fec7 	bl	800dc80 <WM__InvalidateParent>
 800eef2:	e7e5      	b.n	800eec0 <WM_MoveWindow+0x74>

0800eef4 <WM__DeleteAssocTimer>:
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	4605      	mov	r5, r0
 800eefa:	4668      	mov	r0, sp
 800eefc:	f000 fca4 	bl	800f848 <GUI_TIMER__GetFirstTimer>
 800ef00:	b170      	cbz	r0, 800ef20 <WM__DeleteAssocTimer+0x2c>
 800ef02:	4604      	mov	r4, r0
 800ef04:	2101      	movs	r1, #1
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 fd38 	bl	800f97c <GUI_TIMER_GetFlag>
 800ef0c:	9b00      	ldr	r3, [sp, #0]
 800ef0e:	b103      	cbz	r3, 800ef12 <WM__DeleteAssocTimer+0x1e>
 800ef10:	b940      	cbnz	r0, 800ef24 <WM__DeleteAssocTimer+0x30>
 800ef12:	4620      	mov	r0, r4
 800ef14:	4669      	mov	r1, sp
 800ef16:	f000 fcaf 	bl	800f878 <GUI_TIMER__GetNextTimerLin>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	2c00      	cmp	r4, #0
 800ef1e:	d1f1      	bne.n	800ef04 <WM__DeleteAssocTimer+0x10>
 800ef20:	b002      	add	sp, #8
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f8 fa4b 	bl	80073c0 <GUI_ALLOC_h2p>
 800ef2a:	6843      	ldr	r3, [r0, #4]
 800ef2c:	42ab      	cmp	r3, r5
 800ef2e:	4669      	mov	r1, sp
 800ef30:	4620      	mov	r0, r4
 800ef32:	d1f0      	bne.n	800ef16 <WM__DeleteAssocTimer+0x22>
 800ef34:	9e00      	ldr	r6, [sp, #0]
 800ef36:	f000 fc9f 	bl	800f878 <GUI_TIMER__GetNextTimerLin>
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	2e00      	cmp	r6, #0
 800ef3e:	d0ed      	beq.n	800ef1c <WM__DeleteAssocTimer+0x28>
 800ef40:	4630      	mov	r0, r6
 800ef42:	f7f8 fa47 	bl	80073d4 <GUI_ALLOC_LockH>
 800ef46:	9001      	str	r0, [sp, #4]
 800ef48:	6800      	ldr	r0, [r0, #0]
 800ef4a:	f000 fcb5 	bl	800f8b8 <GUI_TIMER_Delete>
 800ef4e:	a801      	add	r0, sp, #4
 800ef50:	f7f8 fa52 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ef54:	4630      	mov	r0, r6
 800ef56:	f7f8 fb21 	bl	800759c <GUI_ALLOC_Free>
 800ef5a:	2c00      	cmp	r4, #0
 800ef5c:	d1d2      	bne.n	800ef04 <WM__DeleteAssocTimer+0x10>
 800ef5e:	e7df      	b.n	800ef20 <WM__DeleteAssocTimer+0x2c>

0800ef60 <WM__GetPrevSibling>:
 800ef60:	b538      	push	{r3, r4, r5, lr}
 800ef62:	4605      	mov	r5, r0
 800ef64:	f7ff fdc4 	bl	800eaf0 <WM_GetParent>
 800ef68:	b910      	cbnz	r0, 800ef70 <WM__GetPrevSibling+0x10>
 800ef6a:	2400      	movs	r4, #0
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	f7f8 fa26 	bl	80073c0 <GUI_ALLOC_h2p>
 800ef74:	69c4      	ldr	r4, [r0, #28]
 800ef76:	2c00      	cmp	r4, #0
 800ef78:	d0f7      	beq.n	800ef6a <WM__GetPrevSibling+0xa>
 800ef7a:	42a5      	cmp	r5, r4
 800ef7c:	d103      	bne.n	800ef86 <WM__GetPrevSibling+0x26>
 800ef7e:	e7f4      	b.n	800ef6a <WM__GetPrevSibling+0xa>
 800ef80:	461c      	mov	r4, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d0f1      	beq.n	800ef6a <WM__GetPrevSibling+0xa>
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7f8 fa1a 	bl	80073c0 <GUI_ALLOC_h2p>
 800ef8c:	6a03      	ldr	r3, [r0, #32]
 800ef8e:	429d      	cmp	r5, r3
 800ef90:	d1f6      	bne.n	800ef80 <WM__GetPrevSibling+0x20>
 800ef92:	4620      	mov	r0, r4
 800ef94:	bd38      	pop	{r3, r4, r5, pc}
 800ef96:	bf00      	nop

0800ef98 <WM__SendMessage>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	4c0d      	ldr	r4, [pc, #52]	; (800efd0 <WM__SendMessage+0x38>)
 800ef9c:	6822      	ldr	r2, [r4, #0]
 800ef9e:	2a13      	cmp	r2, #19
 800efa0:	dd00      	ble.n	800efa4 <WM__SendMessage+0xc>
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	4606      	mov	r6, r0
 800efa6:	460d      	mov	r5, r1
 800efa8:	f7f8 fa0a 	bl	80073c0 <GUI_ALLOC_h2p>
 800efac:	6902      	ldr	r2, [r0, #16]
 800efae:	606e      	str	r6, [r5, #4]
 800efb0:	b142      	cbz	r2, 800efc4 <WM__SendMessage+0x2c>
 800efb2:	6823      	ldr	r3, [r4, #0]
 800efb4:	4628      	mov	r0, r5
 800efb6:	3301      	adds	r3, #1
 800efb8:	6023      	str	r3, [r4, #0]
 800efba:	4790      	blx	r2
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	bd70      	pop	{r4, r5, r6, pc}
 800efc4:	4628      	mov	r0, r5
 800efc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efca:	f7ff bbd7 	b.w	800e77c <WM_DefaultProc>
 800efce:	bf00      	nop
 800efd0:	2000021c 	.word	0x2000021c

0800efd4 <WM__SendMessageNoPara>:
 800efd4:	b530      	push	{r4, r5, lr}
 800efd6:	b085      	sub	sp, #20
 800efd8:	2300      	movs	r3, #0
 800efda:	9301      	str	r3, [sp, #4]
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	9302      	str	r3, [sp, #8]
 800efe0:	9303      	str	r3, [sp, #12]
 800efe2:	460c      	mov	r4, r1
 800efe4:	4605      	mov	r5, r0
 800efe6:	f7f8 f9eb 	bl	80073c0 <GUI_ALLOC_h2p>
 800efea:	6903      	ldr	r3, [r0, #16]
 800efec:	b11b      	cbz	r3, 800eff6 <WM__SendMessageNoPara+0x22>
 800efee:	e88d 0030 	stmia.w	sp, {r4, r5}
 800eff2:	4668      	mov	r0, sp
 800eff4:	4798      	blx	r3
 800eff6:	b005      	add	sp, #20
 800eff8:	bd30      	pop	{r4, r5, pc}
 800effa:	bf00      	nop

0800effc <WM__UpdateChildPositions>:
 800effc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f004:	b08b      	sub	sp, #44	; 0x2c
 800f006:	f1bb 0f00 	cmp.w	fp, #0
 800f00a:	d074      	beq.n	800f0f6 <WM__UpdateChildPositions+0xfa>
 800f00c:	9307      	str	r3, [sp, #28]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	9303      	str	r3, [sp, #12]
 800f012:	b28b      	uxth	r3, r1
 800f014:	9304      	str	r3, [sp, #16]
 800f016:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f01a:	9202      	str	r2, [sp, #8]
 800f01c:	9106      	str	r1, [sp, #24]
 800f01e:	9305      	str	r3, [sp, #20]
 800f020:	e039      	b.n	800f096 <WM__UpdateChildPositions+0x9a>
 800f022:	9906      	ldr	r1, [sp, #24]
 800f024:	eb0a 0601 	add.w	r6, sl, r1
 800f028:	9907      	ldr	r1, [sp, #28]
 800f02a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800f02e:	eb08 0401 	add.w	r4, r8, r1
 800f032:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f036:	b236      	sxth	r6, r6
 800f038:	b224      	sxth	r4, r4
 800f03a:	d04c      	beq.n	800f0d6 <WM__UpdateChildPositions+0xda>
 800f03c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800f040:	d150      	bne.n	800f0e4 <WM__UpdateChildPositions+0xe8>
 800f042:	9a02      	ldr	r2, [sp, #8]
 800f044:	189f      	adds	r7, r3, r2
 800f046:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f048:	eb09 0502 	add.w	r5, r9, r2
 800f04c:	b23f      	sxth	r7, r7
 800f04e:	b22d      	sxth	r5, r5
 800f050:	ebb6 010a 	subs.w	r1, r6, sl
 800f054:	eba7 0203 	sub.w	r2, r7, r3
 800f058:	d100      	bne.n	800f05c <WM__UpdateChildPositions+0x60>
 800f05a:	b122      	cbz	r2, 800f066 <WM__UpdateChildPositions+0x6a>
 800f05c:	4658      	mov	r0, fp
 800f05e:	9301      	str	r3, [sp, #4]
 800f060:	f7ff fef4 	bl	800ee4c <WM_MoveWindow>
 800f064:	9b01      	ldr	r3, [sp, #4]
 800f066:	1ba4      	subs	r4, r4, r6
 800f068:	ebca 0808 	rsb	r8, sl, r8
 800f06c:	1bed      	subs	r5, r5, r7
 800f06e:	ebc3 0909 	rsb	r9, r3, r9
 800f072:	ebb4 0108 	subs.w	r1, r4, r8
 800f076:	ebc9 0205 	rsb	r2, r9, r5
 800f07a:	d100      	bne.n	800f07e <WM__UpdateChildPositions+0x82>
 800f07c:	b112      	cbz	r2, 800f084 <WM__UpdateChildPositions+0x88>
 800f07e:	4658      	mov	r0, fp
 800f080:	f7ff fd72 	bl	800eb68 <WM_ResizeWindow>
 800f084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f086:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800f08a:	a809      	add	r0, sp, #36	; 0x24
 800f08c:	f7f8 f9b4 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f090:	f1bb 0f00 	cmp.w	fp, #0
 800f094:	d02f      	beq.n	800f0f6 <WM__UpdateChildPositions+0xfa>
 800f096:	4658      	mov	r0, fp
 800f098:	f7f8 f99c 	bl	80073d4 <GUI_ALLOC_LockH>
 800f09c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f09e:	9009      	str	r0, [sp, #36]	; 0x24
 800f0a0:	f402 7120 	and.w	r1, r2, #640	; 0x280
 800f0a4:	2980      	cmp	r1, #128	; 0x80
 800f0a6:	f9b0 a000 	ldrsh.w	sl, [r0]
 800f0aa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f0ae:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 800f0b2:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 800f0b6:	d01c      	beq.n	800f0f2 <WM__UpdateChildPositions+0xf6>
 800f0b8:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 800f0bc:	d0b1      	beq.n	800f022 <WM__UpdateChildPositions+0x26>
 800f0be:	9804      	ldr	r0, [sp, #16]
 800f0c0:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800f0c4:	eb00 060a 	add.w	r6, r0, sl
 800f0c8:	eb00 0408 	add.w	r4, r0, r8
 800f0cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f0d0:	b236      	sxth	r6, r6
 800f0d2:	b224      	sxth	r4, r4
 800f0d4:	d1b2      	bne.n	800f03c <WM__UpdateChildPositions+0x40>
 800f0d6:	9a05      	ldr	r2, [sp, #20]
 800f0d8:	18d7      	adds	r7, r2, r3
 800f0da:	eb02 0509 	add.w	r5, r2, r9
 800f0de:	b23f      	sxth	r7, r7
 800f0e0:	b22d      	sxth	r5, r5
 800f0e2:	e7b5      	b.n	800f050 <WM__UpdateChildPositions+0x54>
 800f0e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800f0e8:	18cf      	adds	r7, r1, r3
 800f0ea:	4449      	add	r1, r9
 800f0ec:	b23f      	sxth	r7, r7
 800f0ee:	b20d      	sxth	r5, r1
 800f0f0:	e7ae      	b.n	800f050 <WM__UpdateChildPositions+0x54>
 800f0f2:	9803      	ldr	r0, [sp, #12]
 800f0f4:	e7e4      	b.n	800f0c0 <WM__UpdateChildPositions+0xc4>
 800f0f6:	b00b      	add	sp, #44	; 0x2c
 800f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0fc <WM__AddCriticalHandle>:
 800f0fc:	4b02      	ldr	r3, [pc, #8]	; (800f108 <WM__AddCriticalHandle+0xc>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	6002      	str	r2, [r0, #0]
 800f102:	6018      	str	r0, [r3, #0]
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	2001bdcc 	.word	0x2001bdcc

0800f10c <WM__GetClientRectEx>:
 800f10c:	b180      	cbz	r0, 800f130 <WM__GetClientRectEx+0x24>
 800f10e:	b179      	cbz	r1, 800f130 <WM__GetClientRectEx+0x24>
 800f110:	b530      	push	{r4, r5, lr}
 800f112:	b083      	sub	sp, #12
 800f114:	460c      	mov	r4, r1
 800f116:	f7f8 f95d 	bl	80073d4 <GUI_ALLOC_LockH>
 800f11a:	ad02      	add	r5, sp, #8
 800f11c:	4621      	mov	r1, r4
 800f11e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f122:	f7fe fe97 	bl	800de54 <WM__GetClientRectWin>
 800f126:	4628      	mov	r0, r5
 800f128:	f7f8 f966 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f12c:	b003      	add	sp, #12
 800f12e:	bd30      	pop	{r4, r5, pc}
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop

0800f134 <_Color2Index_16>:
 800f134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f136:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800f13a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f13e:	1c67      	adds	r7, r4, #1
 800f140:	2f54      	cmp	r7, #84	; 0x54
 800f142:	f103 0601 	add.w	r6, r3, #1
 800f146:	b2c0      	uxtb	r0, r0
 800f148:	bf94      	ite	ls
 800f14a:	2200      	movls	r2, #0
 800f14c:	2201      	movhi	r2, #1
 800f14e:	f100 0e01 	add.w	lr, r0, #1
 800f152:	2e54      	cmp	r6, #84	; 0x54
 800f154:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800f158:	bf94      	ite	ls
 800f15a:	2500      	movls	r5, #0
 800f15c:	2501      	movhi	r5, #1
 800f15e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 800f162:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800f166:	4415      	add	r5, r2
 800f168:	bf94      	ite	ls
 800f16a:	2200      	movls	r2, #0
 800f16c:	2201      	movhi	r2, #1
 800f16e:	2e54      	cmp	r6, #84	; 0x54
 800f170:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f174:	442a      	add	r2, r5
 800f176:	d801      	bhi.n	800f17c <_Color2Index_16+0x48>
 800f178:	2f54      	cmp	r7, #84	; 0x54
 800f17a:	d90c      	bls.n	800f196 <_Color2Index_16+0x62>
 800f17c:	441c      	add	r4, r3
 800f17e:	1823      	adds	r3, r4, r0
 800f180:	ebc2 1082 	rsb	r0, r2, r2, lsl #6
 800f184:	4418      	add	r0, r3
 800f186:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
 800f18a:	fbb0 f2f2 	udiv	r2, r0, r2
 800f18e:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800f192:	4608      	mov	r0, r1
 800f194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f196:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 800f19a:	d8ef      	bhi.n	800f17c <_Color2Index_16+0x48>
 800f19c:	e7f9      	b.n	800f192 <_Color2Index_16+0x5e>
 800f19e:	bf00      	nop

0800f1a0 <_Index2Color_16>:
 800f1a0:	b470      	push	{r4, r5, r6}
 800f1a2:	f3c0 06c0 	ubfx	r6, r0, #3, #1
 800f1a6:	ea00 0206 	and.w	r2, r0, r6
 800f1aa:	f3c0 0580 	ubfx	r5, r0, #2, #1
 800f1ae:	ea00 0305 	and.w	r3, r0, r5
 800f1b2:	f3c0 0440 	ubfx	r4, r0, #1, #1
 800f1b6:	01d1      	lsls	r1, r2, #7
 800f1b8:	4020      	ands	r0, r4
 800f1ba:	1a8a      	subs	r2, r1, r2
 800f1bc:	01d9      	lsls	r1, r3, #7
 800f1be:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
 800f1c2:	1acb      	subs	r3, r1, r3
 800f1c4:	01c1      	lsls	r1, r0, #7
 800f1c6:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 800f1ca:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800f1ce:	1a08      	subs	r0, r1, r0
 800f1d0:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 800f1d4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800f1d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800f1dc:	bc70      	pop	{r4, r5, r6}
 800f1de:	4770      	bx	lr

0800f1e0 <_GetIndexMask_16>:
 800f1e0:	200f      	movs	r0, #15
 800f1e2:	4770      	bx	lr

0800f1e4 <_GetIndexMask_0>:
 800f1e4:	b508      	push	{r3, lr}
 800f1e6:	f7fa f8ab 	bl	8009340 <LCD_GetNumColors>
 800f1ea:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f1ee:	d014      	beq.n	800f21a <_GetIndexMask_0+0x36>
 800f1f0:	287f      	cmp	r0, #127	; 0x7f
 800f1f2:	d80e      	bhi.n	800f212 <_GetIndexMask_0+0x2e>
 800f1f4:	283f      	cmp	r0, #63	; 0x3f
 800f1f6:	d812      	bhi.n	800f21e <_GetIndexMask_0+0x3a>
 800f1f8:	281f      	cmp	r0, #31
 800f1fa:	d80c      	bhi.n	800f216 <_GetIndexMask_0+0x32>
 800f1fc:	280f      	cmp	r0, #15
 800f1fe:	d810      	bhi.n	800f222 <_GetIndexMask_0+0x3e>
 800f200:	2807      	cmp	r0, #7
 800f202:	d812      	bhi.n	800f22a <_GetIndexMask_0+0x46>
 800f204:	2803      	cmp	r0, #3
 800f206:	d80e      	bhi.n	800f226 <_GetIndexMask_0+0x42>
 800f208:	2801      	cmp	r0, #1
 800f20a:	bf94      	ite	ls
 800f20c:	2000      	movls	r0, #0
 800f20e:	2001      	movhi	r0, #1
 800f210:	bd08      	pop	{r3, pc}
 800f212:	207f      	movs	r0, #127	; 0x7f
 800f214:	bd08      	pop	{r3, pc}
 800f216:	201f      	movs	r0, #31
 800f218:	bd08      	pop	{r3, pc}
 800f21a:	20ff      	movs	r0, #255	; 0xff
 800f21c:	bd08      	pop	{r3, pc}
 800f21e:	203f      	movs	r0, #63	; 0x3f
 800f220:	bd08      	pop	{r3, pc}
 800f222:	200f      	movs	r0, #15
 800f224:	bd08      	pop	{r3, pc}
 800f226:	2003      	movs	r0, #3
 800f228:	bd08      	pop	{r3, pc}
 800f22a:	2007      	movs	r0, #7
 800f22c:	bd08      	pop	{r3, pc}
 800f22e:	bf00      	nop

0800f230 <_Index2Color_0>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4604      	mov	r4, r0
 800f234:	f7fa f884 	bl	8009340 <LCD_GetNumColors>
 800f238:	4605      	mov	r5, r0
 800f23a:	f7fa f8a1 	bl	8009380 <LCD_GetPalette>
 800f23e:	42a5      	cmp	r5, r4
 800f240:	d903      	bls.n	800f24a <_Index2Color_0+0x1a>
 800f242:	b118      	cbz	r0, 800f24c <_Index2Color_0+0x1c>
 800f244:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f248:	bd38      	pop	{r3, r4, r5, pc}
 800f24a:	2000      	movs	r0, #0
 800f24c:	bd38      	pop	{r3, r4, r5, pc}
 800f24e:	bf00      	nop

0800f250 <_Color2Index_0>:
 800f250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f254:	4606      	mov	r6, r0
 800f256:	f7fa f873 	bl	8009340 <LCD_GetNumColors>
 800f25a:	4607      	mov	r7, r0
 800f25c:	f7fa f890 	bl	8009380 <LCD_GetPalette>
 800f260:	b158      	cbz	r0, 800f27a <_Color2Index_0+0x2a>
 800f262:	f1a0 0804 	sub.w	r8, r0, #4
 800f266:	4643      	mov	r3, r8
 800f268:	2000      	movs	r0, #0
 800f26a:	e002      	b.n	800f272 <_Color2Index_0+0x22>
 800f26c:	3001      	adds	r0, #1
 800f26e:	4287      	cmp	r7, r0
 800f270:	dd05      	ble.n	800f27e <_Color2Index_0+0x2e>
 800f272:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800f276:	42b2      	cmp	r2, r6
 800f278:	d1f8      	bne.n	800f26c <_Color2Index_0+0x1c>
 800f27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f27e:	2400      	movs	r4, #0
 800f280:	4625      	mov	r5, r4
 800f282:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 800f286:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7f8 f9d8 	bl	8007640 <GUI_CalcColorDist>
 800f290:	4581      	cmp	r9, r0
 800f292:	bf88      	it	hi
 800f294:	462c      	movhi	r4, r5
 800f296:	f105 0501 	add.w	r5, r5, #1
 800f29a:	bf88      	it	hi
 800f29c:	4681      	movhi	r9, r0
 800f29e:	42af      	cmp	r7, r5
 800f2a0:	dcf1      	bgt.n	800f286 <_Color2Index_0+0x36>
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f2a8 <GUI_GetYAdjust>:
 800f2a8:	4b0a      	ldr	r3, [pc, #40]	; (800f2d4 <GUI_GetYAdjust+0x2c>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800f2ae:	f003 030c 	and.w	r3, r3, #12
 800f2b2:	2b08      	cmp	r3, #8
 800f2b4:	d005      	beq.n	800f2c2 <GUI_GetYAdjust+0x1a>
 800f2b6:	2b0c      	cmp	r3, #12
 800f2b8:	d003      	beq.n	800f2c2 <GUI_GetYAdjust+0x1a>
 800f2ba:	2b04      	cmp	r3, #4
 800f2bc:	d005      	beq.n	800f2ca <GUI_GetYAdjust+0x22>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	4770      	bx	lr
 800f2c2:	69d3      	ldr	r3, [r2, #28]
 800f2c4:	7e18      	ldrb	r0, [r3, #24]
 800f2c6:	0840      	lsrs	r0, r0, #1
 800f2c8:	4770      	bx	lr
 800f2ca:	69d3      	ldr	r3, [r2, #28]
 800f2cc:	7e18      	ldrb	r0, [r3, #24]
 800f2ce:	3801      	subs	r0, #1
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	20000018 	.word	0x20000018

0800f2d8 <GUI_GetFontDistY>:
 800f2d8:	4b02      	ldr	r3, [pc, #8]	; (800f2e4 <GUI_GetFontDistY+0xc>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	69db      	ldr	r3, [r3, #28]
 800f2de:	7e58      	ldrb	r0, [r3, #25]
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	20000018 	.word	0x20000018

0800f2e8 <GUI_GetCharDistX>:
 800f2e8:	4b02      	ldr	r3, [pc, #8]	; (800f2f4 <GUI_GetCharDistX+0xc>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	4718      	bx	r3
 800f2f4:	20000018 	.word	0x20000018

0800f2f8 <GUI_GetCharDistXEx>:
 800f2f8:	4b02      	ldr	r3, [pc, #8]	; (800f304 <GUI_GetCharDistXEx+0xc>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	69db      	ldr	r3, [r3, #28]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	4718      	bx	r3
 800f302:	bf00      	nop
 800f304:	20000018 	.word	0x20000018

0800f308 <_Log2VisBuffered>:
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop

0800f30c <_DispLine>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	ab02      	add	r3, sp, #8
 800f312:	4d21      	ldr	r5, [pc, #132]	; (800f398 <_DispLine+0x8c>)
 800f314:	f843 1d08 	str.w	r1, [r3, #-8]!
 800f318:	4c20      	ldr	r4, [pc, #128]	; (800f39c <_DispLine+0x90>)
 800f31a:	9001      	str	r0, [sp, #4]
 800f31c:	4619      	mov	r1, r3
 800f31e:	682b      	ldr	r3, [r5, #0]
 800f320:	4615      	mov	r5, r2
 800f322:	4798      	blx	r3
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	9001      	str	r0, [sp, #4]
 800f328:	6958      	ldr	r0, [r3, #20]
 800f32a:	b118      	cbz	r0, 800f334 <_DispLine+0x28>
 800f32c:	4629      	mov	r1, r5
 800f32e:	f7f8 fa55 	bl	80077dc <GUI_RectsIntersect>
 800f332:	b1a8      	cbz	r0, 800f360 <_DispLine+0x54>
 800f334:	2001      	movs	r0, #1
 800f336:	f000 fcc7 	bl	800fcc8 <GUI__ManageCache>
 800f33a:	6822      	ldr	r2, [r4, #0]
 800f33c:	69d3      	ldr	r3, [r2, #28]
 800f33e:	695b      	ldr	r3, [r3, #20]
 800f340:	b1ab      	cbz	r3, 800f36e <_DispLine+0x62>
 800f342:	4c17      	ldr	r4, [pc, #92]	; (800f3a0 <_DispLine+0x94>)
 800f344:	6821      	ldr	r1, [r4, #0]
 800f346:	b169      	cbz	r1, 800f364 <_DispLine+0x58>
 800f348:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	9801      	ldr	r0, [sp, #4]
 800f350:	9900      	ldr	r1, [sp, #0]
 800f352:	4798      	blx	r3
 800f354:	4628      	mov	r0, r5
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	4798      	blx	r3
 800f35a:	2000      	movs	r0, #0
 800f35c:	f000 fcb4 	bl	800fcc8 <GUI__ManageCache>
 800f360:	b002      	add	sp, #8
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	9900      	ldr	r1, [sp, #0]
 800f368:	9801      	ldr	r0, [sp, #4]
 800f36a:	4798      	blx	r3
 800f36c:	e7f5      	b.n	800f35a <_DispLine+0x4e>
 800f36e:	4d0d      	ldr	r5, [pc, #52]	; (800f3a4 <_DispLine+0x98>)
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	3b01      	subs	r3, #1
 800f374:	2b00      	cmp	r3, #0
 800f376:	a801      	add	r0, sp, #4
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	dbee      	blt.n	800f35a <_DispLine+0x4e>
 800f37c:	f7f8 fe5e 	bl	800803c <GUI_UC__GetCharCodeInc>
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	69db      	ldr	r3, [r3, #28]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4606      	mov	r6, r0
 800f388:	4798      	blx	r3
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0ef      	beq.n	800f370 <_DispLine+0x64>
 800f390:	4630      	mov	r0, r6
 800f392:	4798      	blx	r3
 800f394:	e7ec      	b.n	800f370 <_DispLine+0x64>
 800f396:	bf00      	nop
 800f398:	20000040 	.word	0x20000040
 800f39c:	20000018 	.word	0x20000018
 800f3a0:	2001bd3c 	.word	0x2001bd3c
 800f3a4:	2001bd48 	.word	0x2001bd48

0800f3a8 <GUI__GetLineNumChars>:
 800f3a8:	b530      	push	{r4, r5, lr}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	9001      	str	r0, [sp, #4]
 800f3ae:	b300      	cbz	r0, 800f3f2 <GUI__GetLineNumChars+0x4a>
 800f3b0:	4b11      	ldr	r3, [pc, #68]	; (800f3f8 <GUI__GetLineNumChars+0x50>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	695b      	ldr	r3, [r3, #20]
 800f3b8:	460d      	mov	r5, r1
 800f3ba:	b123      	cbz	r3, 800f3c6 <GUI__GetLineNumChars+0x1e>
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	b113      	cbz	r3, 800f3c6 <GUI__GetLineNumChars+0x1e>
 800f3c0:	4798      	blx	r3
 800f3c2:	b003      	add	sp, #12
 800f3c4:	bd30      	pop	{r4, r5, pc}
 800f3c6:	2d00      	cmp	r5, #0
 800f3c8:	bfd8      	it	le
 800f3ca:	2000      	movle	r0, #0
 800f3cc:	ddf9      	ble.n	800f3c2 <GUI__GetLineNumChars+0x1a>
 800f3ce:	2400      	movs	r4, #0
 800f3d0:	e004      	b.n	800f3dc <GUI__GetLineNumChars+0x34>
 800f3d2:	280a      	cmp	r0, #10
 800f3d4:	d007      	beq.n	800f3e6 <GUI__GetLineNumChars+0x3e>
 800f3d6:	3401      	adds	r4, #1
 800f3d8:	42a5      	cmp	r5, r4
 800f3da:	d007      	beq.n	800f3ec <GUI__GetLineNumChars+0x44>
 800f3dc:	a801      	add	r0, sp, #4
 800f3de:	f7f8 fe2d 	bl	800803c <GUI_UC__GetCharCodeInc>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d1f5      	bne.n	800f3d2 <GUI__GetLineNumChars+0x2a>
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	b003      	add	sp, #12
 800f3ea:	bd30      	pop	{r4, r5, pc}
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	b003      	add	sp, #12
 800f3f0:	bd30      	pop	{r4, r5, pc}
 800f3f2:	b003      	add	sp, #12
 800f3f4:	bd30      	pop	{r4, r5, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20000018 	.word	0x20000018

0800f3fc <GUI__GetLineDistX>:
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	ab04      	add	r3, sp, #16
 800f402:	4a1d      	ldr	r2, [pc, #116]	; (800f478 <GUI__GetLineDistX+0x7c>)
 800f404:	f843 1d10 	str.w	r1, [r3, #-16]!
 800f408:	9001      	str	r0, [sp, #4]
 800f40a:	4619      	mov	r1, r3
 800f40c:	6813      	ldr	r3, [r2, #0]
 800f40e:	4798      	blx	r3
 800f410:	9001      	str	r0, [sp, #4]
 800f412:	b358      	cbz	r0, 800f46c <GUI__GetLineDistX+0x70>
 800f414:	4b19      	ldr	r3, [pc, #100]	; (800f47c <GUI__GetLineDistX+0x80>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	69db      	ldr	r3, [r3, #28]
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	b12b      	cbz	r3, 800f42a <GUI__GetLineDistX+0x2e>
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	b11b      	cbz	r3, 800f42a <GUI__GetLineDistX+0x2e>
 800f422:	9900      	ldr	r1, [sp, #0]
 800f424:	4798      	blx	r3
 800f426:	b004      	add	sp, #16
 800f428:	bd70      	pop	{r4, r5, r6, pc}
 800f42a:	9b00      	ldr	r3, [sp, #0]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	bfa8      	it	ge
 800f434:	2400      	movge	r4, #0
 800f436:	db1b      	blt.n	800f470 <GUI__GetLineDistX+0x74>
 800f438:	a801      	add	r0, sp, #4
 800f43a:	f7f8 fdff 	bl	800803c <GUI_UC__GetCharCodeInc>
 800f43e:	4605      	mov	r5, r0
 800f440:	f7ff ff52 	bl	800f2e8 <GUI_GetCharDistX>
 800f444:	9b00      	ldr	r3, [sp, #0]
 800f446:	3b01      	subs	r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	4404      	add	r4, r0
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	daf3      	bge.n	800f438 <GUI__GetLineDistX+0x3c>
 800f450:	a904      	add	r1, sp, #16
 800f452:	2600      	movs	r6, #0
 800f454:	f841 6d04 	str.w	r6, [r1, #-4]!
 800f458:	4628      	mov	r0, r5
 800f45a:	f7ff ff4d 	bl	800f2f8 <GUI_GetCharDistXEx>
 800f45e:	9b03      	ldr	r3, [sp, #12]
 800f460:	4298      	cmp	r0, r3
 800f462:	bfb8      	it	lt
 800f464:	1a1e      	sublt	r6, r3, r0
 800f466:	1930      	adds	r0, r6, r4
 800f468:	b004      	add	sp, #16
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
 800f46c:	b004      	add	sp, #16
 800f46e:	bd70      	pop	{r4, r5, r6, pc}
 800f470:	2500      	movs	r5, #0
 800f472:	462c      	mov	r4, r5
 800f474:	e7ec      	b.n	800f450 <GUI__GetLineDistX+0x54>
 800f476:	bf00      	nop
 800f478:	20000040 	.word	0x20000040
 800f47c:	20000018 	.word	0x20000018

0800f480 <GUI__DispLine>:
 800f480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f482:	4b2a      	ldr	r3, [pc, #168]	; (800f52c <GUI__DispLine+0xac>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	b083      	sub	sp, #12
 800f488:	4604      	mov	r4, r0
 800f48a:	460d      	mov	r5, r1
 800f48c:	b17b      	cbz	r3, 800f4ae <GUI__DispLine+0x2e>
 800f48e:	2000      	movs	r0, #0
 800f490:	f7fe fef8 	bl	800e284 <WM__InitIVRSearch>
 800f494:	b148      	cbz	r0, 800f4aa <GUI__DispLine+0x2a>
 800f496:	466e      	mov	r6, sp
 800f498:	4632      	mov	r2, r6
 800f49a:	4629      	mov	r1, r5
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7ff ff35 	bl	800f30c <_DispLine>
 800f4a2:	f7fe fdc9 	bl	800e038 <WM__GetNextIVR>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d1f6      	bne.n	800f498 <GUI__DispLine+0x18>
 800f4aa:	b003      	add	sp, #12
 800f4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ae:	6810      	ldr	r0, [r2, #0]
 800f4b0:	6851      	ldr	r1, [r2, #4]
 800f4b2:	4f1f      	ldr	r7, [pc, #124]	; (800f530 <GUI__DispLine+0xb0>)
 800f4b4:	466b      	mov	r3, sp
 800f4b6:	c303      	stmia	r3!, {r0, r1}
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	f8bd 0000 	ldrh.w	r0, [sp]
 800f4be:	f8b3 e04c 	ldrh.w	lr, [r3, #76]	; 0x4c
 800f4c2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800f4c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800f4ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f4ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f4d2:	4470      	add	r0, lr
 800f4d4:	4432      	add	r2, r6
 800f4d6:	4433      	add	r3, r6
 800f4d8:	4471      	add	r1, lr
 800f4da:	f8ad 0000 	strh.w	r0, [sp]
 800f4de:	4668      	mov	r0, sp
 800f4e0:	466e      	mov	r6, sp
 800f4e2:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f4e6:	f8ad 2002 	strh.w	r2, [sp, #2]
 800f4ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f4ee:	f7fe fec9 	bl	800e284 <WM__InitIVRSearch>
 800f4f2:	b950      	cbnz	r0, 800f50a <GUI__DispLine+0x8a>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f4f8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800f4fa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f4fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f4fe:	1b09      	subs	r1, r1, r4
 800f500:	1a12      	subs	r2, r2, r0
 800f502:	8459      	strh	r1, [r3, #34]	; 0x22
 800f504:	849a      	strh	r2, [r3, #36]	; 0x24
 800f506:	b003      	add	sp, #12
 800f508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	f8bd 1000 	ldrh.w	r1, [sp]
 800f510:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f514:	8459      	strh	r1, [r3, #34]	; 0x22
 800f516:	849a      	strh	r2, [r3, #36]	; 0x24
 800f518:	4629      	mov	r1, r5
 800f51a:	4632      	mov	r2, r6
 800f51c:	4620      	mov	r0, r4
 800f51e:	f7ff fef5 	bl	800f30c <_DispLine>
 800f522:	f7fe fd89 	bl	800e038 <WM__GetNextIVR>
 800f526:	2800      	cmp	r0, #0
 800f528:	d1ef      	bne.n	800f50a <GUI__DispLine+0x8a>
 800f52a:	e7e3      	b.n	800f4f4 <GUI__DispLine+0x74>
 800f52c:	2001bd28 	.word	0x2001bd28
 800f530:	20000018 	.word	0x20000018

0800f534 <GUIMONO_DispChar>:
 800f534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f538:	4e4f      	ldr	r6, [pc, #316]	; (800f678 <GUIMONO_DispChar+0x144>)
 800f53a:	6833      	ldr	r3, [r6, #0]
 800f53c:	69da      	ldr	r2, [r3, #28]
 800f53e:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 800f542:	69d4      	ldr	r4, [r2, #28]
 800f544:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 800f548:	4583      	cmp	fp, r0
 800f54a:	b08b      	sub	sp, #44	; 0x2c
 800f54c:	d87d      	bhi.n	800f64a <GUIMONO_DispChar+0x116>
 800f54e:	89e1      	ldrh	r1, [r4, #14]
 800f550:	4281      	cmp	r1, r0
 800f552:	d37a      	bcc.n	800f64a <GUIMONO_DispChar+0x116>
 800f554:	6821      	ldr	r1, [r4, #0]
 800f556:	9108      	str	r1, [sp, #32]
 800f558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f55c:	ebcb 0b00 	rsb	fp, fp, r0
 800f560:	9107      	str	r1, [sp, #28]
 800f562:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800f566:	d06a      	beq.n	800f63e <GUIMONO_DispChar+0x10a>
 800f568:	7e17      	ldrb	r7, [r2, #24]
 800f56a:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 800f56e:	7ca2      	ldrb	r2, [r4, #18]
 800f570:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 800f574:	f894 a010 	ldrb.w	sl, [r4, #16]
 800f578:	fb17 f302 	smulbb	r3, r7, r2
 800f57c:	4640      	mov	r0, r8
 800f57e:	9306      	str	r3, [sp, #24]
 800f580:	f7f9 f96a 	bl	8008858 <LCD_SetDrawMode>
 800f584:	6833      	ldr	r3, [r6, #0]
 800f586:	9a06      	ldr	r2, [sp, #24]
 800f588:	9908      	ldr	r1, [sp, #32]
 800f58a:	9009      	str	r0, [sp, #36]	; 0x24
 800f58c:	fb02 100b 	mla	r0, r2, fp, r1
 800f590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f592:	69db      	ldr	r3, [r3, #28]
 800f594:	9004      	str	r0, [sp, #16]
 800f596:	9205      	str	r2, [sp, #20]
 800f598:	7ca2      	ldrb	r2, [r4, #18]
 800f59a:	9203      	str	r2, [sp, #12]
 800f59c:	f04f 0b01 	mov.w	fp, #1
 800f5a0:	f8cd b008 	str.w	fp, [sp, #8]
 800f5a4:	7eda      	ldrb	r2, [r3, #27]
 800f5a6:	9201      	str	r2, [sp, #4]
 800f5a8:	7e9b      	ldrb	r3, [r3, #26]
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	463b      	mov	r3, r7
 800f5b0:	4652      	mov	r2, sl
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	f7f9 faf4 	bl	8008ba0 <LCD_DrawBitmap>
 800f5b8:	9807      	ldr	r0, [sp, #28]
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	d01c      	beq.n	800f5f8 <GUIMONO_DispChar+0xc4>
 800f5be:	f048 0002 	orr.w	r0, r8, #2
 800f5c2:	f7f9 f949 	bl	8008858 <LCD_SetDrawMode>
 800f5c6:	4a2c      	ldr	r2, [pc, #176]	; (800f678 <GUIMONO_DispChar+0x144>)
 800f5c8:	9807      	ldr	r0, [sp, #28]
 800f5ca:	6812      	ldr	r2, [r2, #0]
 800f5cc:	9908      	ldr	r1, [sp, #32]
 800f5ce:	9b06      	ldr	r3, [sp, #24]
 800f5d0:	fb03 1300 	mla	r3, r3, r0, r1
 800f5d4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800f5d6:	69d2      	ldr	r2, [r2, #28]
 800f5d8:	9105      	str	r1, [sp, #20]
 800f5da:	9304      	str	r3, [sp, #16]
 800f5dc:	7ca3      	ldrb	r3, [r4, #18]
 800f5de:	9303      	str	r3, [sp, #12]
 800f5e0:	f8cd b008 	str.w	fp, [sp, #8]
 800f5e4:	7ed3      	ldrb	r3, [r2, #27]
 800f5e6:	9301      	str	r3, [sp, #4]
 800f5e8:	7e93      	ldrb	r3, [r2, #26]
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	4652      	mov	r2, sl
 800f5ee:	463b      	mov	r3, r7
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f7f9 fad4 	bl	8008ba0 <LCD_DrawBitmap>
 800f5f8:	6833      	ldr	r3, [r6, #0]
 800f5fa:	4f1f      	ldr	r7, [pc, #124]	; (800f678 <GUIMONO_DispChar+0x144>)
 800f5fc:	69db      	ldr	r3, [r3, #28]
 800f5fe:	7e5a      	ldrb	r2, [r3, #25]
 800f600:	7e1b      	ldrb	r3, [r3, #24]
 800f602:	429a      	cmp	r2, r3
 800f604:	d914      	bls.n	800f630 <GUIMONO_DispChar+0xfc>
 800f606:	f1b8 0f02 	cmp.w	r8, #2
 800f60a:	d011      	beq.n	800f630 <GUIMONO_DispChar+0xfc>
 800f60c:	f088 0004 	eor.w	r0, r8, #4
 800f610:	f7f9 f922 	bl	8008858 <LCD_SetDrawMode>
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	69db      	ldr	r3, [r3, #28]
 800f618:	7e18      	ldrb	r0, [r3, #24]
 800f61a:	7ed9      	ldrb	r1, [r3, #27]
 800f61c:	7e9a      	ldrb	r2, [r3, #26]
 800f61e:	7e5b      	ldrb	r3, [r3, #25]
 800f620:	fb00 9101 	mla	r1, r0, r1, r9
 800f624:	fb0a 5202 	mla	r2, sl, r2, r5
 800f628:	444b      	add	r3, r9
 800f62a:	4628      	mov	r0, r5
 800f62c:	f7f9 f97a 	bl	8008924 <LCD_FillRect>
 800f630:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800f634:	f7f9 f910 	bl	8008858 <LCD_SetDrawMode>
 800f638:	6833      	ldr	r3, [r6, #0]
 800f63a:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 800f63e:	7c62      	ldrb	r2, [r4, #17]
 800f640:	4415      	add	r5, r2
 800f642:	845d      	strh	r5, [r3, #34]	; 0x22
 800f644:	b00b      	add	sp, #44	; 0x2c
 800f646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64a:	68a1      	ldr	r1, [r4, #8]
 800f64c:	2900      	cmp	r1, #0
 800f64e:	d0f6      	beq.n	800f63e <GUIMONO_DispChar+0x10a>
 800f650:	880f      	ldrh	r7, [r1, #0]
 800f652:	42b8      	cmp	r0, r7
 800f654:	d3f3      	bcc.n	800f63e <GUIMONO_DispChar+0x10a>
 800f656:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 800f65a:	4586      	cmp	lr, r0
 800f65c:	d3ef      	bcc.n	800f63e <GUIMONO_DispChar+0x10a>
 800f65e:	6849      	ldr	r1, [r1, #4]
 800f660:	1bc0      	subs	r0, r0, r7
 800f662:	b280      	uxth	r0, r0
 800f664:	6867      	ldr	r7, [r4, #4]
 800f666:	9708      	str	r7, [sp, #32]
 800f668:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 800f66c:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 800f670:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f674:	9107      	str	r1, [sp, #28]
 800f676:	e774      	b.n	800f562 <GUIMONO_DispChar+0x2e>
 800f678:	20000018 	.word	0x20000018

0800f67c <GUIMONO_GetCharDistX>:
 800f67c:	4b04      	ldr	r3, [pc, #16]	; (800f690 <GUIMONO_GetCharDistX+0x14>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	69db      	ldr	r3, [r3, #28]
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	b109      	cbz	r1, 800f68a <GUIMONO_GetCharDistX+0xe>
 800f686:	7c1a      	ldrb	r2, [r3, #16]
 800f688:	600a      	str	r2, [r1, #0]
 800f68a:	7c58      	ldrb	r0, [r3, #17]
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	20000018 	.word	0x20000018

0800f694 <GUIMONO_GetFontInfo>:
 800f694:	2302      	movs	r3, #2
 800f696:	800b      	strh	r3, [r1, #0]
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop

0800f69c <GUIMONO_IsInFont>:
 800f69c:	69c3      	ldr	r3, [r0, #28]
 800f69e:	899a      	ldrh	r2, [r3, #12]
 800f6a0:	428a      	cmp	r2, r1
 800f6a2:	d802      	bhi.n	800f6aa <GUIMONO_IsInFont+0xe>
 800f6a4:	89da      	ldrh	r2, [r3, #14]
 800f6a6:	428a      	cmp	r2, r1
 800f6a8:	d211      	bcs.n	800f6ce <GUIMONO_IsInFont+0x32>
 800f6aa:	6898      	ldr	r0, [r3, #8]
 800f6ac:	b118      	cbz	r0, 800f6b6 <GUIMONO_IsInFont+0x1a>
 800f6ae:	8803      	ldrh	r3, [r0, #0]
 800f6b0:	4299      	cmp	r1, r3
 800f6b2:	d201      	bcs.n	800f6b8 <GUIMONO_IsInFont+0x1c>
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	4770      	bx	lr
 800f6b8:	8842      	ldrh	r2, [r0, #2]
 800f6ba:	428a      	cmp	r2, r1
 800f6bc:	d3fa      	bcc.n	800f6b4 <GUIMONO_IsInFont+0x18>
 800f6be:	1ac9      	subs	r1, r1, r3
 800f6c0:	6843      	ldr	r3, [r0, #4]
 800f6c2:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 800f6c6:	43c0      	mvns	r0, r0
 800f6c8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800f6cc:	4770      	bx	lr
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop

0800f6d4 <GUIPROP_DispChar>:
 800f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	4d3e      	ldr	r5, [pc, #248]	; (800f7d4 <GUIPROP_DispChar+0x100>)
 800f6da:	682b      	ldr	r3, [r5, #0]
 800f6dc:	69da      	ldr	r2, [r3, #28]
 800f6de:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 800f6e2:	69d3      	ldr	r3, [r2, #28]
 800f6e4:	b089      	sub	sp, #36	; 0x24
 800f6e6:	b143      	cbz	r3, 800f6fa <GUIPROP_DispChar+0x26>
 800f6e8:	881a      	ldrh	r2, [r3, #0]
 800f6ea:	4290      	cmp	r0, r2
 800f6ec:	d302      	bcc.n	800f6f4 <GUIPROP_DispChar+0x20>
 800f6ee:	8859      	ldrh	r1, [r3, #2]
 800f6f0:	4281      	cmp	r1, r0
 800f6f2:	d205      	bcs.n	800f700 <GUIPROP_DispChar+0x2c>
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1f6      	bne.n	800f6e8 <GUIPROP_DispChar+0x14>
 800f6fa:	b009      	add	sp, #36	; 0x24
 800f6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f700:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f704:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800f7d4 <GUIPROP_DispChar+0x100>
 800f708:	1a84      	subs	r4, r0, r2
 800f70a:	eb08 07c4 	add.w	r7, r8, r4, lsl #3
 800f70e:	4630      	mov	r0, r6
 800f710:	f897 b002 	ldrb.w	fp, [r7, #2]
 800f714:	f7f9 f8a0 	bl	8008858 <LCD_SetDrawMode>
 800f718:	4682      	mov	sl, r0
 800f71a:	6828      	ldr	r0, [r5, #0]
 800f71c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 800f720:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 800f724:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 800f728:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800f72c:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 800f730:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800f734:	f8cd c014 	str.w	ip, [sp, #20]
 800f738:	9306      	str	r3, [sp, #24]
 800f73a:	f04f 0c01 	mov.w	ip, #1
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	9304      	str	r3, [sp, #16]
 800f742:	f8cd b00c 	str.w	fp, [sp, #12]
 800f746:	f8cd c008 	str.w	ip, [sp, #8]
 800f74a:	f89e c01b 	ldrb.w	ip, [lr, #27]
 800f74e:	f8cd c004 	str.w	ip, [sp, #4]
 800f752:	f89e e01a 	ldrb.w	lr, [lr, #26]
 800f756:	9b06      	ldr	r3, [sp, #24]
 800f758:	f8cd e000 	str.w	lr, [sp]
 800f75c:	f7f9 fa20 	bl	8008ba0 <LCD_DrawBitmap>
 800f760:	682b      	ldr	r3, [r5, #0]
 800f762:	69da      	ldr	r2, [r3, #28]
 800f764:	7e53      	ldrb	r3, [r2, #25]
 800f766:	f892 b018 	ldrb.w	fp, [r2, #24]
 800f76a:	455b      	cmp	r3, fp
 800f76c:	d923      	bls.n	800f7b6 <GUIPROP_DispChar+0xe2>
 800f76e:	2e02      	cmp	r6, #2
 800f770:	9306      	str	r3, [sp, #24]
 800f772:	d020      	beq.n	800f7b6 <GUIPROP_DispChar+0xe2>
 800f774:	7ed1      	ldrb	r1, [r2, #27]
 800f776:	9107      	str	r1, [sp, #28]
 800f778:	f7f7 ff92 	bl	80076a0 <GUI_GetColor>
 800f77c:	4606      	mov	r6, r0
 800f77e:	f7f7 ff87 	bl	8007690 <GUI_GetBkColor>
 800f782:	f7f8 f869 	bl	8007858 <GUI_SetColor>
 800f786:	f8d9 2000 	ldr.w	r2, [r9]
 800f78a:	f818 c034 	ldrb.w	ip, [r8, r4, lsl #3]
 800f78e:	69d4      	ldr	r4, [r2, #28]
 800f790:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 800f794:	f894 e01b 	ldrb.w	lr, [r4, #27]
 800f798:	9907      	ldr	r1, [sp, #28]
 800f79a:	f9b2 4024 	ldrsh.w	r4, [r2, #36]	; 0x24
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	fb0c 020e 	mla	r2, ip, lr, r0
 800f7a4:	fb01 4303 	mla	r3, r1, r3, r4
 800f7a8:	fb01 410b 	mla	r1, r1, fp, r4
 800f7ac:	f7f9 f8ba 	bl	8008924 <LCD_FillRect>
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f7f8 f851 	bl	8007858 <GUI_SetColor>
 800f7b6:	4650      	mov	r0, sl
 800f7b8:	f7f9 f84e 	bl	8008858 <LCD_SetDrawMode>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	7879      	ldrb	r1, [r7, #1]
 800f7c0:	69d8      	ldr	r0, [r3, #28]
 800f7c2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f7c4:	7e80      	ldrb	r0, [r0, #26]
 800f7c6:	fb00 2201 	mla	r2, r0, r1, r2
 800f7ca:	845a      	strh	r2, [r3, #34]	; 0x22
 800f7cc:	b009      	add	sp, #36	; 0x24
 800f7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20000018 	.word	0x20000018

0800f7d8 <GUIPROP_GetCharDistX>:
 800f7d8:	4b11      	ldr	r3, [pc, #68]	; (800f820 <GUIPROP_GetCharDistX+0x48>)
 800f7da:	b470      	push	{r4, r5, r6}
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69dd      	ldr	r5, [r3, #28]
 800f7e0:	69eb      	ldr	r3, [r5, #28]
 800f7e2:	b143      	cbz	r3, 800f7f6 <GUIPROP_GetCharDistX+0x1e>
 800f7e4:	881a      	ldrh	r2, [r3, #0]
 800f7e6:	4290      	cmp	r0, r2
 800f7e8:	d302      	bcc.n	800f7f0 <GUIPROP_GetCharDistX+0x18>
 800f7ea:	885c      	ldrh	r4, [r3, #2]
 800f7ec:	4284      	cmp	r4, r0
 800f7ee:	d205      	bcs.n	800f7fc <GUIPROP_GetCharDistX+0x24>
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1f6      	bne.n	800f7e4 <GUIPROP_GetCharDistX+0xc>
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	bc70      	pop	{r4, r5, r6}
 800f7fa:	4770      	bx	lr
 800f7fc:	685e      	ldr	r6, [r3, #4]
 800f7fe:	7eac      	ldrb	r4, [r5, #26]
 800f800:	1a82      	subs	r2, r0, r2
 800f802:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 800f806:	785b      	ldrb	r3, [r3, #1]
 800f808:	fb13 f004 	smulbb	r0, r3, r4
 800f80c:	2900      	cmp	r1, #0
 800f80e:	d0f3      	beq.n	800f7f8 <GUIPROP_GetCharDistX+0x20>
 800f810:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 800f814:	fb14 f303 	smulbb	r3, r4, r3
 800f818:	600b      	str	r3, [r1, #0]
 800f81a:	bc70      	pop	{r4, r5, r6}
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	20000018 	.word	0x20000018

0800f824 <GUIPROP_GetFontInfo>:
 800f824:	2301      	movs	r3, #1
 800f826:	800b      	strh	r3, [r1, #0]
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop

0800f82c <GUIPROP_IsInFont>:
 800f82c:	69c0      	ldr	r0, [r0, #28]
 800f82e:	b150      	cbz	r0, 800f846 <GUIPROP_IsInFont+0x1a>
 800f830:	8803      	ldrh	r3, [r0, #0]
 800f832:	428b      	cmp	r3, r1
 800f834:	d802      	bhi.n	800f83c <GUIPROP_IsInFont+0x10>
 800f836:	8843      	ldrh	r3, [r0, #2]
 800f838:	428b      	cmp	r3, r1
 800f83a:	d203      	bcs.n	800f844 <GUIPROP_IsInFont+0x18>
 800f83c:	6880      	ldr	r0, [r0, #8]
 800f83e:	2800      	cmp	r0, #0
 800f840:	d1f6      	bne.n	800f830 <GUIPROP_IsInFont+0x4>
 800f842:	4770      	bx	lr
 800f844:	2001      	movs	r0, #1
 800f846:	4770      	bx	lr

0800f848 <GUI_TIMER__GetFirstTimer>:
 800f848:	b530      	push	{r4, r5, lr}
 800f84a:	4b0a      	ldr	r3, [pc, #40]	; (800f874 <GUI_TIMER__GetFirstTimer+0x2c>)
 800f84c:	681c      	ldr	r4, [r3, #0]
 800f84e:	2300      	movs	r3, #0
 800f850:	b083      	sub	sp, #12
 800f852:	6003      	str	r3, [r0, #0]
 800f854:	b15c      	cbz	r4, 800f86e <GUI_TIMER__GetFirstTimer+0x26>
 800f856:	4605      	mov	r5, r0
 800f858:	4620      	mov	r0, r4
 800f85a:	f7f7 fdbb 	bl	80073d4 <GUI_ALLOC_LockH>
 800f85e:	ab02      	add	r3, sp, #8
 800f860:	6902      	ldr	r2, [r0, #16]
 800f862:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f866:	602a      	str	r2, [r5, #0]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f7 fdc5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f86e:	4620      	mov	r0, r4
 800f870:	b003      	add	sp, #12
 800f872:	bd30      	pop	{r4, r5, pc}
 800f874:	20000220 	.word	0x20000220

0800f878 <GUI_TIMER__GetNextTimerLin>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	2300      	movs	r3, #0
 800f87c:	b082      	sub	sp, #8
 800f87e:	600b      	str	r3, [r1, #0]
 800f880:	b918      	cbnz	r0, 800f88a <GUI_TIMER__GetNextTimerLin+0x12>
 800f882:	4604      	mov	r4, r0
 800f884:	4620      	mov	r0, r4
 800f886:	b002      	add	sp, #8
 800f888:	bd70      	pop	{r4, r5, r6, pc}
 800f88a:	460d      	mov	r5, r1
 800f88c:	f7f7 fda2 	bl	80073d4 <GUI_ALLOC_LockH>
 800f890:	6884      	ldr	r4, [r0, #8]
 800f892:	9001      	str	r0, [sp, #4]
 800f894:	ae01      	add	r6, sp, #4
 800f896:	b92c      	cbnz	r4, 800f8a4 <GUI_TIMER__GetNextTimerLin+0x2c>
 800f898:	4630      	mov	r0, r6
 800f89a:	f7f7 fdad 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f89e:	4620      	mov	r0, r4
 800f8a0:	b002      	add	sp, #8
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	f7f7 fda7 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f7f7 fd92 	bl	80073d4 <GUI_ALLOC_LockH>
 800f8b0:	6903      	ldr	r3, [r0, #16]
 800f8b2:	9001      	str	r0, [sp, #4]
 800f8b4:	602b      	str	r3, [r5, #0]
 800f8b6:	e7ef      	b.n	800f898 <GUI_TIMER__GetNextTimerLin+0x20>

0800f8b8 <GUI_TIMER_Delete>:
 800f8b8:	b900      	cbnz	r0, 800f8bc <GUI_TIMER_Delete+0x4>
 800f8ba:	4770      	bx	lr
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800f978 <GUI_TIMER_Delete+0xc0>
 800f8c4:	f8d8 4000 	ldr.w	r4, [r8]
 800f8c8:	42a0      	cmp	r0, r4
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	d040      	beq.n	800f952 <GUI_TIMER_Delete+0x9a>
 800f8d0:	466f      	mov	r7, sp
 800f8d2:	b91c      	cbnz	r4, 800f8dc <GUI_TIMER_Delete+0x24>
 800f8d4:	e017      	b.n	800f906 <GUI_TIMER_Delete+0x4e>
 800f8d6:	f7f7 fd8f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f8da:	b1a4      	cbz	r4, 800f906 <GUI_TIMER_Delete+0x4e>
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f7f7 fd79 	bl	80073d4 <GUI_ALLOC_LockH>
 800f8e2:	6884      	ldr	r4, [r0, #8]
 800f8e4:	9000      	str	r0, [sp, #0]
 800f8e6:	42a5      	cmp	r5, r4
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	d1f4      	bne.n	800f8d6 <GUI_TIMER_Delete+0x1e>
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f7f7 fd71 	bl	80073d4 <GUI_ALLOC_LockH>
 800f8f2:	9b00      	ldr	r3, [sp, #0]
 800f8f4:	6882      	ldr	r2, [r0, #8]
 800f8f6:	9001      	str	r0, [sp, #4]
 800f8f8:	a801      	add	r0, sp, #4
 800f8fa:	609a      	str	r2, [r3, #8]
 800f8fc:	f7f7 fd7c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f900:	4638      	mov	r0, r7
 800f902:	f7f7 fd79 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f906:	4628      	mov	r0, r5
 800f908:	f7f7 fd64 	bl	80073d4 <GUI_ALLOC_LockH>
 800f90c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f910:	9000      	str	r0, [sp, #0]
 800f912:	42a5      	cmp	r5, r4
 800f914:	4b18      	ldr	r3, [pc, #96]	; (800f978 <GUI_TIMER_Delete+0xc0>)
 800f916:	d029      	beq.n	800f96c <GUI_TIMER_Delete+0xb4>
 800f918:	ae01      	add	r6, sp, #4
 800f91a:	b91c      	cbnz	r4, 800f924 <GUI_TIMER_Delete+0x6c>
 800f91c:	e010      	b.n	800f940 <GUI_TIMER_Delete+0x88>
 800f91e:	f7f7 fd6b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f922:	b16c      	cbz	r4, 800f940 <GUI_TIMER_Delete+0x88>
 800f924:	4620      	mov	r0, r4
 800f926:	f7f7 fd55 	bl	80073d4 <GUI_ALLOC_LockH>
 800f92a:	6844      	ldr	r4, [r0, #4]
 800f92c:	9001      	str	r0, [sp, #4]
 800f92e:	42a5      	cmp	r5, r4
 800f930:	4603      	mov	r3, r0
 800f932:	4630      	mov	r0, r6
 800f934:	d1f3      	bne.n	800f91e <GUI_TIMER_Delete+0x66>
 800f936:	9a00      	ldr	r2, [sp, #0]
 800f938:	6852      	ldr	r2, [r2, #4]
 800f93a:	605a      	str	r2, [r3, #4]
 800f93c:	f7f7 fd5c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f940:	4638      	mov	r0, r7
 800f942:	f7f7 fd59 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f946:	4628      	mov	r0, r5
 800f948:	f7f7 fe28 	bl	800759c <GUI_ALLOC_Free>
 800f94c:	b002      	add	sp, #8
 800f94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f952:	f7f7 fd3f 	bl	80073d4 <GUI_ALLOC_LockH>
 800f956:	ae02      	add	r6, sp, #8
 800f958:	6883      	ldr	r3, [r0, #8]
 800f95a:	f846 0d04 	str.w	r0, [r6, #-4]!
 800f95e:	4630      	mov	r0, r6
 800f960:	f8c8 3000 	str.w	r3, [r8]
 800f964:	466f      	mov	r7, sp
 800f966:	f7f7 fd47 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f96a:	e7cc      	b.n	800f906 <GUI_TIMER_Delete+0x4e>
 800f96c:	6842      	ldr	r2, [r0, #4]
 800f96e:	605a      	str	r2, [r3, #4]
 800f970:	4638      	mov	r0, r7
 800f972:	f7f7 fd41 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f976:	e7e6      	b.n	800f946 <GUI_TIMER_Delete+0x8e>
 800f978:	20000220 	.word	0x20000220

0800f97c <GUI_TIMER_GetFlag>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	b918      	cbnz	r0, 800f98a <GUI_TIMER_GetFlag+0xe>
 800f982:	2401      	movs	r4, #1
 800f984:	4620      	mov	r0, r4
 800f986:	b002      	add	sp, #8
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	460c      	mov	r4, r1
 800f98c:	f7f7 fd22 	bl	80073d4 <GUI_ALLOC_LockH>
 800f990:	ab02      	add	r3, sp, #8
 800f992:	8982      	ldrh	r2, [r0, #12]
 800f994:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f998:	4222      	tst	r2, r4
 800f99a:	4618      	mov	r0, r3
 800f99c:	bf14      	ite	ne
 800f99e:	2401      	movne	r4, #1
 800f9a0:	2400      	moveq	r4, #0
 800f9a2:	f7f7 fd29 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	b002      	add	sp, #8
 800f9aa:	bd10      	pop	{r4, pc}

0800f9ac <GUI__CompactPixelIndices>:
 800f9ac:	2a08      	cmp	r2, #8
 800f9ae:	b410      	push	{r4}
 800f9b0:	dd0e      	ble.n	800f9d0 <GUI__CompactPixelIndices+0x24>
 800f9b2:	2a10      	cmp	r2, #16
 800f9b4:	dc1c      	bgt.n	800f9f0 <GUI__CompactPixelIndices+0x44>
 800f9b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f9c0:	f823 2b02 	strh.w	r2, [r3], #2
 800f9c4:	4299      	cmp	r1, r3
 800f9c6:	d1f9      	bne.n	800f9bc <GUI__CompactPixelIndices+0x10>
 800f9c8:	2001      	movs	r0, #1
 800f9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	2a02      	cmp	r2, #2
 800f9d2:	d011      	beq.n	800f9f8 <GUI__CompactPixelIndices+0x4c>
 800f9d4:	2a04      	cmp	r2, #4
 800f9d6:	f000 8090 	beq.w	800fafa <GUI__CompactPixelIndices+0x14e>
 800f9da:	2a01      	cmp	r2, #1
 800f9dc:	d03c      	beq.n	800fa58 <GUI__CompactPixelIndices+0xac>
 800f9de:	4401      	add	r1, r0
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	f850 2b04 	ldr.w	r2, [r0], #4
 800f9e6:	f803 2b01 	strb.w	r2, [r3], #1
 800f9ea:	4299      	cmp	r1, r3
 800f9ec:	d1f9      	bne.n	800f9e2 <GUI__CompactPixelIndices+0x36>
 800f9ee:	e7eb      	b.n	800f9c8 <GUI__CompactPixelIndices+0x1c>
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	f100 0210 	add.w	r2, r0, #16
 800f9fc:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800fa00:	2901      	cmp	r1, #1
 800fa02:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	d023      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fa0a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 800fa0e:	0124      	lsls	r4, r4, #4
 800fa10:	f004 0430 	and.w	r4, r4, #48	; 0x30
 800fa14:	2902      	cmp	r1, #2
 800fa16:	ea43 0304 	orr.w	r3, r3, r4
 800fa1a:	d01a      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fa1c:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800fa20:	00a4      	lsls	r4, r4, #2
 800fa22:	f004 040c 	and.w	r4, r4, #12
 800fa26:	2903      	cmp	r1, #3
 800fa28:	ea43 0304 	orr.w	r3, r3, r4
 800fa2c:	d011      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fa2e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800fa32:	f004 0403 	and.w	r4, r4, #3
 800fa36:	4323      	orrs	r3, r4
 800fa38:	3904      	subs	r1, #4
 800fa3a:	f800 3b01 	strb.w	r3, [r0], #1
 800fa3e:	f102 0210 	add.w	r2, r2, #16
 800fa42:	d0c1      	beq.n	800f9c8 <GUI__CompactPixelIndices+0x1c>
 800fa44:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800fa48:	2901      	cmp	r1, #1
 800fa4a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	d1db      	bne.n	800fa0a <GUI__CompactPixelIndices+0x5e>
 800fa52:	7003      	strb	r3, [r0, #0]
 800fa54:	2001      	movs	r0, #1
 800fa56:	e7b8      	b.n	800f9ca <GUI__CompactPixelIndices+0x1e>
 800fa58:	f100 0220 	add.w	r2, r0, #32
 800fa5c:	f852 3c20 	ldr.w	r3, [r2, #-32]
 800fa60:	2901      	cmp	r1, #1
 800fa62:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	d0f3      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fa6a:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 800fa6e:	01a4      	lsls	r4, r4, #6
 800fa70:	f004 0440 	and.w	r4, r4, #64	; 0x40
 800fa74:	2902      	cmp	r1, #2
 800fa76:	ea43 0304 	orr.w	r3, r3, r4
 800fa7a:	d0ea      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fa7c:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800fa80:	0164      	lsls	r4, r4, #5
 800fa82:	f004 0420 	and.w	r4, r4, #32
 800fa86:	2903      	cmp	r1, #3
 800fa88:	ea43 0304 	orr.w	r3, r3, r4
 800fa8c:	d0e1      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fa8e:	f852 4c14 	ldr.w	r4, [r2, #-20]
 800fa92:	0124      	lsls	r4, r4, #4
 800fa94:	f004 0410 	and.w	r4, r4, #16
 800fa98:	2904      	cmp	r1, #4
 800fa9a:	ea43 0304 	orr.w	r3, r3, r4
 800fa9e:	d0d8      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800faa0:	f852 4c10 	ldr.w	r4, [r2, #-16]
 800faa4:	00e4      	lsls	r4, r4, #3
 800faa6:	f004 0408 	and.w	r4, r4, #8
 800faaa:	2905      	cmp	r1, #5
 800faac:	ea43 0304 	orr.w	r3, r3, r4
 800fab0:	d0cf      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fab2:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 800fab6:	00a4      	lsls	r4, r4, #2
 800fab8:	f004 0404 	and.w	r4, r4, #4
 800fabc:	2906      	cmp	r1, #6
 800fabe:	ea43 0304 	orr.w	r3, r3, r4
 800fac2:	d0c6      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fac4:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800fac8:	0064      	lsls	r4, r4, #1
 800faca:	f004 0402 	and.w	r4, r4, #2
 800face:	3907      	subs	r1, #7
 800fad0:	ea43 0304 	orr.w	r3, r3, r4
 800fad4:	f102 0220 	add.w	r2, r2, #32
 800fad8:	d0bb      	beq.n	800fa52 <GUI__CompactPixelIndices+0xa6>
 800fada:	f852 4c24 	ldr.w	r4, [r2, #-36]
 800fade:	f004 0401 	and.w	r4, r4, #1
 800fae2:	4323      	orrs	r3, r4
 800fae4:	f800 3b01 	strb.w	r3, [r0], #1
 800fae8:	f852 3c20 	ldr.w	r3, [r2, #-32]
 800faec:	2901      	cmp	r1, #1
 800faee:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	d1b9      	bne.n	800fa6a <GUI__CompactPixelIndices+0xbe>
 800faf6:	7003      	strb	r3, [r0, #0]
 800faf8:	e7ac      	b.n	800fa54 <GUI__CompactPixelIndices+0xa8>
 800fafa:	f100 0408 	add.w	r4, r0, #8
 800fafe:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800fb02:	2901      	cmp	r1, #1
 800fb04:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	d012      	beq.n	800fb32 <GUI__CompactPixelIndices+0x186>
 800fb0c:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800fb10:	f002 020f 	and.w	r2, r2, #15
 800fb14:	4313      	orrs	r3, r2
 800fb16:	3902      	subs	r1, #2
 800fb18:	f800 3b01 	strb.w	r3, [r0], #1
 800fb1c:	f104 0408 	add.w	r4, r4, #8
 800fb20:	f43f af52 	beq.w	800f9c8 <GUI__CompactPixelIndices+0x1c>
 800fb24:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800fb28:	2901      	cmp	r1, #1
 800fb2a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	d1ec      	bne.n	800fb0c <GUI__CompactPixelIndices+0x160>
 800fb32:	7003      	strb	r3, [r0, #0]
 800fb34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb38:	4608      	mov	r0, r1
 800fb3a:	4770      	bx	lr

0800fb3c <GUI__CompactPixelIndicesEx>:
 800fb3c:	2a08      	cmp	r2, #8
 800fb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb42:	460c      	mov	r4, r1
 800fb44:	681f      	ldr	r7, [r3, #0]
 800fb46:	4605      	mov	r5, r0
 800fb48:	dd0c      	ble.n	800fb64 <GUI__CompactPixelIndicesEx+0x28>
 800fb4a:	2a10      	cmp	r2, #16
 800fb4c:	dc21      	bgt.n	800fb92 <GUI__CompactPixelIndicesEx+0x56>
 800fb4e:	691e      	ldr	r6, [r3, #16]
 800fb50:	2e00      	cmp	r6, #0
 800fb52:	f000 8091 	beq.w	800fc78 <GUI__CompactPixelIndicesEx+0x13c>
 800fb56:	4622      	mov	r2, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	2302      	movs	r3, #2
 800fb5c:	47b0      	blx	r6
 800fb5e:	2001      	movs	r0, #1
 800fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb64:	3a01      	subs	r2, #1
 800fb66:	2a07      	cmp	r2, #7
 800fb68:	d810      	bhi.n	800fb8c <GUI__CompactPixelIndicesEx+0x50>
 800fb6a:	e8df f002 	tbb	[pc, r2]
 800fb6e:	5104      	.short	0x5104
 800fb70:	0f0f770f 	.word	0x0f0f770f
 800fb74:	9a0f      	.short	0x9a0f
 800fb76:	f100 0820 	add.w	r8, r0, #32
 800fb7a:	f858 0c20 	ldr.w	r0, [r8, #-32]
 800fb7e:	47b8      	blx	r7
 800fb80:	2c01      	cmp	r4, #1
 800fb82:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800fb86:	b2c6      	uxtb	r6, r0
 800fb88:	d106      	bne.n	800fb98 <GUI__CompactPixelIndicesEx+0x5c>
 800fb8a:	702e      	strb	r6, [r5, #0]
 800fb8c:	2001      	movs	r0, #1
 800fb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb92:	2000      	movs	r0, #0
 800fb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb98:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 800fb9c:	47b8      	blx	r7
 800fb9e:	2c02      	cmp	r4, #2
 800fba0:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 800fba4:	b2c6      	uxtb	r6, r0
 800fba6:	d0f0      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fba8:	f858 0c18 	ldr.w	r0, [r8, #-24]
 800fbac:	47b8      	blx	r7
 800fbae:	2c03      	cmp	r4, #3
 800fbb0:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 800fbb4:	b2c6      	uxtb	r6, r0
 800fbb6:	d0e8      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fbb8:	f858 0c14 	ldr.w	r0, [r8, #-20]
 800fbbc:	47b8      	blx	r7
 800fbbe:	2c04      	cmp	r4, #4
 800fbc0:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 800fbc4:	b2c6      	uxtb	r6, r0
 800fbc6:	d0e0      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fbc8:	f858 0c10 	ldr.w	r0, [r8, #-16]
 800fbcc:	47b8      	blx	r7
 800fbce:	2c05      	cmp	r4, #5
 800fbd0:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 800fbd4:	b2c6      	uxtb	r6, r0
 800fbd6:	d0d8      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fbd8:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 800fbdc:	47b8      	blx	r7
 800fbde:	2c06      	cmp	r4, #6
 800fbe0:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 800fbe4:	b2c6      	uxtb	r6, r0
 800fbe6:	d0d0      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fbe8:	f858 0c08 	ldr.w	r0, [r8, #-8]
 800fbec:	47b8      	blx	r7
 800fbee:	2c07      	cmp	r4, #7
 800fbf0:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 800fbf4:	b2c6      	uxtb	r6, r0
 800fbf6:	d0c8      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fbf8:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800fbfc:	47b8      	blx	r7
 800fbfe:	3c08      	subs	r4, #8
 800fc00:	ea40 0006 	orr.w	r0, r0, r6
 800fc04:	f805 0b01 	strb.w	r0, [r5], #1
 800fc08:	f108 0820 	add.w	r8, r8, #32
 800fc0c:	d1b5      	bne.n	800fb7a <GUI__CompactPixelIndicesEx+0x3e>
 800fc0e:	e7bd      	b.n	800fb8c <GUI__CompactPixelIndicesEx+0x50>
 800fc10:	f100 0810 	add.w	r8, r0, #16
 800fc14:	f858 0c10 	ldr.w	r0, [r8, #-16]
 800fc18:	47b8      	blx	r7
 800fc1a:	2c01      	cmp	r4, #1
 800fc1c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800fc20:	b2c6      	uxtb	r6, r0
 800fc22:	d0b2      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fc24:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 800fc28:	47b8      	blx	r7
 800fc2a:	2c02      	cmp	r4, #2
 800fc2c:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 800fc30:	b2c6      	uxtb	r6, r0
 800fc32:	d0aa      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fc34:	f858 0c08 	ldr.w	r0, [r8, #-8]
 800fc38:	47b8      	blx	r7
 800fc3a:	2c03      	cmp	r4, #3
 800fc3c:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 800fc40:	b2c6      	uxtb	r6, r0
 800fc42:	d0a2      	beq.n	800fb8a <GUI__CompactPixelIndicesEx+0x4e>
 800fc44:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800fc48:	47b8      	blx	r7
 800fc4a:	3c04      	subs	r4, #4
 800fc4c:	ea40 0006 	orr.w	r0, r0, r6
 800fc50:	f805 0b01 	strb.w	r0, [r5], #1
 800fc54:	f108 0810 	add.w	r8, r8, #16
 800fc58:	d1dc      	bne.n	800fc14 <GUI__CompactPixelIndicesEx+0xd8>
 800fc5a:	e797      	b.n	800fb8c <GUI__CompactPixelIndicesEx+0x50>
 800fc5c:	f100 0808 	add.w	r8, r0, #8
 800fc60:	f858 0c08 	ldr.w	r0, [r8, #-8]
 800fc64:	47b8      	blx	r7
 800fc66:	2c01      	cmp	r4, #1
 800fc68:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800fc6c:	b2c6      	uxtb	r6, r0
 800fc6e:	d10c      	bne.n	800fc8a <GUI__CompactPixelIndicesEx+0x14e>
 800fc70:	702e      	strb	r6, [r5, #0]
 800fc72:	4620      	mov	r0, r4
 800fc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc78:	1e86      	subs	r6, r0, #2
 800fc7a:	f855 0b04 	ldr.w	r0, [r5], #4
 800fc7e:	47b8      	blx	r7
 800fc80:	3c01      	subs	r4, #1
 800fc82:	f826 0f02 	strh.w	r0, [r6, #2]!
 800fc86:	d1f8      	bne.n	800fc7a <GUI__CompactPixelIndicesEx+0x13e>
 800fc88:	e780      	b.n	800fb8c <GUI__CompactPixelIndicesEx+0x50>
 800fc8a:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800fc8e:	47b8      	blx	r7
 800fc90:	3c02      	subs	r4, #2
 800fc92:	ea40 0006 	orr.w	r0, r0, r6
 800fc96:	f805 0b01 	strb.w	r0, [r5], #1
 800fc9a:	f108 0808 	add.w	r8, r8, #8
 800fc9e:	d1df      	bne.n	800fc60 <GUI__CompactPixelIndicesEx+0x124>
 800fca0:	e774      	b.n	800fb8c <GUI__CompactPixelIndicesEx+0x50>
 800fca2:	691e      	ldr	r6, [r3, #16]
 800fca4:	b13e      	cbz	r6, 800fcb6 <GUI__CompactPixelIndicesEx+0x17a>
 800fca6:	4628      	mov	r0, r5
 800fca8:	4622      	mov	r2, r4
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4629      	mov	r1, r5
 800fcae:	47b0      	blx	r6
 800fcb0:	2001      	movs	r0, #1
 800fcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb6:	1e6e      	subs	r6, r5, #1
 800fcb8:	f855 0b04 	ldr.w	r0, [r5], #4
 800fcbc:	47b8      	blx	r7
 800fcbe:	3c01      	subs	r4, #1
 800fcc0:	f806 0f01 	strb.w	r0, [r6, #1]!
 800fcc4:	d1f8      	bne.n	800fcb8 <GUI__CompactPixelIndicesEx+0x17c>
 800fcc6:	e761      	b.n	800fb8c <GUI__CompactPixelIndicesEx+0x50>

0800fcc8 <GUI__ManageCache>:
 800fcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fccc:	4b39      	ldr	r3, [pc, #228]	; (800fdb4 <GUI__ManageCache+0xec>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	7c5d      	ldrb	r5, [r3, #17]
 800fcd2:	2d01      	cmp	r5, #1
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	dd03      	ble.n	800fce0 <GUI__ManageCache+0x18>
 800fcd8:	2001      	movs	r0, #1
 800fcda:	b002      	add	sp, #8
 800fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce0:	4e35      	ldr	r6, [pc, #212]	; (800fdb8 <GUI__ManageCache+0xf0>)
 800fce2:	6873      	ldr	r3, [r6, #4]
 800fce4:	4604      	mov	r4, r0
 800fce6:	b113      	cbz	r3, 800fcee <GUI__ManageCache+0x26>
 800fce8:	4601      	mov	r1, r0
 800fcea:	4628      	mov	r0, r5
 800fcec:	4798      	blx	r3
 800fcee:	2c01      	cmp	r4, #1
 800fcf0:	d027      	beq.n	800fd42 <GUI__ManageCache+0x7a>
 800fcf2:	2c02      	cmp	r4, #2
 800fcf4:	d00f      	beq.n	800fd16 <GUI__ManageCache+0x4e>
 800fcf6:	2c00      	cmp	r4, #0
 800fcf8:	d1ee      	bne.n	800fcd8 <GUI__ManageCache+0x10>
 800fcfa:	00ac      	lsls	r4, r5, #2
 800fcfc:	1937      	adds	r7, r6, r4
 800fcfe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800fdb8 <GUI__ManageCache+0xf0>
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d03a      	beq.n	800fd7e <GUI__ManageCache+0xb6>
 800fd08:	2001      	movs	r0, #1
 800fd0a:	4426      	add	r6, r4
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	bf18      	it	ne
 800fd10:	3b01      	subne	r3, #1
 800fd12:	60b3      	str	r3, [r6, #8]
 800fd14:	e7e1      	b.n	800fcda <GUI__ManageCache+0x12>
 800fd16:	4628      	mov	r0, r5
 800fd18:	f7f7 ff54 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 800fd1c:	9001      	str	r0, [sp, #4]
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d0da      	beq.n	800fcd8 <GUI__ManageCache+0x10>
 800fd22:	68c3      	ldr	r3, [r0, #12]
 800fd24:	210d      	movs	r1, #13
 800fd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd28:	a801      	add	r0, sp, #4
 800fd2a:	4798      	blx	r3
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d0d2      	beq.n	800fcd8 <GUI__ManageCache+0x10>
 800fd32:	6833      	ldr	r3, [r6, #0]
 800fd34:	b103      	cbz	r3, 800fd38 <GUI__ManageCache+0x70>
 800fd36:	4798      	blx	r3
 800fd38:	2102      	movs	r1, #2
 800fd3a:	9801      	ldr	r0, [sp, #4]
 800fd3c:	47a0      	blx	r4
 800fd3e:	2000      	movs	r0, #0
 800fd40:	e7cb      	b.n	800fcda <GUI__ManageCache+0x12>
 800fd42:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800fd46:	68b7      	ldr	r7, [r6, #8]
 800fd48:	b11f      	cbz	r7, 800fd52 <GUI__ManageCache+0x8a>
 800fd4a:	1c78      	adds	r0, r7, #1
 800fd4c:	60b0      	str	r0, [r6, #8]
 800fd4e:	4620      	mov	r0, r4
 800fd50:	e7c3      	b.n	800fcda <GUI__ManageCache+0x12>
 800fd52:	4628      	mov	r0, r5
 800fd54:	f7f7 ff36 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 800fd58:	9001      	str	r0, [sp, #4]
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	d0bc      	beq.n	800fcd8 <GUI__ManageCache+0x10>
 800fd5e:	68c3      	ldr	r3, [r0, #12]
 800fd60:	210d      	movs	r1, #13
 800fd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd64:	a801      	add	r0, sp, #4
 800fd66:	4798      	blx	r3
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d0b4      	beq.n	800fcd8 <GUI__ManageCache+0x10>
 800fd6e:	4621      	mov	r1, r4
 800fd70:	9801      	ldr	r0, [sp, #4]
 800fd72:	4798      	blx	r3
 800fd74:	68b3      	ldr	r3, [r6, #8]
 800fd76:	3301      	adds	r3, #1
 800fd78:	4638      	mov	r0, r7
 800fd7a:	60b3      	str	r3, [r6, #8]
 800fd7c:	e7ad      	b.n	800fcda <GUI__ManageCache+0x12>
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7f7 ff20 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 800fd84:	9001      	str	r0, [sp, #4]
 800fd86:	b188      	cbz	r0, 800fdac <GUI__ManageCache+0xe4>
 800fd88:	68c3      	ldr	r3, [r0, #12]
 800fd8a:	210d      	movs	r1, #13
 800fd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8e:	a801      	add	r0, sp, #4
 800fd90:	4798      	blx	r3
 800fd92:	4605      	mov	r5, r0
 800fd94:	b150      	cbz	r0, 800fdac <GUI__ManageCache+0xe4>
 800fd96:	f8d8 3000 	ldr.w	r3, [r8]
 800fd9a:	b103      	cbz	r3, 800fd9e <GUI__ManageCache+0xd6>
 800fd9c:	4798      	blx	r3
 800fd9e:	2100      	movs	r1, #0
 800fda0:	9801      	ldr	r0, [sp, #4]
 800fda2:	47a8      	blx	r5
 800fda4:	1933      	adds	r3, r6, r4
 800fda6:	2000      	movs	r0, #0
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	e7ae      	b.n	800fd0a <GUI__ManageCache+0x42>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	2001      	movs	r0, #1
 800fdb0:	e7ab      	b.n	800fd0a <GUI__ManageCache+0x42>
 800fdb2:	bf00      	nop
 800fdb4:	20000018 	.word	0x20000018
 800fdb8:	20000234 	.word	0x20000234

0800fdbc <LCD_AA_MixColors16>:
 800fdbc:	b508      	push	{r3, lr}
 800fdbe:	0e0b      	lsrs	r3, r1, #24
 800fdc0:	d103      	bne.n	800fdca <LCD_AA_MixColors16+0xe>
 800fdc2:	0e03      	lsrs	r3, r0, #24
 800fdc4:	2bff      	cmp	r3, #255	; 0xff
 800fdc6:	d00f      	beq.n	800fde8 <LCD_AA_MixColors16+0x2c>
 800fdc8:	b14b      	cbz	r3, 800fdde <LCD_AA_MixColors16+0x22>
 800fdca:	4b0c      	ldr	r3, [pc, #48]	; (800fdfc <LCD_AA_MixColors16+0x40>)
 800fdcc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800fdd0:	b2d2      	uxtb	r2, r2
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4798      	blx	r3
 800fdd6:	4b0a      	ldr	r3, [pc, #40]	; (800fe00 <LCD_AA_MixColors16+0x44>)
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	4310      	orrs	r0, r2
 800fddc:	bd08      	pop	{r3, pc}
 800fdde:	4b08      	ldr	r3, [pc, #32]	; (800fe00 <LCD_AA_MixColors16+0x44>)
 800fde0:	685a      	ldr	r2, [r3, #4]
 800fde2:	ea41 0002 	orr.w	r0, r1, r2
 800fde6:	bd08      	pop	{r3, pc}
 800fde8:	4b05      	ldr	r3, [pc, #20]	; (800fe00 <LCD_AA_MixColors16+0x44>)
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800fdf0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800fdf4:	4318      	orrs	r0, r3
 800fdf6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800fdfa:	bd08      	pop	{r3, pc}
 800fdfc:	20000028 	.word	0x20000028
 800fe00:	20000044 	.word	0x20000044

0800fe04 <LCD_AA_SetOrMask>:
 800fe04:	4b02      	ldr	r3, [pc, #8]	; (800fe10 <LCD_AA_SetOrMask+0xc>)
 800fe06:	685a      	ldr	r2, [r3, #4]
 800fe08:	6058      	str	r0, [r3, #4]
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	20000044 	.word	0x20000044

0800fe14 <LCD_SetClipRectEx>:
 800fe14:	b530      	push	{r4, r5, lr}
 800fe16:	4c0a      	ldr	r4, [pc, #40]	; (800fe40 <LCD_SetClipRectEx+0x2c>)
 800fe18:	4b0a      	ldr	r3, [pc, #40]	; (800fe44 <LCD_SetClipRectEx+0x30>)
 800fe1a:	6822      	ldr	r2, [r4, #0]
 800fe1c:	7c52      	ldrb	r2, [r2, #17]
 800fe1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe22:	68da      	ldr	r2, [r3, #12]
 800fe24:	b083      	sub	sp, #12
 800fe26:	4605      	mov	r5, r0
 800fe28:	4669      	mov	r1, sp
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fe2e:	4790      	blx	r2
 800fe30:	6820      	ldr	r0, [r4, #0]
 800fe32:	466a      	mov	r2, sp
 800fe34:	4629      	mov	r1, r5
 800fe36:	3008      	adds	r0, #8
 800fe38:	f7f8 fc50 	bl	80086dc <GUI__IntersectRects>
 800fe3c:	b003      	add	sp, #12
 800fe3e:	bd30      	pop	{r4, r5, pc}
 800fe40:	20000018 	.word	0x20000018
 800fe44:	2001bd6c 	.word	0x2001bd6c

0800fe48 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 800fe48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	b084      	sub	sp, #16
 800fe50:	2000      	movs	r0, #0
 800fe52:	460c      	mov	r4, r1
 800fe54:	4615      	mov	r5, r2
 800fe56:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800ff3c <GUI_MEMDEV_CopyToLCDAt.part.0+0xf4>
 800fe5a:	f7f7 fd21 	bl	80078a0 <GUI_SetDrawMode>
 800fe5e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe62:	4681      	mov	r9, r0
 800fe64:	4630      	mov	r0, r6
 800fe66:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 800fe68:	f7f7 fab4 	bl	80073d4 <GUI_ALLOC_LockH>
 800fe6c:	6803      	ldr	r3, [r0, #0]
 800fe6e:	9000      	str	r0, [sp, #0]
 800fe70:	6998      	ldr	r0, [r3, #24]
 800fe72:	f7f8 f8b1 	bl	8007fd8 <GUI_SelectLayer>
 800fe76:	4b30      	ldr	r3, [pc, #192]	; (800ff38 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf0>)
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	9b00      	ldr	r3, [sp, #0]
 800fe7c:	bf04      	itt	eq
 800fe7e:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800fe82:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800fe86:	891a      	ldrh	r2, [r3, #8]
 800fe88:	895b      	ldrh	r3, [r3, #10]
 800fe8a:	f8ad 4008 	strh.w	r4, [sp, #8]
 800fe8e:	3a01      	subs	r2, #1
 800fe90:	3b01      	subs	r3, #1
 800fe92:	4422      	add	r2, r4
 800fe94:	442b      	add	r3, r5
 800fe96:	4682      	mov	sl, r0
 800fe98:	f8ad 200c 	strh.w	r2, [sp, #12]
 800fe9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fea0:	f8ad 500a 	strh.w	r5, [sp, #10]
 800fea4:	f7fe fc58 	bl	800e758 <WM_Activate>
 800fea8:	4668      	mov	r0, sp
 800feaa:	f7f7 faa5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800feae:	a802      	add	r0, sp, #8
 800feb0:	f7fe f9e8 	bl	800e284 <WM__InitIVRSearch>
 800feb4:	bb10      	cbnz	r0, 800fefc <GUI_MEMDEV_CopyToLCDAt.part.0+0xb4>
 800feb6:	4650      	mov	r0, sl
 800feb8:	f7f8 f88e 	bl	8007fd8 <GUI_SelectLayer>
 800febc:	b3a7      	cbz	r7, 800ff28 <GUI_MEMDEV_CopyToLCDAt.part.0+0xe0>
 800febe:	f8d8 3000 	ldr.w	r3, [r8]
 800fec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fec4:	bb6b      	cbnz	r3, 800ff22 <GUI_MEMDEV_CopyToLCDAt.part.0+0xda>
 800fec6:	f7fe fc4f 	bl	800e768 <WM_Deactivate>
 800feca:	4638      	mov	r0, r7
 800fecc:	f7f7 fa82 	bl	80073d4 <GUI_ALLOC_LockH>
 800fed0:	ac04      	add	r4, sp, #16
 800fed2:	f8d8 3000 	ldr.w	r3, [r8]
 800fed6:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800feda:	661f      	str	r7, [r3, #96]	; 0x60
 800fedc:	6800      	ldr	r0, [r0, #0]
 800fede:	f7f7 fed3 	bl	8007c88 <GUI_DEVICE_Link>
 800fee2:	4620      	mov	r0, r4
 800fee4:	f7f7 fa88 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800fee8:	f7f9 fcf2 	bl	80098d0 <LCD_UpdateColorIndices>
 800feec:	f7f8 ffde 	bl	8008eac <LCD_SetClipRectMax>
 800fef0:	4648      	mov	r0, r9
 800fef2:	f7f7 fcd5 	bl	80078a0 <GUI_SetDrawMode>
 800fef6:	b004      	add	sp, #16
 800fef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefc:	462a      	mov	r2, r5
 800fefe:	4621      	mov	r1, r4
 800ff00:	4630      	mov	r0, r6
 800ff02:	f000 fcc7 	bl	8010894 <GUI_MEMDEV__WriteToActiveOpaque>
 800ff06:	f7fe f897 	bl	800e038 <WM__GetNextIVR>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d0d3      	beq.n	800feb6 <GUI_MEMDEV_CopyToLCDAt.part.0+0x6e>
 800ff0e:	462a      	mov	r2, r5
 800ff10:	4621      	mov	r1, r4
 800ff12:	4630      	mov	r0, r6
 800ff14:	f000 fcbe 	bl	8010894 <GUI_MEMDEV__WriteToActiveOpaque>
 800ff18:	f7fe f88e 	bl	800e038 <WM__GetNextIVR>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d1ed      	bne.n	800fefc <GUI_MEMDEV_CopyToLCDAt.part.0+0xb4>
 800ff20:	e7c9      	b.n	800feb6 <GUI_MEMDEV_CopyToLCDAt.part.0+0x6e>
 800ff22:	f7f7 fc8d 	bl	8007840 <GUI_SelectLCD>
 800ff26:	e7ce      	b.n	800fec6 <GUI_MEMDEV_CopyToLCDAt.part.0+0x7e>
 800ff28:	f7f7 fc8a 	bl	8007840 <GUI_SelectLCD>
 800ff2c:	4648      	mov	r0, r9
 800ff2e:	f7f7 fcb7 	bl	80078a0 <GUI_SetDrawMode>
 800ff32:	b004      	add	sp, #16
 800ff34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff38:	fffff001 	.word	0xfffff001
 800ff3c:	20000018 	.word	0x20000018

0800ff40 <GUI_MEMDEV__WriteToActiveAt>:
 800ff40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff44:	b082      	sub	sp, #8
 800ff46:	460f      	mov	r7, r1
 800ff48:	4690      	mov	r8, r2
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	f7f7 fa42 	bl	80073d4 <GUI_ALLOC_LockH>
 800ff50:	6803      	ldr	r3, [r0, #0]
 800ff52:	ac02      	add	r4, sp, #8
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ff5a:	2116      	movs	r1, #22
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5e:	2000      	movs	r0, #0
 800ff60:	4798      	blx	r3
 800ff62:	4605      	mov	r5, r0
 800ff64:	4620      	mov	r0, r4
 800ff66:	f7f7 fa47 	bl	80073f8 <GUI_ALLOC_UnlockH>
 800ff6a:	b11d      	cbz	r5, 800ff74 <GUI_MEMDEV__WriteToActiveAt+0x34>
 800ff6c:	4642      	mov	r2, r8
 800ff6e:	4639      	mov	r1, r7
 800ff70:	4630      	mov	r0, r6
 800ff72:	47a8      	blx	r5
 800ff74:	b002      	add	sp, #8
 800ff76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7a:	bf00      	nop

0800ff7c <GUI_MEMDEV__CreateFixed>:
 800ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff80:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80100b0 <GUI_MEMDEV__CreateFixed+0x134>
 800ff84:	b087      	sub	sp, #28
 800ff86:	f8d8 4000 	ldr.w	r4, [r8]
 800ff8a:	4681      	mov	r9, r0
 800ff8c:	468a      	mov	sl, r1
 800ff8e:	4617      	mov	r7, r2
 800ff90:	461e      	mov	r6, r3
 800ff92:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ff94:	7c63      	ldrb	r3, [r4, #17]
 800ff96:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f7f7 fe2b 	bl	8007bf4 <GUI_DEVICE_Create>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d04d      	beq.n	801003e <GUI_MEMDEV__CreateFixed+0xc2>
 800ffa2:	6903      	ldr	r3, [r0, #16]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	4605      	mov	r5, r0
 800ffa8:	4798      	blx	r3
 800ffaa:	f7f9 fa69 	bl	8009480 <LCD__GetBPPDevice>
 800ffae:	fb00 f407 	mul.w	r4, r0, r7
 800ffb2:	4683      	mov	fp, r0
 800ffb4:	f7f7 fa3a 	bl	800742c <GUI_ALLOC_RequestSize>
 800ffb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffba:	3407      	adds	r4, #7
 800ffbc:	f013 0301 	ands.w	r3, r3, #1
 800ffc0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 800ffc4:	d03f      	beq.n	8010046 <GUI_MEMDEV__CreateFixed+0xca>
 800ffc6:	2e00      	cmp	r6, #0
 800ffc8:	dd2c      	ble.n	8010024 <GUI_MEMDEV__CreateFixed+0xa8>
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d042      	beq.n	8010054 <GUI_MEMDEV__CreateFixed+0xd8>
 800ffce:	fb04 f006 	mul.w	r0, r4, r6
 800ffd2:	3018      	adds	r0, #24
 800ffd4:	f7f7 f9f0 	bl	80073b8 <GUI_ALLOC_AllocNoInit>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	b368      	cbz	r0, 8010038 <GUI_MEMDEV__CreateFixed+0xbc>
 800ffdc:	2200      	movs	r2, #0
 800ffde:	9202      	str	r2, [sp, #8]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	f7f7 f9f6 	bl	80073d4 <GUI_ALLOC_LockH>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	a806      	add	r0, sp, #24
 800ffec:	9b02      	ldr	r3, [sp, #8]
 800ffee:	f8a2 9004 	strh.w	r9, [r2, #4]
 800fff2:	f840 2d04 	str.w	r2, [r0, #-4]!
 800fff6:	f8a2 a006 	strh.w	sl, [r2, #6]
 800fffa:	8117      	strh	r7, [r2, #8]
 800fffc:	8156      	strh	r6, [r2, #10]
 800fffe:	60d4      	str	r4, [r2, #12]
 8010000:	f8c2 b010 	str.w	fp, [r2, #16]
 8010004:	6153      	str	r3, [r2, #20]
 8010006:	6015      	str	r5, [r2, #0]
 8010008:	f7f7 f9f6 	bl	80073f8 <GUI_ALLOC_UnlockH>
 801000c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801000e:	612b      	str	r3, [r5, #16]
 8010010:	f8d8 2000 	ldr.w	r2, [r8]
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	60ab      	str	r3, [r5, #8]
 8010018:	7c52      	ldrb	r2, [r2, #17]
 801001a:	61aa      	str	r2, [r5, #24]
 801001c:	4618      	mov	r0, r3
 801001e:	b007      	add	sp, #28
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010024:	2c00      	cmp	r4, #0
 8010026:	d134      	bne.n	8010092 <GUI_MEMDEV__CreateFixed+0x116>
 8010028:	4620      	mov	r0, r4
 801002a:	4276      	negs	r6, r6
 801002c:	4286      	cmp	r6, r0
 801002e:	bfa8      	it	ge
 8010030:	4606      	movge	r6, r0
 8010032:	b393      	cbz	r3, 801009a <GUI_MEMDEV__CreateFixed+0x11e>
 8010034:	2e00      	cmp	r6, #0
 8010036:	dcca      	bgt.n	800ffce <GUI_MEMDEV__CreateFixed+0x52>
 8010038:	4628      	mov	r0, r5
 801003a:	f7f7 fdd9 	bl	8007bf0 <GUI_DEVICE_Delete>
 801003e:	2000      	movs	r0, #0
 8010040:	b007      	add	sp, #28
 8010042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010046:	2800      	cmp	r0, #0
 8010048:	bfb8      	it	lt
 801004a:	3003      	addlt	r0, #3
 801004c:	1080      	asrs	r0, r0, #2
 801004e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010052:	e7b8      	b.n	800ffc6 <GUI_MEMDEV__CreateFixed+0x4a>
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	463a      	mov	r2, r7
 8010058:	4633      	mov	r3, r6
 801005a:	4651      	mov	r1, sl
 801005c:	4648      	mov	r0, r9
 801005e:	f000 fbbf 	bl	80107e0 <GUI_USAGE_BM_Create>
 8010062:	9002      	str	r0, [sp, #8]
 8010064:	fb04 f006 	mul.w	r0, r4, r6
 8010068:	3018      	adds	r0, #24
 801006a:	f7f7 fab1 	bl	80075d0 <GUI_ALLOC_AllocZero>
 801006e:	4603      	mov	r3, r0
 8010070:	2800      	cmp	r0, #0
 8010072:	d1b5      	bne.n	800ffe0 <GUI_MEMDEV__CreateFixed+0x64>
 8010074:	4628      	mov	r0, r5
 8010076:	9303      	str	r3, [sp, #12]
 8010078:	f7f7 fdba 	bl	8007bf0 <GUI_DEVICE_Delete>
 801007c:	9b02      	ldr	r3, [sp, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d0dd      	beq.n	801003e <GUI_MEMDEV__CreateFixed+0xc2>
 8010082:	4618      	mov	r0, r3
 8010084:	f7f7 fa8a 	bl	800759c <GUI_ALLOC_Free>
 8010088:	9b03      	ldr	r3, [sp, #12]
 801008a:	4618      	mov	r0, r3
 801008c:	b007      	add	sp, #28
 801008e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010092:	3818      	subs	r0, #24
 8010094:	fbb0 f0f4 	udiv	r0, r0, r4
 8010098:	e7c7      	b.n	801002a <GUI_MEMDEV__CreateFixed+0xae>
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	463a      	mov	r2, r7
 801009e:	4633      	mov	r3, r6
 80100a0:	4651      	mov	r1, sl
 80100a2:	4648      	mov	r0, r9
 80100a4:	f000 fb9c 	bl	80107e0 <GUI_USAGE_BM_Create>
 80100a8:	2e00      	cmp	r6, #0
 80100aa:	9002      	str	r0, [sp, #8]
 80100ac:	dcda      	bgt.n	8010064 <GUI_MEMDEV__CreateFixed+0xe8>
 80100ae:	e7c3      	b.n	8010038 <GUI_MEMDEV__CreateFixed+0xbc>
 80100b0:	20000018 	.word	0x20000018

080100b4 <GUI_MEMDEV_GetBitsPerPixel>:
 80100b4:	b530      	push	{r4, r5, lr}
 80100b6:	b083      	sub	sp, #12
 80100b8:	b918      	cbnz	r0, 80100c2 <GUI_MEMDEV_GetBitsPerPixel+0xe>
 80100ba:	4604      	mov	r4, r0
 80100bc:	4620      	mov	r0, r4
 80100be:	b003      	add	sp, #12
 80100c0:	bd30      	pop	{r4, r5, pc}
 80100c2:	f7f7 f987 	bl	80073d4 <GUI_ALLOC_LockH>
 80100c6:	6803      	ldr	r3, [r0, #0]
 80100c8:	ad02      	add	r5, sp, #8
 80100ca:	691b      	ldr	r3, [r3, #16]
 80100cc:	f845 0d04 	str.w	r0, [r5, #-4]!
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	4798      	blx	r3
 80100d4:	f7f9 f9d4 	bl	8009480 <LCD__GetBPPDevice>
 80100d8:	4604      	mov	r4, r0
 80100da:	4628      	mov	r0, r5
 80100dc:	f7f7 f98c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80100e0:	4620      	mov	r0, r4
 80100e2:	b003      	add	sp, #12
 80100e4:	bd30      	pop	{r4, r5, pc}
 80100e6:	bf00      	nop

080100e8 <GUI_MEMDEV_Delete>:
 80100e8:	b1c0      	cbz	r0, 801011c <GUI_MEMDEV_Delete+0x34>
 80100ea:	4b11      	ldr	r3, [pc, #68]	; (8010130 <GUI_MEMDEV_Delete+0x48>)
 80100ec:	b510      	push	{r4, lr}
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100f2:	4298      	cmp	r0, r3
 80100f4:	b082      	sub	sp, #8
 80100f6:	4604      	mov	r4, r0
 80100f8:	d016      	beq.n	8010128 <GUI_MEMDEV_Delete+0x40>
 80100fa:	4620      	mov	r0, r4
 80100fc:	f7f7 f96a 	bl	80073d4 <GUI_ALLOC_LockH>
 8010100:	6943      	ldr	r3, [r0, #20]
 8010102:	9001      	str	r0, [sp, #4]
 8010104:	b95b      	cbnz	r3, 801011e <GUI_MEMDEV_Delete+0x36>
 8010106:	6800      	ldr	r0, [r0, #0]
 8010108:	f7f7 fd72 	bl	8007bf0 <GUI_DEVICE_Delete>
 801010c:	a801      	add	r0, sp, #4
 801010e:	f7f7 f973 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010112:	4620      	mov	r0, r4
 8010114:	f7f7 fa42 	bl	800759c <GUI_ALLOC_Free>
 8010118:	b002      	add	sp, #8
 801011a:	bd10      	pop	{r4, pc}
 801011c:	4770      	bx	lr
 801011e:	4618      	mov	r0, r3
 8010120:	f7fc f9be 	bl	800c4a0 <GUI_USAGE_DecUseCnt>
 8010124:	9801      	ldr	r0, [sp, #4]
 8010126:	e7ee      	b.n	8010106 <GUI_MEMDEV_Delete+0x1e>
 8010128:	f7f7 fb8a 	bl	8007840 <GUI_SelectLCD>
 801012c:	e7e5      	b.n	80100fa <GUI_MEMDEV_Delete+0x12>
 801012e:	bf00      	nop
 8010130:	20000018 	.word	0x20000018

08010134 <GUI_MEMDEV_CreateEx>:
 8010134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010138:	4d1d      	ldr	r5, [pc, #116]	; (80101b0 <GUI_MEMDEV_CreateEx+0x7c>)
 801013a:	4c1e      	ldr	r4, [pc, #120]	; (80101b4 <GUI_MEMDEV_CreateEx+0x80>)
 801013c:	682e      	ldr	r6, [r5, #0]
 801013e:	f896 e011 	ldrb.w	lr, [r6, #17]
 8010142:	b085      	sub	sp, #20
 8010144:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
 8010148:	4606      	mov	r6, r0
 801014a:	460f      	mov	r7, r1
 801014c:	4690      	mov	r8, r2
 801014e:	4699      	mov	r9, r3
 8010150:	e001      	b.n	8010156 <GUI_MEMDEV_CreateEx+0x22>
 8010152:	6824      	ldr	r4, [r4, #0]
 8010154:	b1dc      	cbz	r4, 801018e <GUI_MEMDEV_CreateEx+0x5a>
 8010156:	68e3      	ldr	r3, [r4, #12]
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	2a04      	cmp	r2, #4
 801015c:	d1f9      	bne.n	8010152 <GUI_MEMDEV_CreateEx+0x1e>
 801015e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010160:	2101      	movs	r1, #1
 8010162:	4620      	mov	r0, r4
 8010164:	4798      	blx	r3
 8010166:	4605      	mov	r5, r0
 8010168:	b1c0      	cbz	r0, 801019c <GUI_MEMDEV_CreateEx+0x68>
 801016a:	6924      	ldr	r4, [r4, #16]
 801016c:	68a3      	ldr	r3, [r4, #8]
 801016e:	4798      	blx	r3
 8010170:	3001      	adds	r0, #1
 8010172:	d017      	beq.n	80101a4 <GUI_MEMDEV_CreateEx+0x70>
 8010174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	9402      	str	r4, [sp, #8]
 801017a:	9501      	str	r5, [sp, #4]
 801017c:	464b      	mov	r3, r9
 801017e:	4642      	mov	r2, r8
 8010180:	4639      	mov	r1, r7
 8010182:	4630      	mov	r0, r6
 8010184:	f7ff fefa 	bl	800ff7c <GUI_MEMDEV__CreateFixed>
 8010188:	b005      	add	sp, #20
 801018a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801018e:	4670      	mov	r0, lr
 8010190:	f7f7 fd18 	bl	8007bc4 <GUI_DEVICE__GetpDriver>
 8010194:	4604      	mov	r4, r0
 8010196:	b108      	cbz	r0, 801019c <GUI_MEMDEV_CreateEx+0x68>
 8010198:	68c3      	ldr	r3, [r0, #12]
 801019a:	e7e0      	b.n	801015e <GUI_MEMDEV_CreateEx+0x2a>
 801019c:	2000      	movs	r0, #0
 801019e:	b005      	add	sp, #20
 80101a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101a6:	4c04      	ldr	r4, [pc, #16]	; (80101b8 <GUI_MEMDEV_CreateEx+0x84>)
 80101a8:	f043 0301 	orr.w	r3, r3, #1
 80101ac:	930c      	str	r3, [sp, #48]	; 0x30
 80101ae:	e7e1      	b.n	8010174 <GUI_MEMDEV_CreateEx+0x40>
 80101b0:	20000018 	.word	0x20000018
 80101b4:	2001bd6c 	.word	0x2001bd6c
 80101b8:	080113cc 	.word	0x080113cc

080101bc <GUI_MEMDEV_Select>:
 80101bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101be:	4f13      	ldr	r7, [pc, #76]	; (801020c <GUI_MEMDEV_Select+0x50>)
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	b083      	sub	sp, #12
 80101c4:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80101c6:	b1d8      	cbz	r0, 8010200 <GUI_MEMDEV_Select+0x44>
 80101c8:	4604      	mov	r4, r0
 80101ca:	b9b6      	cbnz	r6, 80101fa <GUI_MEMDEV_Select+0x3e>
 80101cc:	f7fe facc 	bl	800e768 <WM_Deactivate>
 80101d0:	4620      	mov	r0, r4
 80101d2:	f7f7 f8ff 	bl	80073d4 <GUI_ALLOC_LockH>
 80101d6:	ad02      	add	r5, sp, #8
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	f845 0d04 	str.w	r0, [r5, #-4]!
 80101de:	661c      	str	r4, [r3, #96]	; 0x60
 80101e0:	6800      	ldr	r0, [r0, #0]
 80101e2:	f7f7 fd51 	bl	8007c88 <GUI_DEVICE_Link>
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7f7 f906 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80101ec:	f7f9 fb70 	bl	80098d0 <LCD_UpdateColorIndices>
 80101f0:	f7f8 fe5c 	bl	8008eac <LCD_SetClipRectMax>
 80101f4:	4630      	mov	r0, r6
 80101f6:	b003      	add	sp, #12
 80101f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fa:	f7f7 fb21 	bl	8007840 <GUI_SelectLCD>
 80101fe:	e7e5      	b.n	80101cc <GUI_MEMDEV_Select+0x10>
 8010200:	f7f7 fb1e 	bl	8007840 <GUI_SelectLCD>
 8010204:	4630      	mov	r0, r6
 8010206:	b003      	add	sp, #12
 8010208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020a:	bf00      	nop
 801020c:	20000018 	.word	0x20000018

08010210 <GUI_MEMDEV_CopyToLCD>:
 8010210:	b900      	cbnz	r0, 8010214 <GUI_MEMDEV_CopyToLCD+0x4>
 8010212:	4770      	bx	lr
 8010214:	4a01      	ldr	r2, [pc, #4]	; (801021c <GUI_MEMDEV_CopyToLCD+0xc>)
 8010216:	4611      	mov	r1, r2
 8010218:	f7ff be16 	b.w	800fe48 <GUI_MEMDEV_CopyToLCDAt.part.0>
 801021c:	fffff001 	.word	0xfffff001

08010220 <GUI_MEMDEV_Draw>:
 8010220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8010384 <GUI_MEMDEV_Draw+0x164>
 8010228:	4c54      	ldr	r4, [pc, #336]	; (801037c <GUI_MEMDEV_Draw+0x15c>)
 801022a:	f8db 5000 	ldr.w	r5, [fp]
 801022e:	7c6f      	ldrb	r7, [r5, #17]
 8010230:	57e4      	ldrsb	r4, [r4, r7]
 8010232:	2c01      	cmp	r4, #1
 8010234:	4606      	mov	r6, r0
 8010236:	b087      	sub	sp, #28
 8010238:	4689      	mov	r9, r1
 801023a:	4692      	mov	sl, r2
 801023c:	461d      	mov	r5, r3
 801023e:	4638      	mov	r0, r7
 8010240:	f340 808a 	ble.w	8010358 <GUI_MEMDEV_Draw+0x138>
 8010244:	f7f8 ffc0 	bl	80091c8 <LCD_GetXSizeEx>
 8010248:	4604      	mov	r4, r0
 801024a:	4638      	mov	r0, r7
 801024c:	f7f8 ffcc 	bl	80091e8 <LCD_GetYSizeEx>
 8010250:	4607      	mov	r7, r0
 8010252:	2e00      	cmp	r6, #0
 8010254:	d07d      	beq.n	8010352 <GUI_MEMDEV_Draw+0x132>
 8010256:	a905      	add	r1, sp, #20
 8010258:	a804      	add	r0, sp, #16
 801025a:	f7f7 fa2f 	bl	80076bc <GUI_GetOrg>
 801025e:	9a04      	ldr	r2, [sp, #16]
 8010260:	9905      	ldr	r1, [sp, #20]
 8010262:	f9b6 c000 	ldrsh.w	ip, [r6]
 8010266:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801026a:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
 801026e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010272:	4414      	add	r4, r2
 8010274:	440f      	add	r7, r1
 8010276:	3c01      	subs	r4, #1
 8010278:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
 801027c:	3f01      	subs	r7, #1
 801027e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8010282:	9202      	str	r2, [sp, #8]
 8010284:	9103      	str	r1, [sp, #12]
 8010286:	4574      	cmp	r4, lr
 8010288:	bfd4      	ite	le
 801028a:	ebc2 0204 	rsble	r2, r2, r4
 801028e:	ebc2 020e 	rsbgt	r2, r2, lr
 8010292:	429f      	cmp	r7, r3
 8010294:	bfd4      	ite	le
 8010296:	ebc1 0107 	rsble	r1, r1, r7
 801029a:	ebc1 0103 	rsbgt	r1, r1, r3
 801029e:	4614      	mov	r4, r2
 80102a0:	460f      	mov	r7, r1
 80102a2:	3401      	adds	r4, #1
 80102a4:	3701      	adds	r7, #1
 80102a6:	b905      	cbnz	r5, 80102aa <GUI_MEMDEV_Draw+0x8a>
 80102a8:	427d      	negs	r5, r7
 80102aa:	2c00      	cmp	r4, #0
 80102ac:	dd4d      	ble.n	801034a <GUI_MEMDEV_Draw+0x12a>
 80102ae:	2f00      	cmp	r7, #0
 80102b0:	dd4b      	ble.n	801034a <GUI_MEMDEV_Draw+0x12a>
 80102b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	4622      	mov	r2, r4
 80102b8:	462b      	mov	r3, r5
 80102ba:	9903      	ldr	r1, [sp, #12]
 80102bc:	9802      	ldr	r0, [sp, #8]
 80102be:	f7ff ff39 	bl	8010134 <GUI_MEMDEV_CreateEx>
 80102c2:	4680      	mov	r8, r0
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d04f      	beq.n	8010368 <GUI_MEMDEV_Draw+0x148>
 80102c8:	f000 f894 	bl	80103f4 <GUI_MEMDEV_GetYSize>
 80102cc:	4287      	cmp	r7, r0
 80102ce:	4606      	mov	r6, r0
 80102d0:	d004      	beq.n	80102dc <GUI_MEMDEV_Draw+0xbc>
 80102d2:	f8db 3000 	ldr.w	r3, [fp]
 80102d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80102d8:	2800      	cmp	r0, #0
 80102da:	d14b      	bne.n	8010374 <GUI_MEMDEV_Draw+0x154>
 80102dc:	4640      	mov	r0, r8
 80102de:	f7ff ff6d 	bl	80101bc <GUI_MEMDEV_Select>
 80102e2:	463d      	mov	r5, r7
 80102e4:	2400      	movs	r4, #0
 80102e6:	e00e      	b.n	8010306 <GUI_MEMDEV_Draw+0xe6>
 80102e8:	1bad      	subs	r5, r5, r6
 80102ea:	b9ac      	cbnz	r4, 8010318 <GUI_MEMDEV_Draw+0xf8>
 80102ec:	4650      	mov	r0, sl
 80102ee:	47c8      	blx	r9
 80102f0:	4b23      	ldr	r3, [pc, #140]	; (8010380 <GUI_MEMDEV_Draw+0x160>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4434      	add	r4, r6
 80102f6:	20ff      	movs	r0, #255	; 0xff
 80102f8:	b103      	cbz	r3, 80102fc <GUI_MEMDEV_Draw+0xdc>
 80102fa:	4798      	blx	r3
 80102fc:	4640      	mov	r0, r8
 80102fe:	f7ff ff87 	bl	8010210 <GUI_MEMDEV_CopyToLCD>
 8010302:	42a7      	cmp	r7, r4
 8010304:	dd12      	ble.n	801032c <GUI_MEMDEV_Draw+0x10c>
 8010306:	42ae      	cmp	r6, r5
 8010308:	ddee      	ble.n	80102e8 <GUI_MEMDEV_Draw+0xc8>
 801030a:	4629      	mov	r1, r5
 801030c:	4640      	mov	r0, r8
 801030e:	f000 f88d 	bl	801042c <GUI_MEMDEV_ReduceYSize>
 8010312:	1bad      	subs	r5, r5, r6
 8010314:	2c00      	cmp	r4, #0
 8010316:	d0e9      	beq.n	80102ec <GUI_MEMDEV_Draw+0xcc>
 8010318:	9b03      	ldr	r3, [sp, #12]
 801031a:	9902      	ldr	r1, [sp, #8]
 801031c:	4640      	mov	r0, r8
 801031e:	18e2      	adds	r2, r4, r3
 8010320:	f000 f89e 	bl	8010460 <GUI_MEMDEV_SetOrg>
 8010324:	4640      	mov	r0, r8
 8010326:	f000 f82f 	bl	8010388 <GUI_MEMDEV_Clear>
 801032a:	e7df      	b.n	80102ec <GUI_MEMDEV_Draw+0xcc>
 801032c:	4640      	mov	r0, r8
 801032e:	f7ff fedb 	bl	80100e8 <GUI_MEMDEV_Delete>
 8010332:	2000      	movs	r0, #0
 8010334:	f7ff ff42 	bl	80101bc <GUI_MEMDEV_Select>
 8010338:	42b7      	cmp	r7, r6
 801033a:	d006      	beq.n	801034a <GUI_MEMDEV_Draw+0x12a>
 801033c:	f8db 3000 	ldr.w	r3, [fp]
 8010340:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010342:	b110      	cbz	r0, 801034a <GUI_MEMDEV_Draw+0x12a>
 8010344:	2133      	movs	r1, #51	; 0x33
 8010346:	f7fe fe45 	bl	800efd4 <WM__SendMessageNoPara>
 801034a:	2000      	movs	r0, #0
 801034c:	b007      	add	sp, #28
 801034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010352:	9603      	str	r6, [sp, #12]
 8010354:	9602      	str	r6, [sp, #8]
 8010356:	e7a6      	b.n	80102a6 <GUI_MEMDEV_Draw+0x86>
 8010358:	f7f8 ff56 	bl	8009208 <LCD_GetVXSizeEx>
 801035c:	4604      	mov	r4, r0
 801035e:	4638      	mov	r0, r7
 8010360:	f7f8 ff62 	bl	8009228 <LCD_GetVYSizeEx>
 8010364:	4607      	mov	r7, r0
 8010366:	e774      	b.n	8010252 <GUI_MEMDEV_Draw+0x32>
 8010368:	4650      	mov	r0, sl
 801036a:	47c8      	blx	r9
 801036c:	2001      	movs	r0, #1
 801036e:	b007      	add	sp, #28
 8010370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010374:	2132      	movs	r1, #50	; 0x32
 8010376:	f7fe fe2d 	bl	800efd4 <WM__SendMessageNoPara>
 801037a:	e7af      	b.n	80102dc <GUI_MEMDEV_Draw+0xbc>
 801037c:	2001bd1c 	.word	0x2001bd1c
 8010380:	2000024c 	.word	0x2000024c
 8010384:	20000018 	.word	0x20000018

08010388 <GUI_MEMDEV_Clear>:
 8010388:	b510      	push	{r4, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	b928      	cbnz	r0, 801039a <GUI_MEMDEV_Clear+0x12>
 801038e:	4b0f      	ldr	r3, [pc, #60]	; (80103cc <GUI_MEMDEV_Clear+0x44>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010394:	b908      	cbnz	r0, 801039a <GUI_MEMDEV_Clear+0x12>
 8010396:	b002      	add	sp, #8
 8010398:	bd10      	pop	{r4, pc}
 801039a:	f7f7 f81b 	bl	80073d4 <GUI_ALLOC_LockH>
 801039e:	ab02      	add	r3, sp, #8
 80103a0:	6944      	ldr	r4, [r0, #20]
 80103a2:	f843 0d08 	str.w	r0, [r3, #-8]!
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7f7 f826 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80103ac:	2c00      	cmp	r4, #0
 80103ae:	d0f2      	beq.n	8010396 <GUI_MEMDEV_Clear+0xe>
 80103b0:	4620      	mov	r0, r4
 80103b2:	f7f7 f80f 	bl	80073d4 <GUI_ALLOC_LockH>
 80103b6:	ac02      	add	r4, sp, #8
 80103b8:	6882      	ldr	r2, [r0, #8]
 80103ba:	f844 0d04 	str.w	r0, [r4, #-4]!
 80103be:	6893      	ldr	r3, [r2, #8]
 80103c0:	4798      	blx	r3
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7f7 f818 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80103c8:	b002      	add	sp, #8
 80103ca:	bd10      	pop	{r4, pc}
 80103cc:	20000018 	.word	0x20000018

080103d0 <GUI_MEMDEV_GetDataPtr>:
 80103d0:	b170      	cbz	r0, 80103f0 <GUI_MEMDEV_GetDataPtr+0x20>
 80103d2:	b510      	push	{r4, lr}
 80103d4:	b082      	sub	sp, #8
 80103d6:	f7f6 fffd 	bl	80073d4 <GUI_ALLOC_LockH>
 80103da:	ab02      	add	r3, sp, #8
 80103dc:	f100 0418 	add.w	r4, r0, #24
 80103e0:	f843 0d04 	str.w	r0, [r3, #-4]!
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7f7 f807 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80103ea:	4620      	mov	r0, r4
 80103ec:	b002      	add	sp, #8
 80103ee:	bd10      	pop	{r4, pc}
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop

080103f4 <GUI_MEMDEV_GetYSize>:
 80103f4:	b510      	push	{r4, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	b160      	cbz	r0, 8010414 <GUI_MEMDEV_GetYSize+0x20>
 80103fa:	f7f6 ffeb 	bl	80073d4 <GUI_ALLOC_LockH>
 80103fe:	ab02      	add	r3, sp, #8
 8010400:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8010404:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010408:	4618      	mov	r0, r3
 801040a:	f7f6 fff5 	bl	80073f8 <GUI_ALLOC_UnlockH>
 801040e:	4620      	mov	r0, r4
 8010410:	b002      	add	sp, #8
 8010412:	bd10      	pop	{r4, pc}
 8010414:	4b04      	ldr	r3, [pc, #16]	; (8010428 <GUI_MEMDEV_GetYSize+0x34>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801041a:	4604      	mov	r4, r0
 801041c:	2800      	cmp	r0, #0
 801041e:	d1ec      	bne.n	80103fa <GUI_MEMDEV_GetYSize+0x6>
 8010420:	4620      	mov	r0, r4
 8010422:	b002      	add	sp, #8
 8010424:	bd10      	pop	{r4, pc}
 8010426:	bf00      	nop
 8010428:	20000018 	.word	0x20000018

0801042c <GUI_MEMDEV_ReduceYSize>:
 801042c:	b510      	push	{r4, lr}
 801042e:	460c      	mov	r4, r1
 8010430:	b082      	sub	sp, #8
 8010432:	b160      	cbz	r0, 801044e <GUI_MEMDEV_ReduceYSize+0x22>
 8010434:	f7f6 ffce 	bl	80073d4 <GUI_ALLOC_LockH>
 8010438:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801043c:	9001      	str	r0, [sp, #4]
 801043e:	42a3      	cmp	r3, r4
 8010440:	bfc8      	it	gt
 8010442:	8144      	strhgt	r4, [r0, #10]
 8010444:	a801      	add	r0, sp, #4
 8010446:	f7f6 ffd7 	bl	80073f8 <GUI_ALLOC_UnlockH>
 801044a:	b002      	add	sp, #8
 801044c:	bd10      	pop	{r4, pc}
 801044e:	4b03      	ldr	r3, [pc, #12]	; (801045c <GUI_MEMDEV_ReduceYSize+0x30>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010454:	2800      	cmp	r0, #0
 8010456:	d1ed      	bne.n	8010434 <GUI_MEMDEV_ReduceYSize+0x8>
 8010458:	b002      	add	sp, #8
 801045a:	bd10      	pop	{r4, pc}
 801045c:	20000018 	.word	0x20000018

08010460 <GUI_MEMDEV_SetOrg>:
 8010460:	b530      	push	{r4, r5, lr}
 8010462:	460c      	mov	r4, r1
 8010464:	b083      	sub	sp, #12
 8010466:	4615      	mov	r5, r2
 8010468:	b928      	cbnz	r0, 8010476 <GUI_MEMDEV_SetOrg+0x16>
 801046a:	4b16      	ldr	r3, [pc, #88]	; (80104c4 <GUI_MEMDEV_SetOrg+0x64>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010470:	b908      	cbnz	r0, 8010476 <GUI_MEMDEV_SetOrg+0x16>
 8010472:	b003      	add	sp, #12
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f7f6 ffad 	bl	80073d4 <GUI_ALLOC_LockH>
 801047a:	b22d      	sxth	r5, r5
 801047c:	b224      	sxth	r4, r4
 801047e:	80c5      	strh	r5, [r0, #6]
 8010480:	8084      	strh	r4, [r0, #4]
 8010482:	9000      	str	r0, [sp, #0]
 8010484:	f7f8 fd12 	bl	8008eac <LCD_SetClipRectMax>
 8010488:	9b00      	ldr	r3, [sp, #0]
 801048a:	6958      	ldr	r0, [r3, #20]
 801048c:	b920      	cbnz	r0, 8010498 <GUI_MEMDEV_SetOrg+0x38>
 801048e:	4668      	mov	r0, sp
 8010490:	f7f6 ffb2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010494:	b003      	add	sp, #12
 8010496:	bd30      	pop	{r4, r5, pc}
 8010498:	f7f6 ff9c 	bl	80073d4 <GUI_ALLOC_LockH>
 801049c:	9a00      	ldr	r2, [sp, #0]
 801049e:	9001      	str	r0, [sp, #4]
 80104a0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80104a4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80104a8:	80c2      	strh	r2, [r0, #6]
 80104aa:	8083      	strh	r3, [r0, #4]
 80104ac:	b113      	cbz	r3, 80104b4 <GUI_MEMDEV_SetOrg+0x54>
 80104ae:	b10a      	cbz	r2, 80104b4 <GUI_MEMDEV_SetOrg+0x54>
 80104b0:	8004      	strh	r4, [r0, #0]
 80104b2:	8045      	strh	r5, [r0, #2]
 80104b4:	a801      	add	r0, sp, #4
 80104b6:	f7f6 ff9f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80104ba:	4668      	mov	r0, sp
 80104bc:	f7f6 ff9c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80104c0:	e7e8      	b.n	8010494 <GUI_MEMDEV_SetOrg+0x34>
 80104c2:	bf00      	nop
 80104c4:	20000018 	.word	0x20000018

080104c8 <GUI_MEMDEV_Paint1Static>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8010658 <GUI_MEMDEV_Paint1Static+0x190>
 80104d0:	b089      	sub	sp, #36	; 0x24
 80104d2:	4606      	mov	r6, r0
 80104d4:	2705      	movs	r7, #5
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7f6 ff7c 	bl	80073d4 <GUI_ALLOC_LockH>
 80104dc:	4603      	mov	r3, r0
 80104de:	a807      	add	r0, sp, #28
 80104e0:	f9b3 8000 	ldrsh.w	r8, [r3]
 80104e4:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80104e8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 80104ec:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80104f0:	9307      	str	r3, [sp, #28]
 80104f2:	ebc8 0404 	rsb	r4, r8, r4
 80104f6:	3401      	adds	r4, #1
 80104f8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80104fc:	ebc9 0505 	rsb	r5, r9, r5
 8010500:	f7f6 ff7a 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010504:	2c00      	cmp	r4, #0
 8010506:	f105 0501 	add.w	r5, r5, #1
 801050a:	dd55      	ble.n	80105b8 <GUI_MEMDEV_Paint1Static+0xf0>
 801050c:	2d00      	cmp	r5, #0
 801050e:	dd53      	ble.n	80105b8 <GUI_MEMDEV_Paint1Static+0xf0>
 8010510:	f1ba 0f00 	cmp.w	sl, #0
 8010514:	d155      	bne.n	80105c2 <GUI_MEMDEV_Paint1Static+0xfa>
 8010516:	f7fe fa87 	bl	800ea28 <WM_GetDesktopWindow>
 801051a:	4286      	cmp	r6, r0
 801051c:	d07f      	beq.n	801061e <GUI_MEMDEV_Paint1Static+0x156>
 801051e:	4b4a      	ldr	r3, [pc, #296]	; (8010648 <GUI_MEMDEV_Paint1Static+0x180>)
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	f04f 0a01 	mov.w	sl, #1
 8010526:	4649      	mov	r1, r9
 8010528:	4640      	mov	r0, r8
 801052a:	462b      	mov	r3, r5
 801052c:	4622      	mov	r2, r4
 801052e:	f8cd b008 	str.w	fp, [sp, #8]
 8010532:	f8cd a000 	str.w	sl, [sp]
 8010536:	f7ff fd21 	bl	800ff7c <GUI_MEMDEV__CreateFixed>
 801053a:	4680      	mov	r8, r0
 801053c:	4630      	mov	r0, r6
 801053e:	f7f6 ff49 	bl	80073d4 <GUI_ALLOC_LockH>
 8010542:	9007      	str	r0, [sp, #28]
 8010544:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8010548:	f1b8 0f00 	cmp.w	r8, #0
 801054c:	d060      	beq.n	8010610 <GUI_MEMDEV_Paint1Static+0x148>
 801054e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010550:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801065c <GUI_MEMDEV_Paint1Static+0x194>
 8010554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010558:	6283      	str	r3, [r0, #40]	; 0x28
 801055a:	a807      	add	r0, sp, #28
 801055c:	f7f6 ff4c 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010560:	4640      	mov	r0, r8
 8010562:	f7ff fe2b 	bl	80101bc <GUI_MEMDEV_Select>
 8010566:	9005      	str	r0, [sp, #20]
 8010568:	4650      	mov	r0, sl
 801056a:	f000 fe51 	bl	8011210 <GUI__AlphaPreserveTrans>
 801056e:	4640      	mov	r0, r8
 8010570:	f7ff ff2e 	bl	80103d0 <GUI_MEMDEV_GetDataPtr>
 8010574:	4a35      	ldr	r2, [pc, #212]	; (801064c <GUI_MEMDEV_Paint1Static+0x184>)
 8010576:	4b36      	ldr	r3, [pc, #216]	; (8010650 <GUI_MEMDEV_Paint1Static+0x188>)
 8010578:	7819      	ldrb	r1, [r3, #0]
 801057a:	6813      	ldr	r3, [r2, #0]
 801057c:	fb05 f204 	mul.w	r2, r5, r4
 8010580:	0092      	lsls	r2, r2, #2
 8010582:	4c34      	ldr	r4, [pc, #208]	; (8010654 <GUI_MEMDEV_Paint1Static+0x18c>)
 8010584:	4798      	blx	r3
 8010586:	4630      	mov	r0, r6
 8010588:	6825      	ldr	r5, [r4, #0]
 801058a:	f8c9 6000 	str.w	r6, [r9]
 801058e:	f7fe faa7 	bl	800eae0 <WM_GetWindowOrgX>
 8010592:	6020      	str	r0, [r4, #0]
 8010594:	4630      	mov	r0, r6
 8010596:	f7fd ff41 	bl	800e41c <WM__Paint1>
 801059a:	2200      	movs	r2, #0
 801059c:	4610      	mov	r0, r2
 801059e:	6025      	str	r5, [r4, #0]
 80105a0:	f8c9 2000 	str.w	r2, [r9]
 80105a4:	f000 fe34 	bl	8011210 <GUI__AlphaPreserveTrans>
 80105a8:	9805      	ldr	r0, [sp, #20]
 80105aa:	f7ff fe07 	bl	80101bc <GUI_MEMDEV_Select>
 80105ae:	4630      	mov	r0, r6
 80105b0:	f7f6 ff06 	bl	80073c0 <GUI_ALLOC_h2p>
 80105b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80105b6:	b9f0      	cbnz	r0, 80105f6 <GUI_MEMDEV_Paint1Static+0x12e>
 80105b8:	3f01      	subs	r7, #1
 80105ba:	d18c      	bne.n	80104d6 <GUI_MEMDEV_Paint1Static+0xe>
 80105bc:	b009      	add	sp, #36	; 0x24
 80105be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c2:	4650      	mov	r0, sl
 80105c4:	f7f6 ff06 	bl	80073d4 <GUI_ALLOC_LockH>
 80105c8:	4603      	mov	r3, r0
 80105ca:	a808      	add	r0, sp, #32
 80105cc:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80105d0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80105d4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 80105d8:	f7f6 ff0e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80105dc:	45a8      	cmp	r8, r5
 80105de:	d00f      	beq.n	8010600 <GUI_MEMDEV_Paint1Static+0x138>
 80105e0:	464a      	mov	r2, r9
 80105e2:	4641      	mov	r1, r8
 80105e4:	4650      	mov	r0, sl
 80105e6:	f7ff ff3b 	bl	8010460 <GUI_MEMDEV_SetOrg>
 80105ea:	4630      	mov	r0, r6
 80105ec:	f7f6 fee8 	bl	80073c0 <GUI_ALLOC_h2p>
 80105f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d0e0      	beq.n	80105b8 <GUI_MEMDEV_Paint1Static+0xf0>
 80105f6:	f000 f91f 	bl	8010838 <GUI_MEMDEV_Write>
 80105fa:	b009      	add	sp, #36	; 0x24
 80105fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010600:	45a1      	cmp	r9, r4
 8010602:	d0d4      	beq.n	80105ae <GUI_MEMDEV_Paint1Static+0xe6>
 8010604:	464a      	mov	r2, r9
 8010606:	4641      	mov	r1, r8
 8010608:	4650      	mov	r0, sl
 801060a:	f7ff ff29 	bl	8010460 <GUI_MEMDEV_SetOrg>
 801060e:	e7ec      	b.n	80105ea <GUI_MEMDEV_Paint1Static+0x122>
 8010610:	a807      	add	r0, sp, #28
 8010612:	f7f6 fef1 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010616:	4630      	mov	r0, r6
 8010618:	f7fd ff00 	bl	800e41c <WM__Paint1>
 801061c:	e7cc      	b.n	80105b8 <GUI_MEMDEV_Paint1Static+0xf0>
 801061e:	f7f8 fe63 	bl	80092e8 <LCD_GetXSize>
 8010622:	4682      	mov	sl, r0
 8010624:	f7f8 fe76 	bl	8009314 <LCD_GetYSize>
 8010628:	4554      	cmp	r4, sl
 801062a:	dc03      	bgt.n	8010634 <GUI_MEMDEV_Paint1Static+0x16c>
 801062c:	4285      	cmp	r5, r0
 801062e:	f77f af76 	ble.w	801051e <GUI_MEMDEV_Paint1Static+0x56>
 8010632:	46a2      	mov	sl, r4
 8010634:	4285      	cmp	r5, r0
 8010636:	bfa8      	it	ge
 8010638:	4605      	movge	r5, r0
 801063a:	462a      	mov	r2, r5
 801063c:	4651      	mov	r1, sl
 801063e:	4630      	mov	r0, r6
 8010640:	f7fe fab2 	bl	800eba8 <WM_SetSize>
 8010644:	4654      	mov	r4, sl
 8010646:	e76a      	b.n	801051e <GUI_MEMDEV_Paint1Static+0x56>
 8010648:	08015a00 	.word	0x08015a00
 801064c:	20000034 	.word	0x20000034
 8010650:	20000250 	.word	0x20000250
 8010654:	2001bd2c 	.word	0x2001bd2c
 8010658:	080113cc 	.word	0x080113cc
 801065c:	2001bddc 	.word	0x2001bddc

08010660 <GUI_USAGE_BM_AddPixel>:
 8010660:	b470      	push	{r4, r5, r6}
 8010662:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010666:	6903      	ldr	r3, [r0, #16]
 8010668:	f9b0 4000 	ldrsh.w	r4, [r0]
 801066c:	1b92      	subs	r2, r2, r6
 801066e:	fb03 f202 	mul.w	r2, r3, r2
 8010672:	1b09      	subs	r1, r1, r4
 8010674:	3214      	adds	r2, #20
 8010676:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 801067a:	2580      	movs	r5, #128	; 0x80
 801067c:	5c83      	ldrb	r3, [r0, r2]
 801067e:	f001 0107 	and.w	r1, r1, #7
 8010682:	fa45 f101 	asr.w	r1, r5, r1
 8010686:	4319      	orrs	r1, r3
 8010688:	5481      	strb	r1, [r0, r2]
 801068a:	bc70      	pop	{r4, r5, r6}
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop

08010690 <GUI_USAGE_BM_GetNextDirty>:
 8010690:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010694:	4293      	cmp	r3, r2
 8010696:	dd3c      	ble.n	8010712 <GUI_USAGE_BM_GetNextDirty+0x82>
 8010698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801069a:	680d      	ldr	r5, [r1, #0]
 801069c:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80106a0:	42bd      	cmp	r5, r7
 80106a2:	da34      	bge.n	801070e <GUI_USAGE_BM_GetNextDirty+0x7e>
 80106a4:	6906      	ldr	r6, [r0, #16]
 80106a6:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 80106aa:	fb06 e602 	mla	r6, r6, r2, lr
 80106ae:	3614      	adds	r6, #20
 80106b0:	f005 0307 	and.w	r3, r5, #7
 80106b4:	5d84      	ldrb	r4, [r0, r6]
 80106b6:	fa04 f303 	lsl.w	r3, r4, r3
 80106ba:	3f01      	subs	r7, #1
 80106bc:	3601      	adds	r6, #1
 80106be:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80106c2:	ebce 02e7 	rsb	r2, lr, r7, asr #3
 80106c6:	4430      	add	r0, r6
 80106c8:	d108      	bne.n	80106dc <GUI_USAGE_BM_GetNextDirty+0x4c>
 80106ca:	b322      	cbz	r2, 8010716 <GUI_USAGE_BM_GetNextDirty+0x86>
 80106cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80106d0:	3508      	adds	r5, #8
 80106d2:	f025 0507 	bic.w	r5, r5, #7
 80106d6:	3a01      	subs	r2, #1
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d0f6      	beq.n	80106ca <GUI_USAGE_BM_GetNextDirty+0x3a>
 80106dc:	061e      	lsls	r6, r3, #24
 80106de:	d434      	bmi.n	801074a <GUI_USAGE_BM_GetNextDirty+0xba>
 80106e0:	005b      	lsls	r3, r3, #1
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	061c      	lsls	r4, r3, #24
 80106e6:	f105 0501 	add.w	r5, r5, #1
 80106ea:	d5f9      	bpl.n	80106e0 <GUI_USAGE_BM_GetNextDirty+0x50>
 80106ec:	065f      	lsls	r7, r3, #25
 80106ee:	462c      	mov	r4, r5
 80106f0:	d505      	bpl.n	80106fe <GUI_USAGE_BM_GetNextDirty+0x6e>
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	065e      	lsls	r6, r3, #25
 80106f8:	f104 0401 	add.w	r4, r4, #1
 80106fc:	d4f9      	bmi.n	80106f2 <GUI_USAGE_BM_GetNextDirty+0x62>
 80106fe:	f004 0307 	and.w	r3, r4, #7
 8010702:	2b07      	cmp	r3, #7
 8010704:	d009      	beq.n	801071a <GUI_USAGE_BM_GetNextDirty+0x8a>
 8010706:	1b62      	subs	r2, r4, r5
 8010708:	1c50      	adds	r0, r2, #1
 801070a:	600d      	str	r5, [r1, #0]
 801070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801070e:	2000      	movs	r0, #0
 8010710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010712:	2000      	movs	r0, #0
 8010714:	4770      	bx	lr
 8010716:	4610      	mov	r0, r2
 8010718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801071a:	2a00      	cmp	r2, #0
 801071c:	ddf3      	ble.n	8010706 <GUI_USAGE_BM_GetNextDirty+0x76>
 801071e:	7806      	ldrb	r6, [r0, #0]
 8010720:	2eff      	cmp	r6, #255	; 0xff
 8010722:	f100 0701 	add.w	r7, r0, #1
 8010726:	d10d      	bne.n	8010744 <GUI_USAGE_BM_GetNextDirty+0xb4>
 8010728:	1883      	adds	r3, r0, r2
 801072a:	e003      	b.n	8010734 <GUI_USAGE_BM_GetNextDirty+0xa4>
 801072c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010730:	2eff      	cmp	r6, #255	; 0xff
 8010732:	d107      	bne.n	8010744 <GUI_USAGE_BM_GetNextDirty+0xb4>
 8010734:	42bb      	cmp	r3, r7
 8010736:	f104 0408 	add.w	r4, r4, #8
 801073a:	d1f7      	bne.n	801072c <GUI_USAGE_BM_GetNextDirty+0x9c>
 801073c:	e7e3      	b.n	8010706 <GUI_USAGE_BM_GetNextDirty+0x76>
 801073e:	0076      	lsls	r6, r6, #1
 8010740:	b2f6      	uxtb	r6, r6
 8010742:	3401      	adds	r4, #1
 8010744:	0633      	lsls	r3, r6, #24
 8010746:	d4fa      	bmi.n	801073e <GUI_USAGE_BM_GetNextDirty+0xae>
 8010748:	e7dd      	b.n	8010706 <GUI_USAGE_BM_GetNextDirty+0x76>
 801074a:	2bff      	cmp	r3, #255	; 0xff
 801074c:	bf08      	it	eq
 801074e:	1dec      	addeq	r4, r5, #7
 8010750:	d0d5      	beq.n	80106fe <GUI_USAGE_BM_GetNextDirty+0x6e>
 8010752:	e7cb      	b.n	80106ec <GUI_USAGE_BM_GetNextDirty+0x5c>

08010754 <_GUI_USAGE_BM_Delete>:
 8010754:	f7f6 bf22 	b.w	800759c <GUI_ALLOC_Free>

08010758 <GUI_USAGE_BM_Clear>:
 8010758:	4603      	mov	r3, r0
 801075a:	2100      	movs	r1, #0
 801075c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	3014      	adds	r0, #20
 8010764:	fb03 f202 	mul.w	r2, r3, r2
 8010768:	f000 bdb1 	b.w	80112ce <memset>

0801076c <GUI_USAGE_BM_AddHLine>:
 801076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801076e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010772:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8010776:	1b0c      	subs	r4, r1, r4
 8010778:	42ac      	cmp	r4, r5
 801077a:	da2b      	bge.n	80107d4 <GUI_USAGE_BM_AddHLine+0x68>
 801077c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010780:	6905      	ldr	r5, [r0, #16]
 8010782:	4423      	add	r3, r4
 8010784:	3b01      	subs	r3, #1
 8010786:	1a52      	subs	r2, r2, r1
 8010788:	10e6      	asrs	r6, r4, #3
 801078a:	fb05 6502 	mla	r5, r5, r2, r6
 801078e:	43df      	mvns	r7, r3
 8010790:	f007 0707 	and.w	r7, r7, #7
 8010794:	21ff      	movs	r1, #255	; 0xff
 8010796:	3514      	adds	r5, #20
 8010798:	f004 0407 	and.w	r4, r4, #7
 801079c:	fa01 f207 	lsl.w	r2, r1, r7
 80107a0:	fa41 f404 	asr.w	r4, r1, r4
 80107a4:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 80107a8:	b2d7      	uxtb	r7, r2
 80107aa:	b2e4      	uxtb	r4, r4
 80107ac:	eb00 0205 	add.w	r2, r0, r5
 80107b0:	5d43      	ldrb	r3, [r0, r5]
 80107b2:	d010      	beq.n	80107d6 <GUI_USAGE_BM_AddHLine+0x6a>
 80107b4:	3e01      	subs	r6, #1
 80107b6:	431c      	orrs	r4, r3
 80107b8:	2e00      	cmp	r6, #0
 80107ba:	f102 0301 	add.w	r3, r2, #1
 80107be:	5544      	strb	r4, [r0, r5]
 80107c0:	dd05      	ble.n	80107ce <GUI_USAGE_BM_AddHLine+0x62>
 80107c2:	4618      	mov	r0, r3
 80107c4:	4632      	mov	r2, r6
 80107c6:	f000 fd82 	bl	80112ce <memset>
 80107ca:	4603      	mov	r3, r0
 80107cc:	4433      	add	r3, r6
 80107ce:	781c      	ldrb	r4, [r3, #0]
 80107d0:	433c      	orrs	r4, r7
 80107d2:	701c      	strb	r4, [r3, #0]
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d6:	403c      	ands	r4, r7
 80107d8:	431c      	orrs	r4, r3
 80107da:	5544      	strb	r4, [r0, r5]
 80107dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107de:	bf00      	nop

080107e0 <GUI_USAGE_BM_Create>:
 80107e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107e4:	f102 040f 	add.w	r4, r2, #15
 80107e8:	1124      	asrs	r4, r4, #4
 80107ea:	0064      	lsls	r4, r4, #1
 80107ec:	461d      	mov	r5, r3
 80107ee:	fb03 f304 	mul.w	r3, r3, r4
 80107f2:	b083      	sub	sp, #12
 80107f4:	4680      	mov	r8, r0
 80107f6:	f103 0014 	add.w	r0, r3, #20
 80107fa:	4616      	mov	r6, r2
 80107fc:	4689      	mov	r9, r1
 80107fe:	f7f6 fee7 	bl	80075d0 <GUI_ALLOC_AllocZero>
 8010802:	4607      	mov	r7, r0
 8010804:	b190      	cbz	r0, 801082c <GUI_USAGE_BM_Create+0x4c>
 8010806:	f7f6 fde5 	bl	80073d4 <GUI_ALLOC_LockH>
 801080a:	4601      	mov	r1, r0
 801080c:	a802      	add	r0, sp, #8
 801080e:	4a09      	ldr	r2, [pc, #36]	; (8010834 <GUI_USAGE_BM_Create+0x54>)
 8010810:	f840 1d04 	str.w	r1, [r0, #-4]!
 8010814:	2301      	movs	r3, #1
 8010816:	808e      	strh	r6, [r1, #4]
 8010818:	80cd      	strh	r5, [r1, #6]
 801081a:	610c      	str	r4, [r1, #16]
 801081c:	f8a1 8000 	strh.w	r8, [r1]
 8010820:	f8a1 9002 	strh.w	r9, [r1, #2]
 8010824:	608a      	str	r2, [r1, #8]
 8010826:	818b      	strh	r3, [r1, #12]
 8010828:	f7f6 fde6 	bl	80073f8 <GUI_ALLOC_UnlockH>
 801082c:	4638      	mov	r0, r7
 801082e:	b003      	add	sp, #12
 8010830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010834:	08015ba4 	.word	0x08015ba4

08010838 <GUI_MEMDEV_Write>:
 8010838:	b900      	cbnz	r0, 801083c <GUI_MEMDEV_Write+0x4>
 801083a:	4770      	bx	lr
 801083c:	b570      	push	{r4, r5, r6, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	4604      	mov	r4, r0
 8010842:	f7f6 fdc7 	bl	80073d4 <GUI_ALLOC_LockH>
 8010846:	4601      	mov	r1, r0
 8010848:	a801      	add	r0, sp, #4
 801084a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 801084e:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8010852:	890a      	ldrh	r2, [r1, #8]
 8010854:	894b      	ldrh	r3, [r1, #10]
 8010856:	9101      	str	r1, [sp, #4]
 8010858:	4432      	add	r2, r6
 801085a:	442b      	add	r3, r5
 801085c:	3a01      	subs	r2, #1
 801085e:	3b01      	subs	r3, #1
 8010860:	f8ad 6008 	strh.w	r6, [sp, #8]
 8010864:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010868:	f8ad 300e 	strh.w	r3, [sp, #14]
 801086c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8010870:	f7f6 fdc2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010874:	a802      	add	r0, sp, #8
 8010876:	f7fd fd05 	bl	800e284 <WM__InitIVRSearch>
 801087a:	b140      	cbz	r0, 801088e <GUI_MEMDEV_Write+0x56>
 801087c:	462a      	mov	r2, r5
 801087e:	4631      	mov	r1, r6
 8010880:	4620      	mov	r0, r4
 8010882:	f7ff fb5d 	bl	800ff40 <GUI_MEMDEV__WriteToActiveAt>
 8010886:	f7fd fbd7 	bl	800e038 <WM__GetNextIVR>
 801088a:	2800      	cmp	r0, #0
 801088c:	d1f6      	bne.n	801087c <GUI_MEMDEV_Write+0x44>
 801088e:	b004      	add	sp, #16
 8010890:	bd70      	pop	{r4, r5, r6, pc}
 8010892:	bf00      	nop

08010894 <GUI_MEMDEV__WriteToActiveOpaque>:
 8010894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	b0a1      	sub	sp, #132	; 0x84
 801089a:	910d      	str	r1, [sp, #52]	; 0x34
 801089c:	b910      	cbnz	r0, 80108a4 <GUI_MEMDEV__WriteToActiveOpaque+0x10>
 801089e:	b021      	add	sp, #132	; 0x84
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	4692      	mov	sl, r2
 80108a6:	4607      	mov	r7, r0
 80108a8:	f7f6 fd94 	bl	80073d4 <GUI_ALLOC_LockH>
 80108ac:	ab20      	add	r3, sp, #128	; 0x80
 80108ae:	6944      	ldr	r4, [r0, #20]
 80108b0:	f843 0d1c 	str.w	r0, [r3, #-28]!
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7f6 fd9f 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80108ba:	4638      	mov	r0, r7
 80108bc:	f7ff fbfa 	bl	80100b4 <GUI_MEMDEV_GetBitsPerPixel>
 80108c0:	2808      	cmp	r0, #8
 80108c2:	4605      	mov	r5, r0
 80108c4:	dd02      	ble.n	80108cc <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 80108c6:	2c00      	cmp	r4, #0
 80108c8:	f000 80d9 	beq.w	8010a7e <GUI_MEMDEV__WriteToActiveOpaque+0x1ea>
 80108cc:	2301      	movs	r3, #1
 80108ce:	f04f 0b00 	mov.w	fp, #0
 80108d2:	4638      	mov	r0, r7
 80108d4:	931f      	str	r3, [sp, #124]	; 0x7c
 80108d6:	930a      	str	r3, [sp, #40]	; 0x28
 80108d8:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 80108dc:	f7f6 fd7a 	bl	80073d4 <GUI_ALLOC_LockH>
 80108e0:	6801      	ldr	r1, [r0, #0]
 80108e2:	f8df 8468 	ldr.w	r8, [pc, #1128]	; 8010d4c <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>
 80108e6:	6909      	ldr	r1, [r1, #16]
 80108e8:	4604      	mov	r4, r0
 80108ea:	f8d8 0000 	ldr.w	r0, [r8]
 80108ee:	68e3      	ldr	r3, [r4, #12]
 80108f0:	684d      	ldr	r5, [r1, #4]
 80108f2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80108f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80108f8:	ae20      	add	r6, sp, #128	; 0x80
 80108fa:	6923      	ldr	r3, [r4, #16]
 80108fc:	9114      	str	r1, [sp, #80]	; 0x50
 80108fe:	7c40      	ldrb	r0, [r0, #17]
 8010900:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8010904:	9309      	str	r3, [sp, #36]	; 0x24
 8010906:	f846 4d14 	str.w	r4, [r6, #-20]!
 801090a:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801090e:	9116      	str	r1, [sp, #88]	; 0x58
 8010910:	f7f8 fd2c 	bl	800936c <GUI_GetBitsPerPixelEx>
 8010914:	f8d8 1000 	ldr.w	r1, [r8]
 8010918:	9008      	str	r0, [sp, #32]
 801091a:	7c48      	ldrb	r0, [r1, #17]
 801091c:	f7f8 fd40 	bl	80093a0 <GUI_GetpfIndex2ColorEx>
 8010920:	4604      	mov	r4, r0
 8010922:	4630      	mov	r0, r6
 8010924:	f7f6 fd68 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801092a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801092c:	2a08      	cmp	r2, #8
 801092e:	f240 80a0 	bls.w	8010a72 <GUI_MEMDEV__WriteToActiveOpaque+0x1de>
 8010932:	2a10      	cmp	r2, #16
 8010934:	4613      	mov	r3, r2
 8010936:	bf8c      	ite	hi
 8010938:	2304      	movhi	r3, #4
 801093a:	2302      	movls	r3, #2
 801093c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010940:	930e      	str	r3, [sp, #56]	; 0x38
 8010942:	42a5      	cmp	r5, r4
 8010944:	f000 81ac 	beq.w	8010ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 8010948:	f8d8 3000 	ldr.w	r3, [r8]
 801094c:	7c58      	ldrb	r0, [r3, #17]
 801094e:	f7f8 fd2f 	bl	80093b0 <GUI_GetpfColor2IndexEx>
 8010952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010954:	4606      	mov	r6, r0
 8010956:	0098      	lsls	r0, r3, #2
 8010958:	f7f6 fd2e 	bl	80073b8 <GUI_ALLOC_AllocNoInit>
 801095c:	9012      	str	r0, [sp, #72]	; 0x48
 801095e:	2800      	cmp	r0, #0
 8010960:	d09d      	beq.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010962:	4638      	mov	r0, r7
 8010964:	f7ff fd34 	bl	80103d0 <GUI_MEMDEV_GetDataPtr>
 8010968:	4607      	mov	r7, r0
 801096a:	f1b9 0f00 	cmp.w	r9, #0
 801096e:	f000 80f5 	beq.w	8010b5c <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 8010972:	4648      	mov	r0, r9
 8010974:	f7f6 fd2e 	bl	80073d4 <GUI_ALLOC_LockH>
 8010978:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801097a:	901c      	str	r0, [sp, #112]	; 0x70
 801097c:	2b00      	cmp	r3, #0
 801097e:	f340 818b 	ble.w	8010c98 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 8010982:	2300      	movs	r3, #0
 8010984:	930c      	str	r3, [sp, #48]	; 0x30
 8010986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010988:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801098c:	18fb      	adds	r3, r7, r3
 801098e:	9315      	str	r3, [sp, #84]	; 0x54
 8010990:	ab1d      	add	r3, sp, #116	; 0x74
 8010992:	9311      	str	r3, [sp, #68]	; 0x44
 8010994:	f04f 0801 	mov.w	r8, #1
 8010998:	4619      	mov	r1, r3
 801099a:	6883      	ldr	r3, [r0, #8]
 801099c:	2200      	movs	r2, #0
 801099e:	921d      	str	r2, [sp, #116]	; 0x74
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109a4:	4798      	blx	r3
 80109a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80109aa:	1a9b      	subs	r3, r3, r2
 80109ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80109ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109b0:	4283      	cmp	r3, r0
 80109b2:	4604      	mov	r4, r0
 80109b4:	f000 8131 	beq.w	8010c1a <GUI_MEMDEV__WriteToActiveOpaque+0x386>
 80109b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	f000 80f2 	beq.w	8010ba4 <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d045      	beq.n	8010a50 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 80109c4:	ab1a      	add	r3, sp, #104	; 0x68
 80109c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80109c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80109ca:	f7f6 fd03 	bl	80073d4 <GUI_ALLOC_LockH>
 80109ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d0:	901a      	str	r0, [sp, #104]	; 0x68
 80109d2:	2b08      	cmp	r3, #8
 80109d4:	4607      	mov	r7, r0
 80109d6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80109d8:	f240 80d4 	bls.w	8010b84 <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 80109dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80109e0:	46a3      	mov	fp, r4
 80109e2:	fb02 1a03 	mla	sl, r2, r3, r1
 80109e6:	4681      	mov	r9, r0
 80109e8:	f83a 0b02 	ldrh.w	r0, [sl], #2
 80109ec:	47a8      	blx	r5
 80109ee:	47b0      	blx	r6
 80109f0:	f1bb 0b01 	subs.w	fp, fp, #1
 80109f4:	f849 0b04 	str.w	r0, [r9], #4
 80109f8:	d1f6      	bne.n	80109e8 <GUI_MEMDEV__WriteToActiveOpaque+0x154>
 80109fa:	9b08      	ldr	r3, [sp, #32]
 80109fc:	2b1f      	cmp	r3, #31
 80109fe:	d804      	bhi.n	8010a0a <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8010a00:	4638      	mov	r0, r7
 8010a02:	461a      	mov	r2, r3
 8010a04:	4621      	mov	r1, r4
 8010a06:	f7fe ffd1 	bl	800f9ac <GUI__CompactPixelIndices>
 8010a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a0c:	9205      	str	r2, [sp, #20]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	9203      	str	r2, [sp, #12]
 8010a12:	9a08      	ldr	r2, [sp, #32]
 8010a14:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010a16:	9202      	str	r2, [sp, #8]
 8010a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010a1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010a1e:	9304      	str	r3, [sp, #16]
 8010a20:	4410      	add	r0, r2
 8010a22:	2301      	movs	r3, #1
 8010a24:	4622      	mov	r2, r4
 8010a26:	f8cd 8004 	str.w	r8, [sp, #4]
 8010a2a:	f8cd 8000 	str.w	r8, [sp]
 8010a2e:	f7f8 f8b7 	bl	8008ba0 <LCD_DrawBitmap>
 8010a32:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010a34:	f7f6 fce0 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010a38:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010a3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a3c:	6882      	ldr	r2, [r0, #8]
 8010a3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010a40:	6957      	ldr	r7, [r2, #20]
 8010a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a44:	441c      	add	r4, r3
 8010a46:	941d      	str	r4, [sp, #116]	; 0x74
 8010a48:	47b8      	blx	r7
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d1bb      	bne.n	80109c8 <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 8010a50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010a52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a56:	440a      	add	r2, r1
 8010a58:	9215      	str	r2, [sp, #84]	; 0x54
 8010a5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a5c:	3201      	adds	r2, #1
 8010a5e:	9210      	str	r2, [sp, #64]	; 0x40
 8010a60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a62:	3301      	adds	r3, #1
 8010a64:	429a      	cmp	r2, r3
 8010a66:	930c      	str	r3, [sp, #48]	; 0x30
 8010a68:	f000 8116 	beq.w	8010c98 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 8010a6c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010a6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010a70:	e793      	b.n	801099a <GUI_MEMDEV__WriteToActiveOpaque+0x106>
 8010a72:	2a01      	cmp	r2, #1
 8010a74:	d16e      	bne.n	8010b54 <GUI_MEMDEV__WriteToActiveOpaque+0x2c0>
 8010a76:	ab1e      	add	r3, sp, #120	; 0x78
 8010a78:	920e      	str	r2, [sp, #56]	; 0x38
 8010a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a7c:	e761      	b.n	8010942 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7f6 fca8 	bl	80073d4 <GUI_ALLOC_LockH>
 8010a84:	ab20      	add	r3, sp, #128	; 0x80
 8010a86:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 8010a8a:	f843 0d10 	str.w	r0, [r3, #-16]!
 8010a8e:	4602      	mov	r2, r0
 8010a90:	6801      	ldr	r1, [r0, #0]
 8010a92:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8010a96:	9008      	str	r0, [sp, #32]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	690e      	ldr	r6, [r1, #16]
 8010a9c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8010aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8010aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8010aa4:	f7f6 fca8 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010aa8:	48a8      	ldr	r0, [pc, #672]	; (8010d4c <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>)
 8010aaa:	49a9      	ldr	r1, [pc, #676]	; (8010d50 <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>)
 8010aac:	6800      	ldr	r0, [r0, #0]
 8010aae:	6873      	ldr	r3, [r6, #4]
 8010ab0:	7c40      	ldrb	r0, [r0, #17]
 8010ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ab4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010ab8:	690c      	ldr	r4, [r1, #16]
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	930a      	str	r3, [sp, #40]	; 0x28
 8010abe:	f7f8 fc55 	bl	800936c <GUI_GetBitsPerPixelEx>
 8010ac2:	2808      	cmp	r0, #8
 8010ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ac6:	d940      	bls.n	8010b4a <GUI_MEMDEV__WriteToActiveOpaque+0x2b6>
 8010ac8:	2810      	cmp	r0, #16
 8010aca:	bf8c      	ite	hi
 8010acc:	2320      	movhi	r3, #32
 8010ace:	2310      	movls	r3, #16
 8010ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad2:	bf8c      	ite	hi
 8010ad4:	f04f 0904 	movhi.w	r9, #4
 8010ad8:	f04f 0902 	movls.w	r9, #2
 8010adc:	42a6      	cmp	r6, r4
 8010ade:	f000 822d 	beq.w	8010f3c <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 8010ae2:	2d20      	cmp	r5, #32
 8010ae4:	f000 819e 	beq.w	8010e24 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 8010ae8:	2d10      	cmp	r5, #16
 8010aea:	f47f aed8 	bne.w	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010aee:	fb08 f009 	mul.w	r0, r8, r9
 8010af2:	f7f6 fc61 	bl	80073b8 <GUI_ALLOC_AllocNoInit>
 8010af6:	9010      	str	r0, [sp, #64]	; 0x40
 8010af8:	2800      	cmp	r0, #0
 8010afa:	f43f aed0 	beq.w	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010afe:	f7f6 fc69 	bl	80073d4 <GUI_ALLOC_LockH>
 8010b02:	901e      	str	r0, [sp, #120]	; 0x78
 8010b04:	4638      	mov	r0, r7
 8010b06:	f7f6 fc65 	bl	80073d4 <GUI_ALLOC_LockH>
 8010b0a:	901c      	str	r0, [sp, #112]	; 0x70
 8010b0c:	6923      	ldr	r3, [r4, #16]
 8010b0e:	f100 0218 	add.w	r2, r0, #24
 8010b12:	920b      	str	r2, [sp, #44]	; 0x2c
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 8222 	beq.w	8010f5e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8010b1a:	6973      	ldr	r3, [r6, #20]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 821e 	beq.w	8010f5e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8010b22:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8010b26:	0080      	lsls	r0, r0, #2
 8010b28:	f7f6 fc46 	bl	80073b8 <GUI_ALLOC_AllocNoInit>
 8010b2c:	900f      	str	r0, [sp, #60]	; 0x3c
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	f040 8269 	bne.w	8011006 <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 8010b34:	901d      	str	r0, [sp, #116]	; 0x74
 8010b36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010b38:	f7f6 fc5e 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010b3c:	a81e      	add	r0, sp, #120	; 0x78
 8010b3e:	f7f6 fc5b 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010b42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010b44:	f7f6 fd2a 	bl	800759c <GUI_ALLOC_Free>
 8010b48:	e6a9      	b.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010b4a:	2308      	movs	r3, #8
 8010b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b4e:	f04f 0901 	mov.w	r9, #1
 8010b52:	e7c3      	b.n	8010adc <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 8010b54:	930e      	str	r3, [sp, #56]	; 0x38
 8010b56:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010b5a:	e6f2      	b.n	8010942 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 8010b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b5e:	9305      	str	r3, [sp, #20]
 8010b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b62:	9303      	str	r3, [sp, #12]
 8010b64:	2401      	movs	r4, #1
 8010b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b68:	9004      	str	r0, [sp, #16]
 8010b6a:	9302      	str	r3, [sp, #8]
 8010b6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010b70:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010b72:	9401      	str	r4, [sp, #4]
 8010b74:	4651      	mov	r1, sl
 8010b76:	9400      	str	r4, [sp, #0]
 8010b78:	f7f8 f812 	bl	8008ba0 <LCD_DrawBitmap>
 8010b7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010b7e:	f7f6 fd0d 	bl	800759c <GUI_ALLOC_Free>
 8010b82:	e68c      	b.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010b88:	46a1      	mov	r9, r4
 8010b8a:	fb02 1b03 	mla	fp, r2, r3, r1
 8010b8e:	4682      	mov	sl, r0
 8010b90:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010b94:	47a8      	blx	r5
 8010b96:	47b0      	blx	r6
 8010b98:	f1b9 0901 	subs.w	r9, r9, #1
 8010b9c:	f84a 0b04 	str.w	r0, [sl], #4
 8010ba0:	d1f6      	bne.n	8010b90 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 8010ba2:	e72a      	b.n	80109fa <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f43f af53 	beq.w	8010a50 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 8010baa:	9617      	str	r6, [sp, #92]	; 0x5c
 8010bac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010bae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010bb0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8010bb4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8010bb8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8010bbc:	9513      	str	r5, [sp, #76]	; 0x4c
 8010bbe:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 8010bc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010bc4:	9605      	str	r6, [sp, #20]
 8010bc6:	f00e 0007 	and.w	r0, lr, #7
 8010bca:	9006      	str	r0, [sp, #24]
 8010bcc:	eb0a 000e 	add.w	r0, sl, lr
 8010bd0:	f1be 0f00 	cmp.w	lr, #0
 8010bd4:	bfb8      	it	lt
 8010bd6:	f10e 0e07 	addlt.w	lr, lr, #7
 8010bda:	eb05 0eee 	add.w	lr, r5, lr, asr #3
 8010bde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010be0:	f8cd e010 	str.w	lr, [sp, #16]
 8010be4:	4622      	mov	r2, r4
 8010be6:	2301      	movs	r3, #1
 8010be8:	4649      	mov	r1, r9
 8010bea:	9503      	str	r5, [sp, #12]
 8010bec:	f8cd 8008 	str.w	r8, [sp, #8]
 8010bf0:	f8cd 8004 	str.w	r8, [sp, #4]
 8010bf4:	f8cd 8000 	str.w	r8, [sp]
 8010bf8:	f7f7 fec4 	bl	8008984 <LCD__DrawBitmap_1bpp>
 8010bfc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010bfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c00:	6882      	ldr	r2, [r0, #8]
 8010c02:	441c      	add	r4, r3
 8010c04:	4659      	mov	r1, fp
 8010c06:	6953      	ldr	r3, [r2, #20]
 8010c08:	941d      	str	r4, [sp, #116]	; 0x74
 8010c0a:	463a      	mov	r2, r7
 8010c0c:	4798      	blx	r3
 8010c0e:	4604      	mov	r4, r0
 8010c10:	2800      	cmp	r0, #0
 8010c12:	d1d4      	bne.n	8010bbe <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 8010c14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010c16:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010c18:	e71a      	b.n	8010a50 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 8010c1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010c1c:	f7f6 fbda 	bl	80073d4 <GUI_ALLOC_LockH>
 8010c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c22:	901a      	str	r0, [sp, #104]	; 0x68
 8010c24:	2b08      	cmp	r3, #8
 8010c26:	4681      	mov	r9, r0
 8010c28:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010c2a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8010c2e:	4604      	mov	r4, r0
 8010c30:	d929      	bls.n	8010c86 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 8010c32:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8010c36:	47a8      	blx	r5
 8010c38:	47b0      	blx	r6
 8010c3a:	3f01      	subs	r7, #1
 8010c3c:	f844 0b04 	str.w	r0, [r4], #4
 8010c40:	d1f7      	bne.n	8010c32 <GUI_MEMDEV__WriteToActiveOpaque+0x39e>
 8010c42:	9b08      	ldr	r3, [sp, #32]
 8010c44:	2b1f      	cmp	r3, #31
 8010c46:	d804      	bhi.n	8010c52 <GUI_MEMDEV__WriteToActiveOpaque+0x3be>
 8010c48:	4648      	mov	r0, r9
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010c4e:	f7fe fead 	bl	800f9ac <GUI__CompactPixelIndices>
 8010c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c54:	9205      	str	r2, [sp, #20]
 8010c56:	ab20      	add	r3, sp, #128	; 0x80
 8010c58:	461a      	mov	r2, r3
 8010c5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010c5c:	f852 3d18 	ldr.w	r3, [r2, #-24]!
 8010c60:	9304      	str	r3, [sp, #16]
 8010c62:	4614      	mov	r4, r2
 8010c64:	2200      	movs	r2, #0
 8010c66:	9203      	str	r2, [sp, #12]
 8010c68:	9a08      	ldr	r2, [sp, #32]
 8010c6a:	9202      	str	r2, [sp, #8]
 8010c6c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010c70:	f8cd 8000 	str.w	r8, [sp]
 8010c74:	2301      	movs	r3, #1
 8010c76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c78:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010c7a:	f7f7 ff91 	bl	8008ba0 <LCD_DrawBitmap>
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f7f6 fbba 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010c84:	e6e4      	b.n	8010a50 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 8010c86:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8010c8a:	47a8      	blx	r5
 8010c8c:	47b0      	blx	r6
 8010c8e:	3f01      	subs	r7, #1
 8010c90:	f844 0b04 	str.w	r0, [r4], #4
 8010c94:	d1f7      	bne.n	8010c86 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 8010c96:	e7d4      	b.n	8010c42 <GUI_MEMDEV__WriteToActiveOpaque+0x3ae>
 8010c98:	a81c      	add	r0, sp, #112	; 0x70
 8010c9a:	f7f6 fbad 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010c9e:	e76d      	b.n	8010b7c <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff fb95 	bl	80103d0 <GUI_MEMDEV_GetDataPtr>
 8010ca6:	4607      	mov	r7, r0
 8010ca8:	f1b9 0f00 	cmp.w	r9, #0
 8010cac:	f000 80a9 	beq.w	8010e02 <GUI_MEMDEV__WriteToActiveOpaque+0x56e>
 8010cb0:	4648      	mov	r0, r9
 8010cb2:	f7f6 fb8f 	bl	80073d4 <GUI_ALLOC_LockH>
 8010cb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010cb8:	901c      	str	r0, [sp, #112]	; 0x70
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f340 809d 	ble.w	8010dfa <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 8010cc0:	2600      	movs	r6, #0
 8010cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8010cc4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8010cc8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8010ccc:	46b1      	mov	r9, r6
 8010cce:	2501      	movs	r5, #1
 8010cd0:	4698      	mov	r8, r3
 8010cd2:	6883      	ldr	r3, [r0, #8]
 8010cd4:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 8010cd8:	695b      	ldr	r3, [r3, #20]
 8010cda:	4632      	mov	r2, r6
 8010cdc:	4641      	mov	r1, r8
 8010cde:	4798      	blx	r3
 8010ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ce2:	4283      	cmp	r3, r0
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	d02d      	beq.n	8010d44 <GUI_MEMDEV__WriteToActiveOpaque+0x4b0>
 8010ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d055      	beq.n	8010d9a <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 8010cee:	b308      	cbz	r0, 8010d34 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 8010cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cf2:	eb03 0b06 	add.w	fp, r3, r6
 8010cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cf8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010cfa:	9305      	str	r3, [sp, #20]
 8010cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d00:	9203      	str	r2, [sp, #12]
 8010d02:	fb03 7300 	mla	r3, r3, r0, r7
 8010d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d08:	9202      	str	r2, [sp, #8]
 8010d0a:	9304      	str	r3, [sp, #16]
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	4450      	add	r0, sl
 8010d10:	2301      	movs	r3, #1
 8010d12:	4659      	mov	r1, fp
 8010d14:	9501      	str	r5, [sp, #4]
 8010d16:	9500      	str	r5, [sp, #0]
 8010d18:	f7f7 ff42 	bl	8008ba0 <LCD_DrawBitmap>
 8010d1c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d20:	6882      	ldr	r2, [r0, #8]
 8010d22:	441c      	add	r4, r3
 8010d24:	4641      	mov	r1, r8
 8010d26:	6953      	ldr	r3, [r2, #20]
 8010d28:	941d      	str	r4, [sp, #116]	; 0x74
 8010d2a:	4632      	mov	r2, r6
 8010d2c:	4798      	blx	r3
 8010d2e:	4604      	mov	r4, r0
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d1e0      	bne.n	8010cf6 <GUI_MEMDEV__WriteToActiveOpaque+0x462>
 8010d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d36:	3601      	adds	r6, #1
 8010d38:	441f      	add	r7, r3
 8010d3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d3c:	42b3      	cmp	r3, r6
 8010d3e:	dd5c      	ble.n	8010dfa <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 8010d40:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010d42:	e7c6      	b.n	8010cd2 <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 8010d44:	9708      	str	r7, [sp, #32]
 8010d46:	46b3      	mov	fp, r6
 8010d48:	461f      	mov	r7, r3
 8010d4a:	e004      	b.n	8010d56 <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 8010d4c:	20000018 	.word	0x20000018
 8010d50:	2001bd6c 	.word	0x2001bd6c
 8010d54:	46a3      	mov	fp, r4
 8010d56:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010d58:	6883      	ldr	r3, [r0, #8]
 8010d5a:	f10b 0401 	add.w	r4, fp, #1
 8010d5e:	695b      	ldr	r3, [r3, #20]
 8010d60:	4622      	mov	r2, r4
 8010d62:	4641      	mov	r1, r8
 8010d64:	4798      	blx	r3
 8010d66:	4287      	cmp	r7, r0
 8010d68:	d0f4      	beq.n	8010d54 <GUI_MEMDEV__WriteToActiveOpaque+0x4c0>
 8010d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d6c:	9102      	str	r1, [sp, #8]
 8010d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d72:	9f08      	ldr	r7, [sp, #32]
 8010d74:	9205      	str	r2, [sp, #20]
 8010d76:	ebc6 030b 	rsb	r3, r6, fp
 8010d7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d7c:	9704      	str	r7, [sp, #16]
 8010d7e:	4431      	add	r1, r6
 8010d80:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010d82:	9203      	str	r2, [sp, #12]
 8010d84:	3301      	adds	r3, #1
 8010d86:	9501      	str	r5, [sp, #4]
 8010d88:	9500      	str	r5, [sp, #0]
 8010d8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d8c:	4650      	mov	r0, sl
 8010d8e:	fb06 7703 	mla	r7, r6, r3, r7
 8010d92:	4626      	mov	r6, r4
 8010d94:	f7f7 ff04 	bl	8008ba0 <LCD_DrawBitmap>
 8010d98:	e7cf      	b.n	8010d3a <GUI_MEMDEV__WriteToActiveOpaque+0x4a6>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d0ca      	beq.n	8010d34 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 8010d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010da0:	9608      	str	r6, [sp, #32]
 8010da2:	eb03 0b06 	add.w	fp, r3, r6
 8010da6:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 8010daa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010dac:	9005      	str	r0, [sp, #20]
 8010dae:	f00e 0007 	and.w	r0, lr, #7
 8010db2:	9006      	str	r0, [sp, #24]
 8010db4:	eb0a 000e 	add.w	r0, sl, lr
 8010db8:	f1be 0f00 	cmp.w	lr, #0
 8010dbc:	bfb8      	it	lt
 8010dbe:	f10e 0e07 	addlt.w	lr, lr, #7
 8010dc2:	eb07 0eee 	add.w	lr, r7, lr, asr #3
 8010dc6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010dc8:	f8cd e010 	str.w	lr, [sp, #16]
 8010dcc:	4622      	mov	r2, r4
 8010dce:	2301      	movs	r3, #1
 8010dd0:	4659      	mov	r1, fp
 8010dd2:	9603      	str	r6, [sp, #12]
 8010dd4:	9502      	str	r5, [sp, #8]
 8010dd6:	9501      	str	r5, [sp, #4]
 8010dd8:	9500      	str	r5, [sp, #0]
 8010dda:	f7f7 fdd3 	bl	8008984 <LCD__DrawBitmap_1bpp>
 8010dde:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010de2:	6882      	ldr	r2, [r0, #8]
 8010de4:	441c      	add	r4, r3
 8010de6:	4641      	mov	r1, r8
 8010de8:	6953      	ldr	r3, [r2, #20]
 8010dea:	941d      	str	r4, [sp, #116]	; 0x74
 8010dec:	9a08      	ldr	r2, [sp, #32]
 8010dee:	4798      	blx	r3
 8010df0:	4604      	mov	r4, r0
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d1d7      	bne.n	8010da6 <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 8010df6:	9e08      	ldr	r6, [sp, #32]
 8010df8:	e79c      	b.n	8010d34 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 8010dfa:	a81c      	add	r0, sp, #112	; 0x70
 8010dfc:	f7f6 fafc 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010e00:	e54d      	b.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e04:	9305      	str	r3, [sp, #20]
 8010e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e08:	9303      	str	r3, [sp, #12]
 8010e0a:	2401      	movs	r4, #1
 8010e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e0e:	9004      	str	r0, [sp, #16]
 8010e10:	9302      	str	r3, [sp, #8]
 8010e12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010e16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010e18:	9401      	str	r4, [sp, #4]
 8010e1a:	4651      	mov	r1, sl
 8010e1c:	9400      	str	r4, [sp, #0]
 8010e1e:	f7f7 febf 	bl	8008ba0 <LCD_DrawBitmap>
 8010e22:	e53c      	b.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010e24:	fb09 f008 	mul.w	r0, r9, r8
 8010e28:	f7f6 fac6 	bl	80073b8 <GUI_ALLOC_AllocNoInit>
 8010e2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	f43f ad35 	beq.w	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010e34:	f7f6 face 	bl	80073d4 <GUI_ALLOC_LockH>
 8010e38:	901e      	str	r0, [sp, #120]	; 0x78
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	f7f6 faca 	bl	80073d4 <GUI_ALLOC_LockH>
 8010e40:	901c      	str	r0, [sp, #112]	; 0x70
 8010e42:	6925      	ldr	r5, [r4, #16]
 8010e44:	f100 0718 	add.w	r7, r0, #24
 8010e48:	b345      	cbz	r5, 8010e9c <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 8010e4a:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 8010e4e:	2601      	movs	r6, #1
 8010e50:	e019      	b.n	8010e86 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8010e52:	f1b9 0f04 	cmp.w	r9, #4
 8010e56:	d019      	beq.n	8010e8c <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 8010e58:	f1b9 0f01 	cmp.w	r9, #1
 8010e5c:	d016      	beq.n	8010e8c <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 8010e5e:	2200      	movs	r2, #0
 8010e60:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e64:	9002      	str	r0, [sp, #8]
 8010e66:	2301      	movs	r3, #1
 8010e68:	9205      	str	r2, [sp, #20]
 8010e6a:	9203      	str	r2, [sp, #12]
 8010e6c:	9104      	str	r1, [sp, #16]
 8010e6e:	9601      	str	r6, [sp, #4]
 8010e70:	4651      	mov	r1, sl
 8010e72:	9600      	str	r6, [sp, #0]
 8010e74:	4642      	mov	r2, r8
 8010e76:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010e78:	449a      	add	sl, r3
 8010e7a:	f7f7 fe91 	bl	8008ba0 <LCD_DrawBitmap>
 8010e7e:	9b08      	ldr	r3, [sp, #32]
 8010e80:	3b01      	subs	r3, #1
 8010e82:	9308      	str	r3, [sp, #32]
 8010e84:	d050      	beq.n	8010f28 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 8010e86:	f1b9 0f02 	cmp.w	r9, #2
 8010e8a:	d1e2      	bne.n	8010e52 <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e90:	6925      	ldr	r5, [r4, #16]
 8010e92:	464b      	mov	r3, r9
 8010e94:	4642      	mov	r2, r8
 8010e96:	47a8      	blx	r5
 8010e98:	445f      	add	r7, fp
 8010e9a:	e7e0      	b.n	8010e5e <GUI_MEMDEV__WriteToActiveOpaque+0x5ca>
 8010e9c:	950c      	str	r5, [sp, #48]	; 0x30
 8010e9e:	2601      	movs	r6, #1
 8010ea0:	9c08      	ldr	r4, [sp, #32]
 8010ea2:	e014      	b.n	8010ece <GUI_MEMDEV__WriteToActiveOpaque+0x63a>
 8010ea4:	f1b9 0f04 	cmp.w	r9, #4
 8010ea8:	f000 818d 	beq.w	80111c6 <GUI_MEMDEV__WriteToActiveOpaque+0x932>
 8010eac:	4599      	cmp	r9, r3
 8010eae:	f000 8135 	beq.w	801111c <GUI_MEMDEV__WriteToActiveOpaque+0x888>
 8010eb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010eb4:	9505      	str	r5, [sp, #20]
 8010eb6:	9503      	str	r5, [sp, #12]
 8010eb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010eba:	9502      	str	r5, [sp, #8]
 8010ebc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8010ebe:	9601      	str	r6, [sp, #4]
 8010ec0:	9600      	str	r6, [sp, #0]
 8010ec2:	9504      	str	r5, [sp, #16]
 8010ec4:	f7f7 fe6c 	bl	8008ba0 <LCD_DrawBitmap>
 8010ec8:	3c01      	subs	r4, #1
 8010eca:	d02d      	beq.n	8010f28 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 8010ecc:	46da      	mov	sl, fp
 8010ece:	2301      	movs	r3, #1
 8010ed0:	f1b9 0f02 	cmp.w	r9, #2
 8010ed4:	4651      	mov	r1, sl
 8010ed6:	4642      	mov	r2, r8
 8010ed8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010eda:	eb0a 0b03 	add.w	fp, sl, r3
 8010ede:	d1e1      	bne.n	8010ea4 <GUI_MEMDEV__WriteToActiveOpaque+0x610>
 8010ee0:	9408      	str	r4, [sp, #32]
 8010ee2:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8010ee6:	2401      	movs	r4, #1
 8010ee8:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8010eec:	46bb      	mov	fp, r7
 8010eee:	4646      	mov	r6, r8
 8010ef0:	f85b 0b04 	ldr.w	r0, [fp], #4
 8010ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef6:	4798      	blx	r3
 8010ef8:	3e01      	subs	r6, #1
 8010efa:	f829 0b02 	strh.w	r0, [r9], #2
 8010efe:	d1f7      	bne.n	8010ef0 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8010f00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f04:	9202      	str	r2, [sp, #8]
 8010f06:	9304      	str	r3, [sp, #16]
 8010f08:	4651      	mov	r1, sl
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	9605      	str	r6, [sp, #20]
 8010f0e:	9603      	str	r6, [sp, #12]
 8010f10:	9401      	str	r4, [sp, #4]
 8010f12:	9400      	str	r4, [sp, #0]
 8010f14:	4642      	mov	r2, r8
 8010f16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010f18:	449a      	add	sl, r3
 8010f1a:	f7f7 fe41 	bl	8008ba0 <LCD_DrawBitmap>
 8010f1e:	9b08      	ldr	r3, [sp, #32]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	442f      	add	r7, r5
 8010f24:	9308      	str	r3, [sp, #32]
 8010f26:	d1df      	bne.n	8010ee8 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 8010f28:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010f2a:	f7f6 fa65 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010f2e:	a81e      	add	r0, sp, #120	; 0x78
 8010f30:	f7f6 fa62 	bl	80073f8 <GUI_ALLOC_UnlockH>
 8010f34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010f36:	f7f6 fb31 	bl	800759c <GUI_ALLOC_Free>
 8010f3a:	e4b0      	b.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010f3c:	2401      	movs	r4, #1
 8010f3e:	3218      	adds	r2, #24
 8010f40:	2600      	movs	r6, #0
 8010f42:	9204      	str	r2, [sp, #16]
 8010f44:	f8cd b00c 	str.w	fp, [sp, #12]
 8010f48:	9502      	str	r5, [sp, #8]
 8010f4a:	9b08      	ldr	r3, [sp, #32]
 8010f4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010f4e:	9605      	str	r6, [sp, #20]
 8010f50:	4642      	mov	r2, r8
 8010f52:	4651      	mov	r1, sl
 8010f54:	9401      	str	r4, [sp, #4]
 8010f56:	9400      	str	r4, [sp, #0]
 8010f58:	f7f7 fe22 	bl	8008ba0 <LCD_DrawBitmap>
 8010f5c:	e49f      	b.n	801089e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8010f5e:	2500      	movs	r5, #0
 8010f60:	2601      	movs	r6, #1
 8010f62:	9c08      	ldr	r4, [sp, #32]
 8010f64:	e016      	b.n	8010f94 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 8010f66:	f1b9 0f04 	cmp.w	r9, #4
 8010f6a:	f000 80fc 	beq.w	8011166 <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 8010f6e:	4599      	cmp	r9, r3
 8010f70:	f000 80a4 	beq.w	80110bc <GUI_MEMDEV__WriteToActiveOpaque+0x828>
 8010f74:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010f76:	9708      	str	r7, [sp, #32]
 8010f78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f7a:	9702      	str	r7, [sp, #8]
 8010f7c:	9f08      	ldr	r7, [sp, #32]
 8010f7e:	9505      	str	r5, [sp, #20]
 8010f80:	9503      	str	r5, [sp, #12]
 8010f82:	9601      	str	r6, [sp, #4]
 8010f84:	9600      	str	r6, [sp, #0]
 8010f86:	9704      	str	r7, [sp, #16]
 8010f88:	f7f7 fe0a 	bl	8008ba0 <LCD_DrawBitmap>
 8010f8c:	3c01      	subs	r4, #1
 8010f8e:	f43f add2 	beq.w	8010b36 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 8010f92:	46da      	mov	sl, fp
 8010f94:	2301      	movs	r3, #1
 8010f96:	f1b9 0f02 	cmp.w	r9, #2
 8010f9a:	4651      	mov	r1, sl
 8010f9c:	4642      	mov	r2, r8
 8010f9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010fa0:	eb0a 0b03 	add.w	fp, sl, r3
 8010fa4:	d1df      	bne.n	8010f66 <GUI_MEMDEV__WriteToActiveOpaque+0x6d2>
 8010fa6:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8010faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010fac:	9408      	str	r4, [sp, #32]
 8010fae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010fb0:	960a      	str	r6, [sp, #40]	; 0x28
 8010fb2:	2401      	movs	r4, #1
 8010fb4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010fb6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8010fba:	46c1      	mov	r9, r8
 8010fbc:	f83b 0b02 	ldrh.w	r0, [fp], #2
 8010fc0:	47a8      	blx	r5
 8010fc2:	47b8      	blx	r7
 8010fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8010fc8:	f826 0b02 	strh.w	r0, [r6], #2
 8010fcc:	d1f6      	bne.n	8010fbc <GUI_MEMDEV__WriteToActiveOpaque+0x728>
 8010fce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010fd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fd4:	9302      	str	r3, [sp, #8]
 8010fd6:	46b6      	mov	lr, r6
 8010fd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010fda:	9204      	str	r2, [sp, #16]
 8010fdc:	2301      	movs	r3, #1
 8010fde:	4651      	mov	r1, sl
 8010fe0:	44b6      	add	lr, r6
 8010fe2:	f8cd 9014 	str.w	r9, [sp, #20]
 8010fe6:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fea:	9401      	str	r4, [sp, #4]
 8010fec:	9400      	str	r4, [sp, #0]
 8010fee:	4642      	mov	r2, r8
 8010ff0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010ff2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8010ff6:	449a      	add	sl, r3
 8010ff8:	f7f7 fdd2 	bl	8008ba0 <LCD_DrawBitmap>
 8010ffc:	9b08      	ldr	r3, [sp, #32]
 8010ffe:	3b01      	subs	r3, #1
 8011000:	9308      	str	r3, [sp, #32]
 8011002:	d1d7      	bne.n	8010fb4 <GUI_MEMDEV__WriteToActiveOpaque+0x720>
 8011004:	e597      	b.n	8010b36 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 8011006:	f7f6 f9e5 	bl	80073d4 <GUI_ALLOC_LockH>
 801100a:	901d      	str	r0, [sp, #116]	; 0x74
 801100c:	2800      	cmp	r0, #0
 801100e:	f43f ad92 	beq.w	8010b36 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 8011012:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8011016:	4637      	mov	r7, r6
 8011018:	930a      	str	r3, [sp, #40]	; 0x28
 801101a:	2501      	movs	r5, #1
 801101c:	940c      	str	r4, [sp, #48]	; 0x30
 801101e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011020:	e019      	b.n	8011056 <GUI_MEMDEV__WriteToActiveOpaque+0x7c2>
 8011022:	f1b9 0f04 	cmp.w	r9, #4
 8011026:	d030      	beq.n	801108a <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 8011028:	f1b9 0f01 	cmp.w	r9, #1
 801102c:	d028      	beq.n	8011080 <GUI_MEMDEV__WriteToActiveOpaque+0x7ec>
 801102e:	2200      	movs	r2, #0
 8011030:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011034:	9002      	str	r0, [sp, #8]
 8011036:	2301      	movs	r3, #1
 8011038:	9205      	str	r2, [sp, #20]
 801103a:	9203      	str	r2, [sp, #12]
 801103c:	9104      	str	r1, [sp, #16]
 801103e:	9501      	str	r5, [sp, #4]
 8011040:	4651      	mov	r1, sl
 8011042:	9500      	str	r5, [sp, #0]
 8011044:	4642      	mov	r2, r8
 8011046:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011048:	449a      	add	sl, r3
 801104a:	f7f7 fda9 	bl	8008ba0 <LCD_DrawBitmap>
 801104e:	9b08      	ldr	r3, [sp, #32]
 8011050:	3b01      	subs	r3, #1
 8011052:	9308      	str	r3, [sp, #32]
 8011054:	d02b      	beq.n	80110ae <GUI_MEMDEV__WriteToActiveOpaque+0x81a>
 8011056:	f1b9 0f02 	cmp.w	r9, #2
 801105a:	d1e2      	bne.n	8011022 <GUI_MEMDEV__WriteToActiveOpaque+0x78e>
 801105c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011060:	991d      	ldr	r1, [sp, #116]	; 0x74
 8011062:	464b      	mov	r3, r9
 8011064:	4642      	mov	r2, r8
 8011066:	4630      	mov	r0, r6
 8011068:	697c      	ldr	r4, [r7, #20]
 801106a:	47a0      	blx	r4
 801106c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801106e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011070:	4426      	add	r6, r4
 8011072:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011074:	4659      	mov	r1, fp
 8011076:	464b      	mov	r3, r9
 8011078:	4642      	mov	r2, r8
 801107a:	6924      	ldr	r4, [r4, #16]
 801107c:	47a0      	blx	r4
 801107e:	e7d6      	b.n	801102e <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 8011080:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011084:	991d      	ldr	r1, [sp, #116]	; 0x74
 8011086:	2302      	movs	r3, #2
 8011088:	e7ec      	b.n	8011064 <GUI_MEMDEV__WriteToActiveOpaque+0x7d0>
 801108a:	4630      	mov	r0, r6
 801108c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801108e:	697c      	ldr	r4, [r7, #20]
 8011090:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011094:	2302      	movs	r3, #2
 8011096:	4642      	mov	r2, r8
 8011098:	47a0      	blx	r4
 801109a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801109c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801109e:	6924      	ldr	r4, [r4, #16]
 80110a0:	464b      	mov	r3, r9
 80110a2:	4659      	mov	r1, fp
 80110a4:	4642      	mov	r2, r8
 80110a6:	47a0      	blx	r4
 80110a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110aa:	441e      	add	r6, r3
 80110ac:	e7bf      	b.n	801102e <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 80110ae:	a81d      	add	r0, sp, #116	; 0x74
 80110b0:	f7f6 f9a2 	bl	80073f8 <GUI_ALLOC_UnlockH>
 80110b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80110b6:	f7f6 fa71 	bl	800759c <GUI_ALLOC_Free>
 80110ba:	e53c      	b.n	8010b36 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 80110bc:	fa08 f603 	lsl.w	r6, r8, r3
 80110c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80110c2:	9408      	str	r4, [sp, #32]
 80110c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80110c6:	960a      	str	r6, [sp, #40]	; 0x28
 80110c8:	464c      	mov	r4, r9
 80110ca:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80110cc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80110d0:	46c1      	mov	r9, r8
 80110d2:	f83b 0b02 	ldrh.w	r0, [fp], #2
 80110d6:	47a8      	blx	r5
 80110d8:	47b8      	blx	r7
 80110da:	f1b9 0901 	subs.w	r9, r9, #1
 80110de:	f806 0b01 	strb.w	r0, [r6], #1
 80110e2:	d1f6      	bne.n	80110d2 <GUI_MEMDEV__WriteToActiveOpaque+0x83e>
 80110e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80110e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80110e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ea:	9302      	str	r3, [sp, #8]
 80110ec:	46b6      	mov	lr, r6
 80110ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80110f0:	9204      	str	r2, [sp, #16]
 80110f2:	2301      	movs	r3, #1
 80110f4:	4651      	mov	r1, sl
 80110f6:	44b6      	add	lr, r6
 80110f8:	f8cd 9014 	str.w	r9, [sp, #20]
 80110fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8011100:	9401      	str	r4, [sp, #4]
 8011102:	9400      	str	r4, [sp, #0]
 8011104:	4642      	mov	r2, r8
 8011106:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011108:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801110c:	449a      	add	sl, r3
 801110e:	f7f7 fd47 	bl	8008ba0 <LCD_DrawBitmap>
 8011112:	9b08      	ldr	r3, [sp, #32]
 8011114:	3b01      	subs	r3, #1
 8011116:	9308      	str	r3, [sp, #32]
 8011118:	d1d7      	bne.n	80110ca <GUI_MEMDEV__WriteToActiveOpaque+0x836>
 801111a:	e50c      	b.n	8010b36 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801111c:	9408      	str	r4, [sp, #32]
 801111e:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8011122:	464c      	mov	r4, r9
 8011124:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8011128:	46bb      	mov	fp, r7
 801112a:	4646      	mov	r6, r8
 801112c:	f85b 0b04 	ldr.w	r0, [fp], #4
 8011130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011132:	4798      	blx	r3
 8011134:	3e01      	subs	r6, #1
 8011136:	f809 0b01 	strb.w	r0, [r9], #1
 801113a:	d1f7      	bne.n	801112c <GUI_MEMDEV__WriteToActiveOpaque+0x898>
 801113c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801113e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011140:	9202      	str	r2, [sp, #8]
 8011142:	9304      	str	r3, [sp, #16]
 8011144:	4651      	mov	r1, sl
 8011146:	2301      	movs	r3, #1
 8011148:	9605      	str	r6, [sp, #20]
 801114a:	9603      	str	r6, [sp, #12]
 801114c:	9401      	str	r4, [sp, #4]
 801114e:	9400      	str	r4, [sp, #0]
 8011150:	4642      	mov	r2, r8
 8011152:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011154:	449a      	add	sl, r3
 8011156:	f7f7 fd23 	bl	8008ba0 <LCD_DrawBitmap>
 801115a:	9b08      	ldr	r3, [sp, #32]
 801115c:	3b01      	subs	r3, #1
 801115e:	442f      	add	r7, r5
 8011160:	9308      	str	r3, [sp, #32]
 8011162:	d1df      	bne.n	8011124 <GUI_MEMDEV__WriteToActiveOpaque+0x890>
 8011164:	e6e0      	b.n	8010f28 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 8011166:	ea4f 0648 	mov.w	r6, r8, lsl #1
 801116a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801116c:	9408      	str	r4, [sp, #32]
 801116e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011170:	960a      	str	r6, [sp, #40]	; 0x28
 8011172:	2401      	movs	r4, #1
 8011174:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8011176:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801117a:	46c1      	mov	r9, r8
 801117c:	f83b 0b02 	ldrh.w	r0, [fp], #2
 8011180:	47a8      	blx	r5
 8011182:	47b8      	blx	r7
 8011184:	f1b9 0901 	subs.w	r9, r9, #1
 8011188:	f846 0b04 	str.w	r0, [r6], #4
 801118c:	d1f6      	bne.n	801117c <GUI_MEMDEV__WriteToActiveOpaque+0x8e8>
 801118e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011190:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011194:	9302      	str	r3, [sp, #8]
 8011196:	46b6      	mov	lr, r6
 8011198:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801119a:	9204      	str	r2, [sp, #16]
 801119c:	2301      	movs	r3, #1
 801119e:	4651      	mov	r1, sl
 80111a0:	44b6      	add	lr, r6
 80111a2:	f8cd 9014 	str.w	r9, [sp, #20]
 80111a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80111aa:	9401      	str	r4, [sp, #4]
 80111ac:	9400      	str	r4, [sp, #0]
 80111ae:	4642      	mov	r2, r8
 80111b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80111b2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80111b6:	449a      	add	sl, r3
 80111b8:	f7f7 fcf2 	bl	8008ba0 <LCD_DrawBitmap>
 80111bc:	9b08      	ldr	r3, [sp, #32]
 80111be:	3b01      	subs	r3, #1
 80111c0:	9308      	str	r3, [sp, #32]
 80111c2:	d1d7      	bne.n	8011174 <GUI_MEMDEV__WriteToActiveOpaque+0x8e0>
 80111c4:	e4b7      	b.n	8010b36 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 80111c6:	9408      	str	r4, [sp, #32]
 80111c8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80111cc:	2401      	movs	r4, #1
 80111ce:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80111d2:	46bb      	mov	fp, r7
 80111d4:	4646      	mov	r6, r8
 80111d6:	f85b 0b04 	ldr.w	r0, [fp], #4
 80111da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111dc:	4798      	blx	r3
 80111de:	3e01      	subs	r6, #1
 80111e0:	f849 0b04 	str.w	r0, [r9], #4
 80111e4:	d1f7      	bne.n	80111d6 <GUI_MEMDEV__WriteToActiveOpaque+0x942>
 80111e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80111e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111ea:	9202      	str	r2, [sp, #8]
 80111ec:	9304      	str	r3, [sp, #16]
 80111ee:	4651      	mov	r1, sl
 80111f0:	2301      	movs	r3, #1
 80111f2:	9605      	str	r6, [sp, #20]
 80111f4:	9603      	str	r6, [sp, #12]
 80111f6:	9401      	str	r4, [sp, #4]
 80111f8:	9400      	str	r4, [sp, #0]
 80111fa:	4642      	mov	r2, r8
 80111fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80111fe:	449a      	add	sl, r3
 8011200:	f7f7 fcce 	bl	8008ba0 <LCD_DrawBitmap>
 8011204:	9b08      	ldr	r3, [sp, #32]
 8011206:	3b01      	subs	r3, #1
 8011208:	442f      	add	r7, r5
 801120a:	9308      	str	r3, [sp, #32]
 801120c:	d1df      	bne.n	80111ce <GUI_MEMDEV__WriteToActiveOpaque+0x93a>
 801120e:	e68b      	b.n	8010f28 <GUI_MEMDEV__WriteToActiveOpaque+0x694>

08011210 <GUI__AlphaPreserveTrans>:
 8011210:	b510      	push	{r4, lr}
 8011212:	4b09      	ldr	r3, [pc, #36]	; (8011238 <GUI__AlphaPreserveTrans+0x28>)
 8011214:	781c      	ldrb	r4, [r3, #0]
 8011216:	b938      	cbnz	r0, 8011228 <GUI__AlphaPreserveTrans+0x18>
 8011218:	4602      	mov	r2, r0
 801121a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	f7fe fdf0 	bl	800fe04 <LCD_AA_SetOrMask>
 8011224:	4620      	mov	r0, r4
 8011226:	bd10      	pop	{r4, pc}
 8011228:	2201      	movs	r2, #1
 801122a:	2000      	movs	r0, #0
 801122c:	701a      	strb	r2, [r3, #0]
 801122e:	f7fe fde9 	bl	800fe04 <LCD_AA_SetOrMask>
 8011232:	4620      	mov	r0, r4
 8011234:	bd10      	pop	{r4, pc}
 8011236:	bf00      	nop
 8011238:	2001bd54 	.word	0x2001bd54

0801123c <__libc_init_array>:
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	4e0d      	ldr	r6, [pc, #52]	; (8011274 <__libc_init_array+0x38>)
 8011240:	4c0d      	ldr	r4, [pc, #52]	; (8011278 <__libc_init_array+0x3c>)
 8011242:	1ba4      	subs	r4, r4, r6
 8011244:	10a4      	asrs	r4, r4, #2
 8011246:	2500      	movs	r5, #0
 8011248:	42a5      	cmp	r5, r4
 801124a:	d109      	bne.n	8011260 <__libc_init_array+0x24>
 801124c:	4e0b      	ldr	r6, [pc, #44]	; (801127c <__libc_init_array+0x40>)
 801124e:	4c0c      	ldr	r4, [pc, #48]	; (8011280 <__libc_init_array+0x44>)
 8011250:	f000 f846 	bl	80112e0 <_init>
 8011254:	1ba4      	subs	r4, r4, r6
 8011256:	10a4      	asrs	r4, r4, #2
 8011258:	2500      	movs	r5, #0
 801125a:	42a5      	cmp	r5, r4
 801125c:	d105      	bne.n	801126a <__libc_init_array+0x2e>
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011264:	4798      	blx	r3
 8011266:	3501      	adds	r5, #1
 8011268:	e7ee      	b.n	8011248 <__libc_init_array+0xc>
 801126a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801126e:	4798      	blx	r3
 8011270:	3501      	adds	r5, #1
 8011272:	e7f2      	b.n	801125a <__libc_init_array+0x1e>
 8011274:	08015bdc 	.word	0x08015bdc
 8011278:	08015bdc 	.word	0x08015bdc
 801127c:	08015bdc 	.word	0x08015bdc
 8011280:	08015be0 	.word	0x08015be0

08011284 <memcpy>:
 8011284:	b510      	push	{r4, lr}
 8011286:	1e43      	subs	r3, r0, #1
 8011288:	440a      	add	r2, r1
 801128a:	4291      	cmp	r1, r2
 801128c:	d100      	bne.n	8011290 <memcpy+0xc>
 801128e:	bd10      	pop	{r4, pc}
 8011290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011298:	e7f7      	b.n	801128a <memcpy+0x6>

0801129a <memmove>:
 801129a:	4288      	cmp	r0, r1
 801129c:	b510      	push	{r4, lr}
 801129e:	eb01 0302 	add.w	r3, r1, r2
 80112a2:	d803      	bhi.n	80112ac <memmove+0x12>
 80112a4:	1e42      	subs	r2, r0, #1
 80112a6:	4299      	cmp	r1, r3
 80112a8:	d10c      	bne.n	80112c4 <memmove+0x2a>
 80112aa:	bd10      	pop	{r4, pc}
 80112ac:	4298      	cmp	r0, r3
 80112ae:	d2f9      	bcs.n	80112a4 <memmove+0xa>
 80112b0:	1881      	adds	r1, r0, r2
 80112b2:	1ad2      	subs	r2, r2, r3
 80112b4:	42d3      	cmn	r3, r2
 80112b6:	d100      	bne.n	80112ba <memmove+0x20>
 80112b8:	bd10      	pop	{r4, pc}
 80112ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80112c2:	e7f7      	b.n	80112b4 <memmove+0x1a>
 80112c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80112cc:	e7eb      	b.n	80112a6 <memmove+0xc>

080112ce <memset>:
 80112ce:	4402      	add	r2, r0
 80112d0:	4603      	mov	r3, r0
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d100      	bne.n	80112d8 <memset+0xa>
 80112d6:	4770      	bx	lr
 80112d8:	f803 1b01 	strb.w	r1, [r3], #1
 80112dc:	e7f9      	b.n	80112d2 <memset+0x4>
	...

080112e0 <_init>:
 80112e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e2:	bf00      	nop
 80112e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112e6:	bc08      	pop	{r3}
 80112e8:	469e      	mov	lr, r3
 80112ea:	4770      	bx	lr

080112ec <_fini>:
 80112ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ee:	bf00      	nop
 80112f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112f2:	bc08      	pop	{r3}
 80112f4:	469e      	mov	lr, r3
 80112f6:	4770      	bx	lr
