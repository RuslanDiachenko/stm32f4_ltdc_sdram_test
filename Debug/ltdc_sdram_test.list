
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08007514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          00003fd4  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  2000404c  2000404c  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021b5f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003f78  00000000  00000000  00041c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013b8  00000000  00000000  00045b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001210  00000000  00000000  00046f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009ee5  00000000  00000000  00048148  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000650b  00000000  00000000  0005202d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00058538  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005488  00000000  00000000  000585b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800745c 	.word	0x0800745c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800745c 	.word	0x0800745c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f947 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f005 fdaa 	bl	800612c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f95f 	bl	80008c6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000620:	f000 f927 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000010 	.word	0x20000010
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	20003e58 	.word	0x20003e58

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20003e58 	.word	0x20003e58

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f7      	bcc.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <NVIC_EnableIRQ+0x30>)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	f002 021f 	and.w	r2, r2, #31
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0b      	bge.n	800078c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <NVIC_SetPriority+0x4c>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	3b04      	subs	r3, #4
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078a:	e009      	b.n	80007a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <NVIC_SetPriority+0x50>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	2201      	movs	r2, #1
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	401a      	ands	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fa:	2101      	movs	r1, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	1e59      	subs	r1, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800083c:	f7ff ff90 	bl	8000760 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2f 	bl	80006c8 <NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff44 	bl	8000710 <NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff37 	bl	800072c <NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff febe 	bl	800066c <HAL_GetTick>
 80008f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e099      	b.n	8000a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2202      	movs	r2, #2
 8000908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	f022 0201 	bic.w	r2, r2, #1
 800091a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091c:	e00f      	b.n	800093e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800091e:	f7ff fea5 	bl	800066c <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b05      	cmp	r3, #5
 800092a:	d908      	bls.n	800093e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2220      	movs	r2, #32
 8000930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2203      	movs	r2, #3
 8000936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e078      	b.n	8000a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1e8      	bne.n	800091e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <HAL_DMA_Init+0x158>)
 8000958:	4013      	ands	r3, r2
 800095a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a1b      	ldr	r3, [r3, #32]
 8000988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4313      	orrs	r3, r2
 800098e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000994:	2b04      	cmp	r3, #4
 8000996:	d107      	bne.n	80009a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4313      	orrs	r3, r2
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f023 0307 	bic.w	r3, r3, #7
 80009be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d117      	bne.n	8000a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4313      	orrs	r3, r2
 80009da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f8ab 	bl	8000b40 <DMA_CheckFifoParam>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009fe:	2301      	movs	r3, #1
 8000a00:	e016      	b.n	8000a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f862 	bl	8000ad4 <DMA_CalcBaseAndBitshift>
 8000a10:	4603      	mov	r3, r0
 8000a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a18:	223f      	movs	r2, #63	; 0x3f
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	f010803f 	.word	0xf010803f

08000a3c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e03e      	b.n	8000acc <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d101      	bne.n	8000a5e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e036      	b.n	8000acc <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	f022 0201 	bic.w	r2, r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2221      	movs	r2, #33	; 0x21
 8000a9c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f818 	bl	8000ad4 <DMA_CalcBaseAndBitshift>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	223f      	movs	r2, #63	; 0x3f
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	3b10      	subs	r3, #16
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <DMA_CalcBaseAndBitshift+0x64>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <DMA_CalcBaseAndBitshift+0x68>)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d909      	bls.n	8000b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	1d1a      	adds	r2, r3, #4
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	659a      	str	r2, [r3, #88]	; 0x58
 8000b14:	e007      	b.n	8000b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b1e:	f023 0303 	bic.w	r3, r3, #3
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	aaaaaaab 	.word	0xaaaaaaab
 8000b3c:	080074b0 	.word	0x080074b0

08000b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d11f      	bne.n	8000b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d855      	bhi.n	8000c0c <DMA_CheckFifoParam+0xcc>
 8000b60:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <DMA_CheckFifoParam+0x28>)
 8000b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b66:	bf00      	nop
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000b8b 	.word	0x08000b8b
 8000b70:	08000b79 	.word	0x08000b79
 8000b74:	08000c0d 	.word	0x08000c0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d045      	beq.n	8000c10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b88:	e042      	b.n	8000c10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b92:	d13f      	bne.n	8000c14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b98:	e03c      	b.n	8000c14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba2:	d121      	bne.n	8000be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d836      	bhi.n	8000c18 <DMA_CheckFifoParam+0xd8>
 8000baa:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <DMA_CheckFifoParam+0x70>)
 8000bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bc7 	.word	0x08000bc7
 8000bb8:	08000bc1 	.word	0x08000bc1
 8000bbc:	08000bd9 	.word	0x08000bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8000bc4:	e02f      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d024      	beq.n	8000c1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000bd6:	e021      	b.n	8000c1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000be0:	d11e      	bne.n	8000c20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000be6:	e01b      	b.n	8000c20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d902      	bls.n	8000bf4 <DMA_CheckFifoParam+0xb4>
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d003      	beq.n	8000bfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000bf2:	e018      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8000bf8:	e015      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00e      	beq.n	8000c24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
      break;
 8000c0a:	e00b      	b.n	8000c24 <DMA_CheckFifoParam+0xe4>
      break;
 8000c0c:	bf00      	nop
 8000c0e:	e00a      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      break;
 8000c10:	bf00      	nop
 8000c12:	e008      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      break;
 8000c14:	bf00      	nop
 8000c16:	e006      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      break;
 8000c18:	bf00      	nop
 8000c1a:	e004      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      break;
 8000c1c:	bf00      	nop
 8000c1e:	e002      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      break;   
 8000c20:	bf00      	nop
 8000c22:	e000      	b.n	8000c26 <DMA_CheckFifoParam+0xe6>
      break;
 8000c24:	bf00      	nop
    }
  } 
  
  return status; 
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e03b      	b.n	8000cbe <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d106      	bne.n	8000c60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f005 fa92 	bl	8006184 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6852      	ldr	r2, [r2, #4]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c88:	f022 0107 	bic.w	r1, r2, #7
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6892      	ldr	r2, [r2, #8]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ca2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	68c9      	ldr	r1, [r1, #12]
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af02      	add	r7, sp, #8
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_DMA2D_Start+0x1c>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e018      	b.n	8000d14 <HAL_DMA2D_Start+0x4e>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2202      	movs	r2, #2
 8000cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 fa97 	bl	8001230 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d056      	beq.n	8000dea <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8000d3c:	f7ff fc96 	bl	800066c <HAL_GetTick>
 8000d40:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8000d42:	e04b      	b.n	8000ddc <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d023      	beq.n	8000d9e <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d64:	f043 0202 	orr.w	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0a2      	b.n	8000ee4 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000da4:	d01a      	beq.n	8000ddc <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <HAL_DMA2D_PollForTransfer+0xa0>
 8000dac:	f7ff fc5e 	bl	800066c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad2      	subs	r2, r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d90f      	bls.n	8000ddc <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	f043 0220 	orr.w	r2, r3, #32
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2203      	movs	r2, #3
 8000dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e083      	b.n	8000ee4 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0ac      	beq.n	8000d44 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d106      	bne.n	8000e06 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d061      	beq.n	8000eca <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e06:	f7ff fc31 	bl	800066c <HAL_GetTick>
 8000e0a:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8000e0c:	e056      	b.n	8000ebc <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02e      	beq.n	8000e7e <HAL_DMA2D_PollForTransfer+0x162>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2e:	f043 0204 	orr.w	r2, r3, #4
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e44:	f043 0202 	orr.w	r2, r3, #2
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2229      	movs	r2, #41	; 0x29
 8000e68:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e032      	b.n	8000ee4 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e84:	d01a      	beq.n	8000ebc <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d007      	beq.n	8000e9c <HAL_DMA2D_PollForTransfer+0x180>
 8000e8c:	f7ff fbee 	bl	800066c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1ad2      	subs	r2, r2, r3
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d90f      	bls.n	8000ebc <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea0:	f043 0220 	orr.w	r2, r3, #32
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e013      	b.n	8000ee4 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0a1      	beq.n	8000e0e <HAL_DMA2D_PollForTransfer+0xf2>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2212      	movs	r2, #18
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d026      	beq.n	8000f5c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d021      	beq.n	8000f5c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f26:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2c:	f043 0201 	orr.w	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d026      	beq.n	8000fb4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2220      	movs	r2, #32
 8000f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8c:	f043 0202 	orr.w	r2, r3, #2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2204      	movs	r2, #4
 8000f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d026      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2208      	movs	r2, #8
 8000fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe4:	f043 0204 	orr.w	r2, r3, #4
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	d013      	beq.n	800103e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00e      	beq.n	800103e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2204      	movs	r2, #4
 8001036:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f853 	bl	80010e4 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d024      	beq.n	8001092 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800104e:	2b00      	cmp	r3, #0
 8001050:	d01f      	beq.n	8001092 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001060:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2202      	movs	r2, #2
 8001068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	d01f      	beq.n	80010dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01a      	beq.n	80010dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2210      	movs	r2, #16
 80010bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f80e 	bl	80010f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	3318      	adds	r3, #24
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_DMA2D_ConfigLayer+0x30>
 8001138:	2302      	movs	r3, #2
 800113a:	e070      	b.n	800121e <HAL_DMA2D_ConfigLayer+0x112>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d003      	beq.n	800115c <HAL_DMA2D_ConfigLayer+0x50>
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d10c      	bne.n	8001176 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	431a      	orrs	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001170:	4313      	orrs	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e00a      	b.n	800118c <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	061b      	lsls	r3, r3, #24
 8001188:	4313      	orrs	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d11e      	bne.n	80011d0 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_DMA2D_ConfigLayer+0x120>)
 800119e:	400b      	ands	r3, r1
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	d003      	beq.n	80011c0 <HAL_DMA2D_ConfigLayer+0xb4>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	d125      	bne.n	800120c <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	68d2      	ldr	r2, [r2, #12]
 80011c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
 80011ce:	e01d      	b.n	800120c <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	69d9      	ldr	r1, [r3, #28]
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_DMA2D_ConfigLayer+0x120>)
 80011dc:	400b      	ands	r3, r1
 80011de:	68f9      	ldr	r1, [r7, #12]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	d003      	beq.n	80011fe <HAL_DMA2D_ConfigLayer+0xf2>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	d106      	bne.n	800120c <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	68d2      	ldr	r2, [r2, #12]
 8001206:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800120a:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	00fcfff0 	.word	0x00fcfff0

08001230 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001230:	b480      	push	{r7}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800125c:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	0410      	lsls	r0, r2, #16
 8001264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001266:	4302      	orrs	r2, r0
 8001268:	430a      	orrs	r2, r1
 800126a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800127c:	d174      	bne.n	8001368 <DMA2D_SetConfig+0x138>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001284:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800128c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001294:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d108      	bne.n	80012b6 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	e053      	b.n	800135e <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d106      	bne.n	80012cc <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ca:	e048      	b.n	800135e <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d111      	bne.n	80012f8 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19U);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	0cdb      	lsrs	r3, r3, #19
 80012d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	0a9b      	lsrs	r3, r3, #10
 80012de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	02db      	lsls	r3, r3, #11
 80012ee:	431a      	orrs	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	e032      	b.n	800135e <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d117      	bne.n	8001330 <DMA2D_SetConfig+0x100>
    {
      tmp1 = (tmp1 >> 31U);
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	0cdb      	lsrs	r3, r3, #19
 800130a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	0adb      	lsrs	r3, r3, #11
 8001310:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	015a      	lsls	r2, r3, #5
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	431a      	orrs	r2, r3
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	03db      	lsls	r3, r3, #15
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4313      	orrs	r3, r2
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	e016      	b.n	800135e <DMA2D_SetConfig+0x12e>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	0f1b      	lsrs	r3, r3, #28
 8001334:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	0d1b      	lsrs	r3, r3, #20
 800133a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	0b1b      	lsrs	r3, r3, #12
 8001340:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	011a      	lsls	r2, r3, #4
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	431a      	orrs	r2, r3
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	031b      	lsls	r3, r3, #12
 8001356:	431a      	orrs	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4313      	orrs	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001366:	e003      	b.n	8001370 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	60da      	str	r2, [r3, #12]
}
 8001370:	bf00      	nop
 8001372:	372c      	adds	r7, #44	; 0x2c
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e177      	b.n	8001688 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8166 	bne.w	8001682 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x4a>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	69b9      	ldr	r1, [r7, #24]
 800140a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0203 	and.w	r2, r3, #3
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d00b      	beq.n	8001462 <HAL_GPIO_Init+0xe6>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001456:	2b11      	cmp	r3, #17
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b12      	cmp	r3, #18
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80c0 	beq.w	8001682 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_GPIO_Init+0x320>)
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <HAL_GPIO_Init+0x320>)
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b62      	ldr	r3, [pc, #392]	; (800169c <HAL_GPIO_Init+0x320>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a60      	ldr	r2, [pc, #384]	; (80016a0 <HAL_GPIO_Init+0x324>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_GPIO_Init+0x328>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d037      	beq.n	80015ba <HAL_GPIO_Init+0x23e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a56      	ldr	r2, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x32c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d031      	beq.n	80015b6 <HAL_GPIO_Init+0x23a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a55      	ldr	r2, [pc, #340]	; (80016ac <HAL_GPIO_Init+0x330>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x236>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_GPIO_Init+0x334>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x232>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a53      	ldr	r2, [pc, #332]	; (80016b4 <HAL_GPIO_Init+0x338>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x22e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_GPIO_Init+0x33c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x22a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a51      	ldr	r2, [pc, #324]	; (80016bc <HAL_GPIO_Init+0x340>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <HAL_GPIO_Init+0x344>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x222>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4f      	ldr	r2, [pc, #316]	; (80016c4 <HAL_GPIO_Init+0x348>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x21e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <HAL_GPIO_Init+0x34c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x21a>
 8001592:	2309      	movs	r3, #9
 8001594:	e012      	b.n	80015bc <HAL_GPIO_Init+0x240>
 8001596:	230a      	movs	r3, #10
 8001598:	e010      	b.n	80015bc <HAL_GPIO_Init+0x240>
 800159a:	2308      	movs	r3, #8
 800159c:	e00e      	b.n	80015bc <HAL_GPIO_Init+0x240>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00c      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e00a      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x240>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4934      	ldr	r1, [pc, #208]	; (80016a0 <HAL_GPIO_Init+0x324>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <HAL_GPIO_Init+0x350>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fe:	4a33      	ldr	r2, [pc, #204]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001628:	4a28      	ldr	r2, [pc, #160]	; (80016cc <HAL_GPIO_Init+0x350>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_GPIO_Init+0x350>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800167c:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_GPIO_Init+0x350>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f ae84 	bls.w	8001398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	3724      	adds	r7, #36	; 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40021400 	.word	0x40021400
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40021c00 	.word	0x40021c00
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40022400 	.word	0x40022400
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0c8      	b.n	80018e0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f004 fd36 	bl	80061d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2224      	movs	r2, #36	; 0x24
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001780:	f001 fe8e 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8001784:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_I2C_Init+0x1b4>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4952      	ldr	r1, [pc, #328]	; (80018ec <HAL_I2C_Init+0x1b8>)
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d802      	bhi.n	80017ae <HAL_I2C_Init+0x7a>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	e009      	b.n	80017c2 <HAL_I2C_Init+0x8e>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_I2C_Init+0x1bc>)
 80017ba:	fba1 1303 	umull	r1, r3, r1, r3
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	3301      	adds	r3, #1
 80017c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a47      	ldr	r2, [pc, #284]	; (80018ec <HAL_I2C_Init+0x1b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d812      	bhi.n	80017f8 <HAL_I2C_Init+0xc4>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d906      	bls.n	80017f4 <HAL_I2C_Init+0xc0>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	e045      	b.n	8001880 <HAL_I2C_Init+0x14c>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e043      	b.n	8001880 <HAL_I2C_Init+0x14c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10f      	bne.n	8001820 <HAL_I2C_Init+0xec>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	e010      	b.n	8001842 <HAL_I2C_Init+0x10e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009a      	lsls	r2, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x116>
 8001846:	2301      	movs	r3, #1
 8001848:	e01a      	b.n	8001880 <HAL_I2C_Init+0x14c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <HAL_I2C_Init+0x134>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001866:	e00b      	b.n	8001880 <HAL_I2C_Init+0x14c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009a      	lsls	r2, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001880:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	69d1      	ldr	r1, [r2, #28]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6a12      	ldr	r2, [r2, #32]
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6911      	ldr	r1, [r2, #16]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68d2      	ldr	r2, [r2, #12]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6951      	ldr	r1, [r2, #20]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6992      	ldr	r2, [r2, #24]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	000186a0 	.word	0x000186a0
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	460b      	mov	r3, r1
 8001902:	817b      	strh	r3, [r7, #10]
 8001904:	4613      	mov	r3, r2
 8001906:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800190c:	f7fe feae 	bl	800066c <HAL_GetTick>
 8001910:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b20      	cmp	r3, #32
 800191c:	f040 80ee 	bne.w	8001afc <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2319      	movs	r3, #25
 8001926:	2201      	movs	r2, #1
 8001928:	4977      	ldr	r1, [pc, #476]	; (8001b08 <HAL_I2C_Master_Transmit+0x214>)
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fc6c 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001936:	2302      	movs	r3, #2
 8001938:	e0e1      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_I2C_Master_Transmit+0x54>
 8001944:	2302      	movs	r3, #2
 8001946:	e0da      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d007      	beq.n	800196e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2221      	movs	r2, #33	; 0x21
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2210      	movs	r2, #16
 800198a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <HAL_I2C_Master_Transmit+0x218>)
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019b0:	8979      	ldrh	r1, [r7, #10]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fadc 	bl	8001f74 <I2C_MasterRequestWrite>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00f      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d105      	bne.n	80019d6 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e093      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e08d      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80019f8:	e066      	b.n	8001ac8 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fcc1 	bl	8002386 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00f      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d109      	bne.n	8001a26 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a20:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06b      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e069      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	1c58      	adds	r0, r3, #1
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	6248      	str	r0, [r1, #36]	; 0x24
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d119      	bne.n	8001a98 <HAL_I2C_Master_Transmit+0x1a4>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	1c58      	adds	r0, r3, #1
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	6248      	str	r0, [r1, #36]	; 0x24
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	6a39      	ldr	r1, [r7, #32]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fcaf 	bl	8002400 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00f      	beq.n	8001ac8 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d109      	bne.n	8001ac4 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e01c      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e01a      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d194      	bne.n	80019fa <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001afc:	2302      	movs	r3, #2
  }
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	00100002 	.word	0x00100002
 8001b0c:	ffff0000 	.word	0xffff0000

08001b10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	4613      	mov	r3, r2
 8001b22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b28:	f7fe fda0 	bl	800066c <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	f040 8215 	bne.w	8001f66 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2319      	movs	r3, #25
 8001b42:	2201      	movs	r2, #1
 8001b44:	4985      	ldr	r1, [pc, #532]	; (8001d5c <HAL_I2C_Master_Receive+0x24c>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fb5e 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	e208      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_I2C_Master_Receive+0x54>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e201      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d007      	beq.n	8001b8a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2222      	movs	r2, #34	; 0x22
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	893a      	ldrh	r2, [r7, #8]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <HAL_I2C_Master_Receive+0x250>)
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bcc:	8979      	ldrh	r1, [r7, #10]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fa50 	bl	8002078 <I2C_MasterRequestRead>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00f      	beq.n	8001bfe <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d105      	bne.n	8001bf2 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1ba      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1b4      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d113      	bne.n	8001c2e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e188      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d11b      	bne.n	8001c6e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e168      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d11b      	bne.n	8001cae <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	e148      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001cd4:	e134      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	f200 80eb 	bhi.w	8001eb6 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d127      	bne.n	8001d38 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fbc4 	bl	800247a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e131      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e12f      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	1c59      	adds	r1, r3, #1
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	6251      	str	r1, [r2, #36]	; 0x24
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	6912      	ldr	r2, [r2, #16]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d36:	e103      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d14a      	bne.n	8001dd6 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	2200      	movs	r2, #0
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <HAL_I2C_Master_Receive+0x254>)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fa5c 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e106      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
 8001d5a:	bf00      	nop
 8001d5c:	00100002 	.word	0x00100002
 8001d60:	ffff0000 	.word	0xffff0000
 8001d64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	6251      	str	r1, [r2, #36]	; 0x24
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	6912      	ldr	r2, [r2, #16]
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1c59      	adds	r1, r3, #1
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	6251      	str	r1, [r2, #36]	; 0x24
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	6912      	ldr	r2, [r2, #16]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd4:	e0b4      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4964      	ldr	r1, [pc, #400]	; (8001f70 <HAL_I2C_Master_Receive+0x460>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fa11 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0bb      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c59      	adds	r1, r3, #1
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6251      	str	r1, [r2, #36]	; 0x24
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	6912      	ldr	r2, [r2, #16]
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	2200      	movs	r2, #0
 8001e36:	494e      	ldr	r1, [pc, #312]	; (8001f70 <HAL_I2C_Master_Receive+0x460>)
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f9e5 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e08f      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	1c59      	adds	r1, r3, #1
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	6251      	str	r1, [r2, #36]	; 0x24
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	6912      	ldr	r2, [r2, #16]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6251      	str	r1, [r2, #36]	; 0x24
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	6912      	ldr	r2, [r2, #16]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb4:	e044      	b.n	8001f40 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fadd 	bl	800247a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04a      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e048      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	6251      	str	r1, [r2, #36]	; 0x24
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	6912      	ldr	r2, [r2, #16]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d116      	bne.n	8001f40 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c59      	adds	r1, r3, #1
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	6251      	str	r1, [r2, #36]	; 0x24
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	6912      	ldr	r2, [r2, #16]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f aec6 	bne.w	8001cd6 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	00010004 	.word	0x00010004

08001f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	460b      	mov	r3, r1
 8001f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d006      	beq.n	8001f9e <I2C_MasterRequestWrite+0x2a>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d003      	beq.n	8001f9e <I2C_MasterRequestWrite+0x2a>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f9c:	d108      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e00b      	b.n	8001fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	2b12      	cmp	r3, #18
 8001fb6:	d107      	bne.n	8001fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f917 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e040      	b.n	8002066 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fec:	d107      	bne.n	8001ffe <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	897a      	ldrh	r2, [r7, #10]
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	e021      	b.n	8002042 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	897a      	ldrh	r2, [r7, #10]
 8002004:	11d2      	asrs	r2, r2, #7
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 0206 	and.w	r2, r2, #6
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f062 020f 	orn	r2, r2, #15
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4915      	ldr	r1, [pc, #84]	; (8002070 <I2C_MasterRequestWrite+0xfc>)
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f944 	bl	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b04      	cmp	r3, #4
 800202e:	d101      	bne.n	8002034 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e018      	b.n	8002066 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e016      	b.n	8002066 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	897a      	ldrh	r2, [r7, #10]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	490b      	ldr	r1, [pc, #44]	; (8002074 <I2C_MasterRequestWrite+0x100>)
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f92e 	bl	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2b04      	cmp	r3, #4
 800205a:	d101      	bne.n	8002060 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e002      	b.n	8002066 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e000      	b.n	8002066 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	00010008 	.word	0x00010008
 8002074:	00010002 	.word	0x00010002

08002078 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	460b      	mov	r3, r1
 8002086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800209c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d006      	beq.n	80020b2 <I2C_MasterRequestRead+0x3a>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d003      	beq.n	80020b2 <I2C_MasterRequestRead+0x3a>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020b0:	d108      	bne.n	80020c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e00b      	b.n	80020dc <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	2b11      	cmp	r3, #17
 80020ca:	d107      	bne.n	80020dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020da:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f88d 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e07f      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002100:	d108      	bne.n	8002114 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	897a      	ldrh	r2, [r7, #10]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	e05f      	b.n	80021d4 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	897a      	ldrh	r2, [r7, #10]
 800211a:	11d2      	asrs	r2, r2, #7
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 0206 	and.w	r2, r2, #6
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f062 020f 	orn	r2, r2, #15
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4933      	ldr	r1, [pc, #204]	; (8002200 <I2C_MasterRequestRead+0x188>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f8b9 	bl	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b04      	cmp	r3, #4
 8002144:	d101      	bne.n	800214a <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e056      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e054      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	897a      	ldrh	r2, [r7, #10]
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4929      	ldr	r1, [pc, #164]	; (8002204 <I2C_MasterRequestRead+0x18c>)
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8a3 	bl	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b04      	cmp	r3, #4
 8002170:	d101      	bne.n	8002176 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e040      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e03e      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f82b 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e01d      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	897a      	ldrh	r2, [r7, #10]
 80021c2:	11d2      	asrs	r2, r2, #7
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 0206 	and.w	r2, r2, #6
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f062 020e 	orn	r2, r2, #14
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	490a      	ldr	r1, [pc, #40]	; (8002204 <I2C_MasterRequestRead+0x18c>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f865 	bl	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d101      	bne.n	80021f2 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e002      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e000      	b.n	80021f8 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	00010008 	.word	0x00010008
 8002204:	00010002 	.word	0x00010002

08002208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002218:	e01f      	b.n	800225a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002220:	d01b      	beq.n	800225a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002228:	f7fe fa20 	bl	800066c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d910      	bls.n	800225a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e023      	b.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10d      	bne.n	8002280 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4013      	ands	r3, r2
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	e00c      	b.n	800229a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	429a      	cmp	r2, r3
 800229e:	d0bc      	beq.n	800221a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022b8:	e040      	b.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c8:	d11c      	bne.n	8002304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022e2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2204      	movs	r2, #4
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e03c      	b.n	800237e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230a:	d017      	beq.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002312:	f7fe f9ab 	bl	800066c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	1ad2      	subs	r2, r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e020      	b.n	800237e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	0c1b      	lsrs	r3, r3, #16
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10c      	bne.n	8002360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	43da      	mvns	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf14      	ite	ne
 8002358:	2301      	movne	r3, #1
 800235a:	2300      	moveq	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e00b      	b.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4013      	ands	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d19e      	bne.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002392:	e029      	b.n	80023e8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f8ba 	bl	800250e <I2C_IsAcknowledgeFailed>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e029      	b.n	80023f8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023aa:	d01d      	beq.n	80023e8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023b2:	f7fe f95b 	bl	800066c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d912      	bls.n	80023e8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e007      	b.n	80023f8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	2b80      	cmp	r3, #128	; 0x80
 80023f4:	d1ce      	bne.n	8002394 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800240c:	e029      	b.n	8002462 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f87d 	bl	800250e <I2C_IsAcknowledgeFailed>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e029      	b.n	8002472 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002424:	d01d      	beq.n	8002462 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800242c:	f7fe f91e 	bl	800066c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d912      	bls.n	8002462 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e007      	b.n	8002472 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d1ce      	bne.n	800240e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002486:	e036      	b.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b10      	cmp	r3, #16
 8002494:	d114      	bne.n	80024c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0210 	mvn.w	r2, #16
 800249e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e022      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80024c6:	f7fe f8d1 	bl	800066c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90f      	bls.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e007      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d1c1      	bne.n	8002488 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002524:	d114      	bne.n	8002550 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800252e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2204      	movs	r2, #4
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b20      	cmp	r3, #32
 8002572:	d129      	bne.n	80025c8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002596:	f022 0210 	bic.w	r2, r2, #16
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d12a      	bne.n	8002646 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	; 0x24
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	f023 030f 	bic.w	r3, r3, #15
 8002616:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	4313      	orrs	r3, r2
 8002620:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	89fa      	ldrh	r2, [r7, #14]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 8002646:	2302      	movs	r3, #2
  }
}  
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0bf      	b.n	80027ee <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f003 fe10 	bl	80062a8 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	6992      	ldr	r2, [r2, #24]
 800269a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800269e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	6991      	ldr	r1, [r2, #24]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6850      	ldr	r0, [r2, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026b8:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6912      	ldr	r2, [r2, #16]
 80026be:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_LTDC_Init+0x1a4>)
 80026d0:	400b      	ands	r3, r1
 80026d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	6891      	ldr	r1, [r2, #8]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6990      	ldr	r0, [r2, #24]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4302      	orrs	r2, r0
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68d9      	ldr	r1, [r3, #12]
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_LTDC_Init+0x1a4>)
 80026fe:	400b      	ands	r3, r1
 8002700:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	68d1      	ldr	r1, [r2, #12]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6a10      	ldr	r0, [r2, #32]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4302      	orrs	r2, r0
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_LTDC_Init+0x1a4>)
 800272c:	400b      	ands	r3, r1
 800272e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	6911      	ldr	r1, [r2, #16]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4302      	orrs	r2, r0
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6959      	ldr	r1, [r3, #20]
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_LTDC_Init+0x1a4>)
 800275a:	400b      	ands	r3, r1
 800275c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	6951      	ldr	r1, [r2, #20]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4302      	orrs	r2, r0
 8002778:	430a      	orrs	r2, r1
 800277a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800279a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027aa:	68b8      	ldr	r0, [r7, #8]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4302      	orrs	r2, r0
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80027b6:	4302      	orrs	r2, r0
 80027b8:	430a      	orrs	r2, r1
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027c6:	f042 0206 	orr.w	r2, r2, #6
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	6992      	ldr	r2, [r2, #24]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	f000f800 	.word	0xf000f800

080027fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_LTDC_ConfigLayer+0x1a>
 8002812:	2302      	movs	r3, #2
 8002814:	e02c      	b.n	8002870 <HAL_LTDC_ConfigLayer+0x74>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2134      	movs	r1, #52	; 0x34
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4614      	mov	r4, r2
 800283a:	461d      	mov	r5, r3
 800283c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800283e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f847 	bl	80028e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bdb0      	pop	{r4, r5, r7, pc}

08002878 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_LTDC_SetAddress+0x1a>
 800288e:	2302      	movs	r3, #2
 8002890:	e024      	b.n	80028dc <HAL_LTDC_SetAddress+0x64>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2234      	movs	r2, #52	; 0x34
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	3338      	adds	r3, #56	; 0x38
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6979      	ldr	r1, [r7, #20]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f811 	bl	80028e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	4413      	add	r3, r2
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	01db      	lsls	r3, r3, #7
 800291c:	4413      	add	r3, r2
 800291e:	3384      	adds	r3, #132	; 0x84
 8002920:	461a      	mov	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	01db      	lsls	r3, r3, #7
 800292c:	440b      	add	r3, r1
 800292e:	3384      	adds	r3, #132	; 0x84
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002936:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	01db      	lsls	r3, r3, #7
 8002942:	4413      	add	r3, r2
 8002944:	3384      	adds	r3, #132	; 0x84
 8002946:	4619      	mov	r1, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002958:	4413      	add	r3, r2
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002970:	4413      	add	r3, r2
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	01db      	lsls	r3, r3, #7
 8002980:	4413      	add	r3, r2
 8002982:	3384      	adds	r3, #132	; 0x84
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	01db      	lsls	r3, r3, #7
 8002990:	440b      	add	r3, r1
 8002992:	3384      	adds	r3, #132	; 0x84
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800299a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	01db      	lsls	r3, r3, #7
 80029a6:	4413      	add	r3, r2
 80029a8:	3384      	adds	r3, #132	; 0x84
 80029aa:	4619      	mov	r1, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ba:	4413      	add	r3, r2
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	01db      	lsls	r3, r3, #7
 80029ce:	4413      	add	r3, r2
 80029d0:	3384      	adds	r3, #132	; 0x84
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	01db      	lsls	r3, r3, #7
 80029de:	440b      	add	r3, r1
 80029e0:	3384      	adds	r3, #132	; 0x84
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f023 0307 	bic.w	r3, r3, #7
 80029e8:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	01db      	lsls	r3, r3, #7
 80029f4:	4413      	add	r3, r2
 80029f6:	3384      	adds	r3, #132	; 0x84
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	01db      	lsls	r3, r3, #7
 8002a26:	4413      	add	r3, r2
 8002a28:	3384      	adds	r3, #132	; 0x84
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	01db      	lsls	r3, r3, #7
 8002a36:	4413      	add	r3, r2
 8002a38:	3384      	adds	r3, #132	; 0x84
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	01db      	lsls	r3, r3, #7
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3384      	adds	r3, #132	; 0x84
 8002a4e:	4619      	mov	r1, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a56:	461a      	mov	r2, r3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	01db      	lsls	r3, r3, #7
 8002a70:	4413      	add	r3, r2
 8002a72:	3384      	adds	r3, #132	; 0x84
 8002a74:	461a      	mov	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	01db      	lsls	r3, r3, #7
 8002a80:	440b      	add	r3, r1
 8002a82:	3384      	adds	r3, #132	; 0x84
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a8a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	01db      	lsls	r3, r3, #7
 8002a96:	4413      	add	r3, r2
 8002a98:	3384      	adds	r3, #132	; 0x84
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	01db      	lsls	r3, r3, #7
 8002aac:	4413      	add	r3, r2
 8002aae:	3384      	adds	r3, #132	; 0x84
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	01db      	lsls	r3, r3, #7
 8002abc:	440b      	add	r3, r1
 8002abe:	3384      	adds	r3, #132	; 0x84
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	01db      	lsls	r3, r3, #7
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3384      	adds	r3, #132	; 0x84
 8002ada:	4619      	mov	r1, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	01db      	lsls	r3, r3, #7
 8002af2:	4413      	add	r3, r2
 8002af4:	3384      	adds	r3, #132	; 0x84
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4413      	add	r3, r2
 8002b04:	3384      	adds	r3, #132	; 0x84
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	01db      	lsls	r3, r3, #7
 8002b16:	4413      	add	r3, r2
 8002b18:	3384      	adds	r3, #132	; 0x84
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e01b      	b.n	8002b68 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e014      	b.n	8002b68 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00b      	beq.n	8002b5e <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d007      	beq.n	8002b5e <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d003      	beq.n	8002b5e <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d102      	bne.n	8002b64 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e001      	b.n	8002b68 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002b64:	2301      	movs	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	4413      	add	r3, r2
 8002b74:	3384      	adds	r3, #132	; 0x84
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	01db      	lsls	r3, r3, #7
 8002b82:	440b      	add	r3, r1
 8002b84:	3384      	adds	r3, #132	; 0x84
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	01db      	lsls	r3, r3, #7
 8002b98:	4413      	add	r3, r2
 8002b9a:	3384      	adds	r3, #132	; 0x84
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1acb      	subs	r3, r1, r3
 8002bb4:	69f9      	ldr	r1, [r7, #28]
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	3303      	adds	r3, #3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	01db      	lsls	r3, r3, #7
 8002bca:	4413      	add	r3, r2
 8002bcc:	3384      	adds	r3, #132	; 0x84
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	01db      	lsls	r3, r3, #7
 8002bda:	440b      	add	r3, r1
 8002bdc:	3384      	adds	r3, #132	; 0x84
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002be4:	f023 0307 	bic.w	r3, r3, #7
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3384      	adds	r3, #132	; 0x84
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3384      	adds	r3, #132	; 0x84
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	01db      	lsls	r3, r3, #7
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3384      	adds	r3, #132	; 0x84
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6013      	str	r3, [r2, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fd fd04 	bl	800066c <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c66:	e009      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c68:	f7fd fd00 	bl	800066c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e01f      	b.n	8002cbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d1ee      	bne.n	8002c68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c90:	f7fd fcec 	bl	800066c <HAL_GetTick>
 8002c94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c96:	e009      	b.n	8002cac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c98:	f7fd fce8 	bl	800066c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca6:	d901      	bls.n	8002cac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e007      	b.n	8002cbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x98>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb8:	d1ee      	bne.n	8002c98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	420e0040 	.word	0x420e0040
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	420e0044 	.word	0x420e0044

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e22d      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d075      	beq.n	8002dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf2:	4ba3      	ldr	r3, [pc, #652]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfe:	4ba0      	ldr	r3, [pc, #640]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d112      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0a:	4b9d      	ldr	r3, [pc, #628]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d05b      	beq.n	8002ddc <HAL_RCC_OscConfig+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d157      	bne.n	8002ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e208      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCC_OscConfig+0x74>
 8002d3a:	4a91      	ldr	r2, [pc, #580]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	4b90      	ldr	r3, [pc, #576]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4a8b      	ldr	r2, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	4b8a      	ldr	r3, [pc, #552]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4a88      	ldr	r2, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	4b87      	ldr	r3, [pc, #540]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d6c:	4a84      	ldr	r2, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4a81      	ldr	r2, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fd fc6e 	bl	800066c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fd fc6a 	bl	800066c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1cd      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xc0>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fd fc5a 	bl	800066c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fd fc56 	bl	800066c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1b9      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0xe8>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dea:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df6:	4b62      	ldr	r3, [pc, #392]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x152>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e18d      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4956      	ldr	r1, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCC_OscConfig+0x2b0>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fd fc0f 	bl	800066c <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fd fc0b 	bl	800066c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e16e      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4943      	ldr	r1, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCC_OscConfig+0x2b0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fd fbee 	bl	800066c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fd fbea 	bl	800066c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e14d      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d030      	beq.n	8002f20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCC_OscConfig+0x2b4>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fd fbce 	bl	800066c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fd fbca 	bl	800066c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e12d      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x200>
 8002ef2:	e015      	b.n	8002f20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_OscConfig+0x2b4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fd fbb7 	bl	800066c <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fd fbb3 	bl	800066c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e116      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a0 	beq.w	800306e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_OscConfig+0x2b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_RCC_OscConfig+0x2b8>)
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_RCC_OscConfig+0x2b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7fd fb79 	bl	800066c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2ce>
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470000 	.word	0x42470000
 8002f88:	42470e80 	.word	0x42470e80
 8002f8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fd fb6c 	bl	800066c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0cf      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0x478>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
 8002fb6:	4a66      	ldr	r2, [pc, #408]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	e01c      	b.n	8002ffe <HAL_RCC_OscConfig+0x32a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fcc:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fce:	4b60      	ldr	r3, [pc, #384]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4a5d      	ldr	r2, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fda:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0x32a>
 8002fe6:	4a5a      	ldr	r2, [pc, #360]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	4a57      	ldr	r2, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002ff4:	4b56      	ldr	r3, [pc, #344]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d015      	beq.n	8003032 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fd fb31 	bl	800066c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fd fb2d 	bl	800066c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e08e      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCC_OscConfig+0x33a>
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fd fb1b 	bl	800066c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fd fb17 	bl	800066c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e078      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4a3b      	ldr	r2, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003064:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d064      	beq.n	8003140 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b08      	cmp	r3, #8
 8003080:	d05c      	beq.n	800313c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d141      	bne.n	800310e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_RCC_OscConfig+0x480>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fd faec 	bl	800066c <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003098:	f7fd fae8 	bl	800066c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e04b      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030b6:	4926      	ldr	r1, [pc, #152]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	019b      	lsls	r3, r3, #6
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	3b01      	subs	r3, #1
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x480>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fd fac1 	bl	800066c <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fabd 	bl	800066c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e020      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x41a>
 800310c:	e018      	b.n	8003140 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_RCC_OscConfig+0x480>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd faaa 	bl	800066c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd faa6 	bl	800066c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e009      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_RCC_OscConfig+0x47c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x448>
 800313a:	e001      	b.n	8003140 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000
 8003150:	40023800 	.word	0x40023800
 8003154:	42470060 	.word	0x42470060

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0ca      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b6      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	4b58      	ldr	r3, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	4b52      	ldr	r3, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	494f      	ldr	r1, [pc, #316]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07d      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d003      	beq.n	8003216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06d      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e065      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4936      	ldr	r1, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7fd fa10 	bl	800066c <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fd fa0c 	bl	800066c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e04d      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d90c      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e030      	b.n	8003302 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4918      	ldr	r1, [pc, #96]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ca:	4911      	ldr	r1, [pc, #68]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f81d 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032e2:	4601      	mov	r1, r0
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	fa21 f303 	lsr.w	r3, r1, r3
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80032fa:	200f      	movs	r0, #15
 80032fc:	f7fd f972 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023c00 	.word	0x40023c00
 8003310:	40023800 	.word	0x40023800
 8003314:	080074b8 	.word	0x080074b8
 8003318:	20000010 	.word	0x20000010

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003324:	2200      	movs	r2, #0
 8003326:	60fa      	str	r2, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	617a      	str	r2, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003330:	2200      	movs	r2, #0
 8003332:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <HAL_RCC_GetSysClockFreq+0x160>)
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	f002 020c 	and.w	r2, r2, #12
 800333c:	2a04      	cmp	r2, #4
 800333e:	d007      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 8003340:	2a08      	cmp	r2, #8
 8003342:	d008      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3a>
 8003344:	2a00      	cmp	r2, #0
 8003346:	f040 8090 	bne.w	800346a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334a:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <HAL_RCC_GetSysClockFreq+0x164>)
 800334c:	613b      	str	r3, [r7, #16]
       break;
 800334e:	e08f      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_GetSysClockFreq+0x168>)
 8003352:	613b      	str	r3, [r7, #16]
      break;
 8003354:	e08c      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003356:	4a49      	ldr	r2, [pc, #292]	; (800347c <HAL_RCC_GetSysClockFreq+0x160>)
 8003358:	6852      	ldr	r2, [r2, #4]
 800335a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800335e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003360:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_RCC_GetSysClockFreq+0x160>)
 8003362:	6852      	ldr	r2, [r2, #4]
 8003364:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003368:	2a00      	cmp	r2, #0
 800336a:	d023      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336c:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_GetSysClockFreq+0x160>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	f04f 0400 	mov.w	r4, #0
 8003376:	f240 11ff 	movw	r1, #511	; 0x1ff
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	ea03 0301 	and.w	r3, r3, r1
 8003382:	ea04 0402 	and.w	r4, r4, r2
 8003386:	4a3f      	ldr	r2, [pc, #252]	; (8003484 <HAL_RCC_GetSysClockFreq+0x168>)
 8003388:	fb02 f104 	mul.w	r1, r2, r4
 800338c:	2200      	movs	r2, #0
 800338e:	fb02 f203 	mul.w	r2, r2, r3
 8003392:	440a      	add	r2, r1
 8003394:	493b      	ldr	r1, [pc, #236]	; (8003484 <HAL_RCC_GetSysClockFreq+0x168>)
 8003396:	fba3 0101 	umull	r0, r1, r3, r1
 800339a:	1853      	adds	r3, r2, r1
 800339c:	4619      	mov	r1, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	f7fc ff72 	bl	8000290 <__aeabi_uldivmod>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e04c      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b4:	4a31      	ldr	r2, [pc, #196]	; (800347c <HAL_RCC_GetSysClockFreq+0x160>)
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	0992      	lsrs	r2, r2, #6
 80033ba:	4611      	mov	r1, r2
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80033c4:	f04f 0600 	mov.w	r6, #0
 80033c8:	ea05 0501 	and.w	r5, r5, r1
 80033cc:	ea06 0602 	and.w	r6, r6, r2
 80033d0:	4629      	mov	r1, r5
 80033d2:	4632      	mov	r2, r6
 80033d4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80033d8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80033dc:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80033e0:	4651      	mov	r1, sl
 80033e2:	465a      	mov	r2, fp
 80033e4:	46aa      	mov	sl, r5
 80033e6:	46b3      	mov	fp, r6
 80033e8:	4655      	mov	r5, sl
 80033ea:	465e      	mov	r6, fp
 80033ec:	1b4d      	subs	r5, r1, r5
 80033ee:	eb62 0606 	sbc.w	r6, r2, r6
 80033f2:	4629      	mov	r1, r5
 80033f4:	4632      	mov	r2, r6
 80033f6:	0194      	lsls	r4, r2, #6
 80033f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033fc:	018b      	lsls	r3, r1, #6
 80033fe:	1a5b      	subs	r3, r3, r1
 8003400:	eb64 0402 	sbc.w	r4, r4, r2
 8003404:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003408:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800340c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003410:	4643      	mov	r3, r8
 8003412:	464c      	mov	r4, r9
 8003414:	4655      	mov	r5, sl
 8003416:	465e      	mov	r6, fp
 8003418:	18ed      	adds	r5, r5, r3
 800341a:	eb46 0604 	adc.w	r6, r6, r4
 800341e:	462b      	mov	r3, r5
 8003420:	4634      	mov	r4, r6
 8003422:	02a2      	lsls	r2, r4, #10
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	029b      	lsls	r3, r3, #10
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003436:	4618      	mov	r0, r3
 8003438:	4621      	mov	r1, r4
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f04f 0400 	mov.w	r4, #0
 8003440:	461a      	mov	r2, r3
 8003442:	4623      	mov	r3, r4
 8003444:	f7fc ff24 	bl	8000290 <__aeabi_uldivmod>
 8003448:	4603      	mov	r3, r0
 800344a:	460c      	mov	r4, r1
 800344c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0x160>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	3301      	adds	r3, #1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	613b      	str	r3, [r7, #16]
      break;
 8003468:	e002      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x164>)
 800346c:	613b      	str	r3, [r7, #16]
      break;
 800346e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003470:	693b      	ldr	r3, [r7, #16]
}
 8003472:	4618      	mov	r0, r3
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	017d7840 	.word	0x017d7840

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000010 	.word	0x20000010

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4601      	mov	r1, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4a03      	ldr	r2, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	080074c8 	.word	0x080074c8

080034c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d061      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034f0:	4ba3      	ldr	r3, [pc, #652]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034f6:	f7fd f8b9 	bl	800066c <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034fe:	f7fd f8b5 	bl	800066c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e177      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003510:	4b9c      	ldr	r3, [pc, #624]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f0      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003528:	4996      	ldr	r1, [pc, #600]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	019a      	lsls	r2, r3, #6
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003548:	4b8e      	ldr	r3, [pc, #568]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354e:	0f1b      	lsrs	r3, r3, #28
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003556:	498b      	ldr	r1, [pc, #556]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	019a      	lsls	r2, r3, #6
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	061b      	lsls	r3, r3, #24
 8003564:	431a      	orrs	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	071b      	lsls	r3, r3, #28
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003570:	4984      	ldr	r1, [pc, #528]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003572:	4b84      	ldr	r3, [pc, #528]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	f023 021f 	bic.w	r2, r3, #31
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	3b01      	subs	r3, #1
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003588:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800358e:	f7fd f86d 	bl	800066c <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003596:	f7fd f869 	bl	800066c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e12b      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a8:	4b76      	ldr	r3, [pc, #472]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d079      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035cc:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035d2:	f7fd f84b 	bl	800066c <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80035da:	f7fd f847 	bl	800066c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e109      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035ec:	4b65      	ldr	r3, [pc, #404]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f8:	d0ef      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003606:	4b5f      	ldr	r3, [pc, #380]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	0f1b      	lsrs	r3, r3, #28
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003614:	495b      	ldr	r1, [pc, #364]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	019a      	lsls	r2, r3, #6
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	431a      	orrs	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	071b      	lsls	r3, r3, #28
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800362e:	4955      	ldr	r1, [pc, #340]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003630:	4b54      	ldr	r3, [pc, #336]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003636:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	3b01      	subs	r3, #1
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01e      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	0e1b      	lsrs	r3, r3, #24
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003662:	4948      	ldr	r1, [pc, #288]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	019a      	lsls	r2, r3, #6
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	071b      	lsls	r3, r3, #28
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800367c:	4941      	ldr	r1, [pc, #260]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003698:	f7fc ffe8 	bl	800066c <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80036a0:	f7fc ffe4 	bl	800066c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0a6      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036b2:	4b34      	ldr	r3, [pc, #208]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036be:	d1ef      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 808d 	beq.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ea:	4a28      	ldr	r2, [pc, #160]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f6:	f7fc ffb9 	bl	800066c <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fc ffb5 	bl	800066c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e077      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d039      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	429a      	cmp	r2, r3
 8003738:	d032      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003750:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01e      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003762:	f7fc ff83 	bl	800066c <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e014      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fc ff7f 	bl	800066c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d90b      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e03f      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003780:	42470068 	.word	0x42470068
 8003784:	40023800 	.word	0x40023800
 8003788:	42470070 	.word	0x42470070
 800378c:	40007000 	.word	0x40007000
 8003790:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0e4      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ac:	d10d      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x302>
 80037ae:	4916      	ldr	r1, [pc, #88]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037b0:	4b15      	ldr	r3, [pc, #84]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]
 80037c8:	e005      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80037ca:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	490c      	ldr	r1, [pc, #48]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e4:	4313      	orrs	r3, r2
 80037e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037f4:	4a05      	ldr	r2, [pc, #20]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037fc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	424711e0 	.word	0x424711e0

08003810 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e025      	b.n	8003870 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f81d 	bl	8003878 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 fbbb 	bl	8003fcc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	461a      	mov	r2, r3
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	f000 fc26 	bl	80040b2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b090      	sub	sp, #64	; 0x40
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	static DMA_HandleTypeDef dmaHandle;
	  /* USER CODE BEGIN FMC_MspInit 0 */

	  /* USER CODE END FMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct;
	  if (FMC_Initialized) {
 8003880:	4b90      	ldr	r3, [pc, #576]	; (8003ac4 <HAL_SDRAM_MspInit+0x24c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8118 	bne.w	8003aba <HAL_SDRAM_MspInit+0x242>
	    return;
	  }
	  FMC_Initialized = 1;
 800388a:	4b8e      	ldr	r3, [pc, #568]	; (8003ac4 <HAL_SDRAM_MspInit+0x24c>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
	  /* Peripheral clock enable */
	  __HAL_RCC_FMC_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
 8003894:	4a8c      	ldr	r2, [pc, #560]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003896:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6393      	str	r3, [r2, #56]	; 0x38
 80038a0:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  /* Enable chosen DMAx clock */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	4a85      	ldr	r2, [pc, #532]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ba:	6313      	str	r3, [r2, #48]	; 0x30
 80038bc:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

	  /* Enable GPIOs clock */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c8:	2300      	movs	r3, #0
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	4a7e      	ldr	r2, [pc, #504]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038ce:	4b7e      	ldr	r3, [pc, #504]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	6313      	str	r3, [r2, #48]	; 0x30
 80038d8:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038ea:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6313      	str	r3, [r2, #48]	; 0x30
 80038f4:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	4a70      	ldr	r2, [pc, #448]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003906:	4b70      	ldr	r3, [pc, #448]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6313      	str	r3, [r2, #48]	; 0x30
 8003910:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	4a69      	ldr	r2, [pc, #420]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003922:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f043 0310 	orr.w	r3, r3, #16
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
 800392c:	4b66      	ldr	r3, [pc, #408]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	4a62      	ldr	r2, [pc, #392]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 800393e:	4b62      	ldr	r3, [pc, #392]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f043 0320 	orr.w	r3, r3, #32
 8003946:	6313      	str	r3, [r2, #48]	; 0x30
 8003948:	4b5f      	ldr	r3, [pc, #380]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003962:	6313      	str	r3, [r2, #48]	; 0x30
 8003964:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <HAL_SDRAM_MspInit+0x250>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
	  PB5   ------> FMC_SDCKE1
	  PB6   ------> FMC_SDNE1
	  PE0   ------> FMC_NBL0
	  PE1   ------> FMC_NBL1
	  */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003970:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
	                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
	                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397e:	2303      	movs	r3, #3
 8003980:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003982:	230c      	movs	r3, #12
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800398a:	4619      	mov	r1, r3
 800398c:	484f      	ldr	r0, [pc, #316]	; (8003acc <HAL_SDRAM_MspInit+0x254>)
 800398e:	f7fd fcf5 	bl	800137c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003992:	2301      	movs	r3, #1
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399e:	2303      	movs	r3, #3
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039a2:	230c      	movs	r3, #12
 80039a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039aa:	4619      	mov	r1, r3
 80039ac:	4848      	ldr	r0, [pc, #288]	; (8003ad0 <HAL_SDRAM_MspInit+0x258>)
 80039ae:	f7fd fce5 	bl	800137c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80039b2:	f248 1333 	movw	r3, #33075	; 0x8133
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	                          |GPIO_PIN_8|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039c4:	230c      	movs	r3, #12
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039cc:	4619      	mov	r1, r3
 80039ce:	4841      	ldr	r0, [pc, #260]	; (8003ad4 <HAL_SDRAM_MspInit+0x25c>)
 80039d0:	f7fd fcd4 	bl	800137c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80039d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039e6:	230c      	movs	r3, #12
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ee:	4619      	mov	r1, r3
 80039f0:	4839      	ldr	r0, [pc, #228]	; (8003ad8 <HAL_SDRAM_MspInit+0x260>)
 80039f2:	f7fd fcc3 	bl	800137c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80039f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a08:	230c      	movs	r3, #12
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a10:	4619      	mov	r1, r3
 8003a12:	4832      	ldr	r0, [pc, #200]	; (8003adc <HAL_SDRAM_MspInit+0x264>)
 8003a14:	f7fd fcb2 	bl	800137c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003a18:	2360      	movs	r3, #96	; 0x60
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	2303      	movs	r3, #3
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a28:	230c      	movs	r3, #12
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a30:	4619      	mov	r1, r3
 8003a32:	482b      	ldr	r0, [pc, #172]	; (8003ae0 <HAL_SDRAM_MspInit+0x268>)
 8003a34:	f7fd fca2 	bl	800137c <HAL_GPIO_Init>

	  /* USER CODE BEGIN FMC_MspInit 1 */

	  /* Configure common DMA parameters */
	  dmaHandle.Init.Channel             = DMA_CHANNEL_0;
 8003a38:	4b2a      	ldr	r3, [pc, #168]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
	  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	609a      	str	r2, [r3, #8]
	  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4a:	60da      	str	r2, [r3, #12]
	  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a52:	611a      	str	r2, [r3, #16]
	  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a54:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a5a:	615a      	str	r2, [r3, #20]
	  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a62:	619a      	str	r2, [r3, #24]
	  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
	  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a70:	621a      	str	r2, [r3, #32]
	  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
	  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
	  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	62da      	str	r2, [r3, #44]	; 0x2c
	  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

	  dmaHandle.Instance = DMA2_Stream0;
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_SDRAM_MspInit+0x270>)
 8003a8e:	601a      	str	r2, [r3, #0]

	  /* Associate the DMA handle */
	  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6393      	str	r3, [r2, #56]	; 0x38

	  /* Deinitialize the stream for new transfer */
	  HAL_DMA_DeInit(&dmaHandle);
 8003a9c:	4811      	ldr	r0, [pc, #68]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003a9e:	f7fc ffcd 	bl	8000a3c <HAL_DMA_DeInit>

	  /* Configure the DMA stream */
	  HAL_DMA_Init(&dmaHandle);
 8003aa2:	4810      	ldr	r0, [pc, #64]	; (8003ae4 <HAL_SDRAM_MspInit+0x26c>)
 8003aa4:	f7fc ff1c 	bl	80008e0 <HAL_DMA_Init>

	  /* NVIC configuration for DMA transfer complete interrupt */
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0x0F, 0);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	210f      	movs	r1, #15
 8003aac:	2038      	movs	r0, #56	; 0x38
 8003aae:	f7fc fee0 	bl	8000872 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003ab2:	2038      	movs	r0, #56	; 0x38
 8003ab4:	f7fc fef9 	bl	80008aa <HAL_NVIC_EnableIRQ>
 8003ab8:	e000      	b.n	8003abc <HAL_SDRAM_MspInit+0x244>
	    return;
 8003aba:	bf00      	nop
	  /* USER CODE END FMC_MspInit 1 */
}
 8003abc:	3740      	adds	r7, #64	; 0x40
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000094 	.word	0x20000094
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40021400 	.word	0x40021400
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40020c00 	.word	0x40020c00
 8003ae0:	40020400 	.word	0x40020400
 8003ae4:	20000098 	.word	0x20000098
 8003ae8:	40026410 	.word	0x40026410

08003aec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d101      	bne.n	8003b08 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e018      	b.n	8003b3a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fb49 	bl	80041b0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d104      	bne.n	8003b30 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2205      	movs	r2, #5
 8003b2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003b2e:	e003      	b.n	8003b38 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d101      	bne.n	8003b5c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e00e      	b.n	8003b7a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fb5c 	bl	8004228 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e055      	b.n	8003c40 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f002 fc88 	bl	80064c4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6851      	ldr	r1, [r2, #4]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6912      	ldr	r2, [r2, #16]
 8003be4:	4311      	orrs	r1, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6952      	ldr	r2, [r2, #20]
 8003bea:	4311      	orrs	r1, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6992      	ldr	r2, [r2, #24]
 8003bf0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	69d2      	ldr	r2, [r2, #28]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6a12      	ldr	r2, [r2, #32]
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6992      	ldr	r2, [r2, #24]
 8003c12:	0c12      	lsrs	r2, r2, #16
 8003c14:	f002 0104 	and.w	r1, r2, #4
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	69d2      	ldr	r2, [r2, #28]
 8003c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2e:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Transmit+0x26>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e123      	b.n	8003eb6 <HAL_SPI_Transmit+0x26e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c76:	f7fc fcf9 	bl	800066c <HAL_GetTick>
 8003c7a:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d002      	beq.n	8003c8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c8c:	e10a      	b.n	8003ea4 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_SPI_Transmit+0x52>
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c9e:	e101      	b.n	8003ea4 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce6:	d107      	bne.n	8003cf8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d007      	beq.n	8003d16 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d147      	bne.n	8003db0 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_SPI_Transmit+0xea>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d138      	bne.n	8003da4 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3302      	adds	r3, #2
 8003d40:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d50:	e028      	b.n	8003da4 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d10f      	bne.n	8003d80 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	8812      	ldrh	r2, [r2, #0]
 8003d68:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d7e:	e011      	b.n	8003da4 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_SPI_Transmit+0x156>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8c:	d00a      	beq.n	8003da4 <HAL_SPI_Transmit+0x15c>
 8003d8e:	f7fc fc6d 	bl	800066c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003da2:	e07f      	b.n	8003ea4 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1d1      	bne.n	8003d52 <HAL_SPI_Transmit+0x10a>
 8003dae:	e048      	b.n	8003e42 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_SPI_Transmit+0x17a>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d13a      	bne.n	8003e38 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003de2:	e029      	b.n	8003e38 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d110      	bne.n	8003e14 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e12:	e011      	b.n	8003e38 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_SPI_Transmit+0x1ea>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e20:	d00a      	beq.n	8003e38 <HAL_SPI_Transmit+0x1f0>
 8003e22:	f7fc fc23 	bl	800066c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad2      	subs	r2, r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e36:	e035      	b.n	8003ea4 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1d0      	bne.n	8003de4 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f836 	bl	8003ebe <SPI_WaitFlagStateUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e5c:	e022      	b.n	8003ea4 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f894 	bl	8003f90 <SPI_CheckFlag_BSY>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e78:	e014      	b.n	8003ea4 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003ecc:	e04d      	b.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed4:	d049      	beq.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003edc:	f7fc fbc6 	bl	800066c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	1ad2      	subs	r2, r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d33e      	bcc.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6852      	ldr	r2, [r2, #4]
 8003ef6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003efa:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f04:	d111      	bne.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0e:	d004      	beq.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d107      	bne.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	d110      	bne.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003f42:	400b      	ands	r3, r1
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e00e      	b.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	401a      	ands	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d101      	bne.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	e000      	b.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003f7e:	2200      	movs	r2, #0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d1a3      	bne.n	8003ece <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff89 	bl	8003ebe <SPI_WaitFlagStateUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e000      	b.n	8003fc4 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d029      	beq.n	800403a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ff2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ff6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004000:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004006:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800400c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004012:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004018:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800401e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004024:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800402a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e034      	b.n	80040a4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004046:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004050:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004056:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800406a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800406e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004078:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800407e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004084:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800408a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004090:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	4313      	orrs	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b087      	sub	sp, #28
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d02e      	beq.n	800412a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80040d8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80040e8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80040f2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80040fc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004106:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	3b01      	subs	r3, #1
 800410e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004110:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	3b01      	subs	r3, #1
 8004118:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800411a:	4313      	orrs	r3, r2
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	e03b      	b.n	80041a2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800413a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	3b01      	subs	r3, #1
 8004142:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	3b01      	subs	r3, #1
 800414a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800414c:	4313      	orrs	r3, r2
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004160:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	3b01      	subs	r3, #1
 800416e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004170:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	3b01      	subs	r3, #1
 8004178:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800417a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	3b01      	subs	r3, #1
 8004182:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004184:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	3b01      	subs	r3, #1
 800418c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800418e:	4313      	orrs	r3, r2
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80041cc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80041d6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80041e8:	f7fc fa40 	bl	800066c <HAL_GetTick>
 80041ec:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80041ee:	e010      	b.n	8004212 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f6:	d00c      	beq.n	8004212 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <FMC_SDRAM_SendCommand+0x5e>
 80041fe:	f7fc fa35 	bl	800066c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d901      	bls.n	8004212 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e006      	b.n	8004220 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e8      	bne.n	80041f0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800425c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004260:	2b84      	cmp	r3, #132	; 0x84
 8004262:	d005      	beq.n	8004270 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004264:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	3303      	adds	r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004282:	f000 fd87 	bl	8004d94 <vTaskStartScheduler>
  
  return osOK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}

0800428c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428e:	b087      	sub	sp, #28
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685c      	ldr	r4, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a2:	b29e      	uxth	r6, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ffcf 	bl	800424e <makeFreeRtosPriority>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	9200      	str	r2, [sp, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	4632      	mov	r2, r6
 80042be:	4629      	mov	r1, r5
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fc3d 	bl	8004b40 <xTaskCreate>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80042d0:	68fb      	ldr	r3, [r7, #12]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042da <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80042de:	f001 f829 	bl	8005334 <xTaskGetSchedulerState>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80042e8:	f000 fa0e 	bl	8004708 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f103 0208 	add.w	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f103 0208 	add.w	r2, r3, #8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f103 0208 	add.w	r2, r3, #8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6892      	ldr	r2, [r2, #8]
 80043a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6852      	ldr	r2, [r2, #4]
 80043b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d103      	bne.n	80043c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b04      	subs	r3, #4
 80043f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b04      	subs	r3, #4
 8004406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0201 	bic.w	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b04      	subs	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004418:	4a0c      	ldr	r2, [pc, #48]	; (800444c <pxPortInitialiseStack+0x64>)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b14      	subs	r3, #20
 8004422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b04      	subs	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f06f 0202 	mvn.w	r2, #2
 8004436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3b20      	subs	r3, #32
 800443c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	08004451 	.word	0x08004451

08004450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvTaskExitError+0x38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	d009      	beq.n	8004474 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	e7fe      	b.n	8004472 <prvTaskExitError+0x22>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004486:	e7fe      	b.n	8004486 <prvTaskExitError+0x36>
 8004488:	20000008 	.word	0x20000008
 800448c:	00000000 	.word	0x00000000

08004490 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <pxCurrentTCBConst2>)
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	6808      	ldr	r0, [r1, #0]
 8004496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	f380 8809 	msr	PSP, r0
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8811 	msr	BASEPRI, r0
 80044aa:	4770      	bx	lr
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst2>:
 80044b0:	20003d18 	.word	0x20003d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044b8:	4806      	ldr	r0, [pc, #24]	; (80044d4 <prvPortStartFirstTask+0x1c>)
 80044ba:	6800      	ldr	r0, [r0, #0]
 80044bc:	6800      	ldr	r0, [r0, #0]
 80044be:	f380 8808 	msr	MSP, r0
 80044c2:	b662      	cpsie	i
 80044c4:	b661      	cpsie	f
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	df00      	svc	0
 80044d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044d2:	bf00      	nop
 80044d4:	e000ed08 	.word	0xe000ed08

080044d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <xPortStartScheduler+0xf4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <xPortStartScheduler+0xf8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d109      	bne.n	80044fc <xPortStartScheduler+0x24>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e7fe      	b.n	80044fa <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044fc:	4b33      	ldr	r3, [pc, #204]	; (80045cc <xPortStartScheduler+0xf4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a34      	ldr	r2, [pc, #208]	; (80045d4 <xPortStartScheduler+0xfc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d109      	bne.n	800451a <xPortStartScheduler+0x42>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e7fe      	b.n	8004518 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <xPortStartScheduler+0x100>)
 800451c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	22ff      	movs	r2, #255	; 0xff
 800452a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <xPortStartScheduler+0x104>)
 8004540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <xPortStartScheduler+0x108>)
 8004544:	2207      	movs	r2, #7
 8004546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004548:	e009      	b.n	800455e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800454a:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <xPortStartScheduler+0x108>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <xPortStartScheduler+0x108>)
 8004552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d0ef      	beq.n	800454a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <xPortStartScheduler+0x108>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <xPortStartScheduler+0x108>)
 8004572:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <xPortStartScheduler+0x108>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <xPortStartScheduler+0x108>)
 800457e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004588:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <xPortStartScheduler+0x10c>)
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <xPortStartScheduler+0x10c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004592:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <xPortStartScheduler+0x10c>)
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <xPortStartScheduler+0x10c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800459e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045a0:	f000 f8d2 	bl	8004748 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <xPortStartScheduler+0x110>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045aa:	f000 f8e9 	bl	8004780 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <xPortStartScheduler+0x114>)
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <xPortStartScheduler+0x114>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045ba:	f7ff ff7d 	bl	80044b8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80045be:	f7ff ff47 	bl	8004450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	e000ed00 	.word	0xe000ed00
 80045d0:	410fc271 	.word	0x410fc271
 80045d4:	410fc270 	.word	0x410fc270
 80045d8:	e000e400 	.word	0xe000e400
 80045dc:	200000f8 	.word	0x200000f8
 80045e0:	200000fc 	.word	0x200000fc
 80045e4:	e000ed20 	.word	0xe000ed20
 80045e8:	20000008 	.word	0x20000008
 80045ec:	e000ef34 	.word	0xe000ef34

080045f0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <vPortEnterCritical+0x54>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <vPortEnterCritical+0x54>)
 8004610:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <vPortEnterCritical+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d10e      	bne.n	8004638 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <vPortEnterCritical+0x58>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <vPortEnterCritical+0x48>
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	e7fe      	b.n	8004636 <vPortEnterCritical+0x46>
	}
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	20000008 	.word	0x20000008
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <vPortExitCritical+0x4c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <vPortExitCritical+0x22>
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e7fe      	b.n	800466c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <vPortExitCritical+0x4c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3b01      	subs	r3, #1
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <vPortExitCritical+0x4c>)
 8004676:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <vPortExitCritical+0x4c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <vPortExitCritical+0x3e>
 8004680:	2300      	movs	r3, #0
 8004682:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000008 	.word	0x20000008
 800469c:	00000000 	.word	0x00000000

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <pxCurrentTCBConst>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f01e 0f10 	tst.w	lr, #16
 80046b0:	bf08      	it	eq
 80046b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80046c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046c4:	f380 8811 	msr	BASEPRI, r0
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f000 fd0c 	bl	80050ec <vTaskSwitchContext>
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f380 8811 	msr	BASEPRI, r0
 80046dc:	bc08      	pop	{r3}
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	6808      	ldr	r0, [r1, #0]
 80046e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	f01e 0f10 	tst.w	lr, #16
 80046ea:	bf08      	it	eq
 80046ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046f0:	f380 8809 	msr	PSP, r0
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst>:
 8004700:	20003d18 	.word	0x20003d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004720:	f000 fc28 	bl	8004f74 <xTaskIncrementTick>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <xPortSysTickHandler+0x3c>)
 800472c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <vPortSetupTimerInterrupt+0x28>)
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <vPortSetupTimerInterrupt+0x2c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4909      	ldr	r1, [pc, #36]	; (8004778 <vPortSetupTimerInterrupt+0x30>)
 8004754:	fba1 1303 	umull	r1, r3, r1, r3
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	3b01      	subs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <vPortSetupTimerInterrupt+0x34>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e014 	.word	0xe000e014
 8004774:	20000010 	.word	0x20000010
 8004778:	10624dd3 	.word	0x10624dd3
 800477c:	e000e010 	.word	0xe000e010

08004780 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004780:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004790 <vPortEnableVFP+0x10>
 8004784:	6801      	ldr	r1, [r0, #0]
 8004786:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800478a:	6001      	str	r1, [r0, #0]
 800478c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800478e:	bf00      	nop
 8004790:	e000ed88 	.word	0xe000ed88

08004794 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047a0:	f000 fb3e 	bl	8004e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047a4:	4b57      	ldr	r3, [pc, #348]	; (8004904 <pvPortMalloc+0x170>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047ac:	f000 f90c 	bl	80049c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047b0:	4b55      	ldr	r3, [pc, #340]	; (8004908 <pvPortMalloc+0x174>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 808c 	bne.w	80048d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80047c4:	2208      	movs	r2, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4413      	add	r3, r2
 80047ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d013      	beq.n	80047fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f023 0307 	bic.w	r3, r3, #7
 80047dc:	3308      	adds	r3, #8
 80047de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <pvPortMalloc+0x6a>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e7fe      	b.n	80047fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d068      	beq.n	80048d6 <pvPortMalloc+0x142>
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <pvPortMalloc+0x178>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	429a      	cmp	r2, r3
 800480c:	d863      	bhi.n	80048d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800480e:	4b40      	ldr	r3, [pc, #256]	; (8004910 <pvPortMalloc+0x17c>)
 8004810:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <pvPortMalloc+0x17c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004818:	e004      	b.n	8004824 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d203      	bcs.n	8004836 <pvPortMalloc+0xa2>
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f1      	bne.n	800481a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004836:	4b33      	ldr	r3, [pc, #204]	; (8004904 <pvPortMalloc+0x170>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	429a      	cmp	r2, r3
 800483e:	d04a      	beq.n	80048d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2208      	movs	r2, #8
 8004846:	4413      	add	r3, r2
 8004848:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	1ad2      	subs	r2, r2, r3
 800485a:	2308      	movs	r3, #8
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	429a      	cmp	r2, r3
 8004860:	d91e      	bls.n	80048a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4413      	add	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <pvPortMalloc+0xf4>
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	e7fe      	b.n	8004886 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800489a:	69b8      	ldr	r0, [r7, #24]
 800489c:	f000 f8f6 	bl	8004a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <pvPortMalloc+0x178>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <pvPortMalloc+0x178>)
 80048ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <pvPortMalloc+0x178>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b18      	ldr	r3, [pc, #96]	; (8004914 <pvPortMalloc+0x180>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d203      	bcs.n	80048c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ba:	4b14      	ldr	r3, [pc, #80]	; (800490c <pvPortMalloc+0x178>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <pvPortMalloc+0x180>)
 80048c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <pvPortMalloc+0x174>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048d6:	f000 fab1 	bl	8004e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <pvPortMalloc+0x164>
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e7fe      	b.n	80048f6 <pvPortMalloc+0x162>
	return pvReturn;
 80048f8:	69fb      	ldr	r3, [r7, #28]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20003d08 	.word	0x20003d08
 8004908:	20003d14 	.word	0x20003d14
 800490c:	20003d0c 	.word	0x20003d0c
 8004910:	20003d00 	.word	0x20003d00
 8004914:	20003d10 	.word	0x20003d10

08004918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d046      	beq.n	80049b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800492a:	2308      	movs	r3, #8
 800492c:	425b      	negs	r3, r3
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4413      	add	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <vPortFree+0xa8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <vPortFree+0x42>
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e7fe      	b.n	8004958 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <vPortFree+0x5e>
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	e7fe      	b.n	8004974 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <vPortFree+0xa8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d019      	beq.n	80049b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d115      	bne.n	80049b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <vPortFree+0xa8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800499c:	f000 fa40 	bl	8004e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <vPortFree+0xac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <vPortFree+0xac>)
 80049ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ae:	6938      	ldr	r0, [r7, #16]
 80049b0:	f000 f86c 	bl	8004a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049b4:	f000 fa42 	bl	8004e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20003d14 	.word	0x20003d14
 80049c4:	20003d0c 	.word	0x20003d0c

080049c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <prvHeapInit+0xac>)
 80049d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3307      	adds	r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <prvHeapInit+0xac>)
 80049f8:	4413      	add	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a00:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <prvHeapInit+0xb0>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a06:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <prvHeapInit+0xb0>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4413      	add	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a14:	2208      	movs	r2, #8
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <prvHeapInit+0xb4>)
 8004a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <prvHeapInit+0xb4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <prvHeapInit+0xb4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <prvHeapInit+0xb4>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <prvHeapInit+0xb8>)
 8004a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <prvHeapInit+0xbc>)
 8004a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <prvHeapInit+0xc0>)
 8004a62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000100 	.word	0x20000100
 8004a78:	20003d00 	.word	0x20003d00
 8004a7c:	20003d08 	.word	0x20003d08
 8004a80:	20003d10 	.word	0x20003d10
 8004a84:	20003d0c 	.word	0x20003d0c
 8004a88:	20003d14 	.word	0x20003d14

08004a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a94:	4b28      	ldr	r3, [pc, #160]	; (8004b38 <prvInsertBlockIntoFreeList+0xac>)
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e002      	b.n	8004aa0 <prvInsertBlockIntoFreeList+0x14>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d3f7      	bcc.n	8004a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	441a      	add	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d108      	bne.n	8004ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d118      	bne.n	8004b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <prvInsertBlockIntoFreeList+0xb0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d00d      	beq.n	8004b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	441a      	add	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e008      	b.n	8004b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <prvInsertBlockIntoFreeList+0xb0>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e003      	b.n	8004b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d002      	beq.n	8004b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20003d00 	.word	0x20003d00
 8004b3c:	20003d08 	.word	0x20003d08

08004b40 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fe1d 	bl	8004794 <pvPortMalloc>
 8004b5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00e      	beq.n	8004b80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b62:	2054      	movs	r0, #84	; 0x54
 8004b64:	f7ff fe16 	bl	8004794 <pvPortMalloc>
 8004b68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
 8004b76:	e005      	b.n	8004b84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	f7ff fecd 	bl	8004918 <vPortFree>
 8004b7e:	e001      	b.n	8004b84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d013      	beq.n	8004bb2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9303      	str	r3, [sp, #12]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	9302      	str	r3, [sp, #8]
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f80e 	bl	8004bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ba6:	69f8      	ldr	r0, [r7, #28]
 8004ba8:	f000 f88a 	bl	8004cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bac:	2301      	movs	r3, #1
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e002      	b.n	8004bb8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b088      	sub	sp, #32
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f023 0307 	bic.w	r3, r3, #7
 8004be8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <prvInitialiseNewTask+0x46>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e7fe      	b.n	8004c06 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	e012      	b.n	8004c34 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	7819      	ldrb	r1, [r3, #0]
 8004c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3334      	adds	r3, #52	; 0x34
 8004c1e:	460a      	mov	r2, r1
 8004c20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	d9e9      	bls.n	8004c0e <prvInitialiseNewTask+0x4c>
 8004c3a:	e000      	b.n	8004c3e <prvInitialiseNewTask+0x7c>
		{
			break;
 8004c3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d901      	bls.n	8004c50 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fb62 	bl	8004330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	3318      	adds	r3, #24
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fb5d 	bl	8004330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f1c3 0207 	rsb	r2, r3, #7
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2200      	movs	r2, #0
 8004c90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	69b8      	ldr	r0, [r7, #24]
 8004ca0:	f7ff fba2 	bl	80043e8 <pxPortInitialiseStack>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cc8:	f7ff fc92 	bl	80045f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ccc:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <prvAddNewTaskToReadyList+0xb8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a29      	ldr	r2, [pc, #164]	; (8004d78 <prvAddNewTaskToReadyList+0xb8>)
 8004cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cd6:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <prvAddNewTaskToReadyList+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cde:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <prvAddNewTaskToReadyList+0xbc>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <prvAddNewTaskToReadyList+0xb8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d110      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cec:	f000 fa70 	bl	80051d0 <prvInitialiseTaskLists>
 8004cf0:	e00d      	b.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <prvAddNewTaskToReadyList+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <prvAddNewTaskToReadyList+0xbc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d802      	bhi.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <prvAddNewTaskToReadyList+0xbc>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004d16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7ff fb02 	bl	800434a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d46:	f7ff fc81 	bl	800464c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <prvAddNewTaskToReadyList+0xc0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00e      	beq.n	8004d70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <prvAddNewTaskToReadyList+0xbc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d207      	bcs.n	8004d70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20003e18 	.word	0x20003e18
 8004d7c:	20003d18 	.word	0x20003d18
 8004d80:	20003e24 	.word	0x20003e24
 8004d84:	20003e34 	.word	0x20003e34
 8004d88:	20003e20 	.word	0x20003e20
 8004d8c:	20003d1c 	.word	0x20003d1c
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <vTaskStartScheduler+0x74>)
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	4919      	ldr	r1, [pc, #100]	; (8004e0c <vTaskStartScheduler+0x78>)
 8004da8:	4819      	ldr	r0, [pc, #100]	; (8004e10 <vTaskStartScheduler+0x7c>)
 8004daa:	f7ff fec9 	bl	8004b40 <xTaskCreate>
 8004dae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d115      	bne.n	8004de2 <vTaskStartScheduler+0x4e>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <vTaskStartScheduler+0x80>)
 8004dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <vTaskStartScheduler+0x84>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <vTaskStartScheduler+0x88>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ddc:	f7ff fb7c 	bl	80044d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004de0:	e00d      	b.n	8004dfe <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de8:	d109      	bne.n	8004dfe <vTaskStartScheduler+0x6a>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	e7fe      	b.n	8004dfc <vTaskStartScheduler+0x68>
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20003e3c 	.word	0x20003e3c
 8004e0c:	08007474 	.word	0x08007474
 8004e10:	080051a1 	.word	0x080051a1
 8004e14:	20003e38 	.word	0x20003e38
 8004e18:	20003e24 	.word	0x20003e24
 8004e1c:	20003e1c 	.word	0x20003e1c

08004e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <vTaskSuspendAll+0x18>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <vTaskSuspendAll+0x18>)
 8004e2c:	6013      	str	r3, [r2, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	20003e40 	.word	0x20003e40

08004e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <xTaskResumeAll+0x114>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <xTaskResumeAll+0x2a>
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	e7fe      	b.n	8004e64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e66:	f7ff fbc3 	bl	80045f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e6a:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <xTaskResumeAll+0x114>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4a37      	ldr	r2, [pc, #220]	; (8004f50 <xTaskResumeAll+0x114>)
 8004e72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <xTaskResumeAll+0x114>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d161      	bne.n	8004f40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e7c:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <xTaskResumeAll+0x118>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d05d      	beq.n	8004f40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e84:	e02e      	b.n	8004ee4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e86:	4b34      	ldr	r3, [pc, #208]	; (8004f58 <xTaskResumeAll+0x11c>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3318      	adds	r3, #24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fa7d 	bl	8004392 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fa78 	bl	8004392 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <xTaskResumeAll+0x120>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <xTaskResumeAll+0x120>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <xTaskResumeAll+0x124>)
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7ff fa3d 	bl	800434a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <xTaskResumeAll+0x128>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004ede:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <xTaskResumeAll+0x12c>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee4:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <xTaskResumeAll+0x11c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1cc      	bne.n	8004e86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ef2:	f000 f9f9 	bl	80052e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <xTaskResumeAll+0x130>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d010      	beq.n	8004f24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f02:	f000 f837 	bl	8004f74 <xTaskIncrementTick>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <xTaskResumeAll+0x12c>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f1      	bne.n	8004f02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <xTaskResumeAll+0x130>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <xTaskResumeAll+0x12c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <xTaskResumeAll+0x134>)
 8004f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f40:	f7ff fb84 	bl	800464c <vPortExitCritical>

	return xAlreadyYielded;
 8004f44:	68bb      	ldr	r3, [r7, #8]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20003e40 	.word	0x20003e40
 8004f54:	20003e18 	.word	0x20003e18
 8004f58:	20003dd8 	.word	0x20003dd8
 8004f5c:	20003e20 	.word	0x20003e20
 8004f60:	20003d1c 	.word	0x20003d1c
 8004f64:	20003d18 	.word	0x20003d18
 8004f68:	20003e2c 	.word	0x20003e2c
 8004f6c:	20003e28 	.word	0x20003e28
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7e:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <xTaskIncrementTick+0x14c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 808c 	bne.w	80050a0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004f88:	4b4e      	ldr	r3, [pc, #312]	; (80050c4 <xTaskIncrementTick+0x150>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f90:	4a4c      	ldr	r2, [pc, #304]	; (80050c4 <xTaskIncrementTick+0x150>)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11f      	bne.n	8004fdc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f9c:	4b4a      	ldr	r3, [pc, #296]	; (80050c8 <xTaskIncrementTick+0x154>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <xTaskIncrementTick+0x46>
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	e7fe      	b.n	8004fb8 <xTaskIncrementTick+0x44>
 8004fba:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <xTaskIncrementTick+0x154>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	4b42      	ldr	r3, [pc, #264]	; (80050cc <xTaskIncrementTick+0x158>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a40      	ldr	r2, [pc, #256]	; (80050c8 <xTaskIncrementTick+0x154>)
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4a40      	ldr	r2, [pc, #256]	; (80050cc <xTaskIncrementTick+0x158>)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <xTaskIncrementTick+0x15c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <xTaskIncrementTick+0x15c>)
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	f000 f986 	bl	80052e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fdc:	4b3d      	ldr	r3, [pc, #244]	; (80050d4 <xTaskIncrementTick+0x160>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d34d      	bcc.n	8005082 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fe6:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <xTaskIncrementTick+0x154>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <xTaskIncrementTick+0x80>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <xTaskIncrementTick+0x82>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffa:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <xTaskIncrementTick+0x160>)
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005000:	601a      	str	r2, [r3, #0]
					break;
 8005002:	e03e      	b.n	8005082 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005004:	4b30      	ldr	r3, [pc, #192]	; (80050c8 <xTaskIncrementTick+0x154>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	d203      	bcs.n	8005024 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <xTaskIncrementTick+0x160>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6013      	str	r3, [r2, #0]
						break;
 8005022:	e02e      	b.n	8005082 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff f9b2 	bl	8004392 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	3318      	adds	r3, #24
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff f9a9 	bl	8004392 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	2201      	movs	r2, #1
 8005046:	409a      	lsls	r2, r3
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <xTaskIncrementTick+0x164>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <xTaskIncrementTick+0x164>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <xTaskIncrementTick+0x168>)
 8005060:	441a      	add	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7ff f96e 	bl	800434a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <xTaskIncrementTick+0x16c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d3b4      	bcc.n	8004fe6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005080:	e7b1      	b.n	8004fe6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005082:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <xTaskIncrementTick+0x16c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	4914      	ldr	r1, [pc, #80]	; (80050dc <xTaskIncrementTick+0x168>)
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d907      	bls.n	80050aa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800509a:	2301      	movs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e004      	b.n	80050aa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <xTaskIncrementTick+0x170>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3301      	adds	r3, #1
 80050a6:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <xTaskIncrementTick+0x170>)
 80050a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <xTaskIncrementTick+0x174>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050b6:	697b      	ldr	r3, [r7, #20]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20003e40 	.word	0x20003e40
 80050c4:	20003e1c 	.word	0x20003e1c
 80050c8:	20003dd0 	.word	0x20003dd0
 80050cc:	20003dd4 	.word	0x20003dd4
 80050d0:	20003e30 	.word	0x20003e30
 80050d4:	20003e38 	.word	0x20003e38
 80050d8:	20003e20 	.word	0x20003e20
 80050dc:	20003d1c 	.word	0x20003d1c
 80050e0:	20003d18 	.word	0x20003d18
 80050e4:	20003e28 	.word	0x20003e28
 80050e8:	20003e2c 	.word	0x20003e2c

080050ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <vTaskSwitchContext+0xa0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050fa:	4b25      	ldr	r3, [pc, #148]	; (8005190 <vTaskSwitchContext+0xa4>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005100:	e03e      	b.n	8005180 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005102:	4b23      	ldr	r3, [pc, #140]	; (8005190 <vTaskSwitchContext+0xa4>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <vTaskSwitchContext+0xa8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	fab3 f383 	clz	r3, r3
 8005114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	f1c3 031f 	rsb	r3, r3, #31
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	491e      	ldr	r1, [pc, #120]	; (8005198 <vTaskSwitchContext+0xac>)
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d109      	bne.n	8005146 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	e7fe      	b.n	8005144 <vTaskSwitchContext+0x58>
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a11      	ldr	r2, [pc, #68]	; (8005198 <vTaskSwitchContext+0xac>)
 8005152:	4413      	add	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	3308      	adds	r3, #8
 8005168:	429a      	cmp	r2, r3
 800516a:	d104      	bne.n	8005176 <vTaskSwitchContext+0x8a>
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a07      	ldr	r2, [pc, #28]	; (800519c <vTaskSwitchContext+0xb0>)
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20003e40 	.word	0x20003e40
 8005190:	20003e2c 	.word	0x20003e2c
 8005194:	20003e20 	.word	0x20003e20
 8005198:	20003d1c 	.word	0x20003d1c
 800519c:	20003d18 	.word	0x20003d18

080051a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051a8:	f000 f852 	bl	8005250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <prvIdleTask+0x28>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d9f9      	bls.n	80051a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <prvIdleTask+0x2c>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051c4:	e7f0      	b.n	80051a8 <prvIdleTask+0x8>
 80051c6:	bf00      	nop
 80051c8:	20003d1c 	.word	0x20003d1c
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	e00c      	b.n	80051f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <prvInitialiseTaskLists+0x60>)
 80051e8:	4413      	add	r3, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff f880 	bl	80042f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3301      	adds	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d9ef      	bls.n	80051dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051fc:	480d      	ldr	r0, [pc, #52]	; (8005234 <prvInitialiseTaskLists+0x64>)
 80051fe:	f7ff f877 	bl	80042f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005202:	480d      	ldr	r0, [pc, #52]	; (8005238 <prvInitialiseTaskLists+0x68>)
 8005204:	f7ff f874 	bl	80042f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005208:	480c      	ldr	r0, [pc, #48]	; (800523c <prvInitialiseTaskLists+0x6c>)
 800520a:	f7ff f871 	bl	80042f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800520e:	480c      	ldr	r0, [pc, #48]	; (8005240 <prvInitialiseTaskLists+0x70>)
 8005210:	f7ff f86e 	bl	80042f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005214:	480b      	ldr	r0, [pc, #44]	; (8005244 <prvInitialiseTaskLists+0x74>)
 8005216:	f7ff f86b 	bl	80042f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <prvInitialiseTaskLists+0x78>)
 800521c:	4a05      	ldr	r2, [pc, #20]	; (8005234 <prvInitialiseTaskLists+0x64>)
 800521e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <prvInitialiseTaskLists+0x7c>)
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <prvInitialiseTaskLists+0x68>)
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20003d1c 	.word	0x20003d1c
 8005234:	20003da8 	.word	0x20003da8
 8005238:	20003dbc 	.word	0x20003dbc
 800523c:	20003dd8 	.word	0x20003dd8
 8005240:	20003dec 	.word	0x20003dec
 8005244:	20003e04 	.word	0x20003e04
 8005248:	20003dd0 	.word	0x20003dd0
 800524c:	20003dd4 	.word	0x20003dd4

08005250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005256:	e028      	b.n	80052aa <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8005258:	f7ff fde2 	bl	8004e20 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800525c:	4b17      	ldr	r3, [pc, #92]	; (80052bc <prvCheckTasksWaitingTermination+0x6c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800526c:	f7ff fde6 	bl	8004e3c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d119      	bne.n	80052aa <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8005276:	f7ff f9bb 	bl	80045f0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <prvCheckTasksWaitingTermination+0x6c>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff f883 	bl	8004392 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <prvCheckTasksWaitingTermination+0x70>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	4a0b      	ldr	r2, [pc, #44]	; (80052c0 <prvCheckTasksWaitingTermination+0x70>)
 8005294:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <prvCheckTasksWaitingTermination+0x74>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <prvCheckTasksWaitingTermination+0x74>)
 800529e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80052a0:	f7ff f9d4 	bl	800464c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80052a4:	6838      	ldr	r0, [r7, #0]
 80052a6:	f000 f80f 	bl	80052c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <prvCheckTasksWaitingTermination+0x74>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1d2      	bne.n	8005258 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20003dec 	.word	0x20003dec
 80052c0:	20003e18 	.word	0x20003e18
 80052c4:	20003e00 	.word	0x20003e00

080052c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fb1f 	bl	8004918 <vPortFree>
			vPortFree( pxTCB );
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fb1c 	bl	8004918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <prvResetNextTaskUnblockTime+0x44>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <prvResetNextTaskUnblockTime+0x14>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <prvResetNextTaskUnblockTime+0x16>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <prvResetNextTaskUnblockTime+0x48>)
 8005304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005308:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800530a:	e008      	b.n	800531e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <prvResetNextTaskUnblockTime+0x44>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4a05      	ldr	r2, [pc, #20]	; (8005330 <prvResetNextTaskUnblockTime+0x48>)
 800531c:	6013      	str	r3, [r2, #0]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20003dd0 	.word	0x20003dd0
 8005330:	20003e38 	.word	0x20003e38

08005334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <xTaskGetSchedulerState+0x34>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005342:	2301      	movs	r3, #1
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	e008      	b.n	800535a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <xTaskGetSchedulerState+0x38>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005350:	2302      	movs	r3, #2
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e001      	b.n	800535a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800535a:	687b      	ldr	r3, [r7, #4]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20003e24 	.word	0x20003e24
 800536c:	20003e40 	.word	0x20003e40

08005370 <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8005374:	20ca      	movs	r0, #202	; 0xca
 8005376:	f000 f943 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 800537a:	20c3      	movs	r0, #195	; 0xc3
 800537c:	f000 f96a 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x08);
 8005380:	2008      	movs	r0, #8
 8005382:	f000 f967 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x50);
 8005386:	2050      	movs	r0, #80	; 0x50
 8005388:	f000 f964 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 800538c:	20cf      	movs	r0, #207	; 0xcf
 800538e:	f000 f937 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8005392:	2000      	movs	r0, #0
 8005394:	f000 f95e 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8005398:	20c1      	movs	r0, #193	; 0xc1
 800539a:	f000 f95b 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x30);
 800539e:	2030      	movs	r0, #48	; 0x30
 80053a0:	f000 f958 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 80053a4:	20ed      	movs	r0, #237	; 0xed
 80053a6:	f000 f92b 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 80053aa:	2064      	movs	r0, #100	; 0x64
 80053ac:	f000 f952 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x03);
 80053b0:	2003      	movs	r0, #3
 80053b2:	f000 f94f 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x12);
 80053b6:	2012      	movs	r0, #18
 80053b8:	f000 f94c 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x81);
 80053bc:	2081      	movs	r0, #129	; 0x81
 80053be:	f000 f949 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 80053c2:	20e8      	movs	r0, #232	; 0xe8
 80053c4:	f000 f91c 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 80053c8:	2085      	movs	r0, #133	; 0x85
 80053ca:	f000 f943 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 80053ce:	2000      	movs	r0, #0
 80053d0:	f000 f940 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x78);
 80053d4:	2078      	movs	r0, #120	; 0x78
 80053d6:	f000 f93d 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 80053da:	20cb      	movs	r0, #203	; 0xcb
 80053dc:	f000 f910 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 80053e0:	2039      	movs	r0, #57	; 0x39
 80053e2:	f000 f937 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x2C);
 80053e6:	202c      	movs	r0, #44	; 0x2c
 80053e8:	f000 f934 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 80053ec:	2000      	movs	r0, #0
 80053ee:	f000 f931 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x34);
 80053f2:	2034      	movs	r0, #52	; 0x34
 80053f4:	f000 f92e 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x02);
 80053f8:	2002      	movs	r0, #2
 80053fa:	f000 f92b 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 80053fe:	20f7      	movs	r0, #247	; 0xf7
 8005400:	f000 f8fe 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8005404:	2020      	movs	r0, #32
 8005406:	f000 f925 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 800540a:	20ea      	movs	r0, #234	; 0xea
 800540c:	f000 f8f8 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8005410:	2000      	movs	r0, #0
 8005412:	f000 f91f 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 8005416:	2000      	movs	r0, #0
 8005418:	f000 f91c 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 800541c:	20b1      	movs	r0, #177	; 0xb1
 800541e:	f000 f8ef 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8005422:	2000      	movs	r0, #0
 8005424:	f000 f916 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8005428:	201b      	movs	r0, #27
 800542a:	f000 f913 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 800542e:	20b6      	movs	r0, #182	; 0xb6
 8005430:	f000 f8e6 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8005434:	200a      	movs	r0, #10
 8005436:	f000 f90d 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0xA2);
 800543a:	20a2      	movs	r0, #162	; 0xa2
 800543c:	f000 f90a 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 8005440:	20c0      	movs	r0, #192	; 0xc0
 8005442:	f000 f8dd 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8005446:	2010      	movs	r0, #16
 8005448:	f000 f904 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 800544c:	20c1      	movs	r0, #193	; 0xc1
 800544e:	f000 f8d7 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8005452:	2010      	movs	r0, #16
 8005454:	f000 f8fe 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8005458:	20c5      	movs	r0, #197	; 0xc5
 800545a:	f000 f8d1 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 800545e:	2045      	movs	r0, #69	; 0x45
 8005460:	f000 f8f8 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x15);
 8005464:	2015      	movs	r0, #21
 8005466:	f000 f8f5 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 800546a:	20c7      	movs	r0, #199	; 0xc7
 800546c:	f000 f8c8 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8005470:	2090      	movs	r0, #144	; 0x90
 8005472:	f000 f8ef 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8005476:	2036      	movs	r0, #54	; 0x36
 8005478:	f000 f8c2 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 800547c:	20c8      	movs	r0, #200	; 0xc8
 800547e:	f000 f8e9 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8005482:	20f2      	movs	r0, #242	; 0xf2
 8005484:	f000 f8bc 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8005488:	2000      	movs	r0, #0
 800548a:	f000 f8e3 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 800548e:	20b0      	movs	r0, #176	; 0xb0
 8005490:	f000 f8b6 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8005494:	20c2      	movs	r0, #194	; 0xc2
 8005496:	f000 f8dd 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 800549a:	20b6      	movs	r0, #182	; 0xb6
 800549c:	f000 f8b0 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80054a0:	200a      	movs	r0, #10
 80054a2:	f000 f8d7 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0xA7);
 80054a6:	20a7      	movs	r0, #167	; 0xa7
 80054a8:	f000 f8d4 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x27);
 80054ac:	2027      	movs	r0, #39	; 0x27
 80054ae:	f000 f8d1 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x04);
 80054b2:	2004      	movs	r0, #4
 80054b4:	f000 f8ce 	bl	8005654 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 80054b8:	202a      	movs	r0, #42	; 0x2a
 80054ba:	f000 f8a1 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80054be:	2000      	movs	r0, #0
 80054c0:	f000 f8c8 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 80054c4:	2000      	movs	r0, #0
 80054c6:	f000 f8c5 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 80054ca:	2000      	movs	r0, #0
 80054cc:	f000 f8c2 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0xEF);
 80054d0:	20ef      	movs	r0, #239	; 0xef
 80054d2:	f000 f8bf 	bl	8005654 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 80054d6:	202b      	movs	r0, #43	; 0x2b
 80054d8:	f000 f892 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80054dc:	2000      	movs	r0, #0
 80054de:	f000 f8b9 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f000 f8b6 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x01);
 80054e8:	2001      	movs	r0, #1
 80054ea:	f000 f8b3 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x3F);
 80054ee:	203f      	movs	r0, #63	; 0x3f
 80054f0:	f000 f8b0 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 80054f4:	20f6      	movs	r0, #246	; 0xf6
 80054f6:	f000 f883 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f000 f8aa 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 8005500:	2000      	movs	r0, #0
 8005502:	f000 f8a7 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x06);
 8005506:	2006      	movs	r0, #6
 8005508:	f000 f8a4 	bl	8005654 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 800550c:	202c      	movs	r0, #44	; 0x2c
 800550e:	f000 f877 	bl	8005600 <LCD_WriteCommand>
	HAL_Delay(100);
 8005512:	2064      	movs	r0, #100	; 0x64
 8005514:	f7fb f8b6 	bl	8000684 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8005518:	2026      	movs	r0, #38	; 0x26
 800551a:	f000 f871 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800551e:	2001      	movs	r0, #1
 8005520:	f000 f898 	bl	8005654 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8005524:	20e0      	movs	r0, #224	; 0xe0
 8005526:	f000 f86b 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 800552a:	200f      	movs	r0, #15
 800552c:	f000 f892 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x29);
 8005530:	2029      	movs	r0, #41	; 0x29
 8005532:	f000 f88f 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x24);
 8005536:	2024      	movs	r0, #36	; 0x24
 8005538:	f000 f88c 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x0C);
 800553c:	200c      	movs	r0, #12
 800553e:	f000 f889 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8005542:	200e      	movs	r0, #14
 8005544:	f000 f886 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x09);
 8005548:	2009      	movs	r0, #9
 800554a:	f000 f883 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x4E);
 800554e:	204e      	movs	r0, #78	; 0x4e
 8005550:	f000 f880 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x78);
 8005554:	2078      	movs	r0, #120	; 0x78
 8005556:	f000 f87d 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x3C);
 800555a:	203c      	movs	r0, #60	; 0x3c
 800555c:	f000 f87a 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x09);
 8005560:	2009      	movs	r0, #9
 8005562:	f000 f877 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x13);
 8005566:	2013      	movs	r0, #19
 8005568:	f000 f874 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x05);
 800556c:	2005      	movs	r0, #5
 800556e:	f000 f871 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x17);
 8005572:	2017      	movs	r0, #23
 8005574:	f000 f86e 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x11);
 8005578:	2011      	movs	r0, #17
 800557a:	f000 f86b 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x00);
 800557e:	2000      	movs	r0, #0
 8005580:	f000 f868 	bl	8005654 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8005584:	20e1      	movs	r0, #225	; 0xe1
 8005586:	f000 f83b 	bl	8005600 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800558a:	2000      	movs	r0, #0
 800558c:	f000 f862 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x16);
 8005590:	2016      	movs	r0, #22
 8005592:	f000 f85f 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8005596:	201b      	movs	r0, #27
 8005598:	f000 f85c 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x04);
 800559c:	2004      	movs	r0, #4
 800559e:	f000 f859 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x11);
 80055a2:	2011      	movs	r0, #17
 80055a4:	f000 f856 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x07);
 80055a8:	2007      	movs	r0, #7
 80055aa:	f000 f853 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x31);
 80055ae:	2031      	movs	r0, #49	; 0x31
 80055b0:	f000 f850 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x33);
 80055b4:	2033      	movs	r0, #51	; 0x33
 80055b6:	f000 f84d 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x42);
 80055ba:	2042      	movs	r0, #66	; 0x42
 80055bc:	f000 f84a 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x05);
 80055c0:	2005      	movs	r0, #5
 80055c2:	f000 f847 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80055c6:	200c      	movs	r0, #12
 80055c8:	f000 f844 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x0A);
 80055cc:	200a      	movs	r0, #10
 80055ce:	f000 f841 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x28);
 80055d2:	2028      	movs	r0, #40	; 0x28
 80055d4:	f000 f83e 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x2F);
 80055d8:	202f      	movs	r0, #47	; 0x2f
 80055da:	f000 f83b 	bl	8005654 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80055de:	200f      	movs	r0, #15
 80055e0:	f000 f838 	bl	8005654 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 80055e4:	2011      	movs	r0, #17
 80055e6:	f000 f80b 	bl	8005600 <LCD_WriteCommand>
	HAL_Delay(100);
 80055ea:	2064      	movs	r0, #100	; 0x64
 80055ec:	f7fb f84a 	bl	8000684 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 80055f0:	2029      	movs	r0, #41	; 0x29
 80055f2:	f000 f805 	bl	8005600 <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 80055f6:	202c      	movs	r0, #44	; 0x2c
 80055f8:	f000 f802 	bl	8005600 <LCD_WriteCommand>
}
 80055fc:	bf00      	nop
 80055fe:	bd80      	pop	{r7, pc}

08005600 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	733b      	strb	r3, [r7, #12]
 800560e:	2300      	movs	r3, #0
 8005610:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8005612:	2200      	movs	r2, #0
 8005614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005618:	480b      	ldr	r0, [pc, #44]	; (8005648 <LCD_WriteCommand+0x48>)
 800561a:	f7fc f871 	bl	8001700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 800561e:	2200      	movs	r2, #0
 8005620:	2104      	movs	r1, #4
 8005622:	480a      	ldr	r0, [pc, #40]	; (800564c <LCD_WriteCommand+0x4c>)
 8005624:	f7fc f86c 	bl	8001700 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8005628:	f107 010c 	add.w	r1, r7, #12
 800562c:	2364      	movs	r3, #100	; 0x64
 800562e:	2201      	movs	r2, #1
 8005630:	4807      	ldr	r0, [pc, #28]	; (8005650 <LCD_WriteCommand+0x50>)
 8005632:	f7fe fb09 	bl	8003c48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8005636:	2201      	movs	r2, #1
 8005638:	2104      	movs	r1, #4
 800563a:	4804      	ldr	r0, [pc, #16]	; (800564c <LCD_WriteCommand+0x4c>)
 800563c:	f7fc f860 	bl	8001700 <HAL_GPIO_WritePin>
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40020c00 	.word	0x40020c00
 800564c:	40020800 	.word	0x40020800
 8005650:	20003ec4 	.word	0x20003ec4

08005654 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	733b      	strb	r3, [r7, #12]
 8005662:	2300      	movs	r3, #0
 8005664:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8005666:	2201      	movs	r2, #1
 8005668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800566c:	480b      	ldr	r0, [pc, #44]	; (800569c <LCD_WriteData+0x48>)
 800566e:	f7fc f847 	bl	8001700 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8005672:	2200      	movs	r2, #0
 8005674:	2104      	movs	r1, #4
 8005676:	480a      	ldr	r0, [pc, #40]	; (80056a0 <LCD_WriteData+0x4c>)
 8005678:	f7fc f842 	bl	8001700 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 800567c:	f107 010c 	add.w	r1, r7, #12
 8005680:	2364      	movs	r3, #100	; 0x64
 8005682:	2201      	movs	r2, #1
 8005684:	4807      	ldr	r0, [pc, #28]	; (80056a4 <LCD_WriteData+0x50>)
 8005686:	f7fe fadf 	bl	8003c48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800568a:	2201      	movs	r2, #1
 800568c:	2104      	movs	r1, #4
 800568e:	4804      	ldr	r0, [pc, #16]	; (80056a0 <LCD_WriteData+0x4c>)
 8005690:	f7fc f836 	bl	8001700 <HAL_GPIO_WritePin>
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40020c00 	.word	0x40020c00
 80056a0:	40020800 	.word	0x40020800
 80056a4:	20003ec4 	.word	0x20003ec4

080056a8 <LCD_FillScreen>:

void LCD_FillScreen(uint32_t color)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	6078      	str	r0, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <LCD_FillScreen+0x50>)
 80056b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056b6:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <LCD_FillScreen+0x50>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80056be:	480e      	ldr	r0, [pc, #56]	; (80056f8 <LCD_FillScreen+0x50>)
 80056c0:	f7fb fab8 	bl	8000c34 <HAL_DMA2D_Init>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d112      	bne.n	80056f0 <LCD_FillScreen+0x48>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <LCD_FillScreen+0x54>)
 80056cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <LCD_FillScreen+0x54>)
 80056d0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <LCD_FillScreen+0x54>)
 80056d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	460b      	mov	r3, r1
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4806      	ldr	r0, [pc, #24]	; (80056f8 <LCD_FillScreen+0x50>)
 80056de:	f7fb faf2 	bl	8000cc6 <HAL_DMA2D_Start>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <LCD_FillScreen+0x48>
				hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80056e8:	210a      	movs	r1, #10
 80056ea:	4803      	ldr	r0, [pc, #12]	; (80056f8 <LCD_FillScreen+0x50>)
 80056ec:	f7fb fb16 	bl	8000d1c <HAL_DMA2D_PollForTransfer>
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
	for (uint32_t i = 0; i < (n); i++)
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
	}*/
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20003fc4 	.word	0x20003fc4
 80056fc:	20003f1c 	.word	0x20003f1c

08005700 <LCD_DrawPixel>:
    }
    while (x <= 0);
}

void LCD_DrawPixel(uint32_t x, uint32_t y, uint32_t color)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 800570c:	4b15      	ldr	r3, [pc, #84]	; (8005764 <LCD_DrawPixel+0x64>)
 800570e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005712:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <LCD_DrawPixel+0x64>)
 8005716:	2200      	movs	r2, #0
 8005718:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800571a:	4812      	ldr	r0, [pc, #72]	; (8005764 <LCD_DrawPixel+0x64>)
 800571c:	f7fb fa8a 	bl	8000c34 <HAL_DMA2D_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11a      	bne.n	800575c <LCD_DrawPixel+0x5c>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <LCD_DrawPixel+0x68>)
 8005728:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800572a:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <LCD_DrawPixel+0x68>)
 800572c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	fb02 f203 	mul.w	r2, r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	441a      	add	r2, r3
 8005738:	4613      	mov	r3, r2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	4413      	add	r3, r2
 800573e:	18ca      	adds	r2, r1, r3
 8005740:	2301      	movs	r3, #1
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2301      	movs	r3, #1
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4806      	ldr	r0, [pc, #24]	; (8005764 <LCD_DrawPixel+0x64>)
 800574a:	f7fb fabc 	bl	8000cc6 <HAL_DMA2D_Start>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <LCD_DrawPixel+0x5c>
				, 1, 1) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8005754:	210a      	movs	r1, #10
 8005756:	4803      	ldr	r0, [pc, #12]	; (8005764 <LCD_DrawPixel+0x64>)
 8005758:	f7fb fae0 	bl	8000d1c <HAL_DMA2D_PollForTransfer>
		}
	}
	//*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))) = color;
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20003fc4 	.word	0x20003fc4
 8005768:	20003f1c 	.word	0x20003f1c

0800576c <LCD_DrawChar>:
{
	lcdProp.BackColor = color;
}

void LCD_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	80fb      	strh	r3, [r7, #6]
 8005776:	460b      	mov	r3, r1
 8005778:	80bb      	strh	r3, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	70fb      	strb	r3, [r7, #3]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  ch = &lcdProp.pFont->table[(c-' ') * lcdProp.pFont->Height * ((lcdProp.pFont->Width + 7) / 8)];
 800577e:	4b4e      	ldr	r3, [pc, #312]	; (80058b8 <LCD_DrawChar+0x14c>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	3b20      	subs	r3, #32
 8005788:	494b      	ldr	r1, [pc, #300]	; (80058b8 <LCD_DrawChar+0x14c>)
 800578a:	6889      	ldr	r1, [r1, #8]
 800578c:	88c9      	ldrh	r1, [r1, #6]
 800578e:	fb01 f103 	mul.w	r1, r1, r3
 8005792:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <LCD_DrawChar+0x14c>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	889b      	ldrh	r3, [r3, #4]
 8005798:	3307      	adds	r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	da00      	bge.n	80057a0 <LCD_DrawChar+0x34>
 800579e:	3307      	adds	r3, #7
 80057a0:	10db      	asrs	r3, r3, #3
 80057a2:	fb03 f301 	mul.w	r3, r3, r1
 80057a6:	4413      	add	r3, r2
 80057a8:	4a44      	ldr	r2, [pc, #272]	; (80058bc <LCD_DrawChar+0x150>)
 80057aa:	6013      	str	r3, [r2, #0]
  height = lcdProp.pFont->Height;
 80057ac:	4b42      	ldr	r3, [pc, #264]	; (80058b8 <LCD_DrawChar+0x14c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	88db      	ldrh	r3, [r3, #6]
 80057b2:	827b      	strh	r3, [r7, #18]
  width = lcdProp.pFont->Width;
 80057b4:	4b40      	ldr	r3, [pc, #256]	; (80058b8 <LCD_DrawChar+0x14c>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	889b      	ldrh	r3, [r3, #4]
 80057ba:	823b      	strh	r3, [r7, #16]
  offset = 8*((width + 7)/8) - width;
 80057bc:	8a3b      	ldrh	r3, [r7, #16]
 80057be:	3307      	adds	r3, #7
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da00      	bge.n	80057c6 <LCD_DrawChar+0x5a>
 80057c4:	3307      	adds	r3, #7
 80057c6:	10db      	asrs	r3, r3, #3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	8a3b      	ldrh	r3, [r7, #16]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	73fb      	strb	r3, [r7, #15]

  for (uint32_t i = 0; i < height; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e064      	b.n	80058a6 <LCD_DrawChar+0x13a>
  {
	  pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 80057dc:	4b37      	ldr	r3, [pc, #220]	; (80058bc <LCD_DrawChar+0x150>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	8a3b      	ldrh	r3, [r7, #16]
 80057e2:	3307      	adds	r3, #7
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da00      	bge.n	80057ea <LCD_DrawChar+0x7e>
 80057e8:	3307      	adds	r3, #7
 80057ea:	10db      	asrs	r3, r3, #3
 80057ec:	4619      	mov	r1, r3
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	fb03 f301 	mul.w	r3, r3, r1
 80057f4:	4413      	add	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]
	  switch ((width + 7)/8)
 80057f8:	8a3b      	ldrh	r3, [r7, #16]
 80057fa:	3307      	adds	r3, #7
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da00      	bge.n	8005802 <LCD_DrawChar+0x96>
 8005800:	3307      	adds	r3, #7
 8005802:	10db      	asrs	r3, r3, #3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d002      	beq.n	800580e <LCD_DrawChar+0xa2>
 8005808:	2b02      	cmp	r3, #2
 800580a:	d004      	beq.n	8005816 <LCD_DrawChar+0xaa>
 800580c:	e00c      	b.n	8005828 <LCD_DrawChar+0xbc>
	  {
	  	  case 1:
	  		  line = pchar[0];
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	61fb      	str	r3, [r7, #28]
	  		  break;
 8005814:	e016      	b.n	8005844 <LCD_DrawChar+0xd8>
	  	  case 2:
	  		  line = (pchar[0] << 8) | pchar[1];
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	3201      	adds	r2, #1
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	4313      	orrs	r3, r2
 8005824:	61fb      	str	r3, [r7, #28]
	  		  break;
 8005826:	e00d      	b.n	8005844 <LCD_DrawChar+0xd8>
	  	  case 3:
	  	  default:
	  		  line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	041a      	lsls	r2, r3, #16
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3301      	adds	r3, #1
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	4313      	orrs	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	3202      	adds	r2, #2
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	61fb      	str	r3, [r7, #28]
	  		  break;
 8005842:	bf00      	nop
	  }

	  for (uint32_t j = 0; j < width; j++)
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e023      	b.n	8005892 <LCD_DrawChar+0x126>
	  {
		  if (line & (1 << (width- j + offset- 1)))
 800584a:	8a3a      	ldrh	r2, [r7, #16]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	4413      	add	r3, r2
 8005854:	3b01      	subs	r3, #1
 8005856:	2201      	movs	r2, #1
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	461a      	mov	r2, r3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <LCD_DrawChar+0x10e>
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.TextColor);
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	18d0      	adds	r0, r2, r3
 800586c:	88b9      	ldrh	r1, [r7, #4]
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <LCD_DrawChar+0x14c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f7ff ff44 	bl	8005700 <LCD_DrawPixel>
 8005878:	e008      	b.n	800588c <LCD_DrawChar+0x120>
		  }
		  else
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.BackColor);
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	18d0      	adds	r0, r2, r3
 8005880:	88b9      	ldrh	r1, [r7, #4]
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <LCD_DrawChar+0x14c>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	461a      	mov	r2, r3
 8005888:	f7ff ff3a 	bl	8005700 <LCD_DrawPixel>
	  for (uint32_t j = 0; j < width; j++)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3301      	adds	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	8a3a      	ldrh	r2, [r7, #16]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	429a      	cmp	r2, r3
 8005898:	d8d7      	bhi.n	800584a <LCD_DrawChar+0xde>
		  }
	  }
	  y++;
 800589a:	88bb      	ldrh	r3, [r7, #4]
 800589c:	3301      	adds	r3, #1
 800589e:	80bb      	strh	r3, [r7, #4]
  for (uint32_t i = 0; i < height; i++)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	8a7a      	ldrh	r2, [r7, #18]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d896      	bhi.n	80057dc <LCD_DrawChar+0x70>
  }
}
 80058ae:	bf00      	nop
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20003e5c 	.word	0x20003e5c
 80058bc:	20003e68 	.word	0x20003e68

080058c0 <LCD_DrawString>:

void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60ba      	str	r2, [r7, #8]
 80058c8:	461a      	mov	r2, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	81fb      	strh	r3, [r7, #14]
 80058ce:	460b      	mov	r3, r1
 80058d0:	81bb      	strh	r3, [r7, #12]
 80058d2:	4613      	mov	r3, r2
 80058d4:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 80058d6:	2301      	movs	r3, #1
 80058d8:	83fb      	strh	r3, [r7, #30]
 80058da:	2300      	movs	r3, #0
 80058dc:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = Text;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	617b      	str	r3, [r7, #20]
	while (*ptr++) size++;
 80058ea:	e002      	b.n	80058f2 <LCD_DrawString+0x32>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	617a      	str	r2, [r7, #20]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f6      	bne.n	80058ec <LCD_DrawString+0x2c>
	xsize = (X_SIZE/lcdProp.pFont->Width);
 80058fe:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <LCD_DrawString+0x118>)
 8005900:	881a      	ldrh	r2, [r3, #0]
 8005902:	4b36      	ldr	r3, [pc, #216]	; (80059dc <LCD_DrawString+0x11c>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	889b      	ldrh	r3, [r3, #4]
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	b29b      	uxth	r3, r3
 800590e:	613b      	str	r3, [r7, #16]

	switch (Mode)
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d002      	beq.n	800591c <LCD_DrawString+0x5c>
 8005916:	2b02      	cmp	r3, #2
 8005918:	d00e      	beq.n	8005938 <LCD_DrawString+0x78>
 800591a:	e01b      	b.n	8005954 <LCD_DrawString+0x94>
	{
		case CENTER_MODE:
			ref_column = Xpos + ((xsize - size) * lcdProp.pFont->Width) / 2;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	4a2e      	ldr	r2, [pc, #184]	; (80059dc <LCD_DrawString+0x11c>)
 8005924:	6892      	ldr	r2, [r2, #8]
 8005926:	8892      	ldrh	r2, [r2, #4]
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	4413      	add	r3, r2
 8005934:	83fb      	strh	r3, [r7, #30]
			break;
 8005936:	e010      	b.n	800595a <LCD_DrawString+0x9a>
		case RIGHT_MODE:
			ref_column = - Xpos + ((xsize - size) * lcdProp.pFont->Width);
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	b29a      	uxth	r2, r3
 8005940:	4b26      	ldr	r3, [pc, #152]	; (80059dc <LCD_DrawString+0x11c>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	889b      	ldrh	r3, [r3, #4]
 8005946:	fb12 f303 	smulbb	r3, r2, r3
 800594a:	b29a      	uxth	r2, r3
 800594c:	89fb      	ldrh	r3, [r7, #14]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	83fb      	strh	r3, [r7, #30]
			break;
 8005952:	e002      	b.n	800595a <LCD_DrawString+0x9a>
		case LEFT_MODE:
		default:
			ref_column = Xpos;
 8005954:	89fb      	ldrh	r3, [r7, #14]
 8005956:	83fb      	strh	r3, [r7, #30]
			break;
 8005958:	bf00      	nop
	}

	if ((ref_column < 1) || (ref_column >= 0x8000))
 800595a:	8bfb      	ldrh	r3, [r7, #30]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <LCD_DrawString+0xa8>
 8005960:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da15      	bge.n	8005994 <LCD_DrawString+0xd4>
	{
		ref_column = 1;
 8005968:	2301      	movs	r3, #1
 800596a:	83fb      	strh	r3, [r7, #30]
	}
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 800596c:	e012      	b.n	8005994 <LCD_DrawString+0xd4>
	{
		LCD_DrawChar(ref_column, Ypos, *Text);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	89b9      	ldrh	r1, [r7, #12]
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fef8 	bl	800576c <LCD_DrawChar>
		ref_column += lcdProp.pFont->Width;
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <LCD_DrawString+0x11c>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	889a      	ldrh	r2, [r3, #4]
 8005982:	8bfb      	ldrh	r3, [r7, #30]
 8005984:	4413      	add	r3, r2
 8005986:	83fb      	strh	r3, [r7, #30]
		Text++;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	3301      	adds	r3, #1
 800598c:	60bb      	str	r3, [r7, #8]
		i++;
 800598e:	8bbb      	ldrh	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <LCD_DrawString+0x118>)
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	8bbb      	ldrh	r3, [r7, #28]
 80059aa:	490c      	ldr	r1, [pc, #48]	; (80059dc <LCD_DrawString+0x11c>)
 80059ac:	6889      	ldr	r1, [r1, #8]
 80059ae:	8889      	ldrh	r1, [r1, #4]
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	1ac3      	subs	r3, r0, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4908      	ldr	r1, [pc, #32]	; (80059dc <LCD_DrawString+0x11c>)
 80059ba:	6889      	ldr	r1, [r1, #8]
 80059bc:	8889      	ldrh	r1, [r1, #4]
 80059be:	428b      	cmp	r3, r1
 80059c0:	bfac      	ite	ge
 80059c2:	2301      	movge	r3, #1
 80059c4:	2300      	movlt	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	4013      	ands	r3, r2
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ce      	bne.n	800596e <LCD_DrawString+0xae>
	}
}
 80059d0:	bf00      	nop
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	2000000c 	.word	0x2000000c
 80059dc:	20003e5c 	.word	0x20003e5c

080059e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059e0:	b5b0      	push	{r4, r5, r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059e6:	f7fa fddb 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059ea:	f000 f871 	bl	8005ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059ee:	f000 fa7f 	bl	8005ef0 <MX_GPIO_Init>
  MX_LTDC_Init();
 80059f2:	f000 f97f 	bl	8005cf4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80059f6:	f000 f9fd 	bl	8005df4 <MX_SPI5_Init>
  MX_FMC_Init();
 80059fa:	f000 fa31 	bl	8005e60 <MX_FMC_Init>
  MX_DMA2D_Init();
 80059fe:	f000 f8f1 	bl	8005be4 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8005a02:	f000 f937 	bl	8005c74 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8005a06:	4810      	ldr	r0, [pc, #64]	; (8005a48 <main+0x68>)
 8005a08:	f000 fb28 	bl	800605c <SDRAM_init>
  LCD_PowerOn();
 8005a0c:	f7ff fcb0 	bl	8005370 <LCD_PowerOn>
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
 8005a10:	2200      	movs	r2, #0
 8005a12:	490e      	ldr	r1, [pc, #56]	; (8005a4c <main+0x6c>)
 8005a14:	480e      	ldr	r0, [pc, #56]	; (8005a50 <main+0x70>)
 8005a16:	f7fc ff2f 	bl	8002878 <HAL_LTDC_SetAddress>
  TP_Config();
 8005a1a:	f000 ff7b 	bl	8006914 <TP_Config>

  LCD_FillScreen(0x00);
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f7ff fe42 	bl	80056a8 <LCD_FillScreen>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <main+0x74>)
 8005a26:	1d3c      	adds	r4, r7, #4
 8005a28:	461d      	mov	r5, r3
 8005a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fc28 	bl	800428c <osThreadCreate>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <main+0x78>)
 8005a40:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8005a42:	f7fe fc1c 	bl	800427e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005a46:	e7fe      	b.n	8005a46 <main+0x66>
 8005a48:	20004004 	.word	0x20004004
 8005a4c:	d0050000 	.word	0xd0050000
 8005a50:	20003f1c 	.word	0x20003f1c
 8005a54:	08007488 	.word	0x08007488
 8005a58:	20003e6c 	.word	0x20003e6c

08005a5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	tp_state_t tp_state;
	char str[20] = {0};
 8005a64:	f107 030c 	add.w	r3, r7, #12
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN 5 */
	while (1)
	{
	  if (HAL_GPIO_ReadPin(TP_INT_GPIO_Port, TP_INT_Pin) == 1)
 8005a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a78:	4812      	ldr	r0, [pc, #72]	; (8005ac4 <StartDefaultTask+0x68>)
 8005a7a:	f7fb fe29 	bl	80016d0 <HAL_GPIO_ReadPin>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d1f7      	bne.n	8005a74 <StartDefaultTask+0x18>
	  {
		  TP_GetState(&tp_state);
 8005a84:	f107 0320 	add.w	r3, r7, #32
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 ffd7 	bl	8006a3c <TP_GetState>
		  if (tp_state.touchDetected)
 8005a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ee      	beq.n	8005a74 <StartDefaultTask+0x18>
		  {
			  sprintf(str, "x=%03d, y=%03d", tp_state.x, tp_state.y);
 8005a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a98:	461a      	mov	r2, r3
 8005a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a9c:	f107 000c 	add.w	r0, r7, #12
 8005aa0:	4909      	ldr	r1, [pc, #36]	; (8005ac8 <StartDefaultTask+0x6c>)
 8005aa2:	f001 f8bb 	bl	8006c1c <siprintf>
			  LCD_DrawString(0, 20, (uint8_t*)str, CENTER_MODE);
 8005aa6:	f107 020c 	add.w	r2, r7, #12
 8005aaa:	2301      	movs	r3, #1
 8005aac:	2114      	movs	r1, #20
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f7ff ff06 	bl	80058c0 <LCD_DrawString>
			  LCD_DrawPixel(tp_state.x, tp_state.y, LCD_COLOR_LIGHTRED);
 8005ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aba:	4a04      	ldr	r2, [pc, #16]	; (8005acc <StartDefaultTask+0x70>)
 8005abc:	4619      	mov	r1, r3
 8005abe:	f7ff fe1f 	bl	8005700 <LCD_DrawPixel>
	  if (HAL_GPIO_ReadPin(TP_INT_GPIO_Port, TP_INT_Pin) == 1)
 8005ac2:	e7d7      	b.n	8005a74 <StartDefaultTask+0x18>
 8005ac4:	40020000 	.word	0x40020000
 8005ac8:	0800749c 	.word	0x0800749c
 8005acc:	00ff8080 	.word	0x00ff8080

08005ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b0a0      	sub	sp, #128	; 0x80
 8005ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ad6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ada:	2230      	movs	r2, #48	; 0x30
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 f893 	bl	8006c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ae4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005af4:	f107 030c 	add.w	r3, r7, #12
 8005af8:	2230      	movs	r2, #48	; 0x30
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f884 	bl	8006c0a <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	4a35      	ldr	r2, [pc, #212]	; (8005bdc <SystemClock_Config+0x10c>)
 8005b08:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <SystemClock_Config+0x10c>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b10:	6413      	str	r3, [r2, #64]	; 0x40
 8005b12:	4b32      	ldr	r3, [pc, #200]	; (8005bdc <SystemClock_Config+0x10c>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	4a2f      	ldr	r2, [pc, #188]	; (8005be0 <SystemClock_Config+0x110>)
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <SystemClock_Config+0x110>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <SystemClock_Config+0x110>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b42:	2310      	movs	r3, #16
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b46:	2302      	movs	r3, #2
 8005b48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005b52:	23b4      	movs	r3, #180	; 0xb4
 8005b54:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b56:	2302      	movs	r3, #2
 8005b58:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd f8b6 	bl	8002cd4 <HAL_RCC_OscConfig>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005b6e:	f000 fa6d 	bl	800604c <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005b72:	f7fd f85f 	bl	8002c34 <HAL_PWREx_EnableOverDrive>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005b7c:	f000 fa66 	bl	800604c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b80:	230f      	movs	r3, #15
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b84:	2302      	movs	r3, #2
 8005b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b96:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b9c:	2105      	movs	r1, #5
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fd fada 	bl	8003158 <HAL_RCC_ClockConfig>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005baa:	f000 fa4f 	bl	800604c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005bae:	2308      	movs	r3, #8
 8005bb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8005bb2:	233c      	movs	r3, #60	; 0x3c
 8005bb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bc0:	f107 030c 	add.w	r3, r7, #12
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fd fc7f 	bl	80034c8 <HAL_RCCEx_PeriphCLKConfig>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8005bd0:	f000 fa3c 	bl	800604c <Error_Handler>
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3780      	adds	r7, #128	; 0x80
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40007000 	.word	0x40007000

08005be4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005be8:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005bea:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <MX_DMA2D_Init+0x8c>)
 8005bec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005bf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bf4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8005c02:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB888;
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 8005c0e:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8005c26:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005c32:	480e      	ldr	r0, [pc, #56]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c34:	f7fa fffe 	bl	8000c34 <HAL_DMA2D_Init>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8005c3e:	f000 fa05 	bl	800604c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8005c42:	2100      	movs	r1, #0
 8005c44:	4809      	ldr	r0, [pc, #36]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c46:	f7fb fa61 	bl	800110c <HAL_DMA2D_ConfigLayer>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8005c50:	f000 f9fc 	bl	800604c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005c54:	2101      	movs	r1, #1
 8005c56:	4805      	ldr	r0, [pc, #20]	; (8005c6c <MX_DMA2D_Init+0x88>)
 8005c58:	f7fb fa58 	bl	800110c <HAL_DMA2D_ConfigLayer>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8005c62:	f000 f9f3 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20003fc4 	.word	0x20003fc4
 8005c70:	4002b000 	.word	0x4002b000

08005c74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005c78:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005c7a:	4a1c      	ldr	r2, [pc, #112]	; (8005cec <MX_I2C3_Init+0x78>)
 8005c7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <MX_I2C3_Init+0x7c>)
 8005c82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c84:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005c8c:	2282      	movs	r2, #130	; 0x82
 8005c8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c90:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c96:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ca4:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005caa:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005cb0:	480d      	ldr	r0, [pc, #52]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005cb2:	f7fb fd3f 	bl	8001734 <HAL_I2C_Init>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005cbc:	f000 f9c6 	bl	800604c <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4809      	ldr	r0, [pc, #36]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005cc4:	f7fc fc4b 	bl	800255e <HAL_I2CEx_ConfigAnalogFilter>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8005cce:	f000 f9bd 	bl	800604c <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <MX_I2C3_Init+0x74>)
 8005cd6:	f7fc fc7e 	bl	80025d6 <HAL_I2CEx_ConfigDigitalFilter>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8005ce0:	f000 f9b4 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20003e70 	.word	0x20003e70
 8005cec:	40005c00 	.word	0x40005c00
 8005cf0:	000186a0 	.word	0x000186a0

08005cf4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08e      	sub	sp, #56	; 0x38
 8005cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	2234      	movs	r2, #52	; 0x34
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ff82 	bl	8006c0a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8005d06:	4b39      	ldr	r3, [pc, #228]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d08:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <MX_LTDC_Init+0xfc>)
 8005d0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005d0c:	4b37      	ldr	r3, [pc, #220]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005d12:	4b36      	ldr	r3, [pc, #216]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005d18:	4b34      	ldr	r3, [pc, #208]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005d1e:	4b33      	ldr	r3, [pc, #204]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 8005d24:	4b31      	ldr	r3, [pc, #196]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d26:	2208      	movs	r2, #8
 8005d28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8005d2a:	4b30      	ldr	r3, [pc, #192]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8005d30:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d32:	221d      	movs	r2, #29
 8005d34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8005d36:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d38:	2203      	movs	r2, #3
 8005d3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d3e:	f240 120d 	movw	r2, #269	; 0x10d
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8005d44:	4b29      	ldr	r3, [pc, #164]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d46:	f240 1243 	movw	r2, #323	; 0x143
 8005d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8005d4c:	4b27      	ldr	r3, [pc, #156]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d4e:	f240 1217 	movw	r2, #279	; 0x117
 8005d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d56:	f240 1247 	movw	r2, #327	; 0x147
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8005d64:	4b21      	ldr	r3, [pc, #132]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005d6c:	4b1f      	ldr	r3, [pc, #124]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8005d74:	481d      	ldr	r0, [pc, #116]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005d76:	f7fc fc6d 	bl	8002654 <HAL_LTDC_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8005d80:	f000 f964 	bl	800604c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8005d88:	23f0      	movs	r3, #240	; 0xf0
 8005d8a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8005d90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005d94:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8005d96:	2301      	movs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8005d9a:	23ff      	movs	r3, #255	; 0xff
 8005d9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005da8:	2305      	movs	r3, #5
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8005db0:	23f0      	movs	r3, #240	; 0xf0
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8005db4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005db8:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4806      	ldr	r0, [pc, #24]	; (8005dec <MX_LTDC_Init+0xf8>)
 8005dd4:	f7fc fd12 	bl	80027fc <HAL_LTDC_ConfigLayer>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8005dde:	f000 f935 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8005de2:	bf00      	nop
 8005de4:	3738      	adds	r7, #56	; 0x38
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20003f1c 	.word	0x20003f1c
 8005df0:	40016800 	.word	0x40016800

08005df4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8005df8:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <MX_SPI5_Init+0x68>)
 8005dfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e0c:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e28:	2218      	movs	r2, #24
 8005e2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e40:	220a      	movs	r2, #10
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005e44:	4804      	ldr	r0, [pc, #16]	; (8005e58 <MX_SPI5_Init+0x64>)
 8005e46:	f7fd fe9c 	bl	8003b82 <HAL_SPI_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005e50:	f000 f8fc 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20003ec4 	.word	0x20003ec4
 8005e5c:	40015000 	.word	0x40015000

08005e60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005e66:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <MX_FMC_Init+0x8c>)
 8005e6a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8005e6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8005e78:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e80:	2210      	movs	r2, #16
 8005e82:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005e84:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e8c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005e90:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8005e98:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e9e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005ea6:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8005eba:	2307      	movs	r3, #7
 8005ebc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4806      	ldr	r0, [pc, #24]	; (8005ee8 <MX_FMC_Init+0x88>)
 8005ed0:	f7fd fc9e 	bl	8003810 <HAL_SDRAM_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8005eda:	f000 f8b7 	bl	800604c <Error_Handler>
  }

}
 8005ede:	bf00      	nop
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20004004 	.word	0x20004004
 8005eec:	a0000140 	.word	0xa0000140

08005ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08c      	sub	sp, #48	; 0x30
 8005ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef6:	f107 031c 	add.w	r3, r7, #28
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	4a4c      	ldr	r2, [pc, #304]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f0c:	4b4b      	ldr	r3, [pc, #300]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	f043 0320 	orr.w	r3, r3, #32
 8005f14:	6313      	str	r3, [r2, #48]	; 0x30
 8005f16:	4b49      	ldr	r3, [pc, #292]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	4a45      	ldr	r2, [pc, #276]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f28:	4b44      	ldr	r3, [pc, #272]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	f043 0304 	orr.w	r3, r3, #4
 8005f30:	6313      	str	r3, [r2, #48]	; 0x30
 8005f32:	4b42      	ldr	r3, [pc, #264]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	4a3e      	ldr	r2, [pc, #248]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f44:	4b3d      	ldr	r3, [pc, #244]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	4a37      	ldr	r2, [pc, #220]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f60:	4b36      	ldr	r3, [pc, #216]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6a:	4b34      	ldr	r3, [pc, #208]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	4a30      	ldr	r2, [pc, #192]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f7c:	4b2f      	ldr	r3, [pc, #188]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f84:	6313      	str	r3, [r2, #48]	; 0x30
 8005f86:	4b2d      	ldr	r3, [pc, #180]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	4a29      	ldr	r2, [pc, #164]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f98:	4b28      	ldr	r3, [pc, #160]	; (800603c <MX_GPIO_Init+0x14c>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	f043 0310 	orr.w	r3, r3, #16
 8005fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <MX_GPIO_Init+0x14c>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	607b      	str	r3, [r7, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <MX_GPIO_Init+0x14c>)
 8005fb4:	4b21      	ldr	r3, [pc, #132]	; (800603c <MX_GPIO_Init+0x14c>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f043 0308 	orr.w	r3, r3, #8
 8005fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <MX_GPIO_Init+0x14c>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8005fca:	2201      	movs	r2, #1
 8005fcc:	2104      	movs	r1, #4
 8005fce:	481c      	ldr	r0, [pc, #112]	; (8006040 <MX_GPIO_Init+0x150>)
 8005fd0:	f7fb fb96 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fda:	481a      	ldr	r0, [pc, #104]	; (8006044 <MX_GPIO_Init+0x154>)
 8005fdc:	f7fb fb90 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fec:	2302      	movs	r3, #2
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8005ff0:	f107 031c 	add.w	r3, r7, #28
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4812      	ldr	r0, [pc, #72]	; (8006040 <MX_GPIO_Init+0x150>)
 8005ff8:	f7fb f9c0 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 8005ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006002:	2301      	movs	r3, #1
 8006004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800600a:	2302      	movs	r3, #2
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 800600e:	f107 031c 	add.w	r3, r7, #28
 8006012:	4619      	mov	r1, r3
 8006014:	480b      	ldr	r0, [pc, #44]	; (8006044 <MX_GPIO_Init+0x154>)
 8006016:	f7fb f9b1 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 800601a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006020:	2300      	movs	r3, #0
 8006022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006024:	2300      	movs	r3, #0
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8006028:	f107 031c 	add.w	r3, r7, #28
 800602c:	4619      	mov	r1, r3
 800602e:	4806      	ldr	r0, [pc, #24]	; (8006048 <MX_GPIO_Init+0x158>)
 8006030:	f7fb f9a4 	bl	800137c <HAL_GPIO_Init>

}
 8006034:	bf00      	nop
 8006036:	3730      	adds	r7, #48	; 0x30
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	40020800 	.word	0x40020800
 8006044:	40020c00 	.word	0x40020c00
 8006048:	40020000 	.word	0x40020000

0800604c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006050:	bf00      	nop
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
	...

0800605c <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006068:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <SDRAM_init+0xcc>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <SDRAM_init+0xcc>)
 8006070:	2208      	movs	r2, #8
 8006072:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006074:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <SDRAM_init+0xcc>)
 8006076:	2201      	movs	r2, #1
 8006078:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800607a:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <SDRAM_init+0xcc>)
 800607c:	2200      	movs	r2, #0
 800607e:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006084:	4928      	ldr	r1, [pc, #160]	; (8006128 <SDRAM_init+0xcc>)
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fd fd30 	bl	8003aec <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 800608c:	200a      	movs	r0, #10
 800608e:	f7fa faf9 	bl	8000684 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8006092:	4b25      	ldr	r3, [pc, #148]	; (8006128 <SDRAM_init+0xcc>)
 8006094:	2202      	movs	r2, #2
 8006096:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006098:	4b23      	ldr	r3, [pc, #140]	; (8006128 <SDRAM_init+0xcc>)
 800609a:	2208      	movs	r2, #8
 800609c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800609e:	4b22      	ldr	r3, [pc, #136]	; (8006128 <SDRAM_init+0xcc>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80060a4:	4b20      	ldr	r3, [pc, #128]	; (8006128 <SDRAM_init+0xcc>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80060aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ae:	491e      	ldr	r1, [pc, #120]	; (8006128 <SDRAM_init+0xcc>)
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fd fd1b 	bl	8003aec <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80060b6:	200a      	movs	r0, #10
 80060b8:	f7fa fae4 	bl	8000684 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <SDRAM_init+0xcc>)
 80060be:	2203      	movs	r2, #3
 80060c0:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <SDRAM_init+0xcc>)
 80060c4:	2208      	movs	r2, #8
 80060c6:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <SDRAM_init+0xcc>)
 80060ca:	2204      	movs	r2, #4
 80060cc:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <SDRAM_init+0xcc>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80060d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060d8:	4913      	ldr	r1, [pc, #76]	; (8006128 <SDRAM_init+0xcc>)
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fd fd06 	bl	8003aec <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80060e0:	200a      	movs	r0, #10
 80060e2:	f7fa facf 	bl	8000684 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 80060e6:	f240 2331 	movw	r3, #561	; 0x231
 80060ea:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <SDRAM_init+0xcc>)
 80060ee:	2204      	movs	r2, #4
 80060f0:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <SDRAM_init+0xcc>)
 80060f4:	2208      	movs	r2, #8
 80060f6:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <SDRAM_init+0xcc>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a09      	ldr	r2, [pc, #36]	; (8006128 <SDRAM_init+0xcc>)
 8006102:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006108:	4907      	ldr	r1, [pc, #28]	; (8006128 <SDRAM_init+0xcc>)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fd fcee 	bl	8003aec <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006110:	200a      	movs	r0, #10
 8006112:	f7fa fab7 	bl	8000684 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8006116:	f240 516a 	movw	r1, #1386	; 0x56a
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fd fd11 	bl	8003b42 <HAL_SDRAM_ProgramRefreshRate>
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20004038 	.word	0x20004038

0800612c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	4a12      	ldr	r2, [pc, #72]	; (8006180 <HAL_MspInit+0x54>)
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <HAL_MspInit+0x54>)
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006140:	6453      	str	r3, [r2, #68]	; 0x44
 8006142:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <HAL_MspInit+0x54>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614a:	607b      	str	r3, [r7, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <HAL_MspInit+0x54>)
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_MspInit+0x54>)
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615c:	6413      	str	r3, [r2, #64]	; 0x40
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <HAL_MspInit+0x54>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800616a:	2200      	movs	r2, #0
 800616c:	210f      	movs	r1, #15
 800616e:	f06f 0001 	mvn.w	r0, #1
 8006172:	f7fa fb7e 	bl	8000872 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800

08006184 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0e      	ldr	r2, [pc, #56]	; (80061cc <HAL_DMA2D_MspInit+0x48>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d115      	bne.n	80061c2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	4a0d      	ldr	r2, [pc, #52]	; (80061d0 <HAL_DMA2D_MspInit+0x4c>)
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <HAL_DMA2D_MspInit+0x4c>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061a4:	6313      	str	r3, [r2, #48]	; 0x30
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_DMA2D_MspInit+0x4c>)
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80061b2:	2200      	movs	r2, #0
 80061b4:	2105      	movs	r1, #5
 80061b6:	205a      	movs	r0, #90	; 0x5a
 80061b8:	f7fa fb5b 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80061bc:	205a      	movs	r0, #90	; 0x5a
 80061be:	f7fa fb74 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	4002b000 	.word	0x4002b000
 80061d0:	40023800 	.word	0x40023800

080061d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	; 0x28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	609a      	str	r2, [r3, #8]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a29      	ldr	r2, [pc, #164]	; (8006298 <HAL_I2C_MspInit+0xc4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d14b      	bne.n	800628e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	4a28      	ldr	r2, [pc, #160]	; (800629c <HAL_I2C_MspInit+0xc8>)
 80061fc:	4b27      	ldr	r3, [pc, #156]	; (800629c <HAL_I2C_MspInit+0xc8>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b25      	ldr	r3, [pc, #148]	; (800629c <HAL_I2C_MspInit+0xc8>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_I2C_MspInit+0xc8>)
 8006218:	4b20      	ldr	r3, [pc, #128]	; (800629c <HAL_I2C_MspInit+0xc8>)
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6313      	str	r3, [r2, #48]	; 0x30
 8006222:	4b1e      	ldr	r3, [pc, #120]	; (800629c <HAL_I2C_MspInit+0xc8>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800622e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006234:	2312      	movs	r3, #18
 8006236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006238:	2301      	movs	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800623c:	2303      	movs	r3, #3
 800623e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006240:	2304      	movs	r3, #4
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4619      	mov	r1, r3
 800624a:	4815      	ldr	r0, [pc, #84]	; (80062a0 <HAL_I2C_MspInit+0xcc>)
 800624c:	f7fb f896 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006256:	2312      	movs	r3, #18
 8006258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800625a:	2301      	movs	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800625e:	2303      	movs	r3, #3
 8006260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006262:	2304      	movs	r3, #4
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006266:	f107 0314 	add.w	r3, r7, #20
 800626a:	4619      	mov	r1, r3
 800626c:	480d      	ldr	r0, [pc, #52]	; (80062a4 <HAL_I2C_MspInit+0xd0>)
 800626e:	f7fb f885 	bl	800137c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	4a09      	ldr	r2, [pc, #36]	; (800629c <HAL_I2C_MspInit+0xc8>)
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <HAL_I2C_MspInit+0xc8>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006280:	6413      	str	r3, [r2, #64]	; 0x40
 8006282:	4b06      	ldr	r3, [pc, #24]	; (800629c <HAL_I2C_MspInit+0xc8>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800628e:	bf00      	nop
 8006290:	3728      	adds	r7, #40	; 0x28
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40005c00 	.word	0x40005c00
 800629c:	40023800 	.word	0x40023800
 80062a0:	40020800 	.word	0x40020800
 80062a4:	40020000 	.word	0x40020000

080062a8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	; 0x38
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	609a      	str	r2, [r3, #8]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a77      	ldr	r2, [pc, #476]	; (80064a4 <HAL_LTDC_MspInit+0x1fc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	f040 80e8 	bne.w	800649c <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80062cc:	2300      	movs	r3, #0
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	4a75      	ldr	r2, [pc, #468]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 80062d2:	4b75      	ldr	r3, [pc, #468]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062da:	6453      	str	r3, [r2, #68]	; 0x44
 80062dc:	4b72      	ldr	r3, [pc, #456]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80062e8:	2300      	movs	r3, #0
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	4a6e      	ldr	r2, [pc, #440]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 80062ee:	4b6e      	ldr	r3, [pc, #440]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	f043 0320 	orr.w	r3, r3, #32
 80062f6:	6313      	str	r3, [r2, #48]	; 0x30
 80062f8:	4b6b      	ldr	r3, [pc, #428]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006304:	2300      	movs	r3, #0
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	4a67      	ldr	r2, [pc, #412]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800630a:	4b67      	ldr	r3, [pc, #412]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	6313      	str	r3, [r2, #48]	; 0x30
 8006314:	4b64      	ldr	r3, [pc, #400]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	4a60      	ldr	r2, [pc, #384]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006326:	4b60      	ldr	r3, [pc, #384]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	f043 0302 	orr.w	r3, r3, #2
 800632e:	6313      	str	r3, [r2, #48]	; 0x30
 8006330:	4b5d      	ldr	r3, [pc, #372]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	4a59      	ldr	r2, [pc, #356]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006342:	4b59      	ldr	r3, [pc, #356]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634a:	6313      	str	r3, [r2, #48]	; 0x30
 800634c:	4b56      	ldr	r3, [pc, #344]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800635e:	4b52      	ldr	r3, [pc, #328]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f043 0304 	orr.w	r3, r3, #4
 8006366:	6313      	str	r3, [r2, #48]	; 0x30
 8006368:	4b4f      	ldr	r3, [pc, #316]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	4a4b      	ldr	r2, [pc, #300]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800637a:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f043 0308 	orr.w	r3, r3, #8
 8006382:	6313      	str	r3, [r2, #48]	; 0x30
 8006384:	4b48      	ldr	r3, [pc, #288]	; (80064a8 <HAL_LTDC_MspInit+0x200>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006396:	2302      	movs	r3, #2
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639a:	2300      	movs	r3, #0
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800639e:	2302      	movs	r3, #2
 80063a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80063a2:	230e      	movs	r3, #14
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80063a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063aa:	4619      	mov	r1, r3
 80063ac:	483f      	ldr	r0, [pc, #252]	; (80064ac <HAL_LTDC_MspInit+0x204>)
 80063ae:	f7fa ffe5 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80063b2:	f641 0358 	movw	r3, #6232	; 0x1858
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b8:	2302      	movs	r3, #2
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063bc:	2300      	movs	r3, #0
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063c0:	2302      	movs	r3, #2
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80063c4:	230e      	movs	r3, #14
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063cc:	4619      	mov	r1, r3
 80063ce:	4838      	ldr	r0, [pc, #224]	; (80064b0 <HAL_LTDC_MspInit+0x208>)
 80063d0:	f7fa ffd4 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063d4:	2303      	movs	r3, #3
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d8:	2302      	movs	r3, #2
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063e0:	2302      	movs	r3, #2
 80063e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80063e4:	2309      	movs	r3, #9
 80063e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ec:	4619      	mov	r1, r3
 80063ee:	4831      	ldr	r0, [pc, #196]	; (80064b4 <HAL_LTDC_MspInit+0x20c>)
 80063f0:	f7fa ffc4 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80063f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fa:	2302      	movs	r3, #2
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006402:	2302      	movs	r3, #2
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006406:	230e      	movs	r3, #14
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	4619      	mov	r1, r3
 8006410:	4828      	ldr	r0, [pc, #160]	; (80064b4 <HAL_LTDC_MspInit+0x20c>)
 8006412:	f7fa ffb3 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8006416:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641c:	2302      	movs	r3, #2
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006420:	2300      	movs	r3, #0
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006424:	2302      	movs	r3, #2
 8006426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006428:	230e      	movs	r3, #14
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800642c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006430:	4619      	mov	r1, r3
 8006432:	4821      	ldr	r0, [pc, #132]	; (80064b8 <HAL_LTDC_MspInit+0x210>)
 8006434:	f7fa ffa2 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8006438:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643e:	2302      	movs	r3, #2
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006442:	2300      	movs	r3, #0
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006446:	2302      	movs	r3, #2
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800644a:	230e      	movs	r3, #14
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800644e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006452:	4619      	mov	r1, r3
 8006454:	4819      	ldr	r0, [pc, #100]	; (80064bc <HAL_LTDC_MspInit+0x214>)
 8006456:	f7fa ff91 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800645a:	2348      	movs	r3, #72	; 0x48
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645e:	2302      	movs	r3, #2
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006462:	2300      	movs	r3, #0
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006466:	2302      	movs	r3, #2
 8006468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800646a:	230e      	movs	r3, #14
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800646e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006472:	4619      	mov	r1, r3
 8006474:	4812      	ldr	r0, [pc, #72]	; (80064c0 <HAL_LTDC_MspInit+0x218>)
 8006476:	f7fa ff81 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800647a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006480:	2302      	movs	r3, #2
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006488:	2302      	movs	r3, #2
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800648c:	2309      	movs	r3, #9
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	4619      	mov	r1, r3
 8006496:	4808      	ldr	r0, [pc, #32]	; (80064b8 <HAL_LTDC_MspInit+0x210>)
 8006498:	f7fa ff70 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800649c:	bf00      	nop
 800649e:	3738      	adds	r7, #56	; 0x38
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40016800 	.word	0x40016800
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40021400 	.word	0x40021400
 80064b0:	40020000 	.word	0x40020000
 80064b4:	40020400 	.word	0x40020400
 80064b8:	40021800 	.word	0x40021800
 80064bc:	40020800 	.word	0x40020800
 80064c0:	40020c00 	.word	0x40020c00

080064c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	609a      	str	r2, [r3, #8]
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a19      	ldr	r2, [pc, #100]	; (8006548 <HAL_SPI_MspInit+0x84>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d12c      	bne.n	8006540 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_SPI_MspInit+0x88>)
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <HAL_SPI_MspInit+0x88>)
 80064ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f4:	6453      	str	r3, [r2, #68]	; 0x44
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <HAL_SPI_MspInit+0x88>)
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	4a11      	ldr	r2, [pc, #68]	; (800654c <HAL_SPI_MspInit+0x88>)
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <HAL_SPI_MspInit+0x88>)
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	f043 0320 	orr.w	r3, r3, #32
 8006510:	6313      	str	r3, [r2, #48]	; 0x30
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <HAL_SPI_MspInit+0x88>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800651e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	2302      	movs	r3, #2
 8006526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652c:	2303      	movs	r3, #3
 800652e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006530:	2305      	movs	r3, #5
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	4619      	mov	r1, r3
 800653a:	4805      	ldr	r0, [pc, #20]	; (8006550 <HAL_SPI_MspInit+0x8c>)
 800653c:	f7fa ff1e 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006540:	bf00      	nop
 8006542:	3728      	adds	r7, #40	; 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40015000 	.word	0x40015000
 800654c:	40023800 	.word	0x40023800
 8006550:	40021400 	.word	0x40021400

08006554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006562:	b480      	push	{r7}
 8006564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006566:	e7fe      	b.n	8006566 <HardFault_Handler+0x4>

08006568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800656c:	e7fe      	b.n	800656c <MemManage_Handler+0x4>

0800656e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800656e:	b480      	push	{r7}
 8006570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006572:	e7fe      	b.n	8006572 <BusFault_Handler+0x4>

08006574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006578:	e7fe      	b.n	8006578 <UsageFault_Handler+0x4>

0800657a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800657a:	b480      	push	{r7}
 800657c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800657e:	bf00      	nop
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800658c:	f7fa f85a 	bl	8000644 <HAL_IncTick>
  osSystickHandler();
 8006590:	f7fd fea3 	bl	80042da <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006594:	bf00      	nop
 8006596:	bd80      	pop	{r7, pc}

08006598 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800659c:	4802      	ldr	r0, [pc, #8]	; (80065a8 <DMA2D_IRQHandler+0x10>)
 800659e:	f7fa fca5 	bl	8000eec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20003fc4 	.word	0x20003fc4

080065ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065b0:	4a16      	ldr	r2, [pc, #88]	; (800660c <SystemInit+0x60>)
 80065b2:	4b16      	ldr	r3, [pc, #88]	; (800660c <SystemInit+0x60>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80065c0:	4a13      	ldr	r2, [pc, #76]	; (8006610 <SystemInit+0x64>)
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <SystemInit+0x64>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065cc:	4b10      	ldr	r3, [pc, #64]	; (8006610 <SystemInit+0x64>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80065d2:	4a0f      	ldr	r2, [pc, #60]	; (8006610 <SystemInit+0x64>)
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <SystemInit+0x64>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80065dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <SystemInit+0x64>)
 80065e4:	4a0b      	ldr	r2, [pc, #44]	; (8006614 <SystemInit+0x68>)
 80065e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <SystemInit+0x64>)
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <SystemInit+0x64>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <SystemInit+0x64>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065fa:	4b04      	ldr	r3, [pc, #16]	; (800660c <SystemInit+0x60>)
 80065fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006600:	609a      	str	r2, [r3, #8]
#endif
}
 8006602:	bf00      	nop
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	e000ed00 	.word	0xe000ed00
 8006610:	40023800 	.word	0x40023800
 8006614:	24003010 	.word	0x24003010

08006618 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 800661e:	2300      	movs	r3, #0
 8006620:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8006622:	2303      	movs	r3, #3
 8006624:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8006626:	2302      	movs	r3, #2
 8006628:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800662a:	1d3a      	adds	r2, r7, #4
 800662c:	2364      	movs	r3, #100	; 0x64
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2302      	movs	r3, #2
 8006632:	2182      	movs	r1, #130	; 0x82
 8006634:	480b      	ldr	r0, [pc, #44]	; (8006664 <touchReset+0x4c>)
 8006636:	f7fb f95d 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800663a:	2014      	movs	r0, #20
 800663c:	f7fa f822 	bl	8000684 <HAL_Delay>
	sendBuf[1] = 0x00;
 8006640:	2300      	movs	r3, #0
 8006642:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006644:	1d3a      	adds	r2, r7, #4
 8006646:	2364      	movs	r3, #100	; 0x64
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	2302      	movs	r3, #2
 800664c:	2182      	movs	r1, #130	; 0x82
 800664e:	4805      	ldr	r0, [pc, #20]	; (8006664 <touchReset+0x4c>)
 8006650:	f7fb f950 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8006654:	2014      	movs	r0, #20
 8006656:	f7fa f815 	bl	8000684 <HAL_Delay>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20003e70 	.word	0x20003e70

08006668 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af02      	add	r7, sp, #8
 800666e:	4603      	mov	r3, r0
 8006670:	460a      	mov	r2, r1
 8006672:	71fb      	strb	r3, [r7, #7]
 8006674:	4613      	mov	r3, r2
 8006676:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 800667c:	2300      	movs	r3, #0
 800667e:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8006680:	2304      	movs	r3, #4
 8006682:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8006684:	f107 020c 	add.w	r2, r7, #12
 8006688:	2364      	movs	r3, #100	; 0x64
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2301      	movs	r3, #1
 800668e:	2182      	movs	r1, #130	; 0x82
 8006690:	4817      	ldr	r0, [pc, #92]	; (80066f0 <fnctCmd+0x88>)
 8006692:	f7fb f92f 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8006696:	f107 020c 	add.w	r2, r7, #12
 800669a:	2364      	movs	r3, #100	; 0x64
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	2301      	movs	r3, #1
 80066a0:	2182      	movs	r1, #130	; 0x82
 80066a2:	4813      	ldr	r0, [pc, #76]	; (80066f0 <fnctCmd+0x88>)
 80066a4:	f7fb fa34 	bl	8001b10 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 80066a8:	7b3b      	ldrb	r3, [r7, #12]
 80066aa:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 80066ac:	79bb      	ldrb	r3, [r7, #6]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	b25a      	sxtb	r2, r3
 80066ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066be:	4013      	ands	r3, r2
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	73fb      	strb	r3, [r7, #15]
 80066c4:	e003      	b.n	80066ce <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 80066c6:	7bfa      	ldrb	r2, [r7, #15]
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 80066ce:	2304      	movs	r3, #4
 80066d0:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80066d6:	f107 020c 	add.w	r2, r7, #12
 80066da:	2364      	movs	r3, #100	; 0x64
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	2302      	movs	r3, #2
 80066e0:	2182      	movs	r1, #130	; 0x82
 80066e2:	4803      	ldr	r0, [pc, #12]	; (80066f0 <fnctCmd+0x88>)
 80066e4:	f7fb f906 	bl	80018f4 <HAL_I2C_Master_Transmit>
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20003e70 	.word	0x20003e70

080066f4 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	4603      	mov	r3, r0
 80066fc:	460a      	mov	r2, r1
 80066fe:	71fb      	strb	r3, [r7, #7]
 8006700:	4613      	mov	r3, r2
 8006702:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8006708:	2300      	movs	r3, #0
 800670a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 800670c:	2317      	movs	r3, #23
 800670e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8006710:	f107 020c 	add.w	r2, r7, #12
 8006714:	2364      	movs	r3, #100	; 0x64
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2301      	movs	r3, #1
 800671a:	2182      	movs	r1, #130	; 0x82
 800671c:	4817      	ldr	r0, [pc, #92]	; (800677c <ioAFConfig+0x88>)
 800671e:	f7fb f8e9 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8006722:	f107 020c 	add.w	r2, r7, #12
 8006726:	2364      	movs	r3, #100	; 0x64
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	2301      	movs	r3, #1
 800672c:	2182      	movs	r1, #130	; 0x82
 800672e:	4813      	ldr	r0, [pc, #76]	; (800677c <ioAFConfig+0x88>)
 8006730:	f7fb f9ee 	bl	8001b10 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8006734:	7b3b      	ldrb	r3, [r7, #12]
 8006736:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8006738:	79bb      	ldrb	r3, [r7, #6]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 800673e:	7bfa      	ldrb	r2, [r7, #15]
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	4313      	orrs	r3, r2
 8006744:	73fb      	strb	r3, [r7, #15]
 8006746:	e008      	b.n	800675a <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8006748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800674c:	43db      	mvns	r3, r3
 800674e:	b25a      	sxtb	r2, r3
 8006750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006754:	4013      	ands	r3, r2
 8006756:	b25b      	sxtb	r3, r3
 8006758:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 800675a:	2317      	movs	r3, #23
 800675c:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006762:	f107 020c 	add.w	r2, r7, #12
 8006766:	2364      	movs	r3, #100	; 0x64
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	2302      	movs	r3, #2
 800676c:	2182      	movs	r1, #130	; 0x82
 800676e:	4803      	ldr	r0, [pc, #12]	; (800677c <ioAFConfig+0x88>)
 8006770:	f7fb f8c0 	bl	80018f4 <HAL_I2C_Master_Transmit>
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20003e70 	.word	0x20003e70

08006780 <readX>:

static void readX(uint16_t *x)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af02      	add	r7, sp, #8
 8006786:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 8006788:	234d      	movs	r3, #77	; 0x4d
 800678a:	723b      	strb	r3, [r7, #8]
 800678c:	2300      	movs	r3, #0
 800678e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8006790:	f107 0208 	add.w	r2, r7, #8
 8006794:	2364      	movs	r3, #100	; 0x64
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2301      	movs	r3, #1
 800679a:	2182      	movs	r1, #130	; 0x82
 800679c:	481f      	ldr	r0, [pc, #124]	; (800681c <readX+0x9c>)
 800679e:	f7fb f8a9 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80067a2:	f107 0208 	add.w	r2, r7, #8
 80067a6:	2364      	movs	r3, #100	; 0x64
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2302      	movs	r3, #2
 80067ac:	2182      	movs	r1, #130	; 0x82
 80067ae:	481b      	ldr	r0, [pc, #108]	; (800681c <readX+0x9c>)
 80067b0:	f7fb f9ae 	bl	8001b10 <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 80067b4:	7a3b      	ldrb	r3, [r7, #8]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	7a7a      	ldrb	r2, [r7, #9]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80067c4:	4293      	cmp	r3, r2
 80067c6:	dc05      	bgt.n	80067d4 <readX+0x54>
	{
		_x = 3870 - _x;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80067ce:	330e      	adds	r3, #14
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e004      	b.n	80067de <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80067da:	3308      	adds	r3, #8
 80067dc:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4a0f      	ldr	r2, [pc, #60]	; (8006820 <readX+0xa0>)
 80067e2:	fb82 1203 	smull	r1, r2, r2, r3
 80067e6:	441a      	add	r2, r3
 80067e8:	10d2      	asrs	r2, r2, #3
 80067ea:	17db      	asrs	r3, r3, #31
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <readX+0x84>
	{
		*x = 0;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 8006802:	e006      	b.n	8006812 <readX+0x92>
	else if (*x > 240)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	2bf0      	cmp	r3, #240	; 0xf0
 800680a:	d902      	bls.n	8006812 <readX+0x92>
		*x = 239;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	22ef      	movs	r2, #239	; 0xef
 8006810:	801a      	strh	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20003e70 	.word	0x20003e70
 8006820:	88888889 	.word	0x88888889

08006824 <readY>:

static void readY(uint16_t *y)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 800682c:	234f      	movs	r3, #79	; 0x4f
 800682e:	723b      	strb	r3, [r7, #8]
 8006830:	2300      	movs	r3, #0
 8006832:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8006834:	f107 0208 	add.w	r2, r7, #8
 8006838:	2364      	movs	r3, #100	; 0x64
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2301      	movs	r3, #1
 800683e:	2182      	movs	r1, #130	; 0x82
 8006840:	4819      	ldr	r0, [pc, #100]	; (80068a8 <readY+0x84>)
 8006842:	f7fb f857 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8006846:	f107 0208 	add.w	r2, r7, #8
 800684a:	2364      	movs	r3, #100	; 0x64
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	2302      	movs	r3, #2
 8006850:	2182      	movs	r1, #130	; 0x82
 8006852:	4815      	ldr	r0, [pc, #84]	; (80068a8 <readY+0x84>)
 8006854:	f7fb f95c 	bl	8001b10 <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 8006858:	7a3b      	ldrb	r3, [r7, #8]
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	7a7a      	ldrb	r2, [r7, #9]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006868:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4a0f      	ldr	r2, [pc, #60]	; (80068ac <readY+0x88>)
 800686e:	fb82 1203 	smull	r1, r2, r2, r3
 8006872:	1052      	asrs	r2, r2, #1
 8006874:	17db      	asrs	r3, r3, #31
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <readY+0x6a>
	{
		*y = 0;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 800688c:	e008      	b.n	80068a0 <readY+0x7c>
	else if (*y > 320)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006896:	d903      	bls.n	80068a0 <readY+0x7c>
		*y = 319;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f240 123f 	movw	r2, #319	; 0x13f
 800689e:	801a      	strh	r2, [r3, #0]
}
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20003e70 	.word	0x20003e70
 80068ac:	2e8ba2e9 	.word	0x2e8ba2e9

080068b0 <readZ>:

static void readZ(uint16_t *z)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 80068b8:	2351      	movs	r3, #81	; 0x51
 80068ba:	733b      	strb	r3, [r7, #12]
 80068bc:	2300      	movs	r3, #0
 80068be:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80068c0:	f107 020c 	add.w	r2, r7, #12
 80068c4:	2364      	movs	r3, #100	; 0x64
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2301      	movs	r3, #1
 80068ca:	2182      	movs	r1, #130	; 0x82
 80068cc:	4810      	ldr	r0, [pc, #64]	; (8006910 <readZ+0x60>)
 80068ce:	f7fb f811 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80068d2:	f107 020c 	add.w	r2, r7, #12
 80068d6:	2364      	movs	r3, #100	; 0x64
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	2302      	movs	r3, #2
 80068dc:	2182      	movs	r1, #130	; 0x82
 80068de:	480c      	ldr	r0, [pc, #48]	; (8006910 <readZ+0x60>)
 80068e0:	f7fb f916 	bl	8001b10 <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 80068e4:	7b3b      	ldrb	r3, [r7, #12]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	b21a      	sxth	r2, r3
 80068ea:	7b7b      	ldrb	r3, [r7, #13]
 80068ec:	b21b      	sxth	r3, r3
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <readZ+0x56>
	{
		*z = 0;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	801a      	strh	r2, [r3, #0]
	}
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20003e70 	.word	0x20003e70

08006914 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af02      	add	r7, sp, #8
	touchReset();
 800691a:	f7ff fe7d 	bl	8006618 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 800691e:	2101      	movs	r1, #1
 8006920:	2001      	movs	r0, #1
 8006922:	f7ff fea1 	bl	8006668 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8006926:	2101      	movs	r1, #1
 8006928:	2002      	movs	r0, #2
 800692a:	f7ff fe9d 	bl	8006668 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 800692e:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <TP_Config+0x120>)
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006934:	1d3a      	adds	r2, r7, #4
 8006936:	2364      	movs	r3, #100	; 0x64
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2302      	movs	r3, #2
 800693c:	2182      	movs	r1, #130	; 0x82
 800693e:	483e      	ldr	r0, [pc, #248]	; (8006a38 <TP_Config+0x124>)
 8006940:	f7fa ffd8 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8006944:	2014      	movs	r0, #20
 8006946:	f7f9 fe9d 	bl	8000684 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 800694a:	2321      	movs	r3, #33	; 0x21
 800694c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800694e:	2301      	movs	r3, #1
 8006950:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006952:	1d3a      	adds	r2, r7, #4
 8006954:	2364      	movs	r3, #100	; 0x64
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2302      	movs	r3, #2
 800695a:	2182      	movs	r1, #130	; 0x82
 800695c:	4836      	ldr	r0, [pc, #216]	; (8006a38 <TP_Config+0x124>)
 800695e:	f7fa ffc9 	bl	80018f4 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8006962:	2100      	movs	r1, #0
 8006964:	201e      	movs	r0, #30
 8006966:	f7ff fec5 	bl	80066f4 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 800696a:	2341      	movs	r3, #65	; 0x41
 800696c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 800696e:	239a      	movs	r3, #154	; 0x9a
 8006970:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006972:	1d3a      	adds	r2, r7, #4
 8006974:	2364      	movs	r3, #100	; 0x64
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	2302      	movs	r3, #2
 800697a:	2182      	movs	r1, #130	; 0x82
 800697c:	482e      	ldr	r0, [pc, #184]	; (8006a38 <TP_Config+0x124>)
 800697e:	f7fa ffb9 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 8006982:	234a      	movs	r3, #74	; 0x4a
 8006984:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8006986:	2301      	movs	r3, #1
 8006988:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800698a:	1d3a      	adds	r2, r7, #4
 800698c:	2364      	movs	r3, #100	; 0x64
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	2302      	movs	r3, #2
 8006992:	2182      	movs	r1, #130	; 0x82
 8006994:	4828      	ldr	r0, [pc, #160]	; (8006a38 <TP_Config+0x124>)
 8006996:	f7fa ffad 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 800699a:	234b      	movs	r3, #75	; 0x4b
 800699c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800699e:	2301      	movs	r3, #1
 80069a0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80069a2:	1d3a      	adds	r2, r7, #4
 80069a4:	2364      	movs	r3, #100	; 0x64
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2302      	movs	r3, #2
 80069aa:	2182      	movs	r1, #130	; 0x82
 80069ac:	4822      	ldr	r0, [pc, #136]	; (8006a38 <TP_Config+0x124>)
 80069ae:	f7fa ffa1 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 80069b2:	234b      	movs	r3, #75	; 0x4b
 80069b4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 80069b6:	2300      	movs	r3, #0
 80069b8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80069ba:	1d3a      	adds	r2, r7, #4
 80069bc:	2364      	movs	r3, #100	; 0x64
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2302      	movs	r3, #2
 80069c2:	2182      	movs	r1, #130	; 0x82
 80069c4:	481c      	ldr	r0, [pc, #112]	; (8006a38 <TP_Config+0x124>)
 80069c6:	f7fa ff95 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 80069ca:	2356      	movs	r3, #86	; 0x56
 80069cc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80069ce:	2301      	movs	r3, #1
 80069d0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80069d2:	1d3a      	adds	r2, r7, #4
 80069d4:	2364      	movs	r3, #100	; 0x64
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	2302      	movs	r3, #2
 80069da:	2182      	movs	r1, #130	; 0x82
 80069dc:	4816      	ldr	r0, [pc, #88]	; (8006a38 <TP_Config+0x124>)
 80069de:	f7fa ff89 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 80069e2:	2358      	movs	r3, #88	; 0x58
 80069e4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80069e6:	2301      	movs	r3, #1
 80069e8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80069ea:	1d3a      	adds	r2, r7, #4
 80069ec:	2364      	movs	r3, #100	; 0x64
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2302      	movs	r3, #2
 80069f2:	2182      	movs	r1, #130	; 0x82
 80069f4:	4810      	ldr	r0, [pc, #64]	; (8006a38 <TP_Config+0x124>)
 80069f6:	f7fa ff7d 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 80069fa:	2340      	movs	r3, #64	; 0x40
 80069fc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 80069fe:	2303      	movs	r3, #3
 8006a00:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006a02:	1d3a      	adds	r2, r7, #4
 8006a04:	2364      	movs	r3, #100	; 0x64
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2302      	movs	r3, #2
 8006a0a:	2182      	movs	r1, #130	; 0x82
 8006a0c:	480a      	ldr	r0, [pc, #40]	; (8006a38 <TP_Config+0x124>)
 8006a0e:	f7fa ff71 	bl	80018f4 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8006a12:	230b      	movs	r3, #11
 8006a14:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8006a16:	23ff      	movs	r3, #255	; 0xff
 8006a18:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8006a1a:	1d3a      	adds	r2, r7, #4
 8006a1c:	2364      	movs	r3, #100	; 0x64
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2302      	movs	r3, #2
 8006a22:	2182      	movs	r1, #130	; 0x82
 8006a24:	4804      	ldr	r0, [pc, #16]	; (8006a38 <TP_Config+0x124>)
 8006a26:	f7fa ff65 	bl	80018f4 <HAL_I2C_Master_Transmit>

}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	080074ac 	.word	0x080074ac
 8006a38:	20003e70 	.word	0x20003e70

08006a3c <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	733b      	strb	r3, [r7, #12]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8006a4c:	f107 020c 	add.w	r2, r7, #12
 8006a50:	2364      	movs	r3, #100	; 0x64
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2301      	movs	r3, #1
 8006a56:	2182      	movs	r1, #130	; 0x82
 8006a58:	483b      	ldr	r0, [pc, #236]	; (8006b48 <TP_GetState+0x10c>)
 8006a5a:	f7fa ff4b 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8006a5e:	f107 020c 	add.w	r2, r7, #12
 8006a62:	2364      	movs	r3, #100	; 0x64
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2301      	movs	r3, #1
 8006a68:	2182      	movs	r1, #130	; 0x82
 8006a6a:	4837      	ldr	r0, [pc, #220]	; (8006b48 <TP_GetState+0x10c>)
 8006a6c:	f7fb f850 	bl	8001b10 <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 8006a70:	7b3b      	ldrb	r3, [r7, #12]
 8006a72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d039      	beq.n	8006af8 <TP_GetState+0xbc>
	{
		readX(&x);
 8006a84:	f107 0312 	add.w	r3, r7, #18
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fe79 	bl	8006780 <readX>
		readY(&y);
 8006a8e:	f107 0310 	add.w	r3, r7, #16
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fec6 	bl	8006824 <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 8006a98:	8a7a      	ldrh	r2, [r7, #18]
 8006a9a:	4b2c      	ldr	r3, [pc, #176]	; (8006b4c <TP_GetState+0x110>)
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d905      	bls.n	8006aae <TP_GetState+0x72>
 8006aa2:	8a7a      	ldrh	r2, [r7, #18]
 8006aa4:	4b29      	ldr	r3, [pc, #164]	; (8006b4c <TP_GetState+0x110>)
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	e004      	b.n	8006ab8 <TP_GetState+0x7c>
 8006aae:	4b27      	ldr	r3, [pc, #156]	; (8006b4c <TP_GetState+0x110>)
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	8a7b      	ldrh	r3, [r7, #18]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 8006aba:	8a3a      	ldrh	r2, [r7, #16]
 8006abc:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <TP_GetState+0x114>)
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d905      	bls.n	8006ad0 <TP_GetState+0x94>
 8006ac4:	8a3a      	ldrh	r2, [r7, #16]
 8006ac6:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <TP_GetState+0x114>)
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	e004      	b.n	8006ada <TP_GetState+0x9e>
 8006ad0:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <TP_GetState+0x114>)
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	8a3b      	ldrh	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 8006adc:	8afa      	ldrh	r2, [r7, #22]
 8006ade:	8abb      	ldrh	r3, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2b05      	cmp	r3, #5
 8006ae4:	dd05      	ble.n	8006af2 <TP_GetState+0xb6>
		{
			_x = x;
 8006ae6:	8a7a      	ldrh	r2, [r7, #18]
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <TP_GetState+0x110>)
 8006aea:	801a      	strh	r2, [r3, #0]
			_y = y;
 8006aec:	8a3a      	ldrh	r2, [r7, #16]
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <TP_GetState+0x114>)
 8006af0:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 8006af2:	4818      	ldr	r0, [pc, #96]	; (8006b54 <TP_GetState+0x118>)
 8006af4:	f7ff fedc 	bl	80068b0 <readZ>
	}

	state->x = _x;
 8006af8:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <TP_GetState+0x110>)
 8006afa:	881a      	ldrh	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <TP_GetState+0x114>)
 8006b02:	881a      	ldrh	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <TP_GetState+0x118>)
 8006b0a:	881a      	ldrh	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 8006b10:	234b      	movs	r3, #75	; 0x4b
 8006b12:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 8006b14:	2301      	movs	r3, #1
 8006b16:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8006b18:	f107 020c 	add.w	r2, r7, #12
 8006b1c:	2364      	movs	r3, #100	; 0x64
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2302      	movs	r3, #2
 8006b22:	2182      	movs	r1, #130	; 0x82
 8006b24:	4808      	ldr	r0, [pc, #32]	; (8006b48 <TP_GetState+0x10c>)
 8006b26:	f7fa fee5 	bl	80018f4 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8006b2e:	f107 020c 	add.w	r2, r7, #12
 8006b32:	2364      	movs	r3, #100	; 0x64
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2302      	movs	r3, #2
 8006b38:	2182      	movs	r1, #130	; 0x82
 8006b3a:	4803      	ldr	r0, [pc, #12]	; (8006b48 <TP_GetState+0x10c>)
 8006b3c:	f7fa feda 	bl	80018f4 <HAL_I2C_Master_Transmit>
}
 8006b40:	bf00      	nop
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20003e70 	.word	0x20003e70
 8006b4c:	20003e44 	.word	0x20003e44
 8006b50:	20003e46 	.word	0x20003e46
 8006b54:	20003e48 	.word	0x20003e48

08006b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b90 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b5e:	e003      	b.n	8006b68 <LoopCopyDataInit>

08006b60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b66:	3104      	adds	r1, #4

08006b68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b68:	480b      	ldr	r0, [pc, #44]	; (8006b98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b70:	d3f6      	bcc.n	8006b60 <CopyDataInit>
  ldr  r2, =_sbss
 8006b72:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b74:	e002      	b.n	8006b7c <LoopFillZerobss>

08006b76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b78:	f842 3b04 	str.w	r3, [r2], #4

08006b7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b7c:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b80:	d3f9      	bcc.n	8006b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b82:	f7ff fd13 	bl	80065ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b86:	f000 f811 	bl	8006bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b8a:	f7fe ff29 	bl	80059e0 <main>
  bx  lr    
 8006b8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006b90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006b94:	08007514 	.word	0x08007514
  ldr  r0, =_sdata
 8006b98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b9c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8006ba0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8006ba4:	2000404c 	.word	0x2000404c

08006ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ba8:	e7fe      	b.n	8006ba8 <ADC_IRQHandler>
	...

08006bac <__libc_init_array>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	4e0d      	ldr	r6, [pc, #52]	; (8006be4 <__libc_init_array+0x38>)
 8006bb0:	4c0d      	ldr	r4, [pc, #52]	; (8006be8 <__libc_init_array+0x3c>)
 8006bb2:	1ba4      	subs	r4, r4, r6
 8006bb4:	10a4      	asrs	r4, r4, #2
 8006bb6:	2500      	movs	r5, #0
 8006bb8:	42a5      	cmp	r5, r4
 8006bba:	d109      	bne.n	8006bd0 <__libc_init_array+0x24>
 8006bbc:	4e0b      	ldr	r6, [pc, #44]	; (8006bec <__libc_init_array+0x40>)
 8006bbe:	4c0c      	ldr	r4, [pc, #48]	; (8006bf0 <__libc_init_array+0x44>)
 8006bc0:	f000 fc4c 	bl	800745c <_init>
 8006bc4:	1ba4      	subs	r4, r4, r6
 8006bc6:	10a4      	asrs	r4, r4, #2
 8006bc8:	2500      	movs	r5, #0
 8006bca:	42a5      	cmp	r5, r4
 8006bcc:	d105      	bne.n	8006bda <__libc_init_array+0x2e>
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bd4:	4798      	blx	r3
 8006bd6:	3501      	adds	r5, #1
 8006bd8:	e7ee      	b.n	8006bb8 <__libc_init_array+0xc>
 8006bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bde:	4798      	blx	r3
 8006be0:	3501      	adds	r5, #1
 8006be2:	e7f2      	b.n	8006bca <__libc_init_array+0x1e>
 8006be4:	0800750c 	.word	0x0800750c
 8006be8:	0800750c 	.word	0x0800750c
 8006bec:	0800750c 	.word	0x0800750c
 8006bf0:	08007510 	.word	0x08007510

08006bf4 <memcpy>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	1e43      	subs	r3, r0, #1
 8006bf8:	440a      	add	r2, r1
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	d100      	bne.n	8006c00 <memcpy+0xc>
 8006bfe:	bd10      	pop	{r4, pc}
 8006c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c08:	e7f7      	b.n	8006bfa <memcpy+0x6>

08006c0a <memset>:
 8006c0a:	4402      	add	r2, r0
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d100      	bne.n	8006c14 <memset+0xa>
 8006c12:	4770      	bx	lr
 8006c14:	f803 1b01 	strb.w	r1, [r3], #1
 8006c18:	e7f9      	b.n	8006c0e <memset+0x4>
	...

08006c1c <siprintf>:
 8006c1c:	b40e      	push	{r1, r2, r3}
 8006c1e:	b500      	push	{lr}
 8006c20:	b09c      	sub	sp, #112	; 0x70
 8006c22:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006c26:	ab1d      	add	r3, sp, #116	; 0x74
 8006c28:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006c2c:	9002      	str	r0, [sp, #8]
 8006c2e:	9006      	str	r0, [sp, #24]
 8006c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c34:	480a      	ldr	r0, [pc, #40]	; (8006c60 <siprintf+0x44>)
 8006c36:	9104      	str	r1, [sp, #16]
 8006c38:	9107      	str	r1, [sp, #28]
 8006c3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c42:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	a902      	add	r1, sp, #8
 8006c4c:	f000 f866 	bl	8006d1c <_svfiprintf_r>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	b01c      	add	sp, #112	; 0x70
 8006c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c5c:	b003      	add	sp, #12
 8006c5e:	4770      	bx	lr
 8006c60:	20000014 	.word	0x20000014

08006c64 <__ssputs_r>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	688e      	ldr	r6, [r1, #8]
 8006c6a:	429e      	cmp	r6, r3
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	4691      	mov	r9, r2
 8006c72:	4698      	mov	r8, r3
 8006c74:	d835      	bhi.n	8006ce2 <__ssputs_r+0x7e>
 8006c76:	898a      	ldrh	r2, [r1, #12]
 8006c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c7c:	d031      	beq.n	8006ce2 <__ssputs_r+0x7e>
 8006c7e:	6825      	ldr	r5, [r4, #0]
 8006c80:	6909      	ldr	r1, [r1, #16]
 8006c82:	1a6f      	subs	r7, r5, r1
 8006c84:	6965      	ldr	r5, [r4, #20]
 8006c86:	2302      	movs	r3, #2
 8006c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c90:	f108 0301 	add.w	r3, r8, #1
 8006c94:	443b      	add	r3, r7
 8006c96:	429d      	cmp	r5, r3
 8006c98:	bf38      	it	cc
 8006c9a:	461d      	movcc	r5, r3
 8006c9c:	0553      	lsls	r3, r2, #21
 8006c9e:	d531      	bpl.n	8006d04 <__ssputs_r+0xa0>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f000 fb2d 	bl	8007300 <_malloc_r>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	b950      	cbnz	r0, 8006cc0 <__ssputs_r+0x5c>
 8006caa:	230c      	movs	r3, #12
 8006cac:	f8ca 3000 	str.w	r3, [sl]
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc0:	463a      	mov	r2, r7
 8006cc2:	6921      	ldr	r1, [r4, #16]
 8006cc4:	f7ff ff96 	bl	8006bf4 <memcpy>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	6126      	str	r6, [r4, #16]
 8006cd6:	6165      	str	r5, [r4, #20]
 8006cd8:	443e      	add	r6, r7
 8006cda:	1bed      	subs	r5, r5, r7
 8006cdc:	6026      	str	r6, [r4, #0]
 8006cde:	60a5      	str	r5, [r4, #8]
 8006ce0:	4646      	mov	r6, r8
 8006ce2:	4546      	cmp	r6, r8
 8006ce4:	bf28      	it	cs
 8006ce6:	4646      	movcs	r6, r8
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4649      	mov	r1, r9
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	f000 fa9f 	bl	8007230 <memmove>
 8006cf2:	68a3      	ldr	r3, [r4, #8]
 8006cf4:	1b9b      	subs	r3, r3, r6
 8006cf6:	60a3      	str	r3, [r4, #8]
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	441e      	add	r6, r3
 8006cfc:	6026      	str	r6, [r4, #0]
 8006cfe:	2000      	movs	r0, #0
 8006d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d04:	462a      	mov	r2, r5
 8006d06:	f000 fb59 	bl	80073bc <_realloc_r>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1e1      	bne.n	8006cd4 <__ssputs_r+0x70>
 8006d10:	6921      	ldr	r1, [r4, #16]
 8006d12:	4650      	mov	r0, sl
 8006d14:	f000 faa6 	bl	8007264 <_free_r>
 8006d18:	e7c7      	b.n	8006caa <__ssputs_r+0x46>
	...

08006d1c <_svfiprintf_r>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	b09d      	sub	sp, #116	; 0x74
 8006d22:	4680      	mov	r8, r0
 8006d24:	9303      	str	r3, [sp, #12]
 8006d26:	898b      	ldrh	r3, [r1, #12]
 8006d28:	061c      	lsls	r4, r3, #24
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	d50f      	bpl.n	8006d50 <_svfiprintf_r+0x34>
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	b96b      	cbnz	r3, 8006d50 <_svfiprintf_r+0x34>
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	f000 fae3 	bl	8007300 <_malloc_r>
 8006d3a:	6028      	str	r0, [r5, #0]
 8006d3c:	6128      	str	r0, [r5, #16]
 8006d3e:	b928      	cbnz	r0, 8006d4c <_svfiprintf_r+0x30>
 8006d40:	230c      	movs	r3, #12
 8006d42:	f8c8 3000 	str.w	r3, [r8]
 8006d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d4a:	e0c5      	b.n	8006ed8 <_svfiprintf_r+0x1bc>
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	616b      	str	r3, [r5, #20]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	2320      	movs	r3, #32
 8006d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d5a:	2330      	movs	r3, #48	; 0x30
 8006d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d60:	f04f 0b01 	mov.w	fp, #1
 8006d64:	4637      	mov	r7, r6
 8006d66:	463c      	mov	r4, r7
 8006d68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d13c      	bne.n	8006dea <_svfiprintf_r+0xce>
 8006d70:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d74:	d00b      	beq.n	8006d8e <_svfiprintf_r+0x72>
 8006d76:	4653      	mov	r3, sl
 8006d78:	4632      	mov	r2, r6
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	f7ff ff71 	bl	8006c64 <__ssputs_r>
 8006d82:	3001      	adds	r0, #1
 8006d84:	f000 80a3 	beq.w	8006ece <_svfiprintf_r+0x1b2>
 8006d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8a:	4453      	add	r3, sl
 8006d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8e:	783b      	ldrb	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 809c 	beq.w	8006ece <_svfiprintf_r+0x1b2>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	9205      	str	r2, [sp, #20]
 8006da2:	9306      	str	r3, [sp, #24]
 8006da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006da8:	931a      	str	r3, [sp, #104]	; 0x68
 8006daa:	2205      	movs	r2, #5
 8006dac:	7821      	ldrb	r1, [r4, #0]
 8006dae:	4850      	ldr	r0, [pc, #320]	; (8006ef0 <_svfiprintf_r+0x1d4>)
 8006db0:	f7f9 fa1e 	bl	80001f0 <memchr>
 8006db4:	1c67      	adds	r7, r4, #1
 8006db6:	9b04      	ldr	r3, [sp, #16]
 8006db8:	b9d8      	cbnz	r0, 8006df2 <_svfiprintf_r+0xd6>
 8006dba:	06d9      	lsls	r1, r3, #27
 8006dbc:	bf44      	itt	mi
 8006dbe:	2220      	movmi	r2, #32
 8006dc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dc4:	071a      	lsls	r2, r3, #28
 8006dc6:	bf44      	itt	mi
 8006dc8:	222b      	movmi	r2, #43	; 0x2b
 8006dca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dce:	7822      	ldrb	r2, [r4, #0]
 8006dd0:	2a2a      	cmp	r2, #42	; 0x2a
 8006dd2:	d016      	beq.n	8006e02 <_svfiprintf_r+0xe6>
 8006dd4:	9a07      	ldr	r2, [sp, #28]
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	200a      	movs	r0, #10
 8006dda:	4627      	mov	r7, r4
 8006ddc:	3401      	adds	r4, #1
 8006dde:	783b      	ldrb	r3, [r7, #0]
 8006de0:	3b30      	subs	r3, #48	; 0x30
 8006de2:	2b09      	cmp	r3, #9
 8006de4:	d951      	bls.n	8006e8a <_svfiprintf_r+0x16e>
 8006de6:	b1c9      	cbz	r1, 8006e1c <_svfiprintf_r+0x100>
 8006de8:	e011      	b.n	8006e0e <_svfiprintf_r+0xf2>
 8006dea:	2b25      	cmp	r3, #37	; 0x25
 8006dec:	d0c0      	beq.n	8006d70 <_svfiprintf_r+0x54>
 8006dee:	4627      	mov	r7, r4
 8006df0:	e7b9      	b.n	8006d66 <_svfiprintf_r+0x4a>
 8006df2:	4a3f      	ldr	r2, [pc, #252]	; (8006ef0 <_svfiprintf_r+0x1d4>)
 8006df4:	1a80      	subs	r0, r0, r2
 8006df6:	fa0b f000 	lsl.w	r0, fp, r0
 8006dfa:	4318      	orrs	r0, r3
 8006dfc:	9004      	str	r0, [sp, #16]
 8006dfe:	463c      	mov	r4, r7
 8006e00:	e7d3      	b.n	8006daa <_svfiprintf_r+0x8e>
 8006e02:	9a03      	ldr	r2, [sp, #12]
 8006e04:	1d11      	adds	r1, r2, #4
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	9103      	str	r1, [sp, #12]
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	db01      	blt.n	8006e12 <_svfiprintf_r+0xf6>
 8006e0e:	9207      	str	r2, [sp, #28]
 8006e10:	e004      	b.n	8006e1c <_svfiprintf_r+0x100>
 8006e12:	4252      	negs	r2, r2
 8006e14:	f043 0302 	orr.w	r3, r3, #2
 8006e18:	9207      	str	r2, [sp, #28]
 8006e1a:	9304      	str	r3, [sp, #16]
 8006e1c:	783b      	ldrb	r3, [r7, #0]
 8006e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e20:	d10e      	bne.n	8006e40 <_svfiprintf_r+0x124>
 8006e22:	787b      	ldrb	r3, [r7, #1]
 8006e24:	2b2a      	cmp	r3, #42	; 0x2a
 8006e26:	f107 0101 	add.w	r1, r7, #1
 8006e2a:	d132      	bne.n	8006e92 <_svfiprintf_r+0x176>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	9203      	str	r2, [sp, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfb8      	it	lt
 8006e38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e3c:	3702      	adds	r7, #2
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	4c2c      	ldr	r4, [pc, #176]	; (8006ef4 <_svfiprintf_r+0x1d8>)
 8006e42:	7839      	ldrb	r1, [r7, #0]
 8006e44:	2203      	movs	r2, #3
 8006e46:	4620      	mov	r0, r4
 8006e48:	f7f9 f9d2 	bl	80001f0 <memchr>
 8006e4c:	b138      	cbz	r0, 8006e5e <_svfiprintf_r+0x142>
 8006e4e:	2340      	movs	r3, #64	; 0x40
 8006e50:	1b00      	subs	r0, r0, r4
 8006e52:	fa03 f000 	lsl.w	r0, r3, r0
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	4303      	orrs	r3, r0
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	3701      	adds	r7, #1
 8006e5e:	7839      	ldrb	r1, [r7, #0]
 8006e60:	4825      	ldr	r0, [pc, #148]	; (8006ef8 <_svfiprintf_r+0x1dc>)
 8006e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e66:	2206      	movs	r2, #6
 8006e68:	1c7e      	adds	r6, r7, #1
 8006e6a:	f7f9 f9c1 	bl	80001f0 <memchr>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d035      	beq.n	8006ede <_svfiprintf_r+0x1c2>
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <_svfiprintf_r+0x1e0>)
 8006e74:	b9fb      	cbnz	r3, 8006eb6 <_svfiprintf_r+0x19a>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	3307      	adds	r3, #7
 8006e7a:	f023 0307 	bic.w	r3, r3, #7
 8006e7e:	3308      	adds	r3, #8
 8006e80:	9303      	str	r3, [sp, #12]
 8006e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e84:	444b      	add	r3, r9
 8006e86:	9309      	str	r3, [sp, #36]	; 0x24
 8006e88:	e76c      	b.n	8006d64 <_svfiprintf_r+0x48>
 8006e8a:	fb00 3202 	mla	r2, r0, r2, r3
 8006e8e:	2101      	movs	r1, #1
 8006e90:	e7a3      	b.n	8006dda <_svfiprintf_r+0xbe>
 8006e92:	2300      	movs	r3, #0
 8006e94:	9305      	str	r3, [sp, #20]
 8006e96:	4618      	mov	r0, r3
 8006e98:	240a      	movs	r4, #10
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	3101      	adds	r1, #1
 8006e9e:	783a      	ldrb	r2, [r7, #0]
 8006ea0:	3a30      	subs	r2, #48	; 0x30
 8006ea2:	2a09      	cmp	r2, #9
 8006ea4:	d903      	bls.n	8006eae <_svfiprintf_r+0x192>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0ca      	beq.n	8006e40 <_svfiprintf_r+0x124>
 8006eaa:	9005      	str	r0, [sp, #20]
 8006eac:	e7c8      	b.n	8006e40 <_svfiprintf_r+0x124>
 8006eae:	fb04 2000 	mla	r0, r4, r0, r2
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e7f1      	b.n	8006e9a <_svfiprintf_r+0x17e>
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <_svfiprintf_r+0x1e4>)
 8006ebe:	a904      	add	r1, sp, #16
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	f3af 8000 	nop.w
 8006ec6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006eca:	4681      	mov	r9, r0
 8006ecc:	d1d9      	bne.n	8006e82 <_svfiprintf_r+0x166>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	065b      	lsls	r3, r3, #25
 8006ed2:	f53f af38 	bmi.w	8006d46 <_svfiprintf_r+0x2a>
 8006ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ed8:	b01d      	add	sp, #116	; 0x74
 8006eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <_svfiprintf_r+0x1e4>)
 8006ee6:	a904      	add	r1, sp, #16
 8006ee8:	4640      	mov	r0, r8
 8006eea:	f000 f881 	bl	8006ff0 <_printf_i>
 8006eee:	e7ea      	b.n	8006ec6 <_svfiprintf_r+0x1aa>
 8006ef0:	080074d0 	.word	0x080074d0
 8006ef4:	080074d6 	.word	0x080074d6
 8006ef8:	080074da 	.word	0x080074da
 8006efc:	00000000 	.word	0x00000000
 8006f00:	08006c65 	.word	0x08006c65

08006f04 <_printf_common>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	4691      	mov	r9, r2
 8006f0a:	461f      	mov	r7, r3
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	bfb8      	it	lt
 8006f18:	4613      	movlt	r3, r2
 8006f1a:	f8c9 3000 	str.w	r3, [r9]
 8006f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f22:	4606      	mov	r6, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	b112      	cbz	r2, 8006f2e <_printf_common+0x2a>
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c9 3000 	str.w	r3, [r9]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	0699      	lsls	r1, r3, #26
 8006f32:	bf42      	ittt	mi
 8006f34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f38:	3302      	addmi	r3, #2
 8006f3a:	f8c9 3000 	strmi.w	r3, [r9]
 8006f3e:	6825      	ldr	r5, [r4, #0]
 8006f40:	f015 0506 	ands.w	r5, r5, #6
 8006f44:	d107      	bne.n	8006f56 <_printf_common+0x52>
 8006f46:	f104 0a19 	add.w	sl, r4, #25
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	429d      	cmp	r5, r3
 8006f54:	db29      	blt.n	8006faa <_printf_common+0xa6>
 8006f56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	3300      	adds	r3, #0
 8006f5e:	bf18      	it	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	0692      	lsls	r2, r2, #26
 8006f64:	d42e      	bmi.n	8006fc4 <_printf_common+0xc0>
 8006f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	47c0      	blx	r8
 8006f70:	3001      	adds	r0, #1
 8006f72:	d021      	beq.n	8006fb8 <_printf_common+0xb4>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	68e5      	ldr	r5, [r4, #12]
 8006f78:	f8d9 2000 	ldr.w	r2, [r9]
 8006f7c:	f003 0306 	and.w	r3, r3, #6
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	bf08      	it	eq
 8006f84:	1aad      	subeq	r5, r5, r2
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	6922      	ldr	r2, [r4, #16]
 8006f8a:	bf0c      	ite	eq
 8006f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f90:	2500      	movne	r5, #0
 8006f92:	4293      	cmp	r3, r2
 8006f94:	bfc4      	itt	gt
 8006f96:	1a9b      	subgt	r3, r3, r2
 8006f98:	18ed      	addgt	r5, r5, r3
 8006f9a:	f04f 0900 	mov.w	r9, #0
 8006f9e:	341a      	adds	r4, #26
 8006fa0:	454d      	cmp	r5, r9
 8006fa2:	d11b      	bne.n	8006fdc <_printf_common+0xd8>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006faa:	2301      	movs	r3, #1
 8006fac:	4652      	mov	r2, sl
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	47c0      	blx	r8
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d103      	bne.n	8006fc0 <_printf_common+0xbc>
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	e7c2      	b.n	8006f4a <_printf_common+0x46>
 8006fc4:	18e1      	adds	r1, r4, r3
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	2030      	movs	r0, #48	; 0x30
 8006fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fce:	4422      	add	r2, r4
 8006fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd8:	3302      	adds	r3, #2
 8006fda:	e7c4      	b.n	8006f66 <_printf_common+0x62>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d0e6      	beq.n	8006fb8 <_printf_common+0xb4>
 8006fea:	f109 0901 	add.w	r9, r9, #1
 8006fee:	e7d7      	b.n	8006fa0 <_printf_common+0x9c>

08006ff0 <_printf_i>:
 8006ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4617      	mov	r7, r2
 8006ff6:	7e0a      	ldrb	r2, [r1, #24]
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	2a6e      	cmp	r2, #110	; 0x6e
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	4606      	mov	r6, r0
 8007000:	460c      	mov	r4, r1
 8007002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007004:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007008:	f000 80bc 	beq.w	8007184 <_printf_i+0x194>
 800700c:	d81a      	bhi.n	8007044 <_printf_i+0x54>
 800700e:	2a63      	cmp	r2, #99	; 0x63
 8007010:	d02e      	beq.n	8007070 <_printf_i+0x80>
 8007012:	d80a      	bhi.n	800702a <_printf_i+0x3a>
 8007014:	2a00      	cmp	r2, #0
 8007016:	f000 80c8 	beq.w	80071aa <_printf_i+0x1ba>
 800701a:	2a58      	cmp	r2, #88	; 0x58
 800701c:	f000 808a 	beq.w	8007134 <_printf_i+0x144>
 8007020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007024:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007028:	e02a      	b.n	8007080 <_printf_i+0x90>
 800702a:	2a64      	cmp	r2, #100	; 0x64
 800702c:	d001      	beq.n	8007032 <_printf_i+0x42>
 800702e:	2a69      	cmp	r2, #105	; 0x69
 8007030:	d1f6      	bne.n	8007020 <_printf_i+0x30>
 8007032:	6821      	ldr	r1, [r4, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	f011 0f80 	tst.w	r1, #128	; 0x80
 800703a:	d023      	beq.n	8007084 <_printf_i+0x94>
 800703c:	1d11      	adds	r1, r2, #4
 800703e:	6019      	str	r1, [r3, #0]
 8007040:	6813      	ldr	r3, [r2, #0]
 8007042:	e027      	b.n	8007094 <_printf_i+0xa4>
 8007044:	2a73      	cmp	r2, #115	; 0x73
 8007046:	f000 80b4 	beq.w	80071b2 <_printf_i+0x1c2>
 800704a:	d808      	bhi.n	800705e <_printf_i+0x6e>
 800704c:	2a6f      	cmp	r2, #111	; 0x6f
 800704e:	d02a      	beq.n	80070a6 <_printf_i+0xb6>
 8007050:	2a70      	cmp	r2, #112	; 0x70
 8007052:	d1e5      	bne.n	8007020 <_printf_i+0x30>
 8007054:	680a      	ldr	r2, [r1, #0]
 8007056:	f042 0220 	orr.w	r2, r2, #32
 800705a:	600a      	str	r2, [r1, #0]
 800705c:	e003      	b.n	8007066 <_printf_i+0x76>
 800705e:	2a75      	cmp	r2, #117	; 0x75
 8007060:	d021      	beq.n	80070a6 <_printf_i+0xb6>
 8007062:	2a78      	cmp	r2, #120	; 0x78
 8007064:	d1dc      	bne.n	8007020 <_printf_i+0x30>
 8007066:	2278      	movs	r2, #120	; 0x78
 8007068:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800706c:	496e      	ldr	r1, [pc, #440]	; (8007228 <_printf_i+0x238>)
 800706e:	e064      	b.n	800713a <_printf_i+0x14a>
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007076:	1d11      	adds	r1, r2, #4
 8007078:	6019      	str	r1, [r3, #0]
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007080:	2301      	movs	r3, #1
 8007082:	e0a3      	b.n	80071cc <_printf_i+0x1dc>
 8007084:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007088:	f102 0104 	add.w	r1, r2, #4
 800708c:	6019      	str	r1, [r3, #0]
 800708e:	d0d7      	beq.n	8007040 <_printf_i+0x50>
 8007090:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007094:	2b00      	cmp	r3, #0
 8007096:	da03      	bge.n	80070a0 <_printf_i+0xb0>
 8007098:	222d      	movs	r2, #45	; 0x2d
 800709a:	425b      	negs	r3, r3
 800709c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070a0:	4962      	ldr	r1, [pc, #392]	; (800722c <_printf_i+0x23c>)
 80070a2:	220a      	movs	r2, #10
 80070a4:	e017      	b.n	80070d6 <_printf_i+0xe6>
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	6819      	ldr	r1, [r3, #0]
 80070aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80070ae:	d003      	beq.n	80070b8 <_printf_i+0xc8>
 80070b0:	1d08      	adds	r0, r1, #4
 80070b2:	6018      	str	r0, [r3, #0]
 80070b4:	680b      	ldr	r3, [r1, #0]
 80070b6:	e006      	b.n	80070c6 <_printf_i+0xd6>
 80070b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070bc:	f101 0004 	add.w	r0, r1, #4
 80070c0:	6018      	str	r0, [r3, #0]
 80070c2:	d0f7      	beq.n	80070b4 <_printf_i+0xc4>
 80070c4:	880b      	ldrh	r3, [r1, #0]
 80070c6:	4959      	ldr	r1, [pc, #356]	; (800722c <_printf_i+0x23c>)
 80070c8:	2a6f      	cmp	r2, #111	; 0x6f
 80070ca:	bf14      	ite	ne
 80070cc:	220a      	movne	r2, #10
 80070ce:	2208      	moveq	r2, #8
 80070d0:	2000      	movs	r0, #0
 80070d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80070d6:	6865      	ldr	r5, [r4, #4]
 80070d8:	60a5      	str	r5, [r4, #8]
 80070da:	2d00      	cmp	r5, #0
 80070dc:	f2c0 809c 	blt.w	8007218 <_printf_i+0x228>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	f020 0004 	bic.w	r0, r0, #4
 80070e6:	6020      	str	r0, [r4, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d13f      	bne.n	800716c <_printf_i+0x17c>
 80070ec:	2d00      	cmp	r5, #0
 80070ee:	f040 8095 	bne.w	800721c <_printf_i+0x22c>
 80070f2:	4675      	mov	r5, lr
 80070f4:	2a08      	cmp	r2, #8
 80070f6:	d10b      	bne.n	8007110 <_printf_i+0x120>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	07da      	lsls	r2, r3, #31
 80070fc:	d508      	bpl.n	8007110 <_printf_i+0x120>
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	6862      	ldr	r2, [r4, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	bfde      	ittt	le
 8007106:	2330      	movle	r3, #48	; 0x30
 8007108:	f805 3c01 	strble.w	r3, [r5, #-1]
 800710c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007110:	ebae 0305 	sub.w	r3, lr, r5
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	f8cd 8000 	str.w	r8, [sp]
 800711a:	463b      	mov	r3, r7
 800711c:	aa03      	add	r2, sp, #12
 800711e:	4621      	mov	r1, r4
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff feef 	bl	8006f04 <_printf_common>
 8007126:	3001      	adds	r0, #1
 8007128:	d155      	bne.n	80071d6 <_printf_i+0x1e6>
 800712a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800712e:	b005      	add	sp, #20
 8007130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007134:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007138:	493c      	ldr	r1, [pc, #240]	; (800722c <_printf_i+0x23c>)
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007142:	f100 0504 	add.w	r5, r0, #4
 8007146:	601d      	str	r5, [r3, #0]
 8007148:	d001      	beq.n	800714e <_printf_i+0x15e>
 800714a:	6803      	ldr	r3, [r0, #0]
 800714c:	e002      	b.n	8007154 <_printf_i+0x164>
 800714e:	0655      	lsls	r5, r2, #25
 8007150:	d5fb      	bpl.n	800714a <_printf_i+0x15a>
 8007152:	8803      	ldrh	r3, [r0, #0]
 8007154:	07d0      	lsls	r0, r2, #31
 8007156:	bf44      	itt	mi
 8007158:	f042 0220 	orrmi.w	r2, r2, #32
 800715c:	6022      	strmi	r2, [r4, #0]
 800715e:	b91b      	cbnz	r3, 8007168 <_printf_i+0x178>
 8007160:	6822      	ldr	r2, [r4, #0]
 8007162:	f022 0220 	bic.w	r2, r2, #32
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	2210      	movs	r2, #16
 800716a:	e7b1      	b.n	80070d0 <_printf_i+0xe0>
 800716c:	4675      	mov	r5, lr
 800716e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007172:	fb02 3310 	mls	r3, r2, r0, r3
 8007176:	5ccb      	ldrb	r3, [r1, r3]
 8007178:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800717c:	4603      	mov	r3, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	d1f5      	bne.n	800716e <_printf_i+0x17e>
 8007182:	e7b7      	b.n	80070f4 <_printf_i+0x104>
 8007184:	6808      	ldr	r0, [r1, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	6949      	ldr	r1, [r1, #20]
 800718a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800718e:	d004      	beq.n	800719a <_printf_i+0x1aa>
 8007190:	1d10      	adds	r0, r2, #4
 8007192:	6018      	str	r0, [r3, #0]
 8007194:	6813      	ldr	r3, [r2, #0]
 8007196:	6019      	str	r1, [r3, #0]
 8007198:	e007      	b.n	80071aa <_printf_i+0x1ba>
 800719a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800719e:	f102 0004 	add.w	r0, r2, #4
 80071a2:	6018      	str	r0, [r3, #0]
 80071a4:	6813      	ldr	r3, [r2, #0]
 80071a6:	d0f6      	beq.n	8007196 <_printf_i+0x1a6>
 80071a8:	8019      	strh	r1, [r3, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	4675      	mov	r5, lr
 80071b0:	e7b1      	b.n	8007116 <_printf_i+0x126>
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	1d11      	adds	r1, r2, #4
 80071b6:	6019      	str	r1, [r3, #0]
 80071b8:	6815      	ldr	r5, [r2, #0]
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	2100      	movs	r1, #0
 80071be:	4628      	mov	r0, r5
 80071c0:	f7f9 f816 	bl	80001f0 <memchr>
 80071c4:	b108      	cbz	r0, 80071ca <_printf_i+0x1da>
 80071c6:	1b40      	subs	r0, r0, r5
 80071c8:	6060      	str	r0, [r4, #4]
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	2300      	movs	r3, #0
 80071d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d4:	e79f      	b.n	8007116 <_printf_i+0x126>
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	462a      	mov	r2, r5
 80071da:	4639      	mov	r1, r7
 80071dc:	4630      	mov	r0, r6
 80071de:	47c0      	blx	r8
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0a2      	beq.n	800712a <_printf_i+0x13a>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	079b      	lsls	r3, r3, #30
 80071e8:	d507      	bpl.n	80071fa <_printf_i+0x20a>
 80071ea:	2500      	movs	r5, #0
 80071ec:	f104 0919 	add.w	r9, r4, #25
 80071f0:	68e3      	ldr	r3, [r4, #12]
 80071f2:	9a03      	ldr	r2, [sp, #12]
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	429d      	cmp	r5, r3
 80071f8:	db05      	blt.n	8007206 <_printf_i+0x216>
 80071fa:	68e0      	ldr	r0, [r4, #12]
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	4298      	cmp	r0, r3
 8007200:	bfb8      	it	lt
 8007202:	4618      	movlt	r0, r3
 8007204:	e793      	b.n	800712e <_printf_i+0x13e>
 8007206:	2301      	movs	r3, #1
 8007208:	464a      	mov	r2, r9
 800720a:	4639      	mov	r1, r7
 800720c:	4630      	mov	r0, r6
 800720e:	47c0      	blx	r8
 8007210:	3001      	adds	r0, #1
 8007212:	d08a      	beq.n	800712a <_printf_i+0x13a>
 8007214:	3501      	adds	r5, #1
 8007216:	e7eb      	b.n	80071f0 <_printf_i+0x200>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1a7      	bne.n	800716c <_printf_i+0x17c>
 800721c:	780b      	ldrb	r3, [r1, #0]
 800721e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007222:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007226:	e765      	b.n	80070f4 <_printf_i+0x104>
 8007228:	080074f2 	.word	0x080074f2
 800722c:	080074e1 	.word	0x080074e1

08007230 <memmove>:
 8007230:	4288      	cmp	r0, r1
 8007232:	b510      	push	{r4, lr}
 8007234:	eb01 0302 	add.w	r3, r1, r2
 8007238:	d803      	bhi.n	8007242 <memmove+0x12>
 800723a:	1e42      	subs	r2, r0, #1
 800723c:	4299      	cmp	r1, r3
 800723e:	d10c      	bne.n	800725a <memmove+0x2a>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	4298      	cmp	r0, r3
 8007244:	d2f9      	bcs.n	800723a <memmove+0xa>
 8007246:	1881      	adds	r1, r0, r2
 8007248:	1ad2      	subs	r2, r2, r3
 800724a:	42d3      	cmn	r3, r2
 800724c:	d100      	bne.n	8007250 <memmove+0x20>
 800724e:	bd10      	pop	{r4, pc}
 8007250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007254:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007258:	e7f7      	b.n	800724a <memmove+0x1a>
 800725a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007262:	e7eb      	b.n	800723c <memmove+0xc>

08007264 <_free_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4605      	mov	r5, r0
 8007268:	2900      	cmp	r1, #0
 800726a:	d045      	beq.n	80072f8 <_free_r+0x94>
 800726c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007270:	1f0c      	subs	r4, r1, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfb8      	it	lt
 8007276:	18e4      	addlt	r4, r4, r3
 8007278:	f000 f8d6 	bl	8007428 <__malloc_lock>
 800727c:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <_free_r+0x98>)
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	4610      	mov	r0, r2
 8007282:	b933      	cbnz	r3, 8007292 <_free_r+0x2e>
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	6014      	str	r4, [r2, #0]
 8007288:	4628      	mov	r0, r5
 800728a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800728e:	f000 b8cc 	b.w	800742a <__malloc_unlock>
 8007292:	42a3      	cmp	r3, r4
 8007294:	d90c      	bls.n	80072b0 <_free_r+0x4c>
 8007296:	6821      	ldr	r1, [r4, #0]
 8007298:	1862      	adds	r2, r4, r1
 800729a:	4293      	cmp	r3, r2
 800729c:	bf04      	itt	eq
 800729e:	681a      	ldreq	r2, [r3, #0]
 80072a0:	685b      	ldreq	r3, [r3, #4]
 80072a2:	6063      	str	r3, [r4, #4]
 80072a4:	bf04      	itt	eq
 80072a6:	1852      	addeq	r2, r2, r1
 80072a8:	6022      	streq	r2, [r4, #0]
 80072aa:	6004      	str	r4, [r0, #0]
 80072ac:	e7ec      	b.n	8007288 <_free_r+0x24>
 80072ae:	4613      	mov	r3, r2
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	b10a      	cbz	r2, 80072b8 <_free_r+0x54>
 80072b4:	42a2      	cmp	r2, r4
 80072b6:	d9fa      	bls.n	80072ae <_free_r+0x4a>
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	1858      	adds	r0, r3, r1
 80072bc:	42a0      	cmp	r0, r4
 80072be:	d10b      	bne.n	80072d8 <_free_r+0x74>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	4401      	add	r1, r0
 80072c4:	1858      	adds	r0, r3, r1
 80072c6:	4282      	cmp	r2, r0
 80072c8:	6019      	str	r1, [r3, #0]
 80072ca:	d1dd      	bne.n	8007288 <_free_r+0x24>
 80072cc:	6810      	ldr	r0, [r2, #0]
 80072ce:	6852      	ldr	r2, [r2, #4]
 80072d0:	605a      	str	r2, [r3, #4]
 80072d2:	4401      	add	r1, r0
 80072d4:	6019      	str	r1, [r3, #0]
 80072d6:	e7d7      	b.n	8007288 <_free_r+0x24>
 80072d8:	d902      	bls.n	80072e0 <_free_r+0x7c>
 80072da:	230c      	movs	r3, #12
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	e7d3      	b.n	8007288 <_free_r+0x24>
 80072e0:	6820      	ldr	r0, [r4, #0]
 80072e2:	1821      	adds	r1, r4, r0
 80072e4:	428a      	cmp	r2, r1
 80072e6:	bf04      	itt	eq
 80072e8:	6811      	ldreq	r1, [r2, #0]
 80072ea:	6852      	ldreq	r2, [r2, #4]
 80072ec:	6062      	str	r2, [r4, #4]
 80072ee:	bf04      	itt	eq
 80072f0:	1809      	addeq	r1, r1, r0
 80072f2:	6021      	streq	r1, [r4, #0]
 80072f4:	605c      	str	r4, [r3, #4]
 80072f6:	e7c7      	b.n	8007288 <_free_r+0x24>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	20003e4c 	.word	0x20003e4c

08007300 <_malloc_r>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	1ccd      	adds	r5, r1, #3
 8007304:	f025 0503 	bic.w	r5, r5, #3
 8007308:	3508      	adds	r5, #8
 800730a:	2d0c      	cmp	r5, #12
 800730c:	bf38      	it	cc
 800730e:	250c      	movcc	r5, #12
 8007310:	2d00      	cmp	r5, #0
 8007312:	4606      	mov	r6, r0
 8007314:	db01      	blt.n	800731a <_malloc_r+0x1a>
 8007316:	42a9      	cmp	r1, r5
 8007318:	d903      	bls.n	8007322 <_malloc_r+0x22>
 800731a:	230c      	movs	r3, #12
 800731c:	6033      	str	r3, [r6, #0]
 800731e:	2000      	movs	r0, #0
 8007320:	bd70      	pop	{r4, r5, r6, pc}
 8007322:	f000 f881 	bl	8007428 <__malloc_lock>
 8007326:	4a23      	ldr	r2, [pc, #140]	; (80073b4 <_malloc_r+0xb4>)
 8007328:	6814      	ldr	r4, [r2, #0]
 800732a:	4621      	mov	r1, r4
 800732c:	b991      	cbnz	r1, 8007354 <_malloc_r+0x54>
 800732e:	4c22      	ldr	r4, [pc, #136]	; (80073b8 <_malloc_r+0xb8>)
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	b91b      	cbnz	r3, 800733c <_malloc_r+0x3c>
 8007334:	4630      	mov	r0, r6
 8007336:	f000 f867 	bl	8007408 <_sbrk_r>
 800733a:	6020      	str	r0, [r4, #0]
 800733c:	4629      	mov	r1, r5
 800733e:	4630      	mov	r0, r6
 8007340:	f000 f862 	bl	8007408 <_sbrk_r>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d126      	bne.n	8007396 <_malloc_r+0x96>
 8007348:	230c      	movs	r3, #12
 800734a:	6033      	str	r3, [r6, #0]
 800734c:	4630      	mov	r0, r6
 800734e:	f000 f86c 	bl	800742a <__malloc_unlock>
 8007352:	e7e4      	b.n	800731e <_malloc_r+0x1e>
 8007354:	680b      	ldr	r3, [r1, #0]
 8007356:	1b5b      	subs	r3, r3, r5
 8007358:	d41a      	bmi.n	8007390 <_malloc_r+0x90>
 800735a:	2b0b      	cmp	r3, #11
 800735c:	d90f      	bls.n	800737e <_malloc_r+0x7e>
 800735e:	600b      	str	r3, [r1, #0]
 8007360:	50cd      	str	r5, [r1, r3]
 8007362:	18cc      	adds	r4, r1, r3
 8007364:	4630      	mov	r0, r6
 8007366:	f000 f860 	bl	800742a <__malloc_unlock>
 800736a:	f104 000b 	add.w	r0, r4, #11
 800736e:	1d23      	adds	r3, r4, #4
 8007370:	f020 0007 	bic.w	r0, r0, #7
 8007374:	1ac3      	subs	r3, r0, r3
 8007376:	d01b      	beq.n	80073b0 <_malloc_r+0xb0>
 8007378:	425a      	negs	r2, r3
 800737a:	50e2      	str	r2, [r4, r3]
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	428c      	cmp	r4, r1
 8007380:	bf0d      	iteet	eq
 8007382:	6863      	ldreq	r3, [r4, #4]
 8007384:	684b      	ldrne	r3, [r1, #4]
 8007386:	6063      	strne	r3, [r4, #4]
 8007388:	6013      	streq	r3, [r2, #0]
 800738a:	bf18      	it	ne
 800738c:	460c      	movne	r4, r1
 800738e:	e7e9      	b.n	8007364 <_malloc_r+0x64>
 8007390:	460c      	mov	r4, r1
 8007392:	6849      	ldr	r1, [r1, #4]
 8007394:	e7ca      	b.n	800732c <_malloc_r+0x2c>
 8007396:	1cc4      	adds	r4, r0, #3
 8007398:	f024 0403 	bic.w	r4, r4, #3
 800739c:	42a0      	cmp	r0, r4
 800739e:	d005      	beq.n	80073ac <_malloc_r+0xac>
 80073a0:	1a21      	subs	r1, r4, r0
 80073a2:	4630      	mov	r0, r6
 80073a4:	f000 f830 	bl	8007408 <_sbrk_r>
 80073a8:	3001      	adds	r0, #1
 80073aa:	d0cd      	beq.n	8007348 <_malloc_r+0x48>
 80073ac:	6025      	str	r5, [r4, #0]
 80073ae:	e7d9      	b.n	8007364 <_malloc_r+0x64>
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
 80073b2:	bf00      	nop
 80073b4:	20003e4c 	.word	0x20003e4c
 80073b8:	20003e50 	.word	0x20003e50

080073bc <_realloc_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	4607      	mov	r7, r0
 80073c0:	4614      	mov	r4, r2
 80073c2:	460e      	mov	r6, r1
 80073c4:	b921      	cbnz	r1, 80073d0 <_realloc_r+0x14>
 80073c6:	4611      	mov	r1, r2
 80073c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073cc:	f7ff bf98 	b.w	8007300 <_malloc_r>
 80073d0:	b922      	cbnz	r2, 80073dc <_realloc_r+0x20>
 80073d2:	f7ff ff47 	bl	8007264 <_free_r>
 80073d6:	4625      	mov	r5, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073dc:	f000 f826 	bl	800742c <_malloc_usable_size_r>
 80073e0:	4284      	cmp	r4, r0
 80073e2:	d90f      	bls.n	8007404 <_realloc_r+0x48>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7ff ff8a 	bl	8007300 <_malloc_r>
 80073ec:	4605      	mov	r5, r0
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d0f2      	beq.n	80073d8 <_realloc_r+0x1c>
 80073f2:	4631      	mov	r1, r6
 80073f4:	4622      	mov	r2, r4
 80073f6:	f7ff fbfd 	bl	8006bf4 <memcpy>
 80073fa:	4631      	mov	r1, r6
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff ff31 	bl	8007264 <_free_r>
 8007402:	e7e9      	b.n	80073d8 <_realloc_r+0x1c>
 8007404:	4635      	mov	r5, r6
 8007406:	e7e7      	b.n	80073d8 <_realloc_r+0x1c>

08007408 <_sbrk_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4c06      	ldr	r4, [pc, #24]	; (8007424 <_sbrk_r+0x1c>)
 800740c:	2300      	movs	r3, #0
 800740e:	4605      	mov	r5, r0
 8007410:	4608      	mov	r0, r1
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	f000 f814 	bl	8007440 <_sbrk>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_sbrk_r+0x1a>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	b103      	cbz	r3, 8007422 <_sbrk_r+0x1a>
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20004048 	.word	0x20004048

08007428 <__malloc_lock>:
 8007428:	4770      	bx	lr

0800742a <__malloc_unlock>:
 800742a:	4770      	bx	lr

0800742c <_malloc_usable_size_r>:
 800742c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007430:	2800      	cmp	r0, #0
 8007432:	f1a0 0004 	sub.w	r0, r0, #4
 8007436:	bfbc      	itt	lt
 8007438:	580b      	ldrlt	r3, [r1, r0]
 800743a:	18c0      	addlt	r0, r0, r3
 800743c:	4770      	bx	lr
	...

08007440 <_sbrk>:
 8007440:	4b04      	ldr	r3, [pc, #16]	; (8007454 <_sbrk+0x14>)
 8007442:	6819      	ldr	r1, [r3, #0]
 8007444:	4602      	mov	r2, r0
 8007446:	b909      	cbnz	r1, 800744c <_sbrk+0xc>
 8007448:	4903      	ldr	r1, [pc, #12]	; (8007458 <_sbrk+0x18>)
 800744a:	6019      	str	r1, [r3, #0]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	4402      	add	r2, r0
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	4770      	bx	lr
 8007454:	20003e54 	.word	0x20003e54
 8007458:	2000404c 	.word	0x2000404c

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
